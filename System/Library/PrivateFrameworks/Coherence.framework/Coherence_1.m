uint64_t sub_1BDE21E58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTRegister<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE21EC0(void *a1, char *a2)
{
  uint64_t *v2;

  return sub_1BDE0DBB0(a1, *a2, *v2, sub_1BDE19DF4);
}

char *sub_1BDE21EE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  char *result;

  result = sub_1BDE0DC94(a1, a2, sub_1BE0A007C);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1BDE21F14(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRSequence<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE21F6C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRSequence<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE21FD4(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRSet<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE2202C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRSet<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE22094(void *a1, char *a2)
{
  uint64_t *v2;

  return sub_1BDE0DBB0(a1, *a2, *v2, sub_1BDE1A3FC);
}

uint64_t sub_1BDE220B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1BDE0E8D8(a1, a2, (void (*)(uint64_t))CRCounter.init(from:), a3);
}

uint64_t sub_1BDE220D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD86DEC(a1, (uint64_t)v8, (uint64_t *)&unk_1ED6F3C10);
  v9 = sub_1BE1B2ABC();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, (uint64_t *)&unk_1ED6F3C10);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_1BE1B2A98();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_1BE1B2AB0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t sub_1BDE2226C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAttributedString<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE222C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAttributedString<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE2232C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE22384@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedSet<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE223EC(void *a1, char *a2)
{
  uint64_t *v2;

  return sub_1BDE0DBB0(a1, *a2, *v2, sub_1BDE1AA04);
}

uint64_t sub_1BDE22410@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1BDE0E8D8(a1, a2, (void (*)(uint64_t))AnyCRDT.init(from:), a3);
}

uint64_t sub_1BDE2242C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTDictionary<A, B>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE22484@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTDictionary<A, B>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE224EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE22A28(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE22508(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6EFCC0, type metadata accessor for Proto_RLE);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22534(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE236C4(a1, a2, a3, *v3, &qword_1ED6F3868);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE22558(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C4B8, type metadata accessor for Proto_Set.Element);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22584(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6F2890, type metadata accessor for Proto_CRDT);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE225B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6EE770, type metadata accessor for Proto_Subsequence);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE225DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6EFC70, type metadata accessor for Proto_Value);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22608(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C490, type metadata accessor for Proto_CustomCRDT.Sibling);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22634(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6EF850, type metadata accessor for Proto_Reference);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22660(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE22BA4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE2267C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE22D0C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22698(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE22EB0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE226B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE233D0(a1, a2, a3, *v3, &qword_1EF52C3C0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE226E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE231F0(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C550, &qword_1EF52C558);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE2270C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE231F0(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C560, &qword_1EF52C568);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22738(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE23054(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22754(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE231F0(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C530, &qword_1EF52C538);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22780(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE23C30(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C4D0, &qword_1EF52C4D8);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE227AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE236C4(a1, a2, a3, *v3, &qword_1ED6EFCC8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE227D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52BCF0, type metadata accessor for Proto_KeyPath);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE227FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE233D0(a1, a2, a3, *v3, (uint64_t *)&unk_1EF52BCF8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE22828(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C4A8, type metadata accessor for Proto4_Version.Seen);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22854(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C4C0, type metadata accessor for Proto4_Struct.Field);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22880(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C4B0, type metadata accessor for Proto4_Set.Element);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE228AC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C4C8, type metadata accessor for Proto4_Reference);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE228D8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE2353C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE228F4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE236C4(a1, a2, a3, *v3, qword_1EF5255B8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE22918(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE2381C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE22934(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE23978(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE22950(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE23C30(a1, a2, a3, (_QWORD *)*v3, &qword_1EF52C4E8, &qword_1EF52C4F0);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE2297C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDE23DD8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDE22998(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE23F40(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE229B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6EE768, type metadata accessor for Proto_Timestamp);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE229E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE240E0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE229FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BDE24298(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6F32C8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
  *v3 = result;
  return result;
}

uint64_t sub_1BDE22A28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2898);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE22B90(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE231F0(a1, a2, a3, a4, &qword_1ED6EE778, &qword_1ED6F3CB8);
}

uint64_t sub_1BDE22BA4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C358);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE22D0C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C510);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C518);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE22EB0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C520);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C528);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE23054(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C540);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C548);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE231DC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE231F0(a1, a2, a3, a4, &qword_1ED6EFC78, &qword_1ED6EFC80);
}

uint64_t sub_1BDE231F0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE233D0(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE2353C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B728);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B368);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE236C4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9])
      memmove(v14, v15, 8 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE2381C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C388);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE23978(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8])
      memmove(v13, v14, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE23AD0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B730);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE23C1C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE24298(a1, a2, a3, a4, &qword_1EF52C4F8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
}

uint64_t sub_1BDE23C30(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 24 * v11)
      memmove(v13 + 4, a4 + 4, 24 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 24 * v11 || v15 >= v16 + 24 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE23DD8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE23F40(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C500);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C508);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE240E0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3A8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3B0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE24284(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE24298(a1, a2, a3, a4, &qword_1ED6F32C8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t sub_1BDE24298(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

void sub_1BDE24478(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  char v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;

  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v50 = *(_OWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 32);
    sub_1BDDB6CA4(v9, v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v7)
    {
      v48 = a1;
      v52 = v9;
      v53 = v8;
      v49 = a3;
      v10 = *a3;
      v12 = sub_1BDDB7F0C(v9, v8);
      v13 = *(_QWORD *)(v10 + 16);
      v14 = (v11 & 1) == 0;
      v15 = v13 + v14;
      if (__OFADD__(v13, v14))
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v16 = v11;
      if (*(_QWORD *)(v10 + 24) >= v15)
      {
        if ((a2 & 1) != 0)
        {
          if ((v11 & 1) == 0)
            goto LABEL_14;
        }
        else
        {
          sub_1BDE65FC4();
          if ((v16 & 1) == 0)
            goto LABEL_14;
        }
      }
      else
      {
        sub_1BDE62334(v15, a2 & 1);
        v17 = sub_1BDDB7F0C(v9, v8);
        if ((v16 & 1) != (v18 & 1))
        {
LABEL_30:
          sub_1BE1B3680();
          __break(1u);
LABEL_31:
          sub_1BE1B305C();
          sub_1BE1B284C();
          sub_1BE1B3164();
          sub_1BE1B284C();
          sub_1BE1B3200();
          __break(1u);
          return;
        }
        v12 = v17;
        if ((v16 & 1) == 0)
        {
LABEL_14:
          v22 = v49;
          v23 = (_QWORD *)*v49;
          *(_QWORD *)(*v49 + 8 * (v12 >> 6) + 64) |= 1 << v12;
          v24 = (uint64_t *)(v23[6] + 16 * v12);
          *v24 = v9;
          v24[1] = v8;
          v25 = v23[7] + 24 * v12;
          *(_QWORD *)v25 = v7;
          *(_OWORD *)(v25 + 8) = v50;
          v26 = v23[2];
          v27 = __OFADD__(v26, 1);
          v28 = v26 + 1;
          if (v27)
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
          v23[2] = v28;
          v29 = v48;
          if (v6 != 1)
          {
            v30 = (_OWORD *)(v48 + 96);
            v31 = 1;
            while (v31 < *(_QWORD *)(v29 + 16))
            {
              v51 = *v30;
              v33 = *((_QWORD *)v30 - 2);
              v32 = *((_QWORD *)v30 - 1);
              v34 = *((_QWORD *)v30 - 3);
              sub_1BDDB6CA4(v34, v33);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_retain();
              if (!v32)
                goto LABEL_25;
              v52 = v34;
              v53 = v33;
              v35 = *v22;
              v36 = sub_1BDDB7F0C(v34, v33);
              v38 = *(_QWORD *)(v35 + 16);
              v39 = (v37 & 1) == 0;
              v27 = __OFADD__(v38, v39);
              v40 = v38 + v39;
              if (v27)
                goto LABEL_28;
              v41 = v37;
              if (*(_QWORD *)(v35 + 24) < v40)
              {
                sub_1BDE62334(v40, 1);
                v36 = sub_1BDDB7F0C(v34, v33);
                if ((v41 & 1) != (v42 & 1))
                  goto LABEL_30;
              }
              if ((v41 & 1) != 0)
                goto LABEL_11;
              v22 = v49;
              v43 = (_QWORD *)*v49;
              *(_QWORD *)(*v49 + 8 * (v36 >> 6) + 64) |= 1 << v36;
              v44 = (uint64_t *)(v43[6] + 16 * v36);
              *v44 = v34;
              v44[1] = v33;
              v45 = v43[7] + 24 * v36;
              *(_QWORD *)v45 = v32;
              *(_OWORD *)(v45 + 8) = v51;
              v46 = v43[2];
              v27 = __OFADD__(v46, 1);
              v47 = v46 + 1;
              if (v27)
                goto LABEL_29;
              ++v31;
              v43[2] = v47;
              v30 = (_OWORD *)((char *)v30 + 40);
              v29 = v48;
              if (v6 == v31)
                goto LABEL_25;
            }
            goto LABEL_27;
          }
          goto LABEL_25;
        }
      }
LABEL_11:
      sub_1BDDFCAFC();
      v19 = (void *)swift_allocError();
      *(_QWORD *)v20 = 0xD000000000000015;
      *(_QWORD *)(v20 + 8) = 0x80000001BE1CD7D0;
      *(_BYTE *)(v20 + 16) = 0;
      swift_willThrow();
      v21 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v52, v53);
        swift_bridgeObjectRelease();

        return;
      }
      goto LABEL_31;
    }
  }
LABEL_25:
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1BDE248E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1BDE24994(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1BDE24A1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  v3 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  result = sub_1BDDA8D6C();
  if (!v1)
  {
    v8 = result;
    v11[1] = v6;
    v9 = *(_QWORD *)(result + 16);
    swift_retain();
    sub_1BDE05ADC(v9, (uint64_t)v5);
    v10 = v8 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v5, v10, type metadata accessor for Proto_CRDT);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

void _s9Coherence13CRCodingErrorO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1BDE24B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  char v7;

  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_1BDE270B0(v1, v2, v5);
    sub_1BDE270DC(v0, v3, v4);
    sub_1BDE270DC(v1, v2, v5);
    v7 = 0;
  }
  else
  {
    if (v0 == v1 && v3 == v2)
      v7 = 1;
    else
      v7 = sub_1BE1B34AC();
    sub_1BDE270B0(v1, v2, 0);
    sub_1BDE270B0(v0, v3, 0);
    sub_1BDE270DC(v0, v3, 0);
    sub_1BDE270DC(v1, v2, 0);
  }
  return v7 & 1;
}

uint64_t type metadata accessor for CRDecoder.CRDTKeyedContainer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CRDecoder.CRValueKeyedContainer()
{
  return objc_opt_self();
}

uint64_t sub_1BDE24E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v3 = type metadata accessor for Proto_KeyPath(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v6)
    return MEMORY[0x1E0DEE9D8];
  v35 = v1;
  v45 = MEMORY[0x1E0DEE9D8];
  sub_1BDE227D0(0, v6, 0);
  v8 = v45;
  result = sub_1BDE248E4(a1);
  v11 = result;
  v12 = 0;
  v14 = v13 & 1;
  v15 = a1 + 64;
  v37 = v6;
  v38 = v10;
  v34 = a1 + 96;
  v39 = a1 + 64;
  while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
  {
    v44 = (unint64_t)v11 >> 6;
    if ((*(_QWORD *)(v15 + 8 * ((unint64_t)v11 >> 6)) & (1 << v11)) == 0)
      goto LABEL_30;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_31;
    v42 = v12;
    v43 = v10;
    v36 = v14;
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = v8;
    v19 = *v17;
    v20 = v17[1];
    *v5 = v7;
    sub_1BDDB6CA4(v19, v20);
    v21 = sub_1BE1B20CC();
    v22 = a1;
    v24 = v23;
    sub_1BE1B20E4();
    sub_1BDDB796C(v21, v24);
    v5[1] = v19;
    v5[2] = v20;
    v8 = v18;
    v45 = v18;
    v26 = *(_QWORD *)(v18 + 16);
    v25 = *(_QWORD *)(v18 + 24);
    if (v26 >= v25 >> 1)
    {
      sub_1BDE227D0(v25 > 1, v26 + 1, 1);
      v8 = v45;
    }
    *(_QWORD *)(v8 + 16) = v26 + 1;
    result = sub_1BDDA2E8C((uint64_t)v5, v8+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v26, type metadata accessor for Proto_KeyPath);
    v16 = 1 << *(_BYTE *)(v22 + 32);
    v15 = v39;
    if (v11 >= v16)
      goto LABEL_32;
    a1 = v22;
    v27 = v44;
    v28 = *(_QWORD *)(v39 + 8 * v44);
    if ((v28 & (1 << v11)) == 0)
      goto LABEL_33;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v43)
      goto LABEL_34;
    v29 = v28 & (-2 << (v11 & 0x3F));
    if (v29)
    {
      v16 = __clz(__rbit64(v29)) | v11 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = v44 + 1;
      v31 = (unint64_t)(v16 + 63) >> 6;
      if (v44 + 1 < v31)
      {
        v32 = *(_QWORD *)(v39 + 8 * v30);
        if (!v32)
        {
          v30 = v44 + 2;
          if (v44 + 2 >= v31)
            goto LABEL_4;
          v32 = *(_QWORD *)(v39 + 8 * v30);
          if (!v32)
          {
            v30 = v44 + 3;
            if (v44 + 3 >= v31)
              goto LABEL_4;
            v32 = *(_QWORD *)(v39 + 8 * v30);
            if (!v32)
            {
              while (v31 - 4 != v27)
              {
                v32 = *(_QWORD *)(v34 + 8 * v27++);
                if (v32)
                {
                  result = sub_1BDE27EC8(v11, v43, v36 & 1);
                  v30 = v27 + 3;
                  goto LABEL_17;
                }
              }
              result = sub_1BDE27EC8(v11, v43, v36 & 1);
              goto LABEL_4;
            }
          }
        }
LABEL_17:
        v16 = __clz(__rbit64(v32)) + (v30 << 6);
      }
    }
LABEL_4:
    v7 = MEMORY[0x1E0DEE9D8];
    v10 = v38;
    v14 = 0;
    v12 = v42 + 1;
    v11 = v16;
    if (v42 + 1 == v37)
      return v8;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

_QWORD *sub_1BDE25148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**i)();
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;

  v41 = a2;
  v4 = type metadata accessor for Proto_Version(0);
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v8 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  v45 = (uint64_t)&v38 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v40 = v9;
    v39 = v6;
    v44 = v2;
    v51 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1BDE228D8(0, v11, 0);
    v12 = type metadata accessor for Proto_CustomCRDT.Sibling(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v42 = *(_QWORD *)(v13 + 72);
    v43 = v12;
    for (i = off_1EF52B000; ; i = off_1EF52B000)
    {
      v48 = v11;
      v16 = *(int *)(v43 + 20);
      v17 = *(_QWORD *)(v14 + v16);
      v18 = (uint64_t *)(v17
                      + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
      swift_beginAccess();
      v20 = *v18;
      v19 = v18[1];
      v21 = (uint64_t)i[139] + v17;
      swift_beginAccess();
      v22 = v45;
      sub_1BDD86DEC(v21, v45, &qword_1ED6F37A8);
      v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
      LODWORD(v21) = v23(v22, 1, v47);
      v49 = v20;
      v24 = v20;
      v25 = v19;
      sub_1BDDB6CA4(v24, v19);
      sub_1BDD86E30(v22, &qword_1ED6F37A8);
      if ((_DWORD)v21 == 1)
      {
        v26 = 0;
        v27 = 0;
      }
      else
      {
        v28 = (uint64_t)i[139] + *(_QWORD *)(v14 + v16);
        swift_beginAccess();
        v29 = v40;
        sub_1BDD86DEC(v28, v40, &qword_1ED6F37A8);
        if (v23(v29, 1, v47) == 1)
        {
          v30 = v39;
          v31 = MEMORY[0x1E0DEE9D8];
          *v39 = MEMORY[0x1E0DEE9D8];
          v30[1] = v31;
          sub_1BE1B20E4();
          sub_1BDD86E30(v29, &qword_1ED6F37A8);
        }
        else
        {
          v30 = v39;
          sub_1BDDA2E8C(v29, (uint64_t)v39, type metadata accessor for Proto_Version);
        }
        v32 = v44;
        v33 = *(_QWORD *)(v41 + 16);
        swift_retain();
        sub_1BDDA9DA0(v30, v33, &v50);
        if (v32)
        {
          sub_1BDDB796C(v49, v19);
          swift_release();
          return v30;
        }
        v44 = 0;
        v27 = *((_QWORD *)&v50 + 1);
        v26 = v50;
      }
      v30 = v51;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE228D8(0, v30[2] + 1, 1);
        v30 = v51;
      }
      v35 = v30[2];
      v34 = v30[3];
      if (v35 >= v34 >> 1)
      {
        sub_1BDE228D8(v34 > 1, v35 + 1, 1);
        v30 = v51;
      }
      v30[2] = v35 + 1;
      v36 = &v30[4 * v35];
      v36[4] = v49;
      v36[5] = v25;
      v36[6] = v26;
      v36[7] = v27;
      v14 += v42;
      v11 = v48 - 1;
      if (v48 == 1)
        return v30;
    }
  }
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BDE254C4(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1BDE224EC(0, v2, 0);
    v3 = v21;
    v6 = (unint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v9 = *v6++;
      v8 = v9;
      v10 = *(_QWORD *)(v7 + 32);
      v11 = *(_QWORD *)(v10 + 16);
      if (!v11 || v8 >= v11)
        break;
      v13 = v10 + 16 * v8;
      v15 = *(_QWORD *)(v13 + 32);
      v14 = *(_QWORD *)(v13 + 40);
      v17 = *(_QWORD *)(v21 + 16);
      v16 = *(_QWORD *)(v21 + 24);
      swift_bridgeObjectRetain();
      if (v17 >= v16 >> 1)
        sub_1BDE224EC(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v21 + 16) = v17 + 1;
      v18 = v21 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v15;
      *(_QWORD *)(v18 + 40) = v14;
      if (!--v2)
        return v3;
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v19 = xmmword_1BE1B63E0;
    *(_BYTE *)(v19 + 16) = 0;
    swift_willThrow();
    swift_release();
  }
  return v3;
}

uint64_t sub_1BDE255F8(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    sub_1BDE22534(0, v2, 0);
    v6 = 0;
    v3 = v24;
    v22 = a1 + 32;
    v23 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v7 = *(_QWORD **)(v23 + 32);
      v8 = v7[2];
      if (!v8)
        goto LABEL_18;
      v9 = (uint64_t *)(v22 + 16 * v6);
      v10 = *v9;
      v11 = v9[1];
      v12 = v7[4] == *v9 && v7[5] == v11;
      if (!v12 && (sub_1BE1B34AC() & 1) == 0)
        break;
      v13 = 0;
LABEL_19:
      v20 = *(_QWORD *)(v24 + 16);
      v19 = *(_QWORD *)(v24 + 24);
      if (v20 >= v19 >> 1)
        sub_1BDE22534(v19 > 1, v20 + 1, 1);
      ++v6;
      *(_QWORD *)(v24 + 16) = v20 + 1;
      *(_QWORD *)(v24 + 8 * v20 + 32) = v13;
      if (v6 == v2)
        return v3;
    }
    v14 = 0;
    v15 = v7 + 7;
    v16 = 1;
    while (v8 != v16)
    {
      ++v14;
      if (*(v15 - 1) == v10 && *v15 == v11)
      {
        v13 = v14;
        goto LABEL_19;
      }
      v13 = v16;
      v18 = sub_1BE1B34AC();
      v16 = v13 + 1;
      v15 += 2;
      if ((v18 & 1) != 0)
        goto LABEL_19;
    }
LABEL_18:
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_19;
  }
  return v3;
}

uint64_t sub_1BDE25778(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1BDE22534(0, v1, 0);
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      v7 = sub_1BDDA84A8(v5, v6);
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_1BDE22534(v8 > 1, v9 + 1, 1);
      v4 += 2;
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1BDE25870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 88))
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v1 = 0xD00000000000003DLL;
    *(_QWORD *)(v1 + 8) = 0x80000001BE1CD990;
    *(_BYTE *)(v1 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    result = *(_QWORD *)(v0 + 80);
    if (!result)
    {
      type metadata accessor for CREncoder.CRValueContainer(0);
      v3 = swift_allocObject();
      v4 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_retain();
      sub_1BE1B20E4();
      v5 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
      if (qword_1ED6F2718 != -1)
      {
        v6 = v5;
        swift_once();
        v5 = v6;
      }
      *(_QWORD *)(v4 + v5) = qword_1ED6F2708;
      *(_QWORD *)(v3 + 16) = v0;
      *(_QWORD *)(v0 + 80) = v3;
      swift_retain();
      swift_release();
      result = *(_QWORD *)(v0 + 80);
      if (!result)
        __break(1u);
    }
  }
  return result;
}

uint64_t sub_1BDE25994(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(uint64_t, _QWORD *, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[5];
  uint64_t v48;

  v41 = a2;
  v42 = a4;
  v7 = type metadata accessor for Proto_Reference(0);
  v40 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v44 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (!v9)
    return v10;
  v45 = v4;
  v48 = MEMORY[0x1E0DEE9D8];
  sub_1BDE22634(0, v9, 0);
  v10 = v48;
  result = a3(a1);
  v13 = result;
  v14 = 0;
  v15 = a1 + 64;
  v16 = *(_BYTE *)(a1 + 32);
  v35 = a1 + 88;
  v36 = v9;
  v38 = a1 + 64;
  v39 = a1;
  v37 = v12;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << v16)
  {
    v18 = (unint64_t)v13 >> 6;
    if ((*(_QWORD *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0)
      goto LABEL_27;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
      goto LABEL_28;
    v43 = v14;
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v21 = *v19;
    v20 = v19[1];
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 24 * v13);
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[2];
    v47[0] = v21;
    v47[1] = v20;
    v47[2] = v23;
    v47[3] = v24;
    v47[4] = v25;
    sub_1BDDB6CA4(v21, v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BDDB6CA4(v21, v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BDDB796C(v21, v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v45;
    sub_1BDE1880C(v47, v41, &v46, v42, v44);
    v45 = v26;
    if (v26)
    {
      sub_1BDDB796C(v21, v20);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    sub_1BDDB796C(v21, v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = v10;
    v28 = *(_QWORD *)(v10 + 16);
    v27 = *(_QWORD *)(v10 + 24);
    if (v28 >= v27 >> 1)
    {
      sub_1BDE22634(v27 > 1, v28 + 1, 1);
      v10 = v48;
    }
    *(_QWORD *)(v10 + 16) = v28 + 1;
    result = sub_1BDDA2E8C(v44, v10+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v28, type metadata accessor for Proto_Reference);
    a1 = v39;
    v16 = *(_BYTE *)(v39 + 32);
    v17 = 1 << v16;
    if (v13 >= 1 << v16)
      goto LABEL_29;
    v15 = v38;
    v29 = *(_QWORD *)(v38 + 8 * v18);
    if ((v29 & (1 << v13)) == 0)
      goto LABEL_30;
    LODWORD(v12) = v37;
    if (*(_DWORD *)(v39 + 36) != (_DWORD)v37)
      goto LABEL_31;
    v30 = v29 & (-2 << (v13 & 0x3F));
    if (v30)
    {
      v17 = __clz(__rbit64(v30)) | v13 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = v18 + 1;
      v32 = (v17 + 63) >> 6;
      if (v18 + 1 < v32)
      {
        v33 = *(_QWORD *)(v38 + 8 * v31);
        if (!v33)
        {
          v31 = v18 + 2;
          if (v18 + 2 >= v32)
            goto LABEL_4;
          v33 = *(_QWORD *)(v38 + 8 * v31);
          if (!v33)
          {
            while (v32 - 3 != v18)
            {
              v33 = *(_QWORD *)(v35 + 8 * v18++);
              if (v33)
              {
                v31 = v18 + 2;
                goto LABEL_18;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_18:
        v17 = __clz(__rbit64(v33)) + (v31 << 6);
      }
    }
LABEL_4:
    v14 = v43 + 1;
    v13 = v17;
    if (v43 + 1 == v36)
      return v10;
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1BDE25D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE v20[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (unint64_t *)&v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)(v0 + 16);
  v12 = v11 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v6, &qword_1ED6F3770);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)result != 1)
  {
    sub_1BDDA2E8C((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_Value);
    v14 = *(_QWORD *)&v10[*(int *)(v7 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v3, &qword_1ED6F26F0);
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Value);
    v15 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v3, 1, v15) == 1)
    {
      sub_1BDD86E30((uint64_t)v3, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v16 = *(_QWORD *)(v11 + 32);
        v17 = *(_QWORD *)(v16 + 16);
        if (v17 && *v3 < v17)
          return *(_QWORD *)(v16 + 16 * *v3 + 32);
        sub_1BDDFCAFC();
        swift_allocError();
        *(_QWORD *)v18 = 0x2064696C61766E49;
        v19 = 0xEF2E676E69727453;
        goto LABEL_10;
      }
      sub_1BDD9C3E0((uint64_t)v3, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000018;
    v19 = 0x80000001BE1CD8F0;
LABEL_10:
    *(_QWORD *)(v18 + 8) = v19;
    *(_BYTE *)(v18 + 16) = 0;
    return swift_willThrow();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE25FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v27 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v26 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v26 - v10;
  v12 = type metadata accessor for Proto_Value(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v26 - v17;
  v19 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v11, &qword_1ED6F3770);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  result = v28(v11, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v18, type metadata accessor for Proto_Value);
  v21 = *(_QWORD *)&v18[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v5, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Value);
  v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (v23(v5, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F26F0);
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
LABEL_6:
    sub_1BDD86DEC(v19, (uint64_t)v9, &qword_1ED6F3770);
    result = v28(v9, 1, v12);
    if ((_DWORD)result != 1)
    {
      sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v16, type metadata accessor for Proto_Value);
      v24 = *(_QWORD *)&v16[*(int *)(v12 + 20)]
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v5 = v27;
      sub_1BDD86DEC(v24, (uint64_t)v27, &qword_1ED6F26F0);
      sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
      if (v23(v5, 1, v22) == 1)
      {
        sub_1BDD86E30((uint64_t)v5, &qword_1ED6F26F0);
LABEL_11:
        sub_1BDDFCAFC();
        swift_allocError();
        *(_QWORD *)v25 = 0xD000000000000015;
        *(_QWORD *)(v25 + 8) = 0x80000001BE1CD930;
        *(_BYTE *)(v25 + 16) = 0;
        return swift_willThrow();
      }
      if (swift_getEnumCaseMultiPayload())
      {
        sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        goto LABEL_11;
      }
      return *(_QWORD *)v5;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  return *(_QWORD *)v5;
}

uint64_t sub_1BDE26378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v29 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v28 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28 - v10;
  v12 = type metadata accessor for Proto_Value(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v28 - v17;
  v19 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v11, &qword_1ED6F3770);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  result = v30(v11, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v18, type metadata accessor for Proto_Value);
  v21 = *(_QWORD *)&v18[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v5, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Value);
  v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (v23(v5, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F26F0);
  }
  else
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 1)
      return result;
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BDD86DEC(v19, (uint64_t)v9, &qword_1ED6F3770);
  result = v30(v9, 1, v12);
  if ((_DWORD)result == 1)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v16, type metadata accessor for Proto_Value);
  v24 = *(_QWORD *)&v16[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v25 = v24;
  v26 = v29;
  sub_1BDD86DEC(v25, v29, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
  if (v23((char *)v26, 1, v22) == 1)
  {
    sub_1BDD86E30(v26, &qword_1ED6F26F0);
LABEL_12:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v27 = 0xD000000000000018;
    *(_QWORD *)(v27 + 8) = 0x80000001BE1CD8D0;
    *(_BYTE *)(v27 + 16) = 0;
    return swift_willThrow();
  }
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 14)
  {
    sub_1BDD9C3E0(v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1BDE26728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v32 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v7 = MEMORY[0x1E0C80A78](v6);
  v33 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v30 - v9;
  v11 = type metadata accessor for Proto_Value(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v31 = (uint64_t)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(v0 + 16);
  v18 = v17 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v10, &qword_1ED6F3770);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  result = v19(v10, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v16, type metadata accessor for Proto_Value);
  v21 = *(_QWORD *)&v16[*(int *)(v11 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v5, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
  v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (v23(v5, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F26F0);
  }
  else
  {
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result == 14)
      return result;
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  if (*(unsigned __int8 *)(v17 + 49) > 1u)
  {
LABEL_13:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v29 = 0xD000000000000017;
    *(_QWORD *)(v29 + 8) = 0x80000001BE1CD8B0;
    *(_BYTE *)(v29 + 16) = 0;
    return swift_willThrow();
  }
  v24 = v33;
  sub_1BDD86DEC(v18, v33, &qword_1ED6F3770);
  result = v19((char *)v24, 1, v11);
  if ((_DWORD)result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v25 = v31;
  sub_1BDDA2E8C(v24, v31, type metadata accessor for Proto_Value);
  v26 = *(_QWORD *)(v25 + *(int *)(v11 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v27 = v26;
  v28 = v32;
  sub_1BDD86DEC(v27, v32, &qword_1ED6F26F0);
  sub_1BDD9C3E0(v25, type metadata accessor for Proto_Value);
  if (v23((char *)v28, 1, v22) == 1)
  {
    sub_1BDD86E30(v28, &qword_1ED6F26F0);
    goto LABEL_13;
  }
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 1)
  {
    sub_1BDD9C3E0(v28, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1BDE26AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v29 = (uint64_t *)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v28 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28 - v10;
  v12 = type metadata accessor for Proto_Value(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v28 - v17;
  v19 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v11, &qword_1ED6F3770);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  result = v30(v11, 1, v12);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v18, type metadata accessor for Proto_Value);
  v21 = *(_QWORD *)&v18[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v5, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Value);
  v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (v23(v5, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F26F0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
      return *(_QWORD *)v5;
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BDD86DEC(v19, (uint64_t)v9, &qword_1ED6F3770);
  result = v30(v9, 1, v12);
  if ((_DWORD)result == 1)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v16, type metadata accessor for Proto_Value);
  v24 = *(_QWORD *)&v16[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v25 = v24;
  v26 = v29;
  sub_1BDD86DEC(v25, (uint64_t)v29, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
  if (v23((char *)v26, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v26, &qword_1ED6F26F0);
LABEL_13:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v27 = 0xD000000000000016;
    *(_QWORD *)(v27 + 8) = 0x80000001BE1CD910;
    *(_BYTE *)(v27 + 16) = 0;
    return swift_willThrow();
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
LABEL_12:
    sub_1BDD9C3E0((uint64_t)v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_13;
  }
  result = *v26;
  if (*v26 < 0)
  {
    sub_1BE1B31F4();
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t type metadata accessor for CREncoder.CRValueKeyedContainer()
{
  return objc_opt_self();
}

uint64_t sub_1BDE26F04()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BDE26F30()
{
  return sub_1BDE20594();
}

uint64_t sub_1BDE26F38()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BDE26F5C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDE26F98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1BDE281A0;
  return sub_1BE110934(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1BDE27024()
{
  return sub_1BE110D64();
}

uint64_t sub_1BDE2702C()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[3] + 8) + 8) + 16))(*(_QWORD *)(v0[5] + 16), v0[2]);
}

unint64_t sub_1BDE27068()
{
  unint64_t result;

  result = qword_1EF52B438;
  if (!qword_1EF52B438)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRCodableVersion, &type metadata for CRCodableVersion);
    atomic_store(result, (unint64_t *)&qword_1EF52B438);
  }
  return result;
}

uint64_t sub_1BDE270B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 3 || a3 == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for CRCodingError(uint64_t a1)
{
  return sub_1BDE270DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1BDE270DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 3 || a3 == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s9Coherence13CRCodingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BDE270B0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CRCodingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BDE270B0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BDE270DC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CRCodingError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BDE270DC(v4, v5, v6);
  return a1;
}

uint64_t sub_1BDE271D8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1BDE271F0(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRCodingError()
{
  return &type metadata for CRCodingError;
}

uint64_t getEnumTagSinglePayload for CRCodableVersion(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CRCodableVersion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BDE272F4 + 4 * byte_1BE1B63FE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BDE27328 + 4 * byte_1BE1B63F9[v4]))();
}

uint64_t sub_1BDE27328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDE27330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BDE27338);
  return result;
}

uint64_t sub_1BDE27344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BDE2734CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BDE27350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDE27358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDE27364(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t sub_1BDE2736C()
{
  return type metadata accessor for CRDecoder(0);
}

uint64_t method lookup function for CRDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRDecoder.valueContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of CRDecoder.crdtContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of CRDecoder.keyedContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of CRDecoder.keyedValueContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t method lookup function for CRDecoder.CRDTContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRDecoder.CRDTContainer.decode<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CRDecoder.CRDTContainer.decode<A, B>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of CRDecoder.CRDTContainer.decode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of CRDecoder.CRDTContainer.decodeCustomSiblings()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t method lookup function for CRDecoder.CRDTKeyedContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRDecoder.CRDTKeyedContainer.decoder(forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of CRDecoder.CRDTKeyedContainer.decoder(forKeyPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t method lookup function for CRDecoder.CRValueKeyedContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRDecoder.CRValueKeyedContainer.allKeys()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of CRDecoder.CRValueKeyedContainer.decoder(forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t method lookup function for CRDecoder.CRValueContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRDecoder.CRValueContainer.decode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of CRDecoder.CRValueContainer.decodeAsset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of CRDecoder.CRValueContainer.decode<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CRDecoder.CRValueContainer.decode<A, B>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of CRDecoder.CRValueContainer.decodeTaggedContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t method lookup function for CREncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CREncoder.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of CREncoder.__allocating_init(_:version:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of CREncoder.valueContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of CREncoder.crdtContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of CREncoder.keyedContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of CREncoder.keyedValueContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t sub_1BDE277EC()
{
  return type metadata accessor for CREncoder.CRDTContainer(0);
}

uint64_t method lookup function for CREncoder.CRDTContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CREncoder.CRDTContainer.encode<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of CREncoder.CRDTContainer.encode<A, B>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of CREncoder.CRDTContainer.encode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of CREncoder.CRDTContainer.encodeCustom(_:version:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of CREncoder.CRDTContainer.encodeSibling(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t method lookup function for CREncoder.CRDTKeyedContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CREncoder.CRDTKeyedContainer.encode<A>(_:forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of CREncoder.CRDTKeyedContainer.encode<A>(_:forKeyPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t method lookup function for CREncoder.CRValueKeyedContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CREncoder.CRValueKeyedContainer.encode<A>(_:forKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of CREncoder.CRValueKeyedContainer.encode<A>(_:forKey:encodeDefaultValues:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_1BDE27A00()
{
  return type metadata accessor for CREncoder.CRValueContainer(0);
}

uint64_t type metadata accessor for CREncoder.CRValueContainer(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6EFC60);
}

uint64_t sub_1BDE27A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDC9964(a1, a2, a3, type metadata accessor for Proto_Value);
}

uint64_t method lookup function for CREncoder.CRValueContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CREncoder.CRValueContainer.encodeUUID(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of CREncoder.CRValueContainer.encode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CREncoder.CRValueContainer.encodeAsset(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of CREncoder.CRValueContainer.encode<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of CREncoder.CRValueContainer.encode<A, B>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of CREncoder.CRValueContainer.encode(tag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t sub_1BDE27BC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v7;
  v8 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 32) = v7;
  *(_QWORD *)(v2 + 40) = v8;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  v9 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v10 = type metadata accessor for Proto_CRDT(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v13 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v14 = qword_1ED6F8BA8;
  type metadata accessor for CRDecodeContext();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v8;
  v15[3] = v8;
  v15[4] = v14;
  *(_QWORD *)(v2 + 16) = v15;
  swift_retain();
  swift_release();
  v16 = sub_1BDDA8D6C() + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  sub_1BDD9C318(v16, (uint64_t)v6, type metadata accessor for Proto_CRDT);
  v11((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v6, v9, &qword_1ED6F3728);
  swift_endAccess();
  *(_BYTE *)(v2 + 49) = *(_BYTE *)(a1 + 72);
  return v2;
}

uint64_t sub_1BDE27E2C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BDE27E50()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE27E60()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE27E70()
{
  uint64_t v0;

  return sub_1BDE16708(**(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDE27E8C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE27E9C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE27EAC()
{
  return sub_1BDE165B4();
}

uint64_t sub_1BDE27EC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1BDE27ED4()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE27EE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + 16))(v2, v3);
}

uint64_t sub_1BDE27F38()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0[3] + 8) + 16))(v0[5], v0[2]);
}

uint64_t sub_1BDE27F68()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[3] + 8) + 8) + 16))(v0[5], v0[2]);
}

uint64_t sub_1BDE27F9C()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[3] + 16) + 8) + 16))(v0[5], v0[2]);
}

uint64_t sub_1BDE27FD0()
{
  return swift_release();
}

uint64_t sub_1BDE27FD8()
{
  uint64_t v0;

  sub_1BDDB796C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDE28004()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1BDE2804C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE2805C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE2806C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v0 + 16) + 176))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDE28098()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE280A8()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE280B8()
{
  return sub_1BDE16830();
}

uint64_t sub_1BDE280D4()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE280E4()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE280F4()
{
  uint64_t v0;

  return sub_1BDE24A1C(*(uint64_t **)(v0 + 16));
}

uint64_t sub_1BDE2810C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE2811C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE2812C()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE2813C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDE28160()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE28170()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE28180()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of CRDecoder.CRDTKeyedContainer.allKeys()()
{
  return dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
}

uint64_t WrappedObservableDifference.contents.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
}

BOOL WrappedObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BOOL8 v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78]();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 48))(v4, 1) == 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1BDE283F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t static WrappedObservableDifference<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a4;
  v34 = a2;
  v6 = *(_QWORD **)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v30 = (char *)&v29 - v9;
  v12 = type metadata accessor for WrappedObservableDifference(0, v10, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v29 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&v29 - v18;
  v20 = (char *)&v29 + *(int *)(v17 + 48) - v18;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)&v29 - v18, a1, v12);
  v21(v20, v34, v12);
  v22 = (unsigned int (*)(char *, uint64_t, uint64_t))v6[6];
  if (v22(v19, 1, a3) == 1)
  {
    v23 = 1;
    if (v22(v20, 1, a3) == 1)
      goto LABEL_8;
  }
  else
  {
    v21(v15, (uint64_t)v19, v12);
    if (v22(v20, 1, a3) != 1)
    {
      v24 = (void (*)(char *, char *, uint64_t))v6[4];
      v25 = v30;
      v24(v30, v15, a3);
      v26 = v31;
      v24(v31, v20, a3);
      v23 = sub_1BE1B2798();
      v27 = (void (*)(char *, uint64_t))v6[1];
      v27(v26, a3);
      v27(v25, a3);
      goto LABEL_8;
    }
    ((void (*)(char *, uint64_t))v6[1])(v15, a3);
  }
  v23 = 0;
  v13 = v33;
  v12 = TupleTypeMetadata2;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  return v23 & 1;
}

uint64_t type metadata accessor for WrappedObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WrappedObservableDifference);
}

uint64_t sub_1BDE28664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static WrappedObservableDifference<A>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t Optional<A>.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  int v54;
  char *v55;
  int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v62 = a2;
  v65 = a5;
  v66 = a1;
  v7 = *(_QWORD *)(a3 + 16);
  v63 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_1BE1B2EE8();
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v64 = (char *)&v57 - v11;
  v67 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v68 = AssociatedTypeWitness;
  v12 = MEMORY[0x1E0C80A78](v10);
  v59 = (char *)&v57 - v13;
  v14 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v57 - v19;
  v21 = *(_QWORD **)(v7 - 8);
  v22 = MEMORY[0x1E0C80A78](v18);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v57 - v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v27(v20, v5, a3);
  v28 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v21[6];
  if (v28((uint64_t)v20, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, a3);
    if (v28(v66, 1, v7) == 1)
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v65, 1, 1, v68);
    v36 = v68;
    v37 = swift_conformsToProtocol2();
    if (v37)
      v38 = v37;
    else
      v38 = 0;
    if (v37)
      v39 = v36;
    else
      v39 = 0;
    if (v39)
    {
      v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
      *((_QWORD *)&v70 + 1) = v39;
      v71 = v38;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v69);
      v40(v39, v38);
    }
    else
    {
      v71 = 0;
      v69 = 0u;
      v70 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF52C570);
    v55 = v65;
    v56 = swift_dynamicCast();
    v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56);
    v48 = v56 ^ 1u;
    v47 = v55;
    v52 = v36;
    return v46((uint64_t)v47, v48, 1, v52);
  }
  v58 = v24;
  v30 = (void (*)(char *, char *, uint64_t))v21[4];
  v30(v26, v20, v7);
  v27(v17, v66, a3);
  if (v28((uint64_t)v17, 1, v7) != 1)
  {
    v41 = v58;
    v30(v58, v17, v7);
    v42 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v41, v62, v7);
    v43 = (void (*)(char *, uint64_t))v21[1];
    v43(v41, v7);
    v43(v26, v7);
    v45 = v67;
    v44 = v68;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v42, 1, v68) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v42, v61);
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
      v47 = v65;
      v48 = 1;
    }
    else
    {
      v49 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v50 = v59;
      v49(v59, v42, v44);
      v51 = v65;
      v49(v65, v50, v44);
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
      v47 = v51;
      v48 = 0;
    }
    v52 = v44;
    return v46((uint64_t)v47, v48, 1, v52);
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, a3);
  v31 = v68;
  v32 = swift_conformsToProtocol2();
  if (v32)
    v33 = v32;
  else
    v33 = 0;
  if (v32)
    v34 = v31;
  else
    v34 = 0;
  if (v34)
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    *((_QWORD *)&v70 + 1) = v34;
    v71 = v33;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v69);
    v35(v34, v33);
    ((void (*)(char *, uint64_t))v21[1])(v26, v7);
  }
  else
  {
    ((void (*)(char *, uint64_t))v21[1])(v26, v7);
    v71 = 0;
    v69 = 0u;
    v70 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_1EF52C570);
  v53 = v65;
  v54 = swift_dynamicCast();
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v53, v54 ^ 1u, 1, v31);
}

uint64_t Optional<A>.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78]();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v4);
  v10 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 40))(a1, v10);
    v6 = v11;
    v4 = v10;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v4);
}

uint64_t Optional<A>.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v5 = v4;
  v21 = a1;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v10);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18(v12, v5, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(a4, v5, a2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v12, v14);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 24))(v21, v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a4, 0, 1, v14);
  }
}

uint64_t Optional<A>.needToFinalizeTimestamps()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 48))(v8);
    v4 = v9;
    v3 = v8;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v10 & 1;
}

uint64_t Optional<A>.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 16);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v3, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 56))(a1, v6);
  return result;
}

uint64_t Optional<A>.minEncodingVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a1);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    v13 = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 32))(&v15, v10);
    v13 = v15;
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  }
  *a3 = v13;
  return result;
}

uint64_t static Optional<A>.canContainAssets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 64))() & 1;
}

uint64_t sub_1BDE28F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional<A>.copy(renamingReferences:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t sub_1BDE28F5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return Optional<A>.observableDifference(from:with:)(a1, a2, a3, *(_QWORD *)(a4 - 8), a5);
}

uint64_t sub_1BDE28F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.visitReferences(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_1BDE28F6C(uint64_t a1, uint64_t a2)
{
  return Optional<A>.needToFinalizeTimestamps()(a1, *(_QWORD *)(a2 - 8));
}

uint64_t sub_1BDE28F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.finalizeTimestamps(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_1BDE28F7C(uint64_t a1, uint64_t a2)
{
  return static Optional<A>.canContainAssets.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

uint64_t sub_1BDE28F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t Optional<A>.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v11, (uint64_t)v10);
  v12 = type metadata accessor for Proto_Value(0);
  LODWORD(v11) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1BDE29118((uint64_t)v10);
  if ((_DWORD)v11 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000017;
    *(_QWORD *)(v13 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDE15374(a2, a3, a4);
  }
  return swift_release();
}

uint64_t sub_1BDE29118(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BDE29158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t Optional<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;

  result = sub_1BDE25870();
  if (!v4)
  {
    v8 = *(_QWORD *)(a2 + 16);
    swift_retain();
    sub_1BDE20644(v3, v8, a3);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _QWORD v15[2];
  _BYTE v16[24];
  uint64_t v17;
  uint64_t v18;

  v15[1] = a3;
  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (_QWORD *)MEMORY[0x1E0C80A78](v5);
  v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  sub_1BE1B3770();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v18, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a2);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
    sub_1BE1B3500();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v7, v9);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
    sub_1BE1B34F4();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t sub_1BDE291E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  return Optional<A>.minEncodingVersion.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t sub_1BDE29380(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDE293C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> A?, a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDE29400()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1BDE29408()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDE29460(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1BDE29538(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_1BDE29594(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1BDE2962C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_1BDE2970C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1BDE297A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_1BDE29884(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1BDE299C4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1BDE29B6C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1BDE29B74()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_1BDE29B98(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_1BDE29BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t sub_1BDE29BC0()
{
  uint64_t v0;

  v0 = sub_1BE1B23C0();
  __swift_allocate_value_buffer(v0, qword_1EF52C5F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF52C5F8);
  return sub_1BE1B23B4();
}

uint64_t sub_1BDE29C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  unint64_t *v46;
  unint64_t *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *, _QWORD);
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  char v90;
  char v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)();
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v4 = type metadata accessor for RetainedMapRun(0);
  v124 = *(_QWORD *)(v4 - 8);
  v125 = v4;
  MEMORY[0x1E0C80A78](v4);
  v118 = (uint64_t)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v96 = (uint64_t)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v94 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v13 = MEMORY[0x1E0C80A78](v12);
  v95 = (uint64_t)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v121 = (char *)&v94 - v16;
  MEMORY[0x1E0C80A78](v15);
  v123 = (uint64_t)&v94 - v17;
  v18 = sub_1BE1B203C();
  v116 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v115 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v98);
  v114 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1BE1B206C();
  v105 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v22 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Replica();
  v94 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x1E0C80A78](v23);
  v104 = (uint64_t)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v109 = (uint64_t)&v94 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v28 = MEMORY[0x1E0C80A78](v27);
  v101 = (uint64_t)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v102 = (uint64_t)&v94 - v30;
  v31 = *(_QWORD *)(a1 + 16);
  v108 = a2 + 16;
  v107 = (uint64_t *)(a2 + 32);
  v32 = v31;
  v97 = a1;
  result = swift_bridgeObjectRetain();
  v110 = 0;
  v103 = v22;
  v100 = v32;
  v120 = v11;
  v111 = v18;
  while (1)
  {
    if (v110 == v32)
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      v35 = v101;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v101, 1, 1, v34);
      v110 = v32;
    }
    else
    {
      if (v110 >= v32)
        goto LABEL_55;
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = v110;
      v35 = v101;
      sub_1BDD86DEC(v97+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v110, v101, &qword_1ED6F3CB8);
      v110 = v38 + 1;
      v22 = v103;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v35, 0, 1, v36);
    }
    v39 = v102;
    sub_1BDDA2EF0(v35, v102, &qword_1ED6F3CC0);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v39, 1, v40) == 1)
      return swift_bridgeObjectRelease();
    v41 = v39 + *(int *)(v40 + 48);
    v42 = v39;
    v43 = v109;
    sub_1BDDA2E8C(v42, v109, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v22, v41, v106);
    v44 = v104;
    sub_1BDD9C318(v43, v104, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    v45 = sub_1BDD9A058(&v128, v44);
    if (!*v46)
    {
      ((void (*)(uint64_t *, _QWORD))v45)(&v128, 0);
      goto LABEL_11;
    }
    v47 = v46;
    v99 = v45;
    v48 = v115;
    sub_1BE1B2054();
    v49 = (uint64_t)v114;
    sub_1BE1B2030();
    v113 = *(void (**)(char *, uint64_t))(v116 + 8);
    v113(v48, v18);
    v50 = (_QWORD *)(v49 + *(int *)(v98 + 36));
    v51 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
    v52 = *v50;
    sub_1BE1B2C90();
    if (v52 != v126)
      break;
LABEL_9:
    sub_1BDD86E30(v49, &qword_1ED6EFF58);
    ((void (*)(uint64_t *, _QWORD))v99)(&v128, 0);
LABEL_11:
    swift_endAccess();
    sub_1BDD9C3E0(v104, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    v53 = *v107;
    v32 = v100;
    if (!*(_QWORD *)(*v107 + 16) || (v54 = sub_1BDDB3EC0(v109), (v55 & 1) == 0))
    {
      v126 = 0;
      v127 = 0;
      v22 = v103;
LABEL_20:
      sub_1BDD86E30((uint64_t)&v126, qword_1ED6F23F0);
      swift_endAccess();
LABEL_21:
      (*(void (**)(char *, uint64_t))(v105 + 8))(v22, v106);
      v60 = v109;
      goto LABEL_22;
    }
    sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v53 + 56) + 16 * v54), &v126);
    v22 = v103;
    if (!v126)
      goto LABEL_20;
    sub_1BDDB4ED4(&v126, &v129);
    sub_1BDD86E30((uint64_t)&v126, qword_1ED6F23F0);
    swift_endAccess();
    v56 = *(_QWORD *)(v129 + 16);
    if (v56)
    {
      if (v56 != 1)
      {
        sub_1BDDB4E78((uint64_t)&v129);
        goto LABEL_21;
      }
      v57 = v96;
      sub_1BDD86DEC(v129 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v96, qword_1ED6F25C0);
      v58 = v95;
      sub_1BDDA2EF0(v57 + *(int *)(v6 + 36), v95, &qword_1ED6F2520);
      LODWORD(v57) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v58, 1, v125);
      sub_1BDD86E30(v58, &qword_1ED6F2520);
      sub_1BDDB4E78((uint64_t)&v129);
      v59 = (_DWORD)v57 == 1;
      v32 = v100;
      if (!v59)
        goto LABEL_21;
    }
    else
    {
      sub_1BDDB4E78((uint64_t)&v129);
    }
    v87 = v18;
    swift_beginAccess();
    v88 = v107;
    swift_bridgeObjectRetain();
    v89 = sub_1BDDB3EC0(v109);
    v91 = v90;
    swift_bridgeObjectRelease();
    if ((v91 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v93 = *v88;
      v126 = *v88;
      *v88 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDE63924();
        v93 = v126;
      }
      sub_1BDD9C3E0(*(_QWORD *)(v93 + 48) + *(_QWORD *)(v94 + 72) * v89, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDB4F58((_QWORD *)(*(_QWORD *)(v93 + 56) + 16 * v89), &v129);
      sub_1BDEF0D00(v89, v93);
      *v88 = v93;
      swift_bridgeObjectRelease();
      sub_1BDDB4F58(&v129, &v126);
      v18 = v87;
      v32 = v100;
    }
    else
    {
      v126 = 0;
      v127 = 0;
      v18 = v87;
      v32 = v100;
    }
    swift_endAccess();
    sub_1BDD86E30((uint64_t)&v126, qword_1ED6F23F0);
    v22 = v103;
    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v106);
    v60 = v109;
LABEL_22:
    result = sub_1BDD9C3E0(v60, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  v112 = v51;
  while (1)
  {
    v62 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
    v63 = v18;
    v65 = *v64;
    v66 = v64[1];
    v62(&v126, 0);
    v67 = v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v115, v49, v63);
    sub_1BE1B2C9C();
    v113(v67, v63);
    v68 = v65;
    v69 = (uint64_t)v120;
    v70 = (uint64_t)v121;
    result = sub_1BDDC0538(v68, v66);
    v72 = v71;
    v117 = result;
    if (result != v71)
      break;
LABEL_24:
    sub_1BDD85EF0(v117, v72);
    v61 = *v50;
    v49 = (uint64_t)v114;
    v18 = v111;
    sub_1BE1B2C90();
    if (v61 == v126)
      goto LABEL_9;
  }
  if (v71 < v117)
  {
    __break(1u);
    goto LABEL_54;
  }
  v73 = v117;
  v119 = v71;
  if (v117 >= v71)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    return result;
  }
  while ((v73 & 0x8000000000000000) == 0)
  {
    v74 = *v47;
    if (v73 >= *(_QWORD *)(*v47 + 16))
      goto LABEL_50;
    v75 = v47;
    v76 = v50;
    v122 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v77 = *(_QWORD *)(v7 + 72) * v73;
    sub_1BDD86DEC(v74 + v122 + v77, v69, qword_1ED6F25C0);
    sub_1BDD86DEC(v69 + *(int *)(v6 + 36), v70, &qword_1ED6F2520);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v70, 1, v125) == 1)
    {
      sub_1BDD86E30(v70, &qword_1ED6F2520);
    }
    else
    {
      v78 = v7;
      v79 = v6;
      v80 = v125;
      v81 = v118;
      sub_1BDDA2E8C(v70, v118, type metadata accessor for RetainedMapRun);
      v82 = *(_QWORD *)(v81 + *(int *)(v80 + 20));
      v83 = v82 - 1;
      if (v82 > 1)
      {
        v84 = v123;
        sub_1BDD86DEC(v81, v123, (uint64_t *)&unk_1ED6F2DC0);
        *(_QWORD *)(v84 + *(int *)(v80 + 20)) = v83;
        sub_1BDD9C3E0(v81, type metadata accessor for RetainedMapRun);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v124 + 56))(v84, 0, 1, v80);
        v6 = v79;
        v7 = v78;
        v72 = v119;
        v69 = (uint64_t)v120;
        goto LABEL_36;
      }
      sub_1BDD9C3E0(v81, type metadata accessor for RetainedMapRun);
      v7 = v78;
      v72 = v119;
      v69 = (uint64_t)v120;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56))(v123, 1, 1, v125);
LABEL_36:
    v50 = v76;
    sub_1BDD86E30(v69, qword_1ED6F25C0);
    v47 = v75;
    v85 = *v75;
    v86 = swift_isUniquelyReferenced_nonNull_native();
    *v75 = v85;
    if ((v86 & 1) == 0)
    {
      v85 = sub_1BDFCEA00(v85);
      *v75 = v85;
    }
    if (v73 >= *(_QWORD *)(v85 + 16))
      goto LABEL_51;
    ++v73;
    sub_1BDDD1A10(v123, v85 + v122 + *(int *)(v6 + 36) + v77);
    v70 = (uint64_t)v121;
    if (v72 == v73)
      goto LABEL_24;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDE2A81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int64_t v130;
  unint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64_t v135;
  unsigned int (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  void (*v138)(uint64_t *, uint64_t, uint64_t);
  unint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, unint64_t, uint64_t);
  uint64_t (*v144)(char *, uint64_t, uint64_t);
  int v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t (*v151)();
  uint64_t *v152;
  char *v153;
  char *v154;
  void (*v155)(char *, uint64_t);
  uint64_t v156;
  uint64_t (*v157)();
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t *v168;
  unint64_t v169;
  char v170;
  char v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  void (*v185)(char *, uint64_t);
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(char *, uint64_t, uint64_t);
  unint64_t v195;
  char v196;
  unint64_t v197;
  void (*v198)(char *, unint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  char *v204;
  void (*v205)(char *, uint64_t);
  char *v206;
  void (*v207)(char *, uint64_t, uint64_t, uint64_t);
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  int v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t (*v221)();
  unint64_t *v222;
  unint64_t *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v251;
  char v252;
  unint64_t v253;
  uint64_t v254;
  _BOOL8 v255;
  uint64_t v256;
  char v257;
  unint64_t v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  char v270;
  uint64_t *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t *v279;
  uint64_t v280;
  void (*v281)(uint64_t *, _QWORD);
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t *v286;
  uint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  BOOL v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  uint64_t v306;
  void (*v307)(uint64_t *, _QWORD);
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  int64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  int v332;
  uint64_t v333;
  char v334;
  unint64_t v335;
  uint64_t v336;
  _BOOL8 v337;
  uint64_t v338;
  char v339;
  unint64_t v340;
  char v341;
  uint64_t *v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t *v350;
  uint64_t v351;
  void (*v352)(uint64_t *, _QWORD);
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  uint64_t *v357;
  uint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  char v375;
  uint64_t result;
  uint64_t v377;
  int64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  char *v398;
  char *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  void (*v404)(uint64_t *, _QWORD);
  char *v405;
  uint64_t v406;
  char *v407;
  char *v408;
  char *v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int (*v417)(uint64_t, uint64_t, uint64_t);
  char *v418;
  int64_t v419;
  char *v420;
  uint64_t v421;
  char *v422;
  unint64_t v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  int64_t v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  void (*v435)(char *, uint64_t);
  uint64_t v436;
  uint64_t *v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char v456;
  uint64_t v457;

  v391 = a7;
  v395 = a6;
  v442 = a5;
  v9 = type metadata accessor for RetainedMapRun(0);
  v450 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v443 = (uint64_t)&v377 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v433 = (uint64_t)&v377 - v13;
  MEMORY[0x1E0C80A78](v12);
  v432 = (uint64_t)&v377 - v14;
  v424 = sub_1BE1B203C();
  v426 = *(_QWORD *)(v424 - 8);
  MEMORY[0x1E0C80A78](v424);
  v425 = (char *)&v377 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v393 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  v16 = MEMORY[0x1E0C80A78](v393);
  v420 = (char *)&v377 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v411 = (char *)&v377 - v19;
  MEMORY[0x1E0C80A78](v18);
  v405 = (char *)&v377 - v20;
  v403 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED640);
  v21 = MEMORY[0x1E0C80A78](v403);
  v394 = (char *)&v377 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v410 = (uint64_t)&v377 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v385 = (uint64_t)&v377 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v396 = (uint64_t)&v377 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v388 = (uint64_t)&v377 - v30;
  MEMORY[0x1E0C80A78](v29);
  v402 = (uint64_t)&v377 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v33 = MEMORY[0x1E0C80A78](v32);
  v444 = (char *)&v377 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v451 = (uint64_t)&v377 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v434 = (char *)&v377 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v446 = (uint64_t)&v377 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v440 = (uint64_t)&v377 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v439 = (uint64_t)&v377 - v44;
  MEMORY[0x1E0C80A78](v43);
  v390 = (char *)&v377 - v45;
  v452 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v448 = *(_QWORD *)(v452 - 8);
  v46 = MEMORY[0x1E0C80A78](v452);
  v449 = (uint64_t)&v377 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x1E0C80A78](v46);
  v447 = (uint64_t)&v377 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v445 = (uint64_t)&v377 - v51;
  MEMORY[0x1E0C80A78](v50);
  v389 = (uint64_t)&v377 - v52;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v54 = MEMORY[0x1E0C80A78](v53);
  v409 = (char *)&v377 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54);
  v57 = (char *)&v377 - v56;
  v441 = sub_1BE1B206C();
  v58 = *(_QWORD *)(v441 - 8);
  v59 = MEMORY[0x1E0C80A78](v441);
  v382 = (char *)&v377 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = MEMORY[0x1E0C80A78](v59);
  v418 = (char *)&v377 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v422 = (char *)&v377 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v392 = (char *)&v377 - v66;
  v67 = MEMORY[0x1E0C80A78](v65);
  v399 = (char *)&v377 - v68;
  v69 = MEMORY[0x1E0C80A78](v67);
  v398 = (char *)&v377 - v70;
  v71 = MEMORY[0x1E0C80A78](v69);
  v407 = (char *)&v377 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  v397 = (char *)&v377 - v74;
  v75 = MEMORY[0x1E0C80A78](v73);
  v417 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v377 - v76);
  MEMORY[0x1E0C80A78](v75);
  v438 = (uint64_t *)((char *)&v377 - v77);
  v78 = type metadata accessor for Replica();
  v428 = *(_QWORD *)(v78 - 8);
  v79 = MEMORY[0x1E0C80A78](v78);
  v400 = (uint64_t)&v377 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = MEMORY[0x1E0C80A78](v79);
  v383 = (uint64_t)&v377 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v384 = (char *)&v377 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v380 = (uint64_t)&v377 - v86;
  v87 = MEMORY[0x1E0C80A78](v85);
  v379 = (uint64_t)&v377 - v88;
  v89 = MEMORY[0x1E0C80A78](v87);
  v386 = (uint64_t)&v377 - v90;
  v91 = MEMORY[0x1E0C80A78](v89);
  v408 = (char *)&v377 - v92;
  v93 = MEMORY[0x1E0C80A78](v91);
  v381 = (uint64_t)&v377 - v94;
  v95 = MEMORY[0x1E0C80A78](v93);
  v97 = (char *)&v377 - v96;
  v98 = MEMORY[0x1E0C80A78](v95);
  v421 = (uint64_t)&v377 - v99;
  v100 = MEMORY[0x1E0C80A78](v98);
  v415 = (uint64_t)&v377 - v101;
  v102 = MEMORY[0x1E0C80A78](v100);
  v423 = (unint64_t)&v377 - v103;
  MEMORY[0x1E0C80A78](v102);
  v105 = (char *)&v377 - v104;
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v107 = MEMORY[0x1E0C80A78](v106);
  v413 = (uint64_t)&v377 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = MEMORY[0x1E0C80A78](v107);
  v412 = (uint64_t)&v377 - v110;
  v111 = MEMORY[0x1E0C80A78](v109);
  v427 = (char *)&v377 - v112;
  MEMORY[0x1E0C80A78](v111);
  v114 = (char *)&v377 - v113;
  v115 = *(_QWORD *)(a2 + 64);
  v414 = a2 + 64;
  v116 = 1 << *(_BYTE *)(a2 + 32);
  v117 = -1;
  if (v116 < 64)
    v117 = ~(-1 << v116);
  v118 = v117 & v115;
  v436 = v442 + 16;
  v437 = (uint64_t *)(v442 + 32);
  v419 = (unint64_t)(v116 + 63) >> 6;
  v378 = v419 - 1;
  swift_bridgeObjectRetain();
  v431 = 0;
  v416 = a4;
  v430 = a2;
  v442 = v58;
  v406 = v78;
  v119 = (uint64_t)v114;
  v120 = a4;
  v387 = v97;
  v429 = v57;
  v435 = (void (*)(char *, uint64_t))v119;
  while (1)
  {
    if (v118)
    {
      v121 = __clz(__rbit64(v118));
      v118 &= v118 - 1;
      v122 = v121 | (v431 << 6);
      v123 = (uint64_t)v427;
      goto LABEL_9;
    }
    v130 = v431 + 1;
    v123 = (uint64_t)v427;
    if (__OFADD__(v431, 1))
      break;
    if (v130 < v419)
    {
      v131 = *(_QWORD *)(v414 + 8 * v130);
      if (v131)
        goto LABEL_13;
      v132 = v431 + 2;
      ++v431;
      if (v130 + 1 < v419)
      {
        v131 = *(_QWORD *)(v414 + 8 * v132);
        if (v131)
          goto LABEL_16;
        v431 = v130 + 1;
        if (v130 + 2 < v419)
        {
          v131 = *(_QWORD *)(v414 + 8 * (v130 + 2));
          if (v131)
          {
            v130 += 2;
LABEL_13:
            v118 = (v131 - 1) & v131;
            v122 = __clz(__rbit64(v131)) + (v130 << 6);
            v431 = v130;
LABEL_9:
            v124 = v120;
            sub_1BDD9C318(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v428 + 72) * v122, v123, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            v125 = *(_QWORD *)(a2 + 56) + *(_QWORD *)(v58 + 72) * v122;
            v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
            v127 = v58;
            v128 = v126;
            v129 = v441;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v127 + 16))(v123 + *(int *)(v126 + 48), v125, v441);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v123, 0, 1, v128);
            v119 = (uint64_t)v435;
            goto LABEL_28;
          }
          v132 = v130 + 3;
          v431 = v130 + 2;
          if (v130 + 3 < v419)
          {
            v131 = *(_QWORD *)(v414 + 8 * v132);
            if (v131)
            {
LABEL_16:
              v130 = v132;
              goto LABEL_13;
            }
            while (1)
            {
              v130 = v132 + 1;
              if (__OFADD__(v132, 1))
                goto LABEL_209;
              if (v130 >= v419)
                break;
              v131 = *(_QWORD *)(v414 + 8 * v130);
              ++v132;
              if (v131)
                goto LABEL_13;
            }
            v431 = v378;
          }
        }
      }
    }
    v124 = v120;
    v133 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v123, 1, 1, v133);
    v118 = 0;
    v129 = v441;
LABEL_28:
    sub_1BDDA2EF0(v123, v119, &qword_1ED6F3CC0);
    v134 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    v135 = *(_QWORD *)(v134 - 8);
    v136 = *(char **)(v135 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v136)(v119, 1, v134) == 1)
    {
      v417 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v136;
      v419 = v135;
      v174 = v430;
      swift_release();
      v175 = v124;
      v176 = *(_QWORD *)(v124 + 64);
      v414 = v124 + 64;
      v177 = 1 << *(_BYTE *)(v124 + 32);
      v178 = -1;
      if (v177 < 64)
        v178 = ~(-1 << v177);
      v179 = v178 & v176;
      v180 = (unint64_t)(v177 + 63) >> 6;
      v401 = &v456;
      v389 = v180 - 1;
      swift_bridgeObjectRetain();
      v181 = 0;
      v415 = v180;
      v390 = (char *)(v180 - 5);
      v392 = (char *)(v175 + 104);
      v182 = v442;
      v183 = v421;
      v404 = (void (*)(uint64_t *, _QWORD))v134;
LABEL_62:
      v187 = v413;
      if (v179)
      {
        v188 = __clz(__rbit64(v179));
        v179 &= v179 - 1;
        v427 = v181;
        v189 = v188 | ((_QWORD)v181 << 6);
        goto LABEL_64;
      }
      v231 = (uint64_t)(v181 + 1);
      if (__OFADD__(v181, 1))
        goto LABEL_206;
      if (v231 >= v415)
      {
        v427 = v181;
        v179 = 0;
        v190 = 1;
        goto LABEL_65;
      }
      v232 = *(_QWORD *)(v414 + 8 * v231);
      if (!v232)
      {
        if ((uint64_t)(v181 + 2) >= v415)
        {
          v179 = 0;
          v190 = 1;
        }
        else
        {
          v232 = *(_QWORD *)(v414 + 8 * (_QWORD)(v181 + 2));
          if (v232)
          {
            v231 = (uint64_t)(v181 + 2);
            goto LABEL_82;
          }
          if ((uint64_t)(v181 + 3) >= v415)
          {
            v179 = 0;
            v190 = 1;
            v427 = v181 + 2;
            goto LABEL_65;
          }
          v232 = *(_QWORD *)(v414 + 8 * (_QWORD)(v181 + 3));
          if (v232)
          {
            v231 = (uint64_t)(v181 + 3);
            goto LABEL_82;
          }
          v231 = (uint64_t)(v181 + 4);
          if ((uint64_t)(v181 + 4) >= v415)
          {
            v179 = 0;
            v190 = 1;
            v427 = v181 + 3;
            goto LABEL_65;
          }
          v232 = *(_QWORD *)(v414 + 8 * v231);
          if (v232)
            goto LABEL_82;
          while (v390 != v181)
          {
            v232 = *(_QWORD *)&v392[8 * (_QWORD)v181++];
            if (v232)
            {
              v231 = (uint64_t)(v181 + 4);
              goto LABEL_82;
            }
          }
          v179 = 0;
          v190 = 1;
          v231 = v389;
        }
        v427 = (char *)v231;
        goto LABEL_65;
      }
LABEL_82:
      v179 = (v232 - 1) & v232;
      v189 = __clz(__rbit64(v232)) + (v231 << 6);
      v427 = (char *)v231;
LABEL_64:
      sub_1BDD9C318(*(_QWORD *)(v175 + 48) + *(_QWORD *)(v428 + 72) * v189, v413, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v182 + 16))(v187 + *(int *)(v134 + 48), *(_QWORD *)(v175 + 56) + *(_QWORD *)(v182 + 72) * v189, v441);
      v190 = 0;
LABEL_65:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v419 + 56))(v187, v190, 1, v134);
      v191 = v187;
      v192 = v412;
      sub_1BDDA2EF0(v191, v412, &qword_1ED6F3CC0);
      if (v417(v192, 1, v134) == 1)
        return swift_release();
      v193 = v192 + *(int *)(v134 + 48);
      sub_1BDDA2E8C(v192, v183, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v194 = *(void (**)(char *, uint64_t, uint64_t))(v182 + 32);
      v194(v422, v193, v441);
      if (*(_QWORD *)(v174 + 16) && (v195 = sub_1BDDB3EC0(v183), (v196 & 1) != 0))
      {
        v197 = *(_QWORD *)(v174 + 56) + *(_QWORD *)(v182 + 72) * v195;
        v198 = *(void (**)(char *, unint64_t, uint64_t))(v182 + 16);
        v199 = (uint64_t)v409;
        v200 = v182;
        v201 = v441;
        v198(v409, v197, v441);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v200 + 56))(v199, 0, 1, v201);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v200 + 48))(v199, 1, v201) != 1)
        {
          v202 = v382;
          v194(v382, v199, v201);
          v423 = v179;
          v203 = v422;
          v198(v397, (unint64_t)v422, v201);
          v198(v398, (unint64_t)v203, v201);
          v198(v399, (unint64_t)v202, v201);
          sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
          v204 = v407;
          sub_1BE1B2F6C();
          v184 = v418;
          v179 = v423;
          sub_1BE1B2F54();
          v205 = *(void (**)(char *, uint64_t))(v200 + 8);
          v206 = v204;
          v174 = v430;
          v205(v206, v201);
          v205(v202, v201);
          goto LABEL_72;
        }
      }
      else
      {
        v207 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v182 + 56);
        v199 = (uint64_t)v409;
        v200 = v182;
        v201 = v441;
        v207(v409, 1, 1, v441);
      }
      sub_1BDD86E30(v199, &qword_1ED6F3C78);
      v184 = v418;
      (*(void (**)(char *, char *, uint64_t))(v200 + 16))(v418, v422, v201);
LABEL_72:
      v208 = sub_1BE1B200C();
      v209 = (uint64_t)v408;
      if ((v208 & 1) != 0)
        goto LABEL_61;
      v423 = v179;
      v210 = v402;
      sub_1BDD9C318(v421, v402, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v211 = v428;
      v212 = *(uint64_t **)(v428 + 56);
      v213 = v406;
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v212)(v210, 0, 1, v406);
      v214 = v410;
      v215 = v410 + *(int *)(v403 + 48);
      sub_1BDD86DEC(v395, v410, &qword_1ED6F43C0);
      sub_1BDD86DEC(v210, v215, &qword_1ED6F43C0);
      v216 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v211 + 48);
      if (v216(v214, 1, v213) == 1)
      {
        sub_1BDD86E30(v210, &qword_1ED6F43C0);
        v217 = v216(v215, 1, v213);
        v218 = &qword_1ED6ED640;
        v219 = (uint64_t)v394;
        if (v217 == 1)
        {
          sub_1BDD86E30(v410, &qword_1ED6F43C0);
          v179 = v423;
          goto LABEL_76;
        }
LABEL_93:
        sub_1BDD86E30(v410, v218);
LABEL_94:
        v241 = v396;
        sub_1BDD9C318(v421, v396, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v242 = v406;
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v212)(v241, 0, 1, v406);
        v243 = v219 + *(int *)(v403 + 48);
        sub_1BDD86DEC(v391, v219, &qword_1ED6F43C0);
        sub_1BDD86DEC(v241, v243, &qword_1ED6F43C0);
        if (v216(v219, 1, v242) != 1)
        {
          v261 = v385;
          sub_1BDD86DEC(v219, v385, &qword_1ED6F43C0);
          v262 = v216(v243, 1, v242);
          v263 = v261;
          v245 = &qword_1ED6ED640;
          v246 = v424;
          v247 = (uint64_t)v420;
          v264 = (uint64_t)v384;
          if (v262 != 1)
          {
            v265 = v243;
            v266 = v379;
            sub_1BDDA2E8C(v265, v379, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            v267 = *(int *)(v406 + 20);
            v438 = *(uint64_t **)(v263 + v267);
            v268 = *(uint64_t **)(v266 + v267);
            v269 = v380;
            sub_1BDD9C318(v263, v380, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            sub_1BDD9C318(v266, v264, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            if (v438 == v268)
            {
              v270 = sub_1BE1B1F10();
              sub_1BDD9C3E0(v264, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
              sub_1BDD9C3E0(v269, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
              sub_1BDD9C3E0(v266, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
              sub_1BDD86E30(v396, &qword_1ED6F43C0);
              sub_1BDD9C3E0(v263, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
              sub_1BDD86E30(v219, &qword_1ED6F43C0);
              v248 = v421;
              if ((v270 & 1) == 0)
                goto LABEL_146;
LABEL_97:
              swift_beginAccess();
              v249 = v437;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v457 = *v249;
              v251 = v457;
              *v249 = 0x8000000000000000;
              v253 = sub_1BDDB3EC0(v248);
              v254 = *(_QWORD *)(v251 + 16);
              v255 = (v252 & 1) == 0;
              v256 = v254 + v255;
              if (__OFADD__(v254, v255))
                goto LABEL_208;
              v257 = v252;
              if (*(_QWORD *)(v251 + 24) >= v256)
              {
                v260 = (uint64_t)v411;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_1BDE63924();
                  v251 = v457;
                }
              }
              else
              {
                sub_1BDD8BE10(v256, isUniquelyReferenced_nonNull_native);
                v251 = v457;
                v258 = sub_1BDDB3EC0(v421);
                v260 = (uint64_t)v411;
                if ((v257 & 1) != (v259 & 1))
                  goto LABEL_210;
                v253 = v258;
              }
              v271 = v437;
              *v437 = v251;
              swift_bridgeObjectRelease();
              v272 = (_QWORD *)*v271;
              if ((v257 & 1) == 0)
              {
                v455 = MEMORY[0x1E0DEE9D8];
                swift_weakInit();
                swift_weakAssign();
                sub_1BDDB4F58(&v455, &v457);
                v273 = v383;
                sub_1BDD9C318(v421, v383, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
                sub_1BDDC4DA8(v253, v273, &v457, v272);
              }
              v274 = v272[7];
              v275 = v425;
              sub_1BE1B2054();
              sub_1BE1B2030();
              v435 = *(void (**)(char *, uint64_t))(v426 + 8);
              v435(v275, v246);
              v276 = (uint64_t *)(v260 + *(int *)(v393 + 36));
              v277 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
              v278 = *v276;
              sub_1BE1B2C90();
              if (v278 != v457)
              {
                v279 = (unint64_t *)(v274 + 16 * v253);
                v431 = (int64_t)v276;
                v429 = (char *)v277;
                while (1)
                {
                  v281 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
                  v283 = *v282;
                  v284 = v282[1];
                  v281(&v457, 0);
                  v285 = v425;
                  (*(void (**)(char *, uint64_t, uint64_t))(v426 + 16))(v425, v260, v246);
                  sub_1BE1B2C9C();
                  v435(v285, v246);
                  v286 = (uint64_t *)sub_1BDDC0538(v283, v284);
                  v288 = (unint64_t)v287;
                  v438 = v286;
                  v289 = (uint64_t)v434;
                  if (v286 != v287)
                    break;
LABEL_112:
                  sub_1BDD85EF0((uint64_t)v438, v288);
                  v280 = *(_QWORD *)v431;
                  v260 = (uint64_t)v411;
                  v246 = v424;
                  sub_1BE1B2C90();
                  if (v280 == v457)
                    goto LABEL_59;
                }
                if ((uint64_t)v287 >= (uint64_t)v438)
                {
                  v290 = (unint64_t)v438;
                  if ((uint64_t)v438 >= (uint64_t)v287)
                    goto LABEL_203;
                  while ((v290 & 0x8000000000000000) == 0)
                  {
                    if (v290 >= *(_QWORD *)(*v279 + 16))
                      goto LABEL_192;
                    v291 = v447;
                    v292 = (*(unsigned __int8 *)(v448 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v448 + 80);
                    v293 = *(_QWORD *)(v448 + 72) * v290;
                    sub_1BDD86DEC(*v279 + v292 + v293, v447, qword_1ED6F25C0);
                    sub_1BDD86DEC(v291 + *(int *)(v452 + 36), v289, &qword_1ED6F2520);
                    v294 = v450;
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v450 + 48))(v289, 1, v9) == 1)
                    {
                      sub_1BDD86E30(v289, &qword_1ED6F2520);
                      v295 = type metadata accessor for FinalizedTimestamp(0);
                      v296 = v446;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v295 - 8) + 56))(v446, 1, 1, v295);
                      *(_QWORD *)(v296 + *(int *)(v9 + 20)) = 2;
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v294 + 56))(v296, 0, 1, v9);
                    }
                    else
                    {
                      v297 = v289;
                      v298 = v433;
                      sub_1BDDA2E8C(v297, v433, type metadata accessor for RetainedMapRun);
                      v299 = v446;
                      sub_1BDD86DEC(v298, v446, (uint64_t *)&unk_1ED6F2DC0);
                      v300 = *(int *)(v9 + 20);
                      v301 = *(_QWORD *)(v298 + v300);
                      v302 = __OFADD__(v301, 1);
                      v303 = v301 + 1;
                      if (v302)
                        goto LABEL_197;
                      *(_QWORD *)(v299 + v300) = v303;
                      sub_1BDD9C3E0(v298, type metadata accessor for RetainedMapRun);
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v294 + 56))(v299, 0, 1, v9);
                      v289 = (uint64_t)v434;
                    }
                    sub_1BDD86E30(v447, qword_1ED6F25C0);
                    v304 = *v279;
                    v305 = swift_isUniquelyReferenced_nonNull_native();
                    *v279 = v304;
                    if ((v305 & 1) == 0)
                    {
                      v304 = sub_1BDFCEA00(v304);
                      *v279 = v304;
                    }
                    if (v290 >= *(_QWORD *)(v304 + 16))
                      goto LABEL_193;
                    ++v290;
                    sub_1BDDD1A10(v446, v304 + v292 + *(int *)(v452 + 36) + v293);
                    if (v288 == v290)
                      goto LABEL_112;
                  }
                  goto LABEL_191;
                }
                goto LABEL_202;
              }
LABEL_59:
              sub_1BDD86E30(v260, &qword_1ED6EFF58);
              swift_endAccess();
              goto LABEL_60;
            }
            sub_1BDD9C3E0(v264, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            sub_1BDD9C3E0(v269, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            sub_1BDD9C3E0(v266, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            v245 = &qword_1ED6F43C0;
          }
          sub_1BDD86E30(v396, &qword_1ED6F43C0);
          sub_1BDD9C3E0(v263, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          goto LABEL_145;
        }
        sub_1BDD86E30(v241, &qword_1ED6F43C0);
        v244 = v216(v243, 1, v242);
        v245 = &qword_1ED6ED640;
        v246 = v424;
        v247 = (uint64_t)v420;
        if (v244 == 1)
        {
          sub_1BDD86E30(v219, &qword_1ED6F43C0);
          v248 = v421;
          goto LABEL_97;
        }
LABEL_145:
        sub_1BDD86E30(v219, v245);
        v248 = v421;
LABEL_146:
        v329 = v248;
        v330 = v400;
        sub_1BDD9C318(v329, v400, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        swift_beginAccess();
        v331 = v437;
        v332 = swift_isUniquelyReferenced_nonNull_native();
        v457 = *v331;
        v333 = v457;
        *v331 = 0x8000000000000000;
        v335 = sub_1BDDB3EC0(v330);
        v336 = *(_QWORD *)(v333 + 16);
        v337 = (v334 & 1) == 0;
        v338 = v336 + v337;
        if (__OFADD__(v336, v337))
          goto LABEL_207;
        v339 = v334;
        if (*(_QWORD *)(v333 + 24) >= v338)
        {
          if ((v332 & 1) == 0)
          {
            sub_1BDE63924();
            v333 = v457;
          }
        }
        else
        {
          sub_1BDD8BE10(v338, v332);
          v333 = v457;
          v340 = sub_1BDDB3EC0(v400);
          if ((v339 & 1) != (v341 & 1))
            goto LABEL_210;
          v335 = v340;
        }
        v342 = v437;
        *v437 = v333;
        swift_bridgeObjectRelease();
        v343 = (_QWORD *)*v342;
        if ((v339 & 1) == 0)
        {
          v455 = MEMORY[0x1E0DEE9D8];
          swift_weakInit();
          swift_weakAssign();
          sub_1BDDB4F58(&v455, &v457);
          v344 = v383;
          sub_1BDD9C318(v400, v383, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDDC4DA8(v335, v344, &v457, v343);
        }
        v345 = v343[7];
        v346 = v425;
        sub_1BE1B2054();
        sub_1BE1B2030();
        v435 = *(void (**)(char *, uint64_t))(v426 + 8);
        v435(v346, v246);
        v347 = (uint64_t *)(v247 + *(int *)(v393 + 36));
        v348 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
        v349 = *v347;
        sub_1BE1B2C90();
        if (v349 != v457)
        {
          v350 = (unint64_t *)(v345 + 16 * v335);
          v431 = (int64_t)v347;
          v429 = (char *)v348;
          while (1)
          {
            v352 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
            v354 = *v353;
            v355 = v353[1];
            v352(&v457, 0);
            v356 = v425;
            (*(void (**)(char *, uint64_t, uint64_t))(v426 + 16))(v425, v247, v246);
            sub_1BE1B2C9C();
            v435(v356, v246);
            v357 = (uint64_t *)sub_1BDDC0538(v354, v355);
            v359 = (unint64_t)v358;
            v438 = v357;
            v360 = (uint64_t)v444;
            if (v357 != v358)
              break;
LABEL_158:
            sub_1BDD85EF0((uint64_t)v438, v359);
            v351 = *(_QWORD *)v431;
            v247 = (uint64_t)v420;
            v246 = v424;
            sub_1BE1B2C90();
            if (v351 == v457)
              goto LABEL_155;
          }
          if ((uint64_t)v358 >= (uint64_t)v438)
          {
            v361 = (unint64_t)v438;
            if ((uint64_t)v438 >= (uint64_t)v358)
              goto LABEL_201;
            while ((v361 & 0x8000000000000000) == 0)
            {
              if (v361 >= *(_QWORD *)(*v350 + 16))
                goto LABEL_188;
              v362 = v451;
              v363 = v449;
              v364 = (*(unsigned __int8 *)(v448 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v448 + 80);
              v365 = *(_QWORD *)(v448 + 72) * v361;
              sub_1BDD86DEC(*v350 + v364 + v365, v449, qword_1ED6F25C0);
              sub_1BDD86DEC(v363 + *(int *)(v452 + 36), v360, &qword_1ED6F2520);
              v366 = v450;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v450 + 48))(v360, 1, v9) == 1)
              {
                sub_1BDD86E30(v360, &qword_1ED6F2520);
                v367 = type metadata accessor for FinalizedTimestamp(0);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v367 - 8) + 56))(v362, 1, 1, v367);
                *(_QWORD *)(v362 + *(int *)(v9 + 20)) = 1;
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v366 + 56))(v362, 0, 1, v9);
              }
              else
              {
                v368 = v360;
                v369 = v443;
                sub_1BDDA2E8C(v368, v443, type metadata accessor for RetainedMapRun);
                sub_1BDD86DEC(v369, v362, (uint64_t *)&unk_1ED6F2DC0);
                v370 = *(int *)(v9 + 20);
                v371 = *(_QWORD *)(v369 + v370);
                v302 = __OFADD__(v371, 1);
                v372 = v371 + 1;
                if (v302)
                  goto LABEL_190;
                v373 = v451;
                *(_QWORD *)(v451 + v370) = v372;
                sub_1BDD9C3E0(v369, type metadata accessor for RetainedMapRun);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v366 + 56))(v373, 0, 1, v9);
                v360 = (uint64_t)v444;
              }
              sub_1BDD86E30(v449, qword_1ED6F25C0);
              v374 = *v350;
              v375 = swift_isUniquelyReferenced_nonNull_native();
              *v350 = v374;
              if ((v375 & 1) == 0)
              {
                v374 = sub_1BDFCEA00(v374);
                *v350 = v374;
              }
              if (v361 >= *(_QWORD *)(v374 + 16))
                goto LABEL_189;
              ++v361;
              sub_1BDDD1A10(v451, v374 + v364 + *(int *)(v452 + 36) + v365);
              if (v359 == v361)
                goto LABEL_158;
            }
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
            break;
          }
          goto LABEL_200;
        }
LABEL_155:
        sub_1BDD86E30(v247, &qword_1ED6EFF58);
        swift_endAccess();
        v230 = &v432;
LABEL_156:
        sub_1BDD9C3E0(*(v230 - 32), (uint64_t (*)(_QWORD))type metadata accessor for Replica);
LABEL_60:
        v175 = v416;
        v174 = v430;
        v184 = v418;
        v179 = v423;
LABEL_61:
        v182 = v442;
        v185 = *(void (**)(char *, uint64_t))(v442 + 8);
        v186 = v441;
        v185(v184, v441);
        v185(v422, v186);
        v183 = v421;
        sub_1BDD9C3E0(v421, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v134 = (uint64_t)v404;
        v181 = v427;
        goto LABEL_62;
      }
      v233 = v388;
      sub_1BDD86DEC(v214, v388, &qword_1ED6F43C0);
      v234 = v216(v215, 1, v213);
      v218 = &qword_1ED6ED640;
      v219 = (uint64_t)v394;
      if (v234 != 1)
      {
        v438 = v212;
        v235 = (uint64_t)v387;
        sub_1BDDA2E8C(v215, (uint64_t)v387, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v236 = *(int *)(v213 + 20);
        v237 = *(_QWORD *)(v233 + v236);
        v238 = *(_QWORD *)(v235 + v236);
        v239 = v381;
        sub_1BDD9C318(v233, v381, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C318(v235, v209, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        if (v237 == v238)
        {
          v240 = sub_1BE1B1F10();
          sub_1BDD9C3E0(v209, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDD9C3E0(v239, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDD9C3E0((uint64_t)v387, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDD86E30(v402, &qword_1ED6F43C0);
          sub_1BDD9C3E0(v233, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          sub_1BDD86E30(v410, &qword_1ED6F43C0);
          v179 = v423;
          v212 = v438;
          if ((v240 & 1) == 0)
            goto LABEL_94;
LABEL_76:
          v220 = v386;
          sub_1BDD9C318(v421, v386, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          swift_beginAccess();
          v221 = sub_1BDD9A058(&v457, v220);
          if (*v222)
          {
            v223 = v222;
            v429 = (char *)v221;
            v224 = v425;
            sub_1BE1B2054();
            v225 = (uint64_t)v405;
            sub_1BE1B2030();
            v226 = v424;
            v438 = *(uint64_t **)(v426 + 8);
            ((void (*)(char *, uint64_t))v438)(v224, v424);
            v227 = (uint64_t *)(v225 + *(int *)(v393 + 36));
            v228 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
            v229 = *v227;
            sub_1BE1B2C90();
            if (v229 != v453)
            {
              v435 = (void (*)(char *, uint64_t))v228;
              v431 = (int64_t)v227;
              while (1)
              {
                v307 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
                v309 = *v308;
                v310 = v308[1];
                v307(&v453, 0);
                v311 = v425;
                (*(void (**)(char *, uint64_t, uint64_t))(v426 + 16))(v425, v225, v226);
                sub_1BE1B2C9C();
                ((void (*)(char *, uint64_t))v438)(v311, v226);
                v312 = sub_1BDDC0538(v309, v310);
                v314 = v313;
                v315 = v312;
                if (v312 != v313)
                  break;
LABEL_128:
                sub_1BDD85EF0(v315, v314);
                v306 = *(_QWORD *)v431;
                v225 = (uint64_t)v405;
                v226 = v424;
                sub_1BE1B2C90();
                if (v306 == v453)
                  goto LABEL_78;
              }
              if (v313 < v312)
                goto LABEL_204;
              v316 = v312;
              if (v312 >= v313)
                goto LABEL_205;
              while ((v316 & 0x8000000000000000) == 0)
              {
                if (v316 >= *(_QWORD *)(*v223 + 16))
                  goto LABEL_195;
                v317 = (*(unsigned __int8 *)(v448 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v448 + 80);
                v318 = *(_QWORD *)(v448 + 72) * v316;
                v319 = v445;
                sub_1BDD86DEC(*v223 + v317 + v318, v445, qword_1ED6F25C0);
                v320 = v440;
                sub_1BDD86DEC(v319 + *(int *)(v452 + 36), v440, &qword_1ED6F2520);
                v321 = v450;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v450 + 48))(v320, 1, v9) == 1)
                {
                  sub_1BDD86E30(v320, &qword_1ED6F2520);
                  v322 = v439;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v321 + 56))(v439, 1, 1, v9);
                }
                else
                {
                  v323 = v432;
                  sub_1BDDA2E8C(v320, v432, type metadata accessor for RetainedMapRun);
                  v322 = v439;
                  sub_1BDD86DEC(v323, v439, (uint64_t *)&unk_1ED6F2DC0);
                  v324 = *(int *)(v9 + 20);
                  v325 = *(_QWORD *)(v323 + v324);
                  v302 = __OFADD__(v325, 1);
                  v326 = v325 + 1;
                  if (v302)
                    goto LABEL_198;
                  *(_QWORD *)(v322 + v324) = v326;
                  sub_1BDD9C3E0(v323, type metadata accessor for RetainedMapRun);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v450 + 56))(v322, 0, 1, v9);
                }
                sub_1BDD86E30(v445, qword_1ED6F25C0);
                v327 = *v223;
                v328 = swift_isUniquelyReferenced_nonNull_native();
                *v223 = v327;
                if ((v328 & 1) == 0)
                {
                  v327 = sub_1BDFCEA00(v327);
                  *v223 = v327;
                }
                if (v316 >= *(_QWORD *)(v327 + 16))
                  goto LABEL_196;
                ++v316;
                sub_1BDDD1A10(v322, v327 + v317 + *(int *)(v452 + 36) + v318);
                if (v314 == v316)
                  goto LABEL_128;
              }
              goto LABEL_194;
            }
LABEL_78:
            sub_1BDD86E30(v225, &qword_1ED6EFF58);
            ((void (*)(uint64_t *, _QWORD))v429)(&v457, 0);
            swift_endAccess();
            v230 = (uint64_t *)&v418;
            goto LABEL_156;
          }
          ((void (*)(uint64_t *, _QWORD))v221)(&v457, 0);
          swift_endAccess();
          sub_1BDD9C3E0(v220, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v174 = v430;
          v184 = v418;
          v175 = v416;
          goto LABEL_61;
        }
        sub_1BDD9C3E0(v209, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C3E0(v239, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C3E0((uint64_t)v387, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v218 = &qword_1ED6F43C0;
        v212 = v438;
      }
      sub_1BDD86E30(v402, &qword_1ED6F43C0);
      sub_1BDD9C3E0(v233, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      goto LABEL_93;
    }
    v137 = v119 + *(int *)(v134 + 48);
    sub_1BDDA2E8C(v119, (uint64_t)v105, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v138 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v442 + 32);
    v138(v438, v137, v129);
    v120 = v124;
    if (*(_QWORD *)(v124 + 16) && (v139 = sub_1BDDB3EC0((uint64_t)v105), (v140 & 1) != 0))
    {
      v141 = v442;
      v142 = v129;
      v143 = *(void (**)(char *, unint64_t, uint64_t))(v442 + 16);
      v143(v429, *(_QWORD *)(v124 + 56) + *(_QWORD *)(v442 + 72) * v139, v142);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v429, 0, 1, v142);
      v144 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48);
      v57 = v429;
      v145 = v144(v429, 1, v142);
      v146 = (char *)v417;
      if (v145 != 1)
      {
        v147 = v57;
        v148 = v441;
        v138((uint64_t *)v417, (uint64_t)v147, v441);
        v149 = v415;
        sub_1BDD9C318((uint64_t)v105, v415, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        swift_beginAccess();
        v151 = sub_1BDD9A058(&v457, v149);
        if (*(_QWORD *)v150)
        {
          v152 = v438;
          v401 = v150;
          v404 = (void (*)(uint64_t *, _QWORD))v151;
          v143(v407, (unint64_t)v438, v148);
          v143(v399, (unint64_t)v152, v148);
          v143(v392, (unint64_t)v146, v148);
          sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
          v153 = v398;
          sub_1BE1B2F6C();
          v154 = v397;
          v120 = v416;
          sub_1BE1B2F54();
          v155 = *(void (**)(char *, uint64_t))(v442 + 8);
          v155(v153, v148);
          sub_1BE1999B4();
          v404(&v457, 0);
          swift_endAccess();
          v155(v154, v148);
          sub_1BDD9C3E0(v415, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v155((char *)v417, v148);
        }
        else
        {
          ((void (*)(uint64_t *, _QWORD))v151)(&v457, 0);
          swift_endAccess();
          sub_1BDD9C3E0(v149, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          (*(void (**)(char *, uint64_t))(v442 + 8))(v146, v148);
        }
        a2 = v430;
        v159 = v450;
        v57 = v429;
        goto LABEL_38;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v442 + 56))(v57, 1, 1, v129);
    }
    sub_1BDD86E30((uint64_t)v57, &qword_1ED6F3C78);
    v156 = v423;
    sub_1BDD9C318((uint64_t)v105, v423, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    v157 = sub_1BDD9A058(&v457, v156);
    if (*v158)
      sub_1BE1999B4();
    ((void (*)(uint64_t *, _QWORD))v157)(&v457, 0);
    swift_endAccess();
    sub_1BDD9C3E0(v156, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    a2 = v430;
    v159 = v450;
LABEL_38:
    swift_beginAccess();
    v160 = *v437;
    if (!*(_QWORD *)(*v437 + 16) || (v161 = sub_1BDDB3EC0((uint64_t)v105), (v162 & 1) == 0))
    {
      v453 = 0;
      v454 = 0;
      v119 = (uint64_t)v435;
LABEL_5:
      sub_1BDD86E30((uint64_t)&v453, qword_1ED6F23F0);
      swift_endAccess();
      goto LABEL_6;
    }
    sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v160 + 56) + 16 * v161), &v453);
    v119 = (uint64_t)v435;
    if (!v453)
      goto LABEL_5;
    sub_1BDDB4ED4(&v453, &v455);
    sub_1BDD86E30((uint64_t)&v453, qword_1ED6F23F0);
    swift_endAccess();
    v163 = *(_QWORD *)(v455 + 16);
    if (!v163)
    {
      sub_1BDDB4E78((uint64_t)&v455);
LABEL_47:
      swift_beginAccess();
      v168 = v437;
      swift_bridgeObjectRetain();
      v169 = sub_1BDDB3EC0((uint64_t)v105);
      v171 = v170;
      swift_bridgeObjectRelease();
      if ((v171 & 1) != 0)
      {
        v172 = swift_isUniquelyReferenced_nonNull_native();
        v173 = *v168;
        v453 = *v168;
        *v168 = 0x8000000000000000;
        if ((v172 & 1) == 0)
        {
          sub_1BDE63924();
          v173 = v453;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v173 + 48) + *(_QWORD *)(v428 + 72) * v169, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDDB4F58((_QWORD *)(*(_QWORD *)(v173 + 56) + 16 * v169), &v455);
        sub_1BDEF0D00(v169, v173);
        *v168 = v173;
        swift_bridgeObjectRelease();
        sub_1BDDB4F58(&v455, &v453);
      }
      else
      {
        v453 = 0;
        v454 = 0;
      }
      v120 = v416;
      a2 = v430;
      v119 = (uint64_t)v435;
      swift_endAccess();
      sub_1BDD86E30((uint64_t)&v453, qword_1ED6F23F0);
      goto LABEL_6;
    }
    if (v163 != 1)
    {
      sub_1BDDB4E78((uint64_t)&v455);
      goto LABEL_6;
    }
    v164 = v389;
    sub_1BDD86DEC(v455 + ((*(unsigned __int8 *)(v448 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v448 + 80)), v389, qword_1ED6F25C0);
    v165 = (uint64_t)v390;
    sub_1BDDA2EF0(v164 + *(int *)(v452 + 36), (uint64_t)v390, &qword_1ED6F2520);
    LODWORD(v164) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v165, 1, v9);
    v166 = v165;
    v57 = v429;
    sub_1BDD86E30(v166, &qword_1ED6F2520);
    sub_1BDDB4E78((uint64_t)&v455);
    v167 = (_DWORD)v164 == 1;
    v119 = (uint64_t)v435;
    if (v167)
      goto LABEL_47;
LABEL_6:
    v58 = v442;
    (*(void (**)(uint64_t *, uint64_t))(v442 + 8))(v438, v441);
    sub_1BDD9C3E0((uint64_t)v105, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDE2D3A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void (*v79)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char v90;
  void (*v91)(char *, uint64_t);
  void (*v92)(uint64_t *, _QWORD);
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t Strong;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  BOOL v170;
  uint8_t *v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  void (*v182)(uint64_t, char *, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t (*v185)();
  _QWORD *v186;
  uint64_t v187;
  char *v189;
  char *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(char *, uint64_t, uint64_t);
  char *v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD v245[3];

  v225 = a2;
  v245[2] = *MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C98);
  v9 = MEMORY[0x1E0C80A78](v8);
  v220 = (uint64_t)&v189 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v204 = (uint64_t)&v189 - v11;
  v228 = sub_1BE1B1F58();
  v227 = *(_QWORD *)(v228 - 8);
  v12 = MEMORY[0x1E0C80A78](v228);
  v219 = (char *)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v218 = (char *)&v189 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v203 = (char *)&v189 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v202 = (char *)&v189 - v19;
  MEMORY[0x1E0C80A78](v18);
  v195 = (char *)&v189 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  MEMORY[0x1E0C80A78](v21);
  v200 = (char *)&v189 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v205 = *(_QWORD *)(v199 - 8);
  MEMORY[0x1E0C80A78](v199);
  v197 = (char **)((char *)&v189 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFCA0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v198 = (uint64_t)&v189 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v207 = (uint64_t)&v189 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v29 = MEMORY[0x1E0C80A78](v28);
  v196 = (uint64_t)&v189 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v189 - v31;
  v223 = type metadata accessor for FinalizedTimestamp(0);
  v232 = *(_QWORD **)(v223 - 8);
  v33 = MEMORY[0x1E0C80A78](v223);
  v193 = (uint64_t)&v189 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v192 = (uint64_t)&v189 - v35;
  v215 = sub_1BE1B1F64();
  v222 = *(_QWORD *)(v215 - 8);
  v36 = MEMORY[0x1E0C80A78](v215);
  v221 = (char *)&v189 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v216 = (char *)&v189 - v38;
  v194 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26A8);
  MEMORY[0x1E0C80A78](v194);
  v201 = (char *)&v189 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1BE1B206C();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = MEMORY[0x1E0C80A78](v40);
  v206 = (uint64_t)&v189 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42);
  v213 = (char *)&v189 - v45;
  MEMORY[0x1E0C80A78](v44);
  v47 = (char *)&v189 - v46;
  v231 = type metadata accessor for Replica();
  v48 = MEMORY[0x1E0C80A78](v231);
  v235 = (uint64_t)&v189 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0C80A78](v48);
  v234 = (uint64_t)&v189 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v208 = (char *)&v189 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v238 = (uint64_t)&v189 - v55;
  MEMORY[0x1E0C80A78](v54);
  v237 = (uint64_t)&v189 - v56;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v58 = MEMORY[0x1E0C80A78](v57);
  v60 = (char *)&v189 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = MEMORY[0x1E0C80A78](v58);
  v229 = (uint64_t)&v189 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v65 = (char *)&v189 - v64;
  MEMORY[0x1E0C80A78](v63);
  v209 = (char *)&v189 - v66;
  v241 = 0;
  v240 = 0;
  v239 = MEMORY[0x1E0DEE9E0];
  v233 = v4;
  v230 = a4;
  v226 = v60;
  v217 = a1;
  if ((a3 & 1) == 0)
  {
    v191 = a3;
    v211 = v4 + 16;
    v67 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    v236 = 0;
    v224 = v32;
    v214 = v67;
LABEL_3:
    v68 = (uint64_t)v209;
    while (1)
    {
      if (v236 == v67)
      {
        v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v65, 1, 1, v69);
        v236 = v67;
      }
      else
      {
        if (v236 >= v67)
          goto LABEL_71;
        v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
        v71 = *(_QWORD *)(v70 - 8);
        v72 = v60;
        v73 = v40;
        v74 = v41;
        v75 = v47;
        v76 = a4;
        v77 = (uint64_t)v65;
        v78 = v236;
        sub_1BDD86DEC(v217+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v236, v77, &qword_1ED6F3CB8);
        v236 = v78 + 1;
        v65 = (char *)v77;
        a4 = v76;
        v47 = v75;
        v41 = v74;
        v40 = v73;
        v60 = v72;
        v79 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56);
        v68 = (uint64_t)v209;
        v79(v65, 0, 1, v70);
      }
      sub_1BDDA2EF0((uint64_t)v65, v68, &qword_1ED6F3CC0);
      v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 48))(v68, 1, v80) == 1)
        break;
      v81 = v68 + *(int *)(v80 + 48);
      v82 = v237;
      sub_1BDDA2E8C(v68, v237, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v47, v81, v40);
      if (*(_QWORD *)(v82 + *(int *)(v231 + 20)))
      {
        v83 = (uint64_t)v201;
        v190 = v47;
        sub_1BE1B1F94();
        v84 = v83 + *(int *)(v194 + 36);
        v212 = *(void (**)(char *, uint64_t, uint64_t))(v222 + 16);
        v189 = v65;
        v210 = v84;
        while (1)
        {
          v87 = v216;
          v88 = v215;
          v212(v216, v84, v215);
          sub_1BDD8422C(qword_1ED6EF220, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
          v89 = v221;
          sub_1BE1B2C90();
          sub_1BDD8422C(&qword_1ED6EF208, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
          v90 = sub_1BE1B2798();
          v91 = *(void (**)(char *, uint64_t))(v222 + 8);
          v91(v89, v88);
          v91(v87, v88);
          if ((v90 & 1) != 0)
          {
            sub_1BDD86E30(v83, &qword_1ED6F26A8);
            v47 = v190;
            (*(void (**)(char *, uint64_t))(v41 + 8))(v190, v40);
            sub_1BDD9C3E0(v237, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            a4 = v230;
            v60 = v226;
            v65 = v189;
            v67 = v214;
            goto LABEL_3;
          }
          v92 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
          v94 = *v93;
          v92(&v242, 0);
          v95 = v213;
          (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v213, v83, v40);
          sub_1BE1B2C9C();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v95, v40);
          swift_beginAccess();
          v96 = *(_QWORD *)(v233 + 32);
          if (!*(_QWORD *)(v96 + 16) || (v97 = sub_1BDDB3EC0(v237), (v98 & 1) == 0))
          {
            v244 = 0;
            v245[0] = 0;
            v85 = v232;
            v86 = (uint64_t)v224;
LABEL_13:
            sub_1BDD86E30((uint64_t)&v244, qword_1ED6F23F0);
            swift_endAccess();
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v85[7])(v86, 1, 1, v223);
            v84 = v210;
            goto LABEL_14;
          }
          sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v96 + 56) + 16 * v97), &v244);
          v85 = v232;
          v86 = (uint64_t)v224;
          if (!v244)
            goto LABEL_13;
          sub_1BDDB4ED4(&v244, &v243);
          sub_1BDD86E30((uint64_t)&v244, qword_1ED6F23F0);
          swift_endAccess();
          v99 = *(_QWORD *)(v243 + 16);
          if (v99
            && (v100 = v243
                     + ((*(unsigned __int8 *)(v205 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v205 + 80)),
                v101 = *(_QWORD *)(v205 + 72),
                v94 < *(_QWORD *)(v100 + v101 * (v99 - 1) + 8)))
          {
            v102 = sub_1BDDC0A40(v94, 0, v243);
            if (v102 >= v99)
              goto LABEL_72;
            v103 = v94;
            sub_1BDD86DEC(v100 + v102 * v101, v207, qword_1ED6F25C0);
            v104 = 0;
          }
          else
          {
            v103 = v94;
            v104 = 1;
          }
          v105 = v199;
          v106 = v205;
          v107 = v207;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v205 + 56))(v207, v104, 1, v199);
          v108 = v198;
          sub_1BDD86DEC(v107, v198, &qword_1ED6EFCA0);
          v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v108, 1, v105);
          v110 = (uint64_t)v200;
          if (v109 == 1)
          {
            sub_1BDD86E30(v107, &qword_1ED6EFCA0);
            sub_1BDD86E30(v108, &qword_1ED6EFCA0);
            v86 = (uint64_t)v224;
            v111 = v232;
          }
          else
          {
            v112 = v108;
            v113 = v197;
            sub_1BDDA2EF0(v112, (uint64_t)v197, qword_1ED6F25C0);
            sub_1BDD86DEC((uint64_t)v113 + *(int *)(v105 + 36), v110, &qword_1ED6F2520);
            v114 = type metadata accessor for RetainedMapRun(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 48))(v110, 1, v114) == 1)
            {
              sub_1BDD86E30(v110, &qword_1ED6F2520);
              v111 = v232;
              v115 = v196;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v232[7])(v196, 1, 1, v223);
              v116 = v207;
              v86 = (uint64_t)v224;
            }
            else
            {
              v117 = v196;
              sub_1BDD86DEC(v110, v196, (uint64_t *)&unk_1ED6F2DC0);
              v118 = v110;
              v115 = v117;
              sub_1BDD9C3E0(v118, type metadata accessor for RetainedMapRun);
              v111 = v232;
              v119 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v232[6])(v117, 1, v223);
              v116 = v207;
              v86 = (uint64_t)v224;
              if (v119 != 1)
              {
                v124 = v115;
                v125 = v193;
                sub_1BDDA2E8C(v124, v193, type metadata accessor for FinalizedTimestamp);
                (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v195, v125, v228);
                v126 = v125;
                v127 = *(_QWORD *)(v125 + *(int *)(v223 + 20));
                v128 = v127 + v103;
                if (__OFADD__(v127, v103))
                  goto LABEL_74;
                v129 = v197;
                v130 = v116;
                v131 = *v197;
                sub_1BDD9C3E0(v126, type metadata accessor for FinalizedTimestamp);
                sub_1BDD86E30((uint64_t)v129, qword_1ED6F25C0);
                sub_1BDD86E30(v130, &qword_1ED6EFCA0);
                v132 = __OFSUB__(v128, v131);
                v133 = v128 - v131;
                if (v132)
                  goto LABEL_75;
                v86 = (uint64_t)v224;
                (*(void (**)(char *, char *, uint64_t))(v227 + 32))(v224, v195, v228);
                v134 = v223;
                *(_QWORD *)(v86 + *(int *)(v223 + 20)) = v133;
                v120 = v134;
                v111 = v232;
                ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v232[7])(v86, 0, 1, v134);
                goto LABEL_31;
              }
            }
            sub_1BDD86E30((uint64_t)v197, qword_1ED6F25C0);
            sub_1BDD86E30(v116, &qword_1ED6EFCA0);
            sub_1BDD86E30(v115, (uint64_t *)&unk_1ED6F2DC0);
          }
          v120 = v223;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v111[7])(v86, 1, 1, v223);
LABEL_31:
          v83 = (uint64_t)v201;
          sub_1BDDB4E78((uint64_t)&v243);
          v121 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v111[6])(v86, 1, v120);
          v84 = v210;
          if (v121 == 1)
          {
LABEL_14:
            sub_1BDD86E30(v86, (uint64_t *)&unk_1ED6F2DC0);
          }
          else
          {
            v122 = v192;
            sub_1BDDA2E8C(v86, v192, type metadata accessor for FinalizedTimestamp);
            v123 = v225;
            if (*(_QWORD *)(v122 + *(int *)(v120 + 20)) > v225)
              v123 = *(_QWORD *)(v122 + *(int *)(v120 + 20));
            v225 = v123;
            v83 = (uint64_t)v201;
            sub_1BDD9C3E0(v122, type metadata accessor for FinalizedTimestamp);
          }
        }
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v40);
      sub_1BDD9C3E0(v237, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v67 = v214;
    }
    a1 = v217;
    swift_bridgeObjectRelease();
    LOBYTE(a3) = v191;
  }
  LODWORD(v224) = a3 & 1;
  v135 = (_QWORD *)(v233 + 16);
  v237 = OBJC_IVAR___CRContext_crdtDatabase;
  v136 = *(char **)(a1 + 16);
  v236 = v233 + 32;
  v216 = (char *)v245;
  swift_bridgeObjectRetain();
  v137 = 0;
  v222 = v41;
  v138 = v206;
  v232 = v135;
  v221 = v136;
  v223 = v40;
  while (1)
  {
    if (v137 == v136)
    {
      v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 56))(v60, 1, 1, v144);
      v137 = v136;
    }
    else
    {
      if (v137 >= v136)
      {
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      v145 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      v146 = *(_QWORD *)(v145 - 8);
      sub_1BDD86DEC(v217+ ((*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80))+ *(_QWORD *)(v146 + 72) * (_QWORD)v137++, (uint64_t)v60, &qword_1ED6F3CB8);
      v147 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56);
      v135 = v232;
      v147(v60, 0, 1, v145);
    }
    v148 = v229;
    sub_1BDDA2EF0((uint64_t)v60, v229, &qword_1ED6F3CC0);
    v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 48))(v148, 1, v149) == 1)
      break;
    v150 = v148 + *(int *)(v149 + 48);
    sub_1BDDA2E8C(v148, v238, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v138, v150, v40);
    swift_beginAccess();
    v151 = *(_QWORD *)v236;
    if (!*(_QWORD *)(*(_QWORD *)v236 + 16) || (v152 = sub_1BDDB3EC0(v238), (v153 & 1) == 0))
    {
      v244 = 0;
      v245[0] = 0;
      v154 = v237;
LABEL_61:
      sub_1BDD86E30((uint64_t)&v244, qword_1ED6F23F0);
      swift_endAccess();
      goto LABEL_62;
    }
    sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v151 + 56) + 16 * v152), &v244);
    v154 = v237;
    if (!v244)
      goto LABEL_61;
    Strong = swift_weakLoadStrong();
    sub_1BDD86E30((uint64_t)&v244, qword_1ED6F23F0);
    swift_endAccess();
    if (Strong)
    {
      v156 = Strong + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
      swift_beginAccess();
      v157 = v156;
      v158 = v204;
      sub_1BDD86DEC(v157, v204, &qword_1ED6F3C98);
      v159 = type metadata accessor for CRReplicaDatabase.Replica(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 48))(v158, 1, v159) == 1)
        goto LABEL_77;
      v160 = v227;
      v161 = v203;
      v162 = v228;
      (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v203, v158, v228);
      sub_1BDD9C3E0(v158, type metadata accessor for CRReplicaDatabase.Replica);
      v163 = v238;
      sub_1BE1B1F40();
      sub_1BE1B1F40();
      v164 = v202;
      sub_1BE1B1F34();
      (*(void (**)(char *, uint64_t))(v160 + 8))(v161, v162);
      v165 = *(void (**)(char *, char *, uint64_t))(v160 + 32);
      v166 = (uint64_t)v208;
      v165(v208, v164, v162);
      *(_QWORD *)(v166 + *(int *)(v231 + 20)) = 0;
      v138 = v206;
      sub_1BDD907EC(v163, v206, v166, Strong, &v239, v225, (char)v224, v233, &v240, &v241);
      a4 = v230;
      if (Strong == *(_QWORD *)(v230 + v237))
      {
        swift_release();
        v142 = v166;
        v41 = v222;
        v60 = v226;
        v135 = v232;
        v136 = v221;
      }
      else
      {
        sub_1BDD84450();
        if (qword_1EF52BD08 != -1)
          swift_once();
        v167 = sub_1BE1B23C0();
        __swift_project_value_buffer(v167, (uint64_t)qword_1EF52C5F8);
        v168 = sub_1BE1B23A8();
        v169 = sub_1BE1B2DEC();
        v170 = os_log_type_enabled(v168, v169);
        v41 = v222;
        v136 = v221;
        if (v170)
        {
          v171 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v171 = 0;
          _os_log_impl(&dword_1BDD82000, v168, v169, "Using multiple contexts with the same CRDT. This will be inefficient.", v171, 2u);
          v172 = v171;
          a4 = v230;
          MEMORY[0x1C3B7E068](v172, -1, -1);
        }
        swift_release();

        v142 = (uint64_t)v208;
        v60 = v226;
        v135 = v232;
      }
      goto LABEL_43;
    }
LABEL_62:
    v173 = *(_QWORD *)(a4 + v154) + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
    swift_beginAccess();
    v174 = v173;
    v175 = v220;
    sub_1BDD86DEC(v174, v220, &qword_1ED6F3C98);
    v176 = type metadata accessor for CRReplicaDatabase.Replica(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v176 - 8) + 48))(v175, 1, v176) == 1)
      goto LABEL_76;
    v177 = v227;
    v178 = v219;
    v179 = v228;
    (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v219, v175, v228);
    sub_1BDD9C3E0(v175, type metadata accessor for CRReplicaDatabase.Replica);
    v180 = v238;
    sub_1BE1B1F40();
    sub_1BE1B1F40();
    v181 = v218;
    sub_1BE1B1F34();
    (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v179);
    v182 = *(void (**)(uint64_t, char *, uint64_t))(v177 + 32);
    v183 = v234;
    v182(v234, v181, v179);
    *(_QWORD *)(v183 + *(int *)(v231 + 20)) = 0;
    v184 = v235;
    sub_1BDD9C318(v180, v235, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v135 = v232;
    swift_beginAccess();
    v185 = sub_1BDD9A058(&v242, v184);
    if (*v186)
    {
      a4 = v230;
      v139 = v237;
      swift_weakAssign();
      ((void (*)(uint64_t *, _QWORD))v185)(&v242, 0);
      v41 = v222;
      v60 = v226;
    }
    else
    {
      ((void (*)(uint64_t *, _QWORD))v185)(&v242, 0);
      a4 = v230;
      v41 = v222;
      v60 = v226;
      v139 = v237;
    }
    swift_endAccess();
    sub_1BDD9C3E0(v235, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v140 = *(_QWORD *)(a4 + v139);
    swift_retain();
    v141 = v234;
    sub_1BDD907EC(v238, v138, v234, v140, &v239, v225, (char)v224, v233, &v240, &v241);
    swift_release();
    v142 = v141;
    v136 = v221;
LABEL_43:
    sub_1BDD9C3E0(v142, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v143 = v223;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v138, v223);
    v40 = v143;
    sub_1BDD9C3E0(v238, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((v240 & 1) != 0)
  {
    swift_beginAccess();
    if (!__OFADD__(*v135, 1))
    {
      ++*v135;
      goto LABEL_69;
    }
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
  }
LABEL_69:
  swift_beginAccess();
  v187 = *v135;
  swift_beginAccess();
  swift_beginAccess();
  return v187;
}

uint64_t sub_1BDE2EC2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  sub_1BDE2D3A0(a1, a2, 0, a3);
  v10 = v9;
  v12 = v11;
  v13 = sub_1BDE2D3A0(a4, 0, 1, a3);
  v15 = v14;
  v17 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = v12;
  sub_1BDE2EDA0(v17, (uint64_t)sub_1BDE2F1E0, 0, isUniquelyReferenced_nonNull_native, &v22);
  if (v5)
  {
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v19 = v10 | v15;
    v20 = v22;
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a5 = v13;
    *(_BYTE *)(a5 + 8) = v19 & 1;
    *(_QWORD *)(a5 + 16) = v20;
  }
  return result;
}

uint64_t sub_1BDE2ED0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;

  swift_beginAccess();
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDE2ED74()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1BDE2EDA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  char v5;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  char v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  _QWORD v50[3];
  _QWORD v51[9];

  v50[0] = type metadata accessor for Replica();
  v11 = *(_QWORD *)(v50[0] - 8);
  MEMORY[0x1E0C80A78](v50[0]);
  v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6EEFE0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = -1 << *(_BYTE *)(a1 + 32);
  v18 = ~v17;
  v19 = *(_QWORD *)(a1 + 64);
  v20 = -v17;
  v51[2] = a1;
  v51[3] = a1 + 64;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v51[4] = v18;
  v51[5] = 0;
  v51[6] = v21 & v19;
  v51[7] = a2;
  v51[8] = a3;
  v50[1] = a1;
  swift_bridgeObjectRetain();
  v50[2] = a3;
  swift_retain();
  sub_1BDEFCB08((uint64_t)v16);
  v22 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F43D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v16, 1, v22) == 1)
  {
LABEL_22:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1BDE27FD0();
    return swift_release();
  }
  v23 = &v16[*(int *)(v22 + 48)];
  sub_1BDDA2E8C((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  sub_1BDDB4F58(v23, v51);
  v24 = (_QWORD *)*a5;
  v26 = sub_1BDDB3EC0((uint64_t)v13);
  v27 = v24[2];
  v28 = (v25 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
    goto LABEL_23;
  v5 = v25;
  if (v24[3] >= v29)
  {
    if ((a4 & 1) == 0)
      goto LABEL_25;
    if ((v25 & 1) == 0)
    {
      do
      {
LABEL_12:
        v32 = (_QWORD *)*a5;
        *(_QWORD *)(*a5 + 8 * (v26 >> 6) + 64) |= 1 << v26;
        v33 = *(_QWORD *)(v11 + 72);
        sub_1BDDA2E8C((uint64_t)v13, v32[6] + v33 * v26, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDDB4F58(v51, (_QWORD *)(v32[7] + 16 * v26));
        v34 = v32[2];
        v35 = __OFADD__(v34, 1);
        v36 = v34 + 1;
        if (!v35)
        {
          v32[2] = v36;
          sub_1BDEFCB08((uint64_t)v16);
          v37 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F43D0);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v16, 1, v37) == 1)
            goto LABEL_22;
          v26 = (unint64_t)qword_1ED6F43D0;
          while (1)
          {
            v38 = &v16[*(int *)(v37 + 48)];
            sub_1BDDA2E8C((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            sub_1BDDB4F58(v38, v51);
            v39 = (_QWORD *)*a5;
            v11 = sub_1BDDB3EC0((uint64_t)v13);
            v41 = v39[2];
            v42 = (v40 & 1) == 0;
            v43 = v41 + v42;
            if (__OFADD__(v41, v42))
              break;
            v5 = v40;
            if (v39[3] < v43)
            {
              sub_1BDD8BE10(v43, 1);
              v44 = sub_1BDDB3EC0((uint64_t)v13);
              if ((v5 & 1) != (v45 & 1))
                goto LABEL_27;
              v11 = v44;
            }
            if ((v5 & 1) != 0)
              goto LABEL_26;
            v46 = (_QWORD *)*a5;
            *(_QWORD *)(*a5 + 8 * (v11 >> 6) + 64) |= 1 << v11;
            sub_1BDDA2E8C((uint64_t)v13, v46[6] + v33 * v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            sub_1BDDB4F58(v51, (_QWORD *)(v46[7] + 16 * v11));
            v47 = v46[2];
            v35 = __OFADD__(v47, 1);
            v48 = v47 + 1;
            if (v35)
              goto LABEL_24;
            v46[2] = v48;
            sub_1BDEFCB08((uint64_t)v16);
            v37 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F43D0);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v16, 1, v37) == 1)
              goto LABEL_22;
          }
LABEL_23:
          __break(1u);
        }
LABEL_24:
        __break(1u);
LABEL_25:
        sub_1BDE63924();
      }
      while ((v5 & 1) == 0);
    }
    goto LABEL_26;
  }
  sub_1BDD8BE10(v29, a4 & 1);
  v30 = sub_1BDDB3EC0((uint64_t)v13);
  if ((v5 & 1) == (v31 & 1))
  {
    v26 = v30;
    if ((v5 & 1) == 0)
      goto LABEL_12;
LABEL_26:
    sub_1BE1B3200();
    __break(1u);
  }
LABEL_27:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

_QWORD *sub_1BDE2F1E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)(a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE758) + 48));
  v5 = (_QWORD *)(a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ED6F43D0) + 48));
  sub_1BDD9C318(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  return sub_1BDDB4ED4(v4, v5);
}

uint64_t sub_1BDE2F250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 56) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v2 + v3) & ~v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v5 = v0 + v3;
  v6 = type metadata accessor for Replica();
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v7(v5, 1, v6))
  {
    v8 = sub_1BE1B1F58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
  }
  if (!v7(v0 + v4, 1, v6))
  {
    v9 = sub_1BE1B1F58();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v4, v9);
  }
  return swift_deallocObject();
}

uint64_t sub_1BDE2F35C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  return sub_1BDE2A81C(v0[2], v0[3], v0[4], v0[5], v0[6], (uint64_t)v0 + ((v2 + 56) & ~v2), (uint64_t)v0 + ((*(_QWORD *)(v1 + 64) + v2 + ((v2 + 56) & ~v2)) & ~v2));
}

uint64_t sub_1BDE2F3B0()
{
  uint64_t v0;

  return sub_1BDF1051C((uint64_t *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t CRDataStoreBundleReadFileVersionPolicy.hash(into:)()
{
  return sub_1BE1B3704();
}

BOOL static CRDataStoreBundleReadFileVersionPolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CRDataStoreBundleReadFileVersionPolicy.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t CRDataStoreBundle.publisher.getter()
{
  return sub_1BDDCD0F8();
}

uint64_t CRDataStoreBundle.__allocating_init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = sub_1BDE3404C(a1, a2, a3, a4, a5, a6);
  type metadata accessor for Capsule(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 16), v10);
  v11 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a2, v11);

  return v9;
}

uint64_t CRDataStoreBundle.init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *v6;
  v10 = sub_1BDE33EC8(a1, a2, a3, a4, a5, a6);
  type metadata accessor for Capsule(255, *(_QWORD *)(v9 + 80), *(_QWORD *)(*(_QWORD *)(v9 + 88) + 16), v11);
  v12 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a2, v12);

  return v10;
}

uint64_t CRDataStoreBundle.__allocating_init(_:sync:at:allowedEncodings:allowedAppFormats:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = v5;
  v12 = sub_1BE1B1DF0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  swift_allocObject();
  v16 = sub_1BDE33EC8(a1, a2, (uint64_t)v15, a4, a5, 0);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  type metadata accessor for Capsule(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 16), v17);
  v18 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  return v16;
}

uint64_t CRDataStoreBundle.__allocating_init(_:sync:at:version:fileFormatVersion:)(void *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = sub_1BDE340C4(a1, a2, a3, a4, a5 & 0x1FFFF);
  type metadata accessor for Capsule(255, *(_QWORD *)(v5 + 80), *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16), v9);
  v10 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a2, v10);

  return v8;
}

uint64_t CRDataStoreBundle.__allocating_init(_:sync:at:fileFormatVersion:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;

  v9 = sub_1BE1B1DF0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  v18 = 1;
  v13 = sub_1BDE340C4(a1, a2, (uint64_t)v12, &v18, a4 & 0x1FFFF);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  type metadata accessor for Capsule(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16), v14);
  v15 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a2, v15);
  return v13;
}

uint64_t CRDataStoreBundle.__allocating_init(sync:at:fileFormatVersion:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _OWORD v25[2];
  uint64_t v26;

  v24 = a3;
  v23 = sub_1BE1B1DF0();
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Capsule(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(*(_QWORD *)(v3 + 88) + 16), v9);
  v11 = sub_1BE1B2EE8();
  v21 = *(_QWORD *)(v11 - 8);
  v22 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - v12;
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v14 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v25);
  sub_1BDD86E30((uint64_t)v25, qword_1ED6F3DD0);
  v15 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a1, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v10);
  v16 = a2;
  v17 = a2;
  v18 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v23);
  LOBYTE(v25[0]) = 1;
  v19 = sub_1BDE340C4(v14, (uint64_t)v13, (uint64_t)v8, (char *)v25, v24 & 0x1FFFF);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v22);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v10);
  return v19;
}

uint64_t static CRDataStoreBundle.read(_:url:fileFormatVersion:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __int16 v9;
  unsigned __int8 v11;

  v11 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1BE1B61B0;
  if ((a3 & 0x10000) != 0)
    v9 = 0;
  else
    v9 = a3;
  *(_WORD *)(v8 + 32) = v9;
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)(a1, a2, &v11, (uint64_t)&unk_1E7758140, v8, a4);
  return swift_bridgeObjectRelease();
}

void static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)(void *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void **v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  id v55;
  void *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id aBlock[6];
  id v65[3];

  v62 = a5;
  v63 = a1;
  v58 = a2;
  v46 = a6;
  v65[1] = *(id *)MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(v6 + 88);
  v59 = *(_QWORD *)(v6 + 80);
  v61 = v9;
  v10 = type metadata accessor for Capsule(255, v59, *(_QWORD *)(v9 + 16), a4);
  v11 = sub_1BE1B2EE8();
  v49 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v51 = (char *)&v45 - v12;
  v13 = sub_1BE1B1DF0();
  v14 = *(_QWORD *)(v13 - 8);
  v54 = v13;
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v57 = *a3;
  v16 = &unk_1E7758168;
  if (a4)
    v16 = (void *)a4;
  v56 = v16;
  v65[0] = 0;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  v53 = (void **)(v17 + 16);
  v18 = objc_allocWithZone(MEMORY[0x1E0CB3600]);
  swift_bridgeObjectRetain();
  v19 = objc_msgSend(v18, sel_init);
  v55 = v19;
  v50 = v11;
  v20 = swift_allocBox();
  v48 = *(_QWORD *)(v10 - 8);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  v47 = v22;
  v52 = v10;
  v21(v22, 1, 1, v10);
  v23 = v58;
  v60 = sub_1BE1B1D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v13);
  v24 = (*(unsigned __int8 *)(v14 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v25 = swift_allocObject();
  v26 = v61;
  *(_QWORD *)(v25 + 16) = v59;
  *(_QWORD *)(v25 + 24) = v26;
  v27 = v63;
  *(_QWORD *)(v25 + 32) = v17;
  *(_QWORD *)(v25 + 40) = v27;
  v28 = v62;
  *(_QWORD *)(v25 + 48) = v56;
  *(_QWORD *)(v25 + 56) = v28;
  *(_QWORD *)(v25 + 64) = v19;
  *(_QWORD *)(v25 + 72) = v20;
  *(_BYTE *)(v25 + 80) = v57;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v25 + v24, (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v54);
  *(_QWORD *)(v25 + ((v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = v65;
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = sub_1BDE34354;
  v29[3] = v25;
  aBlock[4] = sub_1BDD843C8;
  aBlock[5] = v29;
  aBlock[0] = (id)MEMORY[0x1E0C809B0];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1BDE30BE4;
  aBlock[3] = &block_descriptor_3;
  v30 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  v31 = v63;
  v32 = v55;
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v33 = (void *)v60;
  objc_msgSend(v32, sel_coordinateReadingItemAtURL_options_error_byAccessor_, v60, 0, aBlock, v30);
  _Block_release(v30);

  v34 = aBlock[0];
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v30 & 1) != 0)
    __break(1u);
  if (v34)
    goto LABEL_9;
  if (v65[0])
  {
    v65[0];
LABEL_9:
    v38 = v34;
    swift_willThrow();
    swift_release();

    swift_release();
    v39 = v65[0];
    swift_release();

    return;
  }
  v35 = v53;
  swift_beginAccess();
  v36 = *v35;
  if (v36)
  {
    v37 = v36;
    goto LABEL_9;
  }
  v40 = v47;
  swift_beginAccess();
  v41 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v51, v40, v50);
  v42 = v48;
  v43 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v41, 1, v52) == 1)
  {
    __break(1u);
  }
  else
  {

    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v46, v41, v43);
    swift_release();
    swift_release();
    v44 = v65[0];
    swift_release();

  }
}

void sub_1BDE2FF1C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  id v17;
  void *v18;
  unsigned int v19;
  void *v20;
  void *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  _QWORD aBlock[8];

  aBlock[6] = *MEMORY[0x1E0C80C00];
  v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v18 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_fileExistsAtPath_, v18);

  if (!v19)
  {
    sub_1BDDFCAFC();
    v24 = swift_allocError();
    *(_OWORD *)v25 = xmmword_1BE1B6900;
    *(_BYTE *)(v25 + 16) = 0;
    swift_beginAccess();
    v26 = *(void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v24;

    return;
  }
  v20 = (void *)objc_opt_self();
  v21 = (void *)sub_1BE1B1D90();
  v22 = objc_msgSend(v20, sel_otherVersionsOfItemAtURL_, v21);

  if (v22)
  {
    sub_1BDE348F0();
    v23 = sub_1BE1B2978();

  }
  else
  {
    v23 = MEMORY[0x1E0DEE9D8];
  }
  if (a8 != 2)
    goto LABEL_12;
  if (!(v23 >> 62))
  {
    if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_9;
LABEL_12:
    sub_1BDE30310(a1, 1, a3, a4, a5, (uint64_t)a6, a7, v23, a8, a2, a11, a12);
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v35 = sub_1BE1B323C();
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_12;
LABEL_9:
  v36 = (void *)sub_1BE1B1D90();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a11;
  *(_QWORD *)(v27 + 24) = a12;
  *(_QWORD *)(v27 + 32) = a3;
  *(_QWORD *)(v27 + 40) = a4;
  *(_QWORD *)(v27 + 48) = a5;
  *(_QWORD *)(v27 + 56) = a6;
  *(_QWORD *)(v27 + 64) = a7;
  *(_QWORD *)(v27 + 72) = v23;
  *(_BYTE *)(v27 + 80) = 2;
  *(_QWORD *)(v27 + 88) = a2;
  *(_BYTE *)(v27 + 96) = 0;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = sub_1BDE3489C;
  *(_QWORD *)(v28 + 24) = v27;
  aBlock[4] = sub_1BDE3494C;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDE30BE4;
  aBlock[3] = &block_descriptor_41;
  v29 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v30 = a6;
  swift_retain();
  swift_retain();
  swift_retain();
  v31 = a3;
  swift_bridgeObjectRetain();
  swift_release();
  aBlock[0] = *a10;
  objc_msgSend(v30, sel_coordinateWritingItemAtURL_options_error_byAccessor_, v36, 0, aBlock, v29);
  _Block_release(v29);

  v32 = (void *)aBlock[0];
  v33 = (void *)*a10;
  *a10 = aBlock[0];
  v34 = v32;

  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v33 & 1) != 0)
    __break(1u);
}

void sub_1BDE30310(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  void *v54;
  _QWORD *v55;
  id v56;
  void *v57;
  void *v58;
  unsigned int v59;
  id v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  id v67;
  char *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  void (*v82)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107[4];

  v102 = a8;
  v103 = a3;
  v100 = a6;
  v106 = a4;
  LODWORD(v104) = a2;
  v107[3] = *(id *)MEMORY[0x1E0C80C00];
  v90 = *(_QWORD *)(a12 + 16);
  v92 = type metadata accessor for Capsule(255, a11, v90, a4);
  v89 = (_QWORD *)sub_1BE1B2EE8();
  v88 = *(v89 - 1);
  v14 = MEMORY[0x1E0C80A78](v89);
  v99 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v94 = (uint64_t)&v82 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  v18 = MEMORY[0x1E0C80A78](v17);
  v96 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v82 - v20;
  v22 = sub_1BE1B1DF0();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v95 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v93 = (char *)&v82 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v98 = (char *)&v82 - v29;
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v82 - v30;
  v97 = swift_projectBox();
  v105 = type metadata accessor for CRDataStoreBundleNonCoordinated(0, a11, a12, v32);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v33(v31, a1, v22);
  v87 = a1;
  v33(v21, a1, v22);
  v101 = v23;
  v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
  v34(v21, 0, 1, v22);
  v91 = a11;
  v36 = type metadata accessor for CRDataStoreBundleNonCoordinated.ModelStorage(0, a11, a12, v35);
  v37 = sub_1BDFB72A0();
  v38 = a5;
  swift_bridgeObjectRetain();
  v39 = v103;
  v40 = v106;
  swift_bridgeObjectRetain();
  v41 = sub_1BDFB7308(v39, v31, (uint64_t)v21, v104, v37, 0, 0, v40, v38, 0);
  v83 = v39;
  v85 = v36;
  v82 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v34;
  v42 = v94;
  v84 = v22;
  v86 = v38;
  sub_1BDFB73B0();
  sub_1BDFB73F0(v42);
  v44 = v97;
  swift_beginAccess();
  v88 = *(_QWORD *)(v88 + 40);
  ((void (*)(uint64_t, uint64_t, _QWORD *))v88)(v44, v42, v89);
  v45 = v102;
  if (v102 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v46 = (_QWORD *)sub_1BE1B323C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = *(_QWORD **)((v102 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v47 = v86;
  v48 = v95;
  v49 = (uint64_t)v96;
  if (!v46)
    goto LABEL_14;
  v103 = v46;
  v104 = v41;
  if (a9 != 1)
  {
    if (a9 == 2)
    {
      v50 = v45 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      v41 = 4;
      v51 = v84;
      v52 = v98;
      do
      {
        if (v50)
          v53 = (id)MEMORY[0x1C3B7CFAC](v41 - 4, v45);
        else
          v53 = *(id *)(v45 + 8 * v41);
        v54 = v53;
        v55 = (_QWORD *)(v41 - 3);
        if (__OFADD__(v41 - 4, 1))
        {
          __break(1u);
          goto LABEL_26;
        }
        v56 = objc_msgSend(v53, sel_URL);
        sub_1BE1B1DD8();

        sub_1BDFB7478();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v52, v51);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v41;
        v45 = v102;
      }
      while (v55 != v103);
      swift_bridgeObjectRelease();
      v57 = (void *)objc_opt_self();
      v58 = (void *)sub_1BE1B1D90();
      v107[0] = 0;
      v59 = objc_msgSend(v57, sel_removeOtherVersionsOfItemAtURL_error_, v58, v107);

      v60 = v107[0];
      if (v59)
      {
        v61 = v94;
        sub_1BDFB73F0(v94);
        v62 = v60;
        swift_release();
        v63 = v97;
        swift_beginAccess();
        ((void (*)(uint64_t, uint64_t, _QWORD *))v88)(v63, v61, v89);
      }
      else
      {
        v80 = v107[0];
        v81 = sub_1BE1B1D3C();

        swift_willThrow();
        swift_release();
        swift_beginAccess();
        v43 = *(void **)(a10 + 16);
        *(_QWORD *)(a10 + 16) = v81;

      }
      return;
    }
LABEL_14:
    swift_release();
    return;
  }
  v88 = v45 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  v64 = 4;
  while (1)
  {
    if (v88)
      v65 = (id)MEMORY[0x1C3B7CFAC](v64 - 4, v45);
    else
      v65 = *(id *)(v45 + 8 * v64);
    v66 = v65;
    if (__OFADD__(v64 - 4, 1))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v89 = (_QWORD *)(v64 - 3);
    v94 = v64;
    v98 = v83;
    v67 = objc_msgSend(v66, sel_URL);
    v68 = v93;
    sub_1BE1B1DD8();

    v69 = v66;
    v70 = objc_msgSend(v66, sel_URL);
    sub_1BE1B1DD8();

    v71 = v84;
    (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v49, v48, v84);
    v82(v49, 0, 1, v71);
    v72 = sub_1BDFB72A0();
    v73 = v106;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDFB7308(v98, v68, v49, 1, v72, 0, 1, v73, v47, 0);
    sub_1BDFB73B0();
    v74 = v99;
    sub_1BDFB73F0(v99);
    v75 = v92;
    v76 = *(_QWORD *)(v92 - 8);
    v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
    if (v77(v74, 1, v92) == 1)
      break;
    v78 = v97;
    swift_beginAccess();
    if (v77(v78, 1, v75) == 1)
      goto LABEL_29;
    v79 = v99;
    Capsule.merge<A>(_:)(v99, v75, v91, v90);
    swift_endAccess();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v79, v75);
    v48 = v95;
    v64 = v94 + 1;
    v45 = v102;
    v47 = v86;
    v49 = (uint64_t)v96;
    if (v89 == v103)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t sub_1BDE30BC4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1BDE30BE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v8;

  v2 = sub_1BE1B1DF0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  sub_1BE1B1DD8();
  v6(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id aBlock[6];
  id v48[2];

  v44 = a2;
  v48[1] = *(id *)MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(v5 + 80);
  v45 = *(_QWORD *)(v5 + 88);
  v46 = v10;
  v11 = type metadata accessor for Capsule(0, v10, *(_QWORD *)(v45 + 16), a4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v38 - v14;
  v16 = *(_QWORD *)(a4 + 16);
  if (!v16)
  {
LABEL_5:
    v38[1] = v6;
    v48[0] = 0;
    v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_init);
    v43 = sub_1BE1B1D90();
    v42 = sub_1BE1B1D90();
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v40 = v11;
    v19(v15, v44, v11);
    v20 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = v12;
    v22 = a4;
    v23 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    v39 = v15;
    v25 = (char *)swift_allocObject();
    v26 = v45;
    *((_QWORD *)v25 + 2) = v46;
    *((_QWORD *)v25 + 3) = v26;
    *((_QWORD *)v25 + 4) = v48;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v25[v20], v39, v40);
    *(_QWORD *)&v25[v21] = a1;
    *(_QWORD *)&v25[v23] = v22;
    *(_QWORD *)&v25[v24] = a5;
    v27 = v41;
    *(_QWORD *)&v25[(v24 + 15) & 0xFFFFFFFFFFFFFFF8] = v41;
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = sub_1BDE344FC;
    v28[3] = v25;
    aBlock[4] = sub_1BDD843C8;
    aBlock[5] = v28;
    aBlock[0] = (id)MEMORY[0x1E0C809B0];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1BDDD7274;
    aBlock[3] = &block_descriptor_15;
    v29 = _Block_copy(aBlock);
    v30 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v27;
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v33 = (void *)v42;
    v32 = (void *)v43;
    objc_msgSend(v31, sel_coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor_, v43, 0, v42, 0, aBlock, v29);
    _Block_release(v29);

    v34 = aBlock[0];
    LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v29 & 1) != 0)
      __break(1u);
    if (!v34)
    {
      if (!v48[0])
      {

        swift_release();
        return;
      }
      v35 = v48[0];
    }
    v36 = v34;
    swift_willThrow();

    swift_release();
    return;
  }
  v17 = (unsigned __int8 *)(a4 + 32);
  while (*v17++)
  {
    if (!--v16)
      goto LABEL_5;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v37 = 0xD00000000000002ALL;
  *(_QWORD *)(v37 + 8) = 0x80000001BE1CDAB0;
  *(_BYTE *)(v37 + 16) = 0;
  swift_willThrow();
}

void sub_1BDE31004(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  int v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void (**v38)(char *, uint64_t);
  uint64_t v39;
  id v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  id v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, char *, uint64_t);
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  id v64;
  void *v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  unsigned __int8 v84;
  id v85[5];

  v80 = a7;
  v81 = a6;
  v79 = a5;
  v75 = a4;
  v83 = a3;
  v85[3] = *(id *)MEMORY[0x1E0C80C00];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v12);
  v77 = a10;
  v78 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a10 + 16);
  v82 = a9;
  v71 = type metadata accessor for Capsule(255, a9, v14, v15);
  v16 = sub_1BE1B2EE8();
  v73 = *(_QWORD *)(v16 - 8);
  v74 = v16;
  MEMORY[0x1E0C80A78](v16);
  v72 = (char *)&v69 - v17;
  v18 = sub_1BE1B1DF0();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v76 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v69 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v69 - v25;
  v84 = 0;
  v27 = (void *)objc_opt_self();
  v28 = objc_msgSend(v27, sel_defaultManager);
  sub_1BE1B1DE4();
  v29 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(v28, sel_fileExistsAtPath_isDirectory_, v29, &v84);

  v31 = a1;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v32(v26, v31, v18);
  if ((v30 & 1) != 0)
  {
    v70 = a8;
    v33 = v84;
    v32(v24, (uint64_t)v26, v18);
    if (v33 == 1)
    {
      v69 = v31;
      v34 = objc_msgSend(v27, sel_defaultManager);
      sub_1BE1B1DE4();
      v35 = (void *)sub_1BE1B27A4();
      swift_bridgeObjectRelease();
      v85[0] = 0;
      v36 = objc_msgSend(v34, sel_contentsOfDirectoryAtPath_error_, v35, v85);

      v37 = v85[0];
      v38 = (void (**)(char *, uint64_t))(v19 + 8);
      if (v36)
      {
        v39 = sub_1BE1B2978();
        v40 = v37;

        v41 = *(_QWORD *)(v39 + 16);
        swift_bridgeObjectRelease();
        v42 = *v38;
        v42(v24, v18);
        v42(v26, v18);
        v31 = v69;
        a8 = v70;
        if (!v41)
          goto LABEL_7;
LABEL_13:
        sub_1BDDFCAFC();
        v63 = swift_allocError();
        *(_QWORD *)v67 = 0xD000000000000014;
        *(_QWORD *)(v67 + 8) = 0x80000001BE1CDBC0;
        *(_BYTE *)(v67 + 16) = 0;
        goto LABEL_14;
      }
      v64 = v85[0];
      v65 = (void *)sub_1BE1B1D3C();

      swift_willThrow();
    }
    else
    {
      v38 = (void (**)(char *, uint64_t))(v19 + 8);
    }
    v66 = *v38;
    v66(v24, v18);
    v66(v26, v18);
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
LABEL_7:
  v43 = objc_msgSend(v27, sel_defaultManager);
  v44 = (void *)sub_1BE1B1D90();
  v85[0] = 0;
  v45 = objc_msgSend(v43, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v44, 1, 0, v85);

  v47 = v85[0];
  if (v45)
  {
    v70 = a8;
    v48 = v77;
    type metadata accessor for CRDataStoreBundleNonCoordinated.ModelStorage(0, v82, v77, v46);
    v49 = sub_1BDFB72A0();
    v50 = v71;
    v51 = v72;
    v52 = *(_QWORD *)(v71 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v72, v75, v71);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v51, 0, 1, v50);
    v53 = v49 + *(_QWORD *)(*(_QWORD *)v49 + 96);
    swift_beginAccess();
    v54 = *(void (**)(uint64_t, char *, uint64_t))(v73 + 40);
    v55 = v47;
    v54(v53, v51, v74);
    swift_endAccess();
    type metadata accessor for CRDataStoreBundleNonCoordinated(0, v82, v48, v56);
    v57 = v76;
    v32(v76, v31, v18);
    v58 = (uint64_t)v78;
    v32(v78, v31, v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v58, 0, 1, v18);
    v59 = (char *)v79;
    swift_retain();
    v60 = v81;
    swift_bridgeObjectRetain();
    v61 = swift_bridgeObjectRetain();
    sub_1BDFB7308(v59, v57, v58, 0, v49, 0, 0, v60, v61, 0);
    sub_1BDFB74C8(v70);
    swift_release();
    swift_release();
    return;
  }
  v62 = v85[0];
  v63 = sub_1BE1B1D3C();

  swift_willThrow();
LABEL_14:
  v68 = *v83;
  *v83 = (void *)v63;

}

uint64_t static CRDataStoreBundle.write(_:model:url:version:fileFormatVersion:)(void *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v9 = *a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B730);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BE1B61B0;
  *(_BYTE *)(v10 + 32) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BE1B61B0;
  if ((a5 & 0x10000) != 0)
    v12 = 0;
  else
    v12 = a5;
  *(_WORD *)(v11 + 32) = v12;
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)(a1, a2, a3, v10, v11);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t static CRDataStoreBundle.write(_:model:url:fileFormatVersion:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  __int16 v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1BE1B61B0;
  if ((a4 & 0x10000) != 0)
    v9 = 0;
  else
    v9 = a4;
  *(_WORD *)(v8 + 32) = v9;
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)(a1, a2, a3, (uint64_t)&unk_1E77581B8, v8);
  return swift_bridgeObjectRelease();
}

uint64_t static CRDataStoreBundle.write(_:url:fileFormatVersion:)(uint64_t a1, uint64_t a2, int a3)
{
  id v6;
  uint64_t v7;
  __int16 v8;
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v6 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v10);
  sub_1BDD86E30((uint64_t)v10, qword_1ED6F3DD0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BE1B61B0;
  if ((a3 & 0x10000) != 0)
    v8 = 0;
  else
    v8 = a3;
  *(_WORD *)(v7 + 32) = v8;
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)(v6, a1, a2, (uint64_t)&unk_1E7758190, v7);

  return swift_bridgeObjectRelease();
}

uint64_t static CRDataStoreBundle.canRead(url:allowedEncodings:allowedAppFormats:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  id v12[6];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = 1;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_init);
  v6 = (void *)sub_1BE1B1D90();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = &v13;
  v7[3] = a2;
  v7[4] = a3;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_1BDE345C4;
  v8[3] = v7;
  v12[4] = sub_1BDE3494C;
  v12[5] = v8;
  v12[0] = (id)MEMORY[0x1E0C809B0];
  v12[1] = (id)1107296256;
  v12[2] = sub_1BDE30BE4;
  v12[3] = &block_descriptor_25_0;
  v9 = _Block_copy(v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v12[0] = 0;
  objc_msgSend(v5, sel_coordinateReadingItemAtURL_options_error_byAccessor_, v6, 0, v12, v9);
  _Block_release(v9);

  v10 = v12[0];
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v5 & 1) != 0)
    __break(1u);
  if (v13 == 1)
  {
    swift_release();
    if (!v10)
      return 1;
  }
  else
  {
    swift_release();
  }

  return 0;
}

void sub_1BDE319FC(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];
  uint64_t v29;

  v26 = a4;
  v6 = sub_1BE1B1DF0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v11 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v10, sel_fileExistsAtPath_, v11);

  if (v12)
  {
    v25[1] = a2;
    sub_1BE1B1DA8();
    v13 = sub_1BE1B1DE4();
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    v16 = *(_QWORD *)(a3 + 16);
    v17 = MEMORY[0x1E0DEE9D8];
    if (v16)
    {
      v18 = v13;
      v27 = MEMORY[0x1E0DEE9D8];
      sub_1BDE22934(0, v16, 0);
      v17 = v27;
      v19 = (unsigned __int8 *)(a3 + 32);
      v20 = *(_QWORD *)(v27 + 16);
      do
      {
        v21 = *v19++;
        if (v21 < 2)
          v22 = 1;
        else
          v22 = 2;
        v27 = v17;
        v23 = *(_QWORD *)(v17 + 24);
        if (v20 >= v23 >> 1)
        {
          sub_1BDE22934(v23 > 1, v20 + 1, 1);
          v17 = v27;
        }
        *(_QWORD *)(v17 + 16) = v20 + 1;
        *(_WORD *)(v17 + 2 * v20++ + 32) = v22;
        --v16;
      }
      while (v16);
      v13 = v18;
    }
    type metadata accessor for CRSQLStore();
    swift_initStackObject();
    v24 = v26;
    swift_bridgeObjectRetain();
    sub_1BDDF4324(v13, v15, (uint64_t)v28, 0, 1, 0, v17, v24);
    swift_release();
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t CRDataStoreBundle.getModel(reader:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE31C68(a1, a2);
}

uint64_t sub_1BDE31C68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  _QWORD v16[2];
  _QWORD aBlock[6];

  v5 = sub_1BE1B248C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B24BC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(_QWORD *)(v2 + 32);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v2;
  aBlock[4] = sub_1BDE3483C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_31;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1BE1B24A4();
  v16[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8A2D0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDDA9D60((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0, MEMORY[0x1E0DEAF38]);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t CRDataStoreBundle.sync(_:)(uint64_t a1)
{
  return sub_1BE19240C(a1);
}

uint64_t CRDataStoreBundle.sync(_:finished:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE19269C(a1, a2, a3);
}

uint64_t CRDataStoreBundle.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE192894(a1, a2, a3);
}

uint64_t CRDataStoreBundle.updates.getter()
{
  return sub_1BE1939D0();
}

uint64_t CRDataStoreBundle.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t CRDataStoreBundle.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE31F08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[16] + *(_QWORD *)(*(_QWORD *)v1[16] + 96);
  swift_beginAccess();
  type metadata accessor for Capsule(255, *(_QWORD *)(v3 + 632), *(_QWORD *)(*(_QWORD *)(v3 + 640) + 16), v5);
  v6 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v4, v6);
}

uint64_t (*sub_1BDE31F94(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 128);
  swift_beginAccess();
  swift_retain();
  return sub_1BDE31FF4;
}

uint64_t sub_1BDE31FF4()
{
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE32018(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *v1;
  v4 = v1[16] + *(_QWORD *)(*(_QWORD *)v1[16] + 96);
  swift_beginAccess();
  type metadata accessor for Capsule(255, *(_QWORD *)(v3 + 632), *(_QWORD *)(*(_QWORD *)(v3 + 640) + 16), v5);
  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  swift_retain();
  v8(v4, a1, v6);
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

uint64_t sub_1BDE320D8(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  type metadata accessor for Capsule(255, *(_QWORD *)(*(_QWORD *)a3 + 632), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 640) + 16), a4);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - v7;
  sub_1BDE31F08((uint64_t)&v10 - v7);
  a1(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1BDE32184()
{
  return sub_1BE1B1DA8();
}

uint64_t sub_1BDE321BC@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  id v23;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31[3];

  v30 = a1;
  v31[2] = *(id *)MEMORY[0x1E0C80C00];
  v28 = sub_1BE1B1F58();
  v1 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1BE1B1DF0();
  v4 = *(_QWORD *)(v29 - 8);
  v5 = MEMORY[0x1E0C80A78](v29);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v27 - v8;
  v10 = (void *)objc_opt_self();
  v11 = objc_msgSend(v10, sel_defaultManager);
  v12 = (void *)sub_1BE1B1D90();
  v31[0] = 0;
  v13 = objc_msgSend(v11, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v12, 1, v31);

  v14 = v31[0];
  if (v13)
  {
    sub_1BE1B1DD8();
    v15 = v14;

    sub_1BE1B1DA8();
    v16 = v7;
    v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v18 = v29;
    v17(v16, v29);
    sub_1BE1B1F4C();
    sub_1BE1B1EF8();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v28);
    v31[0] = (id)0x636E657265686F43;
    v31[1] = (id)0xEA00000000002D65;
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    v19 = v30;
    sub_1BE1B1DA8();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v10, sel_defaultManager);
    v21 = (void *)sub_1BE1B1D90();
    v31[0] = 0;
    v22 = objc_msgSend(v20, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v21, 1, 0, v31);

    if ((v22 & 1) != 0)
    {
      v23 = v31[0];
    }
    else
    {
      v26 = v31[0];
      sub_1BE1B1D3C();

      swift_willThrow();
      v17(v19, v18);
    }
    return ((uint64_t (*)(char *, uint64_t))v17)(v9, v18);
  }
  else
  {
    v25 = v31[0];
    sub_1BE1B1D3C();

    return swift_willThrow();
  }
}

uint64_t sub_1BDE324D8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  id v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  unsigned int v20;
  id v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  int v49;
  uint64_t v50;
  id v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = sub_1BE1B1DF0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v42 - v13;
  result = sub_1BDE321BC((char *)&v42 - v13);
  if (!v4)
  {
    v49 = a2;
    v50 = v3;
    v48 = a3;
    v16 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    sub_1BE1B1DA8();
    v17 = (void *)sub_1BE1B1D90();
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    sub_1BE1B1DA8();
    v19 = (void *)sub_1BE1B1D90();
    v18(v12, v8);
    v51 = 0;
    v20 = objc_msgSend(v16, sel_copyItemAtURL_toURL_error_, v17, v19, &v51);

    v21 = v51;
    if (v20)
    {
      v22 = v50;
      if (*(_QWORD *)(v50 + 48))
      {
        v23 = *(void **)(v50 + 40);
        v45 = *(_QWORD *)(v50 + 48);
        v46 = v23;
        v51 = (id)sub_1BE1B1DE4();
        v52 = v24;
        v55 = 47;
        v56 = 0xE100000000000000;
        sub_1BDDC8C50();
        v25 = (_QWORD *)sub_1BE1B2F24();
        swift_bridgeObjectRelease();
        v26 = v25[2];
        v27 = v26 - 1;
        if (!v26)
          v27 = 0;
        v51 = v25;
        v52 = (unint64_t)(v25 + 4);
        v53 = v27;
        v54 = (2 * v26) | 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C618);
        sub_1BDDA9D60(&qword_1EF52C620, &qword_1EF52C618, MEMORY[0x1E0DEBF68]);
        v47 = v18;
        v28 = sub_1BE1B2708();
        v43 = v29;
        v44 = v28;
        swift_bridgeObjectRelease();
        v51 = (id)sub_1BE1B1DE4();
        v52 = v30;
        v55 = 47;
        v56 = 0xE100000000000000;
        v31 = (_QWORD *)sub_1BE1B2F24();
        swift_bridgeObjectRelease();
        v32 = v31[2];
        v33 = v32 - 2;
        if (v32 < 2)
          v33 = 0;
        v51 = v31;
        v52 = (unint64_t)(v31 + 4);
        v53 = v33;
        v54 = (2 * v32) | 1;
        v18 = v47;
        v34 = sub_1BE1B2708();
        v42 = v35;
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1BE1B6910;
        v51 = 0;
        v52 = 0xE000000000000000;
        sub_1BE1B305C();
        v37 = v45;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v51 = v46;
        v52 = v37;
        sub_1BE1B284C();
        v38 = v52;
        *(_QWORD *)(v36 + 32) = v51;
        *(_QWORD *)(v36 + 40) = v38;
        v39 = MEMORY[0x1E0DEA968];
        v40 = v44;
        *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v36 + 64) = v40;
        *(_QWORD *)(v36 + 72) = v43;
        *(_QWORD *)(v36 + 88) = v39;
        *(_QWORD *)(v36 + 96) = 15917;
        *(_QWORD *)(v36 + 104) = 0xE200000000000000;
        *(_QWORD *)(v36 + 152) = v39;
        *(_QWORD *)(v36 + 120) = v39;
        *(_QWORD *)(v36 + 128) = v34;
        *(_QWORD *)(v36 + 136) = v42;
        sub_1BE1B36D4();
        v22 = v50;
        swift_bridgeObjectRelease();
      }
      result = sub_1BDE32978((uint64_t)v14, a1);
      if ((v49 & 1) != 0)
      {
        if (*(_QWORD *)(v22 + 120))
        {
          swift_retain();
          sub_1BDFB73B0();
          v18(v14, v8);
          return swift_release();
        }
        else
        {
          __break(1u);
        }
        return result;
      }
    }
    else
    {
      v41 = v21;
      sub_1BE1B1D3C();

      swift_willThrow();
    }
    return ((uint64_t (*)(char *, uint64_t))v18)(v14, v8);
  }
  return result;
}

uint64_t sub_1BDE32978(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  _QWORD v26[4];

  v3 = v2;
  v6 = *v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B1DF0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = type metadata accessor for CRDataStoreBundleNonCoordinated(0, *(_QWORD *)(v6 + 632), *(_QWORD *)(v6 + 640), v14);
  v15 = (void *)v3[9];
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v16(v13, a1, v10);
  v16(v9, a2, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  v17 = v3[16];
  v18 = v3[17];
  v20 = v3[18];
  v19 = v3[19];
  swift_bridgeObjectRetain();
  v21 = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v21;
  v23 = v26[3];
  result = sub_1BDFB7308(v22, v13, (uint64_t)v9, 0, v17, 1, 0, v19, v18, v20);
  if (!v23)
  {
    v3[15] = result;
    result = swift_release();
    v25 = v3[15];
    if (v25)
      *(_BYTE *)(v25 + qword_1EF549020) = 1;
  }
  return result;
}

uint64_t sub_1BDE32B2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;

  v5 = v4;
  v70 = a3;
  v72 = a2;
  v7 = *(_QWORD *)(*v5 + 632);
  v67 = *(_QWORD *)(*v5 + 640);
  v68 = v7;
  v8 = type metadata accessor for Capsule(255, v7, *(_QWORD *)(v67 + 16), a4);
  v9 = sub_1BE1B2EE8();
  v73 = *(_QWORD *)(v9 - 8);
  v74 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v69 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v66 = (uint64_t)&v64 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v64 - v14;
  v16 = sub_1BE1B1DF0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v71 = a1;
  sub_1BE1B1DA8();
  sub_1BE1B1DE4();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v21 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  LODWORD(v19) = objc_msgSend(v20, sel_fileExistsAtPath_, v21);

  if (!(_DWORD)v19)
  {
    LOBYTE(v32) = 0;
    return v32 & 1;
  }
  sub_1BDE31F08((uint64_t)v15);
  v22 = *(_QWORD *)(v8 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v15, 1, v8);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v74);
  v25 = v5;
  if (v24 == 1)
  {
    v26 = v5[6];
    v27 = v78;
    if (v26)
    {
      v28 = v25[5];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1BE1B61B0;
      v76 = 0;
      v77 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v76 = v28;
      v77 = v26;
      sub_1BE1B284C();
      v30 = v76;
      v31 = v77;
      *(_QWORD *)(v29 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v29 + 32) = v30;
      *(_QWORD *)(v29 + 40) = v31;
      sub_1BE1B36D4();
      swift_bridgeObjectRelease();
    }
    LOBYTE(v32) = (_BYTE)v25;
    sub_1BDE324D8(v71, 1, v72);
    if (!v27)
    {
      sub_1BDD8B29C();
      LOBYTE(v32) = 0;
    }
    return v32 & 1;
  }
  v32 = v5[15];
  v33 = v5[6];
  v34 = v78;
  v65 = v8;
  if (v32)
  {
    if (v33)
    {
      v35 = v25[5];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1BE1B61B0;
      v76 = 0;
      v77 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v76 = v35;
      v77 = v33;
      sub_1BE1B284C();
      v37 = v76;
      v38 = v77;
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v36 + 32) = v37;
      *(_QWORD *)(v36 + 40) = v38;
      sub_1BE1B36D4();
      result = swift_bridgeObjectRelease();
      v32 = v25[15];
      if (!v32)
      {
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    swift_retain();
    sub_1BDFB7478();
    swift_release();
    if (!v34)
    {
      v40 = v76;
      v41 = v77;
      sub_1BDD8B29C();
      v42 = v69;
      sub_1BDE31F08(v69);
      v43 = v65;
      result = v23((char *)v42, 1, v65);
      if ((_DWORD)result != 1)
      {
        Capsule.version.getter(v43, &v76);
        v44 = v76;
        v45 = v77;
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v42, v43);
        if ((sub_1BDDB04C0(v45, v41) & 1) != 0)
          LOBYTE(v32) = 1;
        else
          LOBYTE(v32) = sub_1BDDB04C0(v44, v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v32 & 1;
      }
      goto LABEL_30;
    }
    return v32 & 1;
  }
  if (v33)
  {
    v46 = v25[5];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_1BE1B61B0;
    v76 = 0;
    v77 = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v76 = v46;
    v77 = v33;
    sub_1BE1B284C();
    v48 = v76;
    v49 = v77;
    *(_QWORD *)(v47 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v47 + 32) = v48;
    *(_QWORD *)(v47 + 40) = v49;
    sub_1BE1B36D4();
    swift_bridgeObjectRelease();
  }
  LOBYTE(v32) = (_BYTE)v25;
  result = sub_1BDE324D8(v71, 0, v72);
  if (v34)
    return v32 & 1;
  v51 = v25[15];
  if (!v51)
    goto LABEL_31;
  v52 = (void *)v25[9];
  v53 = type metadata accessor for CRSQLStoreBundleCapsule(0, v68, v67, v50);
  v54 = v52;
  swift_retain();
  v75[0] = sub_1BDFB7F20(v54, v51);
  v55 = (char *)(v25[16] + *(_QWORD *)(*(_QWORD *)v25[16] + 96));
  swift_beginAccess();
  v56 = v65;
  result = v23(v55, 1, v65);
  if ((_DWORD)result == 1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_retain();
  v57 = MEMORY[0x1C3B7DF54](&unk_1BE1C0858, v53);
  sub_1BE1703A4((uint64_t)v75, v56, v53, v57);
  swift_endAccess();
  swift_release();
  sub_1BDD8B29C();
  sub_1BDFBEB44(&v76);
  v58 = v76;
  v59 = v77;
  v60 = v66;
  sub_1BDE31F08(v66);
  result = v23((char *)v60, 1, v56);
  if ((_DWORD)result != 1)
  {
    Capsule.version.getter(v56, v75);
    v61 = v60;
    v62 = v75[0];
    v63 = v75[1];
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v61, v56);
    if ((sub_1BDDB04C0(v63, v59) & 1) != 0)
      LOBYTE(v32) = 1;
    else
      LOBYTE(v32) = sub_1BDDB04C0(v62, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v32 & 1;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1BDE33254(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v4 = v3;
  v5 = v2;
  v52 = a2;
  v59 = a1;
  v6 = *v2;
  v7 = sub_1BE1B1DF0();
  v51 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v49 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&v45 - v11;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v45 - v12;
  v15 = type metadata accessor for Capsule(255, *(_QWORD *)(v6 + 632), *(_QWORD *)(*(_QWORD *)(v6 + 640) + 16), v14);
  v16 = sub_1BE1B2EE8();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v45 - v18;
  sub_1BDE31F08((uint64_t)&v45 - v18);
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v19, 1, v15);
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if ((_DWORD)v6 == 1)
    return result;
  v21 = v5[15];
  if (v21)
  {
    v22 = v5[6];
    if (!v22)
      goto LABEL_10;
  }
  else
  {
    v44 = v59;
    result = sub_1BDE321BC(v13);
    if (v3)
      return result;
    sub_1BDE32978((uint64_t)v13, v44);
    v4 = 0;
    result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v13, v7);
    v21 = v5[15];
    v22 = v5[6];
    if (!v22)
      goto LABEL_10;
  }
  v48 = v7;
  if (!v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v47 = v5[5];
  v53 = sub_1BE1B1DE4();
  v54 = v23;
  v57 = 47;
  v58 = 0xE100000000000000;
  sub_1BDDC8C50();
  v24 = MEMORY[0x1E0DEA968];
  v25 = sub_1BE1B2F24();
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v25 + 16);
  v27 = v26 - 2;
  if (v26 < 2)
    v27 = 0;
  v53 = v25;
  v54 = v25 + 32;
  v55 = v27;
  v56 = (2 * v26) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C618);
  sub_1BDDA9D60(&qword_1EF52C620, &qword_1EF52C618, MEMORY[0x1E0DEBF68]);
  v28 = sub_1BE1B2708();
  v45 = v29;
  v46 = v28;
  swift_bridgeObjectRelease();
  v53 = sub_1BE1B1DE4();
  v54 = v30;
  v57 = 47;
  v58 = 0xE100000000000000;
  v31 = sub_1BE1B2F24();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v31 + 16);
  v33 = v32 - 2;
  if (v32 < 2)
    v33 = 0;
  v53 = v31;
  v54 = v31 + 32;
  v55 = v33;
  v56 = (2 * v32) | 1;
  v34 = sub_1BE1B2708();
  v36 = v35;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1BE1B6910;
  v53 = v47;
  v54 = v22;
  swift_bridgeObjectRetain();
  sub_1BE1B284C();
  v38 = v54;
  *(_QWORD *)(v37 + 32) = v53;
  *(_QWORD *)(v37 + 40) = v38;
  v39 = v46;
  *(_QWORD *)(v37 + 56) = v24;
  *(_QWORD *)(v37 + 64) = v39;
  *(_QWORD *)(v37 + 72) = v45;
  *(_QWORD *)(v37 + 88) = v24;
  *(_QWORD *)(v37 + 96) = 15917;
  *(_QWORD *)(v37 + 104) = 0xE200000000000000;
  *(_QWORD *)(v37 + 152) = v24;
  *(_QWORD *)(v37 + 120) = v24;
  *(_QWORD *)(v37 + 128) = v34;
  *(_QWORD *)(v37 + 136) = v36;
  sub_1BE1B36D4();
  result = swift_bridgeObjectRelease();
  v21 = v5[15];
  v7 = v48;
LABEL_10:
  if (!v21)
  {
    __break(1u);
    goto LABEL_21;
  }
  swift_retain();
  sub_1BDFB7F74();
  result = swift_release();
  v40 = v59;
  if (!v4)
  {
    if (v5[15])
    {
      v41 = v50;
      sub_1BE1B1DA8();
      v42 = v49;
      result = sub_1BE1B1DA8();
      if (v5[15])
      {
        MEMORY[0x1E0C80A78](result);
        *(&v45 - 4) = (uint64_t)v5;
        *(&v45 - 3) = v40;
        *(&v45 - 2) = (uint64_t)v41;
        *(&v45 - 1) = (uint64_t)v42;
        swift_retain();
        sub_1BDFB7FBC();
        swift_release();
        v43 = *(void (**)(char *, uint64_t))(v51 + 8);
        v43(v42, v7);
        return ((uint64_t (*)(char *, uint64_t))v43)(v41, v7);
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  return result;
}

void sub_1BDE33768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  id v26;
  void *v27;
  unsigned int v28;
  id v29;
  char *v30;
  id v31;
  void *v32;
  void *v33;
  unsigned int v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  char *v41;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  id v55[3];

  v49 = a4;
  v52 = a3;
  v55[2] = *(id *)MEMORY[0x1E0C80C00];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v5);
  v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_1BE1B1DF0();
  v10 = *(_QWORD *)(v54 - 8);
  v11 = MEMORY[0x1E0C80A78](v54);
  v53 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v46 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v46 - v16;
  v47 = a1;
  if (!*(_QWORD *)(a1 + 120))
    __break(1u);
  swift_retain();
  sub_1BDDF3538();
  swift_release();
  v18 = (void *)objc_opt_self();
  v19 = objc_msgSend(v18, sel_defaultManager);
  v20 = (void *)sub_1BE1B1D90();
  v55[0] = 0;
  v21 = objc_msgSend(v19, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v20, 1, v55);

  v22 = v55[0];
  if (!v21)
  {
    v39 = v55[0];
    sub_1BE1B1D3C();

    swift_willThrow();
    return;
  }
  sub_1BE1B1DD8();
  v23 = v22;

  sub_1BE1B1DA8();
  v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25 = v54;
  v24(v15, v54);
  v26 = objc_msgSend(v18, sel_defaultManager);
  v27 = (void *)sub_1BE1B1D90();
  v55[0] = 0;
  v28 = objc_msgSend(v26, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v27, 1, 0, v55);

  if (v28)
  {
    v29 = v55[0];
    sub_1BE1B1F4C();
    sub_1BE1B1EF8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v51);
    strcpy((char *)v55, "CoherenceTemp-");
    HIBYTE(v55[1]) = -18;
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    v30 = v53;
    sub_1BE1B1DA8();
    swift_bridgeObjectRelease();
    v31 = objc_msgSend(v18, sel_defaultManager);
    v32 = (void *)sub_1BE1B1D90();
    v33 = (void *)sub_1BE1B1D90();
    v55[0] = 0;
    v34 = objc_msgSend(v31, sel_copyItemAtURL_toURL_error_, v32, v33, v55);

    if (v34)
    {
      v35 = v55[0];
      v36 = objc_msgSend(v18, sel_defaultManager);
      v37 = (uint64_t)v48;
      v38 = v50;
      sub_1BE1B2DBC();
      if (!v38)
      {
        sub_1BDD86E30(v37, &qword_1ED6F3C70);

        v45 = v54;
        if (!*(_QWORD *)(v47 + 120))
        {
          __break(1u);
          return;
        }
        swift_retain();
        sub_1BDD8A8B8();
        swift_release();
        v44 = v30;
        goto LABEL_11;
      }

    }
    else
    {
      v43 = v55[0];
      sub_1BE1B1D3C();

      swift_willThrow();
    }
    v44 = v30;
    v45 = v54;
LABEL_11:
    v24(v44, v45);
    v41 = v17;
    v42 = v45;
    goto LABEL_12;
  }
  v40 = v55[0];
  sub_1BE1B1D3C();

  swift_willThrow();
  v41 = v17;
  v42 = v25;
LABEL_12:
  v24(v41, v42);
}

uint64_t sub_1BDE33C3C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDE33C70()
{
  uint64_t v0;

  v0 = sub_1BE19233C();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1BDE33CBC()
{
  sub_1BDE33C70();
  return swift_deallocClassInstance();
}

uint64_t CRDataStoreBundle.receive(subscription:)(_QWORD *a1)
{
  return sub_1BDE345E0(a1);
}

uint64_t CRDataStoreBundle.receive(_:)(uint64_t a1)
{
  sub_1BE19240C(a1);
  return sub_1BE1B23FC();
}

uint64_t sub_1BDE33D08(_QWORD *a1)
{
  return sub_1BDE345E0(a1);
}

uint64_t sub_1BDE33D14(uint64_t a1)
{
  return CRDataStoreBundle.receive(_:)(a1);
}

uint64_t sub_1BDE33D34()
{
  return sub_1BE1B23D8();
}

_QWORD *sub_1BDE33D54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = v8;
  v27 = a7;
  v28 = a8;
  v26 = a2;
  v15 = *v8;
  v16 = sub_1BE1B1DF0();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[15] = 0;
  type metadata accessor for CRDataStoreBundleNonCoordinated.ModelStorage(0, *(_QWORD *)(v15 + 632), *(_QWORD *)(v15 + 640), v20);
  v9[16] = sub_1BDFB72A0();
  v9[19] = a4;
  swift_retain();
  v21 = sub_1BDEF9EB0(a5);
  swift_bridgeObjectRelease();
  v22 = sub_1BDEF7F24(v21);
  swift_bridgeObjectRelease();
  v29 = v22;
  swift_retain();
  sub_1BDFC43CC(&v29);
  swift_release();
  v9[17] = v29;
  v9[18] = a6;
  swift_release();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v19, a3, v16);
  v23 = sub_1BE195460(a1, v26, v19, v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  return v23;
}

uint64_t sub_1BDE33EC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v7 = v6;
  v25 = a6;
  v13 = *v7;
  v14 = sub_1BE1B1DF0();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a4 + 16);
  if (v19)
  {
    v20 = (unsigned __int8 *)(a4 + 32);
    while (*v20++)
    {
      if (!--v19)
        goto LABEL_5;
    }
    result = sub_1BE1B3200();
    __break(1u);
  }
  else
  {
LABEL_5:
    type metadata accessor for CRDataStoreBundleInternals(0, *(_QWORD *)(v13 + 80), *(_QWORD *)(v13 + 88), v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
    swift_allocObject();
    v22 = sub_1BDE33D54(a1, a2, (uint64_t)v18, a4, a5, v25, 0, 0);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
    v7[2] = (uint64_t)v22;
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1BDE3404C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_allocObject();
  return sub_1BDE33EC8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BDE340C4(void *a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  int v26;
  void *v27;

  v26 = a5;
  v25 = a3;
  *(_QWORD *)&v24 = a2;
  v27 = a1;
  v8 = sub_1BE1B1DF0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Capsule(255, *(_QWORD *)(v5 + 80), *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16), v12);
  v13 = sub_1BE1B2EE8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v24 - v15;
  v17 = *a4;
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 16))((char *)&v24 - v15, v24, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B730);
  v18 = swift_allocObject();
  v24 = xmmword_1BE1B61B0;
  *(_OWORD *)(v18 + 16) = xmmword_1BE1B61B0;
  *(_BYTE *)(v18 + 32) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
  inited = swift_initStackObject();
  v20 = inited;
  *(_OWORD *)(inited + 16) = v24;
  v21 = v26;
  if ((v26 & 0x10000) != 0)
    v21 = 0;
  *(_WORD *)(inited + 32) = v21;
  swift_allocObject();
  v22 = sub_1BDE33EC8(v27, (uint64_t)v16, (uint64_t)v11, v18, v20, 0);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v25, v8);
  return v22;
}

uint64_t sub_1BDE34288()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BDE342AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BE1B1DF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_1BDE34354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(sub_1BE1B1DF0() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_1BDE2FF1C(a1, *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void **)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80), v1 + v6, *(_QWORD **)(v1 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), v3, v4);
}

uint64_t sub_1BDE343D4()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE343E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Capsule(0, v5, *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (uint64_t *)(v4 + v8);
  v11 = *(_QWORD *)(v4 + v8 + 8);
  if (v11 >> 60 != 15)
    sub_1BDDB796C(*v10, v11);
  v12 = (char *)v10 + *(int *)(v6 + 36);
  v13 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v5))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v5);
  v14 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_release(*(id *)(v4
                     + ((((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

void sub_1BDE344FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(_QWORD *)(type metadata accessor for Capsule(0, v7, *(_QWORD *)(v8 + 16), a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1BDE31004(a1, a2, *(void ***)(v4 + 32), v4 + v10, *(void **)(v4 + v11), *(_QWORD *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v4 + ((((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v7, v8);
}

uint64_t sub_1BDE345A8()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE345B8()
{
  return objectdestroy_17Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

void sub_1BDE345C4(uint64_t a1)
{
  uint64_t v1;

  sub_1BDE319FC(a1, *(_BYTE **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1BDE345D0()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE345E0(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B2408();
  return sub_1BE1B2420();
}

unint64_t sub_1BDE34624()
{
  unint64_t result;

  result = qword_1EF52C610;
  if (!qword_1EF52C610)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDataStoreBundleReadFileVersionPolicy, &type metadata for CRDataStoreBundleReadFileVersionPolicy);
    atomic_store(result, (unint64_t *)&qword_1EF52C610);
  }
  return result;
}

void sub_1BDE34668()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDE34678()
{
  return MEMORY[0x1E0DEDD18];
}

uint64_t storeEnumTagSinglePayload for CRDataStoreBundleReadFileVersionPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BDE346D0 + 4 * byte_1BE1B6925[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BDE34704 + 4 * byte_1BE1B6920[v4]))();
}

uint64_t sub_1BDE34704(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDE3470C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BDE34714);
  return result;
}

uint64_t sub_1BDE34720(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BDE34728);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BDE3472C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDE34734(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRDataStoreBundleReadFileVersionPolicy()
{
  return &type metadata for CRDataStoreBundleReadFileVersionPolicy;
}

uint64_t type metadata accessor for CRDataStoreBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDataStoreBundle);
}

uint64_t method lookup function for CRDataStoreBundle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CRDataStoreBundle.__allocating_init(_:sync:at:allowedEncodings:allowedAppFormats:writableAppFormats:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1BDE34770()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CRDataStoreBundleInternals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDataStoreBundleInternals);
}

void sub_1BDE347DC()
{
  uint64_t *v0;

  sub_1BDE33768(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1BDE347F8()
{
  return objectdestroy_17Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_17Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 24));
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t sub_1BDE3483C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BDE320D8(*(void (**)(char *))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a4);
}

uint64_t sub_1BDE34848()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1BDE3489C(uint64_t a1)
{
  uint64_t v1;

  sub_1BDE30310(a1, *(unsigned __int8 *)(v1 + 96), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BDE348E0()
{
  return swift_deallocObject();
}

unint64_t sub_1BDE348F0()
{
  unint64_t result;

  result = qword_1ED6EF4F0;
  if (!qword_1ED6EF4F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6EF4F0);
  }
  return result;
}

uint64_t sub_1BDE34950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CCF8);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CCF8);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  *v8 = a1;
  v16 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CCF8);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1EF52CCF8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE34B54(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = (double *)&v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CCF8);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CCF8);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  *v8 = a1;
  v16 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(double *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CCF8);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1EF52CCF8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE34D60(uint64_t a1, uint64_t a2)
{
  return sub_1BDE34D70(a1, a2, 2);
}

uint64_t sub_1BDE34D68(uint64_t a1, uint64_t a2)
{
  return sub_1BDE34D70(a1, a2, 3);
}

uint64_t sub_1BDE34D70(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD v24[4];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (_QWORD *)((char *)v24 - v11);
  v13 = *(int *)(type metadata accessor for Proto4_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v14 = *(_QWORD *)(v3 + v13);
    type metadata accessor for Proto4_Value._StorageClass(0);
    v15 = swift_allocObject();
    v24[3] = a3;
    v16 = v15;
    v17 = v15
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v18 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v14
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v19, (uint64_t)v12, &qword_1EF52CCF8);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v12, v17, &qword_1EF52CCF8);
    swift_endAccess();
    *(_QWORD *)(v3 + v13) = v16;
    swift_release();
  }
  v20 = *(_QWORD *)(v3 + v13);
  *v12 = a1;
  v12[1] = a2;
  v21 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 0, 1, v21);
  sub_1BDDA2EF0((uint64_t)v12, (uint64_t)v10, &qword_1EF52CCF8);
  v22 = v20 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v10, v22, &qword_1EF52CCF8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE34F88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v20[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CCF8);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CCF8);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  v16 = sub_1BE1B20C0();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v8, a1, v16);
  v17 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 0, 1, v17);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CCF8);
  v18 = v15 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v18, &qword_1EF52CCF8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE351A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_Value._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CCF8);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CCF8);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto4_Reference);
  v16 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CCF8);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1EF52CCF8);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE353C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_CRDT._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CD50);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CD50);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto4_Register);
  v16 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CD50);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1EF52CD50);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE355D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_CRDT._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CD50);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CD50);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto4_Set);
  v16 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CD50);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1EF52CD50);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE357E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_CRDT._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CD50);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CD50);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto4_Struct);
  v16 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CD50);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1EF52CD50);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE359FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto4_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto4_CRDT._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CD50);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1EF52CD50);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto4_Counter);
  v16 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1EF52CD50);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1EF52CD50);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDE35C14(uint64_t a1)
{
  return sub_1BDE35C2C(a1, &OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive);
}

uint64_t sub_1BDE35C20(uint64_t a1)
{
  return sub_1BDE35C2C(a1, &OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative);
}

uint64_t sub_1BDE35C2C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - v9;
  v11 = *(int *)(type metadata accessor for Proto4_Counter(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto4_Counter._StorageClass(0);
    swift_allocObject();
    v12 = swift_retain();
    *(_QWORD *)(v2 + v11) = sub_1BDE3F3C4(v12);
    swift_release();
  }
  v13 = *(_QWORD *)(v2 + v11);
  sub_1BDDA2E8C(a1, (uint64_t)v10, type metadata accessor for Proto4_Version);
  v14 = type metadata accessor for Proto4_Version(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 0, 1, v14);
  sub_1BDDA2EF0((uint64_t)v10, (uint64_t)v8, &qword_1EF52CE20);
  v15 = v13 + *a2;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v8, v15, &qword_1EF52CE20);
  swift_endAccess();
  return swift_release();
}

void sub_1BDE35DB0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t sub_1BDE35DC0@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_1BDE35DD8()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *sub_1BDE35DF4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_1BDE35E10(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t sub_1BDE35E30()
{
  sub_1BE1B36F8();
  sub_1BE1B26E4();
  return sub_1BE1B371C();
}

uint64_t sub_1BDE35E98()
{
  sub_1BDE515B0();
  return sub_1BE1B2138();
}

uint64_t sub_1BDE35ED0()
{
  sub_1BE1B36F8();
  sub_1BE1B26E4();
  return sub_1BE1B371C();
}

BOOL sub_1BDE35F34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

uint64_t sub_1BDE35F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549088);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549088);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "root";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "references";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE360C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for Proto4_Root._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__root;
  v2 = type metadata accessor for Proto4_CRDT(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__references) = MEMORY[0x1E0DEE9D8];
  qword_1EF52C630 = v0;
  return result;
}

uint64_t sub_1BDE3613C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__root;
  v7 = type metadata accessor for Proto4_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__references);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__references) = MEMORY[0x1E0DEE9D8];
  v9 = a1 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v9, (uint64_t)v5, &qword_1EF52CCD0);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v6, &qword_1EF52CCD0);
  swift_endAccess();
  v10 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__references);
  swift_beginAccess();
  v11 = *v10;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *v8 = v11;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1BDE362A8()
{
  uint64_t v0;

  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__root, &qword_1EF52CCD0);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE362F0()
{
  return type metadata accessor for Proto4_Root._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Root._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C6C0);
}

void sub_1BDE3630C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE47F60(a1, a2, a3, &qword_1EF52C6D0, (void (*)(uint64_t))type metadata accessor for Proto4_CRDT);
}

uint64_t type metadata accessor for Proto4_CRDT(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52CA10);
}

uint64_t sub_1BDE36340()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_CRDT(0);
        sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
        v4 = v3;
        sub_1BE1B2258();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    type metadata accessor for Proto4_Reference(0);
    sub_1BDD8422C(&qword_1EF52CB28, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C8C);
    v4 = v3;
    sub_1BE1B224C();
LABEL_5:
    v3 = v4;
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1BDE364BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[10];

  v16[9] = a4;
  v16[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto4_CRDT(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v13, (uint64_t)v8, &qword_1EF52CCD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1EF52CCD0);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto4_CRDT);
    sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
    sub_1BE1B2360();
    result = sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto4_CRDT);
    if (v4)
      return result;
  }
  v15 = a1 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__references;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v15 + 16))
  {
    type metadata accessor for Proto4_Reference(0);
    sub_1BDD8422C(&qword_1EF52CB28, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C8C);
    swift_bridgeObjectRetain();
    sub_1BE1B2354();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BDE366E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Proto4_CRDT(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v28 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v29 = (uint64_t)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v28 - v13;
  v15 = a1 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v14, &qword_1EF52CCD0);
  v16 = a2 + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__root;
  swift_beginAccess();
  v17 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1BDD86DEC((uint64_t)v14, (uint64_t)v9, &qword_1EF52CCD0);
  sub_1BDD86DEC(v16, v17, &qword_1EF52CCD0);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v18((uint64_t)v9, 1, v4) != 1)
  {
    v19 = v29;
    sub_1BDD86DEC((uint64_t)v9, v29, &qword_1EF52CCD0);
    if (v18(v17, 1, v4) != 1)
    {
      v20 = v28;
      sub_1BDDA2E8C(v17, v28, type metadata accessor for Proto4_CRDT);
      sub_1BDD8422C(&qword_1EF52C320, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8C7C);
      swift_retain();
      swift_retain();
      v21 = sub_1BE1B2798();
      sub_1BDD9C3E0(v20, type metadata accessor for Proto4_CRDT);
      sub_1BDD86E30((uint64_t)v14, &qword_1EF52CCD0);
      sub_1BDD9C3E0(v19, type metadata accessor for Proto4_CRDT);
      sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCD0);
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v26 = 0;
      goto LABEL_10;
    }
    swift_retain();
    swift_retain();
    sub_1BDD86E30((uint64_t)v14, &qword_1EF52CCD0);
    sub_1BDD9C3E0(v19, type metadata accessor for Proto4_CRDT);
LABEL_6:
    sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCD8);
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  sub_1BDD86E30((uint64_t)v14, &qword_1EF52CCD0);
  if (v18(v17, 1, v4) != 1)
    goto LABEL_6;
  sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCD0);
LABEL_8:
  v22 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__references);
  swift_beginAccess();
  v23 = *v22;
  v24 = (uint64_t *)(a2
                  + OBJC_IVAR____TtCV9Coherence11Proto4_RootP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__references);
  swift_beginAccess();
  v25 = *v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = sub_1BDE0060C(v23, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_10:
  swift_release();
  swift_release();
  return v26 & 1;
}

uint64_t sub_1BDE36A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BD20, &qword_1EF52C630, a2);
}

uint64_t sub_1BDE36A9C()
{
  return 0x522E346F746F7250;
}

uint64_t (*sub_1BDE36AC4())()
{
  return nullsub_1;
}

uint64_t sub_1BDE36AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Root, (void (*)(_QWORD))type metadata accessor for Proto4_Root._StorageClass, sub_1BDE3613C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE36340);
}

uint64_t sub_1BDE36B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Root, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE364BC);
}

uint64_t sub_1BDE36B30()
{
  sub_1BDD8422C(&qword_1EF52CCC8, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B9004);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE36B80(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Root, sub_1BDE366E4) & 1;
}

uint64_t sub_1BDE36BA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD18, (uint64_t)qword_1EF549088, a1);
}

uint64_t sub_1BDE36BC4()
{
  sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE36C08()
{
  sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE36C5C()
{
  sub_1BDD8422C(&qword_1EF52CCC8, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B9004);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE36CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5490A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5490A0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1BE1B6B10;
  v5 = v24 + v4;
  v6 = v24 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v24 + v4) = 1;
  *(_QWORD *)v6 = "int";
  *(_QWORD *)(v6 + 8) = 3;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = sub_1BE1B236C();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "double";
  *(_QWORD *)(v10 + 8) = 6;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "string";
  *((_QWORD *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "data";
  *((_QWORD *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "date";
  *((_QWORD *)v16 + 1) = 4;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "reference";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "optional";
  *((_QWORD *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "taggedValue";
  *((_QWORD *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE36F48(uint64_t a1)
{
  return sub_1BDD8CC18(a1, (void (*)(_QWORD))type metadata accessor for Proto4_Value._StorageClass, &OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf, &qword_1EF52C638);
}

uint64_t sub_1BDE36F6C()
{
  return sub_1BDD96A3C(&OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf, &qword_1EF52CCF8);
}

uint64_t sub_1BDE36F80()
{
  return type metadata accessor for Proto4_Value._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Value._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C6E0);
}

void sub_1BDE36F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDDD2FB0(a1, a2, a3, &qword_1EF52C6F0, (void (*)(uint64_t))type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
}

uint64_t type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C9D0);
}

uint64_t sub_1BDE36FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for Proto4_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    type metadata accessor for Proto4_Value._StorageClass(0);
    v13 = swift_allocObject();
    v25 = v4;
    v14 = v13;
    v24 = a1;
    v15 = a2;
    v16 = a3;
    v17 = v13
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v18 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v12
        + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v19, (uint64_t)v10, &qword_1EF52CCF8);
    swift_beginAccess();
    v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1BDDA1AF4((uint64_t)v10, v20, &qword_1EF52CCF8);
    swift_endAccess();
    *(_QWORD *)(v3 + v11) = v14;
    swift_release();
  }
  v21 = swift_retain();
  sub_1BDE3716C(v21, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1BDE3716C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t result;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t, uint64_t);
  uint64_t v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;

  v227 = a4;
  v218 = type metadata accessor for Proto4_TaggedValue(0);
  v208 = *(_QWORD *)(v218 - 8);
  v7 = MEMORY[0x1E0C80A78](v218);
  v189 = (uint64_t)&v178 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v186 = (uint64_t)&v178 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD00);
  v11 = MEMORY[0x1E0C80A78](v10);
  v199 = (uint64_t)&v178 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v219 = (uint64_t)&v178 - v13;
  v205 = type metadata accessor for Proto4_Optional(0);
  v207 = *(_QWORD *)(v205 - 8);
  v14 = MEMORY[0x1E0C80A78](v205);
  v188 = (uint64_t)&v178 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v185 = (uint64_t)&v178 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD08);
  v18 = MEMORY[0x1E0C80A78](v17);
  v196 = (uint64_t)&v178 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v211 = (uint64_t)&v178 - v20;
  v206 = type metadata accessor for Proto4_Reference(0);
  v217 = *(_QWORD *)(v206 - 8);
  v21 = MEMORY[0x1E0C80A78](v206);
  v200 = (char *)&v178 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v183 = (uint64_t)&v178 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD10);
  v25 = MEMORY[0x1E0C80A78](v24);
  v198 = (uint64_t)&v178 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v212 = (uint64_t)&v178 - v27;
  v210 = sub_1BE1B20C0();
  v209 = *(_QWORD *)(v210 - 8);
  v28 = MEMORY[0x1E0C80A78](v210);
  v187 = (char *)&v178 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v184 = (char *)&v178 - v30;
  v31 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  v223 = *(_QWORD *)(v31 - 8);
  v224 = v31;
  v32 = MEMORY[0x1E0C80A78](v31);
  v193 = (uint64_t)&v178 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v195 = (uint64_t)&v178 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v192 = (uint64_t)&v178 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v221 = (char *)&v178 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v191 = (uint64_t)&v178 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v194 = (uint64_t)&v178 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v190 = (uint64_t)&v178 - v45;
  MEMORY[0x1E0C80A78](v44);
  v220 = (char *)&v178 - v46;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD18);
  v48 = MEMORY[0x1E0C80A78](v47);
  v197 = (uint64_t)&v178 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v48);
  v213 = (uint64_t)&v178 - v50;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  v52 = MEMORY[0x1E0C80A78](v51);
  v204 = (uint64_t)&v178 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = MEMORY[0x1E0C80A78](v52);
  v56 = (char *)&v178 - v55;
  v57 = MEMORY[0x1E0C80A78](v54);
  v59 = (char *)&v178 - v58;
  v60 = MEMORY[0x1E0C80A78](v57);
  v62 = (char *)&v178 - v61;
  v63 = MEMORY[0x1E0C80A78](v60);
  v203 = (uint64_t)&v178 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v202 = (uint64_t)&v178 - v66;
  v67 = MEMORY[0x1E0C80A78](v65);
  v69 = (char *)&v178 - v68;
  v70 = MEMORY[0x1E0C80A78](v67);
  v72 = (char *)&v178 - v71;
  v73 = MEMORY[0x1E0C80A78](v70);
  v75 = (char *)&v178 - v74;
  MEMORY[0x1E0C80A78](v73);
  v201 = (uint64_t)&v178 - v76;
  v77 = a1 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v216 = a2;
  v78 = v225;
  v225 = a3;
  result = sub_1BE1B2144();
  if (!v78)
  {
    v222 = v77;
    v214 = v75;
    v215 = v72;
    v179 = v69;
    v180 = v62;
    v181 = v59;
    v182 = v56;
    v178 = xmmword_1BE1B6B20;
    v82 = v216;
    v81 = v217;
    v84 = (uint64_t)v220;
    v83 = (uint64_t)v221;
    while (1)
    {
      if ((v80 & 1) != 0)
        return result;
      switch(result)
      {
        case 1:
          v88 = v201;
          sub_1BDD86DEC(v222, v201, &qword_1EF52CCF8);
          v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v88, 1, v224);
          sub_1BDD86E30(v88, &qword_1EF52CCF8);
          if (v89 != 1)
            sub_1BE1B2150();
          *(_QWORD *)&v226 = 0;
          BYTE8(v226) = 1;
          sub_1BE1B21BC();
          if ((BYTE8(v226) & 1) == 0)
          {
            v90 = v83;
            v91 = v214;
            *v214 = v226;
            v92 = v224;
            goto LABEL_4;
          }
          goto LABEL_5;
        case 2:
          v93 = (uint64_t)v179;
          sub_1BDD86DEC(v222, (uint64_t)v179, &qword_1EF52CCF8);
          v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v93, 1, v224);
          sub_1BDD86E30(v93, &qword_1EF52CCF8);
          if (v94 != 1)
            sub_1BE1B2150();
          *(_QWORD *)&v226 = 0;
          BYTE8(v226) = 1;
          sub_1BE1B21F8();
          if ((BYTE8(v226) & 1) == 0)
          {
            v90 = v83;
            v91 = v214;
            *v214 = v226;
            v92 = v224;
            goto LABEL_4;
          }
          goto LABEL_5;
        case 3:
          v95 = v202;
          sub_1BDD86DEC(v222, v202, &qword_1EF52CCF8);
          v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v95, 1, v224);
          sub_1BDD86E30(v95, &qword_1EF52CCF8);
          if (v96 != 1)
            sub_1BE1B2150();
          v226 = 0uLL;
          sub_1BE1B2210();
          v97 = *((_QWORD *)&v226 + 1);
          if (*((_QWORD *)&v226 + 1))
          {
            v90 = v83;
            v91 = v214;
            *v214 = v226;
            v91[1] = v97;
            v92 = v224;
            goto LABEL_4;
          }
          goto LABEL_5;
        case 4:
          v98 = v203;
          sub_1BDD86DEC(v222, v203, &qword_1EF52CCF8);
          v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v98, 1, v224);
          sub_1BDD86E30(v98, &qword_1EF52CCF8);
          if (v99 != 1)
            sub_1BE1B2150();
          v226 = v178;
          sub_1BE1B2198();
          v100 = *((_QWORD *)&v226 + 1);
          if (*((_QWORD *)&v226 + 1) >> 60 != 15)
          {
            v90 = v83;
            v91 = v214;
            *v214 = v226;
            v91[1] = v100;
            v92 = v224;
LABEL_4:
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v91, 0, 1, v92);
            v85 = (uint64_t)v91;
            v83 = v90;
            v86 = (uint64_t)v215;
            sub_1BDDA2EF0(v85, (uint64_t)v215, &qword_1EF52CCF8);
            v87 = v222;
            swift_beginAccess();
            sub_1BDDA1AF4(v86, v87, &qword_1EF52CCF8);
            swift_endAccess();
          }
          goto LABEL_5;
        case 5:
          v101 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 56);
          v101(v213, 1, 1, v210);
          v102 = (uint64_t)v180;
          sub_1BDD86DEC(v222, (uint64_t)v180, &qword_1EF52CCF8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v102, 1, v224) == 1)
          {
            sub_1BDD86E30(v102, &qword_1EF52CCF8);
          }
          else
          {
            sub_1BDDA2E8C(v102, v84, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v115 = v190;
            sub_1BDDA2E8C(v84, v190, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 4)
            {
              v116 = v213;
              sub_1BDD86E30(v213, &qword_1EF52CD18);
              v117 = v84;
              v118 = *(void (**)(char *, uint64_t, uint64_t))(v209 + 32);
              v119 = v115;
              v120 = v184;
              v121 = v210;
              v118(v184, v119, v210);
              v118((char *)v116, (uint64_t)v120, v121);
              v84 = v117;
              v122 = v216;
              v101(v116, 0, 1, v121);
              v82 = v122;
            }
            else
            {
              sub_1BDD9C3E0(v115, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            }
          }
          sub_1BDD8422C((unint64_t *)&qword_1EF5254F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E5C8], MEMORY[0x1E0D3E5B8]);
          v139 = v213;
          v140 = v210;
          sub_1BE1B2258();
          v141 = v197;
          sub_1BDDA2EF0(v139, v197, &qword_1EF52CD18);
          v142 = v209;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v141, 1, v140) == 1)
          {
            sub_1BDD86E30(v141, &qword_1EF52CD18);
          }
          else
          {
            v143 = v84;
            v144 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 32);
            v145 = v141;
            v146 = v187;
            v144(v187, v145, v140);
            v147 = v214;
            v144((char *)v214, (uint64_t)v146, v140);
            v84 = v143;
            v82 = v216;
            v148 = v224;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v147, 0, 1, v148);
            v149 = (uint64_t)v215;
            sub_1BDDA2EF0((uint64_t)v147, (uint64_t)v215, &qword_1EF52CCF8);
            v150 = v222;
            swift_beginAccess();
            sub_1BDDA1AF4(v149, v150, &qword_1EF52CCF8);
            swift_endAccess();
          }
          v83 = (uint64_t)v221;
          goto LABEL_5;
        case 6:
          v103 = v82;
          v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
          v105 = v206;
          v104(v212, 1, 1, v206);
          v106 = (uint64_t)v181;
          sub_1BDD86DEC(v222, (uint64_t)v181, &qword_1EF52CCF8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v106, 1, v224) == 1)
          {
            v107 = v81;
            sub_1BDD86E30(v106, &qword_1EF52CCF8);
LABEL_46:
            v128 = (uint64_t)v200;
            goto LABEL_47;
          }
          v123 = v106;
          v124 = v194;
          sub_1BDDA2E8C(v123, v194, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
          sub_1BE1B2150();
          v107 = v81;
          v125 = v191;
          sub_1BDDA2E8C(v124, v191, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
          if (swift_getEnumCaseMultiPayload() != 5)
          {
            sub_1BDD9C3E0(v125, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            v105 = v206;
            goto LABEL_46;
          }
          v126 = v212;
          sub_1BDD86E30(v212, &qword_1EF52CD10);
          v127 = v183;
          sub_1BDDA2E8C(v125, v183, type metadata accessor for Proto4_Reference);
          sub_1BDDA2E8C(v127, v126, type metadata accessor for Proto4_Reference);
          v105 = v206;
          v104(v126, 0, 1, v206);
          v128 = (uint64_t)v200;
LABEL_47:
          sub_1BDD8422C(&qword_1EF52CB28, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C8C);
          v151 = v212;
          sub_1BE1B2258();
          v152 = v151;
          v153 = v198;
          sub_1BDDA2EF0(v152, v198, &qword_1EF52CD10);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v153, 1, v105) == 1)
          {
            sub_1BDD86E30(v153, &qword_1EF52CD10);
          }
          else
          {
            sub_1BDDA2E8C(v153, v128, type metadata accessor for Proto4_Reference);
            v154 = v214;
            sub_1BDDA2E8C(v128, (uint64_t)v214, type metadata accessor for Proto4_Reference);
            v155 = v224;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v154, 0, 1, v155);
            v156 = (uint64_t)v215;
            sub_1BDDA2EF0((uint64_t)v154, (uint64_t)v215, &qword_1EF52CCF8);
            v157 = v222;
            swift_beginAccess();
            sub_1BDDA1AF4(v156, v157, &qword_1EF52CCF8);
            swift_endAccess();
          }
          v83 = (uint64_t)v221;
          v81 = v107;
          v82 = v103;
          v84 = (uint64_t)v220;
LABEL_5:
          result = sub_1BE1B2144();
          break;
        case 7:
          v108 = v82;
          v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v207 + 56);
          v110 = v205;
          v109(v211, 1, 1, v205);
          v111 = (uint64_t)v182;
          sub_1BDD86DEC(v222, (uint64_t)v182, &qword_1EF52CCF8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v111, 1, v224) == 1)
          {
            v112 = v110;
            sub_1BDD86E30(v111, &qword_1EF52CCF8);
          }
          else
          {
            sub_1BDDA2E8C(v111, v83, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v129 = v192;
            sub_1BDDA2E8C(v83, v192, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              v130 = v205;
              v131 = v211;
              sub_1BDD86E30(v211, &qword_1EF52CD08);
              v132 = v185;
              sub_1BDDA2E8C(v129, v185, type metadata accessor for Proto4_Optional);
              v133 = v132;
              v108 = v216;
              sub_1BDDA2E8C(v133, v131, type metadata accessor for Proto4_Optional);
              v134 = v131;
              v112 = v130;
              v83 = (uint64_t)v221;
              v109(v134, 0, 1, v130);
            }
            else
            {
              v112 = v205;
              sub_1BDD9C3E0(v129, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            }
          }
          sub_1BDD8422C(&qword_1EF52CB10, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7B24);
          v158 = v211;
          sub_1BE1B2258();
          v159 = v196;
          sub_1BDDA2EF0(v158, v196, &qword_1EF52CD08);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48))(v159, 1, v112) == 1)
          {
            sub_1BDD86E30(v159, &qword_1EF52CD08);
          }
          else
          {
            v160 = v159;
            v161 = v188;
            sub_1BDDA2E8C(v160, v188, type metadata accessor for Proto4_Optional);
            v162 = v161;
            v163 = v83;
            v164 = v214;
            sub_1BDDA2E8C(v162, (uint64_t)v214, type metadata accessor for Proto4_Optional);
            v165 = v224;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v164, 0, 1, v165);
            v166 = (uint64_t)v164;
            v83 = v163;
            v167 = (uint64_t)v215;
            sub_1BDDA2EF0(v166, (uint64_t)v215, &qword_1EF52CCF8);
            v168 = v222;
            swift_beginAccess();
            sub_1BDDA1AF4(v167, v168, &qword_1EF52CCF8);
            swift_endAccess();
          }
          v82 = v108;
          v81 = v217;
          v84 = (uint64_t)v220;
          goto LABEL_5;
        case 8:
          v113 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v208 + 56);
          v113(v219, 1, 1, v218);
          v114 = v204;
          sub_1BDD86DEC(v222, v204, &qword_1EF52CCF8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v114, 1, v224) == 1)
          {
            sub_1BDD86E30(v114, &qword_1EF52CCF8);
          }
          else
          {
            v135 = v195;
            sub_1BDDA2E8C(v114, v195, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v136 = v193;
            sub_1BDDA2E8C(v135, v193, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 7)
            {
              v137 = v219;
              sub_1BDD86E30(v219, &qword_1EF52CD00);
              v138 = v186;
              sub_1BDDA2E8C(v136, v186, type metadata accessor for Proto4_TaggedValue);
              sub_1BDDA2E8C(v138, v137, type metadata accessor for Proto4_TaggedValue);
              v82 = v216;
              v113(v137, 0, 1, v218);
            }
            else
            {
              sub_1BDD9C3E0(v136, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
            }
          }
          sub_1BDD8422C(&qword_1EF52CAD0, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B7854);
          sub_1BE1B2258();
          v169 = v199;
          sub_1BDDA2EF0(v219, v199, &qword_1EF52CD00);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v169, 1, v218) == 1)
          {
            sub_1BDD86E30(v169, &qword_1EF52CD00);
            v81 = v217;
            v84 = (uint64_t)v220;
            v83 = (uint64_t)v221;
          }
          else
          {
            v170 = v189;
            sub_1BDDA2E8C(v169, v189, type metadata accessor for Proto4_TaggedValue);
            v171 = v170;
            v82 = v216;
            v84 = (uint64_t)v220;
            v172 = v221;
            v173 = v214;
            sub_1BDDA2E8C(v171, (uint64_t)v214, type metadata accessor for Proto4_TaggedValue);
            v174 = v224;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v223 + 56))(v173, 0, 1, v174);
            v175 = (uint64_t)v173;
            v83 = (uint64_t)v172;
            v176 = (uint64_t)v215;
            sub_1BDDA2EF0(v175, (uint64_t)v215, &qword_1EF52CCF8);
            v177 = v222;
            swift_beginAccess();
            sub_1BDDA1AF4(v176, v177, &qword_1EF52CCF8);
            swift_endAccess();
            v81 = v217;
          }
          goto LABEL_5;
        default:
          goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t sub_1BDE38790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a4;
  v19 = a2;
  v18 = type metadata accessor for Proto4_TaggedValue(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Proto4_Optional(0);
  MEMORY[0x1E0C80A78](v17);
  v6 = type metadata accessor for Proto4_Reference(0);
  MEMORY[0x1E0C80A78](v6);
  v7 = sub_1BE1B20C0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v11, &qword_1EF52CCF8);
  v13 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13);
  if ((_DWORD)result != 1)
  {
    v16[1] = v8;
    v16[2] = v6;
    v15 = (char *)&loc_1BDE38978 + 4 * byte_1BE1B6B70[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1BDE38BE4(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v7 = sub_1BE1B20F0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v22 - v12;
  v14 = *(int *)(a2(0) + 20);
  v15 = *(_QWORD *)(v3 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  if (v15 == v16
    || (swift_retain(), swift_retain(), v17 = a3(v15, v16), swift_release(), swift_release(), (v17 & 1) != 0))
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v18(v13, v3, v7);
    v18(v11, a1, v7);
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v19 = sub_1BE1B2798();
    v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v11, v7);
    v20(v13, v7);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

BOOL sub_1BDE38D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v25 = (uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD20);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCF8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v24 - v14;
  v16 = a1 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v15, &qword_1EF52CCF8);
  v17 = a2 + OBJC_IVAR____TtCV9Coherence12Proto4_ValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1BDD86DEC((uint64_t)v15, (uint64_t)v9, &qword_1EF52CCF8);
  sub_1BDD86DEC(v17, v18, &qword_1EF52CCF8);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v19((uint64_t)v9, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1EF52CCF8);
    if (v19(v18, 1, v4) == 1)
    {
      sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCF8);
      return 1;
    }
    goto LABEL_6;
  }
  sub_1BDD86DEC((uint64_t)v9, (uint64_t)v13, &qword_1EF52CCF8);
  if (v19(v18, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1EF52CCF8);
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
LABEL_6:
    sub_1BDD86E30((uint64_t)v9, &qword_1EF52CD20);
    return 0;
  }
  v20 = v25;
  sub_1BDDA2E8C(v18, v25, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
  sub_1BDE50E30((uint64_t)v13, v20);
  v22 = v21;
  sub_1BDD9C3E0(v20, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
  sub_1BDD86E30((uint64_t)v15, &qword_1EF52CCF8);
  sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
  sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCF8);
  return (v22 & 1) != 0;
}

uint64_t sub_1BDE3900C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BD30, &qword_1EF52C638, a2);
}

uint64_t sub_1BDE39028()
{
  return 0x562E346F746F7250;
}

uint64_t sub_1BDE39048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE36FC4(a1, a2, a3);
}

uint64_t sub_1BDE3905C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE38790);
}

uint64_t sub_1BDE39080()
{
  sub_1BDD8422C(&qword_1EF52CCF0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8E9C);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE390D0(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Value, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE38D54) & 1;
}

uint64_t sub_1BDE390F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD28, (uint64_t)qword_1EF5490A0, a1);
}

uint64_t sub_1BDE39114@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1BE1B2390();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_1BDE39180()
{
  sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE391C0()
{
  sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE39210()
{
  sub_1BDD8422C(&qword_1EF52CCF0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8E9C);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE39268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5490B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5490B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1BE1B6B30;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "register";
  *(_QWORD *)(v6 + 8) = 8;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x1E0D3EF08];
  v8 = sub_1BE1B236C();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "set";
  *(_QWORD *)(v10 + 8) = 3;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "dictionary";
  *((_QWORD *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "composite";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "string";
  *((_QWORD *)v16 + 1) = 6;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "array";
  *((_QWORD *)v18 + 1) = 5;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "counter";
  *((_QWORD *)v20 + 1) = 7;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "taggedCRDT";
  *((_QWORD *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "customCRDT";
  *(_QWORD *)(v23 + 8) = 10;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE39538(uint64_t a1)
{
  return sub_1BDD8CC18(a1, (void (*)(_QWORD))type metadata accessor for Proto4_CRDT._StorageClass, &OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf, &qword_1EF52C640);
}

uint64_t sub_1BDE3955C()
{
  return sub_1BDD96A3C(&OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf, &qword_1EF52CD50);
}

uint64_t sub_1BDE39570()
{
  return type metadata accessor for Proto4_CRDT._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_CRDT._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C700);
}

void sub_1BDE3958C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDDD2FB0(a1, a2, a3, &qword_1EF52C710, (void (*)(uint64_t))type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
}

uint64_t type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C950);
}

uint64_t sub_1BDE395B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for Proto4_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    type metadata accessor for Proto4_CRDT._StorageClass(0);
    v13 = swift_allocObject();
    v25 = v4;
    v14 = v13;
    v24 = a1;
    v15 = a2;
    v16 = a3;
    v17 = v13 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    v18 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v12 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v19, (uint64_t)v10, &qword_1EF52CD50);
    swift_beginAccess();
    v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1BDDA1AF4((uint64_t)v10, v20, &qword_1EF52CD50);
    swift_endAccess();
    *(_QWORD *)(v3 + v11) = v14;
    swift_release();
  }
  v21 = swift_retain();
  sub_1BDE3975C(v21, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1BDE3975C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t result;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int EnumCaseMultiPayload;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;

  v389 = a4;
  v388 = a3;
  v384 = a1;
  v385 = type metadata accessor for Proto4_CustomCRDT(0);
  v369 = *(_QWORD *)(v385 - 8);
  v5 = MEMORY[0x1E0C80A78](v385);
  v329 = (uint64_t)&v304 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v313 = (uint64_t)&v304 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD58);
  v9 = MEMORY[0x1E0C80A78](v8);
  v367 = (uint64_t)&v304 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v382 = (char *)&v304 - v11;
  v365 = type metadata accessor for Proto4_TaggedCRDT(0);
  v364 = *(_QWORD *)(v365 - 8);
  v12 = MEMORY[0x1E0C80A78](v365);
  v328 = (uint64_t)&v304 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v320 = (uint64_t)&v304 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD60);
  v16 = MEMORY[0x1E0C80A78](v15);
  v348 = (uint64_t)&v304 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v373 = (uint64_t)&v304 - v18;
  v374 = type metadata accessor for Proto4_Counter(0);
  v368 = *(_QWORD *)(v374 - 8);
  v19 = MEMORY[0x1E0C80A78](v374);
  v327 = (uint64_t)&v304 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v319 = (uint64_t)&v304 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD68);
  v23 = MEMORY[0x1E0C80A78](v22);
  v347 = (uint64_t)&v304 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v372 = (uint64_t)&v304 - v25;
  v376 = type metadata accessor for Proto4_Sequence(0);
  v378 = *(_QWORD *)(v376 - 8);
  v26 = MEMORY[0x1E0C80A78](v376);
  v326 = (uint64_t)&v304 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v318 = (uint64_t)&v304 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v325 = (uint64_t)&v304 - v31;
  MEMORY[0x1E0C80A78](v30);
  v317 = (uint64_t)&v304 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD70);
  v34 = MEMORY[0x1E0C80A78](v33);
  v346 = (uint64_t)&v304 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v360 = (char *)&v304 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v345 = (uint64_t)&v304 - v39;
  MEMORY[0x1E0C80A78](v38);
  v359 = (char *)&v304 - v40;
  v363 = type metadata accessor for Proto4_Struct(0);
  v371 = *(_QWORD *)(v363 - 8);
  v41 = MEMORY[0x1E0C80A78](v363);
  v324 = (uint64_t)&v304 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v316 = (uint64_t)&v304 - v43;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD78);
  v45 = MEMORY[0x1E0C80A78](v44);
  v344 = (uint64_t)&v304 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v45);
  v358 = (char *)&v304 - v47;
  v383 = type metadata accessor for Proto4_Set(0);
  v377 = *(_QWORD *)(v383 - 8);
  v48 = MEMORY[0x1E0C80A78](v383);
  v323 = (uint64_t)&v304 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0C80A78](v48);
  v315 = (uint64_t)&v304 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v322 = (uint64_t)&v304 - v53;
  MEMORY[0x1E0C80A78](v52);
  v314 = (uint64_t)&v304 - v54;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD80);
  v56 = MEMORY[0x1E0C80A78](v55);
  v343 = (uint64_t)&v304 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = MEMORY[0x1E0C80A78](v56);
  v366 = (uint64_t)&v304 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v342 = (uint64_t)&v304 - v61;
  MEMORY[0x1E0C80A78](v60);
  v381 = (char *)&v304 - v62;
  v362 = type metadata accessor for Proto4_Register(0);
  v370 = *(_QWORD *)(v362 - 8);
  v63 = MEMORY[0x1E0C80A78](v362);
  v321 = (uint64_t)&v304 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v63);
  v312 = (uint64_t)&v304 - v65;
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  v67 = MEMORY[0x1E0C80A78](v66);
  v357 = (uint64_t)&v304 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = MEMORY[0x1E0C80A78](v67);
  v356 = (uint64_t)&v304 - v70;
  v71 = MEMORY[0x1E0C80A78](v69);
  v355 = (uint64_t)&v304 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  v354 = (uint64_t)&v304 - v74;
  v75 = MEMORY[0x1E0C80A78](v73);
  v353 = (uint64_t)&v304 - v76;
  v77 = MEMORY[0x1E0C80A78](v75);
  v352 = (uint64_t)&v304 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v351 = (uint64_t)&v304 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v350 = (uint64_t)&v304 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v380 = (uint64_t)&v304 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v379 = (uint64_t)&v304 - v86;
  MEMORY[0x1E0C80A78](v85);
  v349 = (uint64_t)&v304 - v87;
  v88 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  v386 = *(_QWORD *)(v88 - 8);
  v387 = v88;
  v89 = MEMORY[0x1E0C80A78](v88);
  v335 = (uint64_t)&v304 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = MEMORY[0x1E0C80A78](v89);
  v341 = (uint64_t)&v304 - v92;
  v93 = MEMORY[0x1E0C80A78](v91);
  v334 = (uint64_t)&v304 - v94;
  v95 = MEMORY[0x1E0C80A78](v93);
  v340 = (uint64_t)&v304 - v96;
  v97 = MEMORY[0x1E0C80A78](v95);
  v333 = (uint64_t)&v304 - v98;
  v99 = MEMORY[0x1E0C80A78](v97);
  v339 = (uint64_t)&v304 - v100;
  v101 = MEMORY[0x1E0C80A78](v99);
  v332 = (uint64_t)&v304 - v102;
  v103 = MEMORY[0x1E0C80A78](v101);
  v338 = (uint64_t)&v304 - v104;
  v105 = MEMORY[0x1E0C80A78](v103);
  v331 = (uint64_t)&v304 - v106;
  v107 = MEMORY[0x1E0C80A78](v105);
  v337 = (uint64_t)&v304 - v108;
  v109 = MEMORY[0x1E0C80A78](v107);
  v330 = (uint64_t)&v304 - v110;
  v111 = MEMORY[0x1E0C80A78](v109);
  v336 = (uint64_t)&v304 - v112;
  v113 = MEMORY[0x1E0C80A78](v111);
  v115 = (char *)&v304 - v114;
  v116 = MEMORY[0x1E0C80A78](v113);
  v118 = (char *)&v304 - v117;
  v119 = MEMORY[0x1E0C80A78](v116);
  v121 = (char *)&v304 - v120;
  v122 = MEMORY[0x1E0C80A78](v119);
  v124 = (char *)&v304 - v123;
  v125 = MEMORY[0x1E0C80A78](v122);
  v127 = (char *)&v304 - v126;
  MEMORY[0x1E0C80A78](v125);
  v129 = (char *)&v304 - v128;
  v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD88);
  v131 = MEMORY[0x1E0C80A78](v130);
  v133 = (char *)&v304 - ((v132 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v131);
  v135 = (char *)&v304 - v134;
  v384 += OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v361 = a2;
  v136 = (uint64_t)v375;
  result = sub_1BE1B2144();
  if (!v136)
  {
    v311 = v133;
    v375 = v135;
    v308 = v129;
    v305 = v127;
    v309 = v124;
    v306 = v121;
    v310 = v118;
    v307 = v115;
    v139 = v384;
    v140 = v385;
    v142 = (uint64_t)v382;
    v141 = v383;
    v143 = v361;
    v144 = (uint64_t)v381;
    while ((v138 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v153 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v370 + 56);
          v154 = v362;
          v153(v375, 1, 1, v362);
          v155 = v349;
          sub_1BDD86DEC(v139, v349, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v155, 1, v387) == 1)
          {
            sub_1BDD86E30(v155, &qword_1EF52CD50);
            v140 = v385;
            v156 = (uint64_t)v375;
          }
          else
          {
            v189 = (uint64_t)v308;
            sub_1BDDA2E8C(v155, (uint64_t)v308, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v190 = v189;
            v191 = (uint64_t)v305;
            sub_1BDDA2E8C(v190, (uint64_t)v305, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            v156 = (uint64_t)v375;
            if (EnumCaseMultiPayload)
            {
              sub_1BDD9C3E0(v191, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
              v140 = v385;
              v154 = v362;
            }
            else
            {
              sub_1BDD86E30((uint64_t)v375, &qword_1EF52CD88);
              v303 = v312;
              sub_1BDDA2E8C(v191, v312, type metadata accessor for Proto4_Register);
              sub_1BDDA2E8C(v303, v156, type metadata accessor for Proto4_Register);
              v154 = v362;
              v153((char *)v156, 0, 1, v362);
              v140 = v385;
            }
          }
          sub_1BDD8422C(&qword_1EF52CBD8, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B84FC);
          sub_1BE1B2258();
          v193 = (uint64_t)v311;
          sub_1BDDA2EF0(v156, (uint64_t)v311, &qword_1EF52CD88);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v370 + 48))(v193, 1, v154) == 1)
          {
            sub_1BDD86E30(v193, &qword_1EF52CD88);
            v139 = v384;
          }
          else
          {
            v232 = v321;
            sub_1BDDA2E8C(v193, v321, type metadata accessor for Proto4_Register);
            v233 = v232;
            v234 = v379;
            sub_1BDDA2E8C(v233, v379, type metadata accessor for Proto4_Register);
            v235 = v387;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v234, 0, 1, v235);
            v236 = v234;
            v237 = v380;
            sub_1BDDA2EF0(v236, v380, &qword_1EF52CD50);
            v139 = v384;
            swift_beginAccess();
            sub_1BDDA1AF4(v237, v139, &qword_1EF52CD50);
            swift_endAccess();
          }
          v144 = (uint64_t)v381;
          goto LABEL_6;
        case 2:
          v157 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v377 + 56);
          v157(v144, 1, 1, v141);
          v158 = v350;
          sub_1BDD86DEC(v139, v350, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v158, 1, v387) == 1)
          {
            sub_1BDD86E30(v158, &qword_1EF52CD50);
            v140 = v385;
          }
          else
          {
            v194 = (uint64_t)v309;
            sub_1BDDA2E8C(v158, (uint64_t)v309, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v195 = v194;
            v196 = (uint64_t)v306;
            sub_1BDDA2E8C(v195, (uint64_t)v306, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              sub_1BDD86E30(v144, &qword_1EF52CD80);
              v197 = v314;
              sub_1BDDA2E8C(v196, v314, type metadata accessor for Proto4_Set);
              sub_1BDDA2E8C(v197, v144, type metadata accessor for Proto4_Set);
              v157(v144, 0, 1, v141);
            }
            else
            {
              sub_1BDD9C3E0(v196, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            }
            v139 = v384;
            v140 = v385;
          }
          sub_1BDD8422C(&qword_1EF52CB98, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B822C);
          sub_1BE1B2258();
          v238 = v342;
          sub_1BDDA2EF0(v144, v342, &qword_1EF52CD80);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v377 + 48))(v238, 1, v141) == 1)
          {
            sub_1BDD86E30(v238, &qword_1EF52CD80);
          }
          else
          {
            v239 = v238;
            v240 = v322;
            sub_1BDDA2E8C(v239, v322, type metadata accessor for Proto4_Set);
            v241 = v240;
            v242 = v379;
            sub_1BDDA2E8C(v241, v379, type metadata accessor for Proto4_Set);
            v243 = v144;
            v244 = v387;
            swift_storeEnumTagMultiPayload();
            v245 = v244;
            v144 = v243;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v242, 0, 1, v245);
            v246 = v242;
            v247 = v380;
            sub_1BDDA2EF0(v246, v380, &qword_1EF52CD50);
            swift_beginAccess();
            sub_1BDDA1AF4(v247, v139, &qword_1EF52CD50);
            swift_endAccess();
          }
          v142 = (uint64_t)v382;
          goto LABEL_6;
        case 3:
          v159 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v377 + 56);
          v160 = v366;
          v159(v366, 1, 1, v141);
          v161 = v139;
          v162 = v351;
          sub_1BDD86DEC(v161, v351, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v162, 1, v387) == 1)
          {
            sub_1BDD86E30(v162, &qword_1EF52CD50);
          }
          else
          {
            v198 = v162;
            v199 = (uint64_t)v310;
            sub_1BDDA2E8C(v198, (uint64_t)v310, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v200 = v199;
            v201 = (uint64_t)v307;
            sub_1BDDA2E8C(v200, (uint64_t)v307, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            v202 = swift_getEnumCaseMultiPayload();
            v160 = v366;
            if (v202 == 2)
            {
              sub_1BDD86E30(v366, &qword_1EF52CD80);
              v203 = v315;
              sub_1BDDA2E8C(v201, v315, type metadata accessor for Proto4_Set);
              v204 = v203;
              v160 = v366;
              sub_1BDDA2E8C(v204, v366, type metadata accessor for Proto4_Set);
              v159(v160, 0, 1, v141);
              v140 = v385;
              goto LABEL_57;
            }
            sub_1BDD9C3E0(v201, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
          }
          v140 = v385;
LABEL_57:
          sub_1BDD8422C(&qword_1EF52CB98, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B822C);
          sub_1BE1B2258();
          v248 = v343;
          sub_1BDDA2EF0(v160, v343, &qword_1EF52CD80);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v377 + 48))(v248, 1, v141) == 1)
          {
            sub_1BDD86E30(v248, &qword_1EF52CD80);
            v144 = (uint64_t)v381;
            v139 = v384;
          }
          else
          {
            v249 = v323;
            sub_1BDDA2E8C(v248, v323, type metadata accessor for Proto4_Set);
            v250 = v379;
            sub_1BDDA2E8C(v249, v379, type metadata accessor for Proto4_Set);
            v251 = v387;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v250, 0, 1, v251);
            v252 = v250;
            v253 = v380;
            sub_1BDDA2EF0(v252, v380, &qword_1EF52CD50);
            v254 = v384;
            swift_beginAccess();
            v255 = v253;
            v139 = v254;
            sub_1BDDA1AF4(v255, v254, &qword_1EF52CD50);
            swift_endAccess();
            v144 = (uint64_t)v381;
          }
          goto LABEL_6;
        case 4:
          v163 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v371 + 56);
          v164 = (uint64_t)v358;
          v165 = v363;
          v163(v358, 1, 1, v363);
          v166 = v352;
          sub_1BDD86DEC(v139, v352, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v166, 1, v387) == 1)
          {
            sub_1BDD86E30(v166, &qword_1EF52CD50);
            v140 = v385;
          }
          else
          {
            v205 = v336;
            sub_1BDDA2E8C(v166, v336, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v206 = v205;
            v207 = v330;
            sub_1BDDA2E8C(v206, v330, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              sub_1BDD86E30(v164, &qword_1EF52CD78);
              v208 = v316;
              sub_1BDDA2E8C(v207, v316, type metadata accessor for Proto4_Struct);
              sub_1BDDA2E8C(v208, v164, type metadata accessor for Proto4_Struct);
              v165 = v363;
              v163((char *)v164, 0, 1, v363);
              v140 = v385;
            }
            else
            {
              sub_1BDD9C3E0(v207, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
              v140 = v385;
              v165 = v363;
            }
            v139 = v384;
          }
          v144 = (uint64_t)v381;
          sub_1BDD8422C(&qword_1EF52CB60, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7F5C);
          v256 = v165;
          sub_1BE1B2258();
          v257 = v344;
          sub_1BDDA2EF0(v164, v344, &qword_1EF52CD78);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v371 + 48))(v257, 1, v256) == 1)
          {
            sub_1BDD86E30(v257, &qword_1EF52CD78);
          }
          else
          {
            v258 = v257;
            v259 = v324;
            sub_1BDDA2E8C(v258, v324, type metadata accessor for Proto4_Struct);
            v260 = v259;
            v261 = v379;
            sub_1BDDA2E8C(v260, v379, type metadata accessor for Proto4_Struct);
            v262 = v387;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v261, 0, 1, v262);
            v263 = v261;
            v264 = v380;
            sub_1BDDA2EF0(v263, v380, &qword_1EF52CD50);
            swift_beginAccess();
            sub_1BDDA1AF4(v264, v139, &qword_1EF52CD50);
            swift_endAccess();
          }
          goto LABEL_5;
        case 5:
          v167 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v378 + 56);
          v168 = (uint64_t)v359;
          v169 = v376;
          v167(v359, 1, 1, v376);
          v170 = v353;
          sub_1BDD86DEC(v139, v353, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v170, 1, v387) == 1)
          {
            sub_1BDD86E30(v170, &qword_1EF52CD50);
            v140 = v385;
          }
          else
          {
            v209 = v337;
            sub_1BDDA2E8C(v170, v337, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v210 = v209;
            v211 = v331;
            sub_1BDDA2E8C(v210, v331, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 4)
            {
              sub_1BDD86E30(v168, &qword_1EF52CD70);
              v212 = v317;
              sub_1BDDA2E8C(v211, v317, type metadata accessor for Proto4_Sequence);
              sub_1BDDA2E8C(v212, v168, type metadata accessor for Proto4_Sequence);
              v169 = v376;
              v167((char *)v168, 0, 1, v376);
              v140 = v385;
            }
            else
            {
              sub_1BDD9C3E0(v211, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
              v140 = v385;
              v169 = v376;
            }
            v139 = v384;
          }
          sub_1BDD8422C(&qword_1EF52CA78, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B741C);
          v265 = v169;
          sub_1BE1B2258();
          v266 = v345;
          sub_1BDDA2EF0(v168, v345, &qword_1EF52CD70);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v378 + 48))(v266, 1, v265) == 1)
          {
            v267 = v266;
            goto LABEL_74;
          }
          v268 = v266;
          v269 = v325;
          sub_1BDDA2E8C(v268, v325, type metadata accessor for Proto4_Sequence);
          v270 = v269;
          v271 = v379;
          sub_1BDDA2E8C(v270, v379, type metadata accessor for Proto4_Sequence);
          v272 = v387;
          goto LABEL_76;
        case 6:
          v171 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v378 + 56);
          v172 = (uint64_t)v360;
          v173 = v376;
          v171(v360, 1, 1, v376);
          v174 = v354;
          sub_1BDD86DEC(v139, v354, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v174, 1, v387) == 1)
          {
            sub_1BDD86E30(v174, &qword_1EF52CD50);
            v140 = v385;
          }
          else
          {
            v213 = v338;
            sub_1BDDA2E8C(v174, v338, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v214 = v213;
            v215 = v332;
            sub_1BDDA2E8C(v214, v332, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 5)
            {
              sub_1BDD86E30(v172, &qword_1EF52CD70);
              v216 = v318;
              sub_1BDDA2E8C(v215, v318, type metadata accessor for Proto4_Sequence);
              sub_1BDDA2E8C(v216, v172, type metadata accessor for Proto4_Sequence);
              v173 = v376;
              v171((char *)v172, 0, 1, v376);
              v140 = v385;
            }
            else
            {
              sub_1BDD9C3E0(v215, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
              v140 = v385;
              v173 = v376;
            }
            v139 = v384;
          }
          sub_1BDD8422C(&qword_1EF52CA78, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B741C);
          v273 = v173;
          sub_1BE1B2258();
          v274 = v346;
          sub_1BDDA2EF0(v172, v346, &qword_1EF52CD70);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v378 + 48))(v274, 1, v273) == 1)
          {
            v267 = v274;
LABEL_74:
            sub_1BDD86E30(v267, &qword_1EF52CD70);
            v142 = (uint64_t)v382;
          }
          else
          {
            v275 = v274;
            v276 = v326;
            sub_1BDDA2E8C(v275, v326, type metadata accessor for Proto4_Sequence);
            v277 = v276;
            v271 = v379;
            sub_1BDDA2E8C(v277, v379, type metadata accessor for Proto4_Sequence);
            v272 = v387;
LABEL_76:
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v271, 0, 1, v272);
            v278 = v271;
            v279 = v380;
            sub_1BDDA2EF0(v278, v380, &qword_1EF52CD50);
            swift_beginAccess();
            sub_1BDDA1AF4(v279, v139, &qword_1EF52CD50);
            swift_endAccess();
            v142 = (uint64_t)v382;
          }
          goto LABEL_5;
        case 7:
          v175 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v368 + 56);
          v175(v372, 1, 1, v374);
          v176 = v355;
          sub_1BDD86DEC(v139, v355, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v176, 1, v387) == 1)
          {
            sub_1BDD86E30(v176, &qword_1EF52CD50);
            v177 = v385;
          }
          else
          {
            v217 = v339;
            sub_1BDDA2E8C(v176, v339, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v218 = v217;
            v219 = v333;
            sub_1BDDA2E8C(v218, v333, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              v220 = v372;
              sub_1BDD86E30(v372, &qword_1EF52CD68);
              v221 = v319;
              sub_1BDDA2E8C(v219, v319, type metadata accessor for Proto4_Counter);
              sub_1BDDA2E8C(v221, v220, type metadata accessor for Proto4_Counter);
              v175(v220, 0, 1, v374);
              v139 = v384;
              v177 = v385;
              goto LABEL_79;
            }
            sub_1BDD9C3E0(v219, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            v139 = v384;
            v177 = v385;
          }
          v220 = v372;
LABEL_79:
          sub_1BDD8422C(&qword_1EF52CBB8, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B8394);
          v280 = v220;
          v281 = v374;
          sub_1BE1B2258();
          v282 = v347;
          sub_1BDDA2EF0(v280, v347, &qword_1EF52CD68);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v368 + 48))(v282, 1, v281) == 1)
          {
            sub_1BDD86E30(v282, &qword_1EF52CD68);
          }
          else
          {
            v283 = v282;
            v284 = v327;
            sub_1BDDA2E8C(v283, v327, type metadata accessor for Proto4_Counter);
            v285 = v284;
            v286 = v379;
            sub_1BDDA2E8C(v285, v379, type metadata accessor for Proto4_Counter);
            v287 = v144;
            v288 = v387;
            swift_storeEnumTagMultiPayload();
            v289 = v288;
            v144 = v287;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v286, 0, 1, v289);
            v290 = v286;
            v291 = v380;
            sub_1BDDA2EF0(v290, v380, &qword_1EF52CD50);
            swift_beginAccess();
            sub_1BDDA1AF4(v291, v139, &qword_1EF52CD50);
            swift_endAccess();
          }
          v142 = (uint64_t)v382;
          v141 = v383;
          v140 = v177;
          goto LABEL_6;
        case 8:
          v178 = v364;
          v179 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v364 + 56);
          v180 = v365;
          v179(v373, 1, 1, v365);
          v181 = v139;
          v182 = v356;
          sub_1BDD86DEC(v181, v356, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v182, 1, v387) == 1)
          {
            v183 = v178;
            sub_1BDD86E30(v182, &qword_1EF52CD50);
            v140 = v385;
          }
          else
          {
            v222 = v182;
            v223 = v340;
            sub_1BDDA2E8C(v222, v340, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v224 = v223;
            v225 = v334;
            sub_1BDDA2E8C(v224, v334, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 7)
            {
              v183 = v364;
              v226 = v373;
              sub_1BDD86E30(v373, &qword_1EF52CD60);
              v227 = v320;
              sub_1BDDA2E8C(v225, v320, type metadata accessor for Proto4_TaggedCRDT);
              sub_1BDDA2E8C(v227, v226, type metadata accessor for Proto4_TaggedCRDT);
              v180 = v365;
              v179(v226, 0, 1, v365);
              v140 = v385;
              goto LABEL_85;
            }
            v183 = v364;
            sub_1BDD9C3E0(v225, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            v140 = v385;
            v180 = v365;
          }
          v226 = v373;
LABEL_85:
          sub_1BDD8422C(&qword_1EF52CAF0, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B79BC);
          v292 = v180;
          sub_1BE1B2258();
          v293 = v348;
          sub_1BDDA2EF0(v226, v348, &qword_1EF52CD60);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v183 + 48))(v293, 1, v292) == 1)
          {
            sub_1BDD86E30(v293, &qword_1EF52CD60);
            v141 = v383;
            v139 = v384;
            v144 = (uint64_t)v381;
            v142 = (uint64_t)v382;
          }
          else
          {
            v294 = v293;
            v295 = v328;
            sub_1BDDA2E8C(v294, v328, type metadata accessor for Proto4_TaggedCRDT);
            v296 = v379;
            sub_1BDDA2E8C(v295, v379, type metadata accessor for Proto4_TaggedCRDT);
            v297 = v387;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v296, 0, 1, v297);
            v298 = v296;
            v299 = v380;
            sub_1BDDA2EF0(v298, v380, &qword_1EF52CD50);
            v300 = v384;
            swift_beginAccess();
            v301 = v299;
            v139 = v300;
            sub_1BDDA1AF4(v301, v300, &qword_1EF52CD50);
            swift_endAccess();
            v142 = (uint64_t)v382;
            v141 = v383;
            v144 = (uint64_t)v381;
          }
LABEL_6:
          result = sub_1BE1B2144();
          break;
        case 9:
          v184 = v140;
          v185 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v369 + 56);
          v186 = v142;
          v185(v142, 1, 1, v184);
          v187 = v357;
          sub_1BDD86DEC(v139, v357, &qword_1EF52CD50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v187, 1, v387) == 1)
          {
            sub_1BDD86E30(v187, &qword_1EF52CD50);
            v188 = v385;
          }
          else
          {
            v228 = v341;
            sub_1BDDA2E8C(v187, v341, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v229 = v228;
            v230 = v335;
            sub_1BDDA2E8C(v229, v335, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 8)
            {
              sub_1BDD86E30(v142, &qword_1EF52CD58);
              v231 = v313;
              sub_1BDDA2E8C(v230, v313, type metadata accessor for Proto4_CustomCRDT);
              sub_1BDDA2E8C(v231, v142, type metadata accessor for Proto4_CustomCRDT);
              v188 = v385;
              v185(v142, 0, 1, v385);
              v186 = (uint64_t)v382;
            }
            else
            {
              sub_1BDD9C3E0(v230, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
              v188 = v385;
            }
            v139 = v384;
          }
          sub_1BDD8422C(&qword_1EF52CAB0, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B76EC);
          sub_1BE1B2258();
          v302 = v367;
          sub_1BDDA2EF0(v186, v367, &qword_1EF52CD58);
          v140 = v188;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v369 + 48))(v302, 1, v188) == 1)
          {
            sub_1BDD86E30(v367, &qword_1EF52CD58);
            v142 = v186;
            v141 = v383;
            v144 = (uint64_t)v381;
          }
          else
          {
            v145 = v143;
            v146 = v329;
            sub_1BDDA2E8C(v367, v329, type metadata accessor for Proto4_CustomCRDT);
            v147 = v146;
            v143 = v145;
            v148 = v379;
            sub_1BDDA2E8C(v147, v379, type metadata accessor for Proto4_CustomCRDT);
            v149 = v387;
            swift_storeEnumTagMultiPayload();
            v150 = v149;
            v144 = (uint64_t)v381;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v386 + 56))(v148, 0, 1, v150);
            v151 = v148;
            v152 = v380;
            sub_1BDDA2EF0(v151, v380, &qword_1EF52CD50);
            swift_beginAccess();
            sub_1BDDA1AF4(v152, v139, &qword_1EF52CD50);
            swift_endAccess();
            v142 = v186;
LABEL_5:
            v141 = v383;
          }
          goto LABEL_6;
        default:
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_1BDE3BCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;
  _QWORD v21[2];
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a3;
  v32 = a4;
  v30 = a2;
  v26 = type metadata accessor for Proto4_CustomCRDT(0);
  MEMORY[0x1E0C80A78](v26);
  v27 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Proto4_TaggedCRDT(0);
  MEMORY[0x1E0C80A78](v24);
  v25 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Proto4_Counter(0);
  MEMORY[0x1E0C80A78](v22);
  v23 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Proto4_Sequence(0);
  v8 = MEMORY[0x1E0C80A78](v29);
  v21[1] = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v21[0] = (char *)v21 - v10;
  v11 = type metadata accessor for Proto4_Struct(0);
  MEMORY[0x1E0C80A78](v11);
  v28 = type metadata accessor for Proto4_Set(0);
  v12 = MEMORY[0x1E0C80A78](v28);
  MEMORY[0x1E0C80A78](v12);
  v13 = type metadata accessor for Proto4_Register(0);
  MEMORY[0x1E0C80A78](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v16, &qword_1EF52CD50);
  v18 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v16, 1, v18);
  if ((_DWORD)result != 1)
  {
    v20 = (char *)&loc_1BDE3BFC4 + 4 * byte_1BE1B6B81[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

BOOL sub_1BDE3C324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v25 = (uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD90);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD50);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v24 - v14;
  v16 = a1 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v15, &qword_1EF52CD50);
  v17 = a2 + OBJC_IVAR____TtCV9Coherence11Proto4_CRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1BDD86DEC((uint64_t)v15, (uint64_t)v9, &qword_1EF52CD50);
  sub_1BDD86DEC(v17, v18, &qword_1EF52CD50);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v19((uint64_t)v9, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1EF52CD50);
    if (v19(v18, 1, v4) == 1)
    {
      sub_1BDD86E30((uint64_t)v9, &qword_1EF52CD50);
      return 1;
    }
    goto LABEL_6;
  }
  sub_1BDD86DEC((uint64_t)v9, (uint64_t)v13, &qword_1EF52CD50);
  if (v19(v18, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1EF52CD50);
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
LABEL_6:
    sub_1BDD86E30((uint64_t)v9, &qword_1EF52CD90);
    return 0;
  }
  v20 = v25;
  sub_1BDDA2E8C(v18, v25, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
  sub_1BDE503F0((uint64_t)v13, v20);
  v22 = v21;
  sub_1BDD9C3E0(v20, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
  sub_1BDD86E30((uint64_t)v15, &qword_1EF52CD50);
  sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
  sub_1BDD86E30((uint64_t)v9, &qword_1EF52CD50);
  return (v22 & 1) != 0;
}

uint64_t sub_1BDE3C5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BD40, &qword_1EF52C640, a2);
}

uint64_t sub_1BDE3C5F8()
{
  return 0x432E346F746F7250;
}

uint64_t sub_1BDE3C618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE395B4(a1, a2, a3);
}

uint64_t sub_1BDE3C62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_CRDT, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE3BCF8);
}

uint64_t sub_1BDE3C650()
{
  sub_1BDD8422C(&qword_1EF52CD48, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D34);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE3C6A0(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_CRDT, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE3C324) & 1;
}

uint64_t sub_1BDE3C6C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD38, (uint64_t)qword_1EF5490B8, a1);
}

uint64_t sub_1BDE3C6E4()
{
  sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE3C724()
{
  sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE3C774()
{
  sub_1BDD8422C(&qword_1EF52CD48, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D34);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE3C7CC(uint64_t a1)
{
  return sub_1BDE474C4(a1, qword_1EF5490D0, (uint64_t)"components", 10);
}

uint64_t sub_1BDE3C7E4()
{
  return 0x4B2E346F746F7250;
}

uint64_t (*sub_1BDE3C810())()
{
  return nullsub_1;
}

uint64_t sub_1BDE3C824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE475C8(a1, a2, a3, type metadata accessor for Proto4_Value, &qword_1EF52CC98, (uint64_t)&unk_1BE1B8ED4);
}

uint64_t sub_1BDE3C850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE47690(a1, a2, a3, type metadata accessor for Proto4_Value, &qword_1EF52CC98, (uint64_t)&unk_1BE1B8ED4, (void (*)(_QWORD))type metadata accessor for Proto4_KeyPath);
}

uint64_t sub_1BDE3C884()
{
  sub_1BDD8422C(&qword_1EF52CDD8, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8BCC);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE3C8D4(char *a1)
{
  return sub_1BDE47788(a1, sub_1BDE00628, type metadata accessor for Proto4_KeyPath) & 1;
}

uint64_t sub_1BDE3C8FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD48, (uint64_t)qword_1EF5490D0, a1);
}

uint64_t sub_1BDE3C918()
{
  sub_1BDD8422C(&qword_1EF52CC68, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8C04);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE3C958()
{
  sub_1BDD8422C(&qword_1EF52CC68, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8C04);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE3C9A8()
{
  sub_1BDD8422C(&qword_1EF52CDD8, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8BCC);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE3CA00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5490E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5490E8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "counter";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

void sub_1BDE3CB50()
{
  __asm { BR              X10 }
}

uint64_t sub_1BDE3CB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_1BE1B22E8(), !v2))
  {
    if (!*(_QWORD *)(v3 + 16) || (result = sub_1BE1B2300(), !v2))
    {
      type metadata accessor for Proto4_Timestamp(0);
      return sub_1BE1B20D8();
    }
  }
  return result;
}

uint64_t sub_1BDE3CC4C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v3 = sub_1BE1B20F0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - v8;
  sub_1BDDD6F30(*v1, v1[1]);
  if ((v10 & 1) != 0 && v1[2] == *(_QWORD *)(a1 + 16))
  {
    v11 = type metadata accessor for Proto4_Timestamp(0);
    v12 = (char *)v1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v13(v9, v12, v3);
    v13(v7, (char *)(a1 + *(int *)(v11 + 24)), v3);
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = sub_1BE1B2798();
    v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v7, v3);
    v15(v9, v3);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_1BDE3CD90@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BDE3DB9C(0, a1);
}

unint64_t sub_1BDE3CD98()
{
  return 0xD000000000000010;
}

uint64_t (*sub_1BDE3CDBC())()
{
  return nullsub_1;
}

uint64_t sub_1BDE3CDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE3D8A8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB48]);
}

void sub_1BDE3CDEC()
{
  sub_1BDE3CB50();
}

uint64_t sub_1BDE3CE00()
{
  sub_1BDD8422C(&qword_1EF52CDE0, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A64);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE3CE54@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD50, (uint64_t)qword_1EF5490E8, a1);
}

uint64_t sub_1BDE3CE70()
{
  sub_1BDD8422C(&qword_1EF52CC48, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A9C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE3CEB0()
{
  sub_1BDD8422C(&qword_1EF52CC48, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A9C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE3CF00()
{
  sub_1BDD8422C(&qword_1EF52CDE0, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A64);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE3CF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549100);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549100);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuidIndex";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "counter";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE3D0A8()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        sub_1BE1B21C8();
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDE3D138()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_1BE1B2300(), !v1))
  {
    if (!v0[1] || (result = sub_1BE1B2300(), !v1))
    {
      type metadata accessor for Proto4_IndexedTimestamp(0);
      return sub_1BE1B20D8();
    }
  }
  return result;
}

uint64_t sub_1BDE3D1F0(char *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v3 = sub_1BE1B20F0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v16 - v8;
  if (*v1 == *(_QWORD *)a1 && v1[1] == *((_QWORD *)a1 + 1))
  {
    v10 = type metadata accessor for Proto4_IndexedTimestamp(0);
    v11 = (char *)v1 + *(int *)(v10 + 24);
    v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v12(v9, v11, v3);
    v12(v7, &a1[*(int *)(v10 + 24)], v3);
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v13 = sub_1BE1B2798();
    v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v7, v3);
    v14(v9, v3);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

unint64_t sub_1BDE3D334()
{
  return 0xD000000000000017;
}

uint64_t sub_1BDE3D350()
{
  return sub_1BDE3D0A8();
}

uint64_t sub_1BDE3D364()
{
  return sub_1BDE3D138();
}

uint64_t sub_1BDE3D378()
{
  sub_1BDD8422C(&qword_1EF52CDE8, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B88FC);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE3D3CC@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD58, (uint64_t)qword_1EF549100, a1);
}

uint64_t sub_1BDE3D3E8()
{
  sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE3D428()
{
  sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE3D478()
{
  sub_1BDD8422C(&qword_1EF52CDE8, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B88FC);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE3D4D0(uint64_t a1)
{
  return sub_1BDE474C4(a1, qword_1EF549118, (uint64_t)"seen", 4);
}

uint64_t sub_1BDE3D4E8()
{
  return 0x562E346F746F7250;
}

uint64_t sub_1BDE3D50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE475C8(a1, a2, a3, type metadata accessor for Proto4_Version.Seen, &qword_1EF52CBF0, (uint64_t)&unk_1BE1B8664);
}

uint64_t sub_1BDE3D538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE47690(a1, a2, a3, type metadata accessor for Proto4_Version.Seen, &qword_1EF52CBF0, (uint64_t)&unk_1BE1B8664, (void (*)(_QWORD))type metadata accessor for Proto4_Version);
}

uint64_t sub_1BDE3D56C()
{
  sub_1BDD8422C(&qword_1EF52CDF0, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B8794);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE3D5BC(char *a1)
{
  return sub_1BDE47788(a1, sub_1BDE007B0, type metadata accessor for Proto4_Version) & 1;
}

uint64_t sub_1BDE3D5E4@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD60, (uint64_t)qword_1EF549118, a1);
}

uint64_t sub_1BDE3D600()
{
  sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE3D640()
{
  sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE3D690()
{
  sub_1BDD8422C(&qword_1EF52CDF0, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B8794);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE3D6E8()
{
  uint64_t result;
  _QWORD v1[2];

  strcpy((char *)v1, "Proto4.Version");
  HIBYTE(v1[1]) = -18;
  result = sub_1BE1B284C();
  qword_1EF549130 = v1[0];
  *(_QWORD *)algn_1EF549138 = v1[1];
  return result;
}

uint64_t sub_1BDE3D754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549140);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549140);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "runs";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE3D8A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  result = sub_1BE1B2144();
  if (!v5)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        a4(v4 + 16, a2, a3);
      }
      else if (result == 1)
      {
        sub_1BE1B21A4();
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

void sub_1BDE3D94C()
{
  __asm { BR              X10 }
}

uint64_t sub_1BDE3D994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_1BE1B22E8(), !v2))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16) || (result = sub_1BE1B22A0(), !v2))
    {
      type metadata accessor for Proto4_Version.Seen(0);
      return sub_1BE1B20D8();
    }
  }
  return result;
}

uint64_t sub_1BDE3DA4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v3 = sub_1BE1B20F0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - v8;
  sub_1BDDD6F30(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  if ((v10 & 1) != 0 && sub_1BDDFED94(*(_QWORD **)(v1 + 16), *(_QWORD **)(a1 + 16)))
  {
    v11 = type metadata accessor for Proto4_Version.Seen(0);
    v12 = v1 + *(int *)(v11 + 24);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v13(v9, v12, v3);
    v13(v7, a1 + *(int *)(v11 + 24), v3);
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v14 = sub_1BE1B2798();
    v15 = *(void (**)(char *, uint64_t))(v4 + 8);
    v15(v7, v3);
    v15(v9, v3);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_1BDE3DB90@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BDE3DB9C(MEMORY[0x1E0DEE9D8], a1);
}

uint64_t sub_1BDE3DB9C@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  *a2 = sub_1BE1B20CC();
  a2[1] = v4;
  a2[2] = a1;
  return sub_1BE1B20E4();
}

uint64_t sub_1BDE3DBE0(uint64_t a1, uint64_t a2)
{
  return sub_1BDE429D4(a1, a2, &qword_1EF52BD68, &qword_1EF549130);
}

uint64_t sub_1BDE3DC00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1BDE3DC40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_1BDE3DC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE3D8A8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D3EB08]);
}

void sub_1BDE3DC9C()
{
  sub_1BDE3D94C();
}

uint64_t sub_1BDE3DCB0()
{
  sub_1BDD8422C(&qword_1EF52CDF8, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B862C);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE3DD04@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD70, (uint64_t)qword_1EF549140, a1);
}

uint64_t sub_1BDE3DD20()
{
  sub_1BDD8422C(&qword_1EF52CBF0, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B8664);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE3DD60()
{
  sub_1BDD8422C(&qword_1EF52CBF0, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B8664);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE3DDB0()
{
  sub_1BDD8422C(&qword_1EF52CDF8, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B862C);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE3DE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549158);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549158);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6B40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "timestamp";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "value";
  *(_QWORD *)(v12 + 8) = 5;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE3DF9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for Proto4_Register._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1BE1B20CC();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v0 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__timestamp;
  v3 = type metadata accessor for Proto4_Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v0 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  v5 = type metadata accessor for Proto4_Value(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  qword_1EF52C648 = v0;
  return result;
}

uint64_t sub_1BDE3E03C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  MEMORY[0x1E0C80A78](v3);
  v21 = (uint64_t)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE08);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_1BE1B20CC();
  *(_QWORD *)(v1 + 24) = v8;
  v9 = v1 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__timestamp;
  v10 = type metadata accessor for Proto4_Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  v12 = type metadata accessor for Proto4_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v15 = *(_QWORD *)(v1 + 16);
  v16 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v14;
  *(_QWORD *)(v1 + 24) = v13;
  sub_1BDDB6CA4(v14, v13);
  sub_1BDDB796C(v15, v16);
  v17 = a1 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v7, &qword_1EF52CE08);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v7, v9, &qword_1EF52CE08);
  swift_endAccess();
  v18 = a1 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  v19 = v21;
  sub_1BDD86DEC(v18, v21, &qword_1EF52CE00);
  swift_release();
  swift_beginAccess();
  sub_1BDDA1AF4(v19, v11, &qword_1EF52CE00);
  swift_endAccess();
  return v1;
}

uint64_t sub_1BDE3E290()
{
  return sub_1BDE3F5E8(&OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__timestamp, &qword_1EF52CE08, &OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value, &qword_1EF52CE00);
}

uint64_t sub_1BDE3E2B4()
{
  return type metadata accessor for Proto4_Register._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Register._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C728);
}

void sub_1BDE3E2D0()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BDD92F18(319, &qword_1EF52C738, (void (*)(uint64_t))type metadata accessor for Proto4_Timestamp);
  if (v0 <= 0x3F)
  {
    sub_1BDD92F18(319, &qword_1EF52C740, (void (*)(uint64_t))type metadata accessor for Proto4_Value);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for Proto4_Timestamp(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C940);
}

uint64_t type metadata accessor for Proto4_Value(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C9C0);
}

uint64_t sub_1BDE3E3AC()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_Timestamp(0);
        sub_1BDD8422C(&qword_1EF52CC48, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A9C);
        goto LABEL_5;
      }
      if (result == 1)
      {
        swift_beginAccess();
        v4 = v3;
        sub_1BE1B21A4();
        goto LABEL_6;
      }
LABEL_7:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    type metadata accessor for Proto4_Value(0);
    sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
LABEL_5:
    v4 = v3;
    sub_1BE1B2258();
LABEL_6:
    v3 = v4;
    swift_endAccess();
    goto LABEL_7;
  }
  return result;
}

void sub_1BDE3E548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a4;
  v12 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  MEMORY[0x1E0C80A78](v5);
  v10[2] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto4_Value(0);
  v10[1] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v10[0] = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE08);
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for Proto4_Timestamp(0);
  MEMORY[0x1E0C80A78](v9);
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t sub_1BDE3E69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((v4 & 0xFF000000000000) == 0 || (sub_1BDDB6CA4(v3, v4), sub_1BE1B22E8(), result = sub_1BDDB796C(v3, v4), !v0))
  {
    v10 = v6
        + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__timestamp;
    swift_beginAccess();
    sub_1BDD86DEC(v10, v2, &qword_1EF52CE08);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v2, 1, v1) == 1)
    {
      sub_1BDD86E30(v2, &qword_1EF52CE08);
    }
    else
    {
      sub_1BDDA2E8C(v2, v7, type metadata accessor for Proto4_Timestamp);
      sub_1BDD8422C(&qword_1EF52CC48, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A9C);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v7, type metadata accessor for Proto4_Timestamp);
      if (v0)
        return result;
    }
    v11 = v6 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
    swift_beginAccess();
    v12 = *(_QWORD *)(v8 - 176);
    sub_1BDD86DEC(v11, v12, &qword_1EF52CE00);
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v8 - 184) + 48))(v12, 1, *(_QWORD *)(v8 - 168)) == 1)
    {
      return sub_1BDD86E30(v12, &qword_1EF52CE00);
    }
    else
    {
      v13 = v12;
      v14 = *(_QWORD *)(v8 - 192);
      sub_1BDDA2E8C(v13, v14, type metadata accessor for Proto4_Value);
      sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
      sub_1BE1B2360();
      return sub_1BDD9C3E0(v14, type metadata accessor for Proto4_Value);
    }
  }
  return result;
}

BOOL sub_1BDE3E8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v54 = type metadata accessor for Proto4_Value(0);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v56 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE10);
  MEMORY[0x1E0C80A78](v52);
  v51 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  v7 = MEMORY[0x1E0C80A78](v6);
  v48 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v50 = (uint64_t)&v48 - v9;
  v10 = type metadata accessor for Proto4_Timestamp(0);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  MEMORY[0x1E0C80A78](v10);
  v49 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE18);
  MEMORY[0x1E0C80A78](v55);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE08);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v48 - v18;
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v22 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  sub_1BDDB6CA4(v20, v21);
  sub_1BDDB6CA4(v22, v23);
  sub_1BDDD6F30(v20, v21);
  v25 = v24;
  sub_1BDDB796C(v22, v23);
  sub_1BDDB796C(v20, v21);
  if ((v25 & 1) == 0)
    goto LABEL_9;
  v26 = (uint64_t)v17;
  v27 = v56;
  v28 = a1 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v28, (uint64_t)v19, &qword_1EF52CE08);
  v29 = a2 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__timestamp;
  swift_beginAccess();
  v30 = (uint64_t)&v13[*(int *)(v55 + 48)];
  sub_1BDD86DEC((uint64_t)v19, (uint64_t)v13, &qword_1EF52CE08);
  sub_1BDD86DEC(v29, v30, &qword_1EF52CE08);
  v31 = v58;
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  v33 = a2;
  if (v32((uint64_t)v13, 1, v58) == 1)
  {
    sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE08);
    if (v32(v30, 1, v31) == 1)
    {
      v34 = (uint64_t)v27;
      sub_1BDD86E30((uint64_t)v13, &qword_1EF52CE08);
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  sub_1BDD86DEC((uint64_t)v13, v26, &qword_1EF52CE08);
  if (v32(v30, 1, v31) == 1)
  {
    sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE08);
    sub_1BDD9C3E0(v26, type metadata accessor for Proto4_Timestamp);
LABEL_8:
    sub_1BDD86E30((uint64_t)v13, &qword_1EF52CE18);
LABEL_9:
    swift_release();
    swift_release();
    return 0;
  }
  v34 = (uint64_t)v27;
  v36 = v30;
  v37 = v49;
  sub_1BDDA2E8C(v36, v49, type metadata accessor for Proto4_Timestamp);
  sub_1BDD8422C(&qword_1EF52CC40, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B89AC);
  v38 = sub_1BE1B2798();
  sub_1BDD9C3E0(v37, type metadata accessor for Proto4_Timestamp);
  sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE08);
  sub_1BDD9C3E0(v26, type metadata accessor for Proto4_Timestamp);
  sub_1BDD86E30((uint64_t)v13, &qword_1EF52CE08);
  if ((v38 & 1) == 0)
    goto LABEL_9;
LABEL_12:
  v39 = a1 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  v40 = v50;
  sub_1BDD86DEC(v39, v50, &qword_1EF52CE00);
  v41 = v33 + OBJC_IVAR____TtCV9Coherence15Proto4_RegisterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  v42 = v51;
  v43 = v51 + *(int *)(v52 + 48);
  sub_1BDD86DEC(v40, v51, &qword_1EF52CE00);
  sub_1BDD86DEC(v41, v43, &qword_1EF52CE00);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  v45 = v54;
  if (v44(v42, 1, v54) != 1)
  {
    v46 = v48;
    sub_1BDD86DEC(v42, v48, &qword_1EF52CE00);
    if (v44(v43, 1, v45) == 1)
    {
      swift_release();
      swift_release();
      sub_1BDD86E30(v40, &qword_1EF52CE00);
      sub_1BDD9C3E0(v46, type metadata accessor for Proto4_Value);
      goto LABEL_17;
    }
    sub_1BDDA2E8C(v43, v34, type metadata accessor for Proto4_Value);
    sub_1BDD8422C(&qword_1EF52C2F0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8DE4);
    v47 = sub_1BE1B2798();
    swift_release();
    swift_release();
    sub_1BDD9C3E0(v34, type metadata accessor for Proto4_Value);
    sub_1BDD86E30(v40, &qword_1EF52CE00);
    sub_1BDD9C3E0(v46, type metadata accessor for Proto4_Value);
    sub_1BDD86E30(v42, &qword_1EF52CE00);
    return (v47 & 1) != 0;
  }
  swift_release();
  swift_release();
  sub_1BDD86E30(v40, &qword_1EF52CE00);
  if (v44(v43, 1, v45) != 1)
  {
LABEL_17:
    sub_1BDD86E30(v42, &qword_1EF52CE10);
    return 0;
  }
  sub_1BDD86E30(v42, &qword_1EF52CE00);
  return 1;
}

uint64_t sub_1BDE3EF88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BD80, &qword_1EF52C648, a2);
}

uint64_t sub_1BDE3EFA4()
{
  return 0x522E346F746F7250;
}

uint64_t sub_1BDE3EFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Register, (void (*)(_QWORD))type metadata accessor for Proto4_Register._StorageClass, sub_1BDE3E03C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE3E3AC);
}

uint64_t sub_1BDE3EFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Register, sub_1BDE3E548);
}

uint64_t sub_1BDE3F020()
{
  sub_1BDD8422C(&qword_1EF52CDD0, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B84C4);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE3F070(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Register, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE3E8C4) & 1;
}

uint64_t sub_1BDE3F098@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD78, (uint64_t)qword_1EF549158, a1);
}

uint64_t sub_1BDE3F0B4()
{
  sub_1BDD8422C(&qword_1EF52CBD8, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B84FC);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE3F0F4()
{
  sub_1BDD8422C(&qword_1EF52CBD8, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B84FC);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE3F144()
{
  sub_1BDD8422C(&qword_1EF52CDD0, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B84C4);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE3F19C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549170);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549170);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6B40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "positive";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "negative";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE3F32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for Proto4_Counter._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1BE1B20CC();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v0 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive;
  v3 = type metadata accessor for Proto4_Version(0);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v0+ OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative, 1, 1, v3);
  qword_1EF52C650 = v0;
  return result;
}

uint64_t sub_1BDE3F3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_1BE1B20CC();
  *(_QWORD *)(v1 + 24) = v6;
  v7 = v1 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive;
  v8 = type metadata accessor for Proto4_Version(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v10 = v1 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative;
  v9(v1 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative, 1, 1, v8);
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v13 = *(_QWORD *)(v1 + 16);
  v14 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v11;
  *(_QWORD *)(v1 + 24) = v12;
  sub_1BDDB6CA4(v11, v12);
  sub_1BDDB796C(v13, v14);
  v15 = a1 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v5, &qword_1EF52CE20);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v7, &qword_1EF52CE20);
  swift_endAccess();
  v16 = a1 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v5, &qword_1EF52CE20);
  swift_release();
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v10, &qword_1EF52CE20);
  swift_endAccess();
  return v1;
}

uint64_t sub_1BDE3F5C8()
{
  return sub_1BDE3F5E8(&OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive, &qword_1EF52CE20, &OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative, &qword_1EF52CE20);
}

uint64_t sub_1BDE3F5E8(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;

  sub_1BDDB796C(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
  sub_1BDD86E30(v4 + *a1, a2);
  sub_1BDD86E30(v4 + *a3, a4);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE3F658()
{
  return type metadata accessor for Proto4_Counter._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Counter._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C758);
}

void sub_1BDE3F674()
{
  unint64_t v0;

  sub_1BDD92F18(319, &qword_1EF52C768, (void (*)(uint64_t))type metadata accessor for Proto4_Version);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for Proto4_Version(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C930);
}

uint64_t sub_1BDE3F710()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3 || result == 2)
        break;
      if (result == 1)
      {
        swift_beginAccess();
        v4 = v3;
        sub_1BE1B21A4();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    type metadata accessor for Proto4_Version(0);
    sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
    v4 = v3;
    sub_1BE1B2258();
LABEL_5:
    v3 = v4;
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

void sub_1BDE3F8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[14];

  v11[13] = a4;
  v11[2] = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v6 = MEMORY[0x1E0C80A78](v5);
  v11[1] = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = type metadata accessor for Proto4_Version(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11[0] = (char *)v11 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t sub_1BDE3F9C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((v4 & 0xFF000000000000) == 0 || (sub_1BDDB6CA4(v2, v4), sub_1BE1B22E8(), result = sub_1BDDB796C(v2, v4), !v0))
  {
    v10 = v6 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive;
    swift_beginAccess();
    sub_1BDD86DEC(v10, v7, &qword_1EF52CE20);
    v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    if (v11(v7, 1, v5) == 1)
    {
      sub_1BDD86E30(v7, &qword_1EF52CE20);
    }
    else
    {
      sub_1BDDA2E8C(v7, v1, type metadata accessor for Proto4_Version);
      sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v1, type metadata accessor for Proto4_Version);
      if (v0)
        return result;
    }
    v12 = v6 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative;
    swift_beginAccess();
    v13 = *(_QWORD *)(v8 - 168);
    sub_1BDD86DEC(v12, v13, &qword_1EF52CE20);
    if (v11(v13, 1, v5) == 1)
    {
      return sub_1BDD86E30(v13, &qword_1EF52CE20);
    }
    else
    {
      v14 = v13;
      v15 = *(_QWORD *)(v8 - 176);
      sub_1BDDA2E8C(v14, v15, type metadata accessor for Proto4_Version);
      sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
      sub_1BE1B2360();
      return sub_1BDD9C3E0(v15, type metadata accessor for Proto4_Version);
    }
  }
  return result;
}

BOOL sub_1BDE3FBDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = type metadata accessor for Proto4_Version(0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  MEMORY[0x1E0C80A78](v4);
  v52 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE28);
  v6 = MEMORY[0x1E0C80A78](v56);
  v51 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v53 = (uint64_t)&v50 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v10 = MEMORY[0x1E0C80A78](v9);
  v50 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v50 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v50 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v50 - v18;
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v22 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  sub_1BDDB6CA4(v21, v20);
  sub_1BDDB6CA4(v22, v23);
  sub_1BDDD6F30(v21, v20);
  v25 = v24;
  sub_1BDDB796C(v22, v23);
  sub_1BDDB796C(v21, v20);
  if ((v25 & 1) == 0)
    goto LABEL_8;
  v26 = v14;
  v27 = a1 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive;
  swift_beginAccess();
  sub_1BDD86DEC(v27, (uint64_t)v19, &qword_1EF52CE20);
  v28 = a2 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__positive;
  swift_beginAccess();
  v29 = v53;
  v30 = v53 + *(int *)(v56 + 48);
  sub_1BDD86DEC((uint64_t)v19, v53, &qword_1EF52CE20);
  sub_1BDD86DEC(v28, v30, &qword_1EF52CE20);
  v31 = v55;
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  if (v32(v29, 1, v55) != 1)
  {
    v54 = a1;
    v34 = a2;
    v35 = (uint64_t)v19;
    v36 = (uint64_t)v17;
    sub_1BDD86DEC(v29, (uint64_t)v17, &qword_1EF52CE20);
    v37 = v32(v30, 1, v31);
    v38 = v52;
    if (v37 != 1)
    {
      v33 = (uint64_t)v26;
      sub_1BDDA2E8C(v30, v52, type metadata accessor for Proto4_Version);
      sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
      v40 = v38;
      v41 = sub_1BE1B2798();
      sub_1BDD9C3E0(v40, type metadata accessor for Proto4_Version);
      sub_1BDD86E30(v35, &qword_1EF52CE20);
      sub_1BDD9C3E0(v36, type metadata accessor for Proto4_Version);
      sub_1BDD86E30(v29, &qword_1EF52CE20);
      a2 = v34;
      a1 = v54;
      if ((v41 & 1) != 0)
        goto LABEL_12;
LABEL_8:
      swift_release();
      swift_release();
      return 0;
    }
    sub_1BDD86E30(v35, &qword_1EF52CE20);
    sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto4_Version);
LABEL_7:
    sub_1BDD86E30(v29, &qword_1EF52CE28);
    goto LABEL_8;
  }
  sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE20);
  if (v32(v30, 1, v31) != 1)
    goto LABEL_7;
  v33 = (uint64_t)v26;
  sub_1BDD86E30(v29, &qword_1EF52CE20);
LABEL_12:
  v42 = a1 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative;
  swift_beginAccess();
  sub_1BDD86DEC(v42, v33, &qword_1EF52CE20);
  v43 = a2 + OBJC_IVAR____TtCV9Coherence14Proto4_CounterP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__negative;
  swift_beginAccess();
  v44 = v51;
  v45 = v51 + *(int *)(v56 + 48);
  sub_1BDD86DEC(v33, v51, &qword_1EF52CE20);
  sub_1BDD86DEC(v43, v45, &qword_1EF52CE20);
  if (v32(v44, 1, v31) == 1)
  {
    swift_release();
    swift_release();
    sub_1BDD86E30(v33, &qword_1EF52CE20);
    if (v32(v45, 1, v31) == 1)
    {
      sub_1BDD86E30(v44, &qword_1EF52CE20);
      return 1;
    }
    goto LABEL_17;
  }
  v46 = v50;
  sub_1BDD86DEC(v44, v50, &qword_1EF52CE20);
  if (v32(v45, 1, v31) == 1)
  {
    swift_release();
    swift_release();
    sub_1BDD86E30(v33, &qword_1EF52CE20);
    sub_1BDD9C3E0(v46, type metadata accessor for Proto4_Version);
LABEL_17:
    sub_1BDD86E30(v44, &qword_1EF52CE28);
    return 0;
  }
  v47 = v45;
  v48 = v52;
  sub_1BDDA2E8C(v47, v52, type metadata accessor for Proto4_Version);
  sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
  v49 = sub_1BE1B2798();
  swift_release();
  swift_release();
  sub_1BDD9C3E0(v48, type metadata accessor for Proto4_Version);
  sub_1BDD86E30(v33, &qword_1EF52CE20);
  sub_1BDD9C3E0(v46, type metadata accessor for Proto4_Version);
  sub_1BDD86E30(v44, &qword_1EF52CE20);
  return (v49 & 1) != 0;
}

uint64_t sub_1BDE40210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BD90, &qword_1EF52C650, a2);
}

uint64_t sub_1BDE4022C()
{
  return 0x432E346F746F7250;
}

uint64_t sub_1BDE40250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Counter, (void (*)(_QWORD))type metadata accessor for Proto4_Counter._StorageClass, sub_1BDE3F3C4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE3F710);
}

uint64_t sub_1BDE40284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Counter, sub_1BDE3F8A8);
}

uint64_t sub_1BDE402A8()
{
  sub_1BDD8422C(&qword_1EF52CDB0, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B835C);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE402F8(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Counter, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE3FBDC) & 1;
}

uint64_t sub_1BDE40320@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD88, (uint64_t)qword_1EF549170, a1);
}

uint64_t sub_1BDE4033C()
{
  sub_1BDD8422C(&qword_1EF52CBB8, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B8394);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE4037C()
{
  sub_1BDD8422C(&qword_1EF52CBB8, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B8394);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE403CC()
{
  sub_1BDD8422C(&qword_1EF52CDB0, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B835C);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE40424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549188);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549188);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6B40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "version";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "insertions";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE405B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  type metadata accessor for Proto4_Set._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1BE1B20CC();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v0 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v3 = type metadata accessor for Proto4_Version(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__insertions) = MEMORY[0x1E0DEE9D8];
  qword_1EF52C658 = v0;
  return result;
}

uint64_t sub_1BDE4063C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_1BE1B20CC();
  *(_QWORD *)(v1 + 24) = v6;
  v7 = v1 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v8 = type metadata accessor for Proto4_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__insertions);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__insertions) = MEMORY[0x1E0DEE9D8];
  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)(v1 + 24) = v11;
  sub_1BDDB6CA4(v10, v11);
  sub_1BDDB796C(v12, v13);
  v14 = a1 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v14, (uint64_t)v5, &qword_1EF52CE20);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v7, &qword_1EF52CE20);
  swift_endAccess();
  v15 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__insertions);
  swift_beginAccess();
  v16 = *v15;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *v9 = v16;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1BDE40820()
{
  uint64_t v0;

  sub_1BDDB796C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version, &qword_1EF52CE20);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE40870()
{
  return type metadata accessor for Proto4_Set._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Set._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C780);
}

void sub_1BDE4088C()
{
  unint64_t v0;

  sub_1BDD92F18(319, &qword_1EF52C768, (void (*)(uint64_t))type metadata accessor for Proto4_Version);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1BDE40920()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_Version(0);
        sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
        v4 = v3;
        sub_1BE1B2258();
        goto LABEL_5;
      }
      if (result == 1)
      {
        swift_beginAccess();
        v4 = v3;
        sub_1BE1B21A4();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    type metadata accessor for Proto4_Set.Element(0);
    sub_1BDD8422C(&qword_1EF52CB78, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B80C4);
    v4 = v3;
    sub_1BE1B224C();
LABEL_5:
    v3 = v4;
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

void sub_1BDE40AD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for Proto4_Version(0);
  MEMORY[0x1E0C80A78](v3);
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t sub_1BDE40BA8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if ((v1 & 0xFF000000000000) == 0 || (sub_1BDDB6CA4(v7, v1), sub_1BE1B22E8(), result = sub_1BDDB796C(v7, v1), !v0))
  {
    v9 = v3 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
    swift_beginAccess();
    sub_1BDD86DEC(v9, v6, &qword_1EF52CE20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v5) == 1)
    {
      sub_1BDD86E30(v6, &qword_1EF52CE20);
    }
    else
    {
      sub_1BDDA2E8C(v6, v4, type metadata accessor for Proto4_Version);
      sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v4, type metadata accessor for Proto4_Version);
      if (v0)
        return result;
    }
    v10 = v3 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__insertions;
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v10 + 16))
    {
      type metadata accessor for Proto4_Set.Element(0);
      sub_1BDD8422C(&qword_1EF52CB78, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B80C4);
      swift_bridgeObjectRetain();
      sub_1BE1B2354();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1BDE40D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  char v27;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for Proto4_Version(0);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x1E0C80A78](v4);
  v35 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE28);
  MEMORY[0x1E0C80A78](v36);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  sub_1BDDB6CA4(v14, v15);
  sub_1BDDB6CA4(v16, v17);
  sub_1BDDD6F30(v14, v15);
  v19 = v18;
  sub_1BDDB796C(v16, v17);
  sub_1BDDB796C(v14, v15);
  if ((v19 & 1) == 0)
    goto LABEL_8;
  v20 = (uint64_t)v11;
  v21 = (uint64_t)v35;
  v22 = a1 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v22, (uint64_t)v13, &qword_1EF52CE20);
  v23 = a2 + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  v24 = (uint64_t)&v7[*(int *)(v36 + 48)];
  sub_1BDD86DEC((uint64_t)v13, (uint64_t)v7, &qword_1EF52CE20);
  sub_1BDD86DEC(v23, v24, &qword_1EF52CE20);
  v25 = v38;
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v26((uint64_t)v7, 1, v38) == 1)
  {
    sub_1BDD86E30((uint64_t)v13, &qword_1EF52CE20);
    if (v26(v24, 1, v25) == 1)
    {
      sub_1BDD86E30((uint64_t)v7, &qword_1EF52CE20);
LABEL_11:
      v30 = (uint64_t *)(a1
                      + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__insertions);
      swift_beginAccess();
      v31 = *v30;
      v32 = (uint64_t *)(a2
                      + OBJC_IVAR____TtCV9Coherence10Proto4_SetP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__insertions);
      swift_beginAccess();
      v33 = *v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = sub_1BDE007CC(v31, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  sub_1BDD86DEC((uint64_t)v7, v20, &qword_1EF52CE20);
  if (v26(v24, 1, v25) == 1)
  {
    sub_1BDD86E30((uint64_t)v13, &qword_1EF52CE20);
    sub_1BDD9C3E0(v20, type metadata accessor for Proto4_Version);
LABEL_7:
    sub_1BDD86E30((uint64_t)v7, &qword_1EF52CE28);
    goto LABEL_8;
  }
  sub_1BDDA2E8C(v24, v21, type metadata accessor for Proto4_Version);
  sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
  v29 = sub_1BE1B2798();
  sub_1BDD9C3E0(v21, type metadata accessor for Proto4_Version);
  sub_1BDD86E30((uint64_t)v13, &qword_1EF52CE20);
  sub_1BDD9C3E0(v20, type metadata accessor for Proto4_Version);
  sub_1BDD86E30((uint64_t)v7, &qword_1EF52CE20);
  if ((v29 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v27 = 0;
LABEL_9:
  swift_release();
  swift_release();
  return v27 & 1;
}

uint64_t sub_1BDE41188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BDA0, &qword_1EF52C658, a2);
}

uint64_t sub_1BDE411A4()
{
  return 0x532E346F746F7250;
}

uint64_t sub_1BDE411C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Set, (void (*)(_QWORD))type metadata accessor for Proto4_Set._StorageClass, sub_1BDE4063C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE40920);
}

uint64_t sub_1BDE411F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Set, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE40AD0);
}

uint64_t sub_1BDE41218()
{
  sub_1BDD8422C(&qword_1EF52CDC8, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B81F4);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE41268(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Set, sub_1BDE40D84) & 1;
}

uint64_t sub_1BDE41290@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BD98, (uint64_t)qword_1EF549188, a1);
}

uint64_t sub_1BDE412AC()
{
  sub_1BDD8422C(&qword_1EF52CB98, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B822C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE412EC()
{
  sub_1BDD8422C(&qword_1EF52CB98, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B822C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE4133C()
{
  sub_1BDD8422C(&qword_1EF52CDC8, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B81F4);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE41394()
{
  uint64_t result;

  result = sub_1BE1B284C();
  qword_1EF5491A0 = 0x532E346F746F7250;
  *(_QWORD *)algn_1EF5491A8 = 0xEA00000000007465;
  return result;
}

uint64_t sub_1BDE413FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5491B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5491B0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6B40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "key";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "value";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "addedBy";
  *(_QWORD *)(v12 + 8) = 7;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE41590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto4_Set.Element._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__key;
  v2 = type metadata accessor for Proto4_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  v4 = type metadata accessor for Proto4_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy;
  v6 = type metadata accessor for Proto4_Version(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  qword_1EF52C660 = v0;
  return result;
}

uint64_t sub_1BDE41658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = v1 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__key;
  v13 = type metadata accessor for Proto4_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v1 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  v15 = type metadata accessor for Proto4_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v1
      + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy;
  v17 = type metadata accessor for Proto4_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = a1 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v11, &qword_1EF52CE00);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v11, v12, &qword_1EF52CE00);
  swift_endAccess();
  v19 = a1 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v8, &qword_1EF52CCD0);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v8, v14, &qword_1EF52CCD0);
  swift_endAccess();
  v20 = a1
      + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v5, &qword_1EF52CE20);
  swift_release();
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v16, &qword_1EF52CE20);
  swift_endAccess();
  return v1;
}

uint64_t sub_1BDE41904()
{
  uint64_t v0;

  sub_1BDD86E30(v0 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__key, &qword_1EF52CE00);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value, &qword_1EF52CCD0);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy, &qword_1EF52CE20);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE4196C()
{
  return type metadata accessor for Proto4_Set.Element._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Set.Element._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C7A8);
}

void sub_1BDE41988()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BDD92F18(319, &qword_1EF52C740, (void (*)(uint64_t))type metadata accessor for Proto4_Value);
  if (v0 <= 0x3F)
  {
    sub_1BDD92F18(319, &qword_1EF52C6D0, (void (*)(uint64_t))type metadata accessor for Proto4_CRDT);
    if (v1 <= 0x3F)
    {
      sub_1BDD92F18(319, &qword_1EF52C768, (void (*)(uint64_t))type metadata accessor for Proto4_Version);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1BDE41A58()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_CRDT(0);
        sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
        goto LABEL_5;
      }
      if (result == 1)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_Value(0);
        sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    type metadata accessor for Proto4_Version(0);
    sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
LABEL_5:
    sub_1BE1B2258();
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1BDE41C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a3;
  v41 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v5);
  v35 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Proto4_Version(0);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v32 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto4_CRDT(0);
  v37 = *(_QWORD *)(v11 - 8);
  v38 = v11;
  MEMORY[0x1E0C80A78](v11);
  v33 = (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto4_Value(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1;
  v21 = a1 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v15, &qword_1EF52CE00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1EF52CE00);
    v22 = v39;
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v19, type metadata accessor for Proto4_Value);
    sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
    v23 = v39;
    sub_1BE1B2360();
    v22 = v23;
    result = sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto4_Value);
    if (v23)
      return result;
  }
  v25 = v20 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v25, (uint64_t)v10, &qword_1EF52CCD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v10, 1, v38) == 1)
  {
    sub_1BDD86E30((uint64_t)v10, &qword_1EF52CCD0);
  }
  else
  {
    v26 = (uint64_t)v10;
    v27 = v33;
    sub_1BDDA2E8C(v26, v33, type metadata accessor for Proto4_CRDT);
    sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
    sub_1BE1B2360();
    result = sub_1BDD9C3E0(v27, type metadata accessor for Proto4_CRDT);
    if (v22)
      return result;
  }
  v28 = v20
      + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy;
  swift_beginAccess();
  v29 = v35;
  sub_1BDD86DEC(v28, v35, &qword_1EF52CE20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v29, 1, v36) == 1)
    return sub_1BDD86E30(v29, &qword_1EF52CE20);
  v30 = v29;
  v31 = v32;
  sub_1BDDA2E8C(v30, v32, type metadata accessor for Proto4_Version);
  sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
  sub_1BE1B2360();
  return sub_1BDD9C3E0(v31, type metadata accessor for Proto4_Version);
}

BOOL sub_1BDE42050(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v83 = a2;
  v72 = type metadata accessor for Proto4_Version(0);
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v68 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE28);
  MEMORY[0x1E0C80A78](v70);
  v73 = (uint64_t)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v6 = MEMORY[0x1E0C80A78](v5);
  v80 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v75 = (char *)&v67 - v8;
  v78 = type metadata accessor for Proto4_CRDT(0);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78);
  v69 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD8);
  MEMORY[0x1E0C80A78](v76);
  v79 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v74 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v81 = (uint64_t)&v67 - v14;
  v15 = type metadata accessor for Proto4_Value(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE10);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  v23 = MEMORY[0x1E0C80A78](v22);
  v82 = (uint64_t)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v67 - v25;
  v27 = a1;
  v28 = a1 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v28, (uint64_t)v26, &qword_1EF52CE00);
  v29 = v83;
  v30 = v83 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__key;
  swift_beginAccess();
  v31 = (uint64_t)&v21[*(int *)(v19 + 48)];
  sub_1BDD86DEC((uint64_t)v26, (uint64_t)v21, &qword_1EF52CE00);
  sub_1BDD86DEC(v30, v31, &qword_1EF52CE00);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v32((uint64_t)v21, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1BDD86E30((uint64_t)v26, &qword_1EF52CE00);
    v33 = v32(v31, 1, v15);
    v34 = v27;
    if (v33 == 1)
    {
      sub_1BDD86E30((uint64_t)v21, &qword_1EF52CE00);
      goto LABEL_8;
    }
LABEL_6:
    v36 = &qword_1EF52CE10;
    v37 = (uint64_t)v21;
LABEL_14:
    sub_1BDD86E30(v37, v36);
    goto LABEL_15;
  }
  v35 = v27;
  sub_1BDD86DEC((uint64_t)v21, v82, &qword_1EF52CE00);
  if (v32(v31, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1BDD86E30((uint64_t)v26, &qword_1EF52CE00);
    sub_1BDD9C3E0(v82, type metadata accessor for Proto4_Value);
    goto LABEL_6;
  }
  v38 = (uint64_t)v18;
  sub_1BDDA2E8C(v31, (uint64_t)v18, type metadata accessor for Proto4_Value);
  sub_1BDD8422C(&qword_1EF52C2F0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8DE4);
  v34 = v35;
  swift_retain();
  swift_retain();
  v39 = v82;
  v40 = sub_1BE1B2798();
  sub_1BDD9C3E0(v38, type metadata accessor for Proto4_Value);
  sub_1BDD86E30((uint64_t)v26, &qword_1EF52CE00);
  sub_1BDD9C3E0(v39, type metadata accessor for Proto4_Value);
  sub_1BDD86E30((uint64_t)v21, &qword_1EF52CE00);
  if ((v40 & 1) == 0)
    goto LABEL_15;
LABEL_8:
  v41 = v34 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  v42 = v81;
  sub_1BDD86DEC(v41, v81, &qword_1EF52CCD0);
  v43 = v29 + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  v44 = v79;
  v45 = v79 + *(int *)(v76 + 48);
  sub_1BDD86DEC(v42, v79, &qword_1EF52CCD0);
  sub_1BDD86DEC(v43, v45, &qword_1EF52CCD0);
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v47 = v78;
  if (v46(v44, 1, v78) != 1)
  {
    v51 = v74;
    sub_1BDD86DEC(v44, v74, &qword_1EF52CCD0);
    v52 = v46(v45, 1, v47);
    v49 = (uint64_t)v80;
    if (v52 == 1)
    {
      sub_1BDD86E30(v42, &qword_1EF52CCD0);
      sub_1BDD9C3E0(v51, type metadata accessor for Proto4_CRDT);
      goto LABEL_13;
    }
    v54 = v69;
    sub_1BDDA2E8C(v45, v69, type metadata accessor for Proto4_CRDT);
    sub_1BDD8422C(&qword_1EF52C320, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8C7C);
    v55 = sub_1BE1B2798();
    sub_1BDD9C3E0(v54, type metadata accessor for Proto4_CRDT);
    sub_1BDD86E30(v81, &qword_1EF52CCD0);
    sub_1BDD9C3E0(v51, type metadata accessor for Proto4_CRDT);
    sub_1BDD86E30(v44, &qword_1EF52CCD0);
    v50 = (uint64_t)v75;
    if ((v55 & 1) != 0)
      goto LABEL_19;
LABEL_15:
    swift_release();
    swift_release();
    return 0;
  }
  sub_1BDD86E30(v42, &qword_1EF52CCD0);
  v48 = v46(v45, 1, v47);
  v49 = (uint64_t)v80;
  v50 = (uint64_t)v75;
  if (v48 != 1)
  {
LABEL_13:
    v36 = &qword_1EF52CCD8;
    v37 = v44;
    goto LABEL_14;
  }
  sub_1BDD86E30(v44, &qword_1EF52CCD0);
LABEL_19:
  v56 = v34
      + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1BDD86DEC(v56, v50, &qword_1EF52CE20);
  v57 = v29
      + OBJC_IVAR____TtCVV9Coherence10Proto4_Set7ElementP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy;
  swift_beginAccess();
  v58 = v73;
  v59 = v73 + *(int *)(v70 + 48);
  sub_1BDD86DEC(v50, v73, &qword_1EF52CE20);
  v60 = v57;
  v61 = v58;
  sub_1BDD86DEC(v60, v59, &qword_1EF52CE20);
  v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  v63 = v58;
  v64 = v72;
  if (v62(v63, 1, v72) == 1)
  {
    swift_release();
    swift_release();
    sub_1BDD86E30(v50, &qword_1EF52CE20);
    if (v62(v59, 1, v64) == 1)
    {
      sub_1BDD86E30(v61, &qword_1EF52CE20);
      return 1;
    }
    goto LABEL_24;
  }
  sub_1BDD86DEC(v61, v49, &qword_1EF52CE20);
  if (v62(v59, 1, v64) == 1)
  {
    swift_release();
    swift_release();
    sub_1BDD86E30(v50, &qword_1EF52CE20);
    sub_1BDD9C3E0(v49, type metadata accessor for Proto4_Version);
LABEL_24:
    sub_1BDD86E30(v61, &qword_1EF52CE28);
    return 0;
  }
  v65 = v68;
  sub_1BDDA2E8C(v59, v68, type metadata accessor for Proto4_Version);
  sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
  v66 = sub_1BE1B2798();
  swift_release();
  swift_release();
  sub_1BDD9C3E0(v65, type metadata accessor for Proto4_Version);
  sub_1BDD86E30(v50, &qword_1EF52CE20);
  sub_1BDD9C3E0(v49, type metadata accessor for Proto4_Version);
  sub_1BDD86E30(v61, &qword_1EF52CE20);
  return (v66 & 1) != 0;
}

uint64_t sub_1BDE42998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BDB8, &qword_1EF52C660, a2);
}

uint64_t sub_1BDE429B4(uint64_t a1, uint64_t a2)
{
  return sub_1BDE429D4(a1, a2, &qword_1EF52BDA8, &qword_1EF5491A0);
}

uint64_t sub_1BDE429D4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_1BDE42A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Set.Element, (void (*)(_QWORD))type metadata accessor for Proto4_Set.Element._StorageClass, sub_1BDE41658, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE41A58);
}

uint64_t sub_1BDE42A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Set.Element, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE41C18);
}

uint64_t sub_1BDE42A80()
{
  sub_1BDD8422C(&qword_1EF52CE30, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B808C);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE42AD0(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Set.Element, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE42050) & 1;
}

uint64_t sub_1BDE42AF8@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BDB0, (uint64_t)qword_1EF5491B0, a1);
}

uint64_t sub_1BDE42B14()
{
  sub_1BDD8422C(&qword_1EF52CB78, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B80C4);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE42B54()
{
  sub_1BDD8422C(&qword_1EF52CB78, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B80C4);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE42BA4()
{
  sub_1BDD8422C(&qword_1EF52CE30, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B808C);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE42BFC(uint64_t a1)
{
  return sub_1BDE474C4(a1, qword_1EF5491C8, (uint64_t)"fields", 6);
}

uint64_t sub_1BDE42C14()
{
  return 0x532E346F746F7250;
}

uint64_t sub_1BDE42C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE475C8(a1, a2, a3, type metadata accessor for Proto4_Struct.Field, &qword_1EF52CB40, (uint64_t)&unk_1BE1B7DF4);
}

uint64_t sub_1BDE42C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE47690(a1, a2, a3, type metadata accessor for Proto4_Struct.Field, &qword_1EF52CB40, (uint64_t)&unk_1BE1B7DF4, (void (*)(_QWORD))type metadata accessor for Proto4_Struct);
}

uint64_t sub_1BDE42C98()
{
  sub_1BDD8422C(&qword_1EF52CDC0, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7F24);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE42CE8(char *a1)
{
  return sub_1BDE47788(a1, sub_1BDE007E8, type metadata accessor for Proto4_Struct) & 1;
}

uint64_t sub_1BDE42D10@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BDC0, (uint64_t)qword_1EF5491C8, a1);
}

uint64_t sub_1BDE42D2C()
{
  sub_1BDD8422C(&qword_1EF52CB60, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7F5C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE42D6C()
{
  sub_1BDD8422C(&qword_1EF52CB60, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7F5C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE42DBC()
{
  sub_1BDD8422C(&qword_1EF52CDC0, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7F24);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE42E14()
{
  uint64_t result;
  _QWORD v1[2];

  strcpy((char *)v1, "Proto4.Struct");
  HIWORD(v1[1]) = -4864;
  result = sub_1BE1B284C();
  qword_1EF5491E0 = v1[0];
  *(_QWORD *)algn_1EF5491E8 = v1[1];
  return result;
}

uint64_t sub_1BDE42E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5491F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5491F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "key";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "value";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE42FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  type metadata accessor for Proto4_Struct.Field._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v1 = v0 + OBJC_IVAR____TtCVV9Coherence13Proto4_Struct5FieldP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  v2 = type metadata accessor for Proto4_CRDT(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  qword_1EF52C668 = v0;
  return result;
}

uint64_t sub_1BDE43040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0xE000000000000000;
  v6 = v1 + OBJC_IVAR____TtCVV9Coherence13Proto4_Struct5FieldP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  v7 = type metadata accessor for Proto4_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)(v1 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a1 + OBJC_IVAR____TtCVV9Coherence13Proto4_Struct5FieldP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v10, (uint64_t)v5, &qword_1EF52CCD0);
  swift_release();
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v6, &qword_1EF52CCD0);
  swift_endAccess();
  return v1;
}

uint64_t sub_1BDE431AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCVV9Coherence13Proto4_Struct5FieldP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value, &qword_1EF52CCD0);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE431EC()
{
  return type metadata accessor for Proto4_Struct.Field._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Struct.Field._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C7C0);
}

void sub_1BDE43208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE46B38(a1, a2, a3, (uint64_t)&unk_1BE1B6C70, &qword_1EF52C6D0, (void (*)(uint64_t))type metadata accessor for Proto4_CRDT);
}

uint64_t sub_1BDE43224()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        swift_beginAccess();
        v4 = v3;
        sub_1BE1B221C();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    type metadata accessor for Proto4_CRDT(0);
    sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
    v4 = v3;
    sub_1BE1B2258();
LABEL_5:
    v3 = v4;
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1BDE43368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[10];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto4_CRDT(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v19[0] = (uint64_t)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 24);
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  v19[9] = a4;
  v19[1] = a3;
  if (!v15 || (swift_bridgeObjectRetain(), sub_1BE1B2330(), result = swift_bridgeObjectRelease(), !v4))
  {
    v17 = a1
        + OBJC_IVAR____TtCVV9Coherence13Proto4_Struct5FieldP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
    swift_beginAccess();
    sub_1BDD86DEC(v17, (uint64_t)v10, &qword_1EF52CCD0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      return sub_1BDD86E30((uint64_t)v10, &qword_1EF52CCD0);
    }
    else
    {
      v18 = v19[0];
      sub_1BDDA2E8C((uint64_t)v10, v19[0], type metadata accessor for Proto4_CRDT);
      sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
      sub_1BE1B2360();
      return sub_1BDD9C3E0(v18, type metadata accessor for Proto4_CRDT);
    }
  }
  return result;
}

BOOL sub_1BDE43564(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Proto4_CRDT(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v27 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v26 - v14;
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  if (v16 == *(_QWORD *)(a2 + 16) && v17 == *(_QWORD *)(a2 + 24)
    || (v18 = sub_1BE1B34AC(), result = 0, (v18 & 1) != 0))
  {
    v20 = a1
        + OBJC_IVAR____TtCVV9Coherence13Proto4_Struct5FieldP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
    swift_beginAccess();
    sub_1BDD86DEC(v20, (uint64_t)v15, &qword_1EF52CCD0);
    v21 = a2
        + OBJC_IVAR____TtCVV9Coherence13Proto4_Struct5FieldP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__value;
    swift_beginAccess();
    v22 = (uint64_t)&v9[*(int *)(v7 + 48)];
    sub_1BDD86DEC((uint64_t)v15, (uint64_t)v9, &qword_1EF52CCD0);
    sub_1BDD86DEC(v21, v22, &qword_1EF52CCD0);
    v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v23((uint64_t)v9, 1, v4) == 1)
    {
      sub_1BDD86E30((uint64_t)v15, &qword_1EF52CCD0);
      if (v23(v22, 1, v4) == 1)
      {
        sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCD0);
        return 1;
      }
    }
    else
    {
      sub_1BDD86DEC((uint64_t)v9, (uint64_t)v13, &qword_1EF52CCD0);
      if (v23(v22, 1, v4) != 1)
      {
        v24 = v27;
        sub_1BDDA2E8C(v22, v27, type metadata accessor for Proto4_CRDT);
        sub_1BDD8422C(&qword_1EF52C320, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8C7C);
        v25 = sub_1BE1B2798();
        sub_1BDD9C3E0(v24, type metadata accessor for Proto4_CRDT);
        sub_1BDD86E30((uint64_t)v15, &qword_1EF52CCD0);
        sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_CRDT);
        sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCD0);
        return (v25 & 1) != 0;
      }
      sub_1BDD86E30((uint64_t)v15, &qword_1EF52CCD0);
      sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_CRDT);
    }
    sub_1BDD86E30((uint64_t)v9, &qword_1EF52CCD8);
    return 0;
  }
  return result;
}

uint64_t sub_1BDE4389C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BDD8, &qword_1EF52C668, a2);
}

uint64_t sub_1BDE438B8(uint64_t a1, uint64_t a2)
{
  return sub_1BDE429D4(a1, a2, &qword_1EF52BDC8, &qword_1EF5491E0);
}

uint64_t sub_1BDE438D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Struct.Field, (void (*)(_QWORD))type metadata accessor for Proto4_Struct.Field._StorageClass, sub_1BDE43040, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE43224);
}

uint64_t sub_1BDE4390C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Struct.Field, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE43368);
}

uint64_t sub_1BDE43930()
{
  sub_1BDD8422C(&qword_1EF52CE38, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7DBC);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE43980(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Struct.Field, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE43564) & 1;
}

uint64_t sub_1BDE439A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BDD0, (uint64_t)qword_1EF5491F0, a1);
}

uint64_t sub_1BDE439C4()
{
  sub_1BDD8422C(&qword_1EF52CB40, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7DF4);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE43A04()
{
  sub_1BDD8422C(&qword_1EF52CB40, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7DF4);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE43A54()
{
  sub_1BDD8422C(&qword_1EF52CE38, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7DBC);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE43AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549208);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549208);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6910;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "uuid";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "version";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "crdt";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "keyPath";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE43C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for Proto4_Reference._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1BE1B20CC();
  *(_QWORD *)(v0 + 24) = v1;
  v2 = v0 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v3 = type metadata accessor for Proto4_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v0 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__crdt;
  v5 = type metadata accessor for Proto4_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v0 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath;
  v7 = type metadata accessor for Proto4_KeyPath(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  qword_1EF52C670 = v0;
  return result;
}

uint64_t sub_1BDE43D40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE40);
  MEMORY[0x1E0C80A78](v4);
  v32 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v6);
  v31 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = sub_1BE1B20CC();
  v11 = (uint64_t *)(v1 + 16);
  *(_QWORD *)(v2 + 24) = v12;
  v13 = v2 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v14 = type metadata accessor for Proto4_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v2 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__crdt;
  v16 = type metadata accessor for Proto4_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = v2 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath;
  v30 = v2 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath;
  v18 = type metadata accessor for Proto4_KeyPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v21 = *v11;
  v22 = *(_QWORD *)(v2 + 24);
  *v11 = v20;
  *(_QWORD *)(v2 + 24) = v19;
  sub_1BDDB6CA4(v20, v19);
  sub_1BDDB796C(v21, v22);
  v23 = a1 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v10, &qword_1EF52CE20);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v10, v13, &qword_1EF52CE20);
  swift_endAccess();
  v24 = a1 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__crdt;
  swift_beginAccess();
  v25 = v31;
  sub_1BDD86DEC(v24, v31, &qword_1EF52CCD0);
  swift_beginAccess();
  sub_1BDDA1AF4(v25, v15, &qword_1EF52CCD0);
  swift_endAccess();
  v26 = a1 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath;
  swift_beginAccess();
  v27 = v32;
  sub_1BDD86DEC(v26, v32, &qword_1EF52CE40);
  swift_release();
  v28 = v30;
  swift_beginAccess();
  sub_1BDDA1AF4(v27, v28, &qword_1EF52CE40);
  swift_endAccess();
  return v2;
}

uint64_t sub_1BDE44070()
{
  uint64_t v0;

  sub_1BDDB796C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version, &qword_1EF52CE20);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__crdt, &qword_1EF52CCD0);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath, &qword_1EF52CE40);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE440E0()
{
  return type metadata accessor for Proto4_Reference._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Reference._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C7E8);
}

void sub_1BDE440FC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BDD92F18(319, &qword_1EF52C768, (void (*)(uint64_t))type metadata accessor for Proto4_Version);
  if (v0 <= 0x3F)
  {
    sub_1BDD92F18(319, &qword_1EF52C6D0, (void (*)(uint64_t))type metadata accessor for Proto4_CRDT);
    if (v1 <= 0x3F)
    {
      sub_1BDD92F18(319, &qword_1EF52C7F8, (void (*)(uint64_t))type metadata accessor for Proto4_KeyPath);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for Proto4_KeyPath(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C900);
}

uint64_t sub_1BDE441EC()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          v4 = v3;
          sub_1BE1B21A4();
          goto LABEL_6;
        case 2:
          swift_beginAccess();
          type metadata accessor for Proto4_Version(0);
          sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
          goto LABEL_5;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto4_CRDT(0);
          sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
          goto LABEL_5;
        case 4:
          swift_beginAccess();
          type metadata accessor for Proto4_KeyPath(0);
          sub_1BDD8422C(&qword_1EF52CC68, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8C04);
LABEL_5:
          v4 = v3;
          sub_1BE1B2258();
LABEL_6:
          v3 = v4;
          swift_endAccess();
          break;
        default:
          break;
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

void sub_1BDE443E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a3;
  v19 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE40);
  MEMORY[0x1E0C80A78](v5);
  v13[4] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Proto4_KeyPath(0);
  v13[3] = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v13[1] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v8);
  v16 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Proto4_CRDT(0);
  v15 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v13[2] = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for Proto4_Version(0);
  MEMORY[0x1E0C80A78](v12);
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t sub_1BDE445B4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((v1 & 0xFF000000000000) == 0
    || (sub_1BDDB6CA4(v6, v1),
        v8 = *(_QWORD *)(v7 - 72),
        sub_1BE1B22E8(),
        result = sub_1BDDB796C(v6, v1),
        (*(_QWORD *)(v7 - 72) = v8) == 0))
  {
    v10 = v5 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
    swift_beginAccess();
    sub_1BDD86DEC(v10, v4, &qword_1EF52CE20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 48))(v4, 1, v3) == 1)
    {
      sub_1BDD86E30(v4, &qword_1EF52CE20);
    }
    else
    {
      sub_1BDDA2E8C(v4, v2, type metadata accessor for Proto4_Version);
      sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
      v11 = *(_QWORD *)(v7 - 72);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v2, type metadata accessor for Proto4_Version);
      *(_QWORD *)(v7 - 72) = v11;
      if (v11)
        return result;
    }
    v12 = v5 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__crdt;
    swift_beginAccess();
    v13 = *(_QWORD *)(v7 - 216);
    sub_1BDD86DEC(v12, v13, &qword_1EF52CCD0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 224) + 48))(v13, 1, *(_QWORD *)(v7 - 208)) == 1)
    {
      sub_1BDD86E30(v13, &qword_1EF52CCD0);
    }
    else
    {
      v14 = v13;
      v15 = *(_QWORD *)(v7 - 256);
      sub_1BDDA2E8C(v14, v15, type metadata accessor for Proto4_CRDT);
      sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
      v16 = *(_QWORD *)(v7 - 72);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v15, type metadata accessor for Proto4_CRDT);
      *(_QWORD *)(v7 - 72) = v16;
      if (v16)
        return result;
    }
    v17 = v5 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath;
    swift_beginAccess();
    v18 = *(_QWORD *)(v7 - 240);
    sub_1BDD86DEC(v17, v18, &qword_1EF52CE40);
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7 - 248) + 48))(v18, 1, *(_QWORD *)(v7 - 232)) == 1)
    {
      return sub_1BDD86E30(v18, &qword_1EF52CE40);
    }
    else
    {
      v19 = v18;
      v20 = *(_QWORD *)(v7 - 264);
      sub_1BDDA2E8C(v19, v20, type metadata accessor for Proto4_KeyPath);
      sub_1BDD8422C(&qword_1EF52CC68, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8C04);
      v21 = *(_QWORD *)(v7 - 72);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v20, type metadata accessor for Proto4_KeyPath);
      *(_QWORD *)(v7 - 72) = v21;
    }
  }
  return result;
}

BOOL sub_1BDE448B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v73 = type metadata accessor for Proto4_KeyPath(0);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v69 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE48);
  MEMORY[0x1E0C80A78](v71);
  v74 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE40);
  v7 = MEMORY[0x1E0C80A78](v6);
  v77 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v78 = (char *)&v68 - v9;
  v82 = type metadata accessor for Proto4_CRDT(0);
  v80 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v70 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD8);
  MEMORY[0x1E0C80A78](v79);
  v83 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v75 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v81 = (uint64_t)&v68 - v15;
  v86 = type metadata accessor for Proto4_Version(0);
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v76 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE28);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v21 = MEMORY[0x1E0C80A78](v20);
  v84 = (uint64_t)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v68 - v23;
  swift_beginAccess();
  v26 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  swift_beginAccess();
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  sub_1BDDB6CA4(v26, v25);
  sub_1BDDB6CA4(v27, v28);
  sub_1BDDD6F30(v26, v25);
  v30 = v29;
  sub_1BDDB796C(v27, v28);
  sub_1BDDB796C(v26, v25);
  if ((v30 & 1) == 0)
    goto LABEL_17;
  v31 = a1 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v31, (uint64_t)v24, &qword_1EF52CE20);
  v32 = a2 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  v33 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_1BDD86DEC((uint64_t)v24, (uint64_t)v19, &qword_1EF52CE20);
  sub_1BDD86DEC(v32, v33, &qword_1EF52CE20);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  v35 = v86;
  v36 = a2;
  if (v34((uint64_t)v19, 1, v86) == 1)
  {
    sub_1BDD86E30((uint64_t)v24, &qword_1EF52CE20);
    if (v34(v33, 1, v35) == 1)
    {
      sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE20);
      goto LABEL_10;
    }
LABEL_8:
    v38 = &qword_1EF52CE28;
    v39 = (uint64_t)v19;
LABEL_16:
    sub_1BDD86E30(v39, v38);
    goto LABEL_17;
  }
  v37 = v84;
  sub_1BDD86DEC((uint64_t)v19, v84, &qword_1EF52CE20);
  if (v34(v33, 1, v35) == 1)
  {
    sub_1BDD86E30((uint64_t)v24, &qword_1EF52CE20);
    sub_1BDD9C3E0(v37, type metadata accessor for Proto4_Version);
    goto LABEL_8;
  }
  v40 = v76;
  sub_1BDDA2E8C(v33, v76, type metadata accessor for Proto4_Version);
  sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
  v41 = sub_1BE1B2798();
  sub_1BDD9C3E0(v40, type metadata accessor for Proto4_Version);
  sub_1BDD86E30((uint64_t)v24, &qword_1EF52CE20);
  sub_1BDD9C3E0(v37, type metadata accessor for Proto4_Version);
  sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE20);
  if ((v41 & 1) == 0)
  {
LABEL_17:
    swift_release();
    swift_release();
    return 0;
  }
LABEL_10:
  v42 = a1 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__crdt;
  swift_beginAccess();
  v43 = v81;
  sub_1BDD86DEC(v42, v81, &qword_1EF52CCD0);
  v44 = v36 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__crdt;
  swift_beginAccess();
  v45 = v83;
  v46 = v83 + *(int *)(v79 + 48);
  sub_1BDD86DEC(v43, v83, &qword_1EF52CCD0);
  sub_1BDD86DEC(v44, v46, &qword_1EF52CCD0);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  v48 = v82;
  if (v47(v45, 1, v82) == 1)
  {
    sub_1BDD86E30(v43, &qword_1EF52CCD0);
    v49 = v47(v46, 1, v48);
    v50 = (uint64_t)v77;
    v51 = (uint64_t)v78;
    if (v49 == 1)
    {
      sub_1BDD86E30(v45, &qword_1EF52CCD0);
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  v52 = v75;
  sub_1BDD86DEC(v45, v75, &qword_1EF52CCD0);
  v53 = v47(v46, 1, v48);
  v51 = (uint64_t)v78;
  if (v53 == 1)
  {
    sub_1BDD86E30(v43, &qword_1EF52CCD0);
    sub_1BDD9C3E0(v52, type metadata accessor for Proto4_CRDT);
LABEL_15:
    v38 = &qword_1EF52CCD8;
    v39 = v45;
    goto LABEL_16;
  }
  v55 = v70;
  sub_1BDDA2E8C(v46, v70, type metadata accessor for Proto4_CRDT);
  sub_1BDD8422C(&qword_1EF52C320, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8C7C);
  v56 = sub_1BE1B2798();
  sub_1BDD9C3E0(v55, type metadata accessor for Proto4_CRDT);
  v57 = v43;
  v50 = (uint64_t)v77;
  sub_1BDD86E30(v57, &qword_1EF52CCD0);
  sub_1BDD9C3E0(v52, type metadata accessor for Proto4_CRDT);
  sub_1BDD86E30(v45, &qword_1EF52CCD0);
  if ((v56 & 1) == 0)
    goto LABEL_17;
LABEL_20:
  v58 = a1 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1BDD86DEC(v58, v51, &qword_1EF52CE40);
  v59 = v36 + OBJC_IVAR____TtCV9Coherence16Proto4_ReferenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__keyPath;
  swift_beginAccess();
  v60 = v74;
  v61 = v74 + *(int *)(v71 + 48);
  sub_1BDD86DEC(v51, v74, &qword_1EF52CE40);
  v62 = v60;
  sub_1BDD86DEC(v59, v61, &qword_1EF52CE40);
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  v64 = v60;
  v65 = v73;
  if (v63(v64, 1, v73) != 1)
  {
    sub_1BDD86DEC(v62, v50, &qword_1EF52CE40);
    if (v63(v61, 1, v65) == 1)
    {
      swift_release();
      swift_release();
      sub_1BDD86E30(v51, &qword_1EF52CE40);
      sub_1BDD9C3E0(v50, type metadata accessor for Proto4_KeyPath);
      goto LABEL_25;
    }
    v66 = v69;
    sub_1BDDA2E8C(v61, v69, type metadata accessor for Proto4_KeyPath);
    sub_1BDD8422C(&qword_1EF52CC60, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8B14);
    v67 = sub_1BE1B2798();
    swift_release();
    swift_release();
    sub_1BDD9C3E0(v66, type metadata accessor for Proto4_KeyPath);
    sub_1BDD86E30(v51, &qword_1EF52CE40);
    sub_1BDD9C3E0(v50, type metadata accessor for Proto4_KeyPath);
    sub_1BDD86E30(v62, &qword_1EF52CE40);
    return (v67 & 1) != 0;
  }
  swift_release();
  swift_release();
  sub_1BDD86E30(v51, &qword_1EF52CE40);
  if (v63(v61, 1, v65) != 1)
  {
LABEL_25:
    sub_1BDD86E30(v62, &qword_1EF52CE48);
    return 0;
  }
  sub_1BDD86E30(v62, &qword_1EF52CE40);
  return 1;
}

uint64_t sub_1BDE45294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BDE8, &qword_1EF52C670, a2);
}

unint64_t sub_1BDE452B0()
{
  return 0xD000000000000010;
}

uint64_t sub_1BDE452CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Reference, (void (*)(_QWORD))type metadata accessor for Proto4_Reference._StorageClass, sub_1BDE43D40, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE441EC);
}

uint64_t sub_1BDE45300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Reference, sub_1BDE443E4);
}

uint64_t sub_1BDE45324()
{
  sub_1BDD8422C(&qword_1EF52CD40, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C54);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE45374(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Reference, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE448B8) & 1;
}

uint64_t sub_1BDE4539C@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BDE0, (uint64_t)qword_1EF549208, a1);
}

uint64_t sub_1BDE453B8()
{
  sub_1BDD8422C(&qword_1EF52CB28, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C8C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE453F8()
{
  sub_1BDD8422C(&qword_1EF52CB28, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C8C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE45448()
{
  sub_1BDD8422C(&qword_1EF52CD40, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C54);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE454A0(uint64_t a1)
{
  return sub_1BDE474C4(a1, qword_1EF549220, (uint64_t)"wrapped", 7);
}

uint64_t sub_1BDE454B8(uint64_t a1)
{
  return sub_1BDD8CC18(a1, (void (*)(_QWORD))type metadata accessor for Proto4_Optional._StorageClass, &OBJC_IVAR____TtCV9Coherence15Proto4_OptionalP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, type metadata accessor for Proto4_Value, &qword_1EF52C678);
}

uint64_t sub_1BDE454DC()
{
  return sub_1BDD96A3C(&OBJC_IVAR____TtCV9Coherence15Proto4_OptionalP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, &qword_1EF52CE00);
}

uint64_t sub_1BDE454F0()
{
  return type metadata accessor for Proto4_Optional._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Optional._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C808);
}

void sub_1BDE4550C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDDD2FB0(a1, a2, a3, &qword_1EF52C740, (void (*)(uint64_t))type metadata accessor for Proto4_Value);
}

uint64_t sub_1BDE45520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[10];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for Proto4_Optional(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v8 = *(_QWORD *)(v1 + v7);
    type metadata accessor for Proto4_Optional._StorageClass(0);
    v9 = swift_allocObject();
    v15[9] = v2;
    v10 = v9;
    v15[1] = a1;
    v11 = v9 + OBJC_IVAR____TtCV9Coherence15Proto4_OptionalP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
    v12 = type metadata accessor for Proto4_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = v8 + OBJC_IVAR____TtCV9Coherence15Proto4_OptionalP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
    swift_beginAccess();
    sub_1BDD86DEC(v13, (uint64_t)v6, &qword_1EF52CE00);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v6, v11, &qword_1EF52CE00);
    swift_endAccess();
    *(_QWORD *)(v1 + v7) = v10;
    swift_release();
  }
  swift_retain();
  sub_1BDE456C8();
  return swift_release();
}

uint64_t sub_1BDE456C8()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_Value(0);
        sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
        sub_1BE1B2258();
        swift_endAccess();
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDE457DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v14[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto4_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + OBJC_IVAR____TtCV9Coherence15Proto4_OptionalP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v7, &qword_1EF52CE00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_1BDD86E30((uint64_t)v7, &qword_1EF52CE00);
  sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto4_Value);
  sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
  sub_1BE1B2360();
  return sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto4_Value);
}

BOOL sub_1BDE45968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for Proto4_Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v24 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE10);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  v16 = a1 + OBJC_IVAR____TtCV9Coherence15Proto4_OptionalP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v15, &qword_1EF52CE00);
  v17 = a2 + OBJC_IVAR____TtCV9Coherence15Proto4_OptionalP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
  swift_beginAccess();
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1BDD86DEC((uint64_t)v15, (uint64_t)v9, &qword_1EF52CE00);
  sub_1BDD86DEC(v17, v18, &qword_1EF52CE00);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v19((uint64_t)v9, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1EF52CE00);
    if (v19(v18, 1, v4) == 1)
    {
      sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE00);
      return 1;
    }
    goto LABEL_6;
  }
  sub_1BDD86DEC((uint64_t)v9, (uint64_t)v13, &qword_1EF52CE00);
  if (v19(v18, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1EF52CE00);
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_Value);
LABEL_6:
    sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE10);
    return 0;
  }
  v20 = v24;
  sub_1BDDA2E8C(v18, v24, type metadata accessor for Proto4_Value);
  sub_1BDD8422C(&qword_1EF52C2F0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8DE4);
  v21 = sub_1BE1B2798();
  sub_1BDD9C3E0(v20, type metadata accessor for Proto4_Value);
  sub_1BDD86E30((uint64_t)v15, &qword_1EF52CE00);
  sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto4_Value);
  sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE00);
  return (v21 & 1) != 0;
}

uint64_t sub_1BDE45C40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BDF8, &qword_1EF52C678, a2);
}

uint64_t sub_1BDE45C5C()
{
  return 0x4F2E346F746F7250;
}

uint64_t sub_1BDE45C80(uint64_t a1)
{
  return sub_1BDE45520(a1);
}

uint64_t sub_1BDE45C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Optional, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE457DC);
}

uint64_t sub_1BDE45CB8()
{
  sub_1BDD8422C(&qword_1EF52CD38, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7AEC);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE45D08(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Optional, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE45968) & 1;
}

uint64_t sub_1BDE45D30@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BDF0, (uint64_t)qword_1EF549220, a1);
}

uint64_t sub_1BDE45D4C()
{
  sub_1BDD8422C(&qword_1EF52CB10, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7B24);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE45D8C()
{
  sub_1BDD8422C(&qword_1EF52CB10, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7B24);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE45DDC()
{
  sub_1BDD8422C(&qword_1EF52CD38, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7AEC);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE45E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549238);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549238);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "tag";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "wrapped";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE45F84(uint64_t a1)
{
  return sub_1BDE4692C(a1, (void (*)(_QWORD))type metadata accessor for Proto4_TaggedCRDT._StorageClass, &OBJC_IVAR____TtCV9Coherence17Proto4_TaggedCRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, type metadata accessor for Proto4_CRDT, &qword_1EF52C680);
}

uint64_t sub_1BDE45FA8()
{
  return sub_1BDD96A3C(&OBJC_IVAR____TtCV9Coherence17Proto4_TaggedCRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, &qword_1EF52CCD0);
}

uint64_t sub_1BDE45FBC()
{
  return type metadata accessor for Proto4_TaggedCRDT._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_TaggedCRDT._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C820);
}

void sub_1BDE45FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE46B38(a1, a2, a3, MEMORY[0x1E0DE9D38] + 64, &qword_1EF52C6D0, (void (*)(uint64_t))type metadata accessor for Proto4_CRDT);
}

uint64_t sub_1BDE45FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for Proto4_TaggedCRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto4_TaggedCRDT._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = sub_1BDE469A4(v8, &qword_1EF52CCD0, &OBJC_IVAR____TtCV9Coherence17Proto4_TaggedCRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, type metadata accessor for Proto4_CRDT);
    swift_release();
  }
  v9 = swift_retain();
  sub_1BDE46CB0(v9, a1, a2, a3, (uint64_t)&OBJC_IVAR____TtCV9Coherence17Proto4_TaggedCRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, type metadata accessor for Proto4_CRDT, &qword_1EF52CC80, (uint64_t)&unk_1BE1B8D6C);
  return swift_release();
}

uint64_t sub_1BDE460F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Proto4_CRDT(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 16) || (result = sub_1BE1B2300(), !v1))
  {
    v11 = a1
        + OBJC_IVAR____TtCV9Coherence17Proto4_TaggedCRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
    swift_beginAccess();
    sub_1BDD86DEC(v11, (uint64_t)v5, &qword_1EF52CCD0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      return sub_1BDD86E30((uint64_t)v5, &qword_1EF52CCD0);
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto4_CRDT);
      sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
      sub_1BE1B2360();
      return sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto4_CRDT);
    }
  }
  return result;
}

BOOL sub_1BDE462BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;

  v4 = type metadata accessor for Proto4_CRDT(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCD0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - v15;
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  if (v17 != *(_QWORD *)(a2 + 16))
    return 0;
  v26 = v7;
  v18 = a1 + OBJC_IVAR____TtCV9Coherence17Proto4_TaggedCRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v16, &qword_1EF52CCD0);
  v19 = a2 + OBJC_IVAR____TtCV9Coherence17Proto4_TaggedCRDTP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
  swift_beginAccess();
  v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1BDD86DEC((uint64_t)v16, (uint64_t)v10, &qword_1EF52CCD0);
  sub_1BDD86DEC(v19, v20, &qword_1EF52CCD0);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v16, &qword_1EF52CCD0);
    if (v21(v20, 1, v4) == 1)
    {
      sub_1BDD86E30((uint64_t)v10, &qword_1EF52CCD0);
      return 1;
    }
    goto LABEL_7;
  }
  sub_1BDD86DEC((uint64_t)v10, (uint64_t)v14, &qword_1EF52CCD0);
  if (v21(v20, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v16, &qword_1EF52CCD0);
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto4_CRDT);
LABEL_7:
    sub_1BDD86E30((uint64_t)v10, &qword_1EF52CCD8);
    return 0;
  }
  v23 = (uint64_t)v26;
  sub_1BDDA2E8C(v20, (uint64_t)v26, type metadata accessor for Proto4_CRDT);
  sub_1BDD8422C(&qword_1EF52C320, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8C7C);
  v24 = sub_1BE1B2798();
  sub_1BDD9C3E0(v23, type metadata accessor for Proto4_CRDT);
  sub_1BDD86E30((uint64_t)v16, &qword_1EF52CCD0);
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto4_CRDT);
  sub_1BDD86E30((uint64_t)v10, &qword_1EF52CCD0);
  return (v24 & 1) != 0;
}

uint64_t sub_1BDE465CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BE08, &qword_1EF52C680, a2);
}

unint64_t sub_1BDE465E8()
{
  return 0xD000000000000011;
}

uint64_t sub_1BDE46604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE45FF8(a1, a2, a3);
}

uint64_t sub_1BDE46618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_TaggedCRDT, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE460F8);
}

uint64_t sub_1BDE4663C()
{
  sub_1BDD8422C(&qword_1EF52CDA8, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B7984);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE4668C(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_TaggedCRDT, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE462BC) & 1;
}

uint64_t sub_1BDE466B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE00, (uint64_t)qword_1EF549238, a1);
}

uint64_t sub_1BDE466D0()
{
  sub_1BDD8422C(&qword_1EF52CAF0, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B79BC);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE46710()
{
  sub_1BDD8422C(&qword_1EF52CAF0, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B79BC);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE46760()
{
  sub_1BDD8422C(&qword_1EF52CDA8, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B7984);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE467B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549250);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549250);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "tag";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "wrapped";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE46908(uint64_t a1)
{
  return sub_1BDE4692C(a1, (void (*)(_QWORD))type metadata accessor for Proto4_TaggedValue._StorageClass, &OBJC_IVAR____TtCV9Coherence18Proto4_TaggedValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, type metadata accessor for Proto4_Value, &qword_1EF52C688);
}

uint64_t sub_1BDE4692C(uint64_t a1, void (*a2)(_QWORD), _QWORD *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  a2(0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  v9 = v8 + *a3;
  v10 = a4(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *a5 = v8;
  return result;
}

uint64_t sub_1BDE469A4(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v4 + 16) = 0;
  v12 = v4 + *a3;
  v13 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v4 + 16) = v14;
  v15 = a1 + *a3;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v11, a2);
  swift_release();
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v11, v12, a2);
  swift_endAccess();
  return v4;
}

uint64_t sub_1BDE46AE8()
{
  return sub_1BDD96A3C(&OBJC_IVAR____TtCV9Coherence18Proto4_TaggedValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, &qword_1EF52CE00);
}

uint64_t sub_1BDE46AFC()
{
  return type metadata accessor for Proto4_TaggedValue._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_TaggedValue._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C838);
}

void sub_1BDE46B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE46B38(a1, a2, a3, MEMORY[0x1E0DE9D38] + 64, &qword_1EF52C740, (void (*)(uint64_t))type metadata accessor for Proto4_Value);
}

void sub_1BDE46B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v6;

  sub_1BDD92F18(319, a5, a6);
  if (v6 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1BDE46BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(int *)(type metadata accessor for Proto4_TaggedValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto4_TaggedValue._StorageClass(0);
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v3 + v7) = sub_1BDE469A4(v8, &qword_1EF52CE00, &OBJC_IVAR____TtCV9Coherence18Proto4_TaggedValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, type metadata accessor for Proto4_Value);
    swift_release();
  }
  v9 = swift_retain();
  sub_1BDE46CB0(v9, a1, a2, a3, (uint64_t)&OBJC_IVAR____TtCV9Coherence18Proto4_TaggedValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped, type metadata accessor for Proto4_Value, &qword_1EF52CC98, (uint64_t)&unk_1BE1B8ED4);
  return swift_release();
}

uint64_t sub_1BDE46CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1BE1B2144();
  v14 = v8;
  if (!v8)
  {
    while (1)
    {
      if ((v13 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        swift_beginAccess();
        v15 = v14;
        sub_1BE1B21C8();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    a6(0);
    sub_1BDD8422C(a7, a6, a8);
    v15 = v14;
    sub_1BE1B2258();
LABEL_5:
    v14 = v15;
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1BDE46DEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Proto4_Value(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 16) || (result = sub_1BE1B2300(), !v1))
  {
    v11 = a1
        + OBJC_IVAR____TtCV9Coherence18Proto4_TaggedValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
    swift_beginAccess();
    sub_1BDD86DEC(v11, (uint64_t)v5, &qword_1EF52CE00);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      return sub_1BDD86E30((uint64_t)v5, &qword_1EF52CE00);
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v9, type metadata accessor for Proto4_Value);
      sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
      sub_1BE1B2360();
      return sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto4_Value);
    }
  }
  return result;
}

BOOL sub_1BDE46FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;

  v4 = type metadata accessor for Proto4_Value(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE10);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE00);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - v15;
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  if (v17 != *(_QWORD *)(a2 + 16))
    return 0;
  v26 = v7;
  v18 = a1 + OBJC_IVAR____TtCV9Coherence18Proto4_TaggedValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v16, &qword_1EF52CE00);
  v19 = a2 + OBJC_IVAR____TtCV9Coherence18Proto4_TaggedValueP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__wrapped;
  swift_beginAccess();
  v20 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1BDD86DEC((uint64_t)v16, (uint64_t)v10, &qword_1EF52CE00);
  sub_1BDD86DEC(v19, v20, &qword_1EF52CE00);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v16, &qword_1EF52CE00);
    if (v21(v20, 1, v4) == 1)
    {
      sub_1BDD86E30((uint64_t)v10, &qword_1EF52CE00);
      return 1;
    }
    goto LABEL_7;
  }
  sub_1BDD86DEC((uint64_t)v10, (uint64_t)v14, &qword_1EF52CE00);
  if (v21(v20, 1, v4) == 1)
  {
    sub_1BDD86E30((uint64_t)v16, &qword_1EF52CE00);
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto4_Value);
LABEL_7:
    sub_1BDD86E30((uint64_t)v10, &qword_1EF52CE10);
    return 0;
  }
  v23 = (uint64_t)v26;
  sub_1BDDA2E8C(v20, (uint64_t)v26, type metadata accessor for Proto4_Value);
  sub_1BDD8422C(&qword_1EF52C2F0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8DE4);
  v24 = sub_1BE1B2798();
  sub_1BDD9C3E0(v23, type metadata accessor for Proto4_Value);
  sub_1BDD86E30((uint64_t)v16, &qword_1EF52CE00);
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto4_Value);
  sub_1BDD86E30((uint64_t)v10, &qword_1EF52CE00);
  return (v24 & 1) != 0;
}

uint64_t sub_1BDE472C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BE18, &qword_1EF52C688, a2);
}

unint64_t sub_1BDE472DC()
{
  return 0xD000000000000012;
}

uint64_t sub_1BDE472F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE46BB0(a1, a2, a3);
}

uint64_t sub_1BDE4730C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_TaggedValue, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE46DEC);
}

uint64_t sub_1BDE47330()
{
  sub_1BDD8422C(&qword_1EF52CD30, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B781C);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE47380(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_TaggedValue, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE46FB0) & 1;
}

uint64_t sub_1BDE473A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE10, (uint64_t)qword_1EF549250, a1);
}

uint64_t sub_1BDE473C4()
{
  sub_1BDD8422C(&qword_1EF52CAD0, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B7854);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE47404()
{
  sub_1BDD8422C(&qword_1EF52CAD0, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B7854);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE47454()
{
  sub_1BDD8422C(&qword_1EF52CD30, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B781C);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE474AC(uint64_t a1)
{
  return sub_1BDE474C4(a1, qword_1EF549268, (uint64_t)"siblings", 8);
}

uint64_t sub_1BDE474C4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BE1B61B0;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x1E0D3EF08];
  v14 = sub_1BE1B236C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return sub_1BE1B2378();
}

uint64_t sub_1BDE475C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v11;

  while (1)
  {
    result = sub_1BE1B2144();
    if (v6 || (v11 & 1) != 0)
      break;
    if (result == 1)
    {
      a4(0);
      sub_1BDD8422C(a5, a4, a6);
      sub_1BE1B224C();
    }
    v6 = 0;
  }
  return result;
}

uint64_t sub_1BDE47690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v13)(_QWORD);

  if (!*(_QWORD *)(*(_QWORD *)v7 + 16)
    || (v13 = a7, a4(0), sub_1BDD8422C(a5, a4, a6), result = sub_1BE1B2354(), a7 = v13, !v8))
  {
    a7(0);
    return sub_1BE1B20D8();
  }
  return result;
}

uint64_t sub_1BDE47788(char *a1, uint64_t (*a2)(_QWORD, _QWORD), uint64_t (*a3)(_QWORD))
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v7 = sub_1BE1B20F0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  if ((a2(*v3, *(_QWORD *)a1) & 1) != 0)
  {
    v14 = a3(0);
    v15 = (char *)v3 + *(int *)(v14 + 20);
    v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v16(v13, v15, v7);
    v16(v11, &a1[*(int *)(v14 + 20)], v7);
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v17 = sub_1BE1B2798();
    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v11, v7);
    v18(v13, v7);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

unint64_t sub_1BDE478C4()
{
  return 0xD000000000000011;
}

uint64_t sub_1BDE478E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1BDE47920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_1BDE47960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE475C8(a1, a2, a3, type metadata accessor for Proto4_CustomCRDT.Sibling, &qword_1EF52CA90, (uint64_t)&unk_1BE1B7584);
}

uint64_t sub_1BDE4798C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE47690(a1, a2, a3, type metadata accessor for Proto4_CustomCRDT.Sibling, &qword_1EF52CA90, (uint64_t)&unk_1BE1B7584, (void (*)(_QWORD))type metadata accessor for Proto4_CustomCRDT);
}

uint64_t sub_1BDE479C0()
{
  sub_1BDD8422C(&qword_1EF52CDA0, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B76B4);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE47A10(char *a1)
{
  return sub_1BDE47788(a1, sub_1BDE00804, type metadata accessor for Proto4_CustomCRDT) & 1;
}

uint64_t sub_1BDE47A38@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE20, (uint64_t)qword_1EF549268, a1);
}

uint64_t sub_1BDE47A54()
{
  sub_1BDD8422C(&qword_1EF52CAB0, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B76EC);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE47A94()
{
  sub_1BDD8422C(&qword_1EF52CAB0, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B76EC);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE47AE4()
{
  sub_1BDD8422C(&qword_1EF52CDA0, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B76B4);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE47B3C()
{
  uint64_t result;

  result = sub_1BE1B284C();
  qword_1EF549280 = 0xD000000000000011;
  *(_QWORD *)algn_1EF549288 = 0x80000001BE1CE420;
  return result;
}

uint64_t sub_1BDE47BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549290);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549290);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "data";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE47CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  type metadata accessor for Proto4_CustomCRDT.Sibling._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v2 = type metadata accessor for Proto4_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data);
  result = sub_1BE1B20CC();
  *v3 = result;
  v3[1] = v5;
  qword_1EF52C690 = v0;
  return result;
}

uint64_t sub_1BDE47D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v7 = type metadata accessor for Proto4_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (uint64_t *)(v1
                 + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data);
  *v8 = sub_1BE1B20CC();
  v8[1] = v9;
  v10 = a1
      + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v10, (uint64_t)v5, &qword_1EF52CE20);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v6, &qword_1EF52CE20);
  swift_endAccess();
  v11 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data);
  swift_beginAccess();
  v13 = *v11;
  v12 = v11[1];
  sub_1BDDB6CA4(v13, v12);
  swift_release();
  swift_beginAccess();
  v14 = *v8;
  v15 = v8[1];
  *v8 = v13;
  v8[1] = v12;
  sub_1BDDB796C(v14, v15);
  return v1;
}

uint64_t sub_1BDE47EDC()
{
  uint64_t v0;

  sub_1BDD86E30(v0+ OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version, &qword_1EF52CE20);
  sub_1BDDB796C(*(_QWORD *)(v0+ OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data), *(_QWORD *)(v0+ OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data+ 8));
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE47F28()
{
  return type metadata accessor for Proto4_CustomCRDT.Sibling._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_CustomCRDT.Sibling._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C858);
}

void sub_1BDE47F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE47F60(a1, a2, a3, &qword_1EF52C768, (void (*)(uint64_t))type metadata accessor for Proto4_Version);
}

void sub_1BDE47F60(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;

  sub_1BDD92F18(319, a4, a5);
  if (v5 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1BDE47FD8()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 2)
        break;
      if (result == 1)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_Version(0);
        sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
        v4 = v3;
        sub_1BE1B2258();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    swift_beginAccess();
    v4 = v3;
    sub_1BE1B21A4();
LABEL_5:
    v3 = v4;
    swift_endAccess();
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1BDE48124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD v16[10];

  v16[9] = a4;
  v16[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto4_Version(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1
      + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v13, (uint64_t)v8, &qword_1EF52CE20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1EF52CE20);
    goto LABEL_4;
  }
  sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto4_Version);
  sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
  sub_1BE1B2360();
  result = sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto4_Version);
  if (!v4)
  {
LABEL_4:
    v15 = a1
        + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data;
    swift_beginAccess();
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1BDE48368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for Proto4_Version(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v33 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE28);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v11 = MEMORY[0x1E0C80A78](v10);
  v34 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v33 - v13;
  v15 = a1
      + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v14, &qword_1EF52CE20);
  v16 = a2;
  v17 = a2
      + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  v18 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1BDD86DEC((uint64_t)v14, (uint64_t)v9, &qword_1EF52CE20);
  sub_1BDD86DEC(v17, v18, &qword_1EF52CE20);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v19((uint64_t)v9, 1, v4) != 1)
  {
    v20 = a1;
    v21 = v34;
    sub_1BDD86DEC((uint64_t)v9, v34, &qword_1EF52CE20);
    if (v19(v18, 1, v4) != 1)
    {
      v22 = v33;
      sub_1BDDA2E8C(v18, v33, type metadata accessor for Proto4_Version);
      sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
      swift_retain();
      swift_retain();
      v23 = sub_1BE1B2798();
      sub_1BDD9C3E0(v22, type metadata accessor for Proto4_Version);
      sub_1BDD86E30((uint64_t)v14, &qword_1EF52CE20);
      sub_1BDD9C3E0(v21, type metadata accessor for Proto4_Version);
      sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE20);
      if ((v23 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      swift_release();
      swift_release();
      v31 = 0;
      return v31 & 1;
    }
    swift_retain();
    swift_retain();
    sub_1BDD86E30((uint64_t)v14, &qword_1EF52CE20);
    sub_1BDD9C3E0(v21, type metadata accessor for Proto4_Version);
LABEL_6:
    sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE28);
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  sub_1BDD86E30((uint64_t)v14, &qword_1EF52CE20);
  v20 = a1;
  if (v19(v18, 1, v4) != 1)
    goto LABEL_6;
  sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE20);
LABEL_8:
  v24 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data);
  swift_beginAccess();
  v25 = *v24;
  v26 = v24[1];
  v27 = (uint64_t *)(v16
                  + OBJC_IVAR____TtCVV9Coherence17Proto4_CustomCRDT7SiblingP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__data);
  swift_beginAccess();
  v28 = *v27;
  v29 = v27[1];
  sub_1BDDB6CA4(v25, v26);
  sub_1BDDB6CA4(v28, v29);
  sub_1BDDD6F30(v25, v26);
  v31 = v30;
  swift_release();
  swift_release();
  sub_1BDDB796C(v28, v29);
  sub_1BDDB796C(v25, v26);
  return v31 & 1;
}

uint64_t sub_1BDE48734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BE38, &qword_1EF52C690, a2);
}

uint64_t sub_1BDE48750(uint64_t a1, uint64_t a2)
{
  return sub_1BDE429D4(a1, a2, &qword_1EF52BE28, &qword_1EF549280);
}

uint64_t sub_1BDE48770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_CustomCRDT.Sibling, (void (*)(_QWORD))type metadata accessor for Proto4_CustomCRDT.Sibling._StorageClass, sub_1BDE47D70, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE47FD8);
}

uint64_t sub_1BDE487A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_CustomCRDT.Sibling, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE48124);
}

uint64_t sub_1BDE487C8()
{
  sub_1BDD8422C(&qword_1EF52CE50, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B754C);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE48818(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_CustomCRDT.Sibling, sub_1BDE48368) & 1;
}

uint64_t sub_1BDE48840@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE30, (uint64_t)qword_1EF549290, a1);
}

uint64_t sub_1BDE4885C()
{
  sub_1BDD8422C(&qword_1EF52CA90, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B7584);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE4889C()
{
  sub_1BDD8422C(&qword_1EF52CA90, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B7584);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE488EC()
{
  sub_1BDD8422C(&qword_1EF52CE50, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B754C);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE48944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5492A8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5492A8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6B50;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "string";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "element";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "subsequence";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "version";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "addedByVersion";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE48B48()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void (*v4)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for Proto4_Sequence._StorageClass(0);
  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = v1;
  v0[5] = v1;
  v2 = (char *)v0
     + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v3 = type metadata accessor for Proto4_Version(0);
  v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v4)((char *)v0+ OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedByVersion, 1, 1, v3);
  qword_1EF52C698 = (uint64_t)v0;
  return result;
}

_QWORD *sub_1BDE48BEC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = 0xE000000000000000;
  v6 = MEMORY[0x1E0DEE9D8];
  v1[4] = MEMORY[0x1E0DEE9D8];
  v1[5] = v6;
  v7 = (uint64_t)v1
     + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  v8 = type metadata accessor for Proto4_Version(0);
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(v7, 1, 1, v8);
  v19 = (char *)v1
      + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedByVersion;
  v9();
  swift_beginAccess();
  v10 = a1[2];
  v11 = a1[3];
  swift_beginAccess();
  v1[2] = v10;
  v1[3] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v12 = a1[4];
  swift_beginAccess();
  v1[4] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v13 = a1[5];
  swift_beginAccess();
  v1[5] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = (uint64_t)a1
      + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v14, (uint64_t)v5, &qword_1EF52CE20);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v7, &qword_1EF52CE20);
  swift_endAccess();
  v15 = (uint64_t)a1
      + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedByVersion;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v5, &qword_1EF52CE20);
  swift_release();
  v16 = (uint64_t)v19;
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v16, &qword_1EF52CE20);
  swift_endAccess();
  return v1;
}

uint64_t sub_1BDE48E8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version, &qword_1EF52CE20);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedByVersion, &qword_1EF52CE20);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE48EFC()
{
  return type metadata accessor for Proto4_Sequence._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Sequence._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C878);
}

void sub_1BDE48F18()
{
  unint64_t v0;

  sub_1BDD92F18(319, &qword_1EF52C768, (void (*)(uint64_t))type metadata accessor for Proto4_Version);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1BDE48FB0()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          v4 = v3;
          sub_1BE1B221C();
          goto LABEL_5;
        case 2:
          swift_beginAccess();
          type metadata accessor for Proto4_CRDT(0);
          sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
          goto LABEL_12;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto4_Subsequence(0);
          sub_1BDD8422C(&qword_1EF52CA58, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B72B4);
LABEL_12:
          v4 = v3;
          sub_1BE1B224C();
          goto LABEL_5;
        case 4:
        case 5:
          swift_beginAccess();
          type metadata accessor for Proto4_Version(0);
          sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
          v4 = v3;
          sub_1BE1B2258();
LABEL_5:
          v3 = v4;
          swift_endAccess();
          break;
        default:
          break;
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDE491D8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v9 = MEMORY[0x1E0C80A78](v8);
  v32 = (uint64_t)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v29 - v11;
  v13 = type metadata accessor for Proto4_Version(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v30 = (uint64_t)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v31 = (uint64_t)v29 - v17;
  swift_beginAccess();
  v18 = a1[3];
  v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0)
    v19 = a1[2] & 0xFFFFFFFFFFFFLL;
  if (!v19 || (swift_bridgeObjectRetain(), sub_1BE1B2330(), result = swift_bridgeObjectRelease(), !v4))
  {
    swift_beginAccess();
    if (!*(_QWORD *)(a1[4] + 16))
      goto LABEL_17;
    type metadata accessor for Proto4_CRDT(0);
    v33 = v4;
    sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
    swift_bridgeObjectRetain();
    v21 = v33;
    sub_1BE1B2354();
    v5 = v21;
    result = swift_bridgeObjectRelease();
    if (!v21)
    {
LABEL_17:
      swift_beginAccess();
      if (!*(_QWORD *)(a1[5] + 16))
        goto LABEL_9;
      type metadata accessor for Proto4_Subsequence(0);
      v33 = v5;
      sub_1BDD8422C(&qword_1EF52CA58, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B72B4);
      swift_bridgeObjectRetain();
      v22 = v33;
      sub_1BE1B2354();
      v5 = v22;
      result = swift_bridgeObjectRelease();
      if (!v22)
      {
LABEL_9:
        v29[1] = a4;
        v23 = (uint64_t)a1
            + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
        swift_beginAccess();
        sub_1BDD86DEC(v23, (uint64_t)v12, &qword_1EF52CE20);
        v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
        if (v24(v12, 1, v13) == 1)
        {
          sub_1BDD86E30((uint64_t)v12, &qword_1EF52CE20);
        }
        else
        {
          v25 = v31;
          sub_1BDDA2E8C((uint64_t)v12, v31, type metadata accessor for Proto4_Version);
          sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
          sub_1BE1B2360();
          result = sub_1BDD9C3E0(v25, type metadata accessor for Proto4_Version);
          if (v5)
            return result;
        }
        v26 = (uint64_t)a1
            + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedByVersion;
        swift_beginAccess();
        v27 = v32;
        sub_1BDD86DEC(v26, v32, &qword_1EF52CE20);
        if (v24((char *)v27, 1, v13) == 1)
        {
          return sub_1BDD86E30(v27, &qword_1EF52CE20);
        }
        else
        {
          v28 = v30;
          sub_1BDDA2E8C(v27, v30, type metadata accessor for Proto4_Version);
          sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
          sub_1BE1B2360();
          return sub_1BDD9C3E0(v28, type metadata accessor for Proto4_Version);
        }
      }
    }
  }
  return result;
}

BOOL sub_1BDE49640(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BOOL8 result;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v53 = type metadata accessor for Proto4_Version(0);
  v4 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v51 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE28);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v49 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE20);
  v13 = MEMORY[0x1E0C80A78](v12);
  v50 = (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v52 = (uint64_t)&v49 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v49 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v49 - v20;
  swift_beginAccess();
  v23 = a1[2];
  v22 = a1[3];
  swift_beginAccess();
  if (v23 == a2[2] && v22 == a2[3] || (v24 = sub_1BE1B34AC(), result = 0, (v24 & 1) != 0))
  {
    v49 = v9;
    swift_beginAccess();
    v26 = a1[4];
    swift_beginAccess();
    v27 = a2[4];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = sub_1BDE00820(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
      goto LABEL_12;
    swift_beginAccess();
    v29 = a1[5];
    swift_beginAccess();
    v30 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = sub_1BDE0083C(v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
      goto LABEL_12;
    v32 = (uint64_t)a1
        + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
    swift_beginAccess();
    sub_1BDD86DEC(v32, (uint64_t)v21, &qword_1EF52CE20);
    v33 = (uint64_t)a2
        + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__version;
    swift_beginAccess();
    v34 = (uint64_t)&v11[*(int *)(v6 + 48)];
    sub_1BDD86DEC((uint64_t)v21, (uint64_t)v11, &qword_1EF52CE20);
    sub_1BDD86DEC(v33, v34, &qword_1EF52CE20);
    v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    v36 = v53;
    if (v35((uint64_t)v11, 1, v53) == 1)
    {
      sub_1BDD86E30((uint64_t)v21, &qword_1EF52CE20);
      if (v35(v34, 1, v36) == 1)
      {
        sub_1BDD86E30((uint64_t)v11, &qword_1EF52CE20);
LABEL_16:
        v39 = (uint64_t)a1
            + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedByVersion;
        swift_beginAccess();
        v40 = v52;
        sub_1BDD86DEC(v39, v52, &qword_1EF52CE20);
        v41 = (uint64_t)a2
            + OBJC_IVAR____TtCV9Coherence15Proto4_SequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedByVersion;
        swift_beginAccess();
        v42 = *(int *)(v6 + 48);
        v43 = (uint64_t)v49;
        v44 = (uint64_t)&v49[v42];
        sub_1BDD86DEC(v40, (uint64_t)v49, &qword_1EF52CE20);
        sub_1BDD86DEC(v41, v44, &qword_1EF52CE20);
        if (v35(v43, 1, v36) == 1)
        {
          swift_release();
          swift_release();
          sub_1BDD86E30(v40, &qword_1EF52CE20);
          if (v35(v44, 1, v36) == 1)
          {
            sub_1BDD86E30((uint64_t)v49, &qword_1EF52CE20);
            return 1;
          }
        }
        else
        {
          v45 = v50;
          sub_1BDD86DEC(v43, v50, &qword_1EF52CE20);
          if (v35(v44, 1, v36) != 1)
          {
            v46 = v44;
            v47 = v51;
            sub_1BDDA2E8C(v46, v51, type metadata accessor for Proto4_Version);
            sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
            v48 = sub_1BE1B2798();
            swift_release();
            swift_release();
            sub_1BDD9C3E0(v47, type metadata accessor for Proto4_Version);
            sub_1BDD86E30(v40, &qword_1EF52CE20);
            sub_1BDD9C3E0(v45, type metadata accessor for Proto4_Version);
            sub_1BDD86E30(v43, &qword_1EF52CE20);
            return (v48 & 1) != 0;
          }
          swift_release();
          swift_release();
          sub_1BDD86E30(v40, &qword_1EF52CE20);
          sub_1BDD9C3E0(v45, type metadata accessor for Proto4_Version);
        }
        sub_1BDD86E30((uint64_t)v49, &qword_1EF52CE28);
        return 0;
      }
    }
    else
    {
      sub_1BDD86DEC((uint64_t)v11, (uint64_t)v19, &qword_1EF52CE20);
      if (v35(v34, 1, v36) != 1)
      {
        v37 = v51;
        sub_1BDDA2E8C(v34, v51, type metadata accessor for Proto4_Version);
        sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
        v38 = sub_1BE1B2798();
        sub_1BDD9C3E0(v37, type metadata accessor for Proto4_Version);
        sub_1BDD86E30((uint64_t)v21, &qword_1EF52CE20);
        sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto4_Version);
        sub_1BDD86E30((uint64_t)v11, &qword_1EF52CE20);
        if ((v38 & 1) != 0)
          goto LABEL_16;
LABEL_12:
        swift_release();
        swift_release();
        return 0;
      }
      sub_1BDD86E30((uint64_t)v21, &qword_1EF52CE20);
      sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto4_Version);
    }
    sub_1BDD86E30((uint64_t)v11, &qword_1EF52CE28);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1BDE49CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BE48, &qword_1EF52C698, a2);
}

uint64_t sub_1BDE49D10()
{
  return 0x532E346F746F7250;
}

uint64_t sub_1BDE49D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Sequence, (void (*)(_QWORD))type metadata accessor for Proto4_Sequence._StorageClass, (uint64_t (*)(uint64_t))sub_1BDE48BEC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE48FB0);
}

uint64_t sub_1BDE49D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Sequence, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE491D8);
}

uint64_t sub_1BDE49D8C()
{
  sub_1BDD8422C(&qword_1EF52CDB8, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B73E4);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE49DDC(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Sequence, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE49640) & 1;
}

uint64_t sub_1BDE49E04@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE40, (uint64_t)qword_1EF5492A8, a1);
}

uint64_t sub_1BDE49E20()
{
  sub_1BDD8422C(&qword_1EF52CA78, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B741C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE49E60()
{
  sub_1BDD8422C(&qword_1EF52CA78, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B741C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE49EB0()
{
  sub_1BDD8422C(&qword_1EF52CDB8, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B73E4);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE49F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5492C0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5492C0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6910;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "sequenceStartID";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "length";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "addedBy";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "child";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE4A0C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for Proto4_Subsequence._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__sequenceStartID;
  v2 = type metadata accessor for Proto4_IndexedTimestamp(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__length) = 0;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__child) = v4;
  qword_1EF52C6A0 = v0;
  return result;
}

uint64_t sub_1BDE4A15C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE60);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = v1
     + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__sequenceStartID;
  v7 = type metadata accessor for Proto4_IndexedTimestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_DWORD *)(v1
                + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__length);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__length) = 0;
  v9 = (_QWORD *)(v1
                + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy);
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy) = MEMORY[0x1E0DEE9D8];
  v11 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__child);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__child) = v10;
  v12 = a1
      + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v5, &qword_1EF52CE60);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v6, &qword_1EF52CE60);
  swift_endAccess();
  v13 = (_DWORD *)(a1
                 + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__length);
  swift_beginAccess();
  LODWORD(v13) = *v13;
  swift_beginAccess();
  *v8 = (_DWORD)v13;
  v14 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy);
  swift_beginAccess();
  v15 = *v14;
  swift_beginAccess();
  *v9 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__child);
  swift_beginAccess();
  v17 = *v16;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *v11 = v17;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1BDE4A37C()
{
  uint64_t v0;

  sub_1BDD86E30(v0+ OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__sequenceStartID, &qword_1EF52CE60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE4A3D4()
{
  return type metadata accessor for Proto4_Subsequence._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Subsequence._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C8A8);
}

void sub_1BDE4A3F0()
{
  unint64_t v0;

  sub_1BDD92F18(319, &qword_1EF52C8B8, (void (*)(uint64_t))type metadata accessor for Proto4_IndexedTimestamp);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for Proto4_IndexedTimestamp(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C8E0);
}

uint64_t sub_1BDE4A49C()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for Proto4_IndexedTimestamp(0);
          sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
          v4 = v3;
          sub_1BE1B2258();
          goto LABEL_5;
        case 2:
          swift_beginAccess();
          v4 = v3;
          sub_1BE1B2228();
          goto LABEL_5;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto4_IndexedTimestamp(0);
          sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
          v4 = v3;
          sub_1BE1B224C();
          goto LABEL_5;
        case 4:
          swift_beginAccess();
          v4 = v3;
          sub_1BE1B21E0();
LABEL_5:
          v3 = v4;
          swift_endAccess();
          break;
        default:
          break;
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDE4A6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[16];

  v19[15] = a4;
  v19[1] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE60);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto4_IndexedTimestamp(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1;
  v14 = a1
      + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1EF52CE60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1EF52CE60);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto4_IndexedTimestamp);
    sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
    sub_1BE1B2360();
    result = sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto4_IndexedTimestamp);
    if (v4)
      return result;
  }
  v16 = (_DWORD *)(v13
                 + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__length);
  swift_beginAccess();
  if (!*v16 || (result = sub_1BE1B233C(), !v4))
  {
    v17 = v13
        + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v17 + 16)
      || (sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934),
          swift_bridgeObjectRetain(),
          sub_1BE1B2354(),
          result = swift_bridgeObjectRelease(),
          !v4))
    {
      v18 = v13
          + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__child;
      result = swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)v18 + 16))
      {
        swift_bridgeObjectRetain();
        sub_1BE1B22AC();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

BOOL sub_1BDE4A968(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int *v23;
  int v24;
  _DWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v4 = type metadata accessor for Proto4_IndexedTimestamp(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE68);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE60);
  v11 = MEMORY[0x1E0C80A78](v10);
  v38 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v36 - v13;
  v15 = a1
      + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v14, &qword_1EF52CE60);
  v16 = a2
      + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  v17 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1BDD86DEC((uint64_t)v14, (uint64_t)v9, &qword_1EF52CE60);
  sub_1BDD86DEC(v16, v17, &qword_1EF52CE60);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v18((uint64_t)v9, 1, v4) != 1)
  {
    v20 = (uint64_t)v37;
    v19 = a2;
    v21 = v38;
    sub_1BDD86DEC((uint64_t)v9, v38, &qword_1EF52CE60);
    if (v18(v17, 1, v4) != 1)
    {
      sub_1BDDA2E8C(v17, v20, type metadata accessor for Proto4_IndexedTimestamp);
      sub_1BDD8422C(&qword_1EF52C328, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8844);
      swift_retain();
      swift_retain();
      v22 = sub_1BE1B2798();
      sub_1BDD9C3E0(v20, type metadata accessor for Proto4_IndexedTimestamp);
      sub_1BDD86E30((uint64_t)v14, &qword_1EF52CE60);
      sub_1BDD9C3E0(v21, type metadata accessor for Proto4_IndexedTimestamp);
      sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE60);
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_1BDD86E30((uint64_t)v14, &qword_1EF52CE60);
    sub_1BDD9C3E0(v21, type metadata accessor for Proto4_IndexedTimestamp);
LABEL_6:
    sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE68);
    goto LABEL_11;
  }
  swift_retain();
  swift_retain();
  sub_1BDD86E30((uint64_t)v14, &qword_1EF52CE60);
  v19 = a2;
  if (v18(v17, 1, v4) != 1)
    goto LABEL_6;
  sub_1BDD86E30((uint64_t)v9, &qword_1EF52CE60);
LABEL_8:
  v23 = (int *)(a1
              + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__length);
  swift_beginAccess();
  v24 = *v23;
  v25 = (_DWORD *)(v19
                 + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__length);
  swift_beginAccess();
  if (v24 != *v25)
    goto LABEL_11;
  v26 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy);
  swift_beginAccess();
  v27 = *v26;
  v28 = (uint64_t *)(v19
                  + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__addedBy);
  swift_beginAccess();
  v29 = *v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = sub_1BDE00858(v27, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
    goto LABEL_11;
  v31 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__child);
  swift_beginAccess();
  v32 = *v31;
  v33 = (uint64_t *)(v19
                  + OBJC_IVAR____TtCV9Coherence18Proto4_SubsequenceP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__child);
  swift_beginAccess();
  v34 = sub_1BDE00874(v32, *v33);
  swift_release();
  swift_release();
  return v34;
}

uint64_t sub_1BDE4ADCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BE58, &qword_1EF52C6A0, a2);
}

unint64_t sub_1BDE4ADE8()
{
  return 0xD000000000000012;
}

uint64_t sub_1BDE4AE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Subsequence, (void (*)(_QWORD))type metadata accessor for Proto4_Subsequence._StorageClass, sub_1BDE4A15C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE4A49C);
}

uint64_t sub_1BDE4AE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Subsequence, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE4A6AC);
}

uint64_t sub_1BDE4AE5C()
{
  sub_1BDD8422C(&qword_1EF52CE58, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B727C);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE4AEAC(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Subsequence, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE4A968) & 1;
}

uint64_t sub_1BDE4AED4@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE50, (uint64_t)qword_1EF5492C0, a1);
}

uint64_t sub_1BDE4AEF0()
{
  sub_1BDD8422C(&qword_1EF52CA58, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B72B4);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE4AF30()
{
  sub_1BDD8422C(&qword_1EF52CA58, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B72B4);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE4AF80()
{
  sub_1BDD8422C(&qword_1EF52CE58, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B727C);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE4AFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5492D8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5492D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B6B40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "replicaUUID";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "range";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "affinity";
  *(_QWORD *)(v12 + 8) = 8;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE4B16C()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for Proto4_Selection.Range(0);
        sub_1BDD8422C(&qword_1EF52CA20, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6FBC);
        v4 = v3;
        sub_1BE1B224C();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        sub_1BE1B2180();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_1BE1B2144();
    }
    sub_1BDE515B0();
    v4 = v3;
    sub_1BE1B2174();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1BDE4B29C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16) || (result = sub_1BE1B22DC(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for Proto4_Selection.Range(0),
          sub_1BDD8422C(&qword_1EF52CA20, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6FBC),
          result = sub_1BE1B2354(),
          !v1))
    {
      if (!v0[2] || (sub_1BDE515B0(), result = sub_1BE1B22D0(), !v1))
      {
        type metadata accessor for Proto4_Selection(0);
        return sub_1BE1B20D8();
      }
    }
  }
  return result;
}

uint64_t sub_1BDE4B3E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;

  v3 = sub_1BE1B20F0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  if ((sub_1BDDFF364(*(_QWORD *)v1, *(_QWORD *)a1) & 1) == 0
    || (sub_1BDE008E8(*(_QWORD *)(v1 + 8), *(_QWORD *)(a1 + 8)) & 1) == 0)
  {
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v1 + 24))
    v10 = v10 != 0;
  if (*(_BYTE *)(a1 + 24) != 1)
  {
    if (v10 != v11)
      goto LABEL_8;
LABEL_11:
    v14 = type metadata accessor for Proto4_Selection(0);
    v15 = v1 + *(int *)(v14 + 28);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v16(v9, v15, v3);
    v16(v7, a1 + *(int *)(v14 + 28), v3);
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v12 = sub_1BE1B2798();
    v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v7, v3);
    v17(v9, v3);
    return v12 & 1;
  }
  if (!v11)
  {
    if (v10)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v10 == 1)
    goto LABEL_11;
LABEL_8:
  v12 = 0;
  return v12 & 1;
}

uint64_t sub_1BDE4B570@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return sub_1BE1B20E4();
}

unint64_t sub_1BDE4B5A4()
{
  return 0xD000000000000010;
}

uint64_t sub_1BDE4B5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1BDE4B600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_1BDE4B640())()
{
  return nullsub_1;
}

uint64_t sub_1BDE4B654()
{
  return sub_1BDE4B16C();
}

uint64_t sub_1BDE4B668()
{
  return sub_1BDE4B29C();
}

uint64_t sub_1BDE4B67C()
{
  sub_1BDD8422C(&qword_1EF52CE70, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B7114);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE4B6D0@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE60, (uint64_t)qword_1EF5492D8, a1);
}

uint64_t sub_1BDE4B6EC()
{
  sub_1BDD8422C(&qword_1EF52CA40, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B714C);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE4B72C()
{
  sub_1BDD8422C(&qword_1EF52CA40, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B714C);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE4B77C()
{
  sub_1BDD8422C(&qword_1EF52CE70, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B7114);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE4B7D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF5492F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF5492F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Backward";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Forward";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE4B924@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE68, (uint64_t)qword_1EF5492F0, a1);
}

uint64_t sub_1BDE4B940()
{
  uint64_t result;

  result = sub_1BE1B284C();
  qword_1EF549308 = 0xD000000000000010;
  unk_1EF549310 = 0x80000001BE1CE480;
  return result;
}

uint64_t sub_1BDE4B9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_1BE1B2390();
  __swift_allocate_value_buffer(v0, qword_1EF549318);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549318);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CCE8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BE1B61C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "fromChar";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x1E0D3EF08];
  v9 = sub_1BE1B236C();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "toChar";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  return sub_1BE1B2378();
}

uint64_t sub_1BDE4BAF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for Proto4_Selection.Range._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0
     + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__fromChar;
  v2 = type metadata accessor for Proto4_IndexedTimestamp(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar, 1, 1, v2);
  qword_1EF52C6A8 = v0;
  return result;
}

uint64_t sub_1BDE4BB84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE60);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1
     + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__fromChar;
  v7 = type metadata accessor for Proto4_IndexedTimestamp(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v9 = v1
     + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar;
  v8(v1 + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar, 1, 1, v7);
  v10 = a1
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__fromChar;
  swift_beginAccess();
  sub_1BDD86DEC(v10, (uint64_t)v5, &qword_1EF52CE60);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v6, &qword_1EF52CE60);
  swift_endAccess();
  v11 = a1
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar;
  swift_beginAccess();
  sub_1BDD86DEC(v11, (uint64_t)v5, &qword_1EF52CE60);
  swift_release();
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v5, v9, &qword_1EF52CE60);
  swift_endAccess();
  return v1;
}

uint64_t sub_1BDE4BD14()
{
  uint64_t v0;

  sub_1BDD86E30(v0+ OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__fromChar, &qword_1EF52CE60);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar, &qword_1EF52CE60);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE4BD6C()
{
  return type metadata accessor for Proto4_Selection.Range._StorageClass(0);
}

uint64_t type metadata accessor for Proto4_Selection.Range._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C8D0);
}

void sub_1BDE4BD88()
{
  unint64_t v0;

  sub_1BDD92F18(319, &qword_1EF52C8B8, (void (*)(uint64_t))type metadata accessor for Proto4_IndexedTimestamp);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t *sub_1BDE4BE04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_1BE1B20F0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_QWORD *sub_1BDE4BE8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1BDE4BEF0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1BDE4BF4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1BDE4BFA8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4BFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1BDE4BFF4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1BDE4C050()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C060()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Proto4_Subsequence(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C8F0);
}

uint64_t sub_1BDE4C094()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C0A4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C0B4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C0C4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Proto4_Set(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C910);
}

uint64_t sub_1BDE4C0E8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C0F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Proto4_Set.Element(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C920);
}

uint64_t sub_1BDE4C11C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C12C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_1BDE4C13C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_1BDDB6CA4(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1BE1B20F0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1BDE4C1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1BDE4C234(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_1BDDB6CA4(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_1BDE4C2B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_1BDDB6CA4(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1BDDB796C(v8, v9);
  a1[2] = a2[2];
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t *sub_1BDE4C340(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1BDDB796C(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BE1B20F0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1BDE4C3B8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4C3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_1BE1B20F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1BDE4C44C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BDE4C458(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_1BE1B20F0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BDE4C4D4()
{
  return sub_1BDD8747C();
}

uint64_t sub_1BDE4C4EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1BDE4C544 + 4 * byte_1BE1B6BB3[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t type metadata accessor for Proto4_Register(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C9B0);
}

uint64_t type metadata accessor for Proto4_Struct(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C9A0);
}

uint64_t type metadata accessor for Proto4_Sequence(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C990);
}

uint64_t type metadata accessor for Proto4_Counter(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C980);
}

uint64_t type metadata accessor for Proto4_TaggedCRDT(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C970);
}

uint64_t type metadata accessor for Proto4_CustomCRDT(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C960);
}

uint64_t sub_1BDE4C8A0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v5 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for Proto4_Register(0);
      goto LABEL_8;
    case 1:
    case 2:
      v3 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for Proto4_Set(0);
      goto LABEL_8;
    case 3:
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for Proto4_Struct(0);
      goto LABEL_10;
    case 4:
    case 5:
      v4 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for Proto4_Sequence(0);
      goto LABEL_8;
    case 6:
      v7 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      type metadata accessor for Proto4_Counter(0);
      goto LABEL_8;
    case 7:
      v8 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
      type metadata accessor for Proto4_TaggedCRDT(0);
LABEL_8:
      result = swift_release();
      break;
    case 8:
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for Proto4_CustomCRDT(0);
LABEL_10:
      v9 = a1 + *(int *)(v6 + 20);
      v10 = sub_1BE1B20F0();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1BDE4CA0C()
{
  char *v0;

  v0 = (char *)sub_1BDE4CA58 + 4 * byte_1BE1B6BC5[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BDE4CA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  v3 = type metadata accessor for Proto4_Register(0);
  *(_QWORD *)(v0 + *(int *)(v3 + 20)) = *(_QWORD *)(v1 + *(int *)(v3 + 20));
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_1BDE4CD1C(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1BDD9C3E0(result, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
    v2 = (char *)&loc_1BDE4CD80 + 4 * byte_1BE1B6BCE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void sub_1BDE4D044()
{
  char *v0;

  v0 = (char *)sub_1BDE4D088 + 4 * byte_1BE1B6BD7[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BDE4D088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
  v3 = type metadata accessor for Proto4_Register(0);
  *(_QWORD *)(v0 + *(int *)(v3 + 20)) = *(_QWORD *)(v1 + *(int *)(v3 + 20));
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_1BDE4D310(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1BDD9C3E0(result, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
    v2 = (char *)&loc_1BDE4D36C + 4 * byte_1BE1B6BE0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1BDE4D5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1BDE4D600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1BDE4D610()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1BDE4D620()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = type metadata accessor for Proto4_Register(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Proto4_Set(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Proto4_Struct(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Proto4_Sequence(319);
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for Proto4_Counter(319);
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for Proto4_TaggedCRDT(319);
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for Proto4_CustomCRDT(319);
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BDE4D72C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4D73C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4D74C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4D75C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4D76C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4D77C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4D78C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4D79C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_1BDE4D7AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1BE1B20F0();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

_QWORD *sub_1BDE4D844(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *sub_1BDE4D8B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1BDE4D914(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1BDE4D980()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BE1B20F0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1BDE4DA0C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_4Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1BE1B20F0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BDE4DA90()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4DAA0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4DAB0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4DAC0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_1BDE4DAD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v11 = *a2;
        v10 = a2[1];
        sub_1BDDB6CA4(v11, v10);
        *a1 = v11;
        a1[1] = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v12 = sub_1BE1B20C0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v13 = sub_1BE1B20F0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = type metadata accessor for Proto4_Reference(0);
        *(uint64_t *)((char *)a1 + *(int *)(v14 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v14 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        v15 = sub_1BE1B20F0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v16 = type metadata accessor for Proto4_Optional(0);
        *(uint64_t *)((char *)a1 + *(int *)(v16 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v16 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        v17 = sub_1BE1B20F0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
        v18 = type metadata accessor for Proto4_TaggedValue(0);
        *(uint64_t *)((char *)a1 + *(int *)(v18 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v18 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t type metadata accessor for Proto4_Reference(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52CA00);
}

uint64_t type metadata accessor for Proto4_Optional(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C9F0);
}

uint64_t type metadata accessor for Proto4_TaggedValue(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52C9E0);
}

uint64_t sub_1BDE4DD08(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 2:
      return swift_bridgeObjectRelease();
    case 3:
      return sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    case 4:
      v3 = sub_1BE1B20C0();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 5:
      v4 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for Proto4_Reference(0);
      goto LABEL_8;
    case 6:
      v5 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for Proto4_Optional(0);
      goto LABEL_8;
    case 7:
      v6 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      type metadata accessor for Proto4_TaggedValue(0);
LABEL_8:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1BDE4DE18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      v8 = *a2;
      v7 = a2[1];
      sub_1BDDB6CA4(v8, v7);
      *a1 = v8;
      a1[1] = v7;
      goto LABEL_9;
    case 4u:
      v9 = sub_1BE1B20C0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      goto LABEL_9;
    case 5u:
      v10 = sub_1BE1B20F0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = type metadata accessor for Proto4_Reference(0);
      *(uint64_t *)((char *)a1 + *(int *)(v11 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 20));
      swift_retain();
      goto LABEL_9;
    case 6u:
      v12 = sub_1BE1B20F0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = type metadata accessor for Proto4_Optional(0);
      *(uint64_t *)((char *)a1 + *(int *)(v13 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v13 + 20));
      swift_retain();
      goto LABEL_9;
    case 7u:
      v14 = sub_1BE1B20F0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v15 = type metadata accessor for Proto4_TaggedValue(0);
      *(uint64_t *)((char *)a1 + *(int *)(v15 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v15 + 20));
      swift_retain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_1BDE4DFD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v7 = *a2;
        v6 = a2[1];
        sub_1BDDB6CA4(v7, v6);
        *a1 = v7;
        a1[1] = v6;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v8 = sub_1BE1B20C0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v9 = sub_1BE1B20F0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v10 = type metadata accessor for Proto4_Reference(0);
        *(uint64_t *)((char *)a1 + *(int *)(v10 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v10 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        v11 = sub_1BE1B20F0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        v12 = type metadata accessor for Proto4_Optional(0);
        *(uint64_t *)((char *)a1 + *(int *)(v12 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v12 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        v13 = sub_1BE1B20F0();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = type metadata accessor for Proto4_TaggedValue(0);
        *(uint64_t *)((char *)a1 + *(int *)(v14 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v14 + 20));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_1BDE4E1CC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 4u:
      v6 = sub_1BE1B20C0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      goto LABEL_7;
    case 5u:
      v7 = sub_1BE1B20F0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = type metadata accessor for Proto4_Reference(0);
      *(_QWORD *)&a1[*(int *)(v8 + 20)] = *(_QWORD *)&a2[*(int *)(v8 + 20)];
      goto LABEL_7;
    case 6u:
      v9 = sub_1BE1B20F0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = type metadata accessor for Proto4_Optional(0);
      *(_QWORD *)&a1[*(int *)(v10 + 20)] = *(_QWORD *)&a2[*(int *)(v10 + 20)];
      goto LABEL_7;
    case 7u:
      v11 = sub_1BE1B20F0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = type metadata accessor for Proto4_TaggedValue(0);
      *(_QWORD *)&a1[*(int *)(v12 + 20)] = *(_QWORD *)&a2[*(int *)(v12 + 20)];
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_1BDE4E340(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 4u:
        v6 = sub_1BE1B20C0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        goto LABEL_8;
      case 5u:
        v7 = sub_1BE1B20F0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = type metadata accessor for Proto4_Reference(0);
        *(_QWORD *)&a1[*(int *)(v8 + 20)] = *(_QWORD *)&a2[*(int *)(v8 + 20)];
        goto LABEL_8;
      case 6u:
        v9 = sub_1BE1B20F0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        v10 = type metadata accessor for Proto4_Optional(0);
        *(_QWORD *)&a1[*(int *)(v10 + 20)] = *(_QWORD *)&a2[*(int *)(v10 + 20)];
        goto LABEL_8;
      case 7u:
        v11 = sub_1BE1B20F0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = type metadata accessor for Proto4_TaggedValue(0);
        *(_QWORD *)&a1[*(int *)(v12 + 20)] = *(_QWORD *)&a2[*(int *)(v12 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1BDE4E4CC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = sub_1BE1B20C0();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Proto4_Reference(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Proto4_Optional(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Proto4_TaggedValue(319);
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BDE4E5A8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E5B8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E5C8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E5D8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E5E8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E5F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E608()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E618()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE4E628()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        swift_beginAccess();
        type metadata accessor for Proto4_IndexedTimestamp(0);
        sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
        sub_1BE1B2258();
        swift_endAccess();
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDE4E788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a4;
  v28 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE60);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v26 - v11;
  v13 = type metadata accessor for Proto4_IndexedTimestamp(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v26[0] = (uint64_t)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v26 - v17;
  v27 = a1;
  v19 = a1
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__fromChar;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v12, &qword_1EF52CE60);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v21 = v20(v12, 1, v13);
  v26[1] = a2;
  if (v21 == 1)
  {
    sub_1BDD86E30((uint64_t)v12, &qword_1EF52CE60);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v18, type metadata accessor for Proto4_IndexedTimestamp);
    sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
    sub_1BE1B2360();
    result = sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto4_IndexedTimestamp);
    if (v4)
      return result;
  }
  v23 = v27
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v10, &qword_1EF52CE60);
  if (v20(v10, 1, v13) == 1)
    return sub_1BDD86E30((uint64_t)v10, &qword_1EF52CE60);
  v24 = (uint64_t)v10;
  v25 = v26[0];
  sub_1BDDA2E8C(v24, v26[0], type metadata accessor for Proto4_IndexedTimestamp);
  sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
  sub_1BE1B2360();
  return sub_1BDD9C3E0(v25, type metadata accessor for Proto4_IndexedTimestamp);
}

BOOL sub_1BDE4EA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for Proto4_IndexedTimestamp(0);
  v50 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v45 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE68);
  v7 = MEMORY[0x1E0C80A78](v6);
  v48 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v44 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CE60);
  v12 = MEMORY[0x1E0C80A78](v11);
  v44 = (uint64_t)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v47 = (uint64_t)&v44 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v49 = (uint64_t)&v44 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v44 - v18;
  v20 = a1;
  v21 = a1
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__fromChar;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v19, &qword_1EF52CE60);
  v22 = a2;
  v23 = a2
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__fromChar;
  swift_beginAccess();
  v46 = v6;
  v24 = *(int *)(v6 + 48);
  v25 = v4;
  v26 = (uint64_t)&v10[v24];
  sub_1BDD86DEC((uint64_t)v19, (uint64_t)v10, &qword_1EF52CE60);
  sub_1BDD86DEC(v23, v26, &qword_1EF52CE60);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v27((uint64_t)v10, 1, v4) != 1)
  {
    v29 = v22;
    sub_1BDD86DEC((uint64_t)v10, v49, &qword_1EF52CE60);
    if (v27(v26, 1, v25) != 1)
    {
      v30 = v45;
      sub_1BDDA2E8C(v26, v45, type metadata accessor for Proto4_IndexedTimestamp);
      sub_1BDD8422C(&qword_1EF52C328, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8844);
      v31 = v20;
      swift_retain();
      swift_retain();
      v32 = v49;
      v33 = sub_1BE1B2798();
      sub_1BDD9C3E0(v30, type metadata accessor for Proto4_IndexedTimestamp);
      sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE60);
      v34 = v32;
      v20 = v31;
      sub_1BDD9C3E0(v34, type metadata accessor for Proto4_IndexedTimestamp);
      v28 = v29;
      sub_1BDD86E30((uint64_t)v10, &qword_1EF52CE60);
      if ((v33 & 1) != 0)
        goto LABEL_9;
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE60);
    sub_1BDD9C3E0(v49, type metadata accessor for Proto4_IndexedTimestamp);
LABEL_6:
    sub_1BDD86E30((uint64_t)v10, &qword_1EF52CE68);
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  sub_1BDD86E30((uint64_t)v19, &qword_1EF52CE60);
  v28 = v22;
  if (v27(v26, 1, v4) != 1)
    goto LABEL_6;
  sub_1BDD86E30((uint64_t)v10, &qword_1EF52CE60);
LABEL_9:
  v35 = v20
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar;
  swift_beginAccess();
  v36 = v47;
  sub_1BDD86DEC(v35, v47, &qword_1EF52CE60);
  v37 = v28
      + OBJC_IVAR____TtCVV9Coherence16Proto4_Selection5RangeP33_4A59E951A5EB9D63730C3E01A1047EAB13_StorageClass__toChar;
  swift_beginAccess();
  v38 = v48;
  v39 = v48 + *(int *)(v46 + 48);
  sub_1BDD86DEC(v36, v48, &qword_1EF52CE60);
  sub_1BDD86DEC(v37, v39, &qword_1EF52CE60);
  if (v27(v38, 1, v25) == 1)
  {
    swift_release();
    swift_release();
    sub_1BDD86E30(v36, &qword_1EF52CE60);
    if (v27(v39, 1, v25) == 1)
    {
      sub_1BDD86E30(v38, &qword_1EF52CE60);
      return 1;
    }
    goto LABEL_14;
  }
  v40 = v44;
  sub_1BDD86DEC(v38, v44, &qword_1EF52CE60);
  if (v27(v39, 1, v25) == 1)
  {
    swift_release();
    swift_release();
    sub_1BDD86E30(v36, &qword_1EF52CE60);
    sub_1BDD9C3E0(v40, type metadata accessor for Proto4_IndexedTimestamp);
LABEL_14:
    sub_1BDD86E30(v38, &qword_1EF52CE68);
    return 0;
  }
  v42 = v45;
  sub_1BDDA2E8C(v39, v45, type metadata accessor for Proto4_IndexedTimestamp);
  sub_1BDD8422C(&qword_1EF52C328, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8844);
  v43 = sub_1BE1B2798();
  swift_release();
  swift_release();
  sub_1BDD9C3E0(v42, type metadata accessor for Proto4_IndexedTimestamp);
  sub_1BDD86E30(v36, &qword_1EF52CE60);
  sub_1BDD9C3E0(v40, type metadata accessor for Proto4_IndexedTimestamp);
  sub_1BDD86E30(v38, &qword_1EF52CE60);
  return (v43 & 1) != 0;
}

uint64_t sub_1BDE4EFE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1EF52BE80, &qword_1EF52C6A8, a2);
}

uint64_t sub_1BDE4F004(uint64_t a1, uint64_t a2)
{
  return sub_1BDE429D4(a1, a2, &qword_1EF52BE70, &qword_1EF549308);
}

uint64_t sub_1BDE4F024@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1BDE4F05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_1BDE4F094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto4_Selection.Range, (void (*)(_QWORD))type metadata accessor for Proto4_Selection.Range._StorageClass, sub_1BDE4BB84, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE4E628);
}

uint64_t sub_1BDE4F0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto4_Selection.Range, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDE4E788);
}

uint64_t sub_1BDE4F0EC()
{
  sub_1BDD8422C(&qword_1EF52CE80, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6F84);
  return sub_1BE1B212C();
}

uint64_t sub_1BDE4F13C(uint64_t a1)
{
  return sub_1BDE38BE4(a1, type metadata accessor for Proto4_Selection.Range, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE4EA40) & 1;
}

uint64_t sub_1BDE4F164@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDE39114(&qword_1EF52BE78, (uint64_t)qword_1EF549318, a1);
}

uint64_t sub_1BDE4F180()
{
  sub_1BDD8422C(&qword_1EF52CA20, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6FBC);
  return sub_1BE1B2288();
}

uint64_t sub_1BDE4F1C0()
{
  sub_1BE1B36F8();
  sub_1BE1B26E4();
  return sub_1BE1B371C();
}

uint64_t sub_1BDE4F214()
{
  sub_1BDD8422C(&qword_1EF52CA20, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6FBC);
  return sub_1BE1B2294();
}

uint64_t sub_1BDE4F264()
{
  sub_1BE1B36F8();
  sub_1BE1B26E4();
  return sub_1BE1B371C();
}

uint64_t sub_1BDE4F2B4()
{
  sub_1BDD8422C(&qword_1EF52CE80, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6F84);
  return sub_1BE1B2120();
}

uint64_t sub_1BDE4F30C()
{
  return sub_1BDD8422C(&qword_1EF52C330, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6ECC);
}

uint64_t type metadata accessor for Proto4_Selection.Range(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52CEB8);
}

uint64_t sub_1BDE4F34C()
{
  return sub_1BDD8422C(&qword_1EF52CA20, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6FBC);
}

uint64_t sub_1BDE4F378()
{
  return sub_1BDD8422C(&qword_1EF52CA28, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6EF4);
}

uint64_t sub_1BDE4F3A4()
{
  return sub_1BDD8422C(&qword_1EF52CA30, type metadata accessor for Proto4_Selection.Range, (uint64_t)&unk_1BE1B6F34);
}

uint64_t sub_1BDE4F3D0()
{
  return sub_1BDD8422C(&qword_1EF52CA38, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B705C);
}

uint64_t type metadata accessor for Proto4_Selection(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52CEA8);
}

uint64_t sub_1BDE4F410()
{
  return sub_1BDD8422C(&qword_1EF52CA40, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B714C);
}

uint64_t sub_1BDE4F43C()
{
  return sub_1BDD8422C(&qword_1EF52CA48, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B7084);
}

uint64_t sub_1BDE4F468()
{
  return sub_1BDD8422C(&qword_1EF52CA50, type metadata accessor for Proto4_Selection, (uint64_t)&unk_1BE1B70C4);
}

uint64_t sub_1BDE4F494()
{
  return sub_1BDD8422C(&qword_1EF52C318, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B71C4);
}

uint64_t sub_1BDE4F4C0()
{
  return sub_1BDD8422C(&qword_1EF52CA58, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B72B4);
}

uint64_t sub_1BDE4F4EC()
{
  return sub_1BDD8422C(&qword_1EF52CA60, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B71EC);
}

uint64_t sub_1BDE4F518()
{
  return sub_1BDD8422C(&qword_1EF52CA68, type metadata accessor for Proto4_Subsequence, (uint64_t)&unk_1BE1B722C);
}

uint64_t sub_1BDE4F544()
{
  return sub_1BDD8422C(&qword_1EF52CA70, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B732C);
}

uint64_t sub_1BDE4F570()
{
  return sub_1BDD8422C(&qword_1EF52CA78, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B741C);
}

uint64_t sub_1BDE4F59C()
{
  return sub_1BDD8422C(&qword_1EF52CA80, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B7354);
}

uint64_t sub_1BDE4F5C8()
{
  return sub_1BDD8422C(&qword_1EF52CA88, type metadata accessor for Proto4_Sequence, (uint64_t)&unk_1BE1B7394);
}

uint64_t sub_1BDE4F5F4()
{
  return sub_1BDD8422C(&qword_1EF52C310, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B7494);
}

uint64_t type metadata accessor for Proto4_CustomCRDT.Sibling(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52CE98);
}

uint64_t sub_1BDE4F634()
{
  return sub_1BDD8422C(&qword_1EF52CA90, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B7584);
}

uint64_t sub_1BDE4F660()
{
  return sub_1BDD8422C(&qword_1EF52CA98, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B74BC);
}

uint64_t sub_1BDE4F68C()
{
  return sub_1BDD8422C(&qword_1EF52CAA0, type metadata accessor for Proto4_CustomCRDT.Sibling, (uint64_t)&unk_1BE1B74FC);
}

uint64_t sub_1BDE4F6B8()
{
  return sub_1BDD8422C(&qword_1EF52CAA8, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B75FC);
}

uint64_t sub_1BDE4F6E4()
{
  return sub_1BDD8422C(&qword_1EF52CAB0, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B76EC);
}

uint64_t sub_1BDE4F710()
{
  return sub_1BDD8422C(&qword_1EF52CAB8, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B7624);
}

uint64_t sub_1BDE4F73C()
{
  return sub_1BDD8422C(&qword_1EF52CAC0, type metadata accessor for Proto4_CustomCRDT, (uint64_t)&unk_1BE1B7664);
}

uint64_t sub_1BDE4F768()
{
  return sub_1BDD8422C(&qword_1EF52CAC8, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B7764);
}

uint64_t sub_1BDE4F794()
{
  return sub_1BDD8422C(&qword_1EF52CAD0, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B7854);
}

uint64_t sub_1BDE4F7C0()
{
  return sub_1BDD8422C(&qword_1EF52CAD8, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B778C);
}

uint64_t sub_1BDE4F7EC()
{
  return sub_1BDD8422C(&qword_1EF52CAE0, type metadata accessor for Proto4_TaggedValue, (uint64_t)&unk_1BE1B77CC);
}

uint64_t sub_1BDE4F818()
{
  return sub_1BDD8422C(&qword_1EF52CAE8, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B78CC);
}

uint64_t sub_1BDE4F844()
{
  return sub_1BDD8422C(&qword_1EF52CAF0, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B79BC);
}

uint64_t sub_1BDE4F870()
{
  return sub_1BDD8422C(&qword_1EF52CAF8, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B78F4);
}

uint64_t sub_1BDE4F89C()
{
  return sub_1BDD8422C(&qword_1EF52CB00, type metadata accessor for Proto4_TaggedCRDT, (uint64_t)&unk_1BE1B7934);
}

uint64_t sub_1BDE4F8C8()
{
  return sub_1BDD8422C(&qword_1EF52CB08, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7A34);
}

uint64_t sub_1BDE4F8F4()
{
  return sub_1BDD8422C(&qword_1EF52CB10, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7B24);
}

uint64_t sub_1BDE4F920()
{
  return sub_1BDD8422C(&qword_1EF52CB18, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7A5C);
}

uint64_t sub_1BDE4F94C()
{
  return sub_1BDD8422C(&qword_1EF52CB20, type metadata accessor for Proto4_Optional, (uint64_t)&unk_1BE1B7A9C);
}

uint64_t sub_1BDE4F978()
{
  return sub_1BDD8422C(&qword_1EF52C2E8, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7B9C);
}

uint64_t sub_1BDE4F9A4()
{
  return sub_1BDD8422C(&qword_1EF52CB28, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C8C);
}

uint64_t sub_1BDE4F9D0()
{
  return sub_1BDD8422C(&qword_1EF52CB30, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7BC4);
}

uint64_t sub_1BDE4F9FC()
{
  return sub_1BDD8422C(&qword_1EF52CB38, type metadata accessor for Proto4_Reference, (uint64_t)&unk_1BE1B7C04);
}

uint64_t sub_1BDE4FA28()
{
  return sub_1BDD8422C(&qword_1EF52C308, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7D04);
}

uint64_t type metadata accessor for Proto4_Struct.Field(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52CE88);
}

uint64_t sub_1BDE4FA68()
{
  return sub_1BDD8422C(&qword_1EF52CB40, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7DF4);
}

uint64_t sub_1BDE4FA94()
{
  return sub_1BDD8422C(&qword_1EF52CB48, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7D2C);
}

uint64_t sub_1BDE4FAC0()
{
  return sub_1BDD8422C(&qword_1EF52CB50, type metadata accessor for Proto4_Struct.Field, (uint64_t)&unk_1BE1B7D6C);
}

uint64_t sub_1BDE4FAEC()
{
  return sub_1BDD8422C(&qword_1EF52CB58, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7E6C);
}

uint64_t sub_1BDE4FB18()
{
  return sub_1BDD8422C(&qword_1EF52CB60, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7F5C);
}

uint64_t sub_1BDE4FB44()
{
  return sub_1BDD8422C(&qword_1EF52CB68, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7E94);
}

uint64_t sub_1BDE4FB70()
{
  return sub_1BDD8422C(&qword_1EF52CB70, type metadata accessor for Proto4_Struct, (uint64_t)&unk_1BE1B7ED4);
}

uint64_t sub_1BDE4FB9C()
{
  return sub_1BDD8422C(&qword_1EF52C300, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B7FD4);
}

uint64_t sub_1BDE4FBC8()
{
  return sub_1BDD8422C(&qword_1EF52CB78, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B80C4);
}

uint64_t sub_1BDE4FBF4()
{
  return sub_1BDD8422C(&qword_1EF52CB80, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B7FFC);
}

uint64_t sub_1BDE4FC20()
{
  return sub_1BDD8422C(&qword_1EF52CB88, type metadata accessor for Proto4_Set.Element, (uint64_t)&unk_1BE1B803C);
}

uint64_t sub_1BDE4FC4C()
{
  return sub_1BDD8422C(&qword_1EF52CB90, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B813C);
}

uint64_t sub_1BDE4FC78()
{
  return sub_1BDD8422C(&qword_1EF52CB98, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B822C);
}

uint64_t sub_1BDE4FCA4()
{
  return sub_1BDD8422C(&qword_1EF52CBA0, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B8164);
}

uint64_t sub_1BDE4FCD0()
{
  return sub_1BDD8422C(&qword_1EF52CBA8, type metadata accessor for Proto4_Set, (uint64_t)&unk_1BE1B81A4);
}

uint64_t sub_1BDE4FCFC()
{
  return sub_1BDD8422C(&qword_1EF52CBB0, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B82A4);
}

uint64_t sub_1BDE4FD28()
{
  return sub_1BDD8422C(&qword_1EF52CBB8, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B8394);
}

uint64_t sub_1BDE4FD54()
{
  return sub_1BDD8422C(&qword_1EF52CBC0, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B82CC);
}

uint64_t sub_1BDE4FD80()
{
  return sub_1BDD8422C(&qword_1EF52CBC8, type metadata accessor for Proto4_Counter, (uint64_t)&unk_1BE1B830C);
}

uint64_t sub_1BDE4FDAC()
{
  return sub_1BDD8422C(&qword_1EF52CBD0, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B840C);
}

uint64_t sub_1BDE4FDD8()
{
  return sub_1BDD8422C(&qword_1EF52CBD8, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B84FC);
}

uint64_t sub_1BDE4FE04()
{
  return sub_1BDD8422C(&qword_1EF52CBE0, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B8434);
}

uint64_t sub_1BDE4FE30()
{
  return sub_1BDD8422C(&qword_1EF52CBE8, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B8474);
}

uint64_t sub_1BDE4FE5C()
{
  return sub_1BDD8422C(&qword_1EF52C2F8, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B8574);
}

uint64_t type metadata accessor for Proto4_Version.Seen(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1EF52CEC8);
}

uint64_t sub_1BDE4FE9C()
{
  return sub_1BDD8422C(&qword_1EF52CBF0, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B8664);
}

uint64_t sub_1BDE4FEC8()
{
  return sub_1BDD8422C(&qword_1EF52CBF8, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B859C);
}

uint64_t sub_1BDE4FEF4()
{
  return sub_1BDD8422C(&qword_1EF52CC00, type metadata accessor for Proto4_Version.Seen, (uint64_t)&unk_1BE1B85DC);
}

uint64_t sub_1BDE4FF20()
{
  return sub_1BDD8422C(&qword_1EF52CC08, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B86DC);
}

uint64_t sub_1BDE4FF4C()
{
  return sub_1BDD8422C(&qword_1EF52CC10, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B87CC);
}

uint64_t sub_1BDE4FF78()
{
  return sub_1BDD8422C(&qword_1EF52CC18, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B8704);
}

uint64_t sub_1BDE4FFA4()
{
  return sub_1BDD8422C(&qword_1EF52CC20, type metadata accessor for Proto4_Version, (uint64_t)&unk_1BE1B8744);
}

uint64_t sub_1BDE4FFD0()
{
  return sub_1BDD8422C(&qword_1EF52C328, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8844);
}

uint64_t sub_1BDE4FFFC()
{
  return sub_1BDD8422C(&qword_1EF52CC28, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B8934);
}

uint64_t sub_1BDE50028()
{
  return sub_1BDD8422C(&qword_1EF52CC30, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B886C);
}

uint64_t sub_1BDE50054()
{
  return sub_1BDD8422C(&qword_1EF52CC38, type metadata accessor for Proto4_IndexedTimestamp, (uint64_t)&unk_1BE1B88AC);
}

uint64_t sub_1BDE50080()
{
  return sub_1BDD8422C(&qword_1EF52CC40, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B89AC);
}

uint64_t sub_1BDE500AC()
{
  return sub_1BDD8422C(&qword_1EF52CC48, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A9C);
}

uint64_t sub_1BDE500D8()
{
  return sub_1BDD8422C(&qword_1EF52CC50, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B89D4);
}

uint64_t sub_1BDE50104()
{
  return sub_1BDD8422C(&qword_1EF52CC58, type metadata accessor for Proto4_Timestamp, (uint64_t)&unk_1BE1B8A14);
}

uint64_t sub_1BDE50130()
{
  return sub_1BDD8422C(&qword_1EF52CC60, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8B14);
}

uint64_t sub_1BDE5015C()
{
  return sub_1BDD8422C(&qword_1EF52CC68, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8C04);
}

uint64_t sub_1BDE50188()
{
  return sub_1BDD8422C(&qword_1EF52CC70, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8B3C);
}

uint64_t sub_1BDE501B4()
{
  return sub_1BDD8422C(&qword_1EF52CC78, type metadata accessor for Proto4_KeyPath, (uint64_t)&unk_1BE1B8B7C);
}

uint64_t sub_1BDE501E0()
{
  return sub_1BDD8422C(&qword_1EF52C320, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8C7C);
}

uint64_t sub_1BDE5020C()
{
  return sub_1BDD8422C(&qword_1EF52CC80, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8D6C);
}

uint64_t sub_1BDE50238()
{
  return sub_1BDD8422C(&qword_1EF52CC88, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8CA4);
}

uint64_t sub_1BDE50264()
{
  return sub_1BDD8422C(&qword_1EF52CC90, type metadata accessor for Proto4_CRDT, (uint64_t)&unk_1BE1B8CE4);
}

uint64_t sub_1BDE50290()
{
  return sub_1BDD8422C(&qword_1EF52C2F0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8DE4);
}

uint64_t sub_1BDE502BC()
{
  return sub_1BDD8422C(&qword_1EF52CC98, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8ED4);
}

uint64_t sub_1BDE502E8()
{
  return sub_1BDD8422C(&qword_1EF52CCA0, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8E0C);
}

uint64_t sub_1BDE50314()
{
  return sub_1BDD8422C(&qword_1EF52CCA8, type metadata accessor for Proto4_Value, (uint64_t)&unk_1BE1B8E4C);
}

uint64_t sub_1BDE50340()
{
  return sub_1BDD8422C(&qword_1EF52CCB0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B8F4C);
}

uint64_t sub_1BDE5036C()
{
  return sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
}

uint64_t sub_1BDE50398()
{
  return sub_1BDD8422C(&qword_1EF52CCB8, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B8F74);
}

uint64_t sub_1BDE503C4()
{
  return sub_1BDD8422C(&qword_1EF52CCC0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B8FB4);
}

void sub_1BDE503F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  _QWORD v42[3];
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;

  v66 = a1;
  v55 = type metadata accessor for Proto4_CustomCRDT(0);
  v3 = MEMORY[0x1E0C80A78](v55);
  v54 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v53 = (char *)v42 - v5;
  v52 = type metadata accessor for Proto4_TaggedCRDT(0);
  v6 = MEMORY[0x1E0C80A78](v52);
  v51 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v50 = (char *)v42 - v8;
  v49 = type metadata accessor for Proto4_Counter(0);
  v9 = MEMORY[0x1E0C80A78](v49);
  v48 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v47 = (char *)v42 - v11;
  v59 = type metadata accessor for Proto4_Sequence(0);
  v12 = MEMORY[0x1E0C80A78](v59);
  v60 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v61 = (char *)v42 - v14;
  v46 = type metadata accessor for Proto4_Struct(0);
  v15 = MEMORY[0x1E0C80A78](v46);
  v45 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v44 = (char *)v42 - v17;
  v56 = type metadata accessor for Proto4_Set(0);
  v18 = MEMORY[0x1E0C80A78](v56);
  v57 = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v58 = (char *)v42 - v20;
  v43 = type metadata accessor for Proto4_Register(0);
  v21 = MEMORY[0x1E0C80A78](v43);
  v42[2] = (char *)v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v42[1] = (char *)v42 - v23;
  v24 = type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf(0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v65 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v64 = (char *)v42 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v63 = (char *)v42 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v62 = (char *)v42 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v34 = MEMORY[0x1E0C80A78](v33);
  v35 = MEMORY[0x1E0C80A78](v34);
  v36 = MEMORY[0x1E0C80A78](v35);
  MEMORY[0x1E0C80A78](v36);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD98);
  v38 = MEMORY[0x1E0C80A78](v37);
  v40 = (char *)v42 + *(int *)(v38 + 48) - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(v66, (uint64_t)v42 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
  sub_1BDD9C318(a2, (uint64_t)v40, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
  v41 = (char *)sub_1BDE50870 + 4 * word_1BE1B6C0A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BDE50870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  sub_1BDD9C318(v0, v2, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BDD9C3E0(v2, type metadata accessor for Proto4_Register);
    sub_1BDD86E30(v0, &qword_1EF52CD98);
    v4 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v3 - 296);
    sub_1BDDA2E8C(v2, v5, type metadata accessor for Proto4_Register);
    v6 = *(_QWORD *)(v3 - 288);
    sub_1BDDA2E8C(v1, v6, type metadata accessor for Proto4_Register);
    sub_1BDD8422C(&qword_1EF52CDD0, type metadata accessor for Proto4_Register, (uint64_t)&unk_1BE1B84C4);
    v4 = sub_1BE1B2120();
    sub_1BDD9C3E0(v6, type metadata accessor for Proto4_Register);
    sub_1BDD9C3E0(v5, type metadata accessor for Proto4_Register);
    sub_1BDD9C3E0(v0, type metadata accessor for Proto4_CRDT.OneOf_TaggedOneOf);
  }
  return v4 & 1;
}

void sub_1BDE50E30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v32[3];
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a1;
  v39 = type metadata accessor for Proto4_TaggedValue(0);
  v3 = MEMORY[0x1E0C80A78](v39);
  v38 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v37 = (char *)v32 - v5;
  v36 = type metadata accessor for Proto4_Optional(0);
  v6 = MEMORY[0x1E0C80A78](v36);
  v35 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v34 = (char *)v32 - v8;
  v33 = type metadata accessor for Proto4_Reference(0);
  v9 = MEMORY[0x1E0C80A78](v33);
  v32[2] = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v32[1] = (char *)v32 - v11;
  v12 = sub_1BE1B20C0();
  v45 = *(_QWORD *)(v12 - 8);
  v46 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v41 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v40 = (char *)v32 - v15;
  v16 = type metadata accessor for Proto4_Value.OneOf_TaggedOneOf(0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v44 = (char *)v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v43 = (char *)v32 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v42 = (char *)v32 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v24 = MEMORY[0x1E0C80A78](v23);
  v25 = MEMORY[0x1E0C80A78](v24);
  v26 = MEMORY[0x1E0C80A78](v25);
  MEMORY[0x1E0C80A78](v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CD28);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (char *)v32 + *(int *)(v28 + 48) - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(v47, (uint64_t)v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
  sub_1BDD9C318(a2, (uint64_t)v30, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
  v31 = (char *)sub_1BDE51168 + 4 * byte_1BE1B6C1C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_1BDE51168()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  BOOL v3;

  sub_1BDD9C318(v1, (uint64_t)v0, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BDD86E30(v1, &qword_1EF52CD28);
    return 0;
  }
  else
  {
    v3 = *v0 == *v2;
    sub_1BDD9C3E0(v1, type metadata accessor for Proto4_Value.OneOf_TaggedOneOf);
  }
  return v3;
}

unint64_t sub_1BDE515B0()
{
  unint64_t result;

  result = qword_1EF52CE78;
  if (!qword_1EF52CE78)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1B9180, &type metadata for Proto4_Selection.Affinity);
    atomic_store(result, (unint64_t *)&qword_1EF52CE78);
  }
  return result;
}

uint64_t sub_1BDE515F4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51604()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51614()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51624()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51634()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51644()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Proto_Reference.TypeEnum(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Proto_Reference.TypeEnum(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1BDE516B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BDE516D4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto4_Selection.Affinity()
{
  return &type metadata for Proto4_Selection.Affinity;
}

uint64_t sub_1BDE51704(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = *(int *)(a3 + 28);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1BE1B20F0();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_1BDE517BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1BDE5180C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_1BE1B20F0();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_1BDE5189C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_1BDE51938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1BDE519A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1BDE51A30()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51A3C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BE1B20F0();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_1BDE51AB8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BDE51AC4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1BE1B20F0();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BDE51B38()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B20F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDE51BBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1BE1B20F0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_1BDE51C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1BDE51CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1BDE51D0C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51D1C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_1BDE51D2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_1BDDB6CA4(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1BE1B20F0();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return a1;
}

uint64_t *sub_1BDE51DE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_1BDDB6CA4(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1BDDB796C(v8, v9);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_1BDE51E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1BDE51EE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1BDDB796C(v6, v7);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BE1B20F0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1BDE51F60()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BE1B20F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1BDE51FE8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDE51FF4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1BE1B20F0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BDE52068()
{
  return sub_1BDD8747C();
}

unint64_t sub_1BDE52084()
{
  unint64_t result;

  result = qword_1EF52CED8;
  if (!qword_1EF52CED8)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1B90E0, &type metadata for Proto4_Selection.Affinity);
    atomic_store(result, (unint64_t *)&qword_1EF52CED8);
  }
  return result;
}

unint64_t sub_1BDE520CC()
{
  unint64_t result;

  result = qword_1EF52CEE0;
  if (!qword_1EF52CEE0)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1B9108, &type metadata for Proto4_Selection.Affinity);
    atomic_store(result, (unint64_t *)&qword_1EF52CEE0);
  }
  return result;
}

unint64_t sub_1BDE52114()
{
  unint64_t result;

  result = qword_1EF52CEE8;
  if (!qword_1EF52CEE8)
  {
    result = MEMORY[0x1C3B7DF54]("qeZ)", &type metadata for Proto4_Selection.Affinity);
    atomic_store(result, (unint64_t *)&qword_1EF52CEE8);
  }
  return result;
}

void sub_1BDE52160(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  if ((a4 & 1) == 0)
  {
    v6 = v4;
    v7 = *a2;
    v8 = a2[1];
    v9 = (_QWORD *)(v4 + 48);
    swift_beginAccess();
    sub_1BDDB6CA4(v7, v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *(_QWORD *)(v4 + 48);
    v24 = v11;
    *(_QWORD *)(v6 + 48) = 0x8000000000000000;
    v13 = sub_1BDDB7F0C(v7, v8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
    {
      __break(1u);
      goto LABEL_13;
    }
    v5 = v12;
    if (*(_QWORD *)(v11 + 24) >= v16)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      sub_1BDE5F540(v16, isUniquelyReferenced_nonNull_native);
      v17 = sub_1BDDB7F0C(v7, v8);
      if ((v5 & 1) != (v18 & 1))
      {
        sub_1BE1B3680();
        __break(1u);
        return;
      }
      v13 = v17;
    }
    while (1)
    {
      *v9 = v11;
      swift_bridgeObjectRelease();
      v19 = (_QWORD *)*v9;
      swift_bridgeObjectRetain();
      if ((v5 & 1) == 0)
      {
        sub_1BE1550D4(v13, v7, v8, 0, v19);
        sub_1BDDB6CA4(v7, v8);
      }
      v20 = v19[7];
      v21 = *(_QWORD *)(v20 + 8 * v13);
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (!v22)
        break;
LABEL_13:
      __break(1u);
LABEL_14:
      sub_1BDE642C4();
      v11 = v24;
    }
    *(_QWORD *)(v20 + 8 * v13) = v23;
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v7, v8);
  }
}

uint64_t sub_1BDE522F0@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD **v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;

  v5 = v3;
  v9 = (_QWORD **)(v3 + 40);
  swift_beginAccess();
  sub_1BDDB6CA4(a1, a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD **)(v3 + 40);
  v25 = v11;
  *(_QWORD *)(v5 + 40) = 0x8000000000000000;
  v13 = sub_1BDE5E12C(a1, a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v12;
  if (v11[3] >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    sub_1BDE5F840(v16, isUniquelyReferenced_nonNull_native);
    v17 = sub_1BDE5E12C(a1, a2);
    if ((v4 & 1) != (v18 & 1))
    {
      result = sub_1BE1B3680();
      __break(1u);
      return result;
    }
    v13 = v17;
  }
  while (1)
  {
    *v9 = v11;
    swift_bridgeObjectRelease();
    v19 = (uint64_t)*v9;
    if ((v4 & 1) == 0)
    {
      sub_1BE1550D4(v13, a1, a2, 0, *v9);
      sub_1BDDB6CA4(a1, a2);
    }
    v20 = *(_QWORD *)(v19 + 56);
    v21 = *(_QWORD *)(v20 + 8 * v13);
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
      break;
LABEL_11:
    __break(1u);
LABEL_12:
    sub_1BDE64470();
    v11 = v25;
  }
  *(_QWORD *)(v20 + 8 * v13) = v23;
  swift_endAccess();
  sub_1BDDB796C(a1, a2);
  return sub_1BE108BC8(a1, a2, a3);
}

uint64_t sub_1BDE52490()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDE524AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRDebugDecodeContext()
{
  return objc_opt_self();
}

uint64_t (*sub_1BDE52510(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for Replica();
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_1BDD9C318(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v4[5] = sub_1BDE674D8(v4, (uint64_t)v6);
  return sub_1BDDC8330;
}

uint64_t (*sub_1BDE5259C(_QWORD *a1, uint64_t a2, unint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_1BDDB6CA4(a2, a3);
  v6[6] = sub_1BDE67590(v6, a2, a3);
  return sub_1BDDB7C50;
}

void (*sub_1BDE5260C(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1BDE67624(v6, a2, a3);
  return sub_1BDE52678;
}

void sub_1BDE52678(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t sub_1BDE526B0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  _QWORD *v33;
  unint64_t v34;
  char *v35;
  __int16 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  unsigned __int8 v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, char *, uint64_t);
  uint64_t v78;
  void (*v79)(_QWORD *, _QWORD);
  void (*v80)(uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  void (*v100)(char *, uint64_t, uint64_t);
  _BYTE __dst[14];
  unsigned __int8 v102;
  char v103;
  void *v104;
  void *v105;
  unint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v92 = a4;
  v85 = a2;
  v91 = a5;
  v115 = *MEMORY[0x1E0C80C00];
  v88 = *v5;
  v90 = sub_1BE1B2EE8();
  v94 = *(_QWORD *)(v90 - 8);
  v8 = MEMORY[0x1E0C80A78](v90);
  v89 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v82 - v11;
  MEMORY[0x1E0C80A78](v10);
  v87 = (char *)&v82 - v13;
  v98 = sub_1BE1B1F58();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = (void *)*a1;
  v95 = a1[1];
  v19 = (void *)sub_1BE1268E0(MEMORY[0x1E0DEE9D8]);
  v104 = v19;
  v86 = v5;
  v20 = (uint64_t)v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v20, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v21 = *(_QWORD *)&v18[*(int *)(v16 + 20)];
  v22 = -1 << *(_BYTE *)(v21 + 32);
  v23 = ~v22;
  v24 = -v22;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  else
    v25 = -1;
  v26 = v25 & *(_QWORD *)(v21 + 64);
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v110 = v21;
  v111 = v21 + 64;
  v112 = v23;
  v113 = 0;
  v114 = v26;
  sub_1BDDA7144((uint64_t)&v105);
  v27 = v109;
  if (v109)
  {
    v83 = v12;
    v84 = a3;
    v28 = v15;
    v30 = (uint64_t)v105;
    v29 = v106;
    v32 = v107;
    v31 = v108;
    v96 = v28;
    do
    {
      v99 = (uint64_t *)v31;
      sub_1BDDB6CA4(v30, v29);
      sub_1BE1B1F4C();
      v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C00);
      v108 = v50;
      v109 = sub_1BDDA9D60(&qword_1ED6F3C08, &qword_1ED6F3C00, MEMORY[0x1E0CB1B08]);
      v105 = &unk_1E7754600;
      v51 = __swift_project_boxed_opaque_existential_1(&v105, v50);
      v52 = *v51;
      v53 = *(_QWORD *)(*v51 + 16);
      v100 = v32;
      if (v53)
      {
        if (v53 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          v102 = v53;
          memcpy(__dst, (const void *)(v52 + 32), v53);
          v33 = *(_QWORD **)__dst;
          v34 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v102 << 48);
        }
        else
        {
          sub_1BE1B1CAC();
          swift_allocObject();
          v54 = sub_1BE1B1C64();
          v55 = v54;
          if (v53 >= 0x7FFFFFFF)
          {
            sub_1BE1B1E2C();
            v33 = (_QWORD *)swift_allocObject();
            v33[2] = 0;
            v33[3] = v53;
            v34 = v55 | 0x8000000000000000;
          }
          else
          {
            v33 = (_QWORD *)(v53 << 32);
            v34 = v54 | 0x4000000000000000;
          }
        }
      }
      else
      {
        v33 = 0;
        v34 = 0xC000000000000000;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v105);
      v105 = v33;
      v106 = v34;
      v35 = v96;
      *(_QWORD *)__dst = sub_1BE1B1F40();
      *(_WORD *)&__dst[8] = v36;
      __dst[10] = v37;
      __dst[11] = v38;
      __dst[12] = v39;
      __dst[13] = v40;
      v102 = v41;
      v103 = v42;
      sub_1BE1B1F40();
      v43 = sub_1BDDD6E84(__dst, 16);
      v45 = v44;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v43, v45);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v35, v98);
      v46 = (uint64_t)v105;
      v47 = v106;
      v48 = v104;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v105 = v48;
      sub_1BE154A34(v46, v47, v30, v29, isUniquelyReferenced_nonNull_native);
      v19 = v105;
      v104 = v105;
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v30, v29);
      sub_1BDE776D8(v30, v29, (uint64_t)v100, (uint64_t)v99, v27);
      sub_1BDDA7144((uint64_t)&v105);
      v30 = (uint64_t)v105;
      v29 = v106;
      v32 = v107;
      v31 = v108;
      v27 = v109;
    }
    while (v109);
    v56 = v84;
    v12 = v83;
  }
  else
  {
    v56 = a3;
  }
  sub_1BDE27FD0();
  v57 = v95;
  v58 = v92;
  v59 = v87;
  v60 = v94;
  if (v95 >> 60 == 15)
    goto LABEL_21;
  if (!*((_QWORD *)v19 + 2))
  {
    v93 = 0;
    v95 = 0xF000000000000000;
LABEL_21:
    v67 = v90;
    goto LABEL_24;
  }
  v61 = (uint64_t)v93;
  sub_1BDDB6CA4((uint64_t)v93, v95);
  v62 = sub_1BDDB7F0C(v61, v57);
  if ((v63 & 1) != 0)
  {
    v64 = (uint64_t *)(*((_QWORD *)v19 + 7) + 16 * v62);
    v65 = *v64;
    v66 = v64[1];
    sub_1BDDB6CA4(*v64, v66);
  }
  else
  {
    v65 = 0;
    v66 = 0xF000000000000000;
  }
  v67 = v90;
  sub_1BDD9CC0C(v61, v57);
  v93 = (void *)v65;
  v95 = v66;
  v60 = v94;
LABEL_24:
  v100 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
  v100(v12, v85, v67);
  v68 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v12, 1, v56) == 1)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v67);
    v69 = 1;
    v70 = v58;
  }
  else
  {
    v70 = v58;
    v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 24);
    v72 = swift_bridgeObjectRetain();
    v71(v72, v56, v70);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v12, v56);
    v69 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v59, v69, 1, v56);
  v73 = v56;
  v74 = (uint64_t)v93;
  v75 = v95;
  v105 = v93;
  v106 = v95;
  v76 = (uint64_t)v89;
  v77 = (void (*)(uint64_t, char *, uint64_t))v100;
  v78 = ((uint64_t (*)(char *, char *, uint64_t))v100)(v89, v59, v67);
  v99 = &v82;
  MEMORY[0x1E0C80A78](v78);
  *(&v82 - 2) = (uint64_t)&v104;
  *(&v82 - 1) = (uint64_t)v86;
  sub_1BDD9C9A0(v74, v75);
  v79 = sub_1BDE75F64((uint64_t *)&v105, v76, (void (*)(uint64_t))sub_1BDE776D0, (uint64_t)(&v82 - 4), v73, v70);
  v80 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
  v80(v76, v67);
  v105 = (void *)v74;
  v106 = v75;
  v77(v76, v59, v67);
  sub_1BE170424((uint64_t *)&v105, v76, (uint64_t)v79, v73, v70, v91);
  v80((uint64_t)v59, v67);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDE52EB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t result;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46[2];
  uint64_t v47;
  uint64_t v48[2];

  v39 = a1;
  v42 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v42);
  v45 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a2;
  v8 = *a2;
  v9 = *(_QWORD *)(*a2 + 64);
  v37 = *a2 + 64;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v13 = a3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v43 = v8;
  swift_bridgeObjectRetain();
  v41 = v13;
  swift_beginAccess();
  v14 = 0;
  v38 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v15 = __clz(__rbit64(v12));
  v16 = (v12 - 1) & v12;
  for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v19)) + (v14 << 6))
  {
    v21 = 16 * i;
    v22 = (uint64_t *)(*(_QWORD *)(v43 + 48) + v21);
    v23 = *v22;
    v24 = v22[1];
    v25 = (uint64_t *)(*(_QWORD *)(v43 + 56) + v21);
    v4 = *v25;
    v3 = v25[1];
    v26 = v45;
    sub_1BDD9C318(v41, v45, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v27 = *(_QWORD *)(v26 + *(int *)(v42 + 20));
    v28 = *(_QWORD *)(v27 + 16);
    sub_1BDDB6CA4(v23, v24);
    if (!v28)
      goto LABEL_27;
    v44 = v16;
    sub_1BDDB6CA4(v23, v24);
    sub_1BDDB6CA4(v23, v24);
    sub_1BDDB6CA4(v4, v3);
    v29 = sub_1BDDB7F0C(v23, v24);
    if ((v30 & 1) == 0)
      break;
    v31 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 48 * v29);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v23, v24);
    sub_1BDDB796C(v23, v24);
    sub_1BDD9C3E0(v45, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (!v31)
      goto LABEL_30;
    v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 80);
    v34 = swift_bridgeObjectRetain();
    v35 = v33(v34);
    swift_release();
    swift_bridgeObjectRelease();
    v47 = v35;
    sub_1BDDB6CA4(v23, v24);
    sub_1BDDB6CA4(v4, v3);
    sub_1BDDB796C(v23, v24);
    v46[0] = v4;
    v46[1] = v3;
    sub_1BDE532A0((unint64_t *)&v47, v46, v48);
    sub_1BDDB796C(v23, v24);
    sub_1BDDB796C(v4, v3);
    sub_1BDDB796C(v4, v3);
    swift_release();
    sub_1BDDB796C(v48[0], v48[1]);
    v12 = v44;
    if (v44)
      goto LABEL_4;
LABEL_5:
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      sub_1BDDB6CA4(v4, v3);
      goto LABEL_29;
    }
    if (v18 >= v38)
      return swift_release();
    v19 = *(_QWORD *)(v37 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v38)
        return swift_release();
      v19 = *(_QWORD *)(v37 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v38)
          return swift_release();
        v19 = *(_QWORD *)(v37 + 8 * v14);
        if (!v19)
        {
          v20 = v18 + 3;
          if (v20 >= v38)
            return swift_release();
          v19 = *(_QWORD *)(v37 + 8 * v20);
          if (!v19)
          {
            while (1)
            {
              v14 = v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_26;
              if (v14 >= v38)
                return swift_release();
              v19 = *(_QWORD *)(v37 + 8 * v14);
              ++v20;
              if (v19)
                goto LABEL_18;
            }
          }
          v14 = v20;
        }
      }
    }
LABEL_18:
    v16 = (v19 - 1) & v19;
  }
  sub_1BDDB796C(v23, v24);
  sub_1BDDB796C(v23, v24);
LABEL_29:
  result = sub_1BDD9C3E0(v45, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1BDE532A0@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  void (*v24)(_QWORD *);
  uint64_t *v25;
  uint64_t result;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v36 = a3;
  v5 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B1F58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *a1;
  v13 = *a2;
  v14 = *a2;
  v15 = a2[1];
  v12 = v15;
  if (v15 >> 60 == 15)
  {
    sub_1BE1B1F4C();
    *(_QWORD *)&v41 = sub_1BDDC4278((uint64_t)&unk_1E77545D8);
    *((_QWORD *)&v41 + 1) = v16;
    v17 = sub_1BDEE7C7C();
    v19 = v18;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v17, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v15 = *((_QWORD *)&v41 + 1);
    v14 = v41;
  }
  v20 = v37 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v20, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v21 = *(_QWORD *)(*(_QWORD *)&v7[*(int *)(v5 + 20)] + 16);
  sub_1BDD9C9A0(v13, v12);
  if (!v21)
    goto LABEL_13;
  sub_1BDDB6CA4(v14, v15);
  sub_1BDDB7F0C(v14, v15);
  if ((v22 & 1) == 0)
  {
    sub_1BDDB796C(v14, v15);
LABEL_13:
    sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v28 = v35;
    swift_retain();
    v29 = MEMORY[0x1E0DEE9D8];
    v30 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v31 = sub_1BDDB6CE8(v29);
    sub_1BDDB6E0C(v29);
    sub_1BDDB6CE8(v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x1E0DEE9E0];
    swift_bridgeObjectRelease_n();
    v41 = v28;
    v42 = v32;
    v43 = v32;
    v44 = v30;
    v45 = v31;
    v39 = v14;
    v40 = v15;
    swift_beginAccess();
    sub_1BDD8B18C(&v41, &v39);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
LABEL_14:
    swift_beginAccess();
    sub_1BDDB6CA4(v14, v15);
    sub_1BDDBC6BC(v38, v14, v15);
    swift_endAccess();
    result = sub_1BDDB796C(v38[0], v38[1]);
    v33 = v36;
    *v36 = v14;
    v33[1] = v15;
    return result;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v14, v15);
  sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  v39 = v14;
  v40 = v15;
  sub_1BDDB6CA4(v14, v15);
  v24 = sub_1BDDB7C54(&v41, &v39);
  if (!v23[2])
  {
    ((void (*)(__int128 *, _QWORD))v24)(&v41, 0);
    sub_1BDDB796C(v39, v40);
    swift_endAccess();
    goto LABEL_14;
  }
  v25 = v23;
  result = *v23;
  if (*v23)
  {
    v27 = v35;
    if (v35 != result)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        *v25 = (*(uint64_t (**)(void))(*(_QWORD *)*v25 + 160))();
        swift_release();
      }
      (*(void (**)(unint64_t))(*(_QWORD *)*v25 + 96))(v27);
    }
    ((void (*)(__int128 *, _QWORD))v24)(&v41, 0);
    swift_endAccess();
    sub_1BDDB796C(v39, v40);
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE536D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD **, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char isUniquelyReferenced_nonNull_native;
  char v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void (*v108)(_QWORD *);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142[9];
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  _UNKNOWN **v146;
  _QWORD *v147;
  uint64_t v148;

  v120 = a3;
  *(_QWORD *)&v139 = a1;
  v116 = a5;
  v7 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v7);
  v115 = (char *)&v114 - v8;
  v127 = type metadata accessor for PartiallyOrderedReferenceMap();
  v9 = MEMORY[0x1E0C80A78](v127);
  v132 = (uint64_t)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v114 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BE1B1F58();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a2;
  v122 = a2[1];
  v123 = v20;
  v119 = *(_QWORD *)(a4 + 16);
  sub_1BDDCB1B4((uint64_t)v19);
  type metadata accessor for ReplicaState();
  v21 = swift_allocObject();
  v22 = v21 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v23 = type metadata accessor for Replica();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v21 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v19, v16);
  *(_QWORD *)(v21 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v21 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v24((uint64_t)v15, 1, 1, v23);
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v15, v22);
  swift_endAccess();
  v118 = sub_1BDE75D50(v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF508);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE1B61B0;
  v27 = v122;
  v26 = v123;
  *(_QWORD *)(inited + 32) = v123;
  *(_QWORD *)(inited + 40) = v27;
  sub_1BDDB6CA4(v26, v27);
  v28 = sub_1BDDBFED0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v148 = v28;
  v29 = MEMORY[0x1E0DEE9D8];
  v147 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v30 = type metadata accessor for RetainVisitor();
  v31 = swift_allocObject();
  v32 = sub_1BDDB6E0C(v29);
  v33 = sub_1BDDB6CE8(v29);
  *(_QWORD *)(v31 + 16) = v32;
  *(_QWORD *)(v31 + 24) = v33;
  v145 = v30;
  v146 = &off_1E7755DD0;
  v143 = (_QWORD *)v31;
  v34 = v119;
  v35 = *(void (**)(_QWORD **, uint64_t, uint64_t))(v119 + 40);
  v117 = v31;
  swift_retain();
  v35(&v143, v120, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  swift_beginAccess();
  v126 = v31 + 16;
  v36 = swift_bridgeObjectRetain();
  sub_1BDF3076C(v36);
  v128 = v121 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v37 = v147;
  if (!v147[2])
    goto LABEL_16;
  while (1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v38 = v37[2];
      if (!v38)
        break;
      goto LABEL_8;
    }
    v37 = sub_1BDFCEA3C(v37);
    v38 = v37[2];
    if (!v38)
      break;
LABEL_8:
    v39 = v38 - 1;
    v40 = &v37[2 * v39];
    v42 = v40[4];
    v41 = v40[5];
    v37[2] = v39;
    v147 = v37;
    sub_1BDDB6CA4(v42, v41);
    v43 = sub_1BDDBC6BC((uint64_t *)&v143, v42, v41);
    sub_1BDDB796C((uint64_t)v143, v144);
    if ((v43 & 1) == 0)
      goto LABEL_5;
    sub_1BDD9C318(v128, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v44 = *(_QWORD *)&v12[*(int *)(v127 + 20)];
    if (*(_QWORD *)(v44 + 16))
    {
      sub_1BDDB6CA4(v42, v41);
      v45 = sub_1BDDB7F0C(v42, v41);
      if ((v46 & 1) == 0)
      {
        sub_1BDDB796C(v42, v41);
        goto LABEL_4;
      }
      v47 = (_QWORD *)(*(_QWORD *)(v44 + 56) + 48 * v45);
      v17 = v47[3];
      v48 = v47[4];
      v49 = v47[5];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v42, v41);
      sub_1BDD9C3E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1BDF3076C(v48);
      swift_beginAccess();
      sub_1BDDB99FC(v48, v49);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v42, v41);
      v37 = v147;
      if (!v147[2])
        goto LABEL_15;
    }
    else
    {
LABEL_4:
      sub_1BDD9C3E0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_5:
      sub_1BDDB796C(v42, v41);
      if (!v37[2])
        goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  v28 = v148;
LABEL_16:
  v50 = *(_QWORD *)(v28 + 56);
  v124 = v28 + 56;
  v51 = 1 << *(_BYTE *)(v28 + 32);
  v52 = -1;
  if (v51 < 64)
    v52 = ~(-1 << v51);
  v53 = v52 & v50;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v54 = 0;
  v125 = (unint64_t)(v51 + 63) >> 6;
  v55 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (2)
  {
    if (v53)
    {
      v60 = __clz(__rbit64(v53));
      v61 = (v53 - 1) & v53;
      v62 = v60 | (v54 << 6);
      goto LABEL_37;
    }
    v63 = v54 + 1;
    if (__OFADD__(v54, 1))
      goto LABEL_62;
    if (v63 < v125)
    {
      v64 = *(_QWORD *)(v124 + 8 * v63);
      ++v54;
      if (!v64)
      {
        v54 = v63 + 1;
        if (v63 + 1 >= v125)
          break;
        v64 = *(_QWORD *)(v124 + 8 * v54);
        if (!v64)
        {
          v54 = v63 + 2;
          if (v63 + 2 >= v125)
            break;
          v64 = *(_QWORD *)(v124 + 8 * v54);
          if (!v64)
          {
            v65 = v63 + 3;
            if (v65 >= v125)
              break;
            v64 = *(_QWORD *)(v124 + 8 * v65);
            if (!v64)
            {
              while (1)
              {
                v54 = v65 + 1;
                if (__OFADD__(v65, 1))
                  break;
                if (v54 >= v125)
                  goto LABEL_54;
                v64 = *(_QWORD *)(v124 + 8 * v54);
                ++v65;
                if (v64)
                  goto LABEL_36;
              }
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }
            v54 = v65;
          }
        }
      }
LABEL_36:
      v61 = (v64 - 1) & v64;
      v62 = __clz(__rbit64(v64)) + (v54 << 6);
LABEL_37:
      v66 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * v62);
      v17 = *v66;
      v67 = v66[1];
      v68 = v132;
      sub_1BDD9C318(v128, v132, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v69 = *(_QWORD *)(v68 + *(int *)(v127 + 20));
      v70 = *(_QWORD *)(v69 + 16);
      sub_1BDDB6CA4(v17, v67);
      if (!v70)
        goto LABEL_67;
      sub_1BDDB6CA4(v17, v67);
      sub_1BDDB6CA4(v17, v67);
      v71 = sub_1BDDB7F0C(v17, v67);
      if ((v72 & 1) == 0)
        goto LABEL_66;
      v73 = *(_QWORD *)(v69 + 56) + 48 * v71;
      v74 = *(_QWORD *)v73;
      v75 = *(_OWORD *)(v73 + 16);
      v138 = *(_OWORD *)(v73 + 32);
      v139 = v75;
      swift_retain();
      v137 = v139;
      swift_bridgeObjectRetain();
      v136 = *((_QWORD *)&v139 + 1);
      swift_bridgeObjectRetain();
      v135 = v138;
      swift_bridgeObjectRetain();
      v134 = *((_QWORD *)&v138 + 1);
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v17, v67);
      sub_1BDDB796C(v17, v67);
      sub_1BDD9C3E0(v132, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v76 = *(_QWORD *)v126;
      v77 = *(_QWORD *)(*(_QWORD *)v126 + 16);
      v129 = v61;
      v130 = v54;
      v133 = v74;
      if (v77)
      {
        sub_1BDDB6CA4(v17, v67);
        swift_retain();
        swift_bridgeObjectRetain();
        v78 = sub_1BDDB7F0C(v17, v67);
        if ((v79 & 1) != 0)
        {
          v131 = *(_QWORD *)(*(_QWORD *)(v76 + 56) + 8 * v78);
          swift_bridgeObjectRelease();
          sub_1BDDB796C(v17, v67);
LABEL_45:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v80 = MEMORY[0x1E0DEE9D8];
          sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
          sub_1BDDB6CE8(v80);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          sub_1BDDB6CA4(v17, v67);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v143 = v55;
          v51 = (uint64_t)v55;
          v83 = sub_1BDDB7F0C(v17, v67);
          v84 = v55[2];
          v85 = (v82 & 1) == 0;
          v86 = v84 + v85;
          if (__OFADD__(v84, v85))
          {
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }
          v87 = v82;
          if (v55[3] >= v86)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v51 = (uint64_t)&v143;
              sub_1BDDB7F70();
            }
          }
          else
          {
            sub_1BDDC50C4(v86, isUniquelyReferenced_nonNull_native);
            v51 = (uint64_t)v143;
            v88 = sub_1BDDB7F0C(v17, v67);
            if ((v87 & 1) != (v89 & 1))
              goto LABEL_68;
            v83 = v88;
          }
          v90 = v28;
          v55 = v143;
          if ((v87 & 1) != 0)
          {
            v56 = (uint64_t *)(v143[7] + 48 * v83);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v51 = v133;
            v57 = v131;
            *v56 = v133;
            v56[1] = v57;
            v58 = v136;
            v56[2] = v137;
            v56[3] = v58;
            v59 = v134;
            v56[4] = v135;
            v56[5] = v59;
          }
          else
          {
            v143[(v83 >> 6) + 8] |= 1 << v83;
            v91 = (uint64_t *)(v55[6] + 16 * v83);
            *v91 = v17;
            v91[1] = v67;
            v92 = v55[7] + 48 * v83;
            v93 = v131;
            *(_QWORD *)v92 = v133;
            *(_QWORD *)(v92 + 8) = v93;
            v94 = v138;
            *(_OWORD *)(v92 + 16) = v139;
            *(_OWORD *)(v92 + 32) = v94;
            v95 = v55[2];
            v96 = __OFADD__(v95, 1);
            v97 = v95 + 1;
            if (v96)
              goto LABEL_61;
            v55[2] = v97;
            sub_1BDDB6CA4(v17, v67);
            v51 = v133;
          }
          swift_bridgeObjectRelease();
          sub_1BDDB796C(v17, v67);
          sub_1BDDB796C(v17, v67);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v28 = v90;
          v53 = v129;
          v54 = v130;
          continue;
        }
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v17, v67);
      }
      else
      {
        swift_retain();
      }
      v131 = 0;
      goto LABEL_45;
    }
    break;
  }
LABEL_54:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v98 = (uint64_t *)(v121 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v99 = v98[1];
  v142[0] = *v98;
  v142[1] = v99;
  v100 = v118;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDCC228((uint64_t)v55, v142);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v101 = *(_QWORD *)(v117 + 24);
  v102 = (_QWORD *)(v100 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  swift_beginAccess();
  *v102 = v101;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v103 = *v98;
  v104 = v98[1];
  v51 = v100 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  *(_QWORD *)v51 = v103;
  *(_QWORD *)(v51 + 8) = v104;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1ED6F4510 == -1)
    goto LABEL_55;
LABEL_64:
  swift_once();
LABEL_55:
  v105 = *(_QWORD *)(v51 + 8);
  v143 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v144 = v105;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BDDAC830((uint64_t)&v143);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  v106 = v122;
  v67 = v123;
  v140 = v123;
  v141 = v122;
  sub_1BDDB6CA4(v123, v122);
  v108 = sub_1BDDB7C54(&v143, &v140);
  if (!*(_QWORD *)(v107 + 16))
  {
    ((void (*)(_QWORD **, _QWORD))v108)(&v143, 0);
    sub_1BDDB796C(v140, v141);
    swift_endAccess();
    goto LABEL_59;
  }
  v109 = *(_QWORD *)(v107 + 8);
  v96 = __OFADD__(v109, 1);
  v110 = v109 + 1;
  if (!v96)
  {
    *(_QWORD *)(v107 + 8) = v110;
    ((void (*)(_QWORD **, _QWORD))v108)(&v143, 0);
    swift_endAccess();
    sub_1BDDB796C(v140, v141);
LABEL_59:
    v143 = (_QWORD *)v67;
    v144 = v106;
    v111 = v120;
    v112 = (uint64_t)v115;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v115, 1, 1, v120);
    sub_1BDDB6CA4(v67, v106);
    sub_1BE170424((uint64_t *)&v143, v112, v118, v111, v119, v116);
    return swift_release();
  }
  __break(1u);
LABEL_66:
  sub_1BDDB796C(v17, v67);
  sub_1BDDB796C(v17, v67);
LABEL_67:
  sub_1BDD9C3E0(v132, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  __break(1u);
LABEL_68:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDE54408(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v65[2];
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82[3];
  _QWORD v83[12];

  v83[11] = *MEMORY[0x1E0C80C00];
  v68 = sub_1BE1B2534();
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68);
  v66 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_1BE1B2570();
  v69 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v70 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PartiallyOrderedReferenceMap();
  v10 = MEMORY[0x1E0C80A78](v73);
  v71 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v65 - v12;
  v15 = *a2;
  v14 = a2[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF508);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE1B61B0;
  *(_QWORD *)(inited + 32) = v15;
  *(_QWORD *)(inited + 40) = v14;
  sub_1BDDB6CA4(v15, v14);
  v17 = sub_1BDDBFED0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v81 = v17;
  v18 = MEMORY[0x1E0DEE9D8];
  v80 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v19 = type metadata accessor for RetainVisitor();
  v20 = swift_allocObject();
  v21 = sub_1BDDB6E0C(v18);
  v22 = sub_1BDDB6CE8(v18);
  *(_QWORD *)(v20 + 16) = v21;
  *(_QWORD *)(v20 + 24) = v22;
  v83[3] = v19;
  v83[4] = &off_1E7755DD0;
  v83[0] = v20;
  v23 = *(_QWORD *)(a4 + 16);
  v24 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v23 + 40);
  v65[1] = v20;
  swift_retain();
  v24(v83, a3, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  swift_beginAccess();
  v25 = swift_bridgeObjectRetain();
  sub_1BDF3076C(v25);
  v74 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v26 = v80;
  if (!v80[2])
  {
    v27 = (uint64_t)v71;
    goto LABEL_17;
  }
  v27 = (uint64_t)v71;
  while (1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v28 = v26[2];
      if (!v28)
        break;
      goto LABEL_8;
    }
    v26 = sub_1BDFCEA3C(v26);
    v28 = v26[2];
    if (!v28)
      break;
LABEL_8:
    v29 = v28 - 1;
    v30 = &v26[2 * v29];
    v32 = v30[4];
    v31 = v30[5];
    v26[2] = v29;
    v80 = v26;
    sub_1BDDB6CA4(v32, v31);
    v33 = sub_1BDDBC6BC(v82, v32, v31);
    sub_1BDDB796C(v82[0], v82[1]);
    if ((v33 & 1) == 0)
      goto LABEL_5;
    sub_1BDD9C318(v74, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v34 = *(_QWORD *)&v13[*(int *)(v73 + 20)];
    if (*(_QWORD *)(v34 + 16))
    {
      sub_1BDDB6CA4(v32, v31);
      v35 = sub_1BDDB7F0C(v32, v31);
      if ((v36 & 1) == 0)
      {
        sub_1BDDB796C(v32, v31);
        goto LABEL_4;
      }
      v37 = *(_QWORD *)(v34 + 56) + 48 * v35;
      v38 = *(_QWORD *)(v37 + 32);
      v39 = *(_QWORD *)(v37 + 40);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v32, v31);
      sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      v27 = (uint64_t)v71;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1BDF3076C(v38);
      swift_beginAccess();
      sub_1BDDB99FC(v38, v39);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v32, v31);
      v26 = v80;
      if (!v80[2])
        goto LABEL_15;
    }
    else
    {
LABEL_4:
      sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_5:
      sub_1BDDB796C(v32, v31);
      if (!v26[2])
        goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  v17 = v81;
LABEL_17:
  v40 = v70;
  sub_1BE1B2564();
  swift_bridgeObjectRetain_n();
  v41 = sub_1BDDC48BC(v17);
  swift_bridgeObjectRelease();
  v82[0] = (uint64_t)v41;
  sub_1BDE72DD0(v82);
  swift_bridgeObjectRelease();
  v42 = v82[0];
  v43 = *(_QWORD *)(v82[0] + 16);
  if (v43)
  {
    swift_beginAccess();
    v65[0] = v42;
    v44 = v42 + 40;
    v46 = *(_QWORD *)(v42 + 32);
    v45 = *(_QWORD *)(v42 + 40);
    sub_1BDD9C318(v74, v27, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v47 = *(_QWORD *)(v27 + *(int *)(v73 + 20));
    v48 = *(_QWORD *)(v47 + 16);
    sub_1BDDB6CA4(v46, v45);
    if (v48)
    {
      v79 = v43;
      v49 = v27;
      sub_1BDDB6CA4(v46, v45);
      sub_1BDDB6CA4(v46, v45);
      v50 = sub_1BDDB7F0C(v46, v45);
      if ((v51 & 1) != 0)
      {
        v76 = v44 + 16;
        v52 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 48 * v50);
        v53 = *v52;
        v54 = v52[4];
        v55 = v52[5];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v77 = v54;
        swift_bridgeObjectRetain();
        v75 = v55;
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v46, v45);
        sub_1BDDB796C(v46, v45);
        sub_1BDD9C3E0(v49, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        v56 = (char *)&loc_1BDE54B00 + dword_1BDE54ED4[v45 >> 62];
        v78 = v53;
        __asm { BR              X8 }
      }
      sub_1BDDB796C(v46, v45);
      sub_1BDDB796C(v46, v45);
    }
    sub_1BDD9C3E0(v27, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    __break(1u);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v57 = v66;
  sub_1BE1B2558();
  sub_1BDD8422C(&qword_1ED6EE730, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA92F8], MEMORY[0x1E0CA92F0]);
  v58 = v68;
  v59 = sub_1BE1B2540();
  v61 = v60;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v57, v58);
  v62 = sub_1BDFCFD98(v59, v61);
  swift_bridgeObjectRelease();
  v63 = sub_1BDDC4278(v62);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v72);
  return v63;
}

uint64_t sub_1BDE54EE4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(__int128 *__return_ptr, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(__int128 *__return_ptr, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  __int128 v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD v97[3];
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;

  v79 = a2;
  v4 = type metadata accessor for PartiallyOrderedReferenceMap();
  v5 = MEMORY[0x1E0C80A78](v4);
  v92 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v95 = (uint64_t)&v78 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v78 - v9;
  v114 = MEMORY[0x1E0DEE9E0];
  v82 = v2;
  v11 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v93 = v11;
  sub_1BDD9C318(v11, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v14 = *v12;
  v13 = v12[1];
  v15 = *(_QWORD *)&v10[*(int *)(v4 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = swift_bridgeObjectRetain();
  v17 = sub_1BDDC7A88(v16);
  v81 = v10;
  sub_1BDD9C3E0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v105 = v15;
  v106 = v17;
  v80 = xmmword_1BE1B9200;
  v107 = xmmword_1BE1B9200;
  v108 = 0u;
  v109 = 0u;
  v110 = v14;
  v111 = v13;
  v112 = 0;
  v113 = 0;
  v78 = a1;
  v94 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD93FBC((uint64_t *)&v99);
  v18 = v102;
  v91 = v4;
  if (!v102)
  {
LABEL_14:
    v38 = *((_QWORD *)&v107 + 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDD946A4(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = (uint64_t)v81;
    sub_1BDD9C318(v94, (uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v40 = (uint64_t *)(v82 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    swift_beginAccess();
    v42 = *v40;
    v41 = v40[1];
    v43 = *(_QWORD *)(v39 + *(int *)(v4 + 20));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v44 = swift_bridgeObjectRetain();
    v45 = sub_1BDDC7A88(v44);
    sub_1BDD9C3E0(v39, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v105 = v43;
    v106 = v45;
    v107 = v80;
    v108 = 0u;
    v109 = 0u;
    v110 = v42;
    v111 = v41;
    v112 = 0;
    v113 = 0;
    sub_1BDD93FBC((uint64_t *)&v99);
    v46 = v92;
    if (!v102)
    {
LABEL_27:
      v64 = *((_QWORD *)&v107 + 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDD946A4(v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v65 = swift_bridgeObjectRetain();
      v66 = sub_1BDDC6E70(v65);
      v67 = v78;
      v68 = sub_1BDE55938(v66, v82);
      v70 = v69;
      swift_bridgeObjectRelease();
      swift_retain();
      v71 = sub_1BDE75A70(v68, v67);
      swift_release();
      if (*(_QWORD *)(v71 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF98);
        v72 = sub_1BE1B3260();
      }
      else
      {
        v72 = MEMORY[0x1E0DEE9E0];
      }
      v105 = v72;
      v73 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1BDE67128(v73, 1, &v105);
      swift_bridgeObjectRelease();
      v74 = v105;
      v75 = v114;
      if (*(_QWORD *)(v114 + 16))
      {
        result = swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        result = swift_bridgeObjectRelease();
        v75 = 0;
        v74 = 0;
        v70 = 0;
      }
      v77 = v79;
      *v79 = v75;
      v77[1] = v74;
      v77[2] = v70;
      return result;
    }
    v47 = *((_QWORD *)&v99 + 1);
    v48 = v99;
    v49 = v100;
    v50 = v103;
    v51 = v104;
    while (1)
    {
      v95 = v50;
      sub_1BDD9C318(v93, v46, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v52 = *(_QWORD *)(v46 + *(int *)(v4 + 20));
      if (!*(_QWORD *)(v52 + 16))
        goto LABEL_17;
      sub_1BDDB6CA4(v48, v47);
      v53 = sub_1BDDB7F0C(v48, v47);
      if ((v54 & 1) == 0)
        break;
      v90 = v49;
      v94 = v51;
      v55 = (uint64_t *)(*(_QWORD *)(v52 + 56) + 48 * v53);
      v56 = *v55;
      v58 = v55[2];
      v57 = v55[3];
      v59 = v55[4];
      swift_retain();
      swift_bridgeObjectRetain();
      v89 = v57;
      swift_bridgeObjectRetain();
      v88 = v59;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v48, v47);
      sub_1BDD9C3E0(v92, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      if (!v56)
        goto LABEL_37;
      v87 = v58;
      if (!v90)
        goto LABEL_36;
      v60 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v56 + 128);
      swift_retain();
      v61 = swift_retain();
      v60(&v99, v61);
      swift_release();
      swift_release();
      if (v101)
      {
        sub_1BDE77688(&v99, v97);
        sub_1BDDB6CA4(v48, v47);
        v62 = v114;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v96 = v62;
        sub_1BE154BAC(v97, v48, v47, isUniquelyReferenced_nonNull_native);
        v114 = v96;
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v48, v47);
      }
      else
      {
        sub_1BDDB6CA4(v48, v47);
        sub_1BDD86E30((uint64_t)&v99, qword_1EF52B750);
        sub_1BDEF0A54(v48, v47, v97);
        sub_1BDDB796C(v48, v47);
        sub_1BDD86E30((uint64_t)v97, qword_1EF52B750);
      }
      sub_1BDDB796C(v48, v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v4 = v91;
      v46 = v92;
LABEL_18:
      sub_1BDD93FBC((uint64_t *)&v99);
      v47 = *((_QWORD *)&v99 + 1);
      v48 = v99;
      v49 = v100;
      v50 = v103;
      v51 = v104;
      if (!v102)
        goto LABEL_27;
    }
    sub_1BDDB796C(v48, v47);
LABEL_17:
    sub_1BDD9C3E0(v46, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    sub_1BDDB796C(v48, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_18;
  }
  v20 = *((_QWORD *)&v99 + 1);
  v19 = v99;
  v21 = v100;
  v22 = v103;
  v23 = v104;
  while (1)
  {
    v24 = v95;
    sub_1BDD9C318(v94, v95, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v25 = *(_QWORD *)(v24 + *(int *)(v4 + 20));
    if (!*(_QWORD *)(v25 + 16))
      goto LABEL_4;
    sub_1BDDB6CA4(v19, v20);
    v26 = sub_1BDDB7F0C(v19, v20);
    if ((v27 & 1) != 0)
      break;
    sub_1BDDB796C(v19, v20);
LABEL_4:
    sub_1BDD9C3E0(v95, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    sub_1BDDB796C(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_5:
    sub_1BDD93FBC((uint64_t *)&v99);
    v20 = *((_QWORD *)&v99 + 1);
    v19 = v99;
    v21 = v100;
    v18 = v102;
    v22 = v103;
    v23 = v104;
    if (!v102)
      goto LABEL_14;
  }
  v89 = v18;
  v90 = v21;
  v84 = v23;
  v28 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 48 * v26);
  v29 = *v28;
  v31 = v28[2];
  v30 = v28[3];
  v33 = v28[4];
  v32 = v28[5];
  swift_retain();
  v88 = v31;
  swift_bridgeObjectRetain();
  v87 = v30;
  swift_bridgeObjectRetain();
  v86 = v33;
  swift_bridgeObjectRetain();
  v85 = v32;
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v19, v20);
  sub_1BDD9C3E0(v95, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  if (!v90)
    goto LABEL_35;
  v83 = v22;
  if (v29)
  {
    v34 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v90 + 128);
    swift_retain();
    v35 = swift_retain();
    v34(&v99, v35);
    swift_release();
    swift_release();
    if (v101)
    {
      sub_1BDE77688(&v99, v97);
      sub_1BDDB6CA4(v19, v20);
      v36 = v114;
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v98 = v36;
      sub_1BE154BAC(v97, v19, v20, v37);
      v114 = v98;
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v19, v20);
    }
    else
    {
      sub_1BDDB6CA4(v19, v20);
      sub_1BDD86E30((uint64_t)&v99, qword_1EF52B750);
      sub_1BDEF0A54(v19, v20, v97);
      sub_1BDDB796C(v19, v20);
      sub_1BDD86E30((uint64_t)v97, qword_1EF52B750);
    }
    sub_1BDDB796C(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v4 = v91;
    goto LABEL_5;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1BDE55938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int64_t i;
  unint64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  unint64_t v99;
  int64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _UNKNOWN **v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v96 = type metadata accessor for PartiallyOrderedReferenceMap();
  v6 = MEMORY[0x1E0C80A78](v96);
  v102 = (uint64_t)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v93 = (uint64_t)&v87 - v8;
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1BDE768D8(v9, a2);
  v88 = v3;
  swift_release();
  v110 = v10;
  v108 = a1;
  v109 = MEMORY[0x1E0DEE9E8];
  v11 = swift_bridgeObjectRetain();
  v12 = sub_1BDDC48BC(v11);
  if (!v12[2])
  {
LABEL_73:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v110;
  }
  v95 = a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v101 = (uint64_t *)(a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  v91 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v13 = v12;
  result = swift_beginAccess();
  v15 = v13;
  v16 = 0;
  v17 = v15[2];
  while (1)
  {
    if (v16 >= v17)
      goto LABEL_76;
    v94 = v15;
    v92 = v16;
    v21 = &v15[2 * v16];
    v22 = v21[4];
    v23 = v21[5];
    v24 = v93;
    sub_1BDD9C318(v91, v93, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v25 = *(_QWORD *)(v24 + *(int *)(v96 + 20));
    v26 = *(_QWORD *)(v25 + 16);
    sub_1BDDB6CA4(v22, v23);
    if (v26)
    {
      v27 = sub_1BDDB7F0C(v22, v23);
      if ((v28 & 1) != 0)
        break;
    }
    sub_1BDD9C3E0(v93, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v18 = v92;
    v19 = v22;
    v20 = v23;
LABEL_4:
    v16 = v18 + 1;
    result = sub_1BDDB796C(v19, v20);
    v15 = v94;
    v17 = v94[2];
    if (v16 >= v17)
      goto LABEL_73;
  }
  v89 = v23;
  v90 = v22;
  v29 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 48 * v27);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0(v93, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_72:
    v18 = v92;
    v19 = v90;
    v20 = v89;
    goto LABEL_4;
  }
  v30 = type metadata accessor for RetainVisitor();
  v31 = swift_allocObject();
  v32 = MEMORY[0x1E0DEE9D8];
  v33 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v34 = sub_1BDDB6CE8(v32);
  *(_QWORD *)(v31 + 16) = v33;
  *(_QWORD *)(v31 + 24) = v34;
  v106 = v30;
  v107 = &off_1E7755DD0;
  v104 = v31;
  v35 = *(void (**)(uint64_t *))(*(_QWORD *)v29 + 120);
  swift_retain();
  v35(&v104);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
  swift_release();
  swift_beginAccess();
  v36 = *(_QWORD *)(v31 + 16);
  v37 = *(_QWORD *)(v31 + 24);
  swift_bridgeObjectRetain();
  v103 = v37;
  swift_bridgeObjectRetain();
  swift_release();
  v38 = *(_QWORD *)(v36 + 64);
  v97 = v36 + 64;
  v39 = 1 << *(_BYTE *)(v36 + 32);
  if (v39 < 64)
    v40 = ~(-1 << v39);
  else
    v40 = -1;
  v41 = v40 & v38;
  swift_bridgeObjectRetain();
  result = swift_beginAccess();
  v42 = 0;
  v98 = (unint64_t)(v39 + 63) >> 6;
  while (2)
  {
    if (v41)
    {
      v48 = __clz(__rbit64(v41));
      v41 &= v41 - 1;
      v49 = v48 | (v42 << 6);
      goto LABEL_33;
    }
    v50 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    if (v50 >= v98)
      goto LABEL_43;
    v51 = *(_QWORD *)(v97 + 8 * v50);
    ++v42;
    if (v51)
      goto LABEL_32;
    v42 = v50 + 1;
    if (v50 + 1 >= v98)
      goto LABEL_43;
    v51 = *(_QWORD *)(v97 + 8 * v42);
    if (v51)
      goto LABEL_32;
    v42 = v50 + 2;
    if (v50 + 2 >= v98)
      goto LABEL_43;
    v51 = *(_QWORD *)(v97 + 8 * v42);
    if (v51)
      goto LABEL_32;
    v42 = v50 + 3;
    if (v50 + 3 >= v98)
      goto LABEL_43;
    v51 = *(_QWORD *)(v97 + 8 * v42);
    if (v51)
    {
LABEL_32:
      v41 = (v51 - 1) & v51;
      v49 = __clz(__rbit64(v51)) + (v42 << 6);
LABEL_33:
      v53 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * v49);
      v54 = *v53;
      v55 = v53[1];
      sub_1BDDB6CA4(*v53, v55);
      sub_1BDDB6CA4(v54, v55);
      v56 = sub_1BDDBC6BC(&v104, v54, v55);
      sub_1BDDB796C(v104, v105);
      if ((v56 & 1) != 0)
      {
        v57 = v102;
        sub_1BDD9C318(v95, v102, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        v58 = *(_QWORD *)(v57 + *(int *)(v96 + 20));
        if (!*(_QWORD *)(v58 + 16))
        {
LABEL_37:
          sub_1BDD9C3E0(v102, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          sub_1BDDBA008(0, 0, 0);
          sub_1BDDB6CA4(v54, v55);
          sub_1BDDBC6BC(&v104, v54, v55);
          sub_1BDDB796C(v104, v105);
          sub_1BDDB6CA4(v54, v55);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v61 = v94;
          else
            v61 = sub_1BDE0667C(0, v94[2] + 1, 1, v94);
          v63 = v61[2];
          v62 = v61[3];
          if (v63 >= v62 >> 1)
            v61 = sub_1BDE0667C((_QWORD *)(v62 > 1), v63 + 1, 1, v61);
          v61[2] = v63 + 1;
          v94 = v61;
          v64 = &v61[2 * v63];
          v64[4] = v54;
          v64[5] = v55;
          goto LABEL_14;
        }
        sub_1BDDB6CA4(v54, v55);
        sub_1BDDB6CA4(v54, v55);
        v59 = sub_1BDDB7F0C(v54, v55);
        if ((v60 & 1) == 0)
        {
          sub_1BDDB796C(v54, v55);
          sub_1BDDB796C(v54, v55);
          goto LABEL_37;
        }
        v43 = (uint64_t *)(*(_QWORD *)(v58 + 56) + 48 * v59);
        v45 = *v43;
        v44 = v43[1];
        v99 = v41;
        v100 = v42;
        v46 = v43[2];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v54, v55);
        sub_1BDDB796C(v54, v55);
        sub_1BDD9C3E0(v102, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        v47 = v46;
        v41 = v99;
        v42 = v100;
        sub_1BDDBA008(v45, v44, v47);
      }
LABEL_14:
      result = sub_1BDDB796C(v54, v55);
      continue;
    }
    break;
  }
  v52 = v50 + 4;
  if (v52 >= v98)
  {
LABEL_43:
    swift_release();
    result = swift_bridgeObjectRelease();
    v65 = 0;
    v66 = v103 + 64;
    v67 = 1 << *(_BYTE *)(v103 + 32);
    if (v67 < 64)
      v68 = ~(-1 << v67);
    else
      v68 = -1;
    v69 = v68 & *(_QWORD *)(v103 + 64);
    for (i = (unint64_t)(v67 + 63) >> 6; v69; result = sub_1BDDB796C(v79, v78))
    {
      while (1)
      {
        v71 = __clz(__rbit64(v69));
        v69 &= v69 - 1;
        v72 = v71 | (v65 << 6);
LABEL_66:
        v76 = 16 * v72;
        v77 = (uint64_t *)(*(_QWORD *)(v103 + 48) + v76);
        v79 = *v77;
        v78 = v77[1];
        v80 = *(_QWORD *)(*(_QWORD *)(v103 + 56) + v76);
        v81 = v101;
        swift_beginAccess();
        v82 = *v81;
        v83 = *(_QWORD *)(v82 + 16);
        sub_1BDDB6CA4(v79, v78);
        swift_retain();
        if (v83)
        {
          v84 = sub_1BDDB2730(v79, v78, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
          if ((v85 & 1) != 0)
          {
            v86 = *(_QWORD *)(*(_QWORD *)(v82 + 56) + 16 * v84);
            swift_retain();
            if (v86)
              break;
          }
        }
        swift_endAccess();
        swift_retain();
        sub_1BDE69020(&v104, v80);
        sub_1BDDB796C(v79, v78);
        swift_release();
        result = swift_release();
        if (!v69)
          goto LABEL_50;
      }
      swift_endAccess();
      swift_release();
      swift_release();
    }
LABEL_50:
    v73 = v65 + 1;
    if (__OFADD__(v65, 1))
      goto LABEL_75;
    if (v73 < i)
    {
      v74 = *(_QWORD *)(v66 + 8 * v73);
      ++v65;
      if (v74)
        goto LABEL_65;
      v65 = v73 + 1;
      if (v73 + 1 < i)
      {
        v74 = *(_QWORD *)(v66 + 8 * v65);
        if (v74)
          goto LABEL_65;
        v65 = v73 + 2;
        if (v73 + 2 < i)
        {
          v74 = *(_QWORD *)(v66 + 8 * v65);
          if (v74)
            goto LABEL_65;
          v65 = v73 + 3;
          if (v73 + 3 < i)
          {
            v74 = *(_QWORD *)(v66 + 8 * v65);
            if (v74)
              goto LABEL_65;
            v75 = v73 + 4;
            if (v75 < i)
            {
              v74 = *(_QWORD *)(v66 + 8 * v75);
              if (!v74)
              {
                while (1)
                {
                  v65 = v75 + 1;
                  if (__OFADD__(v75, 1))
                    goto LABEL_78;
                  if (v65 >= i)
                    goto LABEL_71;
                  v74 = *(_QWORD *)(v66 + 8 * v65);
                  ++v75;
                  if (v74)
                    goto LABEL_65;
                }
              }
              v65 = v75;
LABEL_65:
              v69 = (v74 - 1) & v74;
              v72 = __clz(__rbit64(v74)) + (v65 << 6);
              goto LABEL_66;
            }
          }
        }
      }
    }
LABEL_71:
    swift_release();
    goto LABEL_72;
  }
  v51 = *(_QWORD *)(v97 + 8 * v52);
  if (v51)
  {
    v42 = v52;
    goto LABEL_32;
  }
  while (1)
  {
    v42 = v52 + 1;
    if (__OFADD__(v52, 1))
      break;
    if (v42 >= v98)
      goto LABEL_43;
    v51 = *(_QWORD *)(v97 + 8 * v42);
    ++v52;
    if (v51)
      goto LABEL_32;
  }
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
  return result;
}

uint64_t sub_1BDE562A4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD v22[3];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  if (qword_1ED6F4510 != -1)
    swift_once();
  v10 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 8);
  v22[0] = MEMORY[0x1E0DEE9E0];
  v22[1] = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BDDAC830((uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if ((a1 & 1) != 0)
  {
    v12 = qword_1ED6F3700;
    swift_retain();
    if (v12 != -1)
      swift_once();
    type metadata accessor for ReplicaState();
    sub_1BE1B2E40();
    swift_release();
    v13 = v22[0];
  }
  else
  {
    v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState)
        + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
    type metadata accessor for ReplicaState();
    v13 = swift_allocObject();
    v15 = v13 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
    v16 = type metadata accessor for Replica();
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
    v17(v15, 1, 1, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v9, v6);
    *(_QWORD *)(v13 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
    *(_QWORD *)(v13 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
    v17((uint64_t)v5, 1, 1, v16);
    swift_beginAccess();
    sub_1BDDACC5C((uint64_t)v5, v15);
    swift_endAccess();
  }
  swift_allocObject();
  v18 = swift_retain();
  v19 = sub_1BDDD54B4(v18, v13);
  swift_release();
  return v19;
}

uint64_t sub_1BDE565B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[4];

  v7 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v10 = a1[1];
  v12 = v3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v12, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v26[0] = v11;
  v26[1] = v10;
  v14 = type metadata accessor for Ref(0, a2, a3, v13);
  v15 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v14);
  Reference.identity.getter(v14, v15);
  v16 = v24;
  v17 = v25;
  v18 = *(_QWORD *)&v9[*(int *)(v7 + 20)];
  if (!*(_QWORD *)(v18 + 16))
    goto LABEL_6;
  sub_1BDDB6CA4(v24, v25);
  v19 = sub_1BDDB7F0C(v16, v17);
  if ((v20 & 1) == 0)
  {
    sub_1BDDB796C(v16, v17);
LABEL_6:
    sub_1BDDB796C(v16, v17);
    result = sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    __break(1u);
    goto LABEL_7;
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 48 * v19);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v16, v17);
  sub_1BDDB796C(v16, v17);
  sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v21)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v21 + 88))(v26, result);
    swift_release();
    return swift_dynamicCast();
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*sub_1BDE567D8(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*result)(uint64_t **, char);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v10 = malloc(0x100uLL);
  *a1 = v10;
  v10[23] = a3;
  v10[24] = v4;
  v11 = *(_QWORD *)(a3 - 8);
  v10[25] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  v13 = *a2;
  v14 = a2[1];
  v10[26] = v12;
  v10[27] = v13;
  v10[28] = v14;
  v10[19] = v13;
  v10[20] = v14;
  v16 = type metadata accessor for Ref(0, a3, a4, v15);
  v10[29] = v16;
  v17 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v16);
  v10[30] = v17;
  Reference.identity.getter(v16, v17);
  v18 = v41;
  v19 = v42;
  v20 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v21 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1BDDB6CA4(v41, v42);
  sub_1BDDB6CA4(v41, v42);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v40 = *(_QWORD *)(v20 + v21);
  v23 = v40;
  *(_QWORD *)(v20 + v21) = 0x8000000000000000;
  sub_1BDDB6CA4(v18, v19);
  v25 = sub_1BDDB7F0C(v18, v19);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = v24;
  if (*(_QWORD *)(v23 + 24) >= v28)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    sub_1BDDB7F70();
    if ((v5 & 1) != 0)
      goto LABEL_8;
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1BDDC50C4(v28, isUniquelyReferenced_nonNull_native);
  v29 = sub_1BDDB7F0C(v18, v19);
  if ((v5 & 1) != (v30 & 1))
  {
LABEL_16:
    result = (void (*)(uint64_t **, char))sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v25 = v29;
  if ((v5 & 1) == 0)
    goto LABEL_14;
LABEL_8:
  v31 = (__int128 *)(*(_QWORD *)(v40 + 56) + 48 * v25);
  v32 = v31[1];
  v37 = *v31;
  v38 = v32;
  v39 = v31[2];
  v33 = v37;
  if (!(_QWORD)v37)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(_QWORD *)&v37 = (*(uint64_t (**)(void))(*(_QWORD *)v37 + 160))();
    swift_release();
    v33 = v37;
  }
  v34 = type metadata accessor for CRDTBox();
  v10[31] = v34;
  v10[3] = v34;
  v10[4] = &off_1E775A998;
  *v10 = v33;
  swift_retain();
  sub_1BDDBA064((uint64_t *)&v37, 1, &v40, v25, v18, v19);
  sub_1BDDBA008(v37, *((uint64_t *)&v37 + 1), v38);
  sub_1BDDB796C(v18, v19);
  *(_QWORD *)(v20 + v21) = v40;
  sub_1BDDB796C(v18, v19);
  swift_endAccess();
  sub_1BDDB796C(v18, v19);
  v35 = sub_1BDDB796C(v18, v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 240))(v35);
  swift_dynamicCast();
  return sub_1BDE56AE8;
}

void sub_1BDE56AE8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11[4];

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[26];
    (*(void (**)(void *, uint64_t))(v2[25] + 8))(v3, v2[23]);
  }
  else
  {
    v5 = v2[28];
    v4 = v2[29];
    v3 = (void *)v2[26];
    v6 = v2[27];
    v7 = v2[25];
    v10 = v2[30];
    v8 = v2[23];
    __swift_project_boxed_opaque_existential_1(v2, v2[31]);
    v2[12] = v8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 9);
    (*(void (**)(uint64_t *, void *, uint64_t))(v7 + 16))(boxed_opaque_existential_1, v3, v8);
    sub_1BE18B46C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 9));
    v2[21] = v6;
    v2[22] = v5;
    Reference.identity.getter(v4, v10);
    swift_beginAccess();
    sub_1BDDBC6BC(v11, v11[2], v11[3]);
    swift_endAccess();
    sub_1BDDB796C(v11[0], v11[1]);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v8);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  free(v3);
  free(v2);
}

uint64_t sub_1BDE56C40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD v29[2];

  v9 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v12 = a1[1];
  v14 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  *(_QWORD *)&v29[0] = v13;
  *((_QWORD *)&v29[0] + 1) = v12;
  v16 = type metadata accessor for WeakRef(0, a2, a3, v15);
  v17 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakRef<A>, v16);
  Reference.identity.getter(v16, v17);
  v18 = v27;
  v19 = v28;
  v20 = *(_QWORD *)&v11[*(int *)(v9 + 20)];
  if (!*(_QWORD *)(v20 + 16))
    goto LABEL_6;
  sub_1BDDB6CA4(v27, v28);
  v21 = sub_1BDDB7F0C(v18, v19);
  if ((v22 & 1) == 0)
  {
    sub_1BDDB796C(v18, v19);
LABEL_6:
    sub_1BDDB796C(v18, v19);
    sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    memset(v29, 0, sizeof(v29));
    goto LABEL_7;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 48 * v21);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v18, v19);
  sub_1BDDB796C(v18, v19);
  sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v23)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v23 + 88))(v29, result);
    swift_release();
LABEL_7:
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF52B750);
    v25 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, v25 ^ 1u, 1, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE56E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  void (*v29)(_QWORD *);
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *);
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51[3];
  uint64_t v52;
  unint64_t v53;

  v45 = a4;
  v7 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v40 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v40 - v16;
  v18 = *(uint64_t **)a2;
  v19 = *(_QWORD *)(a2 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    v20 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v20(a1, v7);
    sub_1BDDB796C((uint64_t)v18, v19);
    return ((uint64_t (*)(char *, uint64_t))v20)(v11, v7);
  }
  v42 = v7;
  v43 = a1;
  v40 = v8;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v11, a3);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, a3);
  v22 = v45;
  sub_1BDD85BB4((uint64_t)v15, a3, &v47);
  v46 = v47;
  v47 = v18;
  v48 = v19;
  v44 = a3;
  v24 = type metadata accessor for WeakRef(0, a3, v22, v23);
  v25 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakRef<A>, v24);
  Reference.identity.getter(v24, v25);
  v27 = v52;
  v26 = v53;
  swift_beginAccess();
  v49 = v27;
  v50 = v26;
  v29 = sub_1BDDB7C54(&v47, &v49);
  v30 = v28[2];
  v31 = v17;
  v41 = v12;
  if (v30)
  {
    v32 = v28;
    result = *v28;
    if (!*v28)
    {
      __break(1u);
      return result;
    }
    v33 = v24;
    v34 = v40;
    v35 = v44;
    if (v46 != (uint64_t *)result)
    {
      v36 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        *v32 = (*(uint64_t (**)(void))(*(_QWORD *)*v32 + 160))();
        swift_release();
      }
      (*(void (**)(uint64_t *))(*(_QWORD *)*v32 + 96))(v46);
      v29 = v36;
      v35 = v44;
    }
    v37 = v31;
    ((void (*)(uint64_t **, _QWORD))v29)(&v47, 0);
    swift_endAccess();
    sub_1BDDB796C(v49, v50);
  }
  else
  {
    v33 = v24;
    v37 = v31;
    ((void (*)(uint64_t **, _QWORD))v29)(&v47, 0);
    sub_1BDDB796C(v49, v50);
    swift_endAccess();
    v34 = v40;
    v35 = v44;
  }
  v47 = v18;
  v48 = v19;
  Reference.identity.getter(v33, v25);
  sub_1BDDB796C((uint64_t)v18, v19);
  v38 = v52;
  v39 = v53;
  swift_beginAccess();
  sub_1BDDBC6BC(v51, v38, v39);
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v43, v42);
  sub_1BDDB796C(v51[0], v51[1]);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v37, v35);
}

uint64_t sub_1BDE57208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  __n128 v15;
  __n128 v16;

  type metadata accessor for TypedReference(0, a2, a3, a4);
  v8 = type metadata accessor for Capsule(0, a2, *(_QWORD *)(a3 + 16), v7);
  Capsule<>.rootID.getter((uint64_t *)&v16);
  v15 = v16;
  sub_1BDF158F0(&v15);
  v10 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B738);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE1B9210;
  *(_QWORD *)(inited + 32) = v10;
  v16.n128_u64[0] = inited;
  sub_1BE1B2990();
  v12 = v16.n128_u64[0];
  swift_retain();
  v13 = sub_1BDEF9F90(v12);
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + *(int *)(v8 + 40));
  if (result)
  {
    sub_1BDDD5BB8(result, 0, 0, v13);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDE57314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  void (*v13)(__n128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  __n128 v29;
  __n128 v30[2];

  v7 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for TypedReference(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v13 = *(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(a5 + 48);
  v13(v30, a3, a5);
  v29 = v30[0];
  sub_1BDF158F0(&v29);
  v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B738);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE1B9210;
  *(_QWORD *)(inited + 32) = v15;
  v30[0].n128_u64[0] = inited;
  sub_1BE1B2990();
  v17 = v30[0].n128_u64[0];
  swift_retain();
  v18 = sub_1BDEF9F90(v17);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF508);
  v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1BE1B61B0;
  ((void (*)(uint64_t, uint64_t))v13)(a3, a5);
  v20 = sub_1BDDBFED0(v19);
  swift_setDeallocating();
  swift_arrayDestroy();
  v21 = sub_1BDF172DC(v20, v7);
  swift_bridgeObjectRelease();
  result = type metadata accessor for Capsule(0, a4, a6, v22);
  v24 = *(_QWORD *)(a2 + *(int *)(result + 40));
  if (v24)
  {
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v21;
    sub_1BDDD5BB8(v24, sub_1BDE77C90, v25, v18);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDE57530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    v4 = sub_1BE1B371C() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_1BDE57F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[5];

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TypedRefVisitor();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9E8];
  v11 = *(_QWORD *)(a3 + 8);
  v13 = type metadata accessor for Capsule(0, a2, v11, v12);
  Capsule<>.root.getter(v13, a3);
  v19[3] = v9;
  v19[4] = &off_1E7757C20;
  v19[0] = v10;
  v14 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v11 + 40);
  swift_retain();
  v14(v19, a2, v11);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  v16 = *(_QWORD *)(a1 + *(int *)(v13 + 40));
  if (v16)
  {
    swift_beginAccess();
    v17 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRetain();
    sub_1BDDD5BB8(v16, 0, 0, v17);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDE58070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t *v14;
  uint64_t *v15;

  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v7;
  v9 = v7[1];
  (*(void (**)(char *, uint64_t))(v10 + 16))(v6, v11);
  sub_1BDD85BB4((uint64_t)v6, a2, &v15);
  v13[1] = v9;
  v14 = v15;
  v13[0] = v8;
  sub_1BDE532A0((unint64_t *)&v14, v13, a3);
  return swift_release();
}

void sub_1BDE58130(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(_QWORD *);
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40[3];
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v37 = a2;
  v38 = a3;
  v36 = a4;
  v33 = *(_QWORD *)(a2 - 8);
  v34 = a1;
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B1F58();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1F4C();
  v42.n128_u64[0] = sub_1BDDC4278((uint64_t)&unk_1E7754628);
  v42.n128_u64[1] = v14;
  v15 = sub_1BDEE7C7C();
  v17 = v16;
  sub_1BE1B1EA4();
  sub_1BDDB796C(v15, v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18 = v42;
  v35 = v4;
  v19 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v19, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  if (!*(_QWORD *)(*(_QWORD *)&v9[*(int *)(v7 + 20)] + 16))
    goto LABEL_11;
  sub_1BDDB6CA4(v18.n128_i64[0], v18.n128_u64[1]);
  sub_1BDDB7F0C(v18.n128_i64[0], v18.n128_i64[1]);
  if ((v20 & 1) == 0)
  {
    sub_1BDDB796C(v18.n128_i64[0], v18.n128_u64[1]);
LABEL_11:
    sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v6, v34, v37);
    sub_1BDD85BB4((uint64_t)v6, v26, (uint64_t **)&v42);
    v27 = v42.n128_u64[0];
    v28 = MEMORY[0x1E0DEE9D8];
    v29 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v30 = sub_1BDDB6CE8(v28);
    sub_1BDDB6E0C(v28);
    sub_1BDDB6CE8(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = MEMORY[0x1E0DEE9E0];
    swift_bridgeObjectRelease_n();
    v42 = (__n128)v27;
    v43 = v31;
    v44 = v31;
    v45 = v29;
    v46 = v30;
    v41 = v18;
    swift_beginAccess();
    sub_1BDD8B18C((__int128 *)&v42, (uint64_t *)&v41);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
LABEL_12:
    v32 = v36;
    swift_beginAccess();
    sub_1BDDB6CA4(v18.n128_i64[0], v18.n128_u64[1]);
    sub_1BDDBC6BC(v40, v18.n128_i64[0], v18.n128_u64[1]);
    swift_endAccess();
    sub_1BDDB796C(v40[0], v40[1]);
    v42 = v18;
    WeakRef.init(id:)(&v42, v32);
    return;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v18.n128_i64[0], v18.n128_u64[1]);
  sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  v41 = v18;
  sub_1BDDB6CA4(v18.n128_i64[0], v18.n128_u64[1]);
  v22 = sub_1BDDB7C54(&v42, (uint64_t *)&v41);
  if (!*(_QWORD *)(v21 + 16))
  {
    ((void (*)(__n128 *, _QWORD))v22)(&v42, 0);
    sub_1BDDB796C(v41.n128_i64[0], v41.n128_u64[1]);
    swift_endAccess();
    goto LABEL_12;
  }
  v23 = v21;
  v24 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v6, v34, v37);
  sub_1BDD85BB4((uint64_t)v6, v24, &v39);
  if (*(_QWORD *)v23)
  {
    v25 = v39;
    if (v39 != *(uint64_t **)v23)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        *(_QWORD *)v23 = (*(uint64_t (**)(void))(**(_QWORD **)v23 + 160))();
        swift_release();
      }
      (*(void (**)(uint64_t *))(**(_QWORD **)v23 + 96))(v25);
    }
    ((void (*)(__n128 *, _QWORD))v22)(&v42, 0);
    swift_endAccess();
    swift_release();
    sub_1BDDB796C(v41.n128_i64[0], v41.n128_u64[1]);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_1BDE585DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Capsule(0, a2, a3, a4) + 40));
  if (result)
    return sub_1BDDD5BB8(result, 0, 0, 0);
  __break(1u);
  return result;
}

uint64_t sub_1BDE5861C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24[2];
  uint64_t v25[3];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = MEMORY[0x1E0C80A78](v11);
  v16 = &v23[-v15];
  if (*(_QWORD *)(a3 + 16))
  {
    v17 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
    if ((a4 & 1) != 0)
    {
      swift_beginAccess();
      sub_1BDDB2D90(a1, a2 & 1, a3);
      swift_endAccess();
      swift_beginAccess();
      sub_1BDD8D52C(a1, a2 & 1, a3);
      result = swift_endAccess();
      *(_QWORD *)(v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = a1;
    }
    else
    {
      swift_beginAccess();
      v18 = *(_QWORD *)(v17 + 8);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1BDDB2D90(a1, a2 & 1, a3);
      swift_endAccess();
      swift_beginAccess();
      sub_1BDD8D52C(a1, a2 & 1, a3);
      swift_endAccess();
      *(_QWORD *)(v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = a1;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = qword_1ED6F4510;
      swift_bridgeObjectRetain();
      if (v20 != -1)
        swift_once();
      v25[0] = MEMORY[0x1E0DEE9E0];
      v25[1] = v18;
      v24[0] = MEMORY[0x1E0DEE9E0];
      v24[1] = v19;
      v21 = qword_1ED6F3700;
      swift_retain();
      swift_retain();
      if (v21 != -1)
        swift_once();
      sub_1BE1B2E40();
      swift_release();
      v22 = type metadata accessor for Replica();
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 1, 1, v22);
      sub_1BDDAC84C(v25, v24, (uint64_t)v16, (uint64_t)v13);
      swift_release();
      sub_1BDD86E30((uint64_t)v13, &qword_1ED6F43C0);
      sub_1BDD86E30((uint64_t)v16, &qword_1ED6F43C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
  }
  return result;
}

BOOL sub_1BDE58944(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  uint64_t v37[3];
  uint64_t v38;

  v9 = v8;
  v10 = v7;
  v38 = a7;
  v34 = a5;
  v35 = a6;
  v31 = a2;
  v32 = *v7;
  v33 = a4;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState;
  v16 = qword_1ED6F3700;
  swift_retain();
  if (v16 != -1)
    swift_once();
  sub_1BE1B2E40();
  v17 = v9;
  swift_release();
  v18 = (char *)v7 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  v19 = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  sub_1BDD86E30((uint64_t)v15, &qword_1ED6F43C0);
  v20 = sub_1BDD8422C(&qword_1EF52CF70, (uint64_t (*)(uint64_t))type metadata accessor for CapsuleRef, (uint64_t)&unk_1BE1B9250);
  v21 = sub_1BDF17B24(a1, a3, v33, v34, v32, v35, v20, v38);
  if (v17)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = v21;
    swift_beginAccess();
    v24 = swift_bridgeObjectRetain();
    sub_1BDDBC54C(v24);
    swift_endAccess();
    v38 = v23;
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    v25 = *((_QWORD *)v18 + 1);
    swift_bridgeObjectRetain();
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F43C0);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v37[0] = MEMORY[0x1E0DEE9E0];
    v37[1] = v19;
    v36[0] = MEMORY[0x1E0DEE9E0];
    v36[1] = v25;
    swift_retain();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    sub_1BDDAC84C(v37, v36, (uint64_t)v15, v31);
    swift_release();
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F43C0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v26 = sub_1BDDC8800(MEMORY[0x1E0DEE9D8]);
    v27 = (unint64_t *)((char *)v10 + OBJC_IVAR____TtC9Coherence10CapsuleRef_caches);
    swift_beginAccess();
    *v27 = v26;
    swift_bridgeObjectRelease();
    v28 = *(_QWORD *)(v38 + 16);
    swift_bridgeObjectRelease();
    return v28 != 0;
  }
  return v22;
}

uint64_t sub_1BDE58CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16))
  {
    if (qword_1ED6F4510 != -1)
      swift_once();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    if (*(_QWORD *)(*(_QWORD *)(v10 + 8) + 16))
      sub_1BDE5861C(v13, v14, v15, 0);
    swift_bridgeObjectRelease();
  }
  v11 = type metadata accessor for Replica();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  sub_1BDE58944(a1, (uint64_t)v9, 0, 0, 0, a2, a3);
  return sub_1BDD86E30((uint64_t)v9, &qword_1ED6F43C0);
}

uint64_t sub_1BDE58E80(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = a1[1];
  v8 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v9 = *(_QWORD *)&v5[*(int *)(v3 + 20)];
  if (*(_QWORD *)(v9 + 16))
  {
    sub_1BDDB6CA4(v6, v7);
    sub_1BDDB6CA4(v6, v7);
    v10 = sub_1BDDB7F0C(v6, v7);
    v12 = v11;
    if ((v11 & 1) != 0)
    {
      v13 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 48 * v10);
      v15 = *v13;
      v14 = v13[1];
      v16 = v13[2];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = 0;
      v14 = 0;
      v16 = 0;
    }
    sub_1BDDB796C(v6, v7);
    sub_1BDDB796C(v6, v7);
  }
  else
  {
    v12 = 0;
    v15 = 0;
    v14 = 0;
    v16 = 0;
  }
  sub_1BDD9C3E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  sub_1BDDBA008(v15, v14, v16);
  return v12 & 1;
}

uint64_t sub_1BDE5903C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v5;
  uint64_t result;

  if (*(_QWORD *)(a3 + 16)
    && (sub_1BDDB2730(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC),
        (v5 & 1) != 0))
  {
    result = swift_retain();
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

uint64_t sub_1BDE59098(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)();
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  _QWORD v22[4];

  v9 = *v5;
  if (!*(_QWORD *)(v9 + 16)
    || (v12 = sub_1BDDB2730(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC),
        (v13 & 1) == 0)
    || (v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v12 + 8), !swift_retain()))
  {
    if (a4 <= 0)
    {
      if (a4)
      {
LABEL_19:
        result = sub_1BE1B3200();
        __break(1u);
        return result;
      }
    }
    else
    {
      if (!a3 || (a5 & 1) != 0)
        goto LABEL_19;
      v19 = *(_QWORD *)(a3 + 16);
      v20 = *(_QWORD *)(a3 + 24);
      swift_retain();
      sub_1BDDB6CA4(v19, v20);
      sub_1BE149284(a3, a4, v19, v20);
    }
    return 0;
  }
  swift_release();
  v15 = __OFADD__(v14, a4);
  v16 = v14 + a4;
  if (v15)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v16 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v16)
  {
    sub_1BDDB6CA4(a1, a2);
    v18 = sub_1BDE5259C(v22, a1, a2);
    if (*v17)
      v17[1] = v16;
    ((void (*)(_QWORD *, _QWORD))v18)(v22, 0);
    sub_1BDDB796C(a1, a2);
    return 0;
  }
  sub_1BDEF0864(a1, a2, v22);
  swift_release();
  return 1;
}

uint64_t sub_1BDE59288(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(_QWORD *);
  uint64_t v19;
  _QWORD v21[5];

  v3 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v6 = a1[1];
  v8 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v9 = *(_QWORD *)&v5[*(int *)(v3 + 20)];
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_6;
  sub_1BDDB6CA4(v7, v6);
  v10 = sub_1BDDB7F0C(v7, v6);
  if ((v11 & 1) == 0)
  {
    sub_1BDDB796C(v7, v6);
LABEL_6:
    sub_1BDD9C3E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    return 0;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 48 * v10);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v7, v6);
  sub_1BDD9C3E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12)
    return 0;
  v13 = type metadata accessor for RetainVisitor();
  v14 = swift_allocObject();
  v15 = MEMORY[0x1E0DEE9D8];
  v16 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v17 = sub_1BDDB6CE8(v15);
  *(_QWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 24) = v17;
  v21[3] = v13;
  v21[4] = &off_1E7755DD0;
  v21[0] = v14;
  v18 = *(void (**)(_QWORD *))(*(_QWORD *)v12 + 120);
  swift_retain();
  v18(v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  swift_release();
  swift_beginAccess();
  v19 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  return v19;
}

uint64_t sub_1BDE594D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v12 = a1[1];
  v14 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v15 = *(_QWORD *)&v11[*(int *)(v9 + 20)];
  if (!*(_QWORD *)(v15 + 16))
    return sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  sub_1BDDB6CA4(v13, v12);
  v16 = sub_1BDDB7F0C(v13, v12);
  if ((v17 & 1) == 0)
  {
    sub_1BDDB796C(v13, v12);
    return sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  }
  v21 = a4;
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 48 * v16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v13, v12);
  sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v18)
  {
    v22 = v18;
    sub_1BE191478(a2, (uint64_t)&v22, a3, v21);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDE59688@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v5 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v8 = a1[1];
  v10 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v10, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v11 = *(_QWORD *)&v7[*(int *)(v5 + 20)];
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_5;
  sub_1BDDB6CA4(v9, v8);
  v12 = sub_1BDDB7F0C(v9, v8);
  if ((v13 & 1) == 0)
  {
    sub_1BDDB796C(v9, v8);
LABEL_5:
    result = sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v14 = 0;
    goto LABEL_6;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 48 * v12);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v9, v8);
  sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_6:
  *a2 = v14;
  return result;
}

uint64_t sub_1BDE59818@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  result = swift_beginAccess();
  v9 = *v7;
  if (*(_QWORD *)(v9 + 16))
  {
    sub_1BDDB6CA4(a1, a2);
    v10 = sub_1BDDB2730(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v10);
      swift_retain();
      result = sub_1BDDB796C(a1, a2);
      if (v12)
      {
        result = swift_endAccess();
        *a3 = v12;
        return result;
      }
    }
    else
    {
      result = sub_1BDDB796C(a1, a2);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE598E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *v2;
  if (*(_QWORD *)(v7 + 16))
  {
    swift_retain();
    sub_1BDDB6CA4(v5, v6);
    v8 = sub_1BDDB2730(v5, v6, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
    if ((v9 & 1) == 0)
    {
LABEL_5:
      sub_1BDDB796C(v5, v6);
      swift_release();
      goto LABEL_6;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    swift_retain();
    sub_1BDDB796C(v5, v6);
    swift_release();
    swift_release();
    if (v10)
    {
      __break(1u);
      goto LABEL_5;
    }
  }
LABEL_6:
  swift_retain();
  sub_1BDDB6CA4(v5, v6);
  return sub_1BE149284(a1, a2, v5, v6);
}

uint64_t sub_1BDE599D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v12, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v13 = *(_QWORD *)&v11[*(int *)(v9 + 20)];
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_7;
  sub_1BDDB6CA4(a1, a2);
  v14 = sub_1BDDB7F0C(a1, a2);
  if ((v15 & 1) == 0)
  {
    sub_1BDDB796C(a1, a2);
LABEL_7:
    result = sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    return result;
  }
  v16 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 48 * v14);
  v17 = *v16;
  v18 = v16[2];
  v19 = v16[3];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB796C(a1, a2);
  result = sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  if (!a3)
  {
    if (v17)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *a4 = v17;
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
    return result;
  }
  if (!v17)
  {
    __break(1u);
    goto LABEL_13;
  }
  v21 = swift_retain();
  sub_1BDE59EB4(v21, v17, &v23);
  swift_release();
  v22 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  *a4 = v22;
LABEL_10:
  a4[1] = v18;
  a4[2] = v19;
  return result;
}

uint64_t sub_1BDE59BC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v41 = a4;
  v43 = a2;
  v9 = sub_1BE1B2EE8();
  v44 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v37 - v11;
  v46 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v10);
  v42 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v17 = a1[1];
  v19 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v19, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v20 = *(_QWORD *)&v16[*(int *)(v14 + 20)];
  if (!*(_QWORD *)(v20 + 16))
    goto LABEL_7;
  sub_1BDDB6CA4(v18, v17);
  v21 = sub_1BDDB7F0C(v18, v17);
  if ((v22 & 1) == 0)
  {
    sub_1BDDB796C(v18, v17);
LABEL_7:
    result = sub_1BDD9C3E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    return result;
  }
  v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 48 * v21);
  v24 = v23[2];
  v25 = v23[3];
  v27 = v23[4];
  v26 = v23[5];
  v40 = *v23;
  swift_retain();
  v39 = v24;
  swift_bridgeObjectRetain();
  v38 = v25;
  swift_bridgeObjectRetain();
  v37[1] = v27;
  swift_bridgeObjectRetain();
  v37[0] = v26;
  swift_bridgeObjectRetain();
  sub_1BDDB796C(v18, v17);
  sub_1BDD9C3E0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v28 = v44;
  v29 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v12, v43, v45);
  v30 = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v12, 1, a3) != 1)
  {
    v34 = (uint64_t)v42;
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v42, v12, a3);
    if (v40)
    {
      v47 = v40;
      sub_1BE1829F0(v34, a3, v41, &v48);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, a3);
      v35 = v48;
      v36 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_release();
      *a5 = v35;
      a5[1] = v36;
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
    return result;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  v32 = v40;
  if (!v40)
  {
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v33 = v39;
  *a5 = v32;
  a5[1] = v33;
LABEL_10:
  a5[2] = v38;
  return result;
}

uint64_t sub_1BDE59EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;

  *(_QWORD *)&v15[0] = a2;
  if (((*(uint64_t (**)(_OWORD *))(*(_QWORD *)a1 + 120))(v15) & 1) != 0)
  {
    *a3 = a2;
    return swift_retain();
  }
  else
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    v7 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v15);
    sub_1BDD86E30((uint64_t)v15, qword_1ED6F3DD0);
    type metadata accessor for CREncoder();
    v8 = swift_allocObject();
    v9 = MEMORY[0x1E0DEE9D8];
    v10 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v8 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v8 + 40) = v9;
    *(_QWORD *)(v8 + 48) = v9;
    *(_QWORD *)(v8 + 56) = v10;
    *(_QWORD *)(v8 + 64) = v9;
    *(_QWORD *)(v8 + 80) = 0;
    *(_QWORD *)(v8 + 88) = 0;
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v8 + 24) = v9;
    *(_BYTE *)(v8 + 72) = 2;
    v11 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 176);
    v12 = v7;
    v11(v8);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v13 = swift_retain();
    v14 = sub_1BDE27BC4(v13);
    swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(v14);

    swift_release();
    return swift_release();
  }
}

uint64_t sub_1BDE5A134@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  result = sub_1BDE599D0(v2, v3, a1, (uint64_t *)&v13);
  v5 = v13;
  if ((_QWORD)v13)
  {
    v7 = *((_QWORD *)&v13 + 1);
    v6 = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = MEMORY[0x1E0DEE9D8];
    v9 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v10 = sub_1BDDB6CE8(v8);
    sub_1BDDB6E0C(v8);
    sub_1BDDB6CE8(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v13 = v5;
    v14 = v7;
    v15 = v6;
    v16 = v9;
    v17 = v10;
    v12[0] = v2;
    v12[1] = v3;
    swift_beginAccess();
    sub_1BDDB6CA4(v2, v3);
    sub_1BDD8B18C(&v13, v12);
    swift_endAccess();
    swift_release();
    sub_1BDDB796C(v2, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    *a2 = v7;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1BDE5A2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  _QWORD *(*v10)(__int128 *__return_ptr, _QWORD *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];
  uint64_t v21[2];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v20[0] = v8;
  v20[1] = v9;
  v21[0] = a1;
  v10 = *(_QWORD *(**)(__int128 *__return_ptr, _QWORD *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a3 + 48);
  v11 = type metadata accessor for AnyReference();
  result = v10(&v22, v20, v21, v11, &off_1E7754908, a2, a3);
  if (!v4)
  {
    v27 = a4;
    v13 = v22;
    if ((_QWORD)v22)
    {
      v15 = *((_QWORD *)&v22 + 1);
      v14 = v23;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = MEMORY[0x1E0DEE9D8];
      v19 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
      v17 = sub_1BDDB6CE8(v16);
      sub_1BDDB6E0C(v16);
      sub_1BDDB6CE8(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v22 = v13;
      v23 = v15;
      v24 = v14;
      v25 = v19;
      v26 = v17;
      v21[0] = v8;
      v21[1] = v9;
      swift_beginAccess();
      sub_1BDDB6CA4(v8, v9);
      sub_1BDD8B18C(&v22, v21);
      swift_endAccess();
      swift_release();
      sub_1BDDB796C(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_release();
      v18 = v27;
      *v27 = v15;
      v18[1] = v14;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t *sub_1BDE5A470(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t **v21;
  void (*v22)(_QWORD *);
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43[4];
  unint64_t v44[4];
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  _OWORD v48[2];
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;

  v2 = *result;
  if (!*result)
    return result;
  v40 = v2 + 64;
  v3 = result[1];
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v41 = (unint64_t)(v4 + 63) >> 6;
  result = (uint64_t *)swift_bridgeObjectRetain();
  v42 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v9 = v8 | (v42 << 6);
LABEL_8:
  v10 = *(_QWORD *)(v2 + 56);
  v11 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v9);
  v12 = v11[1];
  *(_QWORD *)&v47 = *v11;
  v13 = v47;
  *((_QWORD *)&v47 + 1) = v12;
  sub_1BDDC1538(v10 + 32 * v9, (uint64_t)v48);
  sub_1BDDB6CA4(v13, v12);
  while (1)
  {
    sub_1BDDA2EF0((uint64_t)&v47, (uint64_t)&v49, &qword_1EF52CFD0);
    if (!v52)
      break;
    v18 = v49;
    v17 = v50;
    sub_1BDE77688(&v51, &v47);
    swift_beginAccess();
    v19 = *(_QWORD *)(*(_QWORD *)(v7 + *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20)) + 16);
    sub_1BDDB6CA4(v18, v17);
    if (v19 && (sub_1BDDB7F0C(v18, v17), (v20 & 1) != 0))
    {
      swift_endAccess();
      sub_1BDDB796C(v18, v17);
      swift_beginAccess();
      v45 = v18;
      v46 = v17;
      sub_1BDDB6CA4(v18, v17);
      v22 = sub_1BDDB7C54(v44, &v45);
      if (v21[2])
      {
        v23 = v21;
        sub_1BDDC1538((uint64_t)&v47, (uint64_t)v43);
        result = *v23;
        if (!*v23)
          goto LABEL_64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          *v23 = (uint64_t *)(*(uint64_t (**)(void))(**v23 + 160))();
          swift_release();
        }
        (*(void (**)(uint64_t *))(**v23 + 136))(v43);
        ((void (*)(unint64_t *, _QWORD))v22)(v44, 0);
        swift_endAccess();
        sub_1BDD86E30((uint64_t)v43, qword_1EF52B750);
        sub_1BDDB796C(v45, v46);
      }
      else
      {
        ((void (*)(unint64_t *, _QWORD))v22)(v44, 0);
        sub_1BDDB796C(v45, v46);
        swift_endAccess();
      }
      swift_beginAccess();
      sub_1BDDB6CA4(v18, v17);
      sub_1BDDBC6BC(v43, v18, v17);
      swift_endAccess();
      sub_1BDDB796C(v18, v17);
      sub_1BDDB796C(v43[0], v43[1]);
      result = (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
      if (v6)
        goto LABEL_7;
    }
    else
    {
      swift_endAccess();
      sub_1BDDB796C(v18, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
      result = (uint64_t *)sub_1BDDB796C(v18, v17);
      if (v6)
        goto LABEL_7;
    }
LABEL_9:
    v14 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v14 < v41)
    {
      v15 = *(_QWORD *)(v40 + 8 * v14);
      if (v15)
        goto LABEL_12;
      v16 = v42 + 2;
      ++v42;
      if (v14 + 1 < v41)
      {
        v15 = *(_QWORD *)(v40 + 8 * v16);
        if (v15)
          goto LABEL_15;
        v42 = v14 + 1;
        if (v14 + 2 < v41)
        {
          v15 = *(_QWORD *)(v40 + 8 * (v14 + 2));
          if (v15)
          {
            v14 += 2;
            goto LABEL_12;
          }
          v16 = v14 + 3;
          v42 = v14 + 2;
          if (v14 + 3 < v41)
          {
            v15 = *(_QWORD *)(v40 + 8 * v16);
            if (v15)
            {
LABEL_15:
              v14 = v16;
LABEL_12:
              v6 = (v15 - 1) & v15;
              v9 = __clz(__rbit64(v15)) + (v14 << 6);
              v42 = v14;
              goto LABEL_8;
            }
            while (1)
            {
              v14 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_63;
              if (v14 >= v41)
                break;
              v15 = *(_QWORD *)(v40 + 8 * v14);
              ++v16;
              if (v15)
                goto LABEL_12;
            }
            v42 = v41 - 1;
          }
        }
      }
    }
    v6 = 0;
    memset(v48, 0, sizeof(v48));
    v47 = 0u;
  }
  swift_release();
  v24 = v3 + 64;
  v25 = 1 << *(_BYTE *)(v3 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & *(_QWORD *)(v3 + 64);
  v28 = (unint64_t)(v25 + 63) >> 6;
  result = (uint64_t *)swift_bridgeObjectRetain();
  v29 = 0;
  while (1)
  {
    if (v27)
    {
      v30 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v31 = v30 | (v29 << 6);
      goto LABEL_42;
    }
    v35 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    if (v35 >= v28)
      goto LABEL_58;
    v36 = *(_QWORD *)(v24 + 8 * v35);
    ++v29;
    if (!v36)
    {
      v29 = v35 + 1;
      if (v35 + 1 >= v28)
        goto LABEL_58;
      v36 = *(_QWORD *)(v24 + 8 * v29);
      if (!v36)
      {
        v29 = v35 + 2;
        if (v35 + 2 >= v28)
          goto LABEL_58;
        v36 = *(_QWORD *)(v24 + 8 * v29);
        if (!v36)
          break;
      }
    }
LABEL_57:
    v27 = (v36 - 1) & v36;
    v31 = __clz(__rbit64(v36)) + (v29 << 6);
LABEL_42:
    v32 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v31);
    v33 = *v32;
    v34 = v32[1];
    v44[0] = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v31);
    *(_QWORD *)&v47 = v33;
    *((_QWORD *)&v47 + 1) = v34;
    sub_1BDDB6CA4(v33, v34);
    swift_retain();
    sub_1BDE532A0(v44, (uint64_t *)&v47, &v49);
    sub_1BDDB796C(v33, v34);
    sub_1BDDB796C(v49, v50);
    result = (uint64_t *)swift_release();
  }
  v37 = v35 + 3;
  if (v37 >= v28)
  {
LABEL_58:
    swift_release();
    v38 = sub_1BDDC8800(MEMORY[0x1E0DEE9D8]);
    v39 = (unint64_t *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_caches);
    swift_beginAccess();
    *v39 = v38;
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  v36 = *(_QWORD *)(v24 + 8 * v37);
  if (v36)
  {
    v29 = v37;
    goto LABEL_57;
  }
  while (1)
  {
    v29 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v29 >= v28)
      goto LABEL_58;
    v36 = *(_QWORD *)(v24 + 8 * v29);
    ++v37;
    if (v36)
      goto LABEL_57;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_1BDE5AA24(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  a1(v3);
  return swift_endAccess();
}

uint64_t sub_1BDE5AA94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
  swift_beginAccess();
  v4 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_1BDE5AB14(uint64_t a1)
{
  return sub_1BDD8EE00(a1);
}

uint64_t sub_1BDE5AB38(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  return sub_1BDD98B8C(a1, a2, a3, a4, a5);
}

uint64_t sub_1BDE5AB5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1BDE59688(a1, a2);
}

_QWORD *sub_1BDE5AB80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return sub_1BDE5A2B0(a1, a2, a3, a4);
}

BOOL sub_1BDE5AB94(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  swift_beginAccess();
  v6 = *v5;
  sub_1BDDB6CA4(a1, a2);
  sub_1BDE5903C(a1, a2, v6, &v9);
  v7 = v9;
  swift_endAccess();
  sub_1BDDB796C(a1, a2);
  if (v7)
    swift_release();
  return v7 != 0;
}

uint64_t sub_1BDE5AC40(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_beginAccess();
  sub_1BDE598E8(v1, 0);
  return swift_endAccess();
}

uint64_t sub_1BDE5ACAC(uint64_t *a1)
{
  return sub_1BDE59288(a1);
}

uint64_t sub_1BDE5ACD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE594D0(a1, a2, a3, a4);
}

uint64_t sub_1BDE5ACF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[2];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v3 = *v1;
  v2 = v1[1];
  v5[0] = v3;
  v5[1] = v2;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDCC50C(v5);
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDE5AD9C(uint64_t *a1, uint64_t a2)
{
  return sub_1BDD99168(a1, a2);
}

uint64_t sub_1BDE5ADC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD *)(*a1 + 24);
  swift_beginAccess();
  swift_retain();
  sub_1BDDB6CA4(v4, v5);
  v6 = sub_1BDE59098(v4, v5, v3, a2, 0);
  swift_endAccess();
  swift_release();
  sub_1BDDB796C(v4, v5);
  return v6 & 1;
}

uint64_t sub_1BDE5AE80@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return sub_1BDE59BC0(a1, a2, a3, a4, a5);
}

uint64_t sub_1BDE5AEA8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1BDD93B58(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1BDE5AEE0(uint64_t *a1)
{
  return sub_1BDE58E80(a1) & 1;
}

uint64_t sub_1BDE5AF04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1BDE59818(a1, a2, a3);
}

uint64_t Capsule.Ref.subscript.getter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE5B060(a1, a2, a3, (void (*)(uint64_t *, uint64_t, uint64_t))sub_1BDE565B0);
}

{
  return sub_1BDE5B060(a1, a2, a3, (void (*)(uint64_t *, uint64_t, uint64_t))sub_1BDE56C40);
}

uint64_t Capsule.Ref.subscript.setter(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  sub_1BDE76CD0(a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void (*Capsule.Ref.subscript.modify(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v10 = *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 112));
  v12 = *a2;
  v11 = a2[1];
  v9[4] = v12;
  v9[5] = v11;
  v9[6] = v10;
  swift_retain();
  sub_1BDDB6CA4(v12, v11);
  v9[7] = sub_1BDE567D8(v9, v9 + 4, a3, a4);
  return sub_1BDE5B014;
}

void sub_1BDE5B014(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  swift_release();
  sub_1BDDB796C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  free((void *)v1);
}

uint64_t sub_1BDE5B060(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v10[2];

  v8 = a1[1];
  v10[0] = *a1;
  v7 = v10[0];
  v10[1] = v8;
  swift_retain();
  sub_1BDDB6CA4(v10[0], v8);
  a4(v10, a2, a3);
  swift_release();
  return sub_1BDDB796C(v7, v8);
}

uint64_t sub_1BDE5B0F4(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v5 = *(uint64_t *)((char *)a2 + a3 - 24);
  v6 = *(uint64_t *)((char *)a2 + a3 - 8);
  v7 = *a2;
  v8 = a2[1];
  v10[0] = v7;
  v10[1] = v8;
  sub_1BDDB6CA4(v7, v8);
  a4(v10, v5, v6);
  return sub_1BDDB796C(v7, v8);
}

uint64_t sub_1BDE5B174(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11[2];

  v7 = *(uint64_t *)((char *)a3 + a4 - 24);
  v8 = *(uint64_t *)((char *)a3 + a4 - 8);
  v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  sub_1BDDB6CA4(v11[0], v9);
  return a5(a1, v11, v7, v8);
}

uint64_t Capsule.Ref.subscript.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_1BDE76D38(a1, a2, a3, a4);
  v5 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

void (*Capsule.Ref.subscript.modify(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17[2];

  v9 = malloc(0x48uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = sub_1BE1B2EE8();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = malloc(v12);
  v14 = *a2;
  v15 = a2[1];
  v9[6] = v13;
  v9[7] = v14;
  v9[8] = v15;
  v17[0] = v14;
  v17[1] = v15;
  sub_1BDDB6CA4(v14, v15);
  Capsule.Ref.subscript.getter(v17, a3, a4);
  return sub_1BDE5B2E8;
}

void sub_1BDE5B2E8(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v4 = (*a1)[7];
  v3 = (*a1)[8];
  v5 = (void *)(*a1)[5];
  v6 = (void *)(*a1)[6];
  v7 = (*a1)[3];
  v8 = (*a1)[4];
  v9 = (*a1)[1];
  v10 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[5], v6, v7);
    v12 = v4;
    v13 = v3;
    sub_1BDE76D38((uint64_t)v5, &v12, v10, v9);
    v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v5, v7);
    v11(v6, v7);
  }
  else
  {
    v12 = (*a1)[7];
    v13 = v3;
    sub_1BDE76D38((uint64_t)v6, &v12, v10, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);
  free(v2);
}

uint64_t Capsule.Ref.import<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE5B460(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BDE57208);
}

{
  return sub_1BDE5B460(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BDE57F00);
}

uint64_t Capsule.Ref.import<A, B>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_retain();
  sub_1BDE57314(a1, a2, a3, a4, a5, a6);
  return swift_release();
}

uint64_t sub_1BDE5B460(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_retain();
  a4(a1, a2, a3);
  return swift_release();
}

uint64_t Capsule.Ref.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  swift_retain();
  sub_1BDE585DC(a1, a2, a3, v6);
  return swift_release();
}

uint64_t Capsule.Ref.apply(_:)(__int128 *a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *((_QWORD *)a1 + 2);
  v3 = *a1;
  v4 = v1;
  swift_retain();
  sub_1BDE5A470((uint64_t *)&v3);
  return swift_release();
}

uint64_t Capsule.Ref<>.rootID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(v1 + 24);
  if (v2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 16);
    *a1 = v3;
    a1[1] = v2;
    return sub_1BDDB6CA4(v3, v2);
  }
  return result;
}

uint64_t Capsule.Ref<>.root.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_1BDE76E00(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void (*Capsule.Ref<>.root.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  _QWORD *v1;
  char v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*result)(uint64_t **, char);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v4 = malloc(0xD8uLL);
  *a1 = v4;
  v4[19] = v1;
  v5 = *v1;
  v6 = *(_QWORD *)(*v1 + 80);
  v4[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[21] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v9 = v1[2];
  v10 = v1[3];
  v4[22] = v8;
  v4[23] = v9;
  v4[24] = v10;
  if (v10 >> 60 == 15)
    goto LABEL_17;
  v11 = *(_QWORD *)(v5 + 112);
  v4[25] = v11;
  v12 = *(_QWORD *)((char *)v1 + v11) + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v13 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1BDD9C9A0(v9, v10);
  sub_1BDD9C9A0(v9, v10);
  sub_1BDD9C9A0(v9, v10);
  sub_1BDD9C9A0(v9, v10);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v32 = *(_QWORD *)(v12 + v13);
  v15 = v32;
  *(_QWORD *)(v12 + v13) = 0x8000000000000000;
  sub_1BDDB6CA4(v9, v10);
  v17 = sub_1BDDB7F0C(v9, v10);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v2 = v16;
  if (*(_QWORD *)(v15 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_9;
      goto LABEL_15;
    }
LABEL_14:
    sub_1BDDB7F70();
    if ((v2 & 1) != 0)
      goto LABEL_9;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1BDDC50C4(v20, isUniquelyReferenced_nonNull_native);
  v21 = sub_1BDDB7F0C(v9, v10);
  if ((v2 & 1) != (v22 & 1))
  {
LABEL_18:
    result = (void (*)(uint64_t **, char))sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v17 = v21;
  if ((v2 & 1) == 0)
    goto LABEL_15;
LABEL_9:
  v23 = (__int128 *)(*(_QWORD *)(v32 + 56) + 48 * v17);
  v24 = v23[1];
  v29 = *v23;
  v30 = v24;
  v31 = v23[2];
  v25 = v29;
  if (!(_QWORD)v29)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    sub_1BE1B3200();
    __break(1u);
    goto LABEL_18;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(_QWORD *)&v29 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 160))();
    swift_release();
    v25 = v29;
  }
  v26 = type metadata accessor for CRDTBox();
  v4[26] = v26;
  v4[3] = v26;
  v4[4] = &off_1E775A998;
  *v4 = v25;
  swift_retain();
  sub_1BDDBA064((uint64_t *)&v29, 1, &v32, v17, v9, v10);
  sub_1BDDBA008(v29, *((uint64_t *)&v29 + 1), v30);
  sub_1BDD9CC0C(v9, v10);
  *(_QWORD *)(v12 + v13) = v32;
  sub_1BDD9CC0C(v9, v10);
  swift_endAccess();
  sub_1BDD9CC0C(v9, v10);
  swift_release();
  v27 = sub_1BDD9CC0C(v9, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 240))(v27);
  swift_dynamicCast();
  return sub_1BDE5B90C;
}

void sub_1BDE5B90C(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11[2];

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[21];
    v3 = (void *)v2[22];
    v5 = v2[20];
    sub_1BDD9CC0C(v2[23], v2[24]);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    v7 = v2[23];
    v6 = v2[24];
    v8 = v2[21];
    v3 = (void *)v2[22];
    v9 = v2[20];
    __swift_project_boxed_opaque_existential_1(v2, v2[26]);
    v2[12] = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 9);
    (*(void (**)(uint64_t *, void *, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v3, v9);
    sub_1BE18B46C();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 9));
    swift_beginAccess();
    sub_1BDD9C9A0(v7, v6);
    swift_retain();
    sub_1BDDBC6BC(v11, v7, v6);
    swift_endAccess();
    swift_release();
    sub_1BDD9CC0C(v7, v6);
    sub_1BDDB796C(v11[0], v11[1]);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v3, v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  free(v3);
  free(v2);
}

uint64_t Capsule.Ref<>.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void (*v9)(_BYTE *, _QWORD);
  _BYTE v11[32];

  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Capsule.Ref<>.root.getter();
  v9 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + v4 + 8) - 8) + 16))(a2);
  v9(v11, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1BDE5BB4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = *a3;
  swift_retain();
  sub_1BDE77098(a1, v4);
  return swift_release();
}

uint64_t Capsule.Ref<>.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  sub_1BDE77098(a1, (uint64_t)a2);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*MEMORY[0x1E0DEC880] + v3 + 8) - 8) + 8))(a1);
}

void (*Capsule.Ref<>.subscript.modify(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v2;

  v2 = malloc(0x50uLL);
  *a1 = v2;
  v2[8] = Capsule.Ref<>.root.modify(v2);
  v2[9] = swift_modifyAtWritableKeyPath();
  return sub_1BDE5BC50;
}

void sub_1BDE5BC50(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(*(_QWORD *)a1 + 32, 0);
  v2(v1, 0);
  free(v1);
}

uint64_t Capsule.Ref<>.root.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - v7;
  v9 = (uint64_t)v1 + *(_QWORD *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v4);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v8, v4);
  __break(1u);
  return result;
}

uint64_t Capsule.Ref<>.subscript.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule.Ref<>.root.getter((uint64_t)v5);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1BDE5BE00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  int64_t v31;
  unint64_t v32;
  unint64_t i;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void (*v65)(uint64_t *);
  uint64_t v66;
  uint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void (*v74)(uint64_t *);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD v88[2];
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _UNKNOWN **v111;
  uint64_t v112;

  v4 = v3;
  v97 = a1;
  v92 = a3;
  v106 = type metadata accessor for PartiallyOrderedReferenceMap();
  v6 = MEMORY[0x1E0C80A78](v106);
  v103 = (uint64_t)v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v88 - v8;
  v10 = (uint64_t *)(a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v12 = v10[1];
  v108 = *v10;
  v11 = v108;
  v109 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1BDD93B58(&v108);
  v14 = sub_1BDDBFED0(v13);
  swift_bridgeObjectRelease();
  v112 = v14;
  v15 = (uint64_t *)(v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v16 = *v15;
  v17 = v15[1];
  v89 = v15;
  v108 = v16;
  v109 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v95 = a2;
  v18 = sub_1BDD93B58(&v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v18 + 16);
  v101 = v9;
  v91 = v11;
  v90 = v12;
  if (v19)
  {
    v20 = (unint64_t *)(v18 + 40);
    do
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      sub_1BDDB6CA4(v21, *v20);
      sub_1BDDBC6BC(&v108, v21, v22);
      sub_1BDDB796C(v108, v109);
      v20 += 2;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    v23 = v112;
    v9 = v101;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = v14;
  }
  v24 = swift_allocObject();
  v94 = v24;
  *(_QWORD *)(v24 + 16) = MEMORY[0x1E0DEE9E8];
  v88[1] = v24 + 16;
  v25 = v23 + 56;
  v26 = 1 << *(_BYTE *)(v23 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v23 + 56);
  v29 = v95 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v105 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v100 = v29;
  result = swift_beginAccess();
  v31 = 0;
  v104 = (unint64_t)(v26 + 63) >> 6;
  v93 = MEMORY[0x1E0DEE9E0];
  v96 = MEMORY[0x1E0DEE9E0];
  v99 = v23;
  v98 = v23 + 56;
  if (v28)
    goto LABEL_12;
LABEL_13:
  v34 = v31 + 1;
  if (!__OFADD__(v31, 1))
  {
    if (v34 >= v104)
      goto LABEL_42;
    v35 = *(_QWORD *)(v25 + 8 * v34);
    v36 = v31 + 1;
    if (!v35)
    {
      v36 = v31 + 2;
      if (v31 + 2 >= v104)
        goto LABEL_42;
      v35 = *(_QWORD *)(v25 + 8 * v36);
      if (!v35)
      {
        v36 = v31 + 3;
        if (v31 + 3 >= v104)
          goto LABEL_42;
        v35 = *(_QWORD *)(v25 + 8 * v36);
        if (!v35)
        {
          v37 = v31 + 4;
          if (v31 + 4 < v104)
          {
            v35 = *(_QWORD *)(v25 + 8 * v37);
            if (v35)
            {
              v36 = v31 + 4;
              goto LABEL_26;
            }
            while (1)
            {
              v36 = v37 + 1;
              if (__OFADD__(v37, 1))
                goto LABEL_49;
              if (v36 >= v104)
                break;
              v35 = *(_QWORD *)(v25 + 8 * v36);
              ++v37;
              if (v35)
                goto LABEL_26;
            }
          }
LABEL_42:
          swift_release();
          v75 = v93;
          v76 = v91;
          v77 = v90;
          v78 = v89;
          if (!*(_QWORD *)(v93 + 16))
          {
            v79 = *v89;
            swift_bridgeObjectRetain();
            v80 = swift_bridgeObjectRetain();
            if ((sub_1BDDB04C0(v80, v77) & 1) != 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              v81 = sub_1BDDB04C0(v79, v76);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v81 & 1) == 0)
              {
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
                v87 = v92;
                v92[6] = 0;
                *((_OWORD *)v87 + 1) = 0u;
                *((_OWORD *)v87 + 2) = 0u;
                *(_OWORD *)v87 = 0u;
                return result;
              }
            }
          }
          v82 = *v78;
          v83 = v78[1];
          swift_beginAccess();
          v84 = *(_QWORD *)(v94 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          result = swift_release();
          v85 = v92;
          *v92 = v82;
          v85[1] = v83;
          v85[2] = v76;
          v85[3] = v77;
          v86 = v96;
          v85[4] = v75;
          v85[5] = v86;
          v85[6] = v84;
          return result;
        }
      }
    }
LABEL_26:
    v28 = (v35 - 1) & v35;
    v107 = v36;
    for (i = __clz(__rbit64(v35)) + (v36 << 6); ; i = v32 | (v31 << 6))
    {
      v38 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * i);
      v40 = *v38;
      v39 = v38[1];
      sub_1BDD9C318(v105, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v41 = *(_QWORD *)&v9[*(int *)(v106 + 20)];
      v42 = *(_QWORD *)(v41 + 16);
      sub_1BDDB6CA4(v40, v39);
      if (!v42)
        goto LABEL_11;
      sub_1BDDB6CA4(v40, v39);
      v43 = sub_1BDDB7F0C(v40, v39);
      if ((v44 & 1) == 0)
      {
        sub_1BDDB796C(v40, v39);
LABEL_11:
        sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        result = sub_1BDDB796C(v40, v39);
        v31 = v107;
        if (!v28)
          goto LABEL_13;
        goto LABEL_12;
      }
      v45 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 48 * v43);
      v46 = *v45;
      v47 = v45[2];
      v48 = v45[3];
      swift_retain();
      v102 = v47;
      swift_bridgeObjectRetain();
      v49 = v48;
      v50 = v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v40, v39);
      result = sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      if (!v46)
        goto LABEL_50;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v51 = v103;
      sub_1BDD9C318(v100, v103, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v52 = *(_QWORD *)(v51 + *(int *)(v106 + 20));
      if (!*(_QWORD *)(v52 + 16))
        goto LABEL_39;
      sub_1BDDB6CA4(v40, v39);
      v53 = sub_1BDDB7F0C(v40, v39);
      if ((v54 & 1) == 0)
        break;
      v55 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 48 * v53);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v40, v39);
      sub_1BDD9C3E0(v103, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v55)
        goto LABEL_40;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v46 + 208))(&v108, v97, v55);
      v56 = v108;
      if (v108)
      {
        sub_1BDDB6CA4(v40, v39);
        v66 = v102;
        swift_bridgeObjectRetain();
        v88[0] = v50;
        swift_bridgeObjectRetain();
        swift_retain();
        v67 = v93;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v108 = v67;
        sub_1BE154A20(v66, v49, v56, v40, v39, isUniquelyReferenced_nonNull_native);
        v93 = v108;
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v40, v39);
        v69 = type metadata accessor for RetainVisitor();
        v70 = swift_allocObject();
        v71 = MEMORY[0x1E0DEE9D8];
        v72 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
        v73 = sub_1BDDB6CE8(v71);
        *(_QWORD *)(v70 + 16) = v72;
        *(_QWORD *)(v70 + 24) = v73;
        v110 = v69;
        v111 = &off_1E7755DD0;
        v108 = v70;
        v74 = *(void (**)(uint64_t *))(*(_QWORD *)v56 + 112);
        swift_retain();
        v74(&v108);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v108);
        sub_1BDE5C814(v70, v95);
        sub_1BDDB796C(v40, v39);
        swift_release();
        swift_release();
      }
      else
      {
        sub_1BDDB796C(v40, v39);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      result = swift_release();
LABEL_36:
      v9 = v101;
      v23 = v99;
      v25 = v98;
      v31 = v107;
      if (!v28)
        goto LABEL_13;
LABEL_12:
      v32 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v107 = v31;
    }
    sub_1BDDB796C(v40, v39);
LABEL_39:
    sub_1BDD9C3E0(v103, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_40:
    sub_1BDDB6CA4(v40, v39);
    swift_retain();
    v57 = v102;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58 = v96;
    v59 = swift_isUniquelyReferenced_nonNull_native();
    v108 = v58;
    sub_1BE154CE0(v57, v49, v50, v40, v39, v59);
    v96 = v108;
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v40, v39);
    v60 = type metadata accessor for RetainVisitor();
    v61 = swift_allocObject();
    v62 = MEMORY[0x1E0DEE9D8];
    v63 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v64 = sub_1BDDB6CE8(v62);
    *(_QWORD *)(v61 + 16) = v63;
    *(_QWORD *)(v61 + 24) = v64;
    v110 = v60;
    v111 = &off_1E7755DD0;
    v108 = v61;
    v65 = *(void (**)(uint64_t *))(*(_QWORD *)v50 + 120);
    swift_retain();
    v65(&v108);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v108);
    sub_1BDE5C814(v61, v95);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    result = sub_1BDDB796C(v40, v39);
    goto LABEL_36;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_1BDE5C814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 24);
  v25 = v4 + 64;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v8 = (uint64_t *)(a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  v9 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (v7)
    goto LABEL_6;
LABEL_7:
  v14 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v14 < v9)
    {
      v15 = *(_QWORD *)(v25 + 8 * v14);
      ++v11;
      if (v15)
        goto LABEL_20;
      v11 = v14 + 1;
      if (v14 + 1 >= v9)
        return swift_release();
      v15 = *(_QWORD *)(v25 + 8 * v11);
      if (v15)
        goto LABEL_20;
      v11 = v14 + 2;
      if (v14 + 2 >= v9)
        return swift_release();
      v15 = *(_QWORD *)(v25 + 8 * v11);
      if (v15)
      {
LABEL_20:
        v7 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v11 << 6); ; i = v12 | (v11 << 6))
        {
          v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * i);
          v18 = *v17;
          v19 = v17[1];
          swift_beginAccess();
          v20 = *v8;
          v21 = *(_QWORD *)(*v8 + 16);
          sub_1BDDB6CA4(v18, v19);
          sub_1BDDB6CA4(v18, v19);
          if (v21
            && (v22 = sub_1BDDB2730(v18, v19, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC), (v23 & 1) != 0)&& (v24 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 16 * v22), swift_retain(), v24))
          {
            swift_endAccess();
            sub_1BDDB796C(v18, v19);
            swift_release();
            result = sub_1BDDB796C(v18, v19);
            if (!v7)
              goto LABEL_7;
          }
          else
          {
            swift_endAccess();
            sub_1BDDB796C(v18, v19);
            swift_beginAccess();
            sub_1BDDB6CA4(v18, v19);
            sub_1BDE69CC8(v26, v18, v19);
            swift_endAccess();
            sub_1BDDB796C(v18, v19);
            result = sub_1BDDB796C(v26[0], v26[1]);
            if (!v7)
              goto LABEL_7;
          }
LABEL_6:
          v12 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v16 = v14 + 3;
      if (v16 < v9)
      {
        v15 = *(_QWORD *)(v25 + 8 * v16);
        if (v15)
        {
          v11 = v16;
          goto LABEL_20;
        }
        while (1)
        {
          v11 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_28;
          if (v11 >= v9)
            return swift_release();
          v15 = *(_QWORD *)(v25 + 8 * v11);
          ++v16;
          if (v15)
            goto LABEL_20;
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1BDE5CAB0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  v15 = *v4;
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration);
    v8 = qword_1ED6F4510;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != -1)
      swift_once();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    if (v7 != v12)
    {
      swift_retain();
      sub_1BE1B2E40();
      swift_release();
      sub_1BDDB2D90(v12, v13, v14);
      swift_bridgeObjectRelease();
      v5 = v15;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  if ((sub_1BDDB04C0(v3, v6) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = 0;
  }
  else
  {
    v10 = sub_1BDDB04C0(v2, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v10 ^ 1;
  }
  return v9 & 1;
}

uint64_t sub_1BDE5CC74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(__int128 *);
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _UNKNOWN **v62;
  _OWORD v63[2];
  __int128 v64;
  uint64_t v65;
  _OWORD v66[2];

  v54 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v54);
  v59 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_OWORD *)(a1 + 16);
  v63[0] = *(_OWORD *)a1;
  v63[1] = v4;
  v64 = *(_OWORD *)(a1 + 32);
  v65 = *(_QWORD *)(a1 + 48);
  v66[0] = v4;
  v60 = v4;
  sub_1BDE7775C((uint64_t)v66);
  LOBYTE(a1) = sub_1BDE5CAB0((uint64_t *)&v60);
  sub_1BDE77790((uint64_t)v66);
  if ((a1 & 1) == 0)
  {
LABEL_26:
    v30 = 0;
    return v30 & 1;
  }
  v5 = v64;
  v6 = *(_QWORD *)(v64 + 64);
  v55 = v64 + 64;
  v7 = 1 << *(_BYTE *)(v64 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v10 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_bridgeObjectRetain();
  v53 = v10;
  result = swift_beginAccess();
  v12 = 0;
  v52 = (unint64_t)(v7 + 63) >> 6;
  v58 = v5;
  v51 = v1;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v14 = (v9 - 1) & v9;
      v15 = v13 | (v12 << 6);
      goto LABEL_21;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v16 >= v52)
      goto LABEL_30;
    v17 = *(_QWORD *)(v55 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v52)
        goto LABEL_30;
      v17 = *(_QWORD *)(v55 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v52)
          goto LABEL_30;
        v17 = *(_QWORD *)(v55 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v14 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_21:
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 24 * v15 + 16);
    v23 = v59;
    sub_1BDD9C318(v53, v59, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v24 = *(_QWORD *)(v23 + *(int *)(v54 + 20));
    v25 = *(_QWORD *)(v24 + 16);
    sub_1BDDB6CA4(v21, v20);
    if (!v25)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_29;
    }
    sub_1BDDB6CA4(v21, v20);
    sub_1BDDB6CA4(v21, v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v26 = sub_1BDDB7F0C(v21, v20);
    if ((v27 & 1) == 0)
    {
      sub_1BDDB796C(v21, v20);
      sub_1BDDB796C(v21, v20);
LABEL_29:
      sub_1BDD9C3E0(v59, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      sub_1BDDB796C(v21, v20);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = 0;
      return v30 & 1;
    }
    v57 = v14;
    v56 = v12;
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 48 * v26);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v21, v20);
    sub_1BDDB796C(v21, v20);
    sub_1BDD9C3E0(v59, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (!v28)
      goto LABEL_56;
    *(_QWORD *)&v60 = v22;
    v29 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v28 + 216))(&v60);
    sub_1BDDB796C(v21, v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    v5 = v58;
    v12 = v56;
    v9 = v57;
    if ((v29 & 1) == 0)
    {
      swift_release();
      goto LABEL_26;
    }
  }
  v18 = v16 + 3;
  if (v18 < v52)
  {
    v17 = *(_QWORD *)(v55 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        v12 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        if (v12 >= v52)
          goto LABEL_30;
        v17 = *(_QWORD *)(v55 + 8 * v12);
        ++v18;
        if (v17)
          goto LABEL_20;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v12 = v18;
    goto LABEL_20;
  }
LABEL_30:
  swift_release();
  v31 = type metadata accessor for RetainVisitor();
  v32 = swift_allocObject();
  v33 = MEMORY[0x1E0DEE9D8];
  v34 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v35 = sub_1BDDB6CE8(v33);
  *(_QWORD *)(v32 + 16) = v34;
  v59 = v32 + 16;
  *(_QWORD *)(v32 + 24) = v35;
  v36 = 1 << *(_BYTE *)(v5 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & *(_QWORD *)(v5 + 64);
  v39 = (unint64_t)(v36 + 63) >> 6;
  swift_bridgeObjectRetain();
  v40 = 0;
  while (2)
  {
    if (v38)
    {
      v41 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v42 = v41 | (v40 << 6);
      result = v58;
LABEL_34:
      v43 = *(_QWORD *)(*(_QWORD *)(result + 56) + 24 * v42 + 16);
      v61 = v31;
      v62 = &off_1E7755DD0;
      *(_QWORD *)&v60 = v32;
      v44 = *(void (**)(__int128 *))(*(_QWORD *)v43 + 112);
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v44(&v60);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      continue;
    }
    break;
  }
  v45 = v40 + 1;
  result = v58;
  if (__OFADD__(v40, 1))
    goto LABEL_53;
  if (v45 >= v39)
  {
LABEL_50:
    swift_release();
    swift_beginAccess();
    sub_1BDE77B74((uint64_t)v63);
    v48 = v51;
    swift_retain();
    v49 = swift_bridgeObjectRetain();
    v50 = sub_1BDE777C0(v49, (uint64_t)v63, v48);
    swift_release();
    sub_1BDE77BF0((uint64_t)v63);
    swift_bridgeObjectRelease();
    swift_release();
    v30 = v50 ^ 1;
    return v30 & 1;
  }
  v46 = *(_QWORD *)(v55 + 8 * v45);
  ++v40;
  if (v46)
    goto LABEL_49;
  v40 = v45 + 1;
  if (v45 + 1 >= v39)
    goto LABEL_50;
  v46 = *(_QWORD *)(v55 + 8 * v40);
  if (v46)
    goto LABEL_49;
  v40 = v45 + 2;
  if (v45 + 2 >= v39)
    goto LABEL_50;
  v46 = *(_QWORD *)(v55 + 8 * v40);
  if (v46)
  {
LABEL_49:
    v38 = (v46 - 1) & v46;
    v42 = __clz(__rbit64(v46)) + (v40 << 6);
    goto LABEL_34;
  }
  v47 = v45 + 3;
  if (v47 >= v39)
    goto LABEL_50;
  v46 = *(_QWORD *)(v55 + 8 * v47);
  if (v46)
  {
    v40 = v47;
    goto LABEL_49;
  }
  while (1)
  {
    v40 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v40 >= v39)
      goto LABEL_50;
    v46 = *(_QWORD *)(v55 + 8 * v40);
    ++v47;
    if (v46)
      goto LABEL_49;
  }
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_1BDE5D36C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void (*v25)(_QWORD *);
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(__int128 *, char);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  void (*v53)(_QWORD *);
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  void (*v63)(uint64_t *, char);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[4];
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;

  v69 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v69);
  v78 = (uint64_t)v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = a1[4];
  v74 = a1[5];
  v5 = *(_QWORD *)(v4 + 64);
  v75 = v4 + 64;
  v68 = *a1;
  v67[1] = a1[1];
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v9 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v67[0] = v1;
  v79 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated;
  v76 = (unint64_t)(v6 + 63) >> 6;
  v73 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  v72 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version + 8;
  v77 = v4;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  v80 = v9;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_22;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v14 >= v76)
      goto LABEL_30;
    v15 = *(_QWORD *)(v75 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v76)
        goto LABEL_30;
      v15 = *(_QWORD *)(v75 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v76)
          goto LABEL_30;
        v15 = *(_QWORD *)(v75 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_21:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v77 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v77 + 56) + 24 * v13);
    v21 = *v20;
    v22 = v20[1];
    v23 = v20[2];
    swift_beginAccess();
    v86 = v19;
    v87 = v18;
    sub_1BDDB6CA4(v19, v18);
    sub_1BDDB6CA4(v19, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v25 = sub_1BDDB7C54(&v88, &v86);
    if (v24[2])
    {
      v26 = v24;
      result = *v24;
      if (!*v24)
        goto LABEL_73;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        *v26 = (*(uint64_t (**)(void))(*(_QWORD *)*v26 + 160))();
        swift_release();
      }
      v27 = *v26;
      v82 = v23;
      (*(void (**)(uint64_t *))(*(_QWORD *)v27 + 224))(&v82);
      ((void (*)(__int128 *, _QWORD))v25)(&v88, 0);
      swift_endAccess();
      sub_1BDDB796C(v86, v87);
    }
    else
    {
      ((void (*)(__int128 *, _QWORD))v25)(&v88, 0);
      sub_1BDDB796C(v86, v87);
      swift_endAccess();
    }
    swift_beginAccess();
    v86 = v19;
    v87 = v18;
    sub_1BDDB6CA4(v19, v18);
    v28 = (void (*)(__int128 *, char))sub_1BDD8ED7C(&v88, &v86);
    if (*(_QWORD *)(v29 + 16))
    {
      sub_1BDDAF714(v22);
      sub_1BDDAF714(v21);
      v28(&v88, 0);
      swift_endAccess();
      sub_1BDDB796C(v86, v87);
    }
    else
    {
      v28(&v88, 0);
      sub_1BDDB796C(v86, v87);
      swift_endAccess();
    }
    swift_beginAccess();
    sub_1BDDAF714(v22);
    sub_1BDDAF714(v21);
    swift_endAccess();
    swift_beginAccess();
    sub_1BDDB6CA4(v19, v18);
    sub_1BDDBC6BC(v81, v19, v18);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v19, v18);
    result = sub_1BDDB796C(v81[0], v81[1]);
  }
  v16 = v14 + 3;
  if (v16 < v76)
  {
    v15 = *(_QWORD *)(v75 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v11 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        if (v11 >= v76)
          goto LABEL_30;
        v15 = *(_QWORD *)(v75 + 8 * v11);
        ++v16;
        if (v15)
          goto LABEL_21;
      }
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    v11 = v16;
    goto LABEL_21;
  }
LABEL_30:
  swift_release();
  v30 = *(_QWORD *)(v74 + 64);
  v70 = v74 + 64;
  v31 = 1 << *(_BYTE *)(v74 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v34 = 0;
  v71 = (unint64_t)(v31 + 63) >> 6;
  v35 = v69;
  while (2)
  {
    if (v33)
    {
      v36 = __clz(__rbit64(v33));
      v37 = (v33 - 1) & v33;
      v38 = v36 | (v34 << 6);
      result = v80;
      goto LABEL_51;
    }
    v39 = v34 + 1;
    result = v80;
    if (__OFADD__(v34, 1))
      goto LABEL_70;
    if (v39 >= v71)
    {
LABEL_68:
      swift_release();
      sub_1BDDB639C(0, 0);
      swift_beginAccess();
      v65 = v68;
      swift_bridgeObjectRetain();
      v66 = swift_bridgeObjectRetain();
      sub_1BDDAF714(v66);
      sub_1BDDAF714(v65);
      swift_endAccess();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v40 = *(_QWORD *)(v70 + 8 * v39);
    ++v34;
    if (v40)
      goto LABEL_50;
    v34 = v39 + 1;
    if (v39 + 1 >= v71)
      goto LABEL_68;
    v40 = *(_QWORD *)(v70 + 8 * v34);
    if (v40)
      goto LABEL_50;
    v34 = v39 + 2;
    if (v39 + 2 >= v71)
      goto LABEL_68;
    v40 = *(_QWORD *)(v70 + 8 * v34);
    if (v40)
    {
LABEL_50:
      v37 = (v40 - 1) & v40;
      v38 = __clz(__rbit64(v40)) + (v34 << 6);
LABEL_51:
      v42 = (uint64_t *)(*(_QWORD *)(v74 + 48) + 16 * v38);
      v43 = *v42;
      v44 = v42[1];
      v45 = (uint64_t *)(*(_QWORD *)(v74 + 56) + 24 * v38);
      v46 = *v45;
      v47 = v45[1];
      v48 = v45[2];
      v49 = v78;
      sub_1BDD9C318(result, v78, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v50 = *(_QWORD *)(*(_QWORD *)(v49 + *(int *)(v35 + 20)) + 16);
      sub_1BDDB6CA4(v43, v44);
      v77 = v34;
      v76 = v37;
      if (v50)
      {
        sub_1BDDB6CA4(v43, v44);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1BDDB7F0C(v43, v44);
        if ((v51 & 1) != 0)
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1BDDB796C(v43, v44);
          sub_1BDD9C3E0(v78, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_beginAccess();
          v84 = v43;
          v85 = v44;
          sub_1BDDB6CA4(v43, v44);
          v53 = sub_1BDDB7C54(v81, &v84);
          if (v52[2])
          {
            v54 = v52;
            result = *v52;
            if (!*v52)
              goto LABEL_74;
            v35 = v69;
            if (v48 != result)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                *v54 = (*(uint64_t (**)(void))(*(_QWORD *)*v54 + 160))();
                swift_release();
              }
              (*(void (**)(uint64_t))(*(_QWORD *)*v54 + 96))(v48);
            }
            ((void (*)(uint64_t *, _QWORD))v53)(v81, 0);
            swift_endAccess();
            sub_1BDDB796C(v84, v85);
          }
          else
          {
            ((void (*)(uint64_t *, _QWORD))v53)(v81, 0);
            sub_1BDDB796C(v84, v85);
            swift_endAccess();
            v35 = v69;
          }
          swift_beginAccess();
          v84 = v43;
          v85 = v44;
          sub_1BDDB6CA4(v43, v44);
          v63 = sub_1BDD8ED7C(v81, &v84);
          v33 = v76;
          if (*(_QWORD *)(v64 + 16))
          {
            sub_1BDDAF714(v47);
            sub_1BDDAF714(v46);
            v63(v81, 0);
            swift_endAccess();
            sub_1BDDB796C(v84, v85);
          }
          else
          {
            v63(v81, 0);
            sub_1BDDB796C(v84, v85);
            swift_endAccess();
          }
          goto LABEL_34;
        }
        sub_1BDDB796C(v43, v44);
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      sub_1BDD9C3E0(v78, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      v55 = MEMORY[0x1E0DEE9D8];
      v56 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
      v57 = sub_1BDDB6CE8(v55);
      sub_1BDDB6E0C(v55);
      sub_1BDDB6CE8(v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v88 = (unint64_t)v48;
      v89 = v46;
      v90 = v47;
      v91 = v56;
      v92 = v57;
      v58 = v80;
      swift_beginAccess();
      v59 = v48;
      v60 = v35;
      v61 = *(int *)(v35 + 20);
      sub_1BDDB6CA4(v43, v44);
      v75 = v59;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v82 = *(_QWORD *)(v58 + v61);
      *(_QWORD *)(v58 + v61) = 0x8000000000000000;
      sub_1BDD8CFA4(&v88, v43, v44, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v58 + v61) = v82;
      v35 = v60;
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v43, v44);
      if (*(_QWORD *)(v47 + 16))
      {
        sub_1BDDB6CA4(v43, v44);
        sub_1BDDBC6BC(&v82, v43, v44);
        sub_1BDDB796C(v82, v83);
      }
      v82 = v43;
      v83 = v44;
      v84 = v46;
      v85 = v47;
      sub_1BDDBB074(&v82, &v84);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v33 = v76;
LABEL_34:
      swift_beginAccess();
      sub_1BDDB6CA4(v43, v44);
      sub_1BDDBC6BC(&v82, v43, v44);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v43, v44);
      sub_1BDDB796C(v82, v83);
      v34 = v77;
      continue;
    }
    break;
  }
  v41 = v39 + 3;
  if (v41 >= v71)
    goto LABEL_68;
  v40 = *(_QWORD *)(v70 + 8 * v41);
  if (v40)
  {
    v34 = v41;
    goto LABEL_50;
  }
  while (1)
  {
    v34 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v34 >= v71)
      goto LABEL_68;
    v40 = *(_QWORD *)(v70 + 8 * v34);
    ++v41;
    if (v40)
      goto LABEL_50;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
  return result;
}

uint64_t sub_1BDE5DF30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return Capsule.Ref.subscript.getter(a1, a2, a3);
}

uint64_t sub_1BDE5DF50(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  sub_1BDE76CD0(a1, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t (*sub_1BDE5DF90(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = Capsule.Ref.subscript.modify(v8, a2, a3, a4);
  return sub_1BDE5DFF8;
}

uint64_t sub_1BDE5DFFC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return Capsule.Ref.subscript.getter(a1, a2, a3);
}

uint64_t sub_1BDE5E01C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_1BDE76D38(a1, a2, a3, a4);
  v5 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t (*sub_1BDE5E068(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = Capsule.Ref.subscript.modify(v8, a2, a3, a4);
  return sub_1BDE5DFF8;
}

void sub_1BDE5E0D0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t sub_1BDE5E0FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BE1B36EC();
  return sub_1BDE5E220(a1, v2);
}

uint64_t sub_1BDE5E12C(uint64_t a1, uint64_t a2)
{
  return sub_1BDDB2730(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
}

unint64_t sub_1BDE5E140(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 88))(v4);
  v2 = sub_1BE1B371C();
  return sub_1BDE5EC4C(a1, v2);
}

unint64_t sub_1BDE5E1A0(uint64_t a1)
{
  uint64_t v2;

  sub_1BE1B317C();
  v2 = sub_1BE1B26D8();
  return sub_1BDE5ED64(a1, v2);
}

unint64_t sub_1BDE5E220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1BDE5E2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_1BDE5EC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    v8 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 48) + 8 * i) + 96);
    swift_retain();
    LOBYTE(v8) = v8(a1);
    swift_release();
    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * i) + 96);
        swift_retain();
        v11 = v10(a1);
        swift_release();
        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1BDE5ED64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_1BE1B317C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_1BE1B2798();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_1BDE5EE9C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;

  v3 = v2;
  v5 = sub_1BE1B1DF0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED648);
  v40 = a2;
  v10 = sub_1BE1B3254();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v37 = v2;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_34;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_34:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v38)
              goto LABEL_34;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      sub_1BDDF32F4();
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      sub_1BDDF32C0();
    }
    sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    result = sub_1BE1B26D8();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = sub_1BDDF32F4();
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1BDE5F238(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF80);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_1BDDB6CA4(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
      swift_retain();
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE5F540(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED650);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_1BDDB6CA4(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE5F840(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF68);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_1BDDB6CA4(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE5FB40(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B720);
  v35 = a2;
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      sub_1BDE77688(v22, v36);
    }
    else
    {
      sub_1BDDC1538((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    sub_1BE1B27C8();
    sub_1BE1B36F8();
    sub_1BE1B2834();
    v24 = sub_1BE1B371C();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)sub_1BDE77688(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE5FE78(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF20);
  v36 = a2;
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1BE1B36F8();
    sub_1BE1B2834();
    result = sub_1BE1B371C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE6018C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  char v41[72];

  v3 = v2;
  v5 = type metadata accessor for Timestamp(0);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D010);
  v40 = a2;
  v9 = sub_1BE1B3254();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v38 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      break;
    v22 = v38;
    v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_34;
      v23 = v38[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v37)
              goto LABEL_34;
            v23 = v38[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20);
    v26 = *(_QWORD *)(v39 + 72);
    v27 = *(_QWORD *)(v8 + 56) + v26 * v20;
    if ((v40 & 1) != 0)
    {
      sub_1BDDA2E8C(v27, (uint64_t)v7, type metadata accessor for Timestamp);
    }
    else
    {
      sub_1BDD9C318(v27, (uint64_t)v7, type metadata accessor for Timestamp);
      swift_retain();
    }
    sub_1BE1B36F8();
    (*(void (**)(char *))(*(_QWORD *)v25 + 88))(v41);
    result = sub_1BE1B371C();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v18) = v25;
    result = sub_1BDDA2E8C((uint64_t)v7, *(_QWORD *)(v10 + 56) + v26 * v18, type metadata accessor for Timestamp);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v36;
  v22 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1BDE60504(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  char v34[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFE8);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v31 = v2;
  v32 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v32 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_33;
      v23 = *(_QWORD *)(v32 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v31;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v32 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v23 = *(_QWORD *)(v32 + 8 * v14);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v14 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
    if ((a2 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1BE1B36F8();
    (*(void (**)(char *))(*(_QWORD *)v29 + 88))(v34);
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v17 == v26;
        if (v17 == v26)
          v17 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v29;
    *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v31;
  v22 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v22, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE6080C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t i;
  int v48;
  uint64_t v49;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v49 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D008);
  v48 = a2;
  v12 = sub_1BE1B3254();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_42;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v2;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v21 = v11;
  for (i = v11; ; v21 = i)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v27 = v45[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_35:
          swift_release();
          v3 = v43;
          if ((v48 & 1) == 0)
            goto LABEL_42;
          goto LABEL_36;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_44;
            if (v20 >= v44)
              goto LABEL_35;
            v27 = v45[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = *(_QWORD *)(v8 + 72);
    v30 = *(_QWORD *)(v21 + 48) + v29 * v24;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v30, v7);
      v31 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      sub_1BDDA2EF0(v31 + v32 * v24, v49, &qword_1EF52CFF0);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v30, v7);
      v33 = *(_QWORD *)(v21 + 56);
      v32 = *(_QWORD *)(v46 + 72);
      sub_1BDD86DEC(v33 + v32 * v24, v49, &qword_1EF52CFF0);
    }
    sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1BE1B26D8();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v29 * v22, v10, v7);
    result = sub_1BDDA2EF0(v49, *(_QWORD *)(v13 + 56) + v32 * v22, &qword_1EF52CFF0);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v3 = v43;
  v26 = v45;
  if ((v48 & 1) == 0)
    goto LABEL_42;
LABEL_36:
  v41 = 1 << *(_BYTE *)(i + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(i + 16) = 0;
LABEL_42:
  result = swift_release();
  *v3 = v13;
  return result;
}

uint64_t sub_1BDE60C2C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  char v38[72];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D000);
  v36 = a2;
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = v2;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          v3 = v33;
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
    v30 = *(_QWORD *)(v5 + 56) + 24 * v20;
    v37 = *(_OWORD *)v30;
    v31 = *(_QWORD *)(v30 + 16);
    if ((v36 & 1) == 0)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1BE1B36F8();
    (*(void (**)(char *))(*(_QWORD *)v29 + 88))(v38);
    result = sub_1BE1B371C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v17) = v29;
    v18 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_OWORD *)v18 = v37;
    *(_QWORD *)(v18 + 16) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v33;
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v22, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE60F6C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  char v41[72];

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF8);
  v40 = a2;
  v9 = sub_1BE1B3254();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v38 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v36 = v2;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v37)
      break;
    v22 = v38;
    v23 = v38[v21];
    ++v17;
    if (!v23)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_34;
      v23 = v38[v17];
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v40 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v23 = v38[v24];
        if (!v23)
        {
          while (1)
          {
            v17 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_43;
            if (v17 >= v37)
              goto LABEL_34;
            v23 = v38[v17];
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
        v17 = v24;
      }
    }
LABEL_21:
    v14 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    v25 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20);
    v26 = *(_QWORD *)(v39 + 72);
    v27 = *(_QWORD *)(v8 + 56) + v26 * v20;
    if ((v40 & 1) != 0)
    {
      sub_1BDDA2EF0(v27, (uint64_t)v7, &qword_1EF52CFF0);
    }
    else
    {
      sub_1BDD86DEC(v27, (uint64_t)v7, &qword_1EF52CFF0);
      swift_retain();
    }
    sub_1BE1B36F8();
    (*(void (**)(char *))(*(_QWORD *)v25 + 88))(v41);
    result = sub_1BE1B371C();
    v28 = -1 << *(_BYTE *)(v10 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v18) = v25;
    result = sub_1BDDA2EF0((uint64_t)v7, *(_QWORD *)(v10 + 56) + v26 * v18, &qword_1EF52CFF0);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v36;
  v22 = v38;
  if ((v40 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v8 + 32);
  if (v35 >= 64)
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v35;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1BDE612E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B710);
  v6 = a2;
  v7 = sub_1BE1B3254();
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_31;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v39)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v40 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v39)
        goto LABEL_33;
      v26 = *(_QWORD *)(v40 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v6 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v26 = *(_QWORD *)(v40 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_42;
            if (v14 >= v39)
              goto LABEL_33;
            v26 = *(_QWORD *)(v40 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_30;
          }
        }
        v14 = v27;
      }
    }
LABEL_30:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_31:
    v32 = 16 * v23;
    v33 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v32);
    v34 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v36 = *v34;
    v35 = v34[1];
    v41 = v33;
    if ((v6 & 1) == 0)
    {
      sub_1BDDB6CA4(v33, *((unint64_t *)&v33 + 1));
      swift_retain();
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v41;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      v19 = v41;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v20 = 16 * v18;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + v20) = v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v20);
    *v21 = v36;
    v21[1] = v35;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v38;
  v25 = (_QWORD *)(v5 + 64);
  if ((v6 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_1BDE61610(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF60);
  v38 = a2;
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_33;
        v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_33;
          v23 = v37[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v38 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v36)
                  goto LABEL_33;
                v23 = v37[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 32 * v21);
      v31 = *v30;
      v32 = v30[1];
      v33 = v30[2];
      v34 = v30[3];
      v39 = v29;
      if ((v38 & 1) == 0)
      {
        sub_1BDDB6CA4(v29, *((unint64_t *)&v29 + 1));
        sub_1BDDB6CA4(v31, v32);
        sub_1BDDB6CA4(v33, v34);
      }
      sub_1BE1B36F8();
      sub_1BE1B1E8C();
      result = sub_1BE1B371C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v18 = v39;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        v18 = v39;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17) = v18;
      v19 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 32 * v17);
      *v19 = v31;
      v19[1] = v32;
      v19[2] = v33;
      v19[3] = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE61944(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CEF8);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
      sub_1BDDB6CA4(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE61C44(uint64_t a1, int a2)
{
  return sub_1BDE61FB0(a1, a2, &qword_1EF52CF08, &qword_1EF52CF10);
}

uint64_t sub_1BDE61C58(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF00);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v31 = *(_QWORD *)(v5 + 56) + 24 * v21;
    v37 = *(_OWORD *)v31;
    v38 = v30;
    v32 = *(_QWORD *)(v31 + 16);
    if ((a2 & 1) == 0)
    {
      sub_1BDDB6CA4(v30, *((unint64_t *)&v30 + 1));
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      v18 = v38;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      v18 = v38;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17) = v18;
    v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_OWORD *)v19 = v37;
    *(_QWORD *)(v19 + 16) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE61F9C(uint64_t a1, int a2)
{
  return sub_1BDE61FB0(a1, a2, &qword_1ED6F29C8, &qword_1EF52CF88);
}

uint64_t sub_1BDE61FB0(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  __int128 v47;

  v7 = v4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v45 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v46 = a2;
  v13 = sub_1BE1B3254();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_41;
  v42 = v4;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v44 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v25 = v24 | (v21 << 6);
      goto LABEL_22;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43)
      break;
    v27 = v44;
    v28 = v44[v26];
    ++v21;
    if (!v28)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v43)
        goto LABEL_34;
      v28 = v44[v21];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          v7 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            v21 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_43;
            if (v21 >= v43)
              goto LABEL_34;
            v28 = v44[v21];
            ++v29;
            if (v28)
              goto LABEL_21;
          }
        }
        v21 = v29;
      }
    }
LABEL_21:
    v18 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_22:
    v30 = *(_QWORD *)(v45 + 72);
    v31 = *(_QWORD *)(v12 + 56) + v30 * v25;
    v32 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v25 + 8);
    v47 = *(_OWORD *)(*(_QWORD *)(v12 + 48) + 16 * v25);
    if ((v46 & 1) != 0)
    {
      sub_1BDDA2EF0(v31, (uint64_t)v11, a3);
    }
    else
    {
      sub_1BDD86DEC(v31, (uint64_t)v11, a3);
      sub_1BDDB6CA4(v47, v32);
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v33 = -1 << *(_BYTE *)(v14 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      v23 = v47;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      v23 = v47;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v19 + 8 * v35);
      }
      while (v39 == -1);
      v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_OWORD *)(*(_QWORD *)(v14 + 48) + 16 * v22) = v23;
    result = sub_1BDDA2EF0((uint64_t)v11, *(_QWORD *)(v14 + 56) + v30 * v22, a3);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release();
  v7 = v42;
  v27 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v40 = 1 << *(_BYTE *)(v12 + 32);
  if (v40 >= 64)
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v40;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v7 = v14;
  return result;
}

uint64_t sub_1BDE62334(uint64_t a1, char a2)
{
  return sub_1BDE6234C(a1, a2, &qword_1EF52C4E0);
}

uint64_t sub_1BDE62340(uint64_t a1, char a2)
{
  return sub_1BDE6234C(a1, a2, &qword_1EF52CF90);
}

uint64_t sub_1BDE6234C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = sub_1BE1B3254();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_33;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_33:
          swift_release();
          v4 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v14 >= v36)
              goto LABEL_33;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v14 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    v31 = *(_OWORD *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v32 = *(_QWORD *)(v6 + 56) + 24 * v22;
    v33 = *(_QWORD *)v32;
    v38 = *(_OWORD *)(v32 + 8);
    v39 = v31;
    if ((a2 & 1) == 0)
    {
      sub_1BDDB6CA4(v31, *((unint64_t *)&v31 + 1));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v39;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      v19 = v39;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18) = v19;
    v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_QWORD *)v20 = v33;
    *(_OWORD *)(v20 + 8) = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v35;
  v24 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1BDE6268C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFA8);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v12)
          goto LABEL_33;
        v25 = v9[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v12)
            goto LABEL_33;
          v25 = v9[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v25 = v9[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_42;
                if (v15 >= v12)
                  goto LABEL_33;
                v25 = v9[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      v35 = v32;
      if ((a2 & 1) == 0)
      {
        sub_1BDDB6CA4(v32, *((unint64_t *)&v32 + 1));
        sub_1BDDB6CA4(v34, *((unint64_t *)&v34 + 1));
      }
      sub_1BE1B36F8();
      sub_1BE1B1E8C();
      result = sub_1BE1B371C();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        v20 = v35;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        v20 = v35;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v21 = 16 * v19;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + v21) = v20;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + v21) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE629A0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF98);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_1BDDB6CA4(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
      swift_retain();
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE62CA8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  __int128 v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B718);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v15 << 6);
      }
      else
      {
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v12)
          goto LABEL_34;
        v21 = v9[v20];
        ++v15;
        if (!v21)
        {
          v15 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_34;
          v21 = v9[v15];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_34:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v15 >= v12)
                  goto LABEL_34;
                v21 = v9[v15];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v15 = v22;
          }
        }
LABEL_21:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      v23 = *(_QWORD *)(v5 + 48);
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v19);
      v25 = *(_QWORD *)(v23 + 16 * v19 + 8);
      v35 = *(_OWORD *)(v23 + 16 * v19);
      if ((a2 & 1) != 0)
      {
        sub_1BDE77688(v24, v36);
      }
      else
      {
        sub_1BDDC1538((uint64_t)v24, (uint64_t)v36);
        sub_1BDDB6CA4(v35, v25);
      }
      sub_1BE1B36F8();
      sub_1BE1B1E8C();
      result = sub_1BE1B371C();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
        v17 = v35;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        v17 = v35;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v13 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v16) = v17;
      result = (uint64_t)sub_1BDE77688(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v16));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE62FB4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFC0);
  result = sub_1BE1B3254();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      result = sub_1BE1B36EC();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE63268(uint64_t a1, int a2)
{
  return sub_1BDDAEC08(a1, a2, &qword_1EF52CF40);
}

uint64_t sub_1BDE63274(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EEC08);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v12)
          goto LABEL_33;
        v25 = v9[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v12)
            goto LABEL_33;
          v25 = v9[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v25 = v9[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_42;
                if (v15 >= v12)
                  goto LABEL_33;
                v25 = v9[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      v35 = v32;
      if ((a2 & 1) == 0)
      {
        sub_1BDDB6CA4(v32, *((unint64_t *)&v32 + 1));
        swift_unknownObjectRetain();
      }
      sub_1BE1B36F8();
      sub_1BE1B1E8C();
      result = sub_1BE1B371C();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        v20 = v35;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        v20 = v35;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v21 = 16 * v19;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + v21) = v20;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + v21) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1BDE63584(uint64_t a1, int a2)
{
  return sub_1BDDC573C(a1, a2, &qword_1EF52B708);
}

uint64_t sub_1BDE63590(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_1BE1B1DF0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B860);
  v42 = a2;
  v10 = sub_1BE1B3254();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
    sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    result = sub_1BE1B26D8();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

void *sub_1BDE63924()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for Replica();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26B0);
  v6 = *v0;
  v7 = sub_1BE1B3248();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    sub_1BDD9C318(*(_QWORD *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v20 = 16 * v18;
    sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v6 + 56) + v20), v26);
    sub_1BDDA2E8C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    result = sub_1BDDB4F58(v26, (_QWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE63B5C()
{
  return sub_1BDE668CC(&qword_1ED6EFCB0);
}

void *sub_1BDE63B68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v1 = v0;
  v2 = sub_1BE1B1DF0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED648);
  v6 = *v0;
  v7 = sub_1BE1B3248();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v16)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v12);
      if (!v21)
        break;
    }
LABEL_25:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    sub_1BDDF32C0();
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = (void *)sub_1BDDF32F4();
  }
  v22 = v20 + 2;
  if (v22 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE63DA4()
{
  return sub_1BDE668CC(&qword_1ED6F2DD8);
}

void *sub_1BDE63DB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2888);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE63F5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF80);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_1BDDB6CA4(v19, *((unint64_t *)&v19 + 1));
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE64110()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFDB8);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_1BDDB6CA4(v19, *((unint64_t *)&v19 + 1));
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE642C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED650);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)sub_1BDDB6CA4(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE64470()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF68);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)sub_1BDDB6CA4(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1BDE6461C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B720);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_1BDDC1538(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1BDE77688(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE647E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF20);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE64994()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2880);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE64B48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for Timestamp(0);
  v27 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D010);
  v5 = *v0;
  v6 = sub_1BE1B3248();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v27 + 72) * v17;
    sub_1BDD9C318(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for Timestamp);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    sub_1BDDA2E8C((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, type metadata accessor for Timestamp);
    result = (void *)swift_retain();
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE64D7C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFE8);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    swift_retain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE64F44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  v36 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1BE1B1F58();
  v3 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D008);
  v30 = v0;
  v5 = *v0;
  v6 = sub_1BE1B3248();
  v7 = *(_QWORD *)(v5 + 16);
  v38 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v28 = v38;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v38;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v37 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = v5 + 64;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v16 = v33;
  v15 = v34;
  v17 = (uint64_t)v35;
  for (i = v38; ; result = (void *)sub_1BDDA2EF0(v17, *(_QWORD *)(i + 56) + v23, &qword_1EF52CFF0))
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v37;
      goto LABEL_9;
    }
    v24 = v11 + 1;
    v21 = v37;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_22:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(_QWORD *)(v21 + 48) + v22, v15);
    v23 = *(_QWORD *)(v36 + 72) * v20;
    sub_1BDD86DEC(*(_QWORD *)(v21 + 56) + v23, v17, &qword_1EF52CFF0);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(i + 48) + v22, v16, v15);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release();
    v27 = v30;
    v28 = v38;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1BDE65210()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52D000);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE653F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF0);
  v26 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFF8);
  v5 = *v0;
  v6 = sub_1BE1B3248();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v7;
    return result;
  }
  v24 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14)
      goto LABEL_23;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      v10 = v20 + 1;
      if (v20 + 1 >= v14)
        goto LABEL_23;
      v21 = *(_QWORD *)(v25 + 8 * v10);
      if (!v21)
        break;
    }
LABEL_22:
    v13 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v19 = *(_QWORD *)(v26 + 72) * v16;
    sub_1BDD86DEC(*(_QWORD *)(v5 + 56) + v19, (uint64_t)v4, &qword_1EF52CFF0);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    sub_1BDDA2EF0((uint64_t)v4, *(_QWORD *)(v7 + 56) + v19, &qword_1EF52CFF0);
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_25;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v10 >= v14)
      goto LABEL_23;
    v21 = *(_QWORD *)(v25 + 8 * v10);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1BDE65630()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B710);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v20;
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1BDDB6CA4(v20, *((unint64_t *)&v20 + 1));
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE657E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF60);
  v27 = v0;
  v1 = *v0;
  v2 = sub_1BE1B3248();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v24 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v12)
      goto LABEL_26;
    v25 = *(_QWORD *)(v5 + 8 * v24);
    ++v8;
    if (!v25)
    {
      v8 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_26;
      v25 = *(_QWORD *)(v5 + 8 * v8);
      if (!v25)
        break;
    }
LABEL_25:
    v11 = (v25 - 1) & v25;
    v14 = __clz(__rbit64(v25)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = 32 * v14;
    v17 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = *(_OWORD *)(*(_QWORD *)(v1 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v3 + 48) + v15) = v22;
    v23 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v16);
    *v23 = v18;
    v23[1] = v19;
    v23[2] = v20;
    v23[3] = v21;
    sub_1BDDB6CA4(v22, *((unint64_t *)&v22 + 1));
    sub_1BDDB6CA4(v18, v19);
    result = (void *)sub_1BDDB6CA4(v20, v21);
  }
  v26 = v24 + 2;
  if (v26 >= v12)
    goto LABEL_26;
  v25 = *(_QWORD *)(v5 + 8 * v26);
  if (v25)
  {
    v8 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v25 = *(_QWORD *)(v5 + 8 * v8);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE659D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CEF8);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
    result = (void *)sub_1BDDB6CA4(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE65B7C()
{
  return sub_1BDE65D90(&qword_1EF52CF08, &qword_1EF52CF10);
}

void *sub_1BDE65B90()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF00);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 24 * v15;
    v18 = *(_QWORD *)(v2 + 56) + v17;
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v21 = *(_OWORD *)v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v20;
    v22 = *(_QWORD *)(v4 + 56) + v17;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v19;
    sub_1BDDB6CA4(v20, *((unint64_t *)&v20 + 1));
    swift_retain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE65D7C()
{
  return sub_1BDE65D90(&qword_1ED6F29C8, &qword_1EF52CF88);
}

void *sub_1BDE65D90(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v29 = v2;
  v8 = *v2;
  v9 = sub_1BE1B3248();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v29 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v22 = *v21;
    v23 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_1BDD86DEC(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (uint64_t *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v22;
    v25[1] = v23;
    sub_1BDDA2EF0((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    result = (void *)sub_1BDDB6CA4(v22, v23);
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE65FC4()
{
  return sub_1BDE65FDC(&qword_1EF52C4E0);
}

void *sub_1BDE65FD0()
{
  return sub_1BDE65FDC(&qword_1EF52CF90);
}

void *sub_1BDE65FDC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1BE1B3248();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_26;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_25:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = 24 * v16;
    v19 = *(_QWORD *)(v3 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 48) + v17);
    v22 = *(_OWORD *)(v19 + 8);
    *(_OWORD *)(*(_QWORD *)(v5 + 48) + v17) = v21;
    v23 = *(_QWORD *)(v5 + 56) + v18;
    *(_QWORD *)v23 = v20;
    *(_OWORD *)(v23 + 8) = v22;
    sub_1BDDB6CA4(v21, *((unint64_t *)&v21 + 1));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v26 = v24 + 2;
  if (v26 >= v14)
    goto LABEL_26;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE661C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int128 v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFA8);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v21 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v21;
    sub_1BDDB6CA4(v17, *((unint64_t *)&v17 + 1));
    result = (void *)sub_1BDDB6CA4(v21, *((unint64_t *)&v21 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE66384()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF98);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_1BDDB6CA4(v19, *((unint64_t *)&v19 + 1));
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE66538()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B718);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 32 * v15;
    sub_1BDDC1538(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    sub_1BDE77688(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)sub_1BDDB6CA4(v18, v19);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE66720()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFC0);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE668C0()
{
  return sub_1BDE668CC(&qword_1EF52CF40);
}

void *sub_1BDE668CC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = sub_1BE1B1F58();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = sub_1BE1B3248();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v27 = v7 + 64;
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + v20);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE66AF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EEC08);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    sub_1BDDB6CA4(v17, *((unint64_t *)&v17 + 1));
    result = (void *)swift_unknownObjectRetain();
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE66CB0()
{
  return sub_1BDE66CC8(qword_1ED6F0018);
}

void *sub_1BDE66CBC()
{
  return sub_1BDE66CC8(&qword_1EF52B708);
}

void *sub_1BDE66CC8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = sub_1BE1B1DF0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = sub_1BE1B3248();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BDE66EF8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_1BE1B1DF0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B860);
  v24 = v0;
  v5 = *v0;
  v6 = sub_1BE1B3248();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1BDE67128(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  void *v19;
  id v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_23;
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[4];
  sub_1BDDB6CA4(v9, v7);
  swift_retain();
  if (!v8)
    goto LABEL_23;
  v10 = (_QWORD *)*a3;
  v11 = sub_1BDDB7F0C(v9, v7);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  LOBYTE(v17) = v12;
  if (v10[3] < v16)
  {
    sub_1BDE629A0(v16, a2 & 1);
    v11 = sub_1BDDB7F0C(v9, v7);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    v11 = sub_1BE1B3680();
    __break(1u);
  }
  if ((a2 & 1) != 0)
  {
LABEL_8:
    if ((v17 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v11;
  sub_1BDE66384();
  v11 = v21;
  if ((v17 & 1) != 0)
  {
LABEL_9:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v9, v7);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v23 = (uint64_t *)(v22[6] + 16 * v11);
  *v23 = v9;
  v23[1] = v7;
  *(_QWORD *)(v22[7] + 8 * v11) = v8;
  v24 = v22[2];
  v15 = __OFADD__(v24, 1);
  v25 = v24 + 1;
  if (v15)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_1BE1B305C();
    sub_1BE1B284C();
    sub_1BE1B3164();
    sub_1BE1B284C();
    sub_1BE1B3200();
    __break(1u);
    return;
  }
  v22[2] = v25;
  if (v6 != 1)
  {
    v17 = a1 + 9;
    v26 = 1;
    while (v26 < a1[2])
    {
      v7 = *(v17 - 1);
      v8 = *v17;
      v9 = *(v17 - 2);
      sub_1BDDB6CA4(v9, v7);
      swift_retain();
      if (!v8)
        goto LABEL_23;
      v27 = (_QWORD *)*a3;
      v28 = sub_1BDDB7F0C(v9, v7);
      v30 = v27[2];
      v31 = (v29 & 1) == 0;
      v15 = __OFADD__(v30, v31);
      v32 = v30 + v31;
      if (v15)
        goto LABEL_25;
      a2 = v29;
      if (v27[3] < v32)
      {
        sub_1BDE629A0(v32, 1);
        v28 = sub_1BDDB7F0C(v9, v7);
        if ((a2 & 1) != (v33 & 1))
          goto LABEL_6;
      }
      if ((a2 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v35 = (uint64_t *)(v34[6] + 16 * v28);
      *v35 = v9;
      v35[1] = v7;
      *(_QWORD *)(v34[7] + 8 * v28) = v8;
      v36 = v34[2];
      v15 = __OFADD__(v36, 1);
      v37 = v36 + 1;
      if (v15)
        goto LABEL_26;
      ++v26;
      v34[2] = v37;
      v17 += 3;
      if (v6 == v26)
        goto LABEL_23;
    }
    goto LABEL_27;
  }
LABEL_23:
  swift_bridgeObjectRelease_n();
}

void (*sub_1BDE674D8(_QWORD *a1, uint64_t a2))(uint64_t)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v5 = type metadata accessor for Replica();
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[8] = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BDD9C318(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v4[9] = sub_1BDD9A2BC(v4);
  v4[10] = sub_1BDE67704(v4 + 4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  return sub_1BDD937F8;
}

uint64_t (*sub_1BDE67590(_QWORD *a1, uint64_t a2, unint64_t a3))()
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x60uLL);
  *a1 = v6;
  v6[8] = a2;
  v6[9] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BDDB6CA4(a2, a3);
  v6[10] = sub_1BDE67BEC(v6);
  v6[11] = sub_1BDE678D4(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1BDDB9F60;
}

void (*sub_1BDE67624(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1BDD9A2BC(v6);
  v6[10] = sub_1BDE67A64(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1BDE676B4;
}

void sub_1BDE676B4(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*sub_1BDE67704(_QWORD *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*result)(uint64_t **);

  v4 = v3;
  v8 = malloc(0x28uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v10 = malloc(*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  v8[2] = v10;
  v11 = *v3;
  v13 = sub_1BDDB3EC0(a2);
  *((_BYTE *)v8 + 32) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v4 + 56);
        v20 = sub_1BE1B206C();
        v21 = *(_QWORD *)(v20 - 8);
        (*(void (**)(void *, unint64_t, uint64_t))(v21 + 32))(v10, v19 + *(_QWORD *)(v21 + 72) * v13, v20);
        v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_1BDE67888;
      }
LABEL_11:
      v20 = sub_1BE1B206C();
      v21 = *(_QWORD *)(v20 - 8);
      v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1BDDB4348();
      goto LABEL_7;
    }
    sub_1BDDB46CC(v16, a3 & 1);
    v23 = sub_1BDDB3EC0(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      v13 = v23;
      v8[3] = v23;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  type metadata accessor for Replica();
  result = (void (*)(uint64_t **))sub_1BE1B3680();
  __break(1u);
  return result;
}

void sub_1BDE67888(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;

  v1 = *a1;
  v2 = (void *)(*a1)[2];
  sub_1BDE67C0C((uint64_t)v2, *((unsigned __int8 *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_1BDD86E30((uint64_t)v2, &qword_1ED6F3C78);
  free(v2);
  free(v1);
}

void (*sub_1BDE678D4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x38uLL);
  *a1 = v10;
  v10[3] = a3;
  v10[4] = v5;
  v10[2] = a2;
  v11 = *v5;
  v13 = sub_1BDDB2730(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
  *((_BYTE *)v10 + 48) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[5] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(*(_QWORD *)(*v5 + 56) + 16 * v13);
        v20 = *v19;
        v21 = v19[1];
LABEL_12:
        *v10 = v20;
        v10[1] = v21;
        return sub_1BDE67A28;
      }
LABEL_11:
      v20 = 0;
      v21 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1BDE65630();
      goto LABEL_7;
    }
    sub_1BDE612E8(v16, a4 & 1);
    v22 = sub_1BDDB2730(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
    if ((v17 & 1) == (v23 & 1))
    {
      v13 = v22;
      v10[5] = v22;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))sub_1BE1B3680();
  __break(1u);
  return result;
}

void sub_1BDE67A28(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1BDE67E1C(*a1, *((_BYTE *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[2], (*a1)[3]);
  swift_release();
  free(v1);
}

void (*sub_1BDE67A64(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_1BDDB2730(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BDDB27A8);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_1BDE67BB0;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1BDE647E0();
      goto LABEL_7;
    }
    sub_1BDE5FE78(v16, a4 & 1);
    v20 = sub_1BDDB2730(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BDDB27A8);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))sub_1BE1B3680();
  __break(1u);
  return result;
}

void sub_1BDE67BB0(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1BDE67FBC(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_release();
  free(v1);
}

uint64_t (*sub_1BDE67BEC(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1BDDB9FB8;
}

unint64_t sub_1BDE67C0C(uint64_t a1, int a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  unint64_t result;
  uint64_t *v21;
  unint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;

  v25 = a5;
  v26 = a4;
  v27 = a3;
  v28 = a2;
  v6 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1BE1B206C();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v25 - v17;
  sub_1BDD86DEC(a1, (uint64_t)v11, &qword_1ED6F3C78);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    v19 = v27;
    result = sub_1BDD86E30((uint64_t)v11, &qword_1ED6F3C78);
    if ((v28 & 1) != 0)
    {
      v21 = v19;
      v22 = v26;
      swift_arrayDestroy();
      return sub_1BDDB4BD4(v22, *v21);
    }
  }
  else
  {
    v23 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v23(v18, v11, v12);
    v24 = (_QWORD *)*v27;
    if ((v28 & 1) != 0)
    {
      return ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(v24[7] + *(_QWORD *)(v13 + 72) * v26, v18, v12);
    }
    else
    {
      sub_1BDD9C318(v25, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v23(v16, v18, v12);
      return sub_1BDDB4614(v26, (uint64_t)v8, (uint64_t)v16, v24);
    }
  }
  return result;
}

uint64_t sub_1BDE67E1C(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;

  v8 = *a1;
  if (*a1)
  {
    v11 = a1[1];
    v12 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v13 = (uint64_t *)(v12[7] + 16 * a4);
      *v13 = v8;
      v13[1] = v11;
    }
    else
    {
      sub_1BE155180(a4, a5, a6, v8, v11, v12);
      sub_1BDDB6CA4(a5, a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_1BDEF1620(a4, *a3);
  }
  return swift_retain();
}

uint64_t sub_1BDE67ECC(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return sub_1BDE67EE0(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BE155280, (void (*)(uint64_t, _QWORD))sub_1BDEF19F4);
}

uint64_t sub_1BDE67EE0(uint64_t *a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a8)(uint64_t, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;

  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  if (*a1)
  {
    v14 = *a3;
    if ((a2 & 1) != 0)
    {
      v15 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 24 * a4);
      *v15 = v10;
      v15[1] = v11;
      v15[2] = v12;
    }
    else
    {
      a7(a4, a5, a6, v10, v11, v12, v14);
      sub_1BDDB6CA4(a5, a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    a8(a4, *a3);
  }
  return sub_1BDE77698(v10);
}

uint64_t sub_1BDE67FBC(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_1BE1550D4(a4, a5, a6, v8, (_QWORD *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_1BDEF144C(a4, *a3);
  }
  return swift_retain();
}

uint64_t sub_1BDE68058(_QWORD *a1, void *a2)
{
  return sub_1BDD83D70(a1, a2, &qword_1EF52CFB8, type metadata accessor for Key);
}

uint64_t sub_1BDE6806C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(_QWORD *);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  _QWORD v21[10];

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    v8 = sub_1BE1B2FF0();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v21[9] = v8;
      type metadata accessor for AnyReference();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v21[0];
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1BE1B2FE4();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v17 = sub_1BDE6AD04(v7, result + 1);
    v21[0] = v17;
    if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
    {
      swift_retain();
      sub_1BDE6AF10();
      v18 = v21[0];
    }
    else
    {
      v18 = v17;
      swift_retain();
    }
    sub_1BDE6D178(a2, v18);
    *v3 = v18;
  }
  else
  {
    sub_1BE1B36F8();
    v10 = *(void (**)(_QWORD *))(*(_QWORD *)a2 + 104);
    swift_bridgeObjectRetain();
    v10(v21);
    v11 = sub_1BE1B371C();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 96);
      swift_retain();
      LOBYTE(v14) = v14(a2);
      swift_release();
      if ((v14 & 1) != 0)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      v15 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v15;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v16 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 48) + 8 * v13) + 96);
        swift_retain();
        LOBYTE(v16) = v16(a2);
        swift_release();
        if ((v16 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *v2;
    *v2 = 0x8000000000000000;
    v20 = swift_retain();
    sub_1BDE6D220(v20, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v21[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1BDE68320(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 __s1[4];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = *v5;
  sub_1BE1B36F8();
  v24 = v5;
  v25 = a1;
  sub_1BE1B3710();
  swift_bridgeObjectRetain();
  if (a2)
  {
    sub_1BDDC8E74(a2);
    swift_bridgeObjectRetain();
    sub_1BDEF5748(__s1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1BDEF5748(__s1, a3);
    swift_bridgeObjectRelease();
    sub_1BDDC8EA0(a2);
  }
  sub_1BDDB6CA4(a4, a5);
  sub_1BE1B1E8C();
  sub_1BDDB796C(a4, a5);
  v12 = sub_1BE1B371C();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v28 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v26 = ~v13;
    v27 = v11;
    while (1)
    {
      v15 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 32 * v14);
      v16 = *v15;
      v17 = v15[1];
      v18 = v15[2];
      v19 = v15[3];
      if (!*v15)
        break;
      sub_1BDDC8E74(*v15);
      if (!a2)
      {
        sub_1BDDC8E74(v16);
        sub_1BDDC8E74(v16);
        sub_1BDDB6CA4(v18, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_13:
        sub_1BDDC8E74(a2);
        sub_1BDDC8EA0(v16);
        v21 = a2;
        goto LABEL_15;
      }
      sub_1BDDC8E74(a2);
      sub_1BDDC8E74(v16);
      sub_1BDDC8E74(v16);
      sub_1BDDB6CA4(v18, v19);
      if ((sub_1BDDBDDBC(v17, a3) & 1) != 0)
      {
        v20 = sub_1BDDBDDBC(v16, a2);
        sub_1BDDC8EA0(a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BDDC8EA0(v16);
        if ((v20 & 1) != 0)
          goto LABEL_11;
        goto LABEL_16;
      }
      sub_1BDDC8EA0(a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v21 = v16;
LABEL_15:
      sub_1BDDC8EA0(v21);
LABEL_16:
      sub_1BDDC8EA0(v16);
      sub_1BDDB796C(v18, v19);
      v11 = v27;
      v14 = (v14 + 1) & v26;
      if (((*(_QWORD *)(v28 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_17;
    }
    sub_1BDDC8E74(0);
    sub_1BDDB6CA4(v18, v19);
    if (!a2)
LABEL_11:
      __asm { BR              X10 }
    goto LABEL_13;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&__s1[0] = *v24;
  *v24 = 0x8000000000000000;
  sub_1BDDC8E74(a2);
  sub_1BDDB6CA4(a4, a5);
  sub_1BDE6D3D0(a2, a3, a4, a5, v14, isUniquelyReferenced_nonNull_native);
  *v24 = *(_QWORD *)&__s1[0];
  swift_bridgeObjectRelease();
  *v25 = a2;
  v25[1] = a3;
  result = 1;
  v25[2] = a4;
  v25[3] = a5;
  return result;
}

uint64_t sub_1BDE69020(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t *v11;
  uint64_t __s1;

  v4 = *v2;
  sub_1BE1B36F8();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_1BDDB6CA4(v5, v6);
  sub_1BE1B1E8C();
  sub_1BDDB796C(v5, v6);
  v7 = sub_1BE1B371C() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1 = *v11;
  *v11 = 0x8000000000000000;
  v9 = swift_retain();
  sub_1BDE6E070(v9, v7, isUniquelyReferenced_nonNull_native);
  *v11 = __s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_1BDE69AAC(_WORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = MEMORY[0x1C3B7D5C4](*(_QWORD *)(v6 + 40), (unsigned __int16)a2, 2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BDE6EAD8(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(unsigned __int16 *)(v10 + 2 * v9) != (unsigned __int16)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int16 *)(v10 + 2 * v9) != (unsigned __int16)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1BDE69BAC(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  sub_1BE1B36F8();
  sub_1BE1B3704();
  v6 = sub_1BE1B371C();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_1BDE6EBFC(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1BDE69CC8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v10;
  uint64_t __s1;

  v6 = *v3;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BE1B1E8C();
  v7 = sub_1BE1B371C() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1 = *v10;
  *v10 = 0x8000000000000000;
  sub_1BDDB6CA4(a2, a3);
  sub_1BDE6ED48(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  *v10 = __s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1BDE6A6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  __int128 v19[4];

  v4 = v3;
  v8 = *v3;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v19, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v19, a3);
  swift_bridgeObjectRelease();
  v9 = sub_1BE1B371C();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  v18 = a1;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v11);
      swift_bridgeObjectRetain();
      v14 = swift_bridgeObjectRetain();
      if ((sub_1BDDBDDBC(v14, a3) & 1) != 0)
      {
        v15 = sub_1BDDBDDBC(v13, a2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_OWORD *)v18 = *(_OWORD *)(*(_QWORD *)(*v4 + 48) + 16 * v11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          return 0;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v19[0] = *v4;
  *v4 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDE6F78C(a2, a3, v11, isUniquelyReferenced_nonNull_native);
  *v4 = *(_QWORD *)&v19[0];
  swift_bridgeObjectRelease();
  *(_QWORD *)v18 = a2;
  *(_QWORD *)(v18 + 8) = a3;
  return 1;
}

uint64_t sub_1BDE6A8FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BE1B2834();
  v8 = sub_1BE1B371C();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1BE1B34AC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1BE1B34AC() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1BDE6F960(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1BDE6AAA8(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1BE1B1DF0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1BDD8422C(&qword_1ED6EFF60, v11, MEMORY[0x1E0CB0018]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1BE1B26D8();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1BDD8422C(&qword_1ED6EF200, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v21 = sub_1BE1B2798();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BDE6FAF8((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1BDE6AD04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD v16[10];
  uint64_t v17;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF48);
    v2 = sub_1BE1B3038();
    v17 = v2;
    sub_1BE1B2FB4();
    v3 = sub_1BE1B3008();
    if (v3)
    {
      v4 = v3;
      type metadata accessor for AnyReference();
      do
      {
        v16[0] = v4;
        swift_dynamicCast();
        v2 = v17;
        if (*(_QWORD *)(v17 + 24) <= *(_QWORD *)(v17 + 16))
        {
          sub_1BDE6AF10();
          v2 = v17;
        }
        v5 = v16[9];
        sub_1BE1B36F8();
        (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 104))(v16);
        result = sub_1BE1B371C();
        v7 = v2 + 56;
        v8 = -1 << *(_BYTE *)(v2 + 32);
        v9 = result & ~v8;
        v10 = v9 >> 6;
        if (((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6))) != 0)
        {
          v11 = __clz(__rbit64((-1 << v9) & ~*(_QWORD *)(v2 + 56 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v12 = 0;
          v13 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v14 = v10 == v13;
            if (v10 == v13)
              v10 = 0;
            v12 |= v14;
            v15 = *(_QWORD *)(v7 + 8 * v10);
          }
          while (v15 == -1);
          v11 = __clz(__rbit64(~v15)) + (v10 << 6);
        }
        *(_QWORD *)(v7 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11) = v5;
        ++*(_QWORD *)(v2 + 16);
        v4 = sub_1BE1B3008();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t sub_1BDE6AF10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF48);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      sub_1BE1B36F8();
      (*(void (**)(char *))(*(_QWORD *)v19 + 104))(v28);
      result = sub_1BE1B371C();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6B1D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;
  __int128 v33[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF28);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v32 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v31 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v15 >= v31)
          goto LABEL_35;
        v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v31)
            goto LABEL_35;
          v16 = v32[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v31)
              goto LABEL_35;
            v16 = v32[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_35:
                swift_release();
                v1 = v0;
                v30 = 1 << *(_BYTE *)(v2 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_41;
                  if (v10 >= v31)
                    goto LABEL_35;
                  v16 = v32[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      v22 = v18[3];
      sub_1BE1B36F8();
      sub_1BE1B3710();
      if (v19)
      {
        sub_1BDDC8E74(v19);
        swift_bridgeObjectRetain();
        sub_1BDEF5748(v33, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1BDEF5748(v33, v20);
        swift_bridgeObjectRelease();
        sub_1BDDC8EA0(v19);
      }
      sub_1BDDB6CA4(v21, v22);
      sub_1BE1B1E8C();
      sub_1BDDB796C(v21, v22);
      result = sub_1BE1B371C();
      v23 = -1 << *(_BYTE *)(v4 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v11);
      *v12 = v19;
      v12[1] = v20;
      v12[2] = v21;
      v12[3] = v22;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6B558()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2680);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1BE1B36F8();
      sub_1BE1B1E8C();
      result = sub_1BE1B371C();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6B834()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF78);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v29 = v0;
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v30[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v30[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v30[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v29;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v30[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v30[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      sub_1BE1B36F8();
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v18 + 24);
      sub_1BDDB6CA4(v19, v20);
      sub_1BE1B1E8C();
      sub_1BDDB796C(v19, v20);
      result = sub_1BE1B371C();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v23);
        }
        while (v27 == -1);
        v12 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6BB24()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF50);
  result = sub_1BE1B302C();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v14);
      result = MEMORY[0x1C3B7D5C4](*(_QWORD *)(v4 + 40), v18, 2);
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6BDA8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF58);
  result = sub_1BE1B302C();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
      sub_1BE1B36F8();
      sub_1BE1B3704();
      result = sub_1BE1B371C();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6C050(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int64_t v30;
  _QWORD *v31;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = sub_1BE1B302C();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v29 = v2;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v31 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v4 + 56);
    v30 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v30)
          goto LABEL_33;
        v17 = v31[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v30)
            goto LABEL_33;
          v17 = v31[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v30)
              goto LABEL_33;
            v17 = v31[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v30)
              {
LABEL_33:
                swift_release();
                v3 = v29;
                v28 = 1 << *(_BYTE *)(v4 + 32);
                if (v28 > 63)
                  bzero(v31, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v31 = -1 << v28;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v17 = v31[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v30)
                    goto LABEL_33;
                  v17 = v31[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15);
      sub_1BE1B27C8();
      sub_1BE1B36F8();
      sub_1BE1B2834();
      v20 = sub_1BE1B371C();
      result = swift_bridgeObjectRelease();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = v20 & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1BDE6C35C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFB0);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1BE1B36F8();
      sub_1BE1B1E8C();
      result = sub_1BE1B371C();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6C638()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFC8);
  result = sub_1BE1B302C();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_1BE1B36EC();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_1BDE6C8B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF18);
  v3 = sub_1BE1B302C();
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = 1 << *(_BYTE *)(v2 + 32);
    v5 = (_QWORD *)(v2 + 56);
    if (v4 < 64)
      v6 = ~(-1 << v4);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    result = swift_retain();
    v10 = 0;
    while (1)
    {
      if (v7)
      {
        v11 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v13 >= v8)
          goto LABEL_23;
        v14 = v5[v13];
        ++v10;
        if (!v14)
        {
          v10 = v13 + 1;
          if (v13 + 1 >= v8)
            goto LABEL_23;
          v14 = v5[v10];
          if (!v14)
          {
            v10 = v13 + 2;
            if (v13 + 2 >= v8)
              goto LABEL_23;
            v14 = v5[v10];
            if (!v14)
            {
              v15 = v13 + 3;
              if (v15 >= v8)
              {
LABEL_23:
                swift_release();
                v16 = 1 << *(_BYTE *)(v2 + 32);
                if (v16 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v5 = -1 << v16;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v14 = v5[v15];
              if (!v14)
              {
                while (1)
                {
                  v10 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_29;
                  if (v10 >= v8)
                    goto LABEL_23;
                  v14 = v5[v10];
                  ++v15;
                  if (v14)
                    goto LABEL_22;
                }
              }
              v10 = v15;
            }
          }
        }
LABEL_22:
        v7 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v12);
      sub_1BE1B36F8();
      swift_bridgeObjectRetain();
      sub_1BDEF5748(v18, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1BDEF5748(v18, *((uint64_t *)&v17 + 1));
      swift_bridgeObjectRelease();
      sub_1BE1B371C();
      result = sub_1BE1B2F9C();
      *(_QWORD *)(v3 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(_OWORD *)(*(_QWORD *)(v3 + 48) + 16 * result) = v17;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_1BDE6CB3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5302D0);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1BE1B36F8();
      sub_1BE1B2834();
      result = sub_1BE1B371C();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1BDE6CE18(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  unint64_t *v45;
  uint64_t v46;

  v45 = a4;
  v46 = a5;
  v7 = v5;
  v44 = a2;
  v8 = a2(0);
  v43 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - v9;
  v11 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v12 = sub_1BE1B302C();
  v13 = v12;
  if (*(_QWORD *)(v11 + 16))
  {
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 56);
    v42 = (_QWORD *)(v11 + 56);
    if (v14 < 64)
      v16 = ~(-1 << v14);
    else
      v16 = -1;
    v17 = v16 & v15;
    v40 = v5;
    v41 = (unint64_t)(v14 + 63) >> 6;
    v18 = v12 + 56;
    result = swift_retain();
    v20 = 0;
    while (1)
    {
      if (v17)
      {
        v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v23 = v22 | (v20 << 6);
      }
      else
      {
        v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v24 >= v41)
          goto LABEL_33;
        v25 = v42[v24];
        ++v20;
        if (!v25)
        {
          v20 = v24 + 1;
          if (v24 + 1 >= v41)
            goto LABEL_33;
          v25 = v42[v20];
          if (!v25)
          {
            v20 = v24 + 2;
            if (v24 + 2 >= v41)
              goto LABEL_33;
            v25 = v42[v20];
            if (!v25)
            {
              v26 = v24 + 3;
              if (v26 >= v41)
              {
LABEL_33:
                swift_release();
                v7 = v40;
                v38 = 1 << *(_BYTE *)(v11 + 32);
                if (v38 > 63)
                  bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v42 = -1 << v38;
                *(_QWORD *)(v11 + 16) = 0;
                break;
              }
              v25 = v42[v26];
              if (!v25)
              {
                while (1)
                {
                  v20 = v26 + 1;
                  if (__OFADD__(v26, 1))
                    goto LABEL_39;
                  if (v20 >= v41)
                    goto LABEL_33;
                  v25 = v42[v20];
                  ++v26;
                  if (v25)
                    goto LABEL_23;
                }
              }
              v20 = v26;
            }
          }
        }
LABEL_23:
        v17 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v20 << 6);
      }
      v27 = v11;
      v28 = *(_QWORD *)(v11 + 48);
      v29 = *(_QWORD *)(v43 + 72);
      v30 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 32);
      v30(v10, v28 + v29 * v23, v8);
      sub_1BDD8422C(v45, v44, v46);
      result = sub_1BE1B26D8();
      v31 = -1 << *(_BYTE *)(v13 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v18 + 8 * v33);
        }
        while (v37 == -1);
        v21 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v30)(*(_QWORD *)(v13 + 48) + v21 * v29, v10, v8);
      ++*(_QWORD *)(v13 + 16);
      v11 = v27;
    }
  }
  result = swift_release();
  *v7 = v13;
  return result;
}

unint64_t sub_1BDE6D178(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  _BYTE v5[72];

  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 104))(v5);
  sub_1BE1B371C();
  result = sub_1BE1B2F9C();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_1BDE6D220(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BYTE v17[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1BDE6AF10();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1BDE6FD4C();
      goto LABEL_14;
    }
    sub_1BDE71008();
  }
  v8 = *v3;
  sub_1BE1B36F8();
  (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 104))(v17);
  result = sub_1BE1B371C();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for AnyReference();
    v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 96);
    swift_retain();
    LOBYTE(v10) = v10(v5);
    result = swift_release();
    if ((v10 & 1) != 0)
    {
LABEL_13:
      result = sub_1BE1B3674();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v12 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 48) + 8 * a2) + 96);
        swift_retain();
        LOBYTE(v12) = v12(v5);
        result = swift_release();
        if ((v12 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1BDE6D3D0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 __s1[4];
  uint64_t v33;

  v7 = v6;
  v10 = a3;
  v12 = result;
  v33 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(*v7 + 16);
  v14 = *(_QWORD *)(*v7 + 24);
  v29 = v7;
  if (v14 <= v13 || (a6 & 1) == 0)
  {
    if ((a6 & 1) != 0)
    {
      sub_1BDE6B1D0();
    }
    else
    {
      if (v14 > v13)
      {
        result = (uint64_t)sub_1BDE6FEF4();
        v10 = a3;
        goto LABEL_26;
      }
      sub_1BDE712B0();
    }
    v31 = *v7;
    sub_1BE1B36F8();
    sub_1BE1B3710();
    if (v12)
    {
      sub_1BDDC8E74(v12);
      swift_bridgeObjectRetain();
      sub_1BDEF5748(__s1, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1BDEF5748(__s1, a2);
      swift_bridgeObjectRelease();
      sub_1BDDC8EA0(v12);
    }
    sub_1BDDB6CA4(a3, a4);
    sub_1BE1B1E8C();
    sub_1BDDB796C(a3, a4);
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v31 + 32);
    a5 = result & ~v15;
    if (((*(_QWORD *)(v31 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
    {
      v30 = ~v15;
      v10 = a3;
      while (1)
      {
        v16 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 32 * a5);
        v17 = *v16;
        v18 = v16[1];
        v19 = v16[2];
        v20 = v16[3];
        if (!*v16)
          break;
        sub_1BDDC8E74(*v16);
        if (!v12)
        {
          sub_1BDDC8E74(v17);
          sub_1BDDC8E74(v17);
          sub_1BDDB6CA4(v19, v20);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_20:
          sub_1BDDC8E74(v12);
          sub_1BDDC8EA0(v17);
          v22 = v12;
          goto LABEL_22;
        }
        sub_1BDDC8E74(v12);
        sub_1BDDC8E74(v17);
        sub_1BDDC8E74(v17);
        sub_1BDDB6CA4(v19, v20);
        if ((sub_1BDDBDDBC(v18, a2) & 1) != 0)
        {
          v21 = sub_1BDDBDDBC(v17, v12);
          sub_1BDDC8EA0(v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1BDDC8EA0(v17);
          if ((v21 & 1) != 0)
            goto LABEL_18;
          goto LABEL_23;
        }
        sub_1BDDC8EA0(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 = v17;
LABEL_22:
        sub_1BDDC8EA0(v22);
LABEL_23:
        sub_1BDDC8EA0(v17);
        result = sub_1BDDB796C(v19, v20);
        a5 = (a5 + 1) & v30;
        if (((*(_QWORD *)(v31 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8)) >> a5) & 1) == 0)
          goto LABEL_26;
      }
      sub_1BDDC8E74(0);
      sub_1BDDB6CA4(v19, v20);
      if (!v12)
LABEL_18:
        __asm { BR              X10 }
      goto LABEL_20;
    }
    v10 = a3;
  }
LABEL_26:
  v23 = *v29;
  *(_QWORD *)(*v29 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 32 * a5);
  *v24 = v12;
  v24[1] = a2;
  v24[2] = v10;
  v24[3] = a4;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
  {
    __break(1u);
    JUMPOUT(0x1BDE6DF48);
  }
  *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_1BDE6E070(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_1BDE6B834();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_1BDE700C0();
        goto LABEL_10;
      }
      sub_1BDE7162C();
    }
    v8 = *v3;
    sub_1BE1B36F8();
    v9 = *(_QWORD *)(v5 + 16);
    v10 = *(_QWORD *)(v5 + 24);
    sub_1BDDB6CA4(v9, v10);
    sub_1BE1B1E8C();
    sub_1BDDB796C(v9, v10);
    result = sub_1BE1B371C();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v11 = *v15;
  *(_QWORD *)(*v15 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * a2) = v5;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
  {
    __break(1u);
    JUMPOUT(0x1BDE6E9FCLL);
  }
  *(_QWORD *)(v11 + 16) = v14;
  return result;
}

uint64_t sub_1BDE6EAD8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = (unsigned __int16)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1BDE6BB24();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1BDE70268();
      goto LABEL_14;
    }
    sub_1BDE718EC();
  }
  v8 = *v3;
  result = MEMORY[0x1C3B7D5C4](*(_QWORD *)(*v3 + 40), v5, 2);
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int16 *)(v10 + 2 * a2) == (_DWORD)v5)
    {
LABEL_13:
      result = sub_1BE1B3674();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int16 *)(v10 + 2 * a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_WORD *)(*(_QWORD *)(v12 + 48) + 2 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1BDE6EBFC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1BDE6BDA8();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1BDE703FC();
      goto LABEL_14;
    }
    sub_1BDE71B50();
  }
  v8 = *v3;
  sub_1BE1B36F8();
  sub_1BE1B3704();
  result = sub_1BE1B371C();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      result = sub_1BE1B3674();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v10 + a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1BDE6ED48(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1BDE6C35C();
    }
    else
    {
      if (v9 > v8)
      {
        result = (uint64_t)sub_1BDE7072C();
        goto LABEL_10;
      }
      sub_1BDE720A0();
    }
    v10 = *v4;
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    a3 = result & ~(-1 << *(_BYTE *)(v10 + 32));
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v11 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v12 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * a3);
  *v12 = v7;
  v12[1] = a2;
  v13 = *(_QWORD *)(v11 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1BDE6F6B0);
  }
  *(_QWORD *)(v11 + 16) = v15;
  return result;
}

uint64_t sub_1BDE6F78C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22[4];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_15;
  if ((a4 & 1) != 0)
  {
    sub_1BDE6C8B8();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1BDE70A70();
      goto LABEL_15;
    }
    sub_1BDE725B0();
  }
  v11 = *v4;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v22, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BDEF5748(v22, a2);
  swift_bridgeObjectRelease();
  result = sub_1BE1B371C();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * a3);
      swift_bridgeObjectRetain();
      v15 = swift_bridgeObjectRetain();
      if ((sub_1BDDBDDBC(v15, a2) & 1) != 0)
      {
        v16 = sub_1BDDBDDBC(v14, v8);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
        {
          result = sub_1BE1B3674();
          __break(1u);
          break;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      a3 = (a3 + 1) & v13;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_15:
  v17 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v18 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * a3);
  *v18 = v8;
  v18[1] = a2;
  v19 = *(_QWORD *)(v17 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v21;
  return result;
}

uint64_t sub_1BDE6F960(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1BDE6CB3C();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1BDE70C34();
      goto LABEL_22;
    }
    sub_1BDE72808();
  }
  v11 = *v4;
  sub_1BE1B36F8();
  sub_1BE1B2834();
  result = sub_1BE1B371C();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1BE1B34AC(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1BE1B3674();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1BE1B34AC();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1BDE6FAF8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = sub_1BE1B1DF0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BDE6CE18(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], &qword_1EF52CF30, &qword_1ED6EFF60, MEMORY[0x1E0CB0018]);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1BDE70DE4((uint64_t (*)(_QWORD))MEMORY[0x1E0CAFFF8], &qword_1EF52CF30);
      goto LABEL_12;
    }
    sub_1BDE72AB4(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], &qword_1EF52CF30, &qword_1ED6EFF60, MEMORY[0x1E0CB0018]);
  }
  v13 = *v3;
  sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  v14 = sub_1BE1B26D8();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      sub_1BDD8422C(&qword_1ED6EF200, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v19 = sub_1BE1B2798();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1BE1B3674();
  __break(1u);
  return result;
}

void *sub_1BDE6FD4C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF48);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE6FEF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF28);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_28;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
      {
        v9 = v23 + 2;
        if (v23 + 2 >= v13)
          goto LABEL_28;
        v24 = *(_QWORD *)(v6 + 8 * v9);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = (uint64_t *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = *v17;
    v22[1] = v19;
    v22[2] = v20;
    v22[3] = v21;
    sub_1BDDC8E74(v18);
    result = (void *)sub_1BDDB6CA4(v20, v21);
  }
  v25 = v23 + 3;
  if (v25 >= v13)
    goto LABEL_28;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE700C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF78);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = (void *)swift_retain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE70268()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF50);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE703FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF58);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1BDE7058C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_1BE1B3020();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE7072C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFB0);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1BDDB6CA4(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE708DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFC8);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE70A70()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF18);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE70C34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5302D0);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1BDE70DE4(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *v2;
  v10 = sub_1BE1B3020();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release();
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1BDE71008()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  char v28[72];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF48);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v27)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1BE1B36F8();
    v19 = *(void (**)(char *))(*(_QWORD *)v18 + 104);
    swift_retain();
    v19(v28);
    result = sub_1BE1B371C();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE712B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  __int128 v32[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF28);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v30 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v31)
      goto LABEL_36;
    v16 = *(_QWORD *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_36;
      v16 = *(_QWORD *)(v30 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_36;
        v16 = *(_QWORD *)(v30 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 32 * v14);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    sub_1BE1B36F8();
    sub_1BE1B3710();
    if (v19)
    {
      sub_1BDDC8E74(v19);
      sub_1BDDB6CA4(v21, v22);
      sub_1BDDC8E74(v19);
      swift_bridgeObjectRetain();
      sub_1BDEF5748(v32, v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1BDEF5748(v32, v20);
      swift_bridgeObjectRelease();
      sub_1BDDC8EA0(v19);
    }
    else
    {
      sub_1BDDC8E74(0);
      sub_1BDDB6CA4(v21, v22);
    }
    sub_1BDDB6CA4(v21, v22);
    sub_1BE1B1E8C();
    sub_1BDDB796C(v21, v22);
    result = sub_1BE1B371C();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 32 * v11);
    *v12 = v19;
    v12[1] = v20;
    v12[2] = v21;
    v12[3] = v22;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v30 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v31)
      goto LABEL_36;
    v16 = *(_QWORD *)(v30 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1BDE7162C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF78);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v28 = v0;
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v29)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v29)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v29)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    sub_1BE1B36F8();
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    swift_retain();
    sub_1BDDB6CA4(v19, v20);
    sub_1BE1B1E8C();
    sub_1BDDB796C(v19, v20);
    result = sub_1BE1B371C();
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v23);
      }
      while (v27 == -1);
      v12 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE718EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF50);
  result = sub_1BE1B302C();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v14);
    result = MEMORY[0x1C3B7D5C4](*(_QWORD *)(v4 + 40), v18, 2);
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_WORD *)(*(_QWORD *)(v4 + 48) + 2 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE71B50()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF58);
  result = sub_1BE1B302C();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
    sub_1BE1B36F8();
    sub_1BE1B3704();
    result = sub_1BE1B371C();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE71DC8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = sub_1BE1B302C();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v29 = v2;
  v30 = v4 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 56);
  v31 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v31)
      goto LABEL_33;
    v17 = *(_QWORD *)(v30 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v31)
        goto LABEL_33;
      v17 = *(_QWORD *)(v30 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v31)
          goto LABEL_33;
        v17 = *(_QWORD *)(v30 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v15);
    sub_1BE1B27C8();
    sub_1BE1B36F8();
    v20 = v19;
    sub_1BE1B2834();
    v21 = sub_1BE1B371C();
    result = swift_bridgeObjectRelease();
    v22 = -1 << *(_BYTE *)(v6 + 32);
    v23 = v21 & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_33:
    result = swift_release_n();
    v3 = v29;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v30 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v31)
      goto LABEL_33;
    v17 = *(_QWORD *)(v30 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE720A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFB0);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1BE1B36F8();
    sub_1BDDB6CA4(v20, v21);
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE72350()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFC8);
  result = sub_1BE1B302C();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_1BE1B36EC();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1BDE725B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  __int128 v18;
  __int128 v19[4];

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CF18);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = swift_release();
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_7;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v9)
      goto LABEL_23;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      v12 = v15 + 1;
      if (v15 + 1 >= v9)
        goto LABEL_23;
      v16 = *(_QWORD *)(v6 + 8 * v12);
      if (!v16)
      {
        v12 = v15 + 2;
        if (v15 + 2 >= v9)
          goto LABEL_23;
        v16 = *(_QWORD *)(v6 + 8 * v12);
        if (!v16)
          break;
      }
    }
LABEL_22:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_7:
    v18 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    sub_1BE1B36F8();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_1BDEF5748(v19, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1BDEF5748(v19, *((uint64_t *)&v18 + 1));
    swift_bridgeObjectRelease();
    sub_1BE1B371C();
    result = sub_1BE1B2F9C();
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * result) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v9)
  {
LABEL_23:
    swift_release();
    v1 = v0;
    goto LABEL_24;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v12 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v9)
      goto LABEL_23;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1BDE72808()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5302D0);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1BE1B36F8();
    swift_bridgeObjectRetain();
    sub_1BE1B2834();
    result = sub_1BE1B371C();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE72AB4(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t (*v39)(uint64_t);
  unint64_t *v40;
  uint64_t v41;

  v40 = a4;
  v41 = a5;
  v7 = v5;
  v39 = a2;
  v8 = a2(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - v10;
  v12 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = sub_1BE1B302C();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
LABEL_35:
    *v7 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v36 = v5;
  v37 = v12 + 56;
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v38 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v25 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v25);
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v38)
        goto LABEL_33;
      v26 = *(_QWORD *)(v37 + 8 * v21);
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v38)
          goto LABEL_33;
        v26 = *(_QWORD *)(v37 + 8 * v21);
        if (!v26)
          break;
      }
    }
LABEL_23:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, *(_QWORD *)(v12 + 48) + v28 * v24, v8);
    sub_1BDD8422C(v40, v39, v41);
    result = sub_1BE1B26D8();
    v29 = -1 << *(_BYTE *)(v14 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v19 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v19 + 8 * v31);
      }
      while (v35 == -1);
      v22 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v22 * v28, v11, v8);
    ++*(_QWORD *)(v14 + 16);
  }
  v27 = v25 + 3;
  if (v27 >= v38)
  {
LABEL_33:
    result = swift_release_n();
    v7 = v36;
    goto LABEL_35;
  }
  v26 = *(_QWORD *)(v37 + 8 * v27);
  if (v26)
  {
    v21 = v27;
    goto LABEL_23;
  }
  while (1)
  {
    v21 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v21 >= v38)
      goto LABEL_33;
    v26 = *(_QWORD *)(v37 + 8 * v21);
    ++v27;
    if (v26)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1BDE72DD0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1BDEF9864(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_1BDE72E38(v4);
  *a1 = v2;
}

void sub_1BDE72E38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 __s1;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v3 = a1[1];
  v4 = sub_1BE1B32CC();
  if (v4 >= v3)
  {
    if (v3 < 0)
    {
LABEL_119:
      __break(1u);
      JUMPOUT(0x1BDE742CCLL);
    }
    if (v3)
      sub_1BDE7447C(0, v3, 1, (uint64_t)a1);
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
    {
      sub_1BE1B31F4();
      __break(1u);
      JUMPOUT(0x1BDE7441CLL);
    }
    v89 = v3;
    v87 = v4;
    v84 = a1;
    if (v3 >= 2)
    {
      v6 = v5 >> 1;
      v7 = sub_1BE1B29E4();
      *(_QWORD *)(v7 + 16) = v6;
      v86 = v7;
      v8 = (char *)(v7 + 32);
LABEL_12:
      v10 = 0;
      v11 = *a1;
      v85 = *a1 + 40;
      v83 = *a1 - 16;
      v9 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = v89;
      v92 = *a1;
      while (1)
      {
        v13 = v10;
        v14 = v10 + 1;
        v15 = v12;
        v88 = v10;
        if (v10 + 1 < v12)
        {
          __s1 = *(_OWORD *)(v11 + 16 * v14);
          _s9Coherence9CRKeyPathV1loiySbAC_ACtFZ_0((uint64_t)&__s1);
          v14 = v13 + 2;
          if (v13 + 2 < v15)
            __asm { BR              X9 }
          if ((v16 & 1) != 0)
          {
            if (v14 < v13)
              goto LABEL_122;
            if (v13 < v14)
            {
              v17 = (__int128 *)(v83 + 16 * v14);
              v18 = v13 + 2;
              v19 = v13;
              v20 = (__int128 *)(v11 + 16 * v13);
              do
              {
                if (v19 != --v18)
                {
                  if (!v11)
                  {
LABEL_124:
                    __break(1u);
LABEL_125:
                    __break(1u);
                  }
                  v21 = *v20;
                  *v20 = *v17;
                  *v17 = v21;
                }
                ++v19;
                --v17;
                ++v20;
              }
              while (v19 < v18);
            }
          }
        }
        if (v14 < v15)
        {
          if (__OFSUB__(v14, v13))
          {
            __break(1u);
            goto LABEL_119;
          }
          if (v14 - v13 < v87)
          {
            v22 = v13 + v87;
            if (__OFADD__(v13, v87))
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
              JUMPOUT(0x1BDE742E8);
            }
            if (v22 >= v15)
              v22 = v15;
            if (v22 < v13)
              goto LABEL_121;
            if (v14 != v22)
              __asm { BR              X9 }
          }
        }
        if (v14 < v13)
          goto LABEL_117;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_1BDEF9288(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
        v23 = v9;
        v24 = *((_QWORD *)v9 + 2);
        v90 = v23;
        v25 = *((_QWORD *)v23 + 3);
        v26 = v24 + 1;
        if (v24 >= v25 >> 1)
          v90 = sub_1BDEF9288((char *)(v25 > 1), v24 + 1, 1, v90);
        *((_QWORD *)v90 + 2) = v26;
        v27 = v90 + 32;
        v28 = &v90[16 * v24 + 32];
        *(_QWORD *)v28 = v88;
        *((_QWORD *)v28 + 1) = v14;
        v93 = v14;
        if (v24)
        {
          v9 = v90;
          while (1)
          {
            v29 = v26 - 1;
            if (v26 >= 4)
            {
              v34 = &v27[16 * v26];
              v35 = *((_QWORD *)v34 - 8);
              v36 = *((_QWORD *)v34 - 7);
              v40 = __OFSUB__(v36, v35);
              v37 = v36 - v35;
              if (v40)
                goto LABEL_102;
              v39 = *((_QWORD *)v34 - 6);
              v38 = *((_QWORD *)v34 - 5);
              v40 = __OFSUB__(v38, v39);
              v32 = v38 - v39;
              v33 = v40;
              if (v40)
                goto LABEL_103;
              v41 = v26 - 2;
              v42 = &v27[16 * v26 - 32];
              v44 = *(_QWORD *)v42;
              v43 = *((_QWORD *)v42 + 1);
              v40 = __OFSUB__(v43, v44);
              v45 = v43 - v44;
              if (v40)
                goto LABEL_105;
              v40 = __OFADD__(v32, v45);
              v46 = v32 + v45;
              if (v40)
                goto LABEL_108;
              if (v46 >= v37)
              {
                v64 = &v27[16 * v29];
                v66 = *(_QWORD *)v64;
                v65 = *((_QWORD *)v64 + 1);
                v40 = __OFSUB__(v65, v66);
                v67 = v65 - v66;
                if (v40)
                {
                  __break(1u);
LABEL_113:
                  __break(1u);
                  JUMPOUT(0x1BDE742A4);
                }
                v57 = v32 < v67;
                goto LABEL_71;
              }
            }
            else
            {
              if (v26 != 3)
              {
                v58 = *((_QWORD *)v9 + 4);
                v59 = *((_QWORD *)v9 + 5);
                v40 = __OFSUB__(v59, v58);
                v51 = v59 - v58;
                v52 = v40;
                goto LABEL_65;
              }
              v31 = *((_QWORD *)v9 + 4);
              v30 = *((_QWORD *)v9 + 5);
              v40 = __OFSUB__(v30, v31);
              v32 = v30 - v31;
              v33 = v40;
            }
            if ((v33 & 1) != 0)
              goto LABEL_104;
            v41 = v26 - 2;
            v47 = &v27[16 * v26 - 32];
            v49 = *(_QWORD *)v47;
            v48 = *((_QWORD *)v47 + 1);
            v50 = __OFSUB__(v48, v49);
            v51 = v48 - v49;
            v52 = v50;
            if (v50)
              goto LABEL_107;
            v53 = &v27[16 * v29];
            v55 = *(_QWORD *)v53;
            v54 = *((_QWORD *)v53 + 1);
            v40 = __OFSUB__(v54, v55);
            v56 = v54 - v55;
            if (v40)
              goto LABEL_110;
            if (__OFADD__(v51, v56))
              goto LABEL_111;
            if (v51 + v56 >= v32)
            {
              v57 = v32 < v56;
LABEL_71:
              if (v57)
                v29 = v41;
              goto LABEL_73;
            }
LABEL_65:
            if ((v52 & 1) != 0)
              goto LABEL_106;
            v60 = &v27[16 * v29];
            v62 = *(_QWORD *)v60;
            v61 = *((_QWORD *)v60 + 1);
            v40 = __OFSUB__(v61, v62);
            v63 = v61 - v62;
            if (v40)
              goto LABEL_109;
            if (v63 < v51)
              goto LABEL_82;
LABEL_73:
            v68 = v29 - 1;
            if (v29 - 1 >= v26)
            {
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
              JUMPOUT(0x1BDE7427CLL);
            }
            if (!v11)
            {
              __break(1u);
              goto LABEL_124;
            }
            v69 = v11;
            v70 = &v27[16 * v68];
            v71 = *(_QWORD *)v70;
            v72 = v29;
            v73 = &v27[16 * v29];
            v74 = *((_QWORD *)v73 + 1);
            sub_1BDE74D5C((char *)(v69 + 16 * *(_QWORD *)v70), (char *)(v69 + 16 * *(_QWORD *)v73), v69 + 16 * v74, v8);
            if (v1)
              goto LABEL_96;
            if (v74 < v71)
              goto LABEL_99;
            if (v72 > *((_QWORD *)v90 + 2))
              goto LABEL_100;
            *(_QWORD *)v70 = v71;
            *(_QWORD *)&v27[16 * v68 + 8] = v74;
            v75 = *((_QWORD *)v90 + 2);
            if (v72 >= v75)
              goto LABEL_101;
            v26 = v75 - 1;
            memmove(v73, v73 + 16, 16 * (v75 - 1 - v72));
            *((_QWORD *)v90 + 2) = v75 - 1;
            v9 = v90;
            v11 = v92;
            if (v75 <= 2)
              goto LABEL_82;
          }
        }
        v26 = 1;
        v9 = v90;
LABEL_82:
        v12 = v89;
        v10 = v93;
        if (v93 >= v89)
          goto LABEL_85;
      }
    }
    v9 = (char *)MEMORY[0x1E0DEE9D8];
    v8 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v86 = MEMORY[0x1E0DEE9D8];
    if (v3 == 1)
      goto LABEL_12;
    v26 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_85:
    if (v26 >= 2)
    {
      v76 = *v84;
      v77 = v8;
      while (1)
      {
        v78 = v26 - 2;
        if (v26 < 2)
          goto LABEL_113;
        v91 = v9;
        if (!v76)
          goto LABEL_125;
        v79 = *(_QWORD *)&v9[16 * v78 + 32];
        v80 = *(_QWORD *)&v9[16 * v26 + 24];
        sub_1BDE74D5C((char *)(v76 + 16 * v79), (char *)(v76 + 16 * *(_QWORD *)&v9[16 * v26 + 16]), v76 + 16 * v80, v8);
        if (v1)
          goto LABEL_96;
        if (v80 < v79)
          break;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v91 = sub_1BDEF9798((uint64_t)v9);
        if (v78 >= *((_QWORD *)v91 + 2))
          goto LABEL_115;
        v81 = &v91[16 * v78 + 32];
        *(_QWORD *)v81 = v79;
        *((_QWORD *)v81 + 1) = v80;
        v82 = *((_QWORD *)v91 + 2);
        if (v26 > v82)
          goto LABEL_116;
        memmove(&v91[16 * v26 + 16], &v91[16 * v26 + 32], 16 * (v82 - v26));
        *((_QWORD *)v91 + 2) = v82 - 1;
        v26 = v82 - 1;
        v9 = v91;
        v8 = v77;
        if (v82 <= 2)
          goto LABEL_96;
      }
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      JUMPOUT(0x1BDE742BCLL);
    }
LABEL_96:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v86 + 16) = 0;
    swift_bridgeObjectRelease();
  }
}

void sub_1BDE7447C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
    __asm { BR              X9 }
}

uint64_t sub_1BDE74D5C(char *a1, char *__src, unint64_t a3, char *__dst)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v15;
  char *v16;
  void *v17[2];

  v17[1] = *(void **)MEMORY[0x1E0C80C00];
  v7 = __src - a1;
  v8 = __src - a1 + 15;
  if (__src - a1 >= 0)
    v8 = __src - a1;
  v9 = v8 >> 4;
  v10 = a3 - (_QWORD)__src;
  v11 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v11 = a3 - (_QWORD)__src;
  v12 = v11 >> 4;
  v16 = __dst;
  v17[0] = a1;
  if (v9 < v11 >> 4)
  {
    if (v7 >= -15)
    {
      if (__dst != a1 || &a1[16 * v9] <= __dst)
        memmove(__dst, a1, 16 * v9);
      v15 = &__dst[16 * v9];
      if ((unint64_t)__src < a3 && v7 >= 16)
        __asm { BR              X9 }
      goto LABEL_20;
    }
LABEL_21:
    sub_1BE1B326C();
    __break(1u);
    JUMPOUT(0x1BDE756D0);
  }
  if (v10 < -15)
    goto LABEL_21;
  if (__dst != __src || &__src[16 * v12] <= __dst)
    memmove(__dst, __src, 16 * v12);
  v15 = &__dst[16 * v12];
  v17[0] = __src;
  if (a1 < __src && v10 >= 16)
    __asm { BR              X9 }
LABEL_20:
  sub_1BDEF95D8(v17, (const void **)&v16, &v15);
  return 1;
}

uint64_t sub_1BDE75720(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;

  v5 = *v2;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BE1B2834();
  v6 = sub_1BE1B371C();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_1BE1B34AC() & 1) == 0)
  {
    v15 = ~v7;
    do
    {
      v8 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v16 = (_QWORD *)(v9 + 16 * v8);
      v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (sub_1BE1B34AC() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v2;
  v19 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1BDE70C34();
    v13 = v19;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8);
  sub_1BDE758AC(v8);
  *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1BDE758AC(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_1BE1B36F8();
        swift_bridgeObjectRetain();
        sub_1BE1B2834();
        v10 = sub_1BE1B371C();
        swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_OWORD *)(v12 + 16 * v2);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1BDE75A70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v33);
  v37 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v6)
    return v7;
  v29 = v2;
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1BDE22950(0, v6, 0);
  v7 = v38;
  v8 = sub_1BDFCFF04(a1);
  v10 = v9;
  v12 = v11 & 1;
  v32 = a1 + 56;
  v31 = a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v30 = a1;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v32 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_16;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10)
      goto LABEL_17;
    v34 = v12;
    v35 = v10;
    v36 = v6;
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v14 = *v13;
    v15 = v13[1];
    v16 = v37;
    sub_1BDD9C318(v31, v37, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v17 = *(_QWORD *)(v16 + *(int *)(v33 + 20));
    v18 = *(_QWORD *)(v17 + 16);
    sub_1BDDB6CA4(v14, v15);
    sub_1BDDB6CA4(v14, v15);
    if (!v18)
      goto LABEL_18;
    v19 = sub_1BDDB7F0C(v14, v15);
    if ((v20 & 1) == 0)
      goto LABEL_18;
    v21 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 48 * v19);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0(v37, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (!v21)
      goto LABEL_19;
    sub_1BDDB796C(v14, v15);
    v38 = v7;
    v24 = *(_QWORD *)(v7 + 16);
    v23 = *(_QWORD *)(v7 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_1BDE22950(v23 > 1, v24 + 1, 1);
      v7 = v38;
    }
    *(_QWORD *)(v7 + 16) = v24 + 1;
    v25 = (_QWORD *)(v7 + 24 * v24);
    v25[4] = v14;
    v25[5] = v15;
    v25[6] = v21;
    a1 = v30;
    v26 = sub_1BDFCFFA8(v8, v35, v34 & 1, v30);
    v8 = v26;
    v10 = v27;
    v12 = v28 & 1;
    v6 = v36 - 1;
    if (v36 == 1)
    {
      sub_1BDE27EC8(v26, v27, v28 & 1);
      return v7;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = sub_1BDD9C3E0(v37, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1BDE75D50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = sub_1BE1B1F58();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1F4C();
  v9 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v8[v6[5]] = sub_1BDDC8934(MEMORY[0x1E0DEE9D8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26C0);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BE1B61B0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  v11 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v10 + 48) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v8[v6[6]] = v10;
  *(_QWORD *)&v8[v6[7]] = v11;
  sub_1BE1B1F4C();
  type metadata accessor for CapsuleRef();
  v12 = swift_allocObject();
  v13 = OBJC_IVAR____TtC9Coherence10CapsuleRef_caches;
  *(_QWORD *)(v12 + v13) = sub_1BDDC8800(v9);
  v14 = (_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  v15 = MEMORY[0x1E0DEE9E0];
  *v14 = MEMORY[0x1E0DEE9E0];
  v14[1] = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID, v5, v2);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState) = a1;
  sub_1BDD9C318((uint64_t)v8, v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets) = sub_1BDDB6CE8(v9);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1BDD9C3E0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated) = v11;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = 0;
  return v12;
}

void (*sub_1BDE75F64(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6))(_QWORD *, _QWORD)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  void (*result)(_QWORD *, _QWORD);
  uint64_t v34;
  void (*v35)(_QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t i;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72[3];
  _QWORD v73[6];

  v66 = a4;
  v67 = a3;
  v64 = a2;
  v9 = sub_1BE1B2EE8();
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v60 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1BE1B1F58();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v19 = a1[1];
  v60 = a6;
  v61 = v18;
  sub_1BDDCB1B4((uint64_t)v17);
  type metadata accessor for ReplicaState();
  v20 = swift_allocObject();
  v21 = v20 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v22 = type metadata accessor for Replica();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v21, 1, 1, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v17, v14);
  *(_QWORD *)(v20 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v23((uint64_t)v13, 1, 1, v22);
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v13, v21);
  swift_endAccess();
  v24 = sub_1BDE75D50(v20);
  v25 = swift_retain();
  v67(v25);
  if (v19 >> 60 != 15)
  {
    swift_beginAccess();
    v56 = v61;
    v70 = v61;
    v71 = v19;
    sub_1BDDB6CA4(v61, v19);
    result = (void (*)(_QWORD *, _QWORD))sub_1BDDB7C54(v73, &v70);
    if (*(_QWORD *)(v57 + 16))
    {
      v58 = *(_QWORD *)(v57 + 8);
      v54 = __OFADD__(v58, 1);
      v59 = v58 + 1;
      if (v54)
      {
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      *(_QWORD *)(v57 + 8) = v59;
      result(v73, 0);
      swift_endAccess();
      sub_1BDDB796C(v70, v71);
    }
    else
    {
      result(v73, 0);
      sub_1BDDB796C(v70, v71);
      swift_endAccess();
    }
    swift_beginAccess();
    sub_1BDDB6CA4(v56, v19);
    sub_1BDDBC6BC(v72, v56, v19);
    swift_endAccess();
    sub_1BDD9CC0C(v56, v19);
    sub_1BDDB796C(v72[0], v72[1]);
LABEL_33:
    sub_1BDDB639C(1, 1);
    swift_release();
    return (void (*)(_QWORD *, _QWORD))v24;
  }
  v26 = type metadata accessor for RetainVisitor();
  v27 = swift_allocObject();
  v28 = MEMORY[0x1E0DEE9D8];
  v29 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v30 = sub_1BDDB6CE8(v28);
  *(_QWORD *)(v27 + 16) = v29;
  *(_QWORD *)(v27 + 24) = v30;
  v31 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v65, v64, v63);
  v32 = *(_QWORD *)(a5 - 8);
  result = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, a5);
  if ((_DWORD)result != 1)
  {
    v73[3] = v26;
    v73[4] = &off_1E7755DD0;
    v73[0] = v27;
    v34 = v60;
    v35 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v60 + 40);
    swift_retain();
    v35(v73, a5, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, a5);
    swift_beginAccess();
    v67 = (void (*)(uint64_t))v27;
    v36 = *(_QWORD *)(v27 + 16);
    v37 = v36 + 64;
    v38 = 1 << *(_BYTE *)(v36 + 32);
    v39 = -1;
    if (v38 < 64)
      v39 = ~(-1 << v38);
    v40 = v39 & *(_QWORD *)(v36 + 64);
    v41 = (unint64_t)(v38 + 63) >> 6;
    result = (void (*)(_QWORD *, _QWORD))swift_bridgeObjectRetain();
    v42 = 0;
    if (v40)
      goto LABEL_22;
LABEL_8:
    v43 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v43 >= v41)
      goto LABEL_30;
    v44 = *(_QWORD *)(v37 + 8 * v43);
    ++v42;
    if (!v44)
    {
      v42 = v43 + 1;
      if (v43 + 1 >= v41)
        goto LABEL_30;
      v44 = *(_QWORD *)(v37 + 8 * v42);
      if (v44)
        goto LABEL_21;
      v42 = v43 + 2;
      if (v43 + 2 >= v41)
      {
LABEL_30:
        swift_release();
        swift_release();
        goto LABEL_33;
      }
      v44 = *(_QWORD *)(v37 + 8 * v42);
      if (!v44)
      {
        v45 = v43 + 3;
        if (v45 < v41)
        {
          v44 = *(_QWORD *)(v37 + 8 * v45);
          if (v44)
          {
            v42 = v45;
            goto LABEL_21;
          }
          while (1)
          {
            v42 = v45 + 1;
            if (__OFADD__(v45, 1))
              goto LABEL_36;
            if (v42 >= v41)
              goto LABEL_30;
            v44 = *(_QWORD *)(v37 + 8 * v42);
            ++v45;
            if (v44)
              goto LABEL_21;
          }
        }
        goto LABEL_30;
      }
    }
LABEL_21:
    v40 = (v44 - 1) & v44;
    for (i = __clz(__rbit64(v44)) + (v42 << 6); ; i = v47 | (v42 << 6))
    {
      v48 = (uint64_t *)(*(_QWORD *)(v36 + 48) + 16 * i);
      v50 = *v48;
      v49 = v48[1];
      v51 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * i);
      swift_beginAccess();
      v68 = v50;
      v69 = v49;
      sub_1BDDB6CA4(v50, v49);
      sub_1BDDB6CA4(v50, v49);
      result = (void (*)(_QWORD *, _QWORD))sub_1BDDB7C54(v73, &v68);
      if (*(_QWORD *)(v52 + 16))
      {
        v53 = *(_QWORD *)(v52 + 8);
        v54 = __OFADD__(v53, v51);
        v55 = v53 + v51;
        if (v54)
        {
          __break(1u);
          goto LABEL_35;
        }
        *(_QWORD *)(v52 + 8) = v55;
        result(v73, 0);
        swift_endAccess();
        sub_1BDDB796C(v50, v49);
        result = (void (*)(_QWORD *, _QWORD))sub_1BDDB796C(v68, v69);
        if (!v40)
          goto LABEL_8;
      }
      else
      {
        result(v73, 0);
        sub_1BDDB796C(v68, v69);
        swift_endAccess();
        result = (void (*)(_QWORD *, _QWORD))sub_1BDDB796C(v50, v49);
        if (!v40)
          goto LABEL_8;
      }
LABEL_22:
      v47 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1BDE76548(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v33 = a2;
  v34 = a1;
  v39 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v39);
  v42 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = a3;
  v7 = *(_QWORD *)(a3 + 56);
  v36 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v38 = a4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  result = swift_beginAccess();
  v35 = 0;
  v12 = 0;
  v37 = (unint64_t)(v8 + 63) >> 6;
  if (v10)
    goto LABEL_8;
LABEL_9:
  v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v16 < v37)
    {
      v17 = *(_QWORD *)(v36 + 8 * v16);
      ++v12;
      if (v17)
        goto LABEL_22;
      v12 = v16 + 1;
      if (v16 + 1 >= v37)
        goto LABEL_27;
      v17 = *(_QWORD *)(v36 + 8 * v12);
      if (v17)
        goto LABEL_22;
      v12 = v16 + 2;
      if (v16 + 2 >= v37)
        goto LABEL_27;
      v17 = *(_QWORD *)(v36 + 8 * v12);
      if (v17)
      {
LABEL_22:
        v10 = (v17 - 1) & v17;
        for (i = __clz(__rbit64(v17)) + (v12 << 6); ; i = v14 | (v12 << 6))
        {
          v19 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * i);
          v20 = *v19;
          v21 = v19[1];
          v22 = v42;
          sub_1BDD9C318(v38, v42, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          v23 = *(_QWORD *)(v22 + *(int *)(v39 + 20));
          v24 = *(_QWORD *)(v23 + 16);
          sub_1BDDB6CA4(v20, v21);
          if (v24)
          {
            sub_1BDDB6CA4(v20, v21);
            sub_1BDDB6CA4(v20, v21);
            v25 = sub_1BDDB7F0C(v20, v21);
            if ((v26 & 1) != 0)
            {
              v27 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 48 * v25);
              v28 = *v27;
              v29 = v27[1];
              v41 = v10;
              v30 = v27[2];
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1BDDB796C(v20, v21);
              sub_1BDDB796C(v20, v21);
              sub_1BDD9C3E0(v42, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
              v10 = v41;
              sub_1BDDBA008(v28, v29, v30);
              result = sub_1BDDB796C(v20, v21);
              if (!v10)
                goto LABEL_9;
              goto LABEL_8;
            }
            sub_1BDDB796C(v20, v21);
            sub_1BDDB796C(v20, v21);
          }
          sub_1BDD9C3E0(v42, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          sub_1BDDBA008(0, 0, 0);
          result = sub_1BDDB796C(v20, v21);
          *(unint64_t *)((char *)v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
          if (__OFADD__(v35++, 1))
            goto LABEL_30;
          if (!v10)
            goto LABEL_9;
LABEL_8:
          v14 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      v18 = v16 + 3;
      if (v18 < v37)
      {
        v17 = *(_QWORD *)(v36 + 8 * v18);
        if (v17)
        {
          v12 = v18;
          goto LABEL_22;
        }
        while (1)
        {
          v12 = v18 + 1;
          if (__OFADD__(v18, 1))
            goto LABEL_29;
          if (v12 >= v37)
            break;
          v17 = *(_QWORD *)(v36 + 8 * v12);
          ++v18;
          if (v17)
            goto LABEL_22;
        }
      }
    }
LABEL_27:
    v31 = v40;
    swift_retain();
    return sub_1BDDC68A4(v34, v33, v35, v31);
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1BDE768D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v3 = v2;
  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v11 = sub_1BDE76548((_QWORD *)((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    swift_release();
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    v11 = sub_1BDE76548((unint64_t *)v12, v8, a1, a2);
    swift_release();
    swift_release();
    MEMORY[0x1C3B7E068](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

uint64_t sub_1BDE76A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  void (*v20)(_QWORD *);
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  unint64_t v32;

  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(uint64_t **)v8;
  v10 = *(_QWORD *)(v8 + 8);
  (*(void (**)(char *, uint64_t))(v11 + 16))(v7, v12);
  sub_1BDD85BB4((uint64_t)v7, a3, &v26);
  v13 = v26;
  v26 = v9;
  v27 = v10;
  v15 = type metadata accessor for Ref(0, a3, a4, v14);
  v16 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v15);
  Reference.identity.getter(v15, v16);
  v17 = v31;
  v18 = v32;
  swift_beginAccess();
  v28 = v17;
  v29 = v18;
  v20 = sub_1BDDB7C54(&v26, &v28);
  if (!v19[2])
  {
    ((void (*)(uint64_t **, _QWORD))v20)(&v26, 0);
    sub_1BDDB796C(v28, v29);
    swift_endAccess();
LABEL_9:
    v26 = v9;
    v27 = v10;
    Reference.identity.getter(v15, v16);
    sub_1BDDB796C((uint64_t)v9, v10);
    v23 = v31;
    v24 = v32;
    swift_beginAccess();
    sub_1BDDBC6BC(v30, v23, v24);
    swift_endAccess();
    swift_release();
    return sub_1BDDB796C(v30[0], v30[1]);
  }
  v21 = v19;
  result = *v19;
  if (*v19)
  {
    if (v13 != (uint64_t *)result)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        *v21 = (*(uint64_t (**)(void))(*(_QWORD *)*v21 + 160))();
        swift_release();
      }
      (*(void (**)(uint64_t *))(*(_QWORD *)*v21 + 96))(v13);
    }
    ((void (*)(uint64_t **, _QWORD))v20)(&v26, 0);
    swift_endAccess();
    sub_1BDDB796C(v28, v29);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE76CD0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;

  v8 = *a2;
  swift_retain();
  sub_1BDE76A9C(a1, (uint64_t)&v8, a3, a4);
  return swift_release();
}

uint64_t sub_1BDE76D38(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v15 - v9;
  v12 = *a2;
  v11 = a2[1];
  (*(void (**)(char *, uint64_t))(v13 + 16))((char *)v15 - v9, a1);
  v15[0] = v12;
  v15[1] = v11;
  swift_retain();
  sub_1BDE56E90((uint64_t)v10, (uint64_t)v15, a3, a4);
  return swift_release();
}

uint64_t sub_1BDE76E00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  void (*v10)(_QWORD *);
  uint64_t **v11;
  uint64_t result;
  uint64_t *v14[4];
  uint64_t v15;
  unint64_t v16;
  uint64_t v17[3];

  v2 = *(_QWORD *)(*v1 + 80);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[3];
  if (v6 >> 60 != 15)
  {
    v7 = v1[2];
    (*(void (**)(char *))(v3 + 16))(v5);
    sub_1BDDB6CA4(v7, v6);
    sub_1BDD85BB4((uint64_t)v5, v2, v14);
    v8 = v14[0];
    swift_beginAccess();
    v15 = v7;
    v16 = v6;
    sub_1BDD9C9A0(v7, v6);
    swift_retain();
    v10 = sub_1BDDB7C54(v14, &v15);
    if (!v9[2])
    {
      ((void (*)(uint64_t **, _QWORD))v10)(v14, 0);
      sub_1BDDB796C(v15, v16);
      swift_endAccess();
      swift_release();
LABEL_10:
      swift_beginAccess();
      sub_1BDD9C9A0(v7, v6);
      swift_retain();
      sub_1BDDBC6BC(v17, v7, v6);
      swift_endAccess();
      swift_release();
      swift_release();
      sub_1BDD9CC0C(v7, v6);
      return sub_1BDDB796C(v17[0], v17[1]);
    }
    v11 = v9;
    if (*v9)
    {
      if (v8 != *v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          *v11 = (uint64_t *)(*(uint64_t (**)(void))(**v11 + 160))();
          swift_release();
        }
        (*(void (**)(uint64_t *))(**v11 + 96))(v8);
      }
      ((void (*)(uint64_t **, _QWORD))v10)(v14, 0);
      swift_endAccess();
      swift_release();
      sub_1BDDB796C(v15, v16);
      goto LABEL_10;
    }
    __break(1u);
  }
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

uint64_t sub_1BDE77098(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v30;
  uint64_t result;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42[3];

  v4 = *v2;
  v34 = a2;
  v37 = *(_QWORD *)(v4 + 80);
  v36 = *(_QWORD *)(v37 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v35 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = *(void (**)(char *))(v7 + 16);
  v32 = (char *)&v32 - v9;
  v8((char *)&v32 - v9);
  v10 = v2[3];
  if (v10 >> 60 == 15)
    goto LABEL_17;
  v11 = v2[2];
  v33 = *(_QWORD *)(*v2 + 112);
  v12 = *(_QWORD *)((char *)v2 + v33) + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v13 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1BDD9C9A0(v11, v10);
  sub_1BDD9C9A0(v11, v10);
  sub_1BDD9C9A0(v11, v10);
  sub_1BDD9C9A0(v11, v10);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41 = *(_QWORD *)(v12 + v13);
  v15 = v41;
  *(_QWORD *)(v12 + v13) = 0x8000000000000000;
  sub_1BDDB6CA4(v11, v10);
  v17 = sub_1BDDB7F0C(v11, v10);
  v18 = *(_QWORD *)(v15 + 16);
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = v16;
  if (*(_QWORD *)(v15 + 24) >= v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_9;
      goto LABEL_15;
    }
LABEL_14:
    sub_1BDDB7F70();
    if ((v3 & 1) != 0)
      goto LABEL_9;
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1BDDC50C4(v20, isUniquelyReferenced_nonNull_native);
  v21 = sub_1BDDB7F0C(v11, v10);
  if ((v3 & 1) != (v22 & 1))
  {
LABEL_18:
    result = sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v17 = v21;
  if ((v3 & 1) == 0)
    goto LABEL_15;
LABEL_9:
  v23 = (__int128 *)(*(_QWORD *)(v41 + 56) + 48 * v17);
  v38 = *v23;
  v39 = v23[1];
  v40 = v23[2];
  v24 = v38;
  if (!(_QWORD)v38)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    sub_1BE1B3200();
    __break(1u);
    goto LABEL_18;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v25 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 160))();
    *(_QWORD *)&v38 = v25;
    swift_release();
    v24 = v25;
  }
  swift_retain();
  sub_1BDDBA064((uint64_t *)&v38, 1, &v41, v17, v11, v10);
  sub_1BDDBA008(v38, *((uint64_t *)&v38 + 1), v39);
  sub_1BDD9CC0C(v11, v10);
  *(_QWORD *)(v12 + v13) = v41;
  sub_1BDD9CC0C(v11, v10);
  swift_endAccess();
  sub_1BDD9CC0C(v11, v10);
  swift_release();
  v26 = sub_1BDD9CC0C(v11, v10);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v24 + 240))(&v38, v26);
  v27 = v35;
  v28 = v37;
  swift_dynamicCast();
  swift_setAtWritableKeyPath();
  *((_QWORD *)&v39 + 1) = v28;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
  v30 = v36;
  (*(void (**)(uint64_t *, char *, uint64_t))(v36 + 16))(boxed_opaque_existential_1, v27, v28);
  (*(void (**)(__int128 *))(*(_QWORD *)v24 + 248))(&v38);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  swift_beginAccess();
  sub_1BDD9C9A0(v11, v10);
  swift_retain();
  sub_1BDDBC6BC(v42, v11, v10);
  swift_endAccess();
  swift_release();
  sub_1BDD9CC0C(v11, v10);
  sub_1BDDB796C(v42[0], v42[1]);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v28);
  return swift_release();
}

uint64_t sub_1BDE77508(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1BDE5B0F4(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))Capsule.Ref.subscript.getter);
}

uint64_t sub_1BDE77524(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1BDE5B174(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))sub_1BDE76CD0);
}

uint64_t sub_1BDE77540()
{
  return 32;
}

__n128 sub_1BDE7754C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1BDE77558(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1BDE5B0F4(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))Capsule.Ref.subscript.getter);
}

uint64_t sub_1BDE77574(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_1BDE5B174(a1, a2, a3, a4, sub_1BDE76D38);
}

uint64_t sub_1BDE77590()
{
  return 32;
}

__n128 sub_1BDE7759C(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1BDE775A8()
{
  return Capsule.Ref<>.root.getter();
}

uint64_t sub_1BDE775C8(uint64_t a1)
{
  return sub_1BDE76E00(a1);
}

uint64_t sub_1BDE775F4()
{
  return 16;
}

__n128 sub_1BDE77600(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDE7760C@<X0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  return Capsule.Ref<>.subscript.getter(*a1, a2);
}

uint64_t sub_1BDE77634()
{
  return 24;
}

__n128 sub_1BDE77640(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1BDE77654()
{
  return sub_1BDDA9D60((unint64_t *)&qword_1EF52CEF0, qword_1ED6ED778, MEMORY[0x1E0DEAF50]);
}

uint64_t sub_1BDE77680()
{
  return swift_retain();
}

_OWORD *sub_1BDE77688(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1BDE77698(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1BDE776D0(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDE52EB8(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BDE776D8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    sub_1BDDB796C(result, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDE77744@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BE17C044(v1, a1);
}

uint64_t sub_1BDE7775C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BDE77790(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDE777C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v37 = a2;
  v36 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v36);
  v40 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 64);
  v33 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v6;
  v10 = a3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v38 = a1;
  swift_bridgeObjectRetain();
  v35 = v10;
  result = swift_beginAccess();
  v12 = 0;
  v34 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_22:
    v18 = (uint64_t *)(*(_QWORD *)(v38 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v37 + 40) + 16);
    sub_1BDDB6CA4(*v18, v19);
    if (!v21 || (sub_1BDDB6CA4(v20, v19), sub_1BDDB7F0C(v20, v19), v23 = v22, sub_1BDDB796C(v20, v19), (v23 & 1) == 0))
    {
      v24 = v40;
      sub_1BDD9C318(v35, v40, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v25 = *(_QWORD *)(v24 + *(int *)(v36 + 20));
      if (!*(_QWORD *)(v25 + 16))
        goto LABEL_28;
      sub_1BDDB6CA4(v20, v19);
      sub_1BDDB6CA4(v20, v19);
      v26 = sub_1BDDB7F0C(v20, v19);
      if ((v27 & 1) == 0)
      {
        sub_1BDDB796C(v20, v19);
        sub_1BDDB796C(v20, v19);
LABEL_28:
        sub_1BDD9C3E0(v40, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        sub_1BDDBA008(0, 0, 0);
        sub_1BDDB796C(v20, v19);
        swift_release();
        return 1;
      }
      v28 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 48 * v26);
      v29 = *v28;
      v30 = v28[1];
      v31 = v28[2];
      v39 = v9;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v20, v19);
      sub_1BDDB796C(v20, v19);
      sub_1BDD9C3E0(v40, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      v9 = v39;
      sub_1BDDBA008(v29, v30, v31);
    }
    result = sub_1BDDB796C(v20, v19);
  }
  v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v15 >= v34)
    goto LABEL_29;
  v16 = *(_QWORD *)(v33 + 8 * v15);
  ++v12;
  if (v16)
    goto LABEL_21;
  v12 = v15 + 1;
  if (v15 + 1 >= v34)
    goto LABEL_29;
  v16 = *(_QWORD *)(v33 + 8 * v12);
  if (v16)
    goto LABEL_21;
  v12 = v15 + 2;
  if (v15 + 2 >= v34)
    goto LABEL_29;
  v16 = *(_QWORD *)(v33 + 8 * v12);
  if (v16)
    goto LABEL_21;
  v12 = v15 + 3;
  if (v15 + 3 >= v34)
    goto LABEL_29;
  v16 = *(_QWORD *)(v33 + 8 * v12);
  if (v16)
    goto LABEL_21;
  v17 = v15 + 4;
  if (v17 >= v34)
  {
LABEL_29:
    swift_release();
    return 0;
  }
  v16 = *(_QWORD *)(v33 + 8 * v17);
  v12 = v17;
  if (v16)
  {
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v34)
      goto LABEL_29;
    v16 = *(_QWORD *)(v33 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1BDE77B74(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BDE77BF0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDE77C6C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BDE77C90(uint64_t *a1)
{
  uint64_t v1;

  return sub_1BDE57530(*a1, a1[1], *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BDE77CA0(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

id CRType.context.getter()
{
  id v0;
  _OWORD v2[2];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  v0 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v2);
  sub_1BDD86E30((uint64_t)v2, qword_1ED6F3DD0);
  return v0;
}

uint64_t static CRType.canContainAssets.getter()
{
  return 1;
}

uint64_t CRDT.merging(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a1, a2);
}

uint64_t CRValue.__hasDelta(from:)()
{
  return 0;
}

id sub_1BDE77D8C@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

uint64_t CRValue.copy(renamingReferences:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_1BDE77DB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  sub_1BDE7951C();
  result = sub_1BE1B2EC4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BDE77E00@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;

  v3 = v2;
  v6 = type metadata accessor for FinalizedTimestamp(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v18 - v11;
  v13 = *(int *)(v10 + 20);
  v14 = *(_QWORD *)(v3 + v13);
  v15 = *(_QWORD *)(a1 + v13);
  sub_1BDE7949C(v3, (uint64_t)&v18 - v11);
  sub_1BDE7949C(a1, (uint64_t)v9);
  if (v14 == v15)
    v16 = sub_1BE1B1F10();
  else
    v16 = 0;
  sub_1BDE794E0((uint64_t)v9);
  result = sub_1BDE794E0((uint64_t)v12);
  *a2 = v16 & 1;
  return result;
}

uint64_t CRValue<>.observableDifference(from:with:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BE1B2798();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BDE77F28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1BDDB6CA4(v2, v3);
}

void sub_1BDE77F34(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  char v3;

  sub_1BDDD6F30(*v1, v1[1]);
  *a1 = v3 & 1;
}

Swift::Bool __swiftcall CRValue.needToFinalizeTimestamps()()
{
  return 0;
}

id sub_1BDE77F70()
{
  id v0;
  _OWORD v2[2];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  v0 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v2);
  sub_1BDD86E30((uint64_t)v2, qword_1ED6F3DD0);
  return v0;
}

uint64_t PartialCRDT<>.delta(_:from:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a2, v3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, a1);
}

uint64_t PartialCRDT<>.merge(delta:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(a3 + 8) + 8))();
  return 1;
}

uint64_t PartialCRDT<>.canMerge(delta:)()
{
  return 1;
}

uint64_t CRValueObservableDifference.isIdentityChanged.getter()
{
  return 1;
}

uint64_t CRValueObservableDifference.hash(into:)()
{
  return sub_1BE1B3704();
}

uint64_t static CRValueObservableDifference.== infix(_:_:)()
{
  return 1;
}

uint64_t CRValueObservableDifference.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t CRType.observableDifference(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(a3 + 32))(a1, v4, a2);
  return sub_1BDD86E30((uint64_t)v4, &qword_1ED6EF878);
}

uint64_t CRType.delta(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(a3 + 32))(v3, v5, a2);
  return sub_1BDD86E30((uint64_t)v5, &qword_1ED6EF878);
}

uint64_t CRType.copy(newContext:renamingReferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(a2, a3, a4);
}

uint64_t CRDT.hasDelta(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 72))(v3) & 1;
}

uint64_t CRDT.actionUndoing(deltaTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 56))(v3);
}

uint64_t CRDT.applying(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v20 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v21, a2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v21, a2);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v12, v18, AssociatedTypeWitness);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v20 + 64))(v12, a2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  }
}

uint64_t CRDT.merging(delta:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v9 = (*(uint64_t (**)(void))(a3 + 88))();
  v10 = *(_QWORD *)(a2 - 8);
  if ((v9 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a4, v4, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 96))(a1, a2, a3);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v11, 1, a2);
}

void sub_1BDE78428(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  CRMutatingAction.init(_:serializedData:)(a1, a2, a3, a4, a5);
}

void sub_1BDE7843C(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)&a1[OBJC_IVAR___CRContext_assetManager];
  type metadata accessor for CRDecodeContext();
  v10 = (_QWORD *)swift_allocObject();
  v11 = MEMORY[0x1E0DEE9E0];
  v10[2] = MEMORY[0x1E0DEE9E0];
  v10[3] = v11;
  v10[4] = v9;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  sub_1BDDB6CA4(a2, a3);
  swift_retain();
  v12 = sub_1BDE11844(a2, a3, (uint64_t)v10);
  if (v4)
  {
    sub_1BDDB796C(a2, a3);

  }
  else
  {
    CRCounter.MutatingAction.init(from:)(v12, &v13);
    sub_1BDDB796C(a2, a3);

    *a4 = v13;
  }
}

void CRMutatingAction.init(_:serializedData:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *(_QWORD *)&a1[OBJC_IVAR___CRContext_assetManager];
  type metadata accessor for CRDecodeContext();
  v11 = (_QWORD *)swift_allocObject();
  v12 = MEMORY[0x1E0DEE9E0];
  v11[2] = MEMORY[0x1E0DEE9E0];
  v11[3] = v12;
  v11[4] = v10;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  sub_1BDDB6CA4(a2, a3);
  swift_retain();
  v13 = sub_1BDE11844(a2, a3, (uint64_t)v11);
  if (!v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 8))(v13, a4);
  sub_1BDDB796C(a2, a3);

}

uint64_t CRMutatingAction.serializedData(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  char v4;

  v4 = 1;
  return CRMutatingAction.serializedData(_:version:)(a1, &v4, a2, a3);
}

uint64_t CRMutatingAction.serializedData(_:version:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  uint64_t v15[5];

  v5 = *a2;
  if (*a2)
  {
    type metadata accessor for CREncoder();
    v9 = swift_allocObject();
    v10 = MEMORY[0x1E0DEE9D8];
    v11 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v9 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v9 + 40) = v10;
    *(_QWORD *)(v9 + 48) = v10;
    *(_QWORD *)(v9 + 56) = v11;
    *(_QWORD *)(v9 + 64) = v10;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)(v9 + 16) = a1;
    *(_QWORD *)(v9 + 24) = v10;
    *(_BYTE *)(v9 + 72) = v5;
    v15[3] = a3;
    v15[4] = a4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, v4, a3);
    v4 = sub_1BDE1BA1C(a1, (uint64_t)v15);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v13 = 0xD00000000000002ALL;
    *(_QWORD *)(v13 + 8) = 0x80000001BE1CDAB0;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
  }
  return v4;
}

uint64_t sub_1BDE787CC@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CursorRange<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78818@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_1<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78864@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_2<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE788B0@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_3<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE788FC@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_4<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78948@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_5<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78994@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_6<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE789E0@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_7<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78A2C@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_8<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78A78@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_9<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78AC4@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for SharedTagged_10<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78B10@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_1<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78B5C@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_2<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78BA8@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_3<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78BF4@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_4<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78C40@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_5<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78C8C@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_6<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78CD8@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_7<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78D24@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_8<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78D70@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_9<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78DBC@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for WeakTagged_10<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE78E08@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDE78E30@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;

  v4 = *a1;
  v5 = *v2;
  result = sub_1BDDBDDBC(v2[1], a1[1]);
  v7 = 0;
  if ((result & 1) != 0)
  {
    result = sub_1BDDBDDBC(v5, v4);
    if ((result & 1) != 0)
      v7 = 1;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1BDE78E84@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1BDEEE13C(*v2, *a1);
  *a2 = result & 1;
  return result;
}

void sub_1BDE78EB4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_1BDE78EC0@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 == *result;
  return result;
}

uint64_t sub_1BDE78ED8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDE78EE4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  if (*v2 == *a1 && v2[1] == a1[1])
    result = 1;
  else
    result = sub_1BE1B34AC();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1BDE78F2C@<X0>(_BYTE *a1@<X8>)
{
  return sub_1BDE78F64(&qword_1EF52D020, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8], a1);
}

uint64_t sub_1BDE78F48@<X0>(_BYTE *a1@<X8>)
{
  return sub_1BDE78F64((unint64_t *)&qword_1ED6F2858, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0], a1);
}

uint64_t sub_1BDE78F64@<X0>(unint64_t *a1@<X4>, uint64_t (*a2)(uint64_t)@<X5>, uint64_t a3@<X6>, _BYTE *a4@<X8>)
{
  uint64_t result;

  sub_1BDD8422C(a1, a2, a3);
  result = sub_1BE1B2798();
  *a4 = result & 1;
  return result;
}

float sub_1BDE78FC0@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

float *sub_1BDE78FCC@<X0>(float *result@<X0>, BOOL *a2@<X8>)
{
  float *v2;

  *a2 = *v2 == *result;
  return result;
}

double sub_1BDE78FE4@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double *sub_1BDE78FF0@<X0>(double *result@<X0>, BOOL *a2@<X8>)
{
  double *v2;

  *a2 = *v2 == *result;
  return result;
}

void sub_1BDE79008(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

unsigned __int8 *sub_1BDE79014@<X0>(unsigned __int8 *result@<X0>, BOOL *a2@<X8>)
{
  unsigned __int8 *v2;

  *a2 = ((*result ^ *v2) & 1) == 0;
  return result;
}

uint64_t sub_1BDE79030@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t sub_1BDE79048@<X0>(_BYTE *a1@<X8>)
{
  return sub_1BDE78F64(&qword_1ED6EF200, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028], a1);
}

uint64_t sub_1BDE79064@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1BDE79070@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1BDF10524(*v2, *a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1BDE790A0@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRExtensible<A>, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE790EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDE7949C(v1, a1);
}

void sub_1BDE790FC(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1BDE7843C(a1, a2, a3, a4);
}

uint64_t sub_1BDE79110@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAttributedString<A>.Cursor, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE7915C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDE79168@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAttributedString<A>.Attributes, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE791B4@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&unk_1BE1C7C70, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE79200@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  MEMORY[0x1C3B7DF54](&unk_1BE1C8294, a1);
  return CRValue<>.observableDifference(from:with:)(a2);
}

uint64_t sub_1BDE7924C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  sub_1BDDB6CA4(v5, v6);
  sub_1BDDB6CA4(v7, v8);
  sub_1BDDD6F30(v5, v6);
  v10 = v9;
  sub_1BDDB796C(v7, v8);
  result = sub_1BDDB796C(v5, v6);
  *a2 = v10 & 1;
  return result;
}

unint64_t sub_1BDE792DC()
{
  unint64_t result;

  result = qword_1EF52D018;
  if (!qword_1EF52D018)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRValueObservableDifference, &type metadata for CRValueObservableDifference);
    atomic_store(result, (unint64_t *)&qword_1EF52D018);
  }
  return result;
}

uint64_t dispatch thunk of CRType.copy(renamingReferences:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CRType.observableDifference(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of CRType.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CRType.needToFinalizeTimestamps()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CRType.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of static CRType.canContainAssets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CRDT.context.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CRDT.actionUndoingDifference(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CRDT.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CRDT.delta(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of CRDT.canMerge(delta:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of CRDT.merge(delta:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of CRMergeable.merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CRMergeable.serializedData(_:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of CRMergeable.init(serializedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static ObservableDifferenceIdentity.identityChanged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ObservableDifferenceIdentity.isIdentityChanged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CRValue.__merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PartialCRDT.merge(delta:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of PartialCRDT.canMerge(delta:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PartialCRDT.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t storeEnumTagSinglePayload for CRValueObservableDifference(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BDE79428 + 4 * byte_1BE1B9270[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BDE79448 + 4 * byte_1BE1B9275[v4]))();
}

_BYTE *sub_1BDE79428(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BDE79448(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BDE79450(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BDE79458(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BDE79460(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BDE79468(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CRValueObservableDifference()
{
  return &type metadata for CRValueObservableDifference;
}

uint64_t dispatch thunk of CRMutatingAction.init(_:serializedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_1BDE7949C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinalizedTimestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDE794E0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FinalizedTimestamp(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1BDE7951C()
{
  unint64_t result;

  result = qword_1ED6EF860;
  if (!qword_1ED6EF860)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6EF860);
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1BDE79568()
{
  sub_1BE1B2A5C();
  nullsub_1();
}

uint64_t sub_1BDE795A0(void *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  int v10;
  id v11;
  uint64_t v12;
  uint64_t result;

  v10 = a3;
  v11 = objc_msgSend(a1, sel_length);
  if (v10)
  {
    if (__OFADD__(v11, 1))
    {
      __break(1u);
    }
    else if ((uint64_t)v11 + 1 > a2)
    {
      v12 = a3 == 2;
      return (*(uint64_t (**)(id, uint64_t, uint64_t))(a5 + 32))(objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a2, v12), a4, a5);
    }
  }
  else if ((uint64_t)v11 > a2)
  {
    v12 = 2;
    return (*(uint64_t (**)(id, uint64_t, uint64_t))(a5 + 32))(objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a2, v12), a4, a5);
  }
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

uint64_t sub_1BDE796B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, char *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  id v23;
  void (*v24)(id, uint64_t, _QWORD *);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  char *v32;

  v12 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v31 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v31 - v19;
  if (v21 < 0)
    goto LABEL_11;
  v22 = objc_msgSend(a1, sel_length);
  if (__OFADD__(v22, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)v22 + 1 <= a3)
  {
LABEL_11:
    result = sub_1BE1B3200();
    __break(1u);
    return result;
  }
  v32 = a6;
  v23 = objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a3, 0);
  v24 = (void (*)(id, uint64_t, _QWORD *))a5[4];
  v24(v23, a4, a5);
  if (__OFSUB__(a3, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3 == a2)
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v20, a4);
  else
    v24(objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a2, 1), a4, a5);
  v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v25(v15, v20, a4);
  v27 = a5[1];
  v26 = a5[2];
  v28 = v32;
  v25(v32, v18, a4);
  v29 = type metadata accessor for CursorRange(0, a4, v27, v26);
  return ((uint64_t (*)(char *, char *, uint64_t))v25)(&v28[*(int *)(v29 + 44)], v15, a4);
}

id sub_1BDE798CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  id v6;

  v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  objc_opt_self();
  v6 = objc_msgSend(a1, sel_characterIndexForIndex_, swift_dynamicCastObjCClassUnconditional());

  if (v6 == (id)sub_1BE1B1C4C())
    return 0;
  else
    return v6;
}

uint64_t sub_1BDE79950(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t (*v7)(uint64_t, uint64_t *);
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t result;

  v7 = (uint64_t (*)(uint64_t, uint64_t *))a4[3];
  v8 = (void *)v7(a3, a4);
  objc_opt_self();
  v9 = objc_msgSend(a1, sel_characterIndexForIndex_, swift_dynamicCastObjCClassUnconditional());

  type metadata accessor for CursorRange(0, a3, a4[1], a4[2]);
  v10 = (void *)v7(a3, a4);
  objc_opt_self();
  v11 = objc_msgSend(a1, sel_characterIndexForIndex_, swift_dynamicCastObjCClassUnconditional());

  if (v9 == (id)sub_1BE1B1C4C())
    return 0;
  result = sub_1BE1B1C4C();
  if (v11 == (id)result)
    return 0;
  if ((uint64_t)v11 >= (uint64_t)v9)
    return (uint64_t)v9;
  __break(1u);
  return result;
}

uint64_t CursorRange.init(lowerBound:upperBound:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  void (*v13)(uint64_t, uint64_t);

  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32);
  v13(a6, a1);
  v11 = a6 + *(int *)(type metadata accessor for CursorRange(0, a3, a4, a5) + 44);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v11, a2, a3);
}

uint64_t type metadata accessor for CursorRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CursorRange);
}

BOOL static CRAffinity.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t CRAffinity.hash(into:)()
{
  return sub_1BE1B3704();
}

uint64_t CRAffinity.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t CursorRange.lowerBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CursorRange.lowerBound.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CursorRange.lowerBound.modify())()
{
  return nullsub_1;
}

uint64_t CursorRange.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t CursorRange.upperBound.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 44), a1);
}

uint64_t (*CursorRange.upperBound.modify())()
{
  return nullsub_1;
}

uint64_t CursorRange.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = swift_retain();
  Array<A>.init(from:)(v8, a2, a3);
  if (!v4)
  {
    if (MEMORY[0x1C3B7C8EC]() == 2)
    {
      sub_1BE1B2A8C();
      type metadata accessor for CursorRange(0, a2, a3, a4);
      sub_1BE1B2A8C();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v9 = 0xD000000000000010;
      *(_QWORD *)(v9 + 8) = 0x80000001BE1CE710;
      *(_BYTE *)(v9 + 16) = 0;
      swift_willThrow();
    }
  }
  return swift_release();
}

uint64_t CursorRange.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a2 + 16);
  sub_1BDE7A054(v5, v5);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  swift_allocObject();
  v8 = sub_1BE1B299C();
  v10 = v9;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11(v9, v2, v5);
  v11(v10 + v7, v2 + *(int *)(a2 + 44), v5);
  sub_1BE1B2A5C();
  nullsub_1();
  Array<A>.encode(to:)(a1, v8, v5, *(_QWORD *)(a2 + 24));
  return swift_bridgeObjectRelease();
}

void CursorRange.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

Swift::Bool __swiftcall CursorRange.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  char v10;
  char v11;
  uint64_t v13;

  v2 = v0;
  v3 = *(_QWORD *)(v0 - 8);
  v4 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1, v2);
  if ((v10 & 1) != 0)
    v11 = 1;
  else
    v11 = v9(v7, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v11 & 1;
}

uint64_t CursorRange.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 56);
  v5(a1, v3, v4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(a1, v3, v4);
}

uint64_t static CursorRange.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((sub_1BE1B2798() & 1) == 0)
    return 0;
  type metadata accessor for CursorRange(0, a3, a4, a5);
  return sub_1BE1B2798() & 1;
}

uint64_t sub_1BDE79FF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static CursorRange.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4]);
}

uint64_t sub_1BDE7A00C(uint64_t a1, uint64_t *a2)
{
  return CursorRange.init(from:)(a1, a2[2], a2[3], a2[4]);
}

uint64_t sub_1BDE7A02C(uint64_t a1, uint64_t a2)
{
  return CursorRange.encode(to:)(a1, a2);
}

void sub_1BDE7A040(_BYTE *a1@<X8>)
{
  CursorRange.minEncodingVersion.getter(a1);
}

uint64_t sub_1BDE7A054(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType())
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B738);
  else
    return sub_1BE1B32F0();
}

unint64_t sub_1BDE7A0A4()
{
  unint64_t result;

  result = qword_1EF52D028[0];
  if (!qword_1EF52D028[0])
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRAffinity, &type metadata for CRAffinity);
    atomic_store(result, qword_1EF52D028);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CRAffinity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BDE7A134 + 4 * byte_1BE1B93E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BDE7A168 + 4 * asc_1BE1B93E0[v4]))();
}

uint64_t sub_1BDE7A168(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDE7A170(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BDE7A178);
  return result;
}

uint64_t sub_1BDE7A184(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BDE7A18CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BDE7A190(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BDE7A198(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CRAffinity()
{
  return &type metadata for CRAffinity;
}

uint64_t sub_1BDE7A1B4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDE7A220(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = ~v8;
  v10 = v7 + v8;
  v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, *(_QWORD *)(a3 + 16));
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t sub_1BDE7A2D4(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v6(a1, v3);
  return v6((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
}

unint64_t sub_1BDE7A33C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_1BDE7A3A8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_1BDE7A414(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

unint64_t sub_1BDE7A480(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v7((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), v5);
  return a1;
}

uint64_t sub_1BDE7A4EC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = ((*(_QWORD *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDE7A5AC + 4 * byte_1BE1B93EA[(v7 - 1)]))();
}

void sub_1BDE7A5FC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t dispatch thunk of CursorIndexable.cursor(at:affinity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of CursorIndexable.cursor(range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CursorIndexable.cursor(range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of CursorIndexable.index(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CursorIndexable.range(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of CursorIndexable.range(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t (*SharedTagged_1.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_1.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_1.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_1.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_1.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_1.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_1.init(_:id:));
}

void SharedTagged_1.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_1, a4);
}

uint64_t type metadata accessor for SharedTagged_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SharedTagged_1);
}

uint64_t sub_1BDE7A8D0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, __int128 *))
{
  __int128 v6;

  v6 = *a2;
  return a5(a1, &v6);
}

void SharedTagged_1.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_1);
}

void SharedTagged_1.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7A9DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_1(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE7AC28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_1(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_1.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7AE90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_1(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_1.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_1(0, a2, a3, a4);
  type metadata accessor for SharedTagged_1(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7B0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

uint64_t type metadata accessor for WeakTagged_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for WeakTagged_1);
}

void SharedTagged_1.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7B1A0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_1.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7B2CC(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 1)
  {
    v6 = xmmword_1BE1B6B20;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v4, v5);
    v6 = (__int128)v7;
  }
  *v1 = v6;
  return result;
}

void SharedTagged_1.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7B404(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_1.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  _QWORD v9[12];

  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9[1] = (char *)v9 - v4;
  v5 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v5);
  v9[0] = (char *)v9 - v6;
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[7] = v7;
  v9[8] = AssociatedConformanceWitness;
  v9[9] = &protocol witness table for Int;
  v9[10] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7B610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  CRExtensible.rawValue.getter(a1, v6 - 88);
  if (*(_QWORD *)(v6 - 88))
  {
    v7 = *v4;
    v8 = v4[1];
    *(_QWORD *)(v6 - 136) = *v4;
    *(_QWORD *)(v6 - 128) = v8;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v10 = *(_QWORD *)(v6 - 120);
    v11 = *(_QWORD *)(v6 - 112);
    *(_QWORD *)(v6 - 136) = v10;
    *(_QWORD *)(v6 - 128) = v11;
    *(_QWORD *)(v6 - 176) = v2;
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 + 8);
    sub_1BDDB6CA4(v7, v8);
    v12(v6 - 136, v3, AssociatedConformanceWitness, *(_QWORD *)(v6 - 152), v5);
    sub_1BDDB796C(v10, v11);
  }
  else
  {
    v13 = *v4;
    v14 = v4[1];
    *(_QWORD *)(v6 - 136) = *v4;
    *(_QWORD *)(v6 - 128) = v14;
    v15 = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v17 = *(_QWORD *)(v6 - 120);
    v16 = *(_QWORD *)(v6 - 112);
    *(_QWORD *)(v6 - 136) = v17;
    *(_QWORD *)(v6 - 128) = v16;
    *(_QWORD *)(v6 - 168) = *(_QWORD *)(v5 + 8);
    sub_1BDDB6CA4(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v6 - 168))(v6 - 136, v1, v15, *(_QWORD *)(v6 - 152), v5);
    sub_1BDDB796C(v17, v16);
  }
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDE7B7A0()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v1 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v1);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7B8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  CRExtensible.rawValue.getter(a1, v4 - 88);
  v5 = *v3;
  v6 = v3[1];
  if (*(_QWORD *)(v4 - 88))
  {
    *(_QWORD *)(v4 - 136) = *v3;
    *(_QWORD *)(v4 - 128) = v6;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
    v8 = *(_QWORD *)(v4 - 120);
    v9 = *(_QWORD *)(v4 - 112);
    *(_QWORD *)(v4 - 136) = v8;
    *(_QWORD *)(v4 - 128) = v9;
    sub_1BDDB6CA4(v5, v6);
    v11 = type metadata accessor for Ref(0, v1, AssociatedConformanceWitness, v10);
    sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v11);
    sub_1BDDB796C(v8, v9);
  }
  else
  {
    *(_QWORD *)(v4 - 136) = *v3;
    *(_QWORD *)(v4 - 128) = v6;
    v12 = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
    v13 = *(_QWORD *)(v4 - 120);
    v14 = *(_QWORD *)(v4 - 112);
    *(_QWORD *)(v4 - 136) = v13;
    *(_QWORD *)(v4 - 128) = v14;
    sub_1BDDB6CA4(v5, v6);
    v16 = type metadata accessor for Ref(0, v2, v12, v15);
    sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v16);
    sub_1BDDB796C(v13, v14);
  }
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDE7BA64(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  _QWORD v9[14];

  v9[5] = a2;
  v9[6] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9[2] = (char *)v9 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v9[1] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v9[0] = (char *)v9 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v9[4] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[9] = v7;
  v9[10] = AssociatedConformanceWitness;
  v9[11] = &protocol witness table for Int;
  v9[12] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7BBF0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  CRExtensible.rawValue.getter(a1, v6 - 88);
  v7 = *v1;
  v8 = v1[1];
  if (*(_QWORD *)(v6 - 88))
  {
    *(_QWORD *)(v6 - 136) = *v1;
    *(_QWORD *)(v6 - 128) = v8;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v10 = Ref.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v11 = *(_QWORD *)(v6 - 120);
    v12 = *(_QWORD *)(v6 - 112);
    v13 = *(_QWORD *)(v6 - 160);
    v14 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v13 + 16))(v5, v14, v2, v10);
    sub_1BDDB6CA4(v7, v8);
    v15 = *(_QWORD *)(v6 - 176);
    swift_dynamicCast();
    *(_QWORD *)(v6 - 136) = v11;
    *(_QWORD *)(v6 - 128) = v12;
    sub_1BDE76A9C(v15, v6 - 136, v3, AssociatedConformanceWitness);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 168) + 8))(v15, v3);
  }
  else
  {
    *(_QWORD *)(v6 - 136) = *v1;
    *(_QWORD *)(v6 - 128) = v8;
    v16 = swift_getAssociatedConformanceWitness();
    v17 = Ref.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v18 = *(_QWORD *)(v6 - 120);
    v19 = *(_QWORD *)(v6 - 112);
    v13 = *(_QWORD *)(v6 - 160);
    v14 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v13 + 16))(v5, v14, v2, v17);
    sub_1BDDB6CA4(v7, v8);
    v20 = *(_QWORD *)(v6 - 192);
    swift_dynamicCast();
    *(_QWORD *)(v6 - 136) = v18;
    *(_QWORD *)(v6 - 128) = v19;
    sub_1BDE76A9C(v20, v6 - 136, v4, v16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 184) + 8))(v20, v4);
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v2);
}

void SharedTagged_1.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE7B7A0);
}

uint64_t sub_1BDE7BDB4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_1(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE7BA64);
  return swift_release();
}

uint64_t SharedTagged_1.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE7BA64);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_1.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_1.subscript.getter(a2, a3);
}

void (*sub_1BDE7BF34())(uint64_t **a1, char a2)
{
  return sub_1BDE7BF54;
}

void sub_1BDE7BF54(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t)sub_1BDE7BA64, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_1.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE7B7A0);
}

void SharedTagged_1.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7C018(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_1.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_1.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_1.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_1);
}

void SharedTagged_1.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_1.hash(into:));
}

void sub_1BDE7C178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_1.hash(into:));
}

uint64_t sub_1BDE7C184(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_1.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1BDE7C190(_QWORD *a1)
{
  return WeakTagged_1.encode(to:)(a1);
}

uint64_t SharedTagged_1.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE7C1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_1.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEAD648(a1, a2, a3, (char *)type metadata accessor for SharedTagged_1, 0, a4);
}

uint64_t sub_1BDE7C200(uint64_t a1, uint64_t a2)
{
  return SharedTagged_1.encode(to:)(a1, a2);
}

uint64_t SharedTagged_1.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.Enum, (uint64_t)&associated conformance descriptor for Tagged_1.Tagged_1.Enum: RawRepresentable);
}

void sub_1BDE7C238(_BYTE *a1@<X8>)
{
  WeakTagged_1.minEncodingVersion.getter(a1);
}

uint64_t (*SharedTagged_2.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_2.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_2.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_2.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_2.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_2.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_2.init(_:id:));
}

void SharedTagged_2.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_2, a4);
}

void SharedTagged_2.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_2);
}

void SharedTagged_2.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7C3B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_2(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE7C600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_2(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_2.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7C868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_2(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE7CABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_2(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE7CD0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_2(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE7CF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_2(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_2.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_2(0, a2, a3, a4);
  type metadata accessor for SharedTagged_2(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7D1C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_2.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7D280(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_2.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7D3AC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_2.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7D4DC(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 2)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_2.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7D614(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_2.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  _QWORD v11[14];

  v11[4] = a2;
  v11[5] = a3;
  v11[3] = a1;
  v11[6] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v5 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v5);
  v11[2] = (char *)v11 - v6;
  v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v7);
  v11[1] = (char *)v11 - v8;
  v9 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11[9] = v9;
  v11[10] = AssociatedConformanceWitness;
  v11[11] = &protocol witness table for Int;
  v11[12] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7D89C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  CRExtensible.rawValue.getter(a1, v5 - 88);
  v6 = *(_QWORD *)(v5 - 88);
  if (v6 == 1)
  {
    v13 = *v3;
    v14 = v3[1];
    *(_QWORD *)(v5 - 136) = *v3;
    *(_QWORD *)(v5 - 128) = v14;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
    v16 = *(_QWORD *)(v5 - 120);
    v17 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 136) = v16;
    *(_QWORD *)(v5 - 128) = v17;
    v18 = *(_QWORD *)(v5 - 152);
    *(_QWORD *)(v5 - 184) = *(_QWORD *)(v18 + 8);
    sub_1BDDB6CA4(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 - 184))(v5 - 136, v1, AssociatedConformanceWitness, *(_QWORD *)(v5 - 160), v18);
    sub_1BDDB796C(v16, v17);
    swift_getAssociatedTypeWitness();
  }
  else
  {
    if (v6)
    {
      v19 = *v3;
      v20 = v3[1];
      *(_QWORD *)(v5 - 176) = *v3;
      *(_QWORD *)(v5 - 136) = v19;
      *(_QWORD *)(v5 - 128) = v20;
      v21 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v22 = *(_QWORD *)(v5 - 120);
      v23 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v22;
      *(_QWORD *)(v5 - 128) = v23;
      v24 = *(_QWORD *)(v5 - 152);
      *(_QWORD *)(v5 - 184) = *(_QWORD *)(v24 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v5 - 176), v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 - 184))(v5 - 136, v4, v21, *(_QWORD *)(v5 - 160), v24);
      sub_1BDDB796C(v22, v23);
    }
    else
    {
      v7 = *v3;
      v8 = v3[1];
      *(_QWORD *)(v5 - 136) = *v3;
      *(_QWORD *)(v5 - 128) = v8;
      v9 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v10 = *(_QWORD *)(v5 - 120);
      v11 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v10;
      *(_QWORD *)(v5 - 128) = v11;
      v12 = *(_QWORD *)(v5 - 152);
      *(_QWORD *)(v5 - 176) = *(_QWORD *)(v12 + 8);
      sub_1BDDB6CA4(v7, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 - 176))(v5 - 136, v2, v9, *(_QWORD *)(v5 - 160), v12);
      sub_1BDDB796C(v10, v11);
    }
    swift_getAssociatedTypeWitness();
  }
  return swift_dynamicCast();
}

void sub_1BDE7DAF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  _QWORD v9[12];

  v9[3] = a1;
  v9[4] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9[2] = (char *)v9 - v3;
  v4 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v4);
  v9[1] = (char *)v9 - v5;
  v6 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v6);
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9[7] = v7;
  v9[8] = AssociatedConformanceWitness;
  v9[9] = &protocol witness table for Int;
  v9[10] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7DC70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  CRExtensible.rawValue.getter(a1, v5 - 88);
  v6 = *(_QWORD *)(v5 - 88);
  if (v6 == 1)
  {
    v14 = *v4;
    v15 = v4[1];
    *(_QWORD *)(v5 - 136) = *v4;
    *(_QWORD *)(v5 - 128) = v15;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
    v17 = *(_QWORD *)(v5 - 120);
    v18 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 136) = v17;
    *(_QWORD *)(v5 - 128) = v18;
    sub_1BDDB6CA4(v14, v15);
    v20 = type metadata accessor for Ref(0, v3, AssociatedConformanceWitness, v19);
    sub_1BDF9FF2C(*(_QWORD *)(v5 - 152), v20);
    sub_1BDDB796C(v17, v18);
    swift_getAssociatedTypeWitness();
  }
  else
  {
    if (v6)
    {
      v21 = *v4;
      v22 = v4[1];
      *(_QWORD *)(v5 - 136) = *v4;
      *(_QWORD *)(v5 - 128) = v22;
      v23 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v24 = *(_QWORD *)(v5 - 120);
      v25 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v24;
      *(_QWORD *)(v5 - 128) = v25;
      sub_1BDDB6CA4(v21, v22);
      v27 = type metadata accessor for Ref(0, v2, v23, v26);
      sub_1BDF9FF2C(*(_QWORD *)(v5 - 152), v27);
      sub_1BDDB796C(v24, v25);
    }
    else
    {
      v7 = *v4;
      v8 = v4[1];
      *(_QWORD *)(v5 - 136) = *v4;
      *(_QWORD *)(v5 - 128) = v8;
      v9 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v10 = *(_QWORD *)(v5 - 120);
      v11 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v10;
      *(_QWORD *)(v5 - 128) = v11;
      sub_1BDDB6CA4(v7, v8);
      v13 = type metadata accessor for Ref(0, v1, v9, v12);
      sub_1BDF9FF2C(*(_QWORD *)(v5 - 152), v13);
      sub_1BDDB796C(v10, v11);
    }
    swift_getAssociatedTypeWitness();
  }
  return swift_dynamicCast();
}

void sub_1BDE7DED8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  _QWORD v10[18];

  v10[9] = a2;
  v10[10] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10[6] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10[4] = (char *)v10 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v10[3] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v10[2] = (char *)v10 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v10[1] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v7 = swift_getAssociatedTypeWitness();
  v10[7] = *(_QWORD *)(v7 - 8);
  v10[8] = v7;
  MEMORY[0x1E0C80A78](v7);
  v8 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10[13] = v8;
  v10[14] = AssociatedConformanceWitness;
  v10[15] = &protocol witness table for Int;
  v10[16] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7E0A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;

  CRExtensible.rawValue.getter(a1, v6 - 88);
  v7 = *(_QWORD *)(v6 - 88);
  if (v7 == 1)
  {
    v18 = *v1;
    v17 = v1[1];
    *(_QWORD *)(v6 - 136) = v18;
    *(_QWORD *)(v6 - 128) = v17;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v20 = Ref.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v21 = *(_QWORD *)(v6 - 120);
    v22 = *(_QWORD *)(v6 - 112);
    v24 = *(_QWORD *)(v6 - 168);
    v23 = *(_QWORD *)(v6 - 160);
    v25 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v24 + 16))(v3, v25, v23, v20);
    sub_1BDDB6CA4(v18, v17);
    v26 = *(_QWORD *)(v6 - 208);
    swift_dynamicCast();
    *(_QWORD *)(v6 - 136) = v21;
    *(_QWORD *)(v6 - 128) = v22;
    sub_1BDE76A9C(v26, v6 - 136, v5, AssociatedConformanceWitness);
    v27 = *(_QWORD *)(v6 - 200);
  }
  else
  {
    if (!v7)
    {
      v9 = *v1;
      v8 = v1[1];
      *(_QWORD *)(v6 - 136) = v9;
      *(_QWORD *)(v6 - 128) = v8;
      v10 = swift_getAssociatedConformanceWitness();
      v11 = Ref.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
      v12 = *(_QWORD *)(v6 - 112);
      *(_QWORD *)(v6 - 176) = *(_QWORD *)(v6 - 120);
      v13 = *(_QWORD *)(v6 - 168);
      v14 = *(_QWORD *)(v6 - 160);
      v15 = *(_QWORD *)(v6 - 144);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v13 + 16))(v3, v15, v14, v11);
      sub_1BDDB6CA4(v9, v8);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 136) = *(_QWORD *)(v6 - 176);
      *(_QWORD *)(v6 - 128) = v12;
      sub_1BDE76A9C(v2, v6 - 136, v4, v10);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8))(v2, v4);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
    }
    v29 = *v1;
    v28 = v1[1];
    *(_QWORD *)(v6 - 136) = v29;
    *(_QWORD *)(v6 - 128) = v28;
    v5 = *(_QWORD *)(v6 - 176);
    v30 = swift_getAssociatedConformanceWitness();
    v31 = Ref.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v32 = *(_QWORD *)(v6 - 120);
    v33 = *(_QWORD *)(v6 - 112);
    v24 = *(_QWORD *)(v6 - 168);
    v23 = *(_QWORD *)(v6 - 160);
    v25 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v24 + 16))(v3, v25, v23, v31);
    sub_1BDDB6CA4(v29, v28);
    v26 = *(_QWORD *)(v6 - 192);
    swift_dynamicCast();
    *(_QWORD *)(v6 - 136) = v32;
    *(_QWORD *)(v6 - 128) = v33;
    sub_1BDE76A9C(v26, v6 - 136, v5, v30);
    v27 = *(_QWORD *)(v6 - 184);
  }
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v5);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v23);
}

void SharedTagged_2.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE7DAF0);
}

uint64_t sub_1BDE7E340(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_2(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE7DED8);
  return swift_release();
}

uint64_t SharedTagged_2.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE7DED8);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_2.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_2.subscript.getter(a2, a3);
}

void (*sub_1BDE7E4C0())(uint64_t **a1, char a2)
{
  return sub_1BDE7E4E0;
}

void sub_1BDE7E4E0(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t)sub_1BDE7DED8, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

void sub_1BDE7E504(uint64_t **a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *, uint64_t);

  v8 = *a1;
  v9 = (void *)(*a1)[5];
  v10 = (void *)(*a1)[6];
  v11 = (*a1)[3];
  v12 = (*a1)[4];
  v13 = (*a1)[1];
  v14 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v12 + 16))((*a1)[5], v10, v11);
    swift_retain();
    a6(v9, v14, v13, a3, a4, a5);
    swift_release();
    v15 = *(void (**)(void *, uint64_t))(v12 + 8);
    v15(v9, v11);
  }
  else
  {
    swift_retain();
    a6(v10, v14, v13, a3, a4, a5);
    swift_release();
    v15 = *(void (**)(void *, uint64_t))(v12 + 8);
  }
  v15(v10, v11);
  free(v10);
  free(v9);
  free(v8);
}

uint64_t SharedTagged_2.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE7DAF0);
}

void SharedTagged_2.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7E6AC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_2.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void sub_1BDE7E824()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7E8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v21 - v10;
  if (v1 && *(_QWORD *)(v1 + 16))
  {
    *(_QWORD *)(v7 - 128) = v6;
    v13 = *v3;
    v12 = v3[1];
    sub_1BDDB6CA4(*v3, v12);
    v14 = sub_1BDDB7F0C(v13, v12);
    if ((v15 & 1) != 0)
    {
      v16 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v14);
      v18 = *v16;
      v17 = v16[1];
      *(_QWORD *)(v7 - 136) = v17;
      sub_1BDDB6CA4(v18, v17);
      sub_1BDDB796C(v13, v12);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, (char *)v3 + *(int *)(v4 + 36), a1);
      v19 = *(_QWORD *)(v7 - 136);
      *(_QWORD *)(v7 - 112) = v18;
      *(_QWORD *)(v7 - 104) = v19;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 - 120))(v11, v7 - 112, v5, v2);
    }
    sub_1BDDB796C(v13, v12);
    v6 = *(_QWORD *)(v7 - 128);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v6, v3, v4);
}

void SharedTagged_2.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_2.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_2);
}

void SharedTagged_2.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_2.hash(into:));
}

void sub_1BDE7E9FC(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  _BYTE v4[72];

  sub_1BE1B36F8();
  a2(v4, a1);
  JUMPOUT(0x1BDE7EA30);
}

void sub_1BDE7EA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_2.hash(into:));
}

void sub_1BDE7EA60(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t))
{
  _BYTE v6[72];

  sub_1BE1B36F8();
  a4(v6, a2);
  JUMPOUT(0x1BDE7EA90);
}

uint64_t sub_1BDE7EAAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_2.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_2.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE7EAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_2.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_2.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEAFE54(a1, a2, a3, (char *)type metadata accessor for SharedTagged_2, 0, a4);
}

uint64_t sub_1BDE7EB10(uint64_t a1, uint64_t a2)
{
  return SharedTagged_2.encode(to:)(a1, a2);
}

uint64_t SharedTagged_2.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.Enum, (uint64_t)&associated conformance descriptor for Tagged_2.Tagged_2.Enum: RawRepresentable);
}

uint64_t sub_1BDE7EB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v50[22];
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _UNKNOWN **v61;
  uint64_t v62;
  uint64_t v63;

  v50[18] = a5;
  v50[9] = a4;
  v50[10] = a3;
  v50[8] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v6 = MEMORY[0x1E0C80A78](v5);
  v50[17] = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v50[15] = (char *)v50 - v8;
  v53 = type metadata accessor for Proto_KeyPath(0);
  v50[14] = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v52 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Proto_Reference(0);
  v10 = MEMORY[0x1E0C80A78](v51);
  v50[16] = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v50[11] = (char *)v50 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v14 = MEMORY[0x1E0C80A78](v13);
  v50[21] = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)v50 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v55 = (char *)v50 - v19;
  MEMORY[0x1E0C80A78](v18);
  v50[20] = (char *)v50 - v20;
  v63 = type metadata accessor for Proto_Value(0);
  v50[12] = *(_QWORD *)(v63 - 8);
  v21 = MEMORY[0x1E0C80A78](v63);
  v54 = (char *)v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v58 = (char *)v50 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v50[13] = (char *)v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)v50 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)v50 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v35 = (char *)v50 - v34;
  MEMORY[0x1E0C80A78](v33);
  v50[7] = (char *)v50 - v36;
  v37 = type metadata accessor for Proto_TaggedValue(0);
  v38 = MEMORY[0x1E0C80A78](v37);
  v40 = (char *)v50 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v38);
  v43 = (char *)v50 - v42;
  MEMORY[0x1E0C80A78](v41);
  v45 = (char *)v50 - v44;
  v46 = v57;
  result = sub_1BDE25870();
  if (!v46)
  {
    v50[0] = v45;
    v50[1] = v35;
    v50[2] = v32;
    v50[3] = v29;
    v50[5] = v43;
    v50[6] = v37;
    v50[4] = 0;
    v50[19] = v40;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    swift_retain();
    v59 = AssociatedTypeWitness;
    v60 = AssociatedConformanceWitness;
    v61 = &protocol witness table for Int;
    v62 = MEMORY[0x1E0DEB428];
    type metadata accessor for CRExtensible();
  }
  return result;
}

uint64_t (*SharedTagged_3.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_3.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_3.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_3.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_3.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_3.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_3.init(_:id:));
}

void SharedTagged_3.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_3, a4);
}

void SharedTagged_3.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_3);
}

void SharedTagged_3.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE7FC34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_3(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE7FE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_3(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_3.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE800E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_3(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8033C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_3(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8058C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_3(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE807F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_3(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE80A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_3(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE80CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_3(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE80F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_3(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_3.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_3(0, a2, a3, a4);
  type metadata accessor for SharedTagged_3(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE81154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_3.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE81214(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_3.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE81340(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_3.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE81470(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_3.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE815A0(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 3)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_3.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE816D8(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_3.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  _QWORD v12[4];
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _UNKNOWN **v20;
  uint64_t v21;

  v15 = a2;
  v16 = a3;
  v14 = a1;
  v17 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12[3] = (char *)v12 - v4;
  v5 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v5);
  v12[2] = (char *)v12 - v6;
  v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v7);
  v12[1] = (char *)v12 - v8;
  v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v9);
  v10 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v18 = v10;
  v19 = AssociatedConformanceWitness;
  v20 = &protocol witness table for Int;
  v21 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE819DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  CRExtensible.rawValue.getter(a1, v5 - 88);
  v6 = *(_QWORD *)(v5 - 88);
  if (v6 == 2)
  {
    v13 = *v3;
    v14 = v3[1];
    *(_QWORD *)(v5 - 136) = *v3;
    *(_QWORD *)(v5 - 128) = v14;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
    v16 = *(_QWORD *)(v5 - 120);
    v17 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 136) = v16;
    *(_QWORD *)(v5 - 128) = v17;
    v18 = *(_QWORD *)(v5 - 152);
    *(_QWORD *)(v5 - 176) = *(_QWORD *)(v18 + 8);
    sub_1BDDB6CA4(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 - 176))(v5 - 136, v1, AssociatedConformanceWitness, *(_QWORD *)(v5 - 160), v18);
    sub_1BDDB796C(v16, v17);
    swift_getAssociatedTypeWitness();
  }
  else if (v6 == 1)
  {
    v19 = *v3;
    v20 = v3[1];
    *(_QWORD *)(v5 - 136) = *v3;
    *(_QWORD *)(v5 - 128) = v20;
    v21 = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
    v22 = *(_QWORD *)(v5 - 120);
    v23 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 136) = v22;
    *(_QWORD *)(v5 - 128) = v23;
    v24 = *(_QWORD *)(v5 - 152);
    *(_QWORD *)(v5 - 176) = *(_QWORD *)(v24 + 8);
    sub_1BDDB6CA4(v19, v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 - 176))(v5 - 136, v2, v21, *(_QWORD *)(v5 - 160), v24);
    sub_1BDDB796C(v22, v23);
    swift_getAssociatedTypeWitness();
  }
  else
  {
    if (v6)
    {
      v25 = *v3;
      v26 = v3[1];
      *(_QWORD *)(v5 - 136) = *v3;
      *(_QWORD *)(v5 - 128) = v26;
      v27 = *(_QWORD *)(v5 - 176);
      v28 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v29 = *(_QWORD *)(v5 - 120);
      v30 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v29;
      *(_QWORD *)(v5 - 128) = v30;
      v31 = *(_QWORD *)(v5 - 152);
      *(_QWORD *)(v5 - 192) = *(_QWORD *)(v31 + 8);
      sub_1BDDB6CA4(v25, v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 - 192))(v5 - 136, v27, v28, *(_QWORD *)(v5 - 160), v31);
      sub_1BDDB796C(v29, v30);
    }
    else
    {
      v7 = *v3;
      v8 = v3[1];
      *(_QWORD *)(v5 - 176) = *v3;
      *(_QWORD *)(v5 - 136) = v7;
      *(_QWORD *)(v5 - 128) = v8;
      v9 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v10 = *(_QWORD *)(v5 - 120);
      v11 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v10;
      *(_QWORD *)(v5 - 128) = v11;
      v12 = *(_QWORD *)(v5 - 152);
      *(_QWORD *)(v5 - 184) = *(_QWORD *)(v12 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v5 - 176), v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v5 - 184))(v5 - 136, v4, v9, *(_QWORD *)(v5 - 160), v12);
      sub_1BDDB796C(v10, v11);
    }
    swift_getAssociatedTypeWitness();
  }
  return swift_dynamicCast();
}

void sub_1BDE81CEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  _QWORD v10[4];
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;

  v12 = a1;
  v13 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10[3] = (char *)v10 - v2;
  v3 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v3);
  v10[2] = (char *)v10 - v4;
  v5 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v5);
  v10[1] = (char *)v10 - v6;
  v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v7);
  v8 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = v8;
  v15 = AssociatedConformanceWitness;
  v16 = &protocol witness table for Int;
  v17 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE81EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  CRExtensible.rawValue.getter(a1, v5 - 88);
  v6 = *(_QWORD *)(v5 - 88);
  if (v6 == 2)
  {
    v14 = *v4;
    v15 = v4[1];
    *(_QWORD *)(v5 - 136) = *v4;
    *(_QWORD *)(v5 - 128) = v15;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
    v17 = *(_QWORD *)(v5 - 120);
    v18 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 136) = v17;
    *(_QWORD *)(v5 - 128) = v18;
    sub_1BDDB6CA4(v14, v15);
    v20 = type metadata accessor for Ref(0, v3, AssociatedConformanceWitness, v19);
    sub_1BDF9FF2C(*(_QWORD *)(v5 - 152), v20);
    sub_1BDDB796C(v17, v18);
    swift_getAssociatedTypeWitness();
  }
  else if (v6 == 1)
  {
    v21 = *v4;
    v22 = v4[1];
    *(_QWORD *)(v5 - 136) = *v4;
    *(_QWORD *)(v5 - 128) = v22;
    v23 = swift_getAssociatedConformanceWitness();
    Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
    v24 = *(_QWORD *)(v5 - 120);
    v25 = *(_QWORD *)(v5 - 112);
    *(_QWORD *)(v5 - 136) = v24;
    *(_QWORD *)(v5 - 128) = v25;
    sub_1BDDB6CA4(v21, v22);
    v27 = type metadata accessor for Ref(0, v1, v23, v26);
    sub_1BDF9FF2C(*(_QWORD *)(v5 - 152), v27);
    sub_1BDDB796C(v24, v25);
    swift_getAssociatedTypeWitness();
  }
  else
  {
    v7 = *v4;
    v8 = v4[1];
    *(_QWORD *)(v5 - 136) = *v4;
    *(_QWORD *)(v5 - 128) = v8;
    if (v6)
    {
      v28 = *(_QWORD *)(v5 - 160);
      v29 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v30 = *(_QWORD *)(v5 - 120);
      v31 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v30;
      *(_QWORD *)(v5 - 128) = v31;
      sub_1BDDB6CA4(v7, v8);
      v33 = type metadata accessor for Ref(0, v28, v29, v32);
      sub_1BDF9FF2C(*(_QWORD *)(v5 - 152), v33);
      sub_1BDDB796C(v30, v31);
    }
    else
    {
      v9 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v5 - 136), (__n128 *)(v5 - 120));
      v10 = *(_QWORD *)(v5 - 120);
      v11 = *(_QWORD *)(v5 - 112);
      *(_QWORD *)(v5 - 136) = v10;
      *(_QWORD *)(v5 - 128) = v11;
      sub_1BDDB6CA4(v7, v8);
      v13 = type metadata accessor for Ref(0, v2, v9, v12);
      sub_1BDF9FF2C(*(_QWORD *)(v5 - 152), v13);
      sub_1BDDB796C(v10, v11);
    }
    swift_getAssociatedTypeWitness();
  }
  return swift_dynamicCast();
}

void sub_1BDE821D4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  _QWORD v13[22];

  v13[12] = a2;
  v13[13] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13[8] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13[6] = (char *)v13 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v13[5] = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v13[4] = (char *)v13 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v13[3] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v13[2] = (char *)v13 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v13[1] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v9 = swift_getAssociatedTypeWitness();
  v13[10] = *(_QWORD *)(v9 - 8);
  v13[11] = v9;
  MEMORY[0x1E0C80A78](v9);
  v13[9] = (char *)v13 - v10;
  v11 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13[16] = v11;
  v13[17] = AssociatedConformanceWitness;
  v13[18] = &protocol witness table for Int;
  v13[19] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE823F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t AssociatedConformanceWitness;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  v7 = *(_QWORD *)(v6 - 96);
  if (v7 == 2)
  {
    v17 = *v5;
    v18 = v5[1];
    *(_QWORD *)(v6 - 144) = *v5;
    *(_QWORD *)(v6 - 136) = v18;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v20 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v21 = *(_QWORD *)(v6 - 128);
    v22 = *(_QWORD *)(v6 - 120);
    v23 = *(_QWORD *)(v6 - 176);
    v24 = *(_QWORD *)(v6 - 152);
    v25 = *(_QWORD *)(v6 - 168);
    (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v20);
    sub_1BDDB6CA4(v17, v18);
    v26 = *(_QWORD *)(v6 - 224);
    swift_dynamicCast();
    *(_QWORD *)(v6 - 144) = v21;
    *(_QWORD *)(v6 - 136) = v22;
    sub_1BDE76A9C(v26, v6 - 144, v1, AssociatedConformanceWitness);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8))(v26, v1);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  }
  else
  {
    if (v7 == 1)
    {
      v27 = *v5;
      v28 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v28;
      v29 = swift_getAssociatedConformanceWitness();
      v30 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v31 = *(_QWORD *)(v6 - 128);
      v32 = *(_QWORD *)(v6 - 120);
      v33 = *(_QWORD *)(v6 - 176);
      v34 = *(_QWORD *)(v6 - 152);
      v35 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v33 + 16))(*(_QWORD *)(v6 - 184), v34, v35, v30);
      sub_1BDDB6CA4(v27, v28);
      v36 = *(_QWORD *)(v6 - 240);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v31;
      *(_QWORD *)(v6 - 136) = v32;
      sub_1BDE76A9C(v36, v6 - 144, v4, v29);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 232) + 8))(v36, v4);
    }
    else
    {
      if (!v7)
      {
        v8 = *v5;
        v9 = v5[1];
        *(_QWORD *)(v6 - 144) = *v5;
        *(_QWORD *)(v6 - 136) = v9;
        v10 = swift_getAssociatedConformanceWitness();
        v11 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
        v12 = *(_QWORD *)(v6 - 120);
        *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
        v13 = *(_QWORD *)(v6 - 176);
        v14 = *(_QWORD *)(v6 - 152);
        v15 = *(_QWORD *)(v6 - 168);
        (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v13 + 16))(*(_QWORD *)(v6 - 184), v14, v15, v11);
        sub_1BDDB6CA4(v8, v9);
        swift_dynamicCast();
        *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
        *(_QWORD *)(v6 - 136) = v12;
        sub_1BDE76A9C(v2, v6 - 144, v3, v10);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 248) + 8))(v2, v3);
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
      }
      v37 = *v5;
      v38 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v38;
      v39 = *(_QWORD *)(v6 - 192);
      v40 = swift_getAssociatedConformanceWitness();
      v41 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v42 = *(_QWORD *)(v6 - 128);
      v43 = *(_QWORD *)(v6 - 120);
      v33 = *(_QWORD *)(v6 - 176);
      v34 = *(_QWORD *)(v6 - 152);
      v35 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v33 + 16))(*(_QWORD *)(v6 - 184), v34, v35, v41);
      sub_1BDDB6CA4(v37, v38);
      v44 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v42;
      *(_QWORD *)(v6 - 136) = v43;
      sub_1BDE76A9C(v44, v6 - 144, v39, v40);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 200) + 8))(v44, v39);
    }
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
  }
}

void SharedTagged_3.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE81CEC);
}

uint64_t sub_1BDE82784(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_3(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE821D4);
  return swift_release();
}

uint64_t SharedTagged_3.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE821D4);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_3.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_3.subscript.getter(a2, a3);
}

void (*sub_1BDE82904())(uint64_t **a1, char a2)
{
  return sub_1BDE82924;
}

void sub_1BDE82924(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t)sub_1BDE821D4, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_3.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE81CEC);
}

void SharedTagged_3.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE829E8(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_3.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_3.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_3.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_3);
}

void SharedTagged_3.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_3.hash(into:));
}

void sub_1BDE82BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_3.hash(into:));
}

uint64_t sub_1BDE82BF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_3.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_3.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE82C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_3.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_3.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEB3C68(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_3, 0, a4);
}

uint64_t sub_1BDE82C5C(uint64_t a1, uint64_t a2)
{
  return SharedTagged_3.encode(to:)(a1, a2);
}

uint64_t SharedTagged_3.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.Enum, (uint64_t)&associated conformance descriptor for Tagged_3.Tagged_3.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_4.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_4.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_4.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_4.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_4.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_4.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_4.init(_:id:));
}

void SharedTagged_4.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_4, a4);
}

void SharedTagged_4.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_4);
}

void SharedTagged_4.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE82DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_4(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE83048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_4(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_4.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE832B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_4(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE83504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_4(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE83754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_4(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE839C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_4(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE83C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_4(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE83E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_4(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE840D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_4(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8432C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_4(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8457C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_4(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE847E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_4(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_4.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_4(0, a2, a3, a4);
  type metadata accessor for SharedTagged_4(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE84A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_4.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE84AF0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_4.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE84C1C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_4.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE84D4C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_4.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE84E7C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_4.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE84FAC(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 4)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_4.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE850E4(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_4.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  _QWORD v11[2];
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _UNKNOWN **v23;
  uint64_t v24;

  v18 = a2;
  v19 = a3;
  v17 = a1;
  v20 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)v11 - v4;
  v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v14);
  v13 = (char *)v11 - v5;
  v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v12);
  v11[1] = (char *)v11 - v6;
  v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v7);
  v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v8);
  v9 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = v9;
  v22 = AssociatedConformanceWitness;
  v23 = &protocol witness table for Int;
  v24 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE85464(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  CRExtensible.rawValue.getter(a1, v4 - 88);
  switch(*(_QWORD *)(v4 - 88))
  {
    case 0:
      v6 = *v1;
      v5 = v1[1];
      *(_QWORD *)(v4 - 176) = v5;
      *(_QWORD *)(v4 - 136) = v6;
      *(_QWORD *)(v4 - 128) = v5;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v8 = *(_QWORD *)(v4 - 120);
      v9 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v8;
      *(_QWORD *)(v4 - 128) = v9;
      v10 = *(_QWORD *)(v4 - 152);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v10 + 8);
      sub_1BDDB6CA4(v6, *(_QWORD *)(v4 - 176));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v4 - 136, v3, AssociatedConformanceWitness, *(_QWORD *)(v4 - 160), v10);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v18 = *v1;
      v19 = v1[1];
      *(_QWORD *)(v4 - 176) = *v1;
      *(_QWORD *)(v4 - 136) = v18;
      *(_QWORD *)(v4 - 128) = v19;
      v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v21 = *(_QWORD *)(v4 - 120);
      v22 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v21;
      *(_QWORD *)(v4 - 128) = v22;
      v23 = *(_QWORD *)(v4 - 152);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v23 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v4 - 176), v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v4 - 136, v2, v20, *(_QWORD *)(v4 - 160), v23);
      sub_1BDDB796C(v21, v22);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v24 = *v1;
      v25 = v1[1];
      *(_QWORD *)(v4 - 136) = *v1;
      *(_QWORD *)(v4 - 128) = v25;
      v26 = *(_QWORD *)(v4 - 208);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v15 = *(_QWORD *)(v4 - 120);
      v16 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v15;
      *(_QWORD *)(v4 - 128) = v16;
      v28 = *(_QWORD *)(v4 - 152);
      *(_QWORD *)(v4 - 176) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v24, v25);
      v29 = v4 - 136;
      goto LABEL_7;
    case 3:
      v30 = *v1;
      v31 = v1[1];
      *(_QWORD *)(v4 - 136) = *v1;
      *(_QWORD *)(v4 - 128) = v31;
      v26 = *(_QWORD *)(v4 - 192);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v15 = *(_QWORD *)(v4 - 120);
      v16 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v15;
      *(_QWORD *)(v4 - 128) = v16;
      v28 = *(_QWORD *)(v4 - 152);
      *(_QWORD *)(v4 - 176) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v30, v31);
      v29 = v4 - 136;
LABEL_7:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 176))(v29, v26, v27, *(_QWORD *)(v4 - 160), v28);
      goto LABEL_8;
    default:
      v11 = *v1;
      v12 = v1[1];
      *(_QWORD *)(v4 - 136) = *v1;
      *(_QWORD *)(v4 - 128) = v12;
      v13 = *(_QWORD *)(v4 - 176);
      v14 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v15 = *(_QWORD *)(v4 - 120);
      v16 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v15;
      *(_QWORD *)(v4 - 128) = v16;
      v17 = *(_QWORD *)(v4 - 152);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v17 + 8);
      sub_1BDDB6CA4(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 136, v13, v14, *(_QWORD *)(v4 - 160), v17);
LABEL_8:
      sub_1BDDB796C(v15, v16);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDE857B8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  _QWORD v9[2];
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _UNKNOWN **v19;
  uint64_t v20;

  v15 = a1;
  v16 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v9 - v2;
  v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v12);
  v11 = (char *)v9 - v3;
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v10);
  v9[1] = (char *)v9 - v4;
  v5 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v5);
  v6 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v6);
  v7 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = v7;
  v18 = AssociatedConformanceWitness;
  v19 = &protocol witness table for Int;
  v20 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE859CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  CRExtensible.rawValue.getter(a1, v4 - 88);
  switch(*(_QWORD *)(v4 - 88))
  {
    case 0:
      v5 = *v3;
      v6 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v8 = *(_QWORD *)(v4 - 120);
      v9 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v8;
      *(_QWORD *)(v4 - 128) = v9;
      sub_1BDDB6CA4(v5, v6);
      v11 = type metadata accessor for Ref(0, v1, AssociatedConformanceWitness, v10);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v11);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v20 = *v3;
      v21 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v21;
      v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v23 = *(_QWORD *)(v4 - 120);
      v24 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v23;
      *(_QWORD *)(v4 - 128) = v24;
      sub_1BDDB6CA4(v20, v21);
      v26 = type metadata accessor for Ref(0, v2, v22, v25);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v26);
      sub_1BDDB796C(v23, v24);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v27 = *v3;
      v28 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v28;
      v29 = *(_QWORD *)(v4 - 192);
      v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v16 = *(_QWORD *)(v4 - 120);
      v17 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 128) = v17;
      sub_1BDDB6CA4(v27, v28);
      v19 = type metadata accessor for Ref(0, v29, v30, v31);
      goto LABEL_7;
    case 3:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v33;
      v34 = *(_QWORD *)(v4 - 176);
      v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v16 = *(_QWORD *)(v4 - 120);
      v17 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 128) = v17;
      sub_1BDDB6CA4(v32, v33);
      v19 = type metadata accessor for Ref(0, v34, v35, v36);
      goto LABEL_7;
    default:
      v12 = *v3;
      v13 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v13;
      v14 = *(_QWORD *)(v4 - 160);
      v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v16 = *(_QWORD *)(v4 - 120);
      v17 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 128) = v17;
      sub_1BDDB6CA4(v12, v13);
      v19 = type metadata accessor for Ref(0, v14, v15, v18);
LABEL_7:
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v19);
      sub_1BDDB796C(v16, v17);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDE85D44(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  _QWORD v14[24];

  v14[14] = a2;
  v14[15] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14[10] = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14[8] = (char *)v14 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v14[6] = *(_QWORD *)(v4 - 8);
  v14[7] = v4;
  MEMORY[0x1E0C80A78](v4);
  v14[5] = (char *)v14 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v14[3] = *(_QWORD *)(v6 - 8);
  v14[4] = v6;
  MEMORY[0x1E0C80A78](v6);
  v14[2] = (char *)v14 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v14[1] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v9 = swift_getAssociatedTypeWitness();
  v14[0] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v10 = swift_getAssociatedTypeWitness();
  v14[12] = *(_QWORD *)(v10 - 8);
  v14[13] = v10;
  MEMORY[0x1E0C80A78](v10);
  v14[11] = (char *)v14 - v11;
  v12 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14[18] = v12;
  v14[19] = AssociatedConformanceWitness;
  v14[20] = &protocol witness table for Int;
  v14[21] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE85FB4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v8 = *v1;
      v7 = v1[1];
      *(_QWORD *)(v6 - 144) = v8;
      *(_QWORD *)(v6 - 136) = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v10 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v12 = *(_QWORD *)(v6 - 176);
      v13 = *(_QWORD *)(v6 - 152);
      v14 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v12 + 16))(*(_QWORD *)(v6 - 184), v13, v14, v10);
      sub_1BDDB6CA4(v8, v7);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v11;
      sub_1BDE76A9C(v5, v6 - 144, v3, AssociatedConformanceWitness);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 272) + 8))(v5, v3);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    case 1:
      v29 = *v1;
      v28 = v1[1];
      *(_QWORD *)(v6 - 144) = v29;
      *(_QWORD *)(v6 - 136) = v28;
      v30 = swift_getAssociatedConformanceWitness();
      v31 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v32 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v33 = *(_QWORD *)(v6 - 176);
      v34 = *(_QWORD *)(v6 - 152);
      v35 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v33 + 16))(*(_QWORD *)(v6 - 184), v34, v35, v31);
      sub_1BDDB6CA4(v29, v28);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v32;
      sub_1BDE76A9C(v4, v6 - 144, v2, v30);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 264) + 8))(v4, v2);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    case 2:
      v37 = *v1;
      v36 = v1[1];
      *(_QWORD *)(v6 - 144) = v37;
      *(_QWORD *)(v6 - 136) = v36;
      v18 = *(_QWORD *)(v6 - 240);
      v38 = swift_getAssociatedConformanceWitness();
      v39 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v40 = *(_QWORD *)(v6 - 128);
      v41 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v39);
      sub_1BDDB6CA4(v37, v36);
      v26 = *(_QWORD *)(v6 - 256);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v40;
      *(_QWORD *)(v6 - 136) = v41;
      sub_1BDE76A9C(v26, v6 - 144, v18, v38);
      v27 = *(_QWORD *)(v6 - 248);
      goto LABEL_7;
    case 3:
      v43 = *v1;
      v42 = v1[1];
      *(_QWORD *)(v6 - 144) = v43;
      *(_QWORD *)(v6 - 136) = v42;
      v18 = *(_QWORD *)(v6 - 216);
      v44 = swift_getAssociatedConformanceWitness();
      v45 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v46 = *(_QWORD *)(v6 - 128);
      v47 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v45);
      sub_1BDDB6CA4(v43, v42);
      v26 = *(_QWORD *)(v6 - 232);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v46;
      *(_QWORD *)(v6 - 136) = v47;
      sub_1BDE76A9C(v26, v6 - 144, v18, v44);
      v27 = *(_QWORD *)(v6 - 224);
      goto LABEL_7;
    default:
      v17 = *v1;
      v16 = v1[1];
      *(_QWORD *)(v6 - 144) = v17;
      *(_QWORD *)(v6 - 136) = v16;
      v18 = *(_QWORD *)(v6 - 192);
      v19 = swift_getAssociatedConformanceWitness();
      v20 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v21 = *(_QWORD *)(v6 - 128);
      v22 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v20);
      sub_1BDDB6CA4(v17, v16);
      v26 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v21;
      *(_QWORD *)(v6 - 136) = v22;
      sub_1BDE76A9C(v26, v6 - 144, v18, v19);
      v27 = *(_QWORD *)(v6 - 200);
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v18);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  }
}

void SharedTagged_4.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE857B8);
}

uint64_t sub_1BDE86404(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_4(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE85D44);
  return swift_release();
}

uint64_t SharedTagged_4.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE85D44);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_4.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_4.subscript.getter(a2, a3);
}

void (*sub_1BDE86584())(uint64_t **a1, char a2)
{
  return sub_1BDE865A4;
}

void sub_1BDE865A4(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t)sub_1BDE85D44, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_4.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE857B8);
}

void SharedTagged_4.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE86668(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_4.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_4.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_4.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_4);
}

void SharedTagged_4.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_4.hash(into:));
}

void sub_1BDE868B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_4.hash(into:));
}

uint64_t sub_1BDE868C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_4.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_4.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE868EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_4.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_4.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEB7264(a1, a2, a3, (char *)type metadata accessor for SharedTagged_4, 0, a4);
}

uint64_t sub_1BDE86928(uint64_t a1, uint64_t a2)
{
  return SharedTagged_4.encode(to:)(a1, a2);
}

uint64_t SharedTagged_4.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.Enum, (uint64_t)&associated conformance descriptor for Tagged_4.Tagged_4.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_5.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_5.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_5.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_5.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_5.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_5.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_5.init(_:id:));
}

void SharedTagged_5.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_5, a4);
}

void SharedTagged_5.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_5);
}

void SharedTagged_5.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE86AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_5(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE86D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_5(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_5.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE86F7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_5(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE871D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_5(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE87420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_5(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE8768C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_5(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE878E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_5(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE87B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_5(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE87DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_5(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE87FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_5(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE88248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_5(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE884B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_5(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8870C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_5(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8895C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_5(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE88BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_5(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_5.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_5(0, a2, a3, a4);
  type metadata accessor for SharedTagged_5(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE88E10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_5.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE88ED0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_5.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE88FFC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_5.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8912C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_5.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8925C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_5.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8938C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_5.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE894BC(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 5)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_5.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE895F4(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_5.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;

  v21 = a2;
  v22 = a3;
  v20 = a1;
  v23 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v12 - v4;
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17);
  v16 = (char *)&v12 - v5;
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v15);
  v14 = (char *)&v12 - v6;
  v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v13);
  v12 = (char *)&v12 - v7;
  v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v8);
  v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v9);
  v10 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24 = v10;
  v25 = AssociatedConformanceWitness;
  v26 = &protocol witness table for Int;
  v27 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE899E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v3;
      v6 = v3[1];
      *(_QWORD *)(v4 - 184) = *v3;
      *(_QWORD *)(v4 - 144) = v5;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      v10 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v10 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v4 - 184), v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v2, AssociatedConformanceWitness, *(_QWORD *)(v4 - 168), v10);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v19 = *v3;
      v18 = v3[1];
      *(_QWORD *)(v4 - 184) = v18;
      *(_QWORD *)(v4 - 144) = v19;
      *(_QWORD *)(v4 - 136) = v18;
      v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v21 = *(_QWORD *)(v4 - 128);
      v22 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v21;
      *(_QWORD *)(v4 - 136) = v22;
      v23 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v23 + 8);
      sub_1BDDB6CA4(v19, *(_QWORD *)(v4 - 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v1, v20, *(_QWORD *)(v4 - 168), v23);
      sub_1BDDB796C(v21, v22);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v24 = *v3;
      v25 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v25;
      v26 = *(_QWORD *)(v4 - 232);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v24, v25);
      v29 = v4 - 144;
      goto LABEL_8;
    case 3:
      v30 = *v3;
      v31 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v31;
      v26 = *(_QWORD *)(v4 - 216);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v30, v31);
      v29 = v4 - 144;
      goto LABEL_8;
    case 4:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v33;
      v26 = *(_QWORD *)(v4 - 200);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v32, v33);
      v29 = v4 - 144;
LABEL_8:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v29, v26, v27, *(_QWORD *)(v4 - 168), v28);
      break;
    default:
      v11 = *v3;
      v12 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v12;
      v13 = *(_QWORD *)(v4 - 184);
      v14 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v17 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 200) = *(_QWORD *)(v17 + 8);
      sub_1BDDB6CA4(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 200))(v4 - 144, v13, v14, *(_QWORD *)(v4 - 168), v17);
      break;
  }
  sub_1BDDB796C(v15, v16);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDE89DA4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  _QWORD v10[2];
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _UNKNOWN **v22;
  uint64_t v23;

  v18 = a1;
  v19 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)v10 - v2;
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v15);
  v14 = (char *)v10 - v3;
  v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v13);
  v12 = (char *)v10 - v4;
  v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v11);
  v10[1] = (char *)v10 - v5;
  v6 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v6);
  v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v7);
  v8 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = v8;
  v21 = AssociatedConformanceWitness;
  v22 = &protocol witness table for Int;
  v23 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8A004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  CRExtensible.rawValue.getter(a1, v4 - 88);
  switch(*(_QWORD *)(v4 - 88))
  {
    case 0:
      v5 = *v3;
      v6 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v8 = *(_QWORD *)(v4 - 120);
      v9 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v8;
      *(_QWORD *)(v4 - 128) = v9;
      sub_1BDDB6CA4(v5, v6);
      v11 = type metadata accessor for Ref(0, v1, AssociatedConformanceWitness, v10);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v11);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v20 = *v3;
      v21 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v21;
      v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v23 = *(_QWORD *)(v4 - 120);
      v24 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v23;
      *(_QWORD *)(v4 - 128) = v24;
      sub_1BDDB6CA4(v20, v21);
      v26 = type metadata accessor for Ref(0, v2, v22, v25);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v26);
      sub_1BDDB796C(v23, v24);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v27 = *v3;
      v28 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v28;
      v29 = *(_QWORD *)(v4 - 208);
      v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v16 = *(_QWORD *)(v4 - 120);
      v17 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 128) = v17;
      sub_1BDDB6CA4(v27, v28);
      v19 = type metadata accessor for Ref(0, v29, v30, v31);
      goto LABEL_8;
    case 3:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v33;
      v34 = *(_QWORD *)(v4 - 192);
      v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v16 = *(_QWORD *)(v4 - 120);
      v17 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 128) = v17;
      sub_1BDDB6CA4(v32, v33);
      v19 = type metadata accessor for Ref(0, v34, v35, v36);
      goto LABEL_8;
    case 4:
      v37 = *v3;
      v38 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v38;
      v39 = *(_QWORD *)(v4 - 176);
      v40 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v16 = *(_QWORD *)(v4 - 120);
      v17 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 128) = v17;
      sub_1BDDB6CA4(v37, v38);
      v19 = type metadata accessor for Ref(0, v39, v40, v41);
      goto LABEL_8;
    default:
      v12 = *v3;
      v13 = v3[1];
      *(_QWORD *)(v4 - 136) = *v3;
      *(_QWORD *)(v4 - 128) = v13;
      v14 = *(_QWORD *)(v4 - 160);
      v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 136), (__n128 *)(v4 - 120));
      v16 = *(_QWORD *)(v4 - 120);
      v17 = *(_QWORD *)(v4 - 112);
      *(_QWORD *)(v4 - 136) = v16;
      *(_QWORD *)(v4 - 128) = v17;
      sub_1BDDB6CA4(v12, v13);
      v19 = type metadata accessor for Ref(0, v14, v15, v18);
LABEL_8:
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 152), v19);
      sub_1BDDB796C(v16, v17);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDE8A3F8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  _QWORD v15[5];
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;

  v29 = a2;
  v30 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v23 = (char *)v15 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v4 - 8);
  v22 = v4;
  MEMORY[0x1E0C80A78](v4);
  v20 = (char *)v15 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v6 - 8);
  v19 = v6;
  MEMORY[0x1E0C80A78](v6);
  v17 = (char *)v15 - v7;
  v16 = swift_getAssociatedTypeWitness();
  v15[4] = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v15[3] = (char *)v15 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v15[2] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v10 = swift_getAssociatedTypeWitness();
  v15[1] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v11 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  MEMORY[0x1E0C80A78](v11);
  v26 = (char *)v15 - v12;
  v13 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v31 = v13;
  v32 = AssociatedConformanceWitness;
  v33 = &protocol witness table for Int;
  v34 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8A6C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v5;
      v8 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v10 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v12 = *(_QWORD *)(v6 - 176);
      v13 = *(_QWORD *)(v6 - 152);
      v14 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v12 + 16))(*(_QWORD *)(v6 - 184), v13, v14, v10);
      sub_1BDDB6CA4(v7, v8);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v11;
      sub_1BDE76A9C(v3, v6 - 144, v2, AssociatedConformanceWitness);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 296) + 8))(v3, v2);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    case 1:
      v28 = *v5;
      v29 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v29;
      v30 = swift_getAssociatedConformanceWitness();
      v31 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v32 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v33 = *(_QWORD *)(v6 - 176);
      v34 = *(_QWORD *)(v6 - 152);
      v35 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v33 + 16))(*(_QWORD *)(v6 - 184), v34, v35, v31);
      sub_1BDDB6CA4(v28, v29);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v32;
      sub_1BDE76A9C(v4, v6 - 144, v1, v30);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 288) + 8))(v4, v1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    case 2:
      v36 = *v5;
      v37 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v37;
      v18 = *(_QWORD *)(v6 - 264);
      v38 = swift_getAssociatedConformanceWitness();
      v39 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v40 = *(_QWORD *)(v6 - 128);
      v41 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v39);
      sub_1BDDB6CA4(v36, v37);
      v26 = *(_QWORD *)(v6 - 280);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v40;
      *(_QWORD *)(v6 - 136) = v41;
      sub_1BDE76A9C(v26, v6 - 144, v18, v38);
      v27 = *(_QWORD *)(v6 - 272);
      goto LABEL_8;
    case 3:
      v42 = *v5;
      v43 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v43;
      v18 = *(_QWORD *)(v6 - 240);
      v44 = swift_getAssociatedConformanceWitness();
      v45 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v46 = *(_QWORD *)(v6 - 128);
      v47 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v45);
      sub_1BDDB6CA4(v42, v43);
      v26 = *(_QWORD *)(v6 - 256);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v46;
      *(_QWORD *)(v6 - 136) = v47;
      sub_1BDE76A9C(v26, v6 - 144, v18, v44);
      v27 = *(_QWORD *)(v6 - 248);
      goto LABEL_8;
    case 4:
      v48 = *v5;
      v49 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v49;
      v18 = *(_QWORD *)(v6 - 216);
      v50 = swift_getAssociatedConformanceWitness();
      v51 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v52 = *(_QWORD *)(v6 - 128);
      v53 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v51);
      sub_1BDDB6CA4(v48, v49);
      v26 = *(_QWORD *)(v6 - 232);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v52;
      *(_QWORD *)(v6 - 136) = v53;
      sub_1BDE76A9C(v26, v6 - 144, v18, v50);
      v27 = *(_QWORD *)(v6 - 224);
      goto LABEL_8;
    default:
      v16 = *v5;
      v17 = v5[1];
      *(_QWORD *)(v6 - 144) = *v5;
      *(_QWORD *)(v6 - 136) = v17;
      v18 = *(_QWORD *)(v6 - 192);
      v19 = swift_getAssociatedConformanceWitness();
      v20 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v21 = *(_QWORD *)(v6 - 128);
      v22 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v20);
      sub_1BDDB6CA4(v16, v17);
      v26 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v21;
      *(_QWORD *)(v6 - 136) = v22;
      sub_1BDE76A9C(v26, v6 - 144, v18, v19);
      v27 = *(_QWORD *)(v6 - 200);
LABEL_8:
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v18);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  }
}

void SharedTagged_5.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE89DA4);
}

uint64_t sub_1BDE8ABD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_5(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE8A3F8);
  return swift_release();
}

uint64_t SharedTagged_5.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE8A3F8);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_5.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_5.subscript.getter(a2, a3);
}

void (*sub_1BDE8AD54())(uint64_t **a1, char a2)
{
  return sub_1BDE8AD74;
}

void sub_1BDE8AD74(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t)sub_1BDE8A3F8, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_5.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE89DA4);
}

void SharedTagged_5.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8AE38(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_5.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_5.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_5.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_5);
}

void SharedTagged_5.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_5.hash(into:));
}

void sub_1BDE8B0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_5.hash(into:));
}

uint64_t sub_1BDE8B0D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_5.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_5.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE8B0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_5.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_5.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEBAEF8(a1, a2, a3, (char *)type metadata accessor for SharedTagged_5, 0, a4);
}

uint64_t sub_1BDE8B138(uint64_t a1, uint64_t a2)
{
  return SharedTagged_5.encode(to:)(a1, a2);
}

uint64_t SharedTagged_5.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.Enum, (uint64_t)&associated conformance descriptor for Tagged_5.Tagged_5.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_6.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_6.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_6.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_6.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_6.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_6.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_6.init(_:id:));
}

void SharedTagged_6.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_6, a4);
}

void SharedTagged_6.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_6);
}

void SharedTagged_6.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8B2D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_6(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8B524(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_6(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_6.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8B78C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_6(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8B9E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_6(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8BC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_6(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE8BE9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_6(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8C0F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_6(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8C344(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_6(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE8C5B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_6(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8C808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_6(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8CA58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_6(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE8CCC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_6(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8CF1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_6(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8D16C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_6(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE8D3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_6(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE8D630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_6(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE8D880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_6(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE8DAEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_6(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_6.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_6(0, a2, a3, a4);
  type metadata accessor for SharedTagged_6(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8DD34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_6.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8DDF4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_6.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8DF20(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_6.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8E050(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_6.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8E180(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_6.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8E2B0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_6.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8E3E0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_6.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8E510(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 6)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_6.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8E648(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_6.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;

  v24 = a2;
  v25 = a3;
  v23 = a1;
  v26 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v21 = (char *)&v13 - v4;
  v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v20);
  v19 = (char *)&v13 - v5;
  v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v18);
  v17 = (char *)&v13 - v6;
  v16 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v16);
  v15 = (char *)&v13 - v7;
  v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v14);
  v13 = (char *)&v13 - v8;
  v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v9);
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v10);
  v11 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v27 = v11;
  v28 = AssociatedConformanceWitness;
  v29 = &protocol witness table for Int;
  v30 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8EAB0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v6 = *v1;
      v5 = v1[1];
      *(_QWORD *)(v4 - 184) = v5;
      *(_QWORD *)(v4 - 144) = v6;
      *(_QWORD *)(v4 - 136) = v5;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      v10 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v10 + 8);
      sub_1BDDB6CA4(v6, *(_QWORD *)(v4 - 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v3, AssociatedConformanceWitness, *(_QWORD *)(v4 - 168), v10);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v19 = *v1;
      v18 = v1[1];
      *(_QWORD *)(v4 - 184) = v18;
      *(_QWORD *)(v4 - 144) = v19;
      *(_QWORD *)(v4 - 136) = v18;
      v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v21 = *(_QWORD *)(v4 - 128);
      v22 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v21;
      *(_QWORD *)(v4 - 136) = v22;
      v23 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v23 + 8);
      sub_1BDDB6CA4(v19, *(_QWORD *)(v4 - 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v2, v20, *(_QWORD *)(v4 - 168), v23);
      sub_1BDDB796C(v21, v22);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v25 = *v1;
      v24 = v1[1];
      *(_QWORD *)(v4 - 144) = v25;
      *(_QWORD *)(v4 - 136) = v24;
      v26 = *(_QWORD *)(v4 - 248);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v25, v24);
      v29 = v4 - 144;
      goto LABEL_9;
    case 3:
      v31 = *v1;
      v30 = v1[1];
      *(_QWORD *)(v4 - 144) = v31;
      *(_QWORD *)(v4 - 136) = v30;
      v26 = *(_QWORD *)(v4 - 232);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v31, v30);
      v29 = v4 - 144;
      goto LABEL_9;
    case 4:
      v33 = *v1;
      v32 = v1[1];
      *(_QWORD *)(v4 - 144) = v33;
      *(_QWORD *)(v4 - 136) = v32;
      v26 = *(_QWORD *)(v4 - 216);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v33, v32);
      v29 = v4 - 144;
      goto LABEL_9;
    case 5:
      v35 = *v1;
      v34 = v1[1];
      *(_QWORD *)(v4 - 144) = v35;
      *(_QWORD *)(v4 - 136) = v34;
      v26 = *(_QWORD *)(v4 - 200);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v35, v34);
      v29 = v4 - 144;
LABEL_9:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v29, v26, v27, *(_QWORD *)(v4 - 168), v28);
      break;
    default:
      v12 = *v1;
      v11 = v1[1];
      *(_QWORD *)(v4 - 144) = v12;
      *(_QWORD *)(v4 - 136) = v11;
      v13 = *(_QWORD *)(v4 - 184);
      v14 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v17 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 200) = *(_QWORD *)(v17 + 8);
      sub_1BDDB6CA4(v12, v11);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 200))(v4 - 144, v13, v14, *(_QWORD *)(v4 - 168), v17);
      break;
  }
  sub_1BDDB796C(v15, v16);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDE8EED4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _UNKNOWN **v25;
  uint64_t v26;

  v21 = a1;
  v22 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v11 - v2;
  v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v18);
  v17 = (char *)&v11 - v3;
  v16 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v16);
  v15 = (char *)&v11 - v4;
  v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v14);
  v13 = (char *)&v11 - v5;
  v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v12);
  v11 = (char *)&v11 - v6;
  v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v7);
  v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v8);
  v9 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v23 = v9;
  v24 = AssociatedConformanceWitness;
  v25 = &protocol witness table for Int;
  v26 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8F180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v3;
      v6 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      sub_1BDDB6CA4(v5, v6);
      v11 = type metadata accessor for Ref(0, v2, AssociatedConformanceWitness, v10);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v11);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v20 = *v3;
      v21 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v21;
      v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v23 = *(_QWORD *)(v4 - 128);
      v24 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v23;
      *(_QWORD *)(v4 - 136) = v24;
      sub_1BDDB6CA4(v20, v21);
      v26 = type metadata accessor for Ref(0, v1, v22, v25);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v26);
      sub_1BDDB796C(v23, v24);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v27 = *v3;
      v28 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v28;
      v29 = *(_QWORD *)(v4 - 232);
      v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v27, v28);
      v19 = type metadata accessor for Ref(0, v29, v30, v31);
      goto LABEL_9;
    case 3:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v33;
      v34 = *(_QWORD *)(v4 - 216);
      v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v32, v33);
      v19 = type metadata accessor for Ref(0, v34, v35, v36);
      goto LABEL_9;
    case 4:
      v37 = *v3;
      v38 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v38;
      v39 = *(_QWORD *)(v4 - 200);
      v40 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v37, v38);
      v19 = type metadata accessor for Ref(0, v39, v40, v41);
      goto LABEL_9;
    case 5:
      v42 = *v3;
      v43 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v43;
      v44 = *(_QWORD *)(v4 - 184);
      v45 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v42, v43);
      v19 = type metadata accessor for Ref(0, v44, v45, v46);
      goto LABEL_9;
    default:
      v12 = *v3;
      v13 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v13;
      v14 = *(_QWORD *)(v4 - 168);
      v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v12, v13);
      v19 = type metadata accessor for Ref(0, v14, v15, v18);
LABEL_9:
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v19);
      sub_1BDDB796C(v16, v17);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDE8F5E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  _QWORD v16[4];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _UNKNOWN **v37;
  uint64_t v38;

  v33 = a2;
  v34 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v27 = (char *)v16 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  MEMORY[0x1E0C80A78](v4);
  v24 = (char *)v16 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  MEMORY[0x1E0C80A78](v6);
  v21 = (char *)v16 - v7;
  v20 = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v18 = (char *)v16 - v8;
  v17 = swift_getAssociatedTypeWitness();
  v16[3] = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v16[2] = (char *)v16 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v16[1] = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v11 = swift_getAssociatedTypeWitness();
  v16[0] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v12 = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  MEMORY[0x1E0C80A78](v12);
  v30 = (char *)v16 - v13;
  v14 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v35 = v14;
  v36 = AssociatedConformanceWitness;
  v37 = &protocol witness table for Int;
  v38 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE8F910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v4;
      v8 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v10 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v12 = *(_QWORD *)(v6 - 176);
      v13 = *(_QWORD *)(v6 - 152);
      v14 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v12 + 16))(*(_QWORD *)(v6 - 184), v13, v14, v10);
      sub_1BDDB6CA4(v7, v8);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v11;
      sub_1BDE76A9C(v5, v6 - 144, v1, AssociatedConformanceWitness);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 8))(v5, v1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    case 1:
      v28 = *v4;
      v29 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v29;
      v30 = swift_getAssociatedConformanceWitness();
      v31 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v32 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v33 = *(_QWORD *)(v6 - 176);
      v34 = *(_QWORD *)(v6 - 152);
      v35 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v33 + 16))(*(_QWORD *)(v6 - 184), v34, v35, v31);
      sub_1BDDB6CA4(v28, v29);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v32;
      sub_1BDE76A9C(v3, v6 - 144, v2, v30);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 312) + 8))(v3, v2);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    case 2:
      v36 = *v4;
      v37 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v37;
      v18 = *(_QWORD *)(v6 - 288);
      v38 = swift_getAssociatedConformanceWitness();
      v39 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v40 = *(_QWORD *)(v6 - 128);
      v41 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v39);
      sub_1BDDB6CA4(v36, v37);
      v26 = *(_QWORD *)(v6 - 304);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v40;
      *(_QWORD *)(v6 - 136) = v41;
      sub_1BDE76A9C(v26, v6 - 144, v18, v38);
      v27 = *(_QWORD *)(v6 - 296);
      goto LABEL_9;
    case 3:
      v42 = *v4;
      v43 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v43;
      v18 = *(_QWORD *)(v6 - 264);
      v44 = swift_getAssociatedConformanceWitness();
      v45 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v46 = *(_QWORD *)(v6 - 128);
      v47 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v45);
      sub_1BDDB6CA4(v42, v43);
      v26 = *(_QWORD *)(v6 - 280);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v46;
      *(_QWORD *)(v6 - 136) = v47;
      sub_1BDE76A9C(v26, v6 - 144, v18, v44);
      v27 = *(_QWORD *)(v6 - 272);
      goto LABEL_9;
    case 4:
      v48 = *v4;
      v49 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v49;
      v18 = *(_QWORD *)(v6 - 240);
      v50 = swift_getAssociatedConformanceWitness();
      v51 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v52 = *(_QWORD *)(v6 - 128);
      v53 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v51);
      sub_1BDDB6CA4(v48, v49);
      v26 = *(_QWORD *)(v6 - 256);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v52;
      *(_QWORD *)(v6 - 136) = v53;
      sub_1BDE76A9C(v26, v6 - 144, v18, v50);
      v27 = *(_QWORD *)(v6 - 248);
      goto LABEL_9;
    case 5:
      v54 = *v4;
      v55 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v55;
      v18 = *(_QWORD *)(v6 - 216);
      v56 = swift_getAssociatedConformanceWitness();
      v57 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v58 = *(_QWORD *)(v6 - 128);
      v59 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v57);
      sub_1BDDB6CA4(v54, v55);
      v26 = *(_QWORD *)(v6 - 232);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v58;
      *(_QWORD *)(v6 - 136) = v59;
      sub_1BDE76A9C(v26, v6 - 144, v18, v56);
      v27 = *(_QWORD *)(v6 - 224);
      goto LABEL_9;
    default:
      v16 = *v4;
      v17 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v17;
      v18 = *(_QWORD *)(v6 - 192);
      v19 = swift_getAssociatedConformanceWitness();
      v20 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v21 = *(_QWORD *)(v6 - 128);
      v22 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v20);
      sub_1BDDB6CA4(v16, v17);
      v26 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v21;
      *(_QWORD *)(v6 - 136) = v22;
      sub_1BDE76A9C(v26, v6 - 144, v18, v19);
      v27 = *(_QWORD *)(v6 - 200);
LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v18);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  }
}

void SharedTagged_6.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE8EED4);
}

uint64_t sub_1BDE8FEE0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_6(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE8F5E8);
  return swift_release();
}

uint64_t SharedTagged_6.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE8F5E8);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_6.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_6.subscript.getter(a2, a3);
}

void (*sub_1BDE90060())(uint64_t **a1, char a2)
{
  return sub_1BDE90080;
}

void sub_1BDE90080(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t)sub_1BDE8F5E8, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_6.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE8EED4);
}

void SharedTagged_6.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE90144(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_6.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_6.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_6.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_6);
}

void SharedTagged_6.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_6.hash(into:));
}

void sub_1BDE90414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_6.hash(into:));
}

uint64_t sub_1BDE90420(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_6.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_6.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE90448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_6.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_6.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEBF11C(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_6, 0, a4);
}

uint64_t sub_1BDE90484(uint64_t a1, uint64_t a2)
{
  return SharedTagged_6.encode(to:)(a1, a2);
}

uint64_t SharedTagged_6.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.Enum, (uint64_t)&associated conformance descriptor for Tagged_6.Tagged_6.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_7.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_7.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_7.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_7.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_7.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_7.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_7.init(_:id:));
}

void SharedTagged_7.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_7, a4);
}

void SharedTagged_7.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_7);
}

void SharedTagged_7.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE90624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_7(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE90870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_7(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_7.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE90AD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_7(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE90D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_7(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE90F7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_7(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE911E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_7(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE91440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_7(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE91690(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_7(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE918FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_7(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE91B54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_7(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE91DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_7(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE92010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_7(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE92268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_7(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE924B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_7(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE92724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_7(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9297C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_7(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE92BCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_7(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE92E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_7(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE93090(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_7(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE932E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_7(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9354C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_7(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_7.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_7(0, a2, a3, a4);
  type metadata accessor for SharedTagged_7(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_7.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93854(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_7.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93980(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_7.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93AB0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_7.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93BE0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_7.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93D10(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_7.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93E40(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_7.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE93F70(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_7.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE940A0(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 7)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_7.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE941D8(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_7.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;

  v27 = a2;
  v28 = a3;
  v26 = a1;
  v29 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v24 = (char *)&v14 - v4;
  v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v23);
  v22 = (char *)&v14 - v5;
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v21);
  v20 = (char *)&v14 - v6;
  v19 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v19);
  v18 = (char *)&v14 - v7;
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17);
  v16 = (char *)&v14 - v8;
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v15);
  v14 = (char *)&v14 - v9;
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v10);
  v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v11);
  v12 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v30 = v12;
  v31 = AssociatedConformanceWitness;
  v32 = &protocol witness table for Int;
  v33 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE946BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v3;
      v6 = v3[1];
      *(_QWORD *)(v4 - 184) = *v3;
      *(_QWORD *)(v4 - 144) = v5;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      v10 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v10 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v4 - 184), v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v1, AssociatedConformanceWitness, *(_QWORD *)(v4 - 168), v10);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v19 = *v3;
      v18 = v3[1];
      *(_QWORD *)(v4 - 184) = v18;
      *(_QWORD *)(v4 - 144) = v19;
      *(_QWORD *)(v4 - 136) = v18;
      v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v21 = *(_QWORD *)(v4 - 128);
      v22 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v21;
      *(_QWORD *)(v4 - 136) = v22;
      v23 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v23 + 8);
      sub_1BDDB6CA4(v19, *(_QWORD *)(v4 - 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v2, v20, *(_QWORD *)(v4 - 168), v23);
      sub_1BDDB796C(v21, v22);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v24 = *v3;
      v25 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v25;
      v26 = *(_QWORD *)(v4 - 264);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v24, v25);
      v29 = v4 - 144;
      goto LABEL_10;
    case 3:
      v30 = *v3;
      v31 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v31;
      v26 = *(_QWORD *)(v4 - 248);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v30, v31);
      v29 = v4 - 144;
      goto LABEL_10;
    case 4:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v33;
      v26 = *(_QWORD *)(v4 - 232);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v32, v33);
      v29 = v4 - 144;
      goto LABEL_10;
    case 5:
      v34 = *v3;
      v35 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v35;
      v26 = *(_QWORD *)(v4 - 216);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v34, v35);
      v29 = v4 - 144;
      goto LABEL_10;
    case 6:
      v36 = *v3;
      v37 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v37;
      v26 = *(_QWORD *)(v4 - 200);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v36, v37);
      v29 = v4 - 144;
LABEL_10:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v29, v26, v27, *(_QWORD *)(v4 - 168), v28);
      break;
    default:
      v11 = *v3;
      v12 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v12;
      v13 = *(_QWORD *)(v4 - 184);
      v14 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v17 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 200) = *(_QWORD *)(v17 + 8);
      sub_1BDDB6CA4(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 200))(v4 - 144, v13, v14, *(_QWORD *)(v4 - 168), v17);
      break;
  }
  sub_1BDDB796C(v15, v16);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDE94B50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t AssociatedTypeWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;

  v24 = a1;
  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22 = (char *)&v12 - v2;
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v21);
  v20 = (char *)&v12 - v3;
  v19 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v19);
  v18 = (char *)&v12 - v4;
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17);
  v16 = (char *)&v12 - v5;
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v15);
  v14 = (char *)&v12 - v6;
  v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v13);
  v12 = (char *)&v12 - v7;
  v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v8);
  v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v9);
  v10 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = v10;
  v27 = AssociatedConformanceWitness;
  v28 = &protocol witness table for Int;
  v29 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE94E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v3;
      v6 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      sub_1BDDB6CA4(v5, v6);
      v11 = type metadata accessor for Ref(0, v1, AssociatedConformanceWitness, v10);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v11);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v20 = *v3;
      v21 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v21;
      v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v23 = *(_QWORD *)(v4 - 128);
      v24 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v23;
      *(_QWORD *)(v4 - 136) = v24;
      sub_1BDDB6CA4(v20, v21);
      v26 = type metadata accessor for Ref(0, v2, v22, v25);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v26);
      sub_1BDDB796C(v23, v24);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v27 = *v3;
      v28 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v28;
      v29 = *(_QWORD *)(v4 - 248);
      v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v27, v28);
      v19 = type metadata accessor for Ref(0, v29, v30, v31);
      goto LABEL_10;
    case 3:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v33;
      v34 = *(_QWORD *)(v4 - 232);
      v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v32, v33);
      v19 = type metadata accessor for Ref(0, v34, v35, v36);
      goto LABEL_10;
    case 4:
      v37 = *v3;
      v38 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v38;
      v39 = *(_QWORD *)(v4 - 216);
      v40 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v37, v38);
      v19 = type metadata accessor for Ref(0, v39, v40, v41);
      goto LABEL_10;
    case 5:
      v42 = *v3;
      v43 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v43;
      v44 = *(_QWORD *)(v4 - 200);
      v45 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v42, v43);
      v19 = type metadata accessor for Ref(0, v44, v45, v46);
      goto LABEL_10;
    case 6:
      v47 = *v3;
      v48 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v48;
      v49 = *(_QWORD *)(v4 - 184);
      v50 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v47, v48);
      v19 = type metadata accessor for Ref(0, v49, v50, v51);
      goto LABEL_10;
    default:
      v12 = *v3;
      v13 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v13;
      v14 = *(_QWORD *)(v4 - 168);
      v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v12, v13);
      v19 = type metadata accessor for Ref(0, v14, v15, v18);
LABEL_10:
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v19);
      sub_1BDDB796C(v16, v17);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDE952F4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  _QWORD v17[5];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _UNKNOWN **v41;
  uint64_t v42;

  v37 = a2;
  v38 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)v17 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x1E0C80A78](v4);
  v28 = (char *)v17 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v6 - 8);
  v27 = v6;
  MEMORY[0x1E0C80A78](v6);
  v25 = (char *)v17 - v7;
  v24 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v22 = (char *)v17 - v8;
  v21 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v19 = (char *)v17 - v9;
  v18 = swift_getAssociatedTypeWitness();
  v17[4] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v17[3] = (char *)v17 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v17[2] = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v12 = swift_getAssociatedTypeWitness();
  v17[1] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v13 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  MEMORY[0x1E0C80A78](v13);
  v34 = (char *)v17 - v14;
  v15 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v39 = v15;
  v40 = AssociatedConformanceWitness;
  v41 = &protocol witness table for Int;
  v42 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE95678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v4;
      v8 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v10 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v12 = *(_QWORD *)(v6 - 176);
      v13 = *(_QWORD *)(v6 - 152);
      v14 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v12 + 16))(*(_QWORD *)(v6 - 184), v13, v14, v10);
      sub_1BDDB6CA4(v7, v8);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v11;
      sub_1BDE76A9C(v3, v6 - 144, v1, AssociatedConformanceWitness);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 344) + 8))(v3, v1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    case 1:
      v28 = *v4;
      v29 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v29;
      v30 = swift_getAssociatedConformanceWitness();
      v31 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v32 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v33 = *(_QWORD *)(v6 - 176);
      v34 = *(_QWORD *)(v6 - 152);
      v35 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v33 + 16))(*(_QWORD *)(v6 - 184), v34, v35, v31);
      sub_1BDDB6CA4(v28, v29);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v32;
      sub_1BDE76A9C(v5, v6 - 144, v2, v30);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 336) + 8))(v5, v2);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    case 2:
      v36 = *v4;
      v37 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v37;
      v18 = *(_QWORD *)(v6 - 312);
      v38 = swift_getAssociatedConformanceWitness();
      v39 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v40 = *(_QWORD *)(v6 - 128);
      v41 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v39);
      sub_1BDDB6CA4(v36, v37);
      v26 = *(_QWORD *)(v6 - 328);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v40;
      *(_QWORD *)(v6 - 136) = v41;
      sub_1BDE76A9C(v26, v6 - 144, v18, v38);
      v27 = *(_QWORD *)(v6 - 320);
      goto LABEL_10;
    case 3:
      v42 = *v4;
      v43 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v43;
      v18 = *(_QWORD *)(v6 - 288);
      v44 = swift_getAssociatedConformanceWitness();
      v45 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v46 = *(_QWORD *)(v6 - 128);
      v47 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v45);
      sub_1BDDB6CA4(v42, v43);
      v26 = *(_QWORD *)(v6 - 304);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v46;
      *(_QWORD *)(v6 - 136) = v47;
      sub_1BDE76A9C(v26, v6 - 144, v18, v44);
      v27 = *(_QWORD *)(v6 - 296);
      goto LABEL_10;
    case 4:
      v48 = *v4;
      v49 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v49;
      v18 = *(_QWORD *)(v6 - 264);
      v50 = swift_getAssociatedConformanceWitness();
      v51 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v52 = *(_QWORD *)(v6 - 128);
      v53 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v51);
      sub_1BDDB6CA4(v48, v49);
      v26 = *(_QWORD *)(v6 - 280);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v52;
      *(_QWORD *)(v6 - 136) = v53;
      sub_1BDE76A9C(v26, v6 - 144, v18, v50);
      v27 = *(_QWORD *)(v6 - 272);
      goto LABEL_10;
    case 5:
      v54 = *v4;
      v55 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v55;
      v18 = *(_QWORD *)(v6 - 240);
      v56 = swift_getAssociatedConformanceWitness();
      v57 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v58 = *(_QWORD *)(v6 - 128);
      v59 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v57);
      sub_1BDDB6CA4(v54, v55);
      v26 = *(_QWORD *)(v6 - 256);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v58;
      *(_QWORD *)(v6 - 136) = v59;
      sub_1BDE76A9C(v26, v6 - 144, v18, v56);
      v27 = *(_QWORD *)(v6 - 248);
      goto LABEL_10;
    case 6:
      v60 = *v4;
      v61 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v61;
      v18 = *(_QWORD *)(v6 - 216);
      v62 = swift_getAssociatedConformanceWitness();
      v63 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v64 = *(_QWORD *)(v6 - 128);
      v65 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v63);
      sub_1BDDB6CA4(v60, v61);
      v26 = *(_QWORD *)(v6 - 232);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v64;
      *(_QWORD *)(v6 - 136) = v65;
      sub_1BDE76A9C(v26, v6 - 144, v18, v62);
      v27 = *(_QWORD *)(v6 - 224);
      goto LABEL_10;
    default:
      v16 = *v4;
      v17 = v4[1];
      *(_QWORD *)(v6 - 144) = *v4;
      *(_QWORD *)(v6 - 136) = v17;
      v18 = *(_QWORD *)(v6 - 192);
      v19 = swift_getAssociatedConformanceWitness();
      v20 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v21 = *(_QWORD *)(v6 - 128);
      v22 = *(_QWORD *)(v6 - 120);
      v23 = *(_QWORD *)(v6 - 176);
      v24 = *(_QWORD *)(v6 - 152);
      v25 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v23 + 16))(*(_QWORD *)(v6 - 184), v24, v25, v20);
      sub_1BDDB6CA4(v16, v17);
      v26 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v21;
      *(_QWORD *)(v6 - 136) = v22;
      sub_1BDE76A9C(v26, v6 - 144, v18, v19);
      v27 = *(_QWORD *)(v6 - 200);
LABEL_10:
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v18);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  }
}

void SharedTagged_7.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE94B50);
}

uint64_t sub_1BDE95D08(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_7(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE952F4);
  return swift_release();
}

uint64_t SharedTagged_7.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE952F4);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_7.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_7.subscript.getter(a2, a3);
}

void (*sub_1BDE95E88())(uint64_t **a1, char a2)
{
  return sub_1BDE95EA8;
}

void sub_1BDE95EA8(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t)sub_1BDE952F4, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_7.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE94B50);
}

void SharedTagged_7.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE95F6C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_7.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_7.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_7.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_7);
}

void SharedTagged_7.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_7.hash(into:));
}

void sub_1BDE9627C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_7.hash(into:));
}

uint64_t sub_1BDE96288(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_7.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_7.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE962B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_7.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_7.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEC38F8(a1, a2, a3, (char *)type metadata accessor for SharedTagged_7, 0, a4);
}

uint64_t sub_1BDE962EC(uint64_t a1, uint64_t a2)
{
  return SharedTagged_7.encode(to:)(a1, a2);
}

uint64_t SharedTagged_7.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.Enum, (uint64_t)&associated conformance descriptor for Tagged_7.Tagged_7.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_8.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_8.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_8.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_8.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_8.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_8.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_8.init(_:id:));
}

void SharedTagged_8.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_8, a4);
}

void SharedTagged_8.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_8);
}

void SharedTagged_8.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9648C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE966D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_8.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE96940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE96B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE96DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE97050(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE972A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE974F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE97764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE979BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE97C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE97E78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE980D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE98320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9858C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE987E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE98A34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE98CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE98EF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE99148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE993B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9960C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_8(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9985C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_8(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE99AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_8(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_8.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_8(0, a2, a3, a4);
  type metadata accessor for SharedTagged_8(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE99D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_8.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE99DD0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_8.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE99EFC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_8.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A02C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_8.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A15C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_8.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A28C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_8.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A3BC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_8.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A4EC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_8.tagged8.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A61C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 7)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_8.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A74C(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 8)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_8.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9A884(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_8.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;

  v30 = a2;
  v31 = a3;
  v29 = a1;
  v32 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v27 = (char *)&v15 - v4;
  v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v26);
  v25 = (char *)&v15 - v5;
  v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v24);
  v23 = (char *)&v15 - v6;
  v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v22);
  v21 = (char *)&v15 - v7;
  v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v20);
  v19 = (char *)&v15 - v8;
  v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v18);
  v17 = (char *)&v15 - v9;
  v16 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v16);
  v15 = (char *)&v15 - v10;
  v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v11);
  v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v12);
  v13 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v33 = v13;
  v34 = AssociatedConformanceWitness;
  v35 = &protocol witness table for Int;
  v36 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9ADE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v6 = *v3;
      v5 = v3[1];
      *(_QWORD *)(v4 - 184) = v5;
      *(_QWORD *)(v4 - 144) = v6;
      *(_QWORD *)(v4 - 136) = v5;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      v10 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v10 + 8);
      sub_1BDDB6CA4(v6, *(_QWORD *)(v4 - 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v1, AssociatedConformanceWitness, *(_QWORD *)(v4 - 168), v10);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v18 = *v3;
      v19 = v3[1];
      *(_QWORD *)(v4 - 184) = *v3;
      *(_QWORD *)(v4 - 144) = v18;
      *(_QWORD *)(v4 - 136) = v19;
      v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v21 = *(_QWORD *)(v4 - 128);
      v22 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v21;
      *(_QWORD *)(v4 - 136) = v22;
      v23 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v23 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v4 - 184), v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v2, v20, *(_QWORD *)(v4 - 168), v23);
      sub_1BDDB796C(v21, v22);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v24 = *v3;
      v25 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v25;
      v26 = *(_QWORD *)(v4 - 280);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v24, v25);
      v29 = v4 - 144;
      goto LABEL_12;
    case 3:
      v30 = *v3;
      v31 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v31;
      v26 = *(_QWORD *)(v4 - 264);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v30, v31);
      v29 = v4 - 144;
      goto LABEL_12;
    case 4:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v33;
      v26 = *(_QWORD *)(v4 - 248);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v32, v33);
      v29 = v4 - 144;
      goto LABEL_12;
    case 5:
      v34 = *v3;
      v35 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v35;
      v26 = *(_QWORD *)(v4 - 232);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v34, v35);
      v29 = v4 - 144;
      goto LABEL_12;
    case 6:
      v36 = *v3;
      v37 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v37;
      v26 = *(_QWORD *)(v4 - 216);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v36, v37);
      v29 = v4 - 144;
      goto LABEL_12;
    case 7:
      v38 = *v3;
      v39 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v39;
      v26 = *(_QWORD *)(v4 - 200);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v28 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v28 + 8);
      sub_1BDDB6CA4(v38, v39);
      v29 = v4 - 144;
LABEL_12:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v29, v26, v27, *(_QWORD *)(v4 - 168), v28);
      break;
    default:
      v11 = *v3;
      v12 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v12;
      v13 = *(_QWORD *)(v4 - 184);
      v14 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v17 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 200) = *(_QWORD *)(v17 + 8);
      sub_1BDDB6CA4(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 200))(v4 - 144, v13, v14, *(_QWORD *)(v4 - 168), v17);
      break;
  }
  sub_1BDDB796C(v15, v16);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDE9B2E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;

  v27 = a1;
  v28 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v25 = (char *)&v13 - v2;
  v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v24);
  v23 = (char *)&v13 - v3;
  v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v22);
  v21 = (char *)&v13 - v4;
  v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v20);
  v19 = (char *)&v13 - v5;
  v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v18);
  v17 = (char *)&v13 - v6;
  v16 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v16);
  v15 = (char *)&v13 - v7;
  v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v14);
  v13 = (char *)&v13 - v8;
  v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v9);
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v10);
  v11 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v29 = v11;
  v30 = AssociatedConformanceWitness;
  v31 = &protocol witness table for Int;
  v32 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9B630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v3;
      v6 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      sub_1BDDB6CA4(v5, v6);
      v11 = type metadata accessor for Ref(0, v1, AssociatedConformanceWitness, v10);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v11);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v20 = *v3;
      v21 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v21;
      v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v23 = *(_QWORD *)(v4 - 128);
      v24 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v23;
      *(_QWORD *)(v4 - 136) = v24;
      sub_1BDDB6CA4(v20, v21);
      v26 = type metadata accessor for Ref(0, v2, v22, v25);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v26);
      sub_1BDDB796C(v23, v24);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v27 = *v3;
      v28 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v28;
      v29 = *(_QWORD *)(v4 - 264);
      v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v27, v28);
      v19 = type metadata accessor for Ref(0, v29, v30, v31);
      goto LABEL_11;
    case 3:
      v32 = *v3;
      v33 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v33;
      v34 = *(_QWORD *)(v4 - 248);
      v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v32, v33);
      v19 = type metadata accessor for Ref(0, v34, v35, v36);
      goto LABEL_11;
    case 4:
      v37 = *v3;
      v38 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v38;
      v39 = *(_QWORD *)(v4 - 232);
      v40 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v37, v38);
      v19 = type metadata accessor for Ref(0, v39, v40, v41);
      goto LABEL_11;
    case 5:
      v42 = *v3;
      v43 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v43;
      v44 = *(_QWORD *)(v4 - 216);
      v45 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v42, v43);
      v19 = type metadata accessor for Ref(0, v44, v45, v46);
      goto LABEL_11;
    case 6:
      v47 = *v3;
      v48 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v48;
      v49 = *(_QWORD *)(v4 - 200);
      v50 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v47, v48);
      v19 = type metadata accessor for Ref(0, v49, v50, v51);
      goto LABEL_11;
    case 7:
      v52 = *v3;
      v53 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v53;
      v54 = *(_QWORD *)(v4 - 184);
      v55 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v52, v53);
      v19 = type metadata accessor for Ref(0, v54, v55, v56);
      goto LABEL_11;
    default:
      v12 = *v3;
      v13 = v3[1];
      *(_QWORD *)(v4 - 144) = *v3;
      *(_QWORD *)(v4 - 136) = v13;
      v14 = *(_QWORD *)(v4 - 168);
      v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v12, v13);
      v19 = type metadata accessor for Ref(0, v14, v15, v18);
LABEL_11:
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v19);
      sub_1BDDB796C(v16, v17);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDE9BBA0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  _QWORD v18[4];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _UNKNOWN **v45;
  uint64_t v46;

  v41 = a2;
  v42 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v35 = (char *)v18 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  MEMORY[0x1E0C80A78](v4);
  v32 = (char *)v18 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x1E0C80A78](v6);
  v29 = (char *)v18 - v7;
  v28 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v26 = (char *)v18 - v8;
  v25 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v23 = (char *)v18 - v9;
  v22 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v20 = (char *)v18 - v10;
  v19 = swift_getAssociatedTypeWitness();
  v18[3] = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v18[2] = (char *)v18 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v18[1] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v13 = swift_getAssociatedTypeWitness();
  v18[0] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v14 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  MEMORY[0x1E0C80A78](v14);
  v38 = (char *)v18 - v15;
  v16 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v43 = v16;
  v44 = AssociatedConformanceWitness;
  v45 = &protocol witness table for Int;
  v46 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9BF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v2;
      v8 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v10 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 128);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 120);
      v12 = *(_QWORD *)(v6 - 176);
      v13 = *(_QWORD *)(v6 - 152);
      v14 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v12 + 16))(*(_QWORD *)(v6 - 184), v13, v14, v10);
      sub_1BDDB6CA4(v7, v8);
      swift_dynamicCast();
      v15 = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 144) = v11;
      *(_QWORD *)(v6 - 136) = v15;
      sub_1BDE76A9C(v5, v6 - 144, v3, AssociatedConformanceWitness);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 368) + 8))(v5, v3);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    case 1:
      v29 = *v2;
      v30 = v2[1];
      *(_QWORD *)(v6 - 144) = v29;
      *(_QWORD *)(v6 - 136) = v30;
      v31 = swift_getAssociatedConformanceWitness();
      v32 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v33 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v34 = *(_QWORD *)(v6 - 176);
      v35 = *(_QWORD *)(v6 - 152);
      v36 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v34 + 16))(*(_QWORD *)(v6 - 184), v35, v36, v32);
      sub_1BDDB6CA4(v29, v30);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v33;
      sub_1BDE76A9C(v4, v6 - 144, v1, v31);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 360) + 8))(v4, v1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    case 2:
      v37 = *v2;
      v38 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v38;
      v19 = *(_QWORD *)(v6 - 336);
      v39 = swift_getAssociatedConformanceWitness();
      v40 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v41 = *(_QWORD *)(v6 - 128);
      v42 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v40);
      sub_1BDDB6CA4(v37, v38);
      v27 = *(_QWORD *)(v6 - 352);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v41;
      *(_QWORD *)(v6 - 136) = v42;
      sub_1BDE76A9C(v27, v6 - 144, v19, v39);
      v28 = *(_QWORD *)(v6 - 344);
      goto LABEL_11;
    case 3:
      v43 = *v2;
      v44 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v44;
      v19 = *(_QWORD *)(v6 - 312);
      v45 = swift_getAssociatedConformanceWitness();
      v46 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v47 = *(_QWORD *)(v6 - 128);
      v48 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v46);
      sub_1BDDB6CA4(v43, v44);
      v27 = *(_QWORD *)(v6 - 328);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v47;
      *(_QWORD *)(v6 - 136) = v48;
      sub_1BDE76A9C(v27, v6 - 144, v19, v45);
      v28 = *(_QWORD *)(v6 - 320);
      goto LABEL_11;
    case 4:
      v49 = *v2;
      v50 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v50;
      v19 = *(_QWORD *)(v6 - 288);
      v51 = swift_getAssociatedConformanceWitness();
      v52 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v53 = *(_QWORD *)(v6 - 128);
      v54 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v52);
      sub_1BDDB6CA4(v49, v50);
      v27 = *(_QWORD *)(v6 - 304);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v53;
      *(_QWORD *)(v6 - 136) = v54;
      sub_1BDE76A9C(v27, v6 - 144, v19, v51);
      v28 = *(_QWORD *)(v6 - 296);
      goto LABEL_11;
    case 5:
      v55 = *v2;
      v56 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v56;
      v19 = *(_QWORD *)(v6 - 264);
      v57 = swift_getAssociatedConformanceWitness();
      v58 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v59 = *(_QWORD *)(v6 - 128);
      v60 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v58);
      sub_1BDDB6CA4(v55, v56);
      v27 = *(_QWORD *)(v6 - 280);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v59;
      *(_QWORD *)(v6 - 136) = v60;
      sub_1BDE76A9C(v27, v6 - 144, v19, v57);
      v28 = *(_QWORD *)(v6 - 272);
      goto LABEL_11;
    case 6:
      v61 = *v2;
      v62 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v62;
      v19 = *(_QWORD *)(v6 - 240);
      v63 = swift_getAssociatedConformanceWitness();
      v64 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v65 = *(_QWORD *)(v6 - 128);
      v66 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v64);
      sub_1BDDB6CA4(v61, v62);
      v27 = *(_QWORD *)(v6 - 256);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v65;
      *(_QWORD *)(v6 - 136) = v66;
      sub_1BDE76A9C(v27, v6 - 144, v19, v63);
      v28 = *(_QWORD *)(v6 - 248);
      goto LABEL_11;
    case 7:
      v67 = *v2;
      v68 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v68;
      v19 = *(_QWORD *)(v6 - 216);
      v69 = swift_getAssociatedConformanceWitness();
      v70 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v71 = *(_QWORD *)(v6 - 128);
      v72 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v70);
      sub_1BDDB6CA4(v67, v68);
      v27 = *(_QWORD *)(v6 - 232);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v71;
      *(_QWORD *)(v6 - 136) = v72;
      sub_1BDE76A9C(v27, v6 - 144, v19, v69);
      v28 = *(_QWORD *)(v6 - 224);
      goto LABEL_11;
    default:
      v17 = *v2;
      v18 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v18;
      v19 = *(_QWORD *)(v6 - 192);
      v20 = swift_getAssociatedConformanceWitness();
      v21 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v22 = *(_QWORD *)(v6 - 128);
      v23 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v21);
      sub_1BDDB6CA4(v17, v18);
      v27 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v22;
      *(_QWORD *)(v6 - 136) = v23;
      sub_1BDE76A9C(v27, v6 - 144, v19, v20);
      v28 = *(_QWORD *)(v6 - 200);
LABEL_11:
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v19);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
  }
}

void SharedTagged_8.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDE9B2E4);
}

uint64_t sub_1BDE9C6D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_8(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE9BBA0);
  return swift_release();
}

uint64_t SharedTagged_8.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDE9BBA0);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_8.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_8.subscript.getter(a2, a3);
}

void (*sub_1BDE9C850())(uint64_t **a1, char a2)
{
  return sub_1BDE9C870;
}

void sub_1BDE9C870(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t)sub_1BDE9BBA0, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_8.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDE9B2E4);
}

void SharedTagged_8.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9C934(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_8.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_8.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_8.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_8);
}

void SharedTagged_8.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_8.hash(into:));
}

void sub_1BDE9CC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_8.hash(into:));
}

uint64_t sub_1BDE9CC90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_8.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_8.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDE9CCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_8.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_8.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEC87CC(a1, a2, a3, (char *)type metadata accessor for SharedTagged_8, 0, a4);
}

uint64_t sub_1BDE9CCF4(uint64_t a1, uint64_t a2)
{
  return SharedTagged_8.encode(to:)(a1, a2);
}

uint64_t SharedTagged_8.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.Enum, (uint64_t)&associated conformance descriptor for Tagged_8.Tagged_8.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_9.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_9.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_9.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_9.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_9.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_9.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_9.init(_:id:));
}

void SharedTagged_9.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_9, a4);
}

void SharedTagged_9.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_9);
}

void SharedTagged_9.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9CE94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9D0E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_9.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDE9D348(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9D59C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9D7EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9DA58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9DCB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9DF00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9E16C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9E3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9E614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9E880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9EAD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9ED28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9EF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9F1EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9F43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9F6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDE9F900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDE9FB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDE9FDBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA0014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA0264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA04D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA0728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 8;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_9(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA0978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 8;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_9(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA0BE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 8;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_9(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_9.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_9(0, a2, a3, a4);
  type metadata accessor for SharedTagged_9(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA0E2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_9.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA0EEC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_9.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA1018(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_9.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA1148(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_9.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA1278(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_9.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA13A8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_9.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA14D8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_9.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA1608(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_9.tagged8.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA1738(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 7)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_9.tagged9.getter()
{
  sub_1BDECA284();
}

void SharedTagged_9.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA1874(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 9)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_9.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA19AC(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_9.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _UNKNOWN **v38;
  uint64_t v39;

  v33 = a2;
  v34 = a3;
  v32 = a1;
  v35 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v30 = (char *)&v16 - v4;
  v29 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v29);
  v28 = (char *)&v16 - v5;
  v27 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v27);
  v26 = (char *)&v16 - v6;
  v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v25);
  v24 = (char *)&v16 - v7;
  v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v23);
  v22 = (char *)&v16 - v8;
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v21);
  v20 = (char *)&v16 - v9;
  v19 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v19);
  v18 = (char *)&v16 - v10;
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17);
  v16 = (char *)&v16 - v11;
  v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v12);
  v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v13);
  v14 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v36 = v14;
  v37 = AssociatedConformanceWitness;
  v38 = &protocol witness table for Int;
  v39 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA1F88(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v2;
      v6 = v2[1];
      *(_QWORD *)(v4 - 184) = *v2;
      *(_QWORD *)(v4 - 144) = v5;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      v10 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v10 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v4 - 184), v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v3, AssociatedConformanceWitness, *(_QWORD *)(v4 - 168), v10);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v19 = *v2;
      v18 = v2[1];
      *(_QWORD *)(v4 - 184) = v18;
      *(_QWORD *)(v4 - 144) = v19;
      *(_QWORD *)(v4 - 136) = v18;
      v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v21 = *(_QWORD *)(v4 - 128);
      v22 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v21;
      *(_QWORD *)(v4 - 136) = v22;
      v23 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v23 + 8);
      sub_1BDDB6CA4(v19, *(_QWORD *)(v4 - 184));
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v1, v20, *(_QWORD *)(v4 - 168), v23);
      sub_1BDDB796C(v21, v22);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v24 = *v2;
      v25 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v25;
      v26 = *(_QWORD *)(v4 - 296);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v28 = *(_QWORD *)(v4 - 128);
      v29 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v28;
      *(_QWORD *)(v4 - 136) = v29;
      v30 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v30 + 8);
      sub_1BDDB6CA4(v24, v25);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v4 - 144, v26, v27, *(_QWORD *)(v4 - 168), v30);
      sub_1BDDB796C(v28, v29);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 3:
      v31 = *v2;
      v32 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v32;
      v33 = *(_QWORD *)(v4 - 280);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v31, v32);
      v36 = v4 - 144;
      goto LABEL_13;
    case 4:
      v37 = *v2;
      v38 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v38;
      v33 = *(_QWORD *)(v4 - 264);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v37, v38);
      v36 = v4 - 144;
      goto LABEL_13;
    case 5:
      v39 = *v2;
      v40 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v40;
      v33 = *(_QWORD *)(v4 - 248);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v39, v40);
      v36 = v4 - 144;
      goto LABEL_13;
    case 6:
      v41 = *v2;
      v42 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v42;
      v33 = *(_QWORD *)(v4 - 232);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v41, v42);
      v36 = v4 - 144;
      goto LABEL_13;
    case 7:
      v43 = *v2;
      v44 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v44;
      v33 = *(_QWORD *)(v4 - 216);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v43, v44);
      v36 = v4 - 144;
      goto LABEL_13;
    case 8:
      v45 = *v2;
      v46 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v46;
      v33 = *(_QWORD *)(v4 - 200);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v45, v46);
      v36 = v4 - 144;
LABEL_13:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v36, v33, v34, *(_QWORD *)(v4 - 168), v35);
      break;
    default:
      v11 = *v2;
      v12 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v12;
      v13 = *(_QWORD *)(v4 - 184);
      v14 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v17 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 200) = *(_QWORD *)(v17 + 8);
      sub_1BDDB6CA4(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 200))(v4 - 144, v13, v14, *(_QWORD *)(v4 - 168), v17);
      break;
  }
  sub_1BDDB796C(v15, v16);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDEA2548(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;
  uint64_t v35;

  v30 = a1;
  v31 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v28 = (char *)&v14 - v2;
  v27 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v27);
  v26 = (char *)&v14 - v3;
  v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v25);
  v24 = (char *)&v14 - v4;
  v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v23);
  v22 = (char *)&v14 - v5;
  v21 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v21);
  v20 = (char *)&v14 - v6;
  v19 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v19);
  v18 = (char *)&v14 - v7;
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17);
  v16 = (char *)&v14 - v8;
  v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v15);
  v14 = (char *)&v14 - v9;
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v10);
  v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v11);
  v12 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v32 = v12;
  v33 = AssociatedConformanceWitness;
  v34 = &protocol witness table for Int;
  v35 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA28E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v2;
      v6 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      sub_1BDDB6CA4(v5, v6);
      v11 = type metadata accessor for Ref(0, v3, AssociatedConformanceWitness, v10);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v11);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v20 = *v2;
      v21 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v21;
      v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v23 = *(_QWORD *)(v4 - 128);
      v24 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v23;
      *(_QWORD *)(v4 - 136) = v24;
      sub_1BDDB6CA4(v20, v21);
      v26 = type metadata accessor for Ref(0, v1, v22, v25);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v26);
      sub_1BDDB796C(v23, v24);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v27 = *v2;
      v28 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v28;
      v29 = *(_QWORD *)(v4 - 280);
      v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v27, v28);
      v19 = type metadata accessor for Ref(0, v29, v30, v31);
      goto LABEL_12;
    case 3:
      v32 = *v2;
      v33 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v33;
      v34 = *(_QWORD *)(v4 - 264);
      v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v32, v33);
      v19 = type metadata accessor for Ref(0, v34, v35, v36);
      goto LABEL_12;
    case 4:
      v37 = *v2;
      v38 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v38;
      v39 = *(_QWORD *)(v4 - 248);
      v40 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v37, v38);
      v19 = type metadata accessor for Ref(0, v39, v40, v41);
      goto LABEL_12;
    case 5:
      v42 = *v2;
      v43 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v43;
      v44 = *(_QWORD *)(v4 - 232);
      v45 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v42, v43);
      v19 = type metadata accessor for Ref(0, v44, v45, v46);
      goto LABEL_12;
    case 6:
      v47 = *v2;
      v48 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v48;
      v49 = *(_QWORD *)(v4 - 216);
      v50 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v47, v48);
      v19 = type metadata accessor for Ref(0, v49, v50, v51);
      goto LABEL_12;
    case 7:
      v52 = *v2;
      v53 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v53;
      v54 = *(_QWORD *)(v4 - 200);
      v55 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v52, v53);
      v19 = type metadata accessor for Ref(0, v54, v55, v56);
      goto LABEL_12;
    case 8:
      v57 = *v2;
      v58 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v58;
      v59 = *(_QWORD *)(v4 - 184);
      v60 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v57, v58);
      v19 = type metadata accessor for Ref(0, v59, v60, v61);
      goto LABEL_12;
    default:
      v12 = *v2;
      v13 = v2[1];
      *(_QWORD *)(v4 - 144) = *v2;
      *(_QWORD *)(v4 - 136) = v13;
      v14 = *(_QWORD *)(v4 - 168);
      v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v12, v13);
      v19 = type metadata accessor for Ref(0, v14, v15, v18);
LABEL_12:
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v19);
      sub_1BDDB796C(v16, v17);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDEA2ED4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  _QWORD v19[5];
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  uint64_t v50;

  v45 = a2;
  v46 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v41 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v39 = (char *)v19 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x1E0C80A78](v4);
  v36 = (char *)v19 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  MEMORY[0x1E0C80A78](v6);
  v33 = (char *)v19 - v7;
  v32 = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v30 = (char *)v19 - v8;
  v29 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v27 = (char *)v19 - v9;
  v26 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v24 = (char *)v19 - v10;
  v23 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v21 = (char *)v19 - v11;
  v20 = swift_getAssociatedTypeWitness();
  v19[4] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v19[3] = (char *)v19 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v19[2] = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v14 = swift_getAssociatedTypeWitness();
  v19[1] = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v15 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v15 - 8);
  v44 = v15;
  MEMORY[0x1E0C80A78](v15);
  v42 = (char *)v19 - v16;
  v17 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v47 = v17;
  v48 = AssociatedConformanceWitness;
  v49 = &protocol witness table for Int;
  v50 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA3310(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v8 = *v1;
      v7 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v10 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 128);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 120);
      v12 = *(_QWORD *)(v6 - 176);
      v13 = *(_QWORD *)(v6 - 152);
      v14 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v12 + 16))(*(_QWORD *)(v6 - 184), v13, v14, v10);
      sub_1BDDB6CA4(v8, v7);
      swift_dynamicCast();
      v15 = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 144) = v11;
      *(_QWORD *)(v6 - 136) = v15;
      sub_1BDE76A9C(v4, v6 - 144, v2, AssociatedConformanceWitness);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 392) + 8))(v4, v2);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    case 1:
      v30 = v1;
      v31 = *v1;
      v32 = v30[1];
      *(_QWORD *)(v6 - 144) = v31;
      *(_QWORD *)(v6 - 136) = v32;
      v33 = swift_getAssociatedConformanceWitness();
      v34 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v35 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v36 = *(_QWORD *)(v6 - 176);
      v37 = *(_QWORD *)(v6 - 152);
      v38 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v36 + 16))(*(_QWORD *)(v6 - 184), v37, v38, v34);
      sub_1BDDB6CA4(v31, v32);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v35;
      sub_1BDE76A9C(v5, v6 - 144, v3, v33);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 384) + 8))(v5, v3);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    case 2:
      v39 = *v1;
      v40 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v40;
      v41 = *(_QWORD *)(v6 - 360);
      v42 = swift_getAssociatedConformanceWitness();
      v43 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v44 = *(_QWORD *)(v6 - 128);
      v45 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v43);
      sub_1BDDB6CA4(v39, v40);
      v46 = *(_QWORD *)(v6 - 376);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v44;
      *(_QWORD *)(v6 - 136) = v45;
      sub_1BDE76A9C(v46, v6 - 144, v41, v42);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 368) + 8))(v46, v41);
      goto LABEL_13;
    case 3:
      v47 = v1;
      v48 = *v1;
      v49 = v47[1];
      *(_QWORD *)(v6 - 144) = v48;
      *(_QWORD *)(v6 - 136) = v49;
      v20 = *(_QWORD *)(v6 - 336);
      v50 = swift_getAssociatedConformanceWitness();
      v51 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v52 = *(_QWORD *)(v6 - 128);
      v53 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v51);
      sub_1BDDB6CA4(v48, v49);
      v28 = *(_QWORD *)(v6 - 352);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v52;
      *(_QWORD *)(v6 - 136) = v53;
      sub_1BDE76A9C(v28, v6 - 144, v20, v50);
      v29 = *(_QWORD *)(v6 - 344);
      goto LABEL_12;
    case 4:
      v54 = v1;
      v55 = *v1;
      v56 = v54[1];
      *(_QWORD *)(v6 - 144) = v55;
      *(_QWORD *)(v6 - 136) = v56;
      v20 = *(_QWORD *)(v6 - 312);
      v57 = swift_getAssociatedConformanceWitness();
      v58 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v59 = *(_QWORD *)(v6 - 128);
      v60 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v58);
      sub_1BDDB6CA4(v55, v56);
      v28 = *(_QWORD *)(v6 - 328);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v59;
      *(_QWORD *)(v6 - 136) = v60;
      sub_1BDE76A9C(v28, v6 - 144, v20, v57);
      v29 = *(_QWORD *)(v6 - 320);
      goto LABEL_12;
    case 5:
      v61 = v1;
      v62 = *v1;
      v63 = v61[1];
      *(_QWORD *)(v6 - 144) = v62;
      *(_QWORD *)(v6 - 136) = v63;
      v20 = *(_QWORD *)(v6 - 288);
      v64 = swift_getAssociatedConformanceWitness();
      v65 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v66 = *(_QWORD *)(v6 - 128);
      v67 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v65);
      sub_1BDDB6CA4(v62, v63);
      v28 = *(_QWORD *)(v6 - 304);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v66;
      *(_QWORD *)(v6 - 136) = v67;
      sub_1BDE76A9C(v28, v6 - 144, v20, v64);
      v29 = *(_QWORD *)(v6 - 296);
      goto LABEL_12;
    case 6:
      v68 = v1;
      v69 = *v1;
      v70 = v68[1];
      *(_QWORD *)(v6 - 144) = v69;
      *(_QWORD *)(v6 - 136) = v70;
      v20 = *(_QWORD *)(v6 - 264);
      v71 = swift_getAssociatedConformanceWitness();
      v72 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v73 = *(_QWORD *)(v6 - 128);
      v74 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v72);
      sub_1BDDB6CA4(v69, v70);
      v28 = *(_QWORD *)(v6 - 280);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v73;
      *(_QWORD *)(v6 - 136) = v74;
      sub_1BDE76A9C(v28, v6 - 144, v20, v71);
      v29 = *(_QWORD *)(v6 - 272);
      goto LABEL_12;
    case 7:
      v75 = v1;
      v76 = *v1;
      v77 = v75[1];
      *(_QWORD *)(v6 - 144) = v76;
      *(_QWORD *)(v6 - 136) = v77;
      v20 = *(_QWORD *)(v6 - 240);
      v78 = swift_getAssociatedConformanceWitness();
      v79 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v80 = *(_QWORD *)(v6 - 128);
      v81 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v79);
      sub_1BDDB6CA4(v76, v77);
      v28 = *(_QWORD *)(v6 - 256);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v80;
      *(_QWORD *)(v6 - 136) = v81;
      sub_1BDE76A9C(v28, v6 - 144, v20, v78);
      v29 = *(_QWORD *)(v6 - 248);
      goto LABEL_12;
    case 8:
      v82 = v1;
      v83 = *v1;
      v84 = v82[1];
      *(_QWORD *)(v6 - 144) = v83;
      *(_QWORD *)(v6 - 136) = v84;
      v20 = *(_QWORD *)(v6 - 216);
      v85 = swift_getAssociatedConformanceWitness();
      v86 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v87 = *(_QWORD *)(v6 - 128);
      v88 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v86);
      sub_1BDDB6CA4(v83, v84);
      v28 = *(_QWORD *)(v6 - 232);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v87;
      *(_QWORD *)(v6 - 136) = v88;
      sub_1BDE76A9C(v28, v6 - 144, v20, v85);
      v29 = *(_QWORD *)(v6 - 224);
      goto LABEL_12;
    default:
      v17 = v1;
      v18 = *v1;
      v19 = v17[1];
      *(_QWORD *)(v6 - 144) = v18;
      *(_QWORD *)(v6 - 136) = v19;
      v20 = *(_QWORD *)(v6 - 192);
      v21 = swift_getAssociatedConformanceWitness();
      v22 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v23 = *(_QWORD *)(v6 - 128);
      v24 = *(_QWORD *)(v6 - 120);
      v25 = *(_QWORD *)(v6 - 176);
      v26 = *(_QWORD *)(v6 - 152);
      v27 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v25 + 16))(*(_QWORD *)(v6 - 184), v26, v27, v22);
      sub_1BDDB6CA4(v18, v19);
      v28 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v23;
      *(_QWORD *)(v6 - 136) = v24;
      sub_1BDE76A9C(v28, v6 - 144, v20, v21);
      v29 = *(_QWORD *)(v6 - 200);
LABEL_12:
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v20);
LABEL_13:
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  }
}

void SharedTagged_9.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEA2548);
}

uint64_t sub_1BDEA3B68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_9(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEA2ED4);
  return swift_release();
}

uint64_t SharedTagged_9.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEA2ED4);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_9.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_9.subscript.getter(a2, a3);
}

void (*sub_1BDEA3CE8())(uint64_t **a1, char a2)
{
  return sub_1BDEA3D08;
}

void sub_1BDEA3D08(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t)sub_1BDEA2ED4, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_9.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEA2548);
}

void SharedTagged_9.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA3DCC(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_9.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_9.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_9.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_9);
}

void SharedTagged_9.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_9.hash(into:));
}

void sub_1BDEA415C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_9.hash(into:));
}

uint64_t sub_1BDEA4168(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_9.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_9.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEA4190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_9.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_9.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDECDCCC(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_9, 0, a4);
}

uint64_t sub_1BDEA41CC(uint64_t a1, uint64_t a2)
{
  return SharedTagged_9.encode(to:)(a1, a2);
}

uint64_t SharedTagged_9.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.Enum, (uint64_t)&associated conformance descriptor for Tagged_9.Tagged_9.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_10.id.modify())()
{
  return nullsub_1;
}

void SharedTagged_10.tag.getter()
{
  sub_1BDECED20();
}

void SharedTagged_10.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*SharedTagged_10.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_10.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_10.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))SharedTagged_10.init(_:id:));
}

void SharedTagged_10.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_10, a4);
}

void SharedTagged_10.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_10);
}

void SharedTagged_10.init<A>(_:_:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA436C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA45B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

void SharedTagged_10.init<A>(_:_:id:)()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA4820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 0;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA4A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA4CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA4F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 1;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA5188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA53D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA5644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 2;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA589C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA5AEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA5D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 3;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA5FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA6200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA646C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 4;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA66C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA6914(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA6B80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 5;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA6DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA7028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA7294(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 6;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA74EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA773C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA79A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 7;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA7C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 8;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA7E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 8;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA80BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 8;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

uint64_t sub_1BDEA8314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v7 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 152) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v17 - v8;
  *(_QWORD *)(v7 - 144) = v1;
  *(_OWORD *)(v7 - 128) = xmmword_1BE1B6B20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  v11 = *(char **)(v7 - 136);
  sub_1BDE58070(v6, AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  *(_OWORD *)v11 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 9;
  sub_1BE1B293C();
  v12 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v5, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v6, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v9, v5, v4);
    v14 = *(_QWORD *)(v7 - 152);
    swift_storeEnumTagMultiPayload();
    v16 = type metadata accessor for SharedTagged_10(0, v3, v2, v15);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 160) + 32))(&v11[*(int *)(v16 + 36)], v9, v14);
  }
  return result;
}

uint64_t sub_1BDEA8564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 - 152) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 144) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v23 - v8;
  *(_QWORD *)(v7 - 136) = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE57208(v1, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  swift_release();
  v13 = AssociatedTypeWitness;
  v14 = *(char **)(v7 - 120);
  v16 = type metadata accessor for Capsule(0, v13, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v17 = v1;
  Capsule<>.rootID.getter((uint64_t *)(v7 - 112));
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 9;
  sub_1BE1B293C();
  v18 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v17, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v9, v6, v5);
    v20 = *(_QWORD *)(v7 - 144);
    swift_storeEnumTagMultiPayload();
    v22 = type metadata accessor for SharedTagged_10(0, v3, v2, v21);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 152) + 32))(&v14[*(int *)(v22 + 36)], v9, v20);
  }
  return result;
}

uint64_t sub_1BDEA87D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v7 - 176) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 168) = a1;
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - v8;
  v10 = *v4;
  v11 = v4[1];
  *(_QWORD *)(v7 - 160) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  *(_QWORD *)(v7 - 120) = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1BDE58070(*(_QWORD *)(v7 - 136), AssociatedTypeWitness, (uint64_t *)(v7 - 112));
  swift_release();
  v13 = v10;
  v14 = *(char **)(v7 - 144);
  sub_1BDDB796C(v13, v11);
  *(_OWORD *)v14 = *(_OWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 112) = 9;
  sub_1BE1B293C();
  v15 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v6, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(*(_QWORD *)(v7 - 136), AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v9, v6, v5);
    v17 = *(_QWORD *)(v7 - 168);
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SharedTagged_10(0, v3, v2, v18);
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 176) + 32))(&v14[*(int *)(v19 + 36)], v9, v17);
  }
  return result;
}

void SharedTagged_10.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for WeakTagged_10(0, a2, a3, a4);
  type metadata accessor for SharedTagged_10(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA8A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void SharedTagged_10.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA8AD8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void SharedTagged_10.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA8C04(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_10.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA8D34(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_10.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA8E64(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_10.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA8F94(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_10.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA90C4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_10.tagged7.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA91F4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 6)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_10.tagged8.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA9324(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 7)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void SharedTagged_10.tagged9.getter()
{
  sub_1BDEA93D0();
}

void sub_1BDEA93D0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA9464(uint64_t a1)
{
  _QWORD *v1;
  void (*v2)(_QWORD *__return_ptr, _QWORD *, uint64_t, uint64_t);
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  _QWORD v12[14];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v12);
  if (v12[0] == 8)
  {
    v5 = *v3;
    v6 = v3[1];
    v11[0] = v5;
    v11[1] = v6;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v2(v12, v11, AssociatedTypeWitness, AssociatedConformanceWitness);
    v9 = v12[0];
    v10 = v12[1];
    result = sub_1BDDB6CA4(v5, v6);
  }
  else
  {
    v9 = 0;
    v10 = 0xF000000000000000;
  }
  *v1 = v9;
  v1[1] = v10;
  return result;
}

void SharedTagged_10.tagged10.getter()
{
  sub_1BDECFB7C();
}

void SharedTagged_10.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA95A0(uint64_t a1)
{
  __int128 *v1;
  uint64_t *v2;
  uint64_t result;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] >= 10)
  {
    v5 = *v2;
    v6 = v2[1];
    v8.n128_u64[0] = v5;
    v8.n128_u64[1] = v6;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v8, v9);
    v7 = v9[0];
    result = sub_1BDDB6CA4(v5, v6);
    v4 = (__int128)v7;
  }
  else
  {
    v4 = xmmword_1BE1B6B20;
  }
  *v1 = v4;
  return result;
}

void SharedTagged_10.any.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA96D8(uint64_t a1)
{
  __n128 *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  __n128 v10;
  uint64_t v11;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v11);
  v3 = *v2;
  v4 = v2[1];
  v10.n128_u64[0] = v3;
  v10.n128_u64[1] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = type metadata accessor for Ref(0, AssociatedTypeWitness, AssociatedConformanceWitness, v7);
  v1[1].n128_u64[1] = v8;
  v1[2].n128_u64[0] = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v8);
  Ref.init(id:)(&v10, v1);
  return sub_1BDDB6CA4(v3, v4);
}

void SharedTagged_10.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t AssociatedTypeWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _UNKNOWN **v41;
  uint64_t v42;

  v36 = a2;
  v37 = a3;
  v35 = a1;
  v38 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v33 = (char *)&v17 - v4;
  v32 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v32);
  v31 = (char *)&v17 - v5;
  v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v18);
  v17 = (char *)&v17 - v6;
  v30 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v30);
  v29 = (char *)&v17 - v7;
  v28 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v28);
  v27 = (char *)&v17 - v8;
  v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v26);
  v25 = (char *)&v17 - v9;
  v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v24);
  v23 = (char *)&v17 - v10;
  v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v22);
  v21 = (char *)&v17 - v11;
  v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v20);
  v19 = (char *)&v17 - v12;
  v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v13);
  v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v14);
  v15 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v39 = v15;
  v40 = AssociatedConformanceWitness;
  v41 = &protocol witness table for Int;
  v42 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEA9D30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v1;
      v6 = v1[1];
      *(_QWORD *)(v4 - 184) = *v1;
      *(_QWORD *)(v4 - 144) = v5;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      v10 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v10 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v4 - 184), v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v2, AssociatedConformanceWitness, *(_QWORD *)(v4 - 168), v10);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v18 = *v1;
      v19 = v1[1];
      *(_QWORD *)(v4 - 184) = *v1;
      *(_QWORD *)(v4 - 144) = v18;
      *(_QWORD *)(v4 - 136) = v19;
      v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v21 = *(_QWORD *)(v4 - 128);
      v22 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v21;
      *(_QWORD *)(v4 - 136) = v22;
      v23 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v23 + 8);
      sub_1BDDB6CA4(*(_QWORD *)(v4 - 184), v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 192))(v4 - 144, v3, v20, *(_QWORD *)(v4 - 168), v23);
      sub_1BDDB796C(v21, v22);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v24 = *v1;
      v25 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v25;
      v26 = *(_QWORD *)(v4 - 296);
      v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v28 = *(_QWORD *)(v4 - 128);
      v29 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v28;
      *(_QWORD *)(v4 - 136) = v29;
      v30 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v30 + 8);
      sub_1BDDB6CA4(v24, v25);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v4 - 144, v26, v27, *(_QWORD *)(v4 - 168), v30);
      sub_1BDDB796C(v28, v29);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 3:
      v31 = *v1;
      v32 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v32;
      v33 = *(_QWORD *)(v4 - 280);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v31, v32);
      v36 = v4 - 144;
      goto LABEL_13;
    case 4:
      v37 = *v1;
      v38 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v38;
      v33 = *(_QWORD *)(v4 - 264);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v37, v38);
      v36 = v4 - 144;
      goto LABEL_13;
    case 5:
      v39 = *v1;
      v40 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v40;
      v33 = *(_QWORD *)(v4 - 248);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v39, v40);
      v36 = v4 - 144;
      goto LABEL_13;
    case 6:
      v41 = *v1;
      v42 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v42;
      v33 = *(_QWORD *)(v4 - 232);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v41, v42);
      v36 = v4 - 144;
      goto LABEL_13;
    case 7:
      v43 = *v1;
      v44 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v44;
      v33 = *(_QWORD *)(v4 - 216);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v43, v44);
      v36 = v4 - 144;
      goto LABEL_13;
    case 8:
      v47 = *v1;
      v48 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v48;
      v33 = *(_QWORD *)(v4 - 312);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v47, v48);
      v36 = v4 - 144;
      goto LABEL_13;
    case 9:
      v45 = *v1;
      v46 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v46;
      v33 = *(_QWORD *)(v4 - 200);
      v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v35 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 184) = *(_QWORD *)(v35 + 8);
      sub_1BDDB6CA4(v45, v46);
      v36 = v4 - 144;
LABEL_13:
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 184))(v36, v33, v34, *(_QWORD *)(v4 - 168), v35);
      break;
    default:
      v11 = *v1;
      v12 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v12;
      v13 = *(_QWORD *)(v4 - 184);
      v14 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v15 = *(_QWORD *)(v4 - 128);
      v16 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v15;
      *(_QWORD *)(v4 - 136) = v16;
      v17 = *(_QWORD *)(v4 - 160);
      *(_QWORD *)(v4 - 200) = *(_QWORD *)(v17 + 8);
      sub_1BDDB6CA4(v11, v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v4 - 200))(v4 - 144, v13, v14, *(_QWORD *)(v4 - 168), v17);
      break;
  }
  sub_1BDDB796C(v15, v16);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

void sub_1BDEAA35C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _UNKNOWN **v37;
  uint64_t v38;

  v33 = a1;
  v34 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v15 - v2;
  v30 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v30);
  v29 = (char *)&v15 - v3;
  v16 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v16);
  v15 = (char *)&v15 - v4;
  v28 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v28);
  v27 = (char *)&v15 - v5;
  v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v26);
  v25 = (char *)&v15 - v6;
  v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v24);
  v23 = (char *)&v15 - v7;
  v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v22);
  v21 = (char *)&v15 - v8;
  v20 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v20);
  v19 = (char *)&v15 - v9;
  v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v18);
  v17 = (char *)&v15 - v10;
  v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v11);
  v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v12);
  v13 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v35 = v13;
  v36 = AssociatedConformanceWitness;
  v37 = &protocol witness table for Int;
  v38 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAA750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  CRExtensible.rawValue.getter(a1, v4 - 96);
  switch(*(_QWORD *)(v4 - 96))
  {
    case 0:
      v5 = *v1;
      v6 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v8 = *(_QWORD *)(v4 - 128);
      v9 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v8;
      *(_QWORD *)(v4 - 136) = v9;
      sub_1BDDB6CA4(v5, v6);
      v11 = type metadata accessor for Ref(0, v2, AssociatedConformanceWitness, v10);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v11);
      sub_1BDDB796C(v8, v9);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 1:
      v20 = *v1;
      v21 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v21;
      v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v23 = *(_QWORD *)(v4 - 128);
      v24 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v23;
      *(_QWORD *)(v4 - 136) = v24;
      sub_1BDDB6CA4(v20, v21);
      v26 = type metadata accessor for Ref(0, v3, v22, v25);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v26);
      sub_1BDDB796C(v23, v24);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 2:
      v27 = *v1;
      v28 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v28;
      v29 = *(_QWORD *)(v4 - 280);
      v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v31 = *(_QWORD *)(v4 - 128);
      v32 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v31;
      *(_QWORD *)(v4 - 136) = v32;
      sub_1BDDB6CA4(v27, v28);
      v34 = type metadata accessor for Ref(0, v29, v30, v33);
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v34);
      sub_1BDDB796C(v31, v32);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
    case 3:
      v35 = *v1;
      v36 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v36;
      v37 = *(_QWORD *)(v4 - 264);
      v38 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v35, v36);
      v19 = type metadata accessor for Ref(0, v37, v38, v39);
      goto LABEL_13;
    case 4:
      v40 = *v1;
      v41 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v41;
      v42 = *(_QWORD *)(v4 - 248);
      v43 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v40, v41);
      v19 = type metadata accessor for Ref(0, v42, v43, v44);
      goto LABEL_13;
    case 5:
      v45 = *v1;
      v46 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v46;
      v47 = *(_QWORD *)(v4 - 232);
      v48 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v45, v46);
      v19 = type metadata accessor for Ref(0, v47, v48, v49);
      goto LABEL_13;
    case 6:
      v50 = *v1;
      v51 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v51;
      v52 = *(_QWORD *)(v4 - 216);
      v53 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v50, v51);
      v19 = type metadata accessor for Ref(0, v52, v53, v54);
      goto LABEL_13;
    case 7:
      v55 = *v1;
      v56 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v56;
      v57 = *(_QWORD *)(v4 - 200);
      v58 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v55, v56);
      v19 = type metadata accessor for Ref(0, v57, v58, v59);
      goto LABEL_13;
    case 8:
      v65 = *v1;
      v66 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v66;
      v67 = *(_QWORD *)(v4 - 296);
      v68 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v65, v66);
      v19 = type metadata accessor for Ref(0, v67, v68, v69);
      goto LABEL_13;
    case 9:
      v60 = *v1;
      v61 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v61;
      v62 = *(_QWORD *)(v4 - 184);
      v63 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v60, v61);
      v19 = type metadata accessor for Ref(0, v62, v63, v64);
      goto LABEL_13;
    default:
      v12 = *v1;
      v13 = v1[1];
      *(_QWORD *)(v4 - 144) = *v1;
      *(_QWORD *)(v4 - 136) = v13;
      v14 = *(_QWORD *)(v4 - 168);
      v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)((__n128 *)(v4 - 144), (__n128 *)(v4 - 128));
      v16 = *(_QWORD *)(v4 - 128);
      v17 = *(_QWORD *)(v4 - 120);
      *(_QWORD *)(v4 - 144) = v16;
      *(_QWORD *)(v4 - 136) = v17;
      sub_1BDDB6CA4(v12, v13);
      v19 = type metadata accessor for Ref(0, v14, v15, v18);
LABEL_13:
      sub_1BDF9FF2C(*(_QWORD *)(v4 - 160), v19);
      sub_1BDDB796C(v16, v17);
      swift_getAssociatedTypeWitness();
      return swift_dynamicCast();
  }
}

void sub_1BDEAAE08(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _UNKNOWN **v55;
  uint64_t v56;

  v51 = a2;
  v52 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v47 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v45 = (char *)v20 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  MEMORY[0x1E0C80A78](v4);
  v42 = (char *)v20 - v5;
  v21 = swift_getAssociatedTypeWitness();
  v20[1] = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v20[0] = (char *)v20 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  MEMORY[0x1E0C80A78](v7);
  v39 = (char *)v20 - v8;
  v38 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v36 = (char *)v20 - v9;
  v35 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v33 = (char *)v20 - v10;
  v32 = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v30 = (char *)v20 - v11;
  v29 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v27 = (char *)v20 - v12;
  v26 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v24 = (char *)v20 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v15 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v16 = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(v16 - 8);
  v50 = v16;
  MEMORY[0x1E0C80A78](v16);
  v48 = (char *)v20 - v17;
  v18 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v53 = v18;
  v54 = AssociatedConformanceWitness;
  v55 = &protocol witness table for Int;
  v56 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAB2A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v2;
      v8 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v8;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v10 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v11 = *(_QWORD *)(v6 - 128);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 120);
      v12 = *(_QWORD *)(v6 - 176);
      v13 = *(_QWORD *)(v6 - 152);
      v14 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v12 + 16))(*(_QWORD *)(v6 - 184), v13, v14, v10);
      sub_1BDDB6CA4(v7, v8);
      swift_dynamicCast();
      v15 = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 144) = v11;
      *(_QWORD *)(v6 - 136) = v15;
      sub_1BDE76A9C(v5, v6 - 144, v3, AssociatedConformanceWitness);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 392) + 8))(v5, v3);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    case 1:
      v29 = *v2;
      v30 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v30;
      v31 = swift_getAssociatedConformanceWitness();
      v32 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v33 = *(_QWORD *)(v6 - 120);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 128);
      v34 = *(_QWORD *)(v6 - 176);
      v35 = *(_QWORD *)(v6 - 152);
      v36 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v34 + 16))(*(_QWORD *)(v6 - 184), v35, v36, v32);
      sub_1BDDB6CA4(v29, v30);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 192);
      *(_QWORD *)(v6 - 136) = v33;
      sub_1BDE76A9C(v4, v6 - 144, v1, v31);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 384) + 8))(v4, v1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    case 2:
      v37 = *v2;
      v38 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v38;
      v19 = *(_QWORD *)(v6 - 360);
      v39 = swift_getAssociatedConformanceWitness();
      v40 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v41 = *(_QWORD *)(v6 - 128);
      v42 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v40);
      sub_1BDDB6CA4(v37, v38);
      v27 = *(_QWORD *)(v6 - 376);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v41;
      *(_QWORD *)(v6 - 136) = v42;
      sub_1BDE76A9C(v27, v6 - 144, v19, v39);
      v43 = v6 - 112;
      goto LABEL_13;
    case 3:
      v44 = *v2;
      v45 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v45;
      v19 = *(_QWORD *)(v6 - 336);
      v46 = swift_getAssociatedConformanceWitness();
      v47 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v48 = *(_QWORD *)(v6 - 128);
      v49 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v47);
      sub_1BDDB6CA4(v44, v45);
      v27 = *(_QWORD *)(v6 - 352);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v48;
      *(_QWORD *)(v6 - 136) = v49;
      sub_1BDE76A9C(v27, v6 - 144, v19, v46);
      v43 = v6 - 88;
      goto LABEL_13;
    case 4:
      v50 = *v2;
      v51 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v51;
      v19 = *(_QWORD *)(v6 - 312);
      v52 = swift_getAssociatedConformanceWitness();
      v53 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v54 = *(_QWORD *)(v6 - 128);
      v55 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v53);
      sub_1BDDB6CA4(v50, v51);
      v27 = *(_QWORD *)(v6 - 328);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v54;
      *(_QWORD *)(v6 - 136) = v55;
      sub_1BDE76A9C(v27, v6 - 144, v19, v52);
      v43 = v6 - 64;
      goto LABEL_13;
    case 5:
      v56 = *v2;
      v57 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v57;
      v19 = *(_QWORD *)(v6 - 288);
      v58 = swift_getAssociatedConformanceWitness();
      v59 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v60 = *(_QWORD *)(v6 - 128);
      v61 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v59);
      sub_1BDDB6CA4(v56, v57);
      v27 = *(_QWORD *)(v6 - 304);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v60;
      *(_QWORD *)(v6 - 136) = v61;
      sub_1BDE76A9C(v27, v6 - 144, v19, v58);
      v43 = v6 - 40;
      goto LABEL_13;
    case 6:
      v62 = *v2;
      v63 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v63;
      v19 = *(_QWORD *)(v6 - 264);
      v64 = swift_getAssociatedConformanceWitness();
      v65 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v66 = *(_QWORD *)(v6 - 128);
      v67 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v65);
      sub_1BDDB6CA4(v62, v63);
      v27 = *(_QWORD *)(v6 - 280);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v66;
      *(_QWORD *)(v6 - 136) = v67;
      sub_1BDE76A9C(v27, v6 - 144, v19, v64);
      v43 = v6 - 16;
      goto LABEL_13;
    case 7:
      v68 = *v2;
      v69 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v69;
      v19 = *(_QWORD *)(v6 - 240);
      v70 = swift_getAssociatedConformanceWitness();
      v71 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v72 = *(_QWORD *)(v6 - 128);
      v73 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v71);
      sub_1BDDB6CA4(v68, v69);
      v27 = *(_QWORD *)(v6 - 256);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v72;
      *(_QWORD *)(v6 - 136) = v73;
      sub_1BDE76A9C(v27, v6 - 144, v19, v70);
      v28 = *(_QWORD *)(v6 - 248);
      break;
    case 8:
      v80 = *v2;
      v81 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v81;
      v19 = *(_QWORD *)(v6 - 400);
      v82 = swift_getAssociatedConformanceWitness();
      v83 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v84 = *(_QWORD *)(v6 - 128);
      v85 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v83);
      sub_1BDDB6CA4(v80, v81);
      v27 = *(_QWORD *)(v6 - 416);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v84;
      *(_QWORD *)(v6 - 136) = v85;
      sub_1BDE76A9C(v27, v6 - 144, v19, v82);
      v43 = v6 - 152;
LABEL_13:
      v28 = *(_QWORD *)(v43 - 256);
      break;
    case 9:
      v74 = *v2;
      v75 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v75;
      v19 = *(_QWORD *)(v6 - 216);
      v76 = swift_getAssociatedConformanceWitness();
      v77 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v78 = *(_QWORD *)(v6 - 128);
      v79 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v77);
      sub_1BDDB6CA4(v74, v75);
      v27 = *(_QWORD *)(v6 - 232);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v78;
      *(_QWORD *)(v6 - 136) = v79;
      sub_1BDE76A9C(v27, v6 - 144, v19, v76);
      v28 = *(_QWORD *)(v6 - 224);
      break;
    default:
      v17 = *v2;
      v18 = v2[1];
      *(_QWORD *)(v6 - 144) = *v2;
      *(_QWORD *)(v6 - 136) = v18;
      v19 = *(_QWORD *)(v6 - 192);
      v20 = swift_getAssociatedConformanceWitness();
      v21 = Ref.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v22 = *(_QWORD *)(v6 - 128);
      v23 = *(_QWORD *)(v6 - 120);
      v24 = *(_QWORD *)(v6 - 176);
      v25 = *(_QWORD *)(v6 - 152);
      v26 = *(_QWORD *)(v6 - 168);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v24 + 16))(*(_QWORD *)(v6 - 184), v25, v26, v21);
      sub_1BDDB6CA4(v17, v18);
      v27 = *(_QWORD *)(v6 - 208);
      swift_dynamicCast();
      *(_QWORD *)(v6 - 144) = v22;
      *(_QWORD *)(v6 - 136) = v23;
      sub_1BDE76A9C(v27, v6 - 144, v19, v20);
      v28 = *(_QWORD *)(v6 - 200);
      break;
  }
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v19);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
}

void SharedTagged_10.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEAA35C);
}

uint64_t sub_1BDEABB5C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for SharedTagged_10(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED4FB0(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEAAE08);
  return swift_release();
}

uint64_t SharedTagged_10.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;

  sub_1BDED4FB0(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEAAE08);
  swift_release();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

void SharedTagged_10.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_10.subscript.getter(a2, a3);
}

void (*sub_1BDEABCDC())(uint64_t **a1, char a2)
{
  return sub_1BDEABCFC;
}

void sub_1BDEABCFC(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t)sub_1BDEAAE08, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED4FB0);
}

uint64_t SharedTagged_10.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEAA35C);
}

void SharedTagged_10.visitReferences(_:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEABDC0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  __n128 v9;
  void (*v10)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  uint64_t v14;

  CRExtensible.rawValue.getter(a1, (uint64_t)&v14);
  v3 = v2[3];
  v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v6 = *v1;
  v5 = v1[1];
  v12.n128_u64[0] = v6;
  v12.n128_u64[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v12, &v13);
  v9 = v13;
  v12 = v13;
  v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1BDDB6CA4(v6, v5);
  v10(&v12, AssociatedTypeWitness, AssociatedConformanceWitness, v3, v4);
  return sub_1BDDB796C(v9.n128_i64[0], v9.n128_u64[1]);
}

void SharedTagged_10.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void SharedTagged_10.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static SharedTagged_10.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_10);
}

void SharedTagged_10.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))SharedTagged_10.hash(into:));
}

void sub_1BDEAC190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))SharedTagged_10.hash(into:));
}

uint64_t sub_1BDEAC19C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_10.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t SharedTagged_10.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEAC1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SharedTagged_10.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SharedTagged_10.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDED3E10(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for SharedTagged_10, 0, a4);
}

uint64_t sub_1BDEAC200(uint64_t a1, uint64_t a2)
{
  return SharedTagged_10.encode(to:)(a1, a2);
}

uint64_t SharedTagged_10.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDE7EB48(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.Enum, (uint64_t)&associated conformance descriptor for Tagged_10.Tagged_10.Enum: RawRepresentable);
}

uint64_t WeakTagged_1.id.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1BDDB6CA4(v2, v3);
}

uint64_t (*WeakTagged_1.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_1.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_1.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_1.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_1.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_1.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_1.init(_:id:));
}

void WeakTagged_1.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_1, a4);
}

void WeakTagged_1.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_1);
}

void WeakTagged_1.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_1(0, a2, a3, a4);
  type metadata accessor for WeakTagged_1(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAC39C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_1.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAC45C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_1.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAC588(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_1.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _UNKNOWN **v37;
  uint64_t v38;

  v30 = a1;
  v31 = a4;
  v29 = a3;
  v32 = a5;
  v5 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1BE1B2EE8();
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v33 = (char *)&v19 - v9;
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v24 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v21 = (char *)&v19 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v20 = sub_1BE1B2EE8();
  v25 = *(_QWORD *)(v20 - 8);
  v14 = MEMORY[0x1E0C80A78](v20);
  v27 = (char *)&v19 - v15;
  v26 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v16);
  v17 = swift_getAssociatedTypeWitness();
  v34 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v35 = v17;
  v36 = AssociatedConformanceWitness;
  v37 = &protocol witness table for Int;
  v38 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAC824(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t AssociatedTypeWitness;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  if (*(_QWORD *)(v6 - 96))
  {
    v7 = v1;
    v8 = *v1;
    v9 = v7[1];
    *(_QWORD *)(v6 - 144) = v8;
    *(_QWORD *)(v6 - 136) = v9;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v11 = *(_QWORD *)(v6 - 128);
    v12 = *(_QWORD *)(v6 - 120);
    *(_QWORD *)(v6 - 144) = v11;
    *(_QWORD *)(v6 - 136) = v12;
    v13 = *(_QWORD *)(v6 - 176);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v13 + 16);
    sub_1BDDB6CA4(v8, v9);
    v15 = *(_QWORD *)(v6 - 160);
    v14(v6 - 144, v5, AssociatedConformanceWitness, *(_QWORD *)(v6 - 192), v13);
    sub_1BDDB796C(v11, v12);
    v16 = *(_QWORD *)(v6 - 200);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v5) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 248) + 8))(*(_QWORD *)(v6 - 160), *(_QWORD *)(v6 - 240));
      v17 = *(_QWORD *)(v6 - 168);
LABEL_6:
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                           + 56))(v17, 1, 1, AssociatedTypeWitness);
    }
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
    v32 = *(_QWORD *)(v6 - 256);
    v31(v32, *(_QWORD *)(v6 - 160), v5);
    v31(*(_QWORD *)(v6 - 232), v32, v5);
    v33 = swift_getAssociatedTypeWitness();
    v34 = *(_QWORD *)(v6 - 168);
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v34, 0, 1, v33);
  }
  else
  {
    *(_QWORD *)(v6 - 200) = v4;
    v18 = *(_QWORD *)(v6 - 224);
    *(_QWORD *)(v6 - 160) = v3;
    v19 = *v1;
    v20 = v1[1];
    *(_QWORD *)(v6 - 144) = *v1;
    *(_QWORD *)(v6 - 136) = v20;
    v21 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v22 = *(_QWORD *)(v6 - 128);
    v23 = *(_QWORD *)(v6 - 120);
    *(_QWORD *)(v6 - 144) = v22;
    *(_QWORD *)(v6 - 136) = v23;
    v24 = *(_QWORD *)(v6 - 176);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v24 + 16);
    sub_1BDDB6CA4(v19, v20);
    v26 = *(_QWORD *)(v6 - 208);
    v25(v6 - 144, v2, v21, *(_QWORD *)(v6 - 192), v24);
    sub_1BDDB796C(v22, v23);
    v27 = *(_QWORD *)(v6 - 216);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v2);
    v17 = *(_QWORD *)(v6 - 168);
    if (v28 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v18 + 8))(v26, *(_QWORD *)(v6 - 264));
      goto LABEL_6;
    }
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
    v36 = *(_QWORD *)(v6 - 200);
    v35(v36, v26, v2);
    v35(*(_QWORD *)(v6 - 160), v36, v2);
    v37 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v17, 0, 1, v37);
  }
}

void sub_1BDEACB28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  _QWORD v17[22];

  v17[12] = a1;
  v17[13] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_1BE1B2EE8();
  v17[4] = *(_QWORD *)(v3 - 8);
  v17[5] = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v17[10] = (char *)v17 - v5;
  v17[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v17[6] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v17[3] = (char *)v17 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  v17[1] = *(_QWORD *)(v10 - 8);
  v17[2] = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v17[9] = (char *)v17 - v12;
  v13 = *(_QWORD *)(v9 - 8);
  v17[7] = v9;
  v17[8] = v13;
  v14 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v14);
  v15 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17[16] = v15;
  v17[17] = AssociatedConformanceWitness;
  v17[18] = &protocol witness table for Int;
  v17[19] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEACD28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t AssociatedTypeWitness;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  CRExtensible.rawValue.getter(a1, v5 - 96);
  if (*(_QWORD *)(v5 - 96))
  {
    v6 = *v3;
    v7 = v3[1];
    *(_QWORD *)(v5 - 144) = *v3;
    *(_QWORD *)(v5 - 136) = v7;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v9 = *(_QWORD *)(v5 - 128);
    v10 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v9;
    *(_QWORD *)(v5 - 136) = v10;
    sub_1BDDB6CA4(v6, v7);
    v12 = type metadata accessor for WeakRef(0, v2, AssociatedConformanceWitness, v11);
    v13 = *(_QWORD *)(v5 - 176);
    sub_1BE1966E8(v12, v13);
    sub_1BDDB796C(v9, v10);
    v14 = *(_QWORD *)(v5 - 168);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v13, 1, v2) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 224) + 8))(v13, *(_QWORD *)(v5 - 216));
      v15 = *(_QWORD *)(v5 - 152);
LABEL_6:
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                           + 56))(v15, 1, 1, AssociatedTypeWitness);
    }
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
    v30 = *(_QWORD *)(v5 - 232);
    v29(v30, v13, v2);
    v29(*(_QWORD *)(v5 - 208), v30, v2);
    v31 = swift_getAssociatedTypeWitness();
    v15 = *(_QWORD *)(v5 - 152);
  }
  else
  {
    *(_QWORD *)(v5 - 168) = v1;
    v16 = *v3;
    v17 = v3[1];
    *(_QWORD *)(v5 - 144) = *v3;
    *(_QWORD *)(v5 - 136) = v17;
    v18 = *(_QWORD *)(v5 - 200);
    v19 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v20 = *(_QWORD *)(v5 - 128);
    v21 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v20;
    *(_QWORD *)(v5 - 136) = v21;
    sub_1BDDB6CA4(v16, v17);
    v23 = type metadata accessor for WeakRef(0, v18, v19, v22);
    v24 = *(_QWORD *)(v5 - 184);
    sub_1BE1966E8(v23, v24);
    sub_1BDDB796C(v20, v21);
    v25 = *(_QWORD *)(v5 - 192);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v18);
    v15 = *(_QWORD *)(v5 - 152);
    if (v26 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 248) + 8))(v24, *(_QWORD *)(v5 - 240));
      goto LABEL_6;
    }
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
    v33 = *(_QWORD *)(v5 - 168);
    v32(v33, v24, v18);
    v32(v4, v33, v18);
    v31 = swift_getAssociatedTypeWitness();
  }
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v15, 0, 1, v31);
}

void sub_1BDEAD004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v10[14];

  v10[5] = a2;
  v10[6] = a1;
  swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v10[2] = (char *)v10 - v3;
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v10[1] = (char *)v10 - v5;
  swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  v10[3] = *(_QWORD *)(v6 - 8);
  v10[4] = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10[9] = AssociatedTypeWitness;
  v10[10] = AssociatedConformanceWitness;
  v10[11] = &protocol witness table for Int;
  v10[12] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAD1C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  CRExtensible.rawValue.getter(a1, v6 - 88);
  if (*(_QWORD *)(v6 - 88))
  {
    v7 = *v5;
    v8 = v5[1];
    *(_QWORD *)(v6 - 136) = *v5;
    *(_QWORD *)(v6 - 128) = v8;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v10 = WeakRef.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v11 = *(_QWORD *)(v6 - 120);
    v12 = *(_QWORD *)(v6 - 112);
    v14 = *(_QWORD *)(v6 - 168);
    v13 = *(_QWORD *)(v6 - 160);
    v15 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v14 + 16))(v1, v15, v13, v10);
    sub_1BDDB6CA4(v7, v8);
    v16 = *(_QWORD *)(v6 - 176);
    v17 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v16, v17 ^ 1u, 1, v2);
    *(_QWORD *)(v6 - 136) = v11;
    *(_QWORD *)(v6 - 128) = v12;
    v18 = v6 - 136;
    v19 = v16;
    v20 = v2;
    v21 = AssociatedConformanceWitness;
  }
  else
  {
    v22 = *v5;
    v23 = v5[1];
    *(_QWORD *)(v6 - 136) = *v5;
    *(_QWORD *)(v6 - 128) = v23;
    v24 = swift_getAssociatedConformanceWitness();
    v25 = WeakRef.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v26 = *(_QWORD *)(v6 - 120);
    v27 = *(_QWORD *)(v6 - 112);
    v14 = *(_QWORD *)(v6 - 168);
    v13 = *(_QWORD *)(v6 - 160);
    v15 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v14 + 16))(v3, v15, v13, v25);
    sub_1BDDB6CA4(v22, v23);
    v28 = *(_QWORD *)(v6 - 184);
    v29 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v28, v29 ^ 1u, 1, v4);
    *(_QWORD *)(v6 - 136) = v26;
    *(_QWORD *)(v6 - 128) = v27;
    v18 = v6 - 136;
    v19 = v28;
    v20 = v4;
    v21 = v24;
  }
  sub_1BDE56E90(v19, v18, v20, v21);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v15, v13);
}

void WeakTagged_1.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEACB28);
}

uint64_t sub_1BDEAD398(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_1(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEAD004);
  return swift_release();
}

uint64_t WeakTagged_1.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEAD004);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_1.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_1.subscript.getter(a2, a3);
}

void (*sub_1BDEAD530())(uint64_t **a1, char a2)
{
  return sub_1BDEAD550;
}

void sub_1BDEAD550(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t)sub_1BDEAD004, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_1.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEACB28);
}

void WeakTagged_1.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_1.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_1.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_1);
}

void WeakTagged_1.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_1.hash(into:));
}

void sub_1BDEAD5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_1.hash(into:));
}

uint64_t sub_1BDEAD5E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_1.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_1.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEAD60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_1.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEAD648(a1, a2, a3, (char *)type metadata accessor for WeakTagged_1, 1, a4);
}

uint64_t sub_1BDEAD648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v57[2];
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82[10];

  v57[1] = a5;
  v72 = a4;
  v74 = a3;
  v75 = a2;
  v76 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v66 = (char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v62);
  v65 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v61 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v60 = (char *)v57 - v16;
  MEMORY[0x1E0C80A78](v15);
  v69 = (uint64_t)v57 - v17;
  v81 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v81);
  v79 = (char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v70 = (uint64_t)v57 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v80 = (char *)v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v78 = (char *)v57 - v26;
  MEMORY[0x1E0C80A78](v25);
  v68 = (uint64_t)v57 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v77 = (char *)v57 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v71 = (char *)v57 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v57 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v57 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v73 = v38;
    v58 = inited;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    v59 = v40;
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEAE358);
    }
    v44 = v68;
    sub_1BDDA2E8C((uint64_t)v35, v68, type metadata accessor for Proto_Value);
    v45 = *(_QWORD *)(v44 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v46 = v69;
    sub_1BDD86DEC(v45, v69, &qword_1ED6F26F0);
    v47 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v46, 1, v47) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v46, &qword_1ED6F26F0);
      v48 = v70;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v48 = v70;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v46, v70, type metadata accessor for Proto_TaggedValue);
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v46, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v50 = *(int *)(v81 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v48 + v50) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v44, type metadata accessor for Proto_Value);
    v51 = *(_QWORD *)(v48 + *(int *)(v81 + 20));
    swift_beginAccess();
    v52 = *(_QWORD *)(v51 + 16);
    sub_1BDD9C3E0(v48, type metadata accessor for Proto_TaggedValue);
    v82[0] = v52;
    v53 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v72)(0, v75, v74);
    v54 = (char *)(v76 + *(int *)(v53 + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v72 = v54;
    v69 = AssociatedConformanceWitness;
    v70 = AssociatedTypeWitness;
    CRExtensible.init(rawValue:)((uint64_t)v82, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v54);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEAE364(uint64_t a1, uint64_t a2)
{
  return WeakTagged_1.encode(to:)(a1, a2);
}

uint64_t WeakTagged_1.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.Enum, (uint64_t)&associated conformance descriptor for Tagged_1.Tagged_1.Enum: RawRepresentable);
}

void WeakTagged_1.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*WeakTagged_2.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_2.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_2.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_2.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_2.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_2.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_2.init(_:id:));
}

void WeakTagged_2.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_2, a4);
}

void WeakTagged_2.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_2);
}

void WeakTagged_2.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_2(0, a2, a3, a4);
  type metadata accessor for WeakTagged_2(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAE4FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_2.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAE5BC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_2.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAE6E8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_2.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAE818(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_2.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  _QWORD v24[3];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;

  v43 = a2;
  v44 = a3;
  v41 = a4;
  v42 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = sub_1BE1B2EE8();
  v31 = *(_QWORD *)(v32 - 8);
  v5 = MEMORY[0x1E0C80A78](v32);
  v39 = (char *)v24 - v6;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  v38 = v7;
  v8 = MEMORY[0x1E0C80A78](v5);
  v33 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v30 = (char *)v24 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v28 = sub_1BE1B2EE8();
  v27 = *(_QWORD *)(v28 - 8);
  v12 = MEMORY[0x1E0C80A78](v28);
  v40 = (char *)v24 - v13;
  v36 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v29 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = swift_getAssociatedTypeWitness();
  v25 = sub_1BE1B2EE8();
  v24[2] = *(_QWORD *)(v25 - 8);
  v17 = MEMORY[0x1E0C80A78](v25);
  v35 = (char *)v24 - v18;
  v34 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v26 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v24[1] = (char *)v24 - v21;
  v22 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v45 = v22;
  v46 = AssociatedConformanceWitness;
  v47 = &protocol witness table for Int;
  v48 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAEB88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  v7 = *(_QWORD *)(v6 - 96);
  *(_QWORD *)(v6 - 184) = v1;
  if (v7 == 1)
  {
    *(_QWORD *)(v6 - 200) = v2;
    v17 = *v3;
    v18 = v3[1];
    *(_QWORD *)(v6 - 144) = *v3;
    *(_QWORD *)(v6 - 136) = v18;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v20 = *(_QWORD *)(v6 - 128);
    v21 = *(_QWORD *)(v6 - 120);
    *(_QWORD *)(v6 - 144) = v20;
    *(_QWORD *)(v6 - 136) = v21;
    v22 = *(_QWORD *)(v6 - 152);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 16);
    sub_1BDDB6CA4(v17, v18);
    v24 = *(_QWORD *)(v6 - 192);
    v23(v6 - 144, v4, AssociatedConformanceWitness, *(_QWORD *)(v6 - 160), v22);
    sub_1BDDB796C(v20, v21);
    v25 = *(_QWORD *)(v6 - 224);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v4) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 296) + 8))(*(_QWORD *)(v6 - 192), *(_QWORD *)(v6 - 288));
      goto LABEL_9;
    }
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
    v44 = *(_QWORD *)(v6 - 200);
    v43(v44, *(_QWORD *)(v6 - 192), v4);
    v43(*(_QWORD *)(v6 - 280), v44, v4);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v42 = *(_QWORD *)(v6 - 176);
  }
  else if (v7)
  {
    v26 = *v3;
    v27 = v3[1];
    *(_QWORD *)(v6 - 144) = *v3;
    *(_QWORD *)(v6 - 136) = v27;
    v28 = *(_QWORD *)(v6 - 216);
    v29 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v30 = *(_QWORD *)(v6 - 128);
    v31 = *(_QWORD *)(v6 - 120);
    *(_QWORD *)(v6 - 144) = v30;
    *(_QWORD *)(v6 - 136) = v31;
    v32 = *(_QWORD *)(v6 - 152);
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16);
    sub_1BDDB6CA4(v26, v27);
    v34 = *(_QWORD *)(v6 - 200);
    v33(v6 - 144, v28, v29, *(_QWORD *)(v6 - 160), v32);
    v35 = v34;
    sub_1BDDB796C(v30, v31);
    v36 = *(_QWORD *)(v6 - 208);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v35, 1, v28) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 264) + 8))(v35, *(_QWORD *)(v6 - 256));
      goto LABEL_9;
    }
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32);
    v46 = *(_QWORD *)(v6 - 272);
    v45(v46, v35, v28);
    v45(*(_QWORD *)(v6 - 248), v46, v28);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v42 = *(_QWORD *)(v6 - 176);
  }
  else
  {
    v8 = *v3;
    v9 = v3[1];
    *(_QWORD *)(v6 - 144) = *v3;
    *(_QWORD *)(v6 - 136) = v9;
    v10 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v11 = *(_QWORD *)(v6 - 128);
    v12 = *(_QWORD *)(v6 - 120);
    *(_QWORD *)(v6 - 144) = v11;
    *(_QWORD *)(v6 - 136) = v12;
    v13 = *(_QWORD *)(v6 - 152);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v13 + 16);
    sub_1BDDB6CA4(v8, v9);
    v15 = *(_QWORD *)(v6 - 232);
    v14(v6 - 144, v5, v10, *(_QWORD *)(v6 - 160), v13);
    sub_1BDDB796C(v11, v12);
    v16 = *(_QWORD *)(v6 - 240);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v5) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 320) + 8))(v15, *(_QWORD *)(v6 - 312));
LABEL_9:
      v37 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(*(_QWORD *)(v6 - 176), 1, 1, v37);
    }
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
    v40 = *(_QWORD *)(v6 - 328);
    v39(v40, v15, v5);
    v39(*(_QWORD *)(v6 - 304), v40, v5);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v42 = *(_QWORD *)(v6 - 176);
  }
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v42, 0, 1, AssociatedTypeWitness);
}

void sub_1BDEAEFA0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  _QWORD v23[2];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;

  v40 = a2;
  v41 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_1BE1B2EE8();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v39 = (char *)v23 - v5;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  v38 = v6;
  v7 = MEMORY[0x1E0C80A78](v4);
  v31 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v28 = (char *)v23 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v26 = sub_1BE1B2EE8();
  v32 = *(_QWORD *)(v26 - 8);
  v11 = MEMORY[0x1E0C80A78](v26);
  v36 = (char *)v23 - v12;
  v35 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v27 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = swift_getAssociatedTypeWitness();
  v24 = sub_1BE1B2EE8();
  v23[1] = *(_QWORD *)(v24 - 8);
  v16 = MEMORY[0x1E0C80A78](v24);
  v34 = (char *)v23 - v17;
  v33 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v25 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v23[0] = (char *)v23 - v20;
  v21 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v42 = v21;
  v43 = AssociatedConformanceWitness;
  v44 = &protocol witness table for Int;
  v45 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAF278(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;

  CRExtensible.rawValue.getter(a1, v5 - 96);
  v6 = *(_QWORD *)(v5 - 96);
  if (v6 == 1)
  {
    *(_QWORD *)(v5 - 168) = v3;
    v17 = *(_QWORD *)(v5 - 224);
    v18 = v1;
    v19 = *v1;
    v20 = v18[1];
    *(_QWORD *)(v5 - 144) = v19;
    *(_QWORD *)(v5 - 136) = v20;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v22 = *(_QWORD *)(v5 - 128);
    v23 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v22;
    *(_QWORD *)(v5 - 136) = v23;
    sub_1BDDB6CA4(v19, v20);
    v25 = type metadata accessor for WeakRef(0, v4, AssociatedConformanceWitness, v24);
    v26 = *(_QWORD *)(v5 - 192);
    sub_1BE1966E8(v25, v26);
    sub_1BDDB796C(v22, v23);
    v27 = *(_QWORD *)(v5 - 200);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v4) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v17 + 8))(v26, *(_QWORD *)(v5 - 272));
      goto LABEL_9;
    }
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
    v46 = *(_QWORD *)(v5 - 168);
    v45(v46, v26, v4);
    v45(*(_QWORD *)(v5 - 264), v46, v4);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v44 = *(_QWORD *)(v5 - 160);
  }
  else if (v6)
  {
    v28 = v1;
    v29 = *v1;
    v30 = v28[1];
    *(_QWORD *)(v5 - 144) = v29;
    *(_QWORD *)(v5 - 136) = v30;
    v31 = *(_QWORD *)(v5 - 184);
    v32 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v33 = *(_QWORD *)(v5 - 128);
    v34 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v33;
    *(_QWORD *)(v5 - 136) = v34;
    sub_1BDDB6CA4(v29, v30);
    v36 = type metadata accessor for WeakRef(0, v31, v32, v35);
    v37 = *(_QWORD *)(v5 - 168);
    sub_1BE1966E8(v36, v37);
    sub_1BDDB796C(v33, v34);
    v38 = *(_QWORD *)(v5 - 176);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v37, 1, v31) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 248) + 8))(v37, *(_QWORD *)(v5 - 240));
      goto LABEL_9;
    }
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
    v48 = *(_QWORD *)(v5 - 256);
    v47(v48, v37, v31);
    v47(*(_QWORD *)(v5 - 232), v48, v31);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v44 = *(_QWORD *)(v5 - 160);
  }
  else
  {
    v7 = v1;
    v8 = *v1;
    v9 = v7[1];
    *(_QWORD *)(v5 - 144) = v8;
    *(_QWORD *)(v5 - 136) = v9;
    v10 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v11 = *(_QWORD *)(v5 - 128);
    v12 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v11;
    *(_QWORD *)(v5 - 136) = v12;
    sub_1BDDB6CA4(v8, v9);
    v14 = type metadata accessor for WeakRef(0, v2, v10, v13);
    v15 = *(_QWORD *)(v5 - 208);
    sub_1BE1966E8(v14, v15);
    sub_1BDDB796C(v11, v12);
    v16 = *(_QWORD *)(v5 - 216);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v15, 1, v2) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 296) + 8))(v15, *(_QWORD *)(v5 - 288));
LABEL_9:
      v39 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(*(_QWORD *)(v5 - 160), 1, 1, v39);
    }
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
    v42 = *(_QWORD *)(v5 - 304);
    v41(v42, v15, v2);
    v41(*(_QWORD *)(v5 - 280), v42, v2);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v44 = *(_QWORD *)(v5 - 160);
  }
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v44, 0, 1, AssociatedTypeWitness);
}

void sub_1BDEAF6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v13[16];

  v13[7] = a2;
  v13[8] = a1;
  v13[4] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v13[3] = (char *)v13 - v3;
  v13[2] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v13[1] = (char *)v13 - v5;
  swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v13[0] = (char *)v13 - v7;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v13[5] = *(_QWORD *)(v8 - 8);
  v13[6] = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  MEMORY[0x1E0C80A78](v10);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13[11] = AssociatedTypeWitness;
  v13[12] = AssociatedConformanceWitness;
  v13[13] = &protocol witness table for Int;
  v13[14] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEAF8F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  int v36;

  CRExtensible.rawValue.getter(a1, v6 - 88);
  v7 = *(_QWORD *)(v6 - 88);
  if (v7 == 1)
  {
    v20 = *v5;
    v21 = v5[1];
    *(_QWORD *)(v6 - 136) = *v5;
    *(_QWORD *)(v6 - 128) = v21;
    v22 = *(_QWORD *)(v6 - 192);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v24 = WeakRef.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v25 = *(_QWORD *)(v6 - 120);
    v26 = *(_QWORD *)(v6 - 112);
    v28 = *(_QWORD *)(v6 - 168);
    v27 = *(_QWORD *)(v6 - 160);
    v29 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v28 + 16))(v3, v29, v27, v24);
    sub_1BDDB6CA4(v20, v21);
    v30 = *(_QWORD *)(v6 - 200);
    v31 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v30, v31 ^ 1u, 1, v22);
    *(_QWORD *)(v6 - 136) = v25;
  }
  else
  {
    if (!v7)
    {
      v8 = *v5;
      v9 = v5[1];
      *(_QWORD *)(v6 - 136) = *v5;
      *(_QWORD *)(v6 - 128) = v9;
      v10 = swift_getAssociatedConformanceWitness();
      v11 = WeakRef.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
      v12 = *(_QWORD *)(v6 - 120);
      v13 = *(_QWORD *)(v6 - 112);
      v15 = *(_QWORD *)(v6 - 168);
      v14 = *(_QWORD *)(v6 - 160);
      v16 = *(_QWORD *)(v6 - 144);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v4, v16, v14, v11);
      sub_1BDDB6CA4(v8, v9);
      v17 = *(_QWORD *)(v6 - 208);
      v18 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v17, v18 ^ 1u, 1, v1);
      *(_QWORD *)(v6 - 136) = v12;
      *(_QWORD *)(v6 - 128) = v13;
      sub_1BDE56E90(v17, v6 - 136, v1, v10);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    }
    v32 = *v5;
    v33 = v5[1];
    *(_QWORD *)(v6 - 136) = *v5;
    *(_QWORD *)(v6 - 128) = v33;
    v22 = *(_QWORD *)(v6 - 176);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v34 = WeakRef.init(id:)((__n128 *)(v6 - 136), (__n128 *)(v6 - 120));
    v35 = *(_QWORD *)(v6 - 120);
    v26 = *(_QWORD *)(v6 - 112);
    v28 = *(_QWORD *)(v6 - 168);
    v27 = *(_QWORD *)(v6 - 160);
    v29 = *(_QWORD *)(v6 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v28 + 16))(v2, v29, v27, v34);
    sub_1BDDB6CA4(v32, v33);
    v30 = *(_QWORD *)(v6 - 184);
    v36 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v30, v36 ^ 1u, 1, v22);
    *(_QWORD *)(v6 - 136) = v35;
  }
  *(_QWORD *)(v6 - 128) = v26;
  sub_1BDE56E90(v30, v6 - 136, v22, AssociatedConformanceWitness);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
}

void WeakTagged_2.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEAEFA0);
}

uint64_t sub_1BDEAFBA4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_2(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEAF6C0);
  return swift_release();
}

uint64_t WeakTagged_2.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEAF6C0);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_2.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_2.subscript.getter(a2, a3);
}

void (*sub_1BDEAFD3C())(uint64_t **a1, char a2)
{
  return sub_1BDEAFD5C;
}

void sub_1BDEAFD5C(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t)sub_1BDEAF6C0, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_2.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEAEFA0);
}

void WeakTagged_2.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_2.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_2.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_2);
}

void WeakTagged_2.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_2.hash(into:));
}

void sub_1BDEAFDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_2.hash(into:));
}

uint64_t sub_1BDEAFDF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_2.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_2.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEAFE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_2.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_2.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEAFE54(a1, a2, a3, (char *)type metadata accessor for WeakTagged_2, 1, a4);
}

uint64_t sub_1BDEAFE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v57;
  int v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82[10];

  v58 = a5;
  v73 = a4;
  v74 = a3;
  v75 = a2;
  v76 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v67 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  MEMORY[0x1E0C80A78](v9);
  v68 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v63);
  v66 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v62 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v61 = (char *)&v57 - v16;
  MEMORY[0x1E0C80A78](v15);
  v70 = (uint64_t)&v57 - v17;
  v81 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v81);
  v79 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v71 = (uint64_t)&v57 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v80 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v78 = (char *)&v57 - v26;
  MEMORY[0x1E0C80A78](v25);
  v69 = (uint64_t)&v57 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v77 = (char *)&v57 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v72 = (char *)&v57 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v57 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v57 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v60 = v38;
    v57 = inited;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEB0B9CLL);
    }
    v44 = v69;
    sub_1BDDA2E8C((uint64_t)v35, v69, type metadata accessor for Proto_Value);
    v45 = *(_QWORD *)(v44 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v46 = v70;
    sub_1BDD86DEC(v45, v70, &qword_1ED6F26F0);
    v47 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48);
    if (v59(v46, 1, v47) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v46, &qword_1ED6F26F0);
      v48 = v71;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v48 = v71;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v46, v71, type metadata accessor for Proto_TaggedValue);
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v46, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v50 = *(int *)(v81 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v48 + v50) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v44, type metadata accessor for Proto_Value);
    v51 = *(_QWORD *)(v48 + *(int *)(v81 + 20));
    swift_beginAccess();
    v52 = *(_QWORD *)(v51 + 16);
    sub_1BDD9C3E0(v48, type metadata accessor for Proto_TaggedValue);
    v82[0] = v52;
    v53 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v73)(0, v75, v74);
    v54 = (char *)(v76 + *(int *)(v53 + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v73 = v54;
    v70 = AssociatedConformanceWitness;
    v71 = AssociatedTypeWitness;
    CRExtensible.init(rawValue:)((uint64_t)v82, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v54);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEB0BAC(uint64_t a1, uint64_t a2)
{
  return WeakTagged_2.encode(to:)(a1, a2);
}

uint64_t WeakTagged_2.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.Enum, (uint64_t)&associated conformance descriptor for Tagged_2.Tagged_2.Enum: RawRepresentable);
}

uint64_t sub_1BDEB0BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v50[22];
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _UNKNOWN **v61;
  uint64_t v62;
  uint64_t v63;

  v50[18] = a5;
  v50[9] = a4;
  v50[10] = a3;
  v50[8] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v6 = MEMORY[0x1E0C80A78](v5);
  v50[17] = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v50[15] = (char *)v50 - v8;
  v53 = type metadata accessor for Proto_KeyPath(0);
  v50[14] = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v52 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Proto_Reference(0);
  v10 = MEMORY[0x1E0C80A78](v51);
  v50[16] = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v50[11] = (char *)v50 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v14 = MEMORY[0x1E0C80A78](v13);
  v50[21] = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v56 = (char *)v50 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v55 = (char *)v50 - v19;
  MEMORY[0x1E0C80A78](v18);
  v50[20] = (char *)v50 - v20;
  v63 = type metadata accessor for Proto_Value(0);
  v50[12] = *(_QWORD *)(v63 - 8);
  v21 = MEMORY[0x1E0C80A78](v63);
  v54 = (char *)v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v58 = (char *)v50 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v50[13] = (char *)v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)v50 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)v50 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v35 = (char *)v50 - v34;
  MEMORY[0x1E0C80A78](v33);
  v50[7] = (char *)v50 - v36;
  v37 = type metadata accessor for Proto_TaggedValue(0);
  v38 = MEMORY[0x1E0C80A78](v37);
  v40 = (char *)v50 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v38);
  v43 = (char *)v50 - v42;
  MEMORY[0x1E0C80A78](v41);
  v45 = (char *)v50 - v44;
  v46 = v57;
  result = sub_1BDE25870();
  if (!v46)
  {
    v50[0] = v45;
    v50[1] = v35;
    v50[2] = v32;
    v50[3] = v29;
    v50[5] = v43;
    v50[6] = v37;
    v50[4] = 0;
    v50[19] = v40;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    swift_retain();
    v59 = AssociatedTypeWitness;
    v60 = AssociatedConformanceWitness;
    v61 = &protocol witness table for Int;
    v62 = MEMORY[0x1E0DEB428];
    type metadata accessor for CRExtensible();
  }
  return result;
}

uint64_t (*WeakTagged_3.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_3.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_3.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_3.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_3.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_3.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_3.init(_:id:));
}

void WeakTagged_3.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_3, a4);
}

void WeakTagged_3.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_3);
}

void WeakTagged_3.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_3(0, a2, a3, a4);
  type metadata accessor for WeakTagged_3(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB1CC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_3.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB1D80(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_3.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB1EAC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_3.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB1FDC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_3.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB210C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_3.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  _QWORD v29[3];
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _UNKNOWN **v59;
  uint64_t v60;

  v54 = a2;
  v55 = a3;
  v53 = a1;
  v56 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = sub_1BE1B2EE8();
  v41 = *(_QWORD *)(v42 - 8);
  v5 = MEMORY[0x1E0C80A78](v42);
  v50 = (char *)v29 - v6;
  v51 = AssociatedTypeWitness;
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v43 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v40 = (char *)v29 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v38 = sub_1BE1B2EE8();
  v37 = *(_QWORD *)(v38 - 8);
  v11 = MEMORY[0x1E0C80A78](v38);
  v52 = (char *)v29 - v12;
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  v13 = MEMORY[0x1E0C80A78](v11);
  v39 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v36 = (char *)v29 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v34 = sub_1BE1B2EE8();
  v33 = *(_QWORD *)(v34 - 8);
  v17 = MEMORY[0x1E0C80A78](v34);
  v46 = (char *)v29 - v18;
  v45 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v35 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v32 = (char *)v29 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v30 = sub_1BE1B2EE8();
  v29[2] = *(_QWORD *)(v30 - 8);
  v23 = MEMORY[0x1E0C80A78](v30);
  v44 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v23);
  v31 = (char *)v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v29[1] = (char *)v29 - v26;
  v27 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v57 = v27;
  v58 = AssociatedConformanceWitness;
  v59 = &protocol witness table for Int;
  v60 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB254C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t AssociatedTypeWitness;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;

  CRExtensible.rawValue.getter(a1, v7 - 96);
  v8 = *(_QWORD *)(v7 - 96);
  if (v8 == 2)
  {
    v17 = *v2;
    v16 = v2[1];
    *(_QWORD *)(v7 - 144) = *v2;
    *(_QWORD *)(v7 - 136) = v16;
    *(_QWORD *)(v7 - 192) = v6;
    v18 = *(_QWORD *)(v7 - 216);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
    v20 = *(_QWORD *)(v7 - 128);
    v21 = *(_QWORD *)(v7 - 120);
    *(_QWORD *)(v7 - 144) = v20;
    *(_QWORD *)(v7 - 136) = v21;
    v22 = *(_QWORD *)(v7 - 160);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 16);
    sub_1BDDB6CA4(v17, v16);
    v24 = *(_QWORD *)(v7 - 184);
    v23(v7 - 144, v18, AssociatedConformanceWitness, *(_QWORD *)(v7 - 168), v22);
    sub_1BDDB796C(v20, v21);
    v25 = *(_QWORD *)(v7 - 224);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v18) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 304) + 8))(*(_QWORD *)(v7 - 184), *(_QWORD *)(v7 - 296));
      goto LABEL_12;
    }
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
    v52 = *(_QWORD *)(v7 - 312);
    v51(v52, *(_QWORD *)(v7 - 184), v18);
    v51(*(_QWORD *)(v7 - 288), v52, v18);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v50 = *(_QWORD *)(v7 - 152);
  }
  else if (v8 == 1)
  {
    v27 = *v2;
    v26 = v2[1];
    *(_QWORD *)(v7 - 144) = *v2;
    *(_QWORD *)(v7 - 136) = v26;
    *(_QWORD *)(v7 - 184) = v3;
    v28 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
    v29 = *(_QWORD *)(v7 - 128);
    v30 = *(_QWORD *)(v7 - 120);
    *(_QWORD *)(v7 - 144) = v29;
    *(_QWORD *)(v7 - 136) = v30;
    v31 = *(_QWORD *)(v7 - 160);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v31 + 16);
    sub_1BDDB6CA4(v27, v26);
    v33 = *(_QWORD *)(v7 - 232);
    v32(v7 - 144, v1, v28, *(_QWORD *)(v7 - 168), v31);
    sub_1BDDB796C(v29, v30);
    v34 = *(_QWORD *)(v7 - 240);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v1) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 336) + 8))(v33, *(_QWORD *)(v7 - 328));
      goto LABEL_12;
    }
    v53 = v33;
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
    v55 = *(_QWORD *)(v7 - 344);
    v54(v55, v53, v1);
    v54(*(_QWORD *)(v7 - 320), v55, v1);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v50 = *(_QWORD *)(v7 - 152);
  }
  else if (v8)
  {
    v36 = *v2;
    v35 = v2[1];
    *(_QWORD *)(v7 - 144) = *v2;
    *(_QWORD *)(v7 - 136) = v35;
    *(_QWORD *)(v7 - 184) = v3;
    v37 = *(_QWORD *)(v7 - 192);
    v38 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
    v39 = *(_QWORD *)(v7 - 128);
    v40 = *(_QWORD *)(v7 - 120);
    *(_QWORD *)(v7 - 144) = v39;
    *(_QWORD *)(v7 - 136) = v40;
    v41 = *(_QWORD *)(v7 - 160);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v41 + 16);
    sub_1BDDB6CA4(v36, v35);
    v43 = *(_QWORD *)(v7 - 200);
    v42(v7 - 144, v37, v38, *(_QWORD *)(v7 - 168), v41);
    sub_1BDDB796C(v39, v40);
    v44 = *(_QWORD *)(v7 - 208);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v37) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 272) + 8))(v43, *(_QWORD *)(v7 - 264));
      goto LABEL_12;
    }
    v56 = v43;
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
    v58 = *(_QWORD *)(v7 - 280);
    v57(v58, v56, v37);
    v57(*(_QWORD *)(v7 - 256), v58, v37);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v50 = *(_QWORD *)(v7 - 152);
  }
  else
  {
    v10 = *v2;
    v9 = v2[1];
    *(_QWORD *)(v7 - 144) = *v2;
    *(_QWORD *)(v7 - 136) = v9;
    *(_QWORD *)(v7 - 192) = v6;
    v11 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
    v12 = *(_QWORD *)(v7 - 128);
    v13 = *(_QWORD *)(v7 - 120);
    *(_QWORD *)(v7 - 144) = v12;
    *(_QWORD *)(v7 - 136) = v13;
    v14 = *(_QWORD *)(v7 - 160);
    *(_QWORD *)(v7 - 184) = *(_QWORD *)(v14 + 16);
    sub_1BDDB6CA4(v10, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v7 - 184))(v7 - 144, v4, v11, *(_QWORD *)(v7 - 168), v14);
    sub_1BDDB796C(v12, v13);
    v15 = *(_QWORD *)(v7 - 248);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v5, 1, v4) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 368) + 8))(v5, *(_QWORD *)(v7 - 360));
LABEL_12:
      v45 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(*(_QWORD *)(v7 - 152), 1, 1, v45);
    }
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
    v48 = *(_QWORD *)(v7 - 376);
    v47(v48, v5, v4);
    v47(*(_QWORD *)(v7 - 352), v48, v4);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v50 = *(_QWORD *)(v7 - 152);
  }
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v50, 0, 1, AssociatedTypeWitness);
}

void sub_1BDEB2AC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  _QWORD v27[3];
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _UNKNOWN **v55;
  uint64_t v56;

  v51 = a1;
  v52 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v39 = sub_1BE1B2EE8();
  v38 = *(_QWORD *)(v39 - 8);
  v3 = MEMORY[0x1E0C80A78](v39);
  v49 = (char *)v27 - v4;
  v50 = AssociatedTypeWitness;
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v40 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v37 = (char *)v27 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v35 = sub_1BE1B2EE8();
  v42 = *(_QWORD *)(v35 - 8);
  v9 = MEMORY[0x1E0C80A78](v35);
  v46 = (char *)v27 - v10;
  v47 = v8;
  v45 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v36 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v34 = (char *)v27 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v32 = sub_1BE1B2EE8();
  v31 = *(_QWORD *)(v32 - 8);
  v15 = MEMORY[0x1E0C80A78](v32);
  v44 = (char *)v27 - v16;
  v43 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v33 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v30 = (char *)v27 - v19;
  v20 = swift_getAssociatedTypeWitness();
  v28 = sub_1BE1B2EE8();
  v27[2] = *(_QWORD *)(v28 - 8);
  v21 = MEMORY[0x1E0C80A78](v28);
  v41 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v21);
  v29 = (char *)v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v27[1] = (char *)v27 - v24;
  v25 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v53 = v25;
  v54 = AssociatedConformanceWitness;
  v55 = &protocol witness table for Int;
  v56 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB2E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t AssociatedTypeWitness;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  CRExtensible.rawValue.getter(a1, v5 - 96);
  v6 = *(_QWORD *)(v5 - 96);
  if (v6 == 2)
  {
    v15 = *(_QWORD *)(v5 - 232);
    v16 = *v4;
    v17 = v4[1];
    *(_QWORD *)(v5 - 144) = *v4;
    *(_QWORD *)(v5 - 136) = v17;
    v2 = *(_QWORD *)(v5 - 192);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v19 = *(_QWORD *)(v5 - 128);
    v20 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v19;
    *(_QWORD *)(v5 - 136) = v20;
    sub_1BDDB6CA4(v16, v17);
    v22 = type metadata accessor for WeakRef(0, v2, AssociatedConformanceWitness, v21);
    v23 = *(_QWORD *)(v5 - 200);
    sub_1BE1966E8(v22, v23);
    sub_1BDDB796C(v19, v20);
    v24 = *(_QWORD *)(v5 - 208);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v2) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(v15 + 8))(v23, *(_QWORD *)(v5 - 288));
      goto LABEL_12;
    }
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
    v50 = *(_QWORD *)(v5 - 296);
    v49(v50, v23, v2);
    v51 = v5 - 24;
    goto LABEL_16;
  }
  if (v6 == 1)
  {
    v25 = *v4;
    v26 = v4[1];
    *(_QWORD *)(v5 - 144) = *v4;
    *(_QWORD *)(v5 - 136) = v26;
    v27 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v28 = *(_QWORD *)(v5 - 128);
    v29 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v28;
    *(_QWORD *)(v5 - 136) = v29;
    sub_1BDDB6CA4(v25, v26);
    v31 = type metadata accessor for WeakRef(0, v2, v27, v30);
    v32 = *(_QWORD *)(v5 - 216);
    sub_1BE1966E8(v31, v32);
    sub_1BDDB796C(v28, v29);
    v33 = *(_QWORD *)(v5 - 224);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v2) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 320) + 8))(v32, *(_QWORD *)(v5 - 312));
      goto LABEL_12;
    }
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
    v50 = *(_QWORD *)(v5 - 328);
    v49(v50, v32, v2);
    v51 = v5 - 48;
LABEL_16:
    v52 = *(_QWORD *)(v51 - 256);
LABEL_18:
    v49(v52, v50, v2);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v48 = *(_QWORD *)(v5 - 152);
    goto LABEL_19;
  }
  if (v6)
  {
    v34 = *v4;
    v35 = v4[1];
    *(_QWORD *)(v5 - 144) = *v4;
    *(_QWORD *)(v5 - 136) = v35;
    v2 = *(_QWORD *)(v5 - 168);
    v36 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
    v37 = *(_QWORD *)(v5 - 128);
    v38 = *(_QWORD *)(v5 - 120);
    *(_QWORD *)(v5 - 144) = v37;
    *(_QWORD *)(v5 - 136) = v38;
    sub_1BDDB6CA4(v34, v35);
    v40 = type metadata accessor for WeakRef(0, v2, v36, v39);
    v41 = *(_QWORD *)(v5 - 176);
    sub_1BE1966E8(v40, v41);
    sub_1BDDB796C(v37, v38);
    v42 = *(_QWORD *)(v5 - 184);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v41, 1, v2) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 264) + 8))(v41, *(_QWORD *)(v5 - 256));
      goto LABEL_12;
    }
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
    v50 = *(_QWORD *)(v5 - 272);
    v49(v50, v41, v2);
    v52 = *(_QWORD *)(v5 - 248);
    goto LABEL_18;
  }
  v7 = *v4;
  v8 = v4[1];
  *(_QWORD *)(v5 - 144) = *v4;
  *(_QWORD *)(v5 - 136) = v8;
  v9 = swift_getAssociatedConformanceWitness();
  WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
  v10 = *(_QWORD *)(v5 - 128);
  v11 = *(_QWORD *)(v5 - 120);
  *(_QWORD *)(v5 - 144) = v10;
  *(_QWORD *)(v5 - 136) = v11;
  sub_1BDDB6CA4(v7, v8);
  v13 = type metadata accessor for WeakRef(0, v3, v9, v12);
  sub_1BE1966E8(v13, v1);
  sub_1BDDB796C(v10, v11);
  v14 = *(_QWORD *)(v5 - 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 352) + 8))(v1, *(_QWORD *)(v5 - 344));
LABEL_12:
    v43 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(*(_QWORD *)(v5 - 152), 1, 1, v43);
  }
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v46 = *(_QWORD *)(v5 - 360);
  v45(v46, v1, v3);
  v45(*(_QWORD *)(v5 - 336), v46, v3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(v5 - 152);
LABEL_19:
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v48, 0, 1, AssociatedTypeWitness);
}

void sub_1BDEB3340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v16[20];

  v16[10] = a2;
  v16[11] = a1;
  v16[7] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v16[6] = (char *)v16 - v3;
  v16[5] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v16[4] = (char *)v16 - v5;
  v16[3] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v16[2] = (char *)v16 - v7;
  v16[1] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v16[0] = (char *)v16 - v9;
  swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  v16[8] = *(_QWORD *)(v10 - 8);
  v16[9] = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v12 = MEMORY[0x1E0C80A78](v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16[14] = AssociatedTypeWitness;
  v16[15] = AssociatedConformanceWitness;
  v16[16] = &protocol witness table for Int;
  v16[17] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB35EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  v7 = *(_QWORD *)(v6 - 96);
  if (v7 == 2)
  {
    v21 = v1;
    v22 = *v1;
    v23 = v21[1];
    *(_QWORD *)(v6 - 144) = v22;
    *(_QWORD *)(v6 - 136) = v23;
    v24 = *(_QWORD *)(v6 - 200);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v26 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v27 = *(_QWORD *)(v6 - 128);
    v28 = *(_QWORD *)(v6 - 120);
    v30 = *(_QWORD *)(v6 - 176);
    v29 = *(_QWORD *)(v6 - 168);
    v31 = *(_QWORD *)(v6 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v30 + 16))(v5, v31, v29, v26);
    sub_1BDDB6CA4(v22, v23);
    v32 = *(_QWORD *)(v6 - 208);
    v33 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, v33 ^ 1u, 1, v24);
    *(_QWORD *)(v6 - 144) = v27;
    *(_QWORD *)(v6 - 136) = v28;
    sub_1BDE56E90(v32, v6 - 144, v24, AssociatedConformanceWitness);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v31, v29);
  }
  else if (v7 == 1)
  {
    v34 = v1;
    v35 = *v1;
    v36 = v34[1];
    *(_QWORD *)(v6 - 144) = v35;
    *(_QWORD *)(v6 - 136) = v36;
    v37 = *(_QWORD *)(v6 - 216);
    v38 = swift_getAssociatedConformanceWitness();
    v39 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v40 = *(_QWORD *)(v6 - 128);
    v41 = *(_QWORD *)(v6 - 120);
    v43 = *(_QWORD *)(v6 - 176);
    v42 = *(_QWORD *)(v6 - 168);
    v44 = *(_QWORD *)(v6 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v43 + 16))(v3, v44, v42, v39);
    sub_1BDDB6CA4(v35, v36);
    v45 = *(_QWORD *)(v6 - 224);
    v46 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v45, v46 ^ 1u, 1, v37);
    *(_QWORD *)(v6 - 144) = v40;
    *(_QWORD *)(v6 - 136) = v41;
    sub_1BDE56E90(v45, v6 - 144, v37, v38);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v44, v42);
  }
  else if (v7)
  {
    v47 = v1;
    v48 = *v1;
    v49 = v47[1];
    *(_QWORD *)(v6 - 144) = v48;
    *(_QWORD *)(v6 - 136) = v49;
    v50 = *(_QWORD *)(v6 - 184);
    v51 = swift_getAssociatedConformanceWitness();
    v52 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v53 = *(_QWORD *)(v6 - 128);
    v54 = *(_QWORD *)(v6 - 120);
    v56 = *(_QWORD *)(v6 - 176);
    v55 = *(_QWORD *)(v6 - 168);
    v57 = *(_QWORD *)(v6 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v56 + 16))(v4, v57, v55, v52);
    sub_1BDDB6CA4(v48, v49);
    v58 = *(_QWORD *)(v6 - 192);
    v59 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v58, v59 ^ 1u, 1, v50);
    *(_QWORD *)(v6 - 144) = v53;
    *(_QWORD *)(v6 - 136) = v54;
    sub_1BDE56E90(v58, v6 - 144, v50, v51);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v57, v55);
  }
  else
  {
    v8 = *v1;
    v9 = v1[1];
    *(_QWORD *)(v6 - 144) = *v1;
    *(_QWORD *)(v6 - 136) = v9;
    v10 = *(_QWORD *)(v6 - 232);
    v11 = swift_getAssociatedConformanceWitness();
    v12 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
    v13 = *(_QWORD *)(v6 - 128);
    v14 = *(_QWORD *)(v6 - 120);
    v16 = *(_QWORD *)(v6 - 176);
    v15 = *(_QWORD *)(v6 - 168);
    v17 = *(_QWORD *)(v6 - 152);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16))(v2, v17, v15, v12);
    sub_1BDDB6CA4(v8, v9);
    v18 = *(_QWORD *)(v6 - 240);
    v19 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v18, v19 ^ 1u, 1, v10);
    *(_QWORD *)(v6 - 144) = v13;
    *(_QWORD *)(v6 - 136) = v14;
    sub_1BDE56E90(v18, v6 - 144, v10, v11);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v17, v15);
  }
}

void WeakTagged_3.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEB2AC0);
}

uint64_t sub_1BDEB39B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_3(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEB3340);
  return swift_release();
}

uint64_t WeakTagged_3.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEB3340);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_3.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_3.subscript.getter(a2, a3);
}

void (*sub_1BDEB3B50())(uint64_t **a1, char a2)
{
  return sub_1BDEB3B70;
}

void sub_1BDEB3B70(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t)sub_1BDEB3340, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_3.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEB2AC0);
}

void WeakTagged_3.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_3.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_3.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_3);
}

void WeakTagged_3.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_3.hash(into:));
}

void sub_1BDEB3BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_3.hash(into:));
}

uint64_t sub_1BDEB3C08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_3.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_3.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEB3C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_3.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_3.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEB3C68(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_3, 1, a4);
}

uint64_t sub_1BDEB3C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, uint64_t)@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v57[2];
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t (*v72)(_QWORD, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD v82[10];

  v57[1] = a5;
  v72 = a4;
  v73 = a3;
  v74 = a2;
  v75 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v67 = (char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  MEMORY[0x1E0C80A78](v9);
  v68 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v78);
  v66 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v63 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v61 = (char *)v57 - v16;
  MEMORY[0x1E0C80A78](v15);
  v69 = (uint64_t)v57 - v17;
  v81 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v81);
  v62 = (char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v70 = (uint64_t)v57 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v79 = (char *)v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v60 = (char *)v57 - v26;
  MEMORY[0x1E0C80A78](v25);
  v80 = (char *)v57 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v77 = (char *)v57 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v71 = (char *)v57 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v57 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v57 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEB4A10);
    }
    v43 = (uint64_t)v80;
    sub_1BDDA2E8C((uint64_t)v35, (uint64_t)v80, type metadata accessor for Proto_Value);
    v44 = *(_QWORD *)(v43 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v45 = v69;
    sub_1BDD86DEC(v44, v69, &qword_1ED6F26F0);
    v46 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48);
    v47 = v58(v45, 1, v46);
    v76 = v21;
    if (v47 == 1)
    {
      swift_retain();
      sub_1BDD86E30(v45, &qword_1ED6F26F0);
      v48 = v70;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v48 = v70;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v45, v70, type metadata accessor for Proto_TaggedValue);
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v50 = *(int *)(v81 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v48 + v50) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v80, type metadata accessor for Proto_Value);
    v51 = *(_QWORD *)(v48 + *(int *)(v81 + 20));
    swift_beginAccess();
    v52 = *(_QWORD *)(v51 + 16);
    sub_1BDD9C3E0(v48, type metadata accessor for Proto_TaggedValue);
    v82[0] = v52;
    v53 = v72(0, v74, v73);
    v54 = (char *)(v75 + *(int *)(v53 + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v80 = v54;
    v72 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))AssociatedTypeWitness;
    CRExtensible.init(rawValue:)((uint64_t)v82, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v54);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEB4A24(uint64_t a1, uint64_t a2)
{
  return WeakTagged_3.encode(to:)(a1, a2);
}

uint64_t WeakTagged_3.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.Enum, (uint64_t)&associated conformance descriptor for Tagged_3.Tagged_3.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_4.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_4.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_4.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_4.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_4.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_4.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_4.init(_:id:));
}

void WeakTagged_4.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_4, a4);
}

void WeakTagged_4.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_4);
}

void WeakTagged_4.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_4(0, a2, a3, a4);
  type metadata accessor for WeakTagged_4(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB4BB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_4.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB4C74(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_4.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB4DA0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_4.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB4ED0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_4.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB5000(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_4.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB5130(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_4.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t AssociatedConformanceWitness;
  _QWORD v35[3];
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _UNKNOWN **v72;
  uint64_t v73;

  v67 = a2;
  v68 = a3;
  v66 = a1;
  v69 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = sub_1BE1B2EE8();
  v51 = *(_QWORD *)(v52 - 8);
  v5 = MEMORY[0x1E0C80A78](v52);
  v55 = (char *)v35 - v6;
  v65 = AssociatedTypeWitness;
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v53 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v50 = (char *)v35 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v48 = sub_1BE1B2EE8();
  v47 = *(_QWORD *)(v48 - 8);
  v11 = MEMORY[0x1E0C80A78](v48);
  v63 = (char *)v35 - v12;
  v64 = v10;
  v61 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v49 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v46 = (char *)v35 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v44 = sub_1BE1B2EE8();
  v43 = *(_QWORD *)(v44 - 8);
  v17 = MEMORY[0x1E0C80A78](v44);
  v60 = (char *)v35 - v18;
  v62 = v16;
  v59 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v45 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v42 = (char *)v35 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v40 = sub_1BE1B2EE8();
  v39 = *(_QWORD *)(v40 - 8);
  v23 = MEMORY[0x1E0C80A78](v40);
  v58 = (char *)v35 - v24;
  v57 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v41 = (char *)v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v38 = (char *)v35 - v27;
  v28 = swift_getAssociatedTypeWitness();
  v36 = sub_1BE1B2EE8();
  v35[2] = *(_QWORD *)(v36 - 8);
  v29 = MEMORY[0x1E0C80A78](v36);
  v56 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v29);
  v37 = (char *)v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v35[1] = (char *)v35 - v32;
  v33 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v70 = v33;
  v71 = AssociatedConformanceWitness;
  v72 = &protocol witness table for Int;
  v73 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB5644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t AssociatedTypeWitness;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  CRExtensible.rawValue.getter(a1, v7 - 96);
  switch(*(_QWORD *)(v7 - 96))
  {
    case 0:
      v8 = *v4;
      v9 = v4[1];
      *(_QWORD *)(v7 - 144) = *v4;
      *(_QWORD *)(v7 - 136) = v9;
      v10 = v8;
      *(_QWORD *)(v7 - 280) = v3;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v13 = *(_QWORD *)(v7 - 128);
      v12 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v13;
      *(_QWORD *)(v7 - 136) = v12;
      v14 = *(_QWORD *)(v7 - 160);
      *(_QWORD *)(v7 - 184) = *(_QWORD *)(v14 + 16);
      sub_1BDDB6CA4(v10, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v7 - 184))(v7 - 144, v5, AssociatedConformanceWitness, *(_QWORD *)(v7 - 168), v14);
      sub_1BDDB796C(v13, v12);
      v15 = *(_QWORD *)(v7 - 256);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v2, 1, v5) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 432) + 8))(v2, *(_QWORD *)(v7 - 424));
        goto LABEL_6;
      }
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
      v60 = *(_QWORD *)(v7 - 440);
      v59(v60, v2, v5);
      v59(*(_QWORD *)(v7 - 416), v60, v5);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v25 = *(_QWORD *)(v7 - 152);
      goto LABEL_21;
    case 1:
      v16 = *v4;
      v17 = v4[1];
      *(_QWORD *)(v7 - 144) = *v4;
      *(_QWORD *)(v7 - 136) = v17;
      *(_QWORD *)(v7 - 280) = v3;
      v18 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v19 = *(_QWORD *)(v7 - 128);
      v20 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v19;
      *(_QWORD *)(v7 - 136) = v20;
      v21 = *(_QWORD *)(v7 - 160);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v21 + 16);
      sub_1BDDB6CA4(v16, v17);
      v23 = *(_QWORD *)(v7 - 240);
      v22(v7 - 144, v1, v18, *(_QWORD *)(v7 - 168), v21);
      sub_1BDDB796C(v19, v20);
      v24 = *(_QWORD *)(v7 - 248);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v1) != 1)
      {
        v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
        v63 = *(_QWORD *)(v7 - 408);
        v62(v63, v23, v1);
        v62(*(_QWORD *)(v7 - 384), v63, v1);
        v64 = swift_getAssociatedTypeWitness();
        v65 = *(_QWORD *)(v7 - 152);
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v65, 0, 1, v64);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 400) + 8))(v23, *(_QWORD *)(v7 - 392));
LABEL_6:
      v25 = *(_QWORD *)(v7 - 152);
      goto LABEL_14;
    case 2:
      v26 = *v4;
      v27 = v4[1];
      *(_QWORD *)(v7 - 144) = *v4;
      *(_QWORD *)(v7 - 136) = v27;
      *(_QWORD *)(v7 - 184) = v6;
      v28 = *(_QWORD *)(v7 - 208);
      v29 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v30 = *(_QWORD *)(v7 - 128);
      v31 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v30;
      *(_QWORD *)(v7 - 136) = v31;
      v32 = *(_QWORD *)(v7 - 160);
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16);
      sub_1BDDB6CA4(v26, v27);
      v34 = *(_QWORD *)(v7 - 224);
      v33(v7 - 144, v28, v29, *(_QWORD *)(v7 - 168), v32);
      sub_1BDDB796C(v30, v31);
      v35 = *(_QWORD *)(v7 - 232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 368) + 8))(v34, *(_QWORD *)(v7 - 360));
        goto LABEL_11;
      }
      v66 = v34;
      v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
      v68 = *(_QWORD *)(v7 - 376);
      v67(v68, v66, v28);
      v69 = v7 - 96;
      goto LABEL_19;
    case 3:
      v36 = *v4;
      v37 = v4[1];
      *(_QWORD *)(v7 - 144) = *v4;
      *(_QWORD *)(v7 - 136) = v37;
      *(_QWORD *)(v7 - 184) = v6;
      v28 = *(_QWORD *)(v7 - 192);
      v38 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v39 = *(_QWORD *)(v7 - 128);
      v40 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v39;
      *(_QWORD *)(v7 - 136) = v40;
      v41 = *(_QWORD *)(v7 - 160);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v41 + 16);
      sub_1BDDB6CA4(v36, v37);
      v43 = *(_QWORD *)(v7 - 200);
      v42(v7 - 144, v28, v38, *(_QWORD *)(v7 - 168), v41);
      sub_1BDDB796C(v39, v40);
      v44 = *(_QWORD *)(v7 - 216);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 336) + 8))(v43, *(_QWORD *)(v7 - 328));
LABEL_11:
        v25 = *(_QWORD *)(v7 - 152);
        goto LABEL_14;
      }
      v70 = v43;
      v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v68 = *(_QWORD *)(v7 - 344);
      v67(v68, v70, v28);
      v69 = v7 - 64;
LABEL_19:
      v67(*(_QWORD *)(v69 - 256), v68, v28);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v25 = *(_QWORD *)(v7 - 152);
      goto LABEL_21;
    default:
      v45 = *v4;
      v46 = v4[1];
      *(_QWORD *)(v7 - 144) = *v4;
      *(_QWORD *)(v7 - 136) = v46;
      *(_QWORD *)(v7 - 280) = v3;
      v47 = *(_QWORD *)(v7 - 184);
      v48 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v49 = *(_QWORD *)(v7 - 128);
      v50 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v49;
      *(_QWORD *)(v7 - 136) = v50;
      v51 = *(_QWORD *)(v7 - 160);
      v52 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v51 + 16);
      sub_1BDDB6CA4(v45, v46);
      v53 = v48;
      v54 = *(_QWORD *)(v7 - 264);
      v52(v7 - 144, v47, v53, *(_QWORD *)(v7 - 168), v51);
      sub_1BDDB796C(v49, v50);
      v55 = *(_QWORD *)(v7 - 272);
      v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v54, 1, v47);
      v25 = *(_QWORD *)(v7 - 152);
      if (v56 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 304) + 8))(v54, *(_QWORD *)(v7 - 296));
LABEL_14:
        v57 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v25, 1, 1, v57);
      }
      else
      {
        v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
        v72 = *(_QWORD *)(v7 - 312);
        v73 = v54;
        v74 = *(_QWORD *)(v7 - 184);
        v71(v72, v73, v74);
        v71(*(_QWORD *)(v7 - 288), v72, v74);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_21:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v25, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDEB5D08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedConformanceWitness;
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _UNKNOWN **v68;
  uint64_t v69;

  v64 = a1;
  v65 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = sub_1BE1B2EE8();
  v51 = *(_QWORD *)(v48 - 8);
  v3 = MEMORY[0x1E0C80A78](v48);
  v53 = (char *)v33 - v4;
  v54 = AssociatedTypeWitness;
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v49 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v50 = (char *)v33 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v46 = sub_1BE1B2EE8();
  v45 = *(_QWORD *)(v46 - 8);
  v9 = MEMORY[0x1E0C80A78](v46);
  v62 = (char *)v33 - v10;
  v63 = v8;
  v60 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v47 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v44 = (char *)v33 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v42 = sub_1BE1B2EE8();
  v41 = *(_QWORD *)(v42 - 8);
  v15 = MEMORY[0x1E0C80A78](v42);
  v59 = (char *)v33 - v16;
  v61 = v14;
  v58 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v43 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v40 = (char *)v33 - v19;
  v20 = swift_getAssociatedTypeWitness();
  v38 = sub_1BE1B2EE8();
  v37 = *(_QWORD *)(v38 - 8);
  v21 = MEMORY[0x1E0C80A78](v38);
  v57 = (char *)v33 - v22;
  v56 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v39 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v36 = (char *)v33 - v25;
  v26 = swift_getAssociatedTypeWitness();
  v34 = sub_1BE1B2EE8();
  v33[1] = *(_QWORD *)(v34 - 8);
  v27 = MEMORY[0x1E0C80A78](v34);
  v55 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v27);
  v35 = (char *)v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v33[0] = (char *)v33 - v30;
  v31 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v66 = v31;
  v67 = AssociatedConformanceWitness;
  v68 = &protocol witness table for Int;
  v69 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB6184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t AssociatedTypeWitness;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);

  CRExtensible.rawValue.getter(a1, v5 - 96);
  switch(*(_QWORD *)(v5 - 96))
  {
    case 0:
      v6 = *v3;
      v7 = v3[1];
      *(_QWORD *)(v5 - 144) = *v3;
      *(_QWORD *)(v5 - 136) = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v9 = *(_QWORD *)(v5 - 128);
      v10 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v9;
      *(_QWORD *)(v5 - 136) = v10;
      sub_1BDDB6CA4(v6, v7);
      v12 = type metadata accessor for WeakRef(0, v2, AssociatedConformanceWitness, v11);
      sub_1BE1966E8(v12, v4);
      sub_1BDDB796C(v9, v10);
      v13 = *(_QWORD *)(v5 - 232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v4, 1, v2) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 408) + 8))(v4, *(_QWORD *)(v5 - 400));
        v14 = *(_QWORD *)(v5 - 152);
        goto LABEL_13;
      }
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v60 = *(_QWORD *)(v5 - 416);
      v59(v60, v4, v2);
      v59(*(_QWORD *)(v5 - 392), v60, v2);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v14 = *(_QWORD *)(v5 - 152);
      goto LABEL_19;
    case 1:
      v15 = *v3;
      v16 = v3[1];
      *(_QWORD *)(v5 - 144) = *v3;
      *(_QWORD *)(v5 - 136) = v16;
      v17 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v18 = *(_QWORD *)(v5 - 128);
      v19 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v18;
      *(_QWORD *)(v5 - 136) = v19;
      sub_1BDDB6CA4(v15, v16);
      v21 = type metadata accessor for WeakRef(0, v1, v17, v20);
      v22 = *(_QWORD *)(v5 - 216);
      sub_1BE1966E8(v21, v22);
      sub_1BDDB796C(v18, v19);
      v23 = *(_QWORD *)(v5 - 224);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v1) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 376) + 8))(v22, *(_QWORD *)(v5 - 368));
        goto LABEL_10;
      }
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
      v63 = *(_QWORD *)(v5 - 384);
      v62(v63, v22, v1);
      v62(*(_QWORD *)(v5 - 360), v63, v1);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v14 = *(_QWORD *)(v5 - 152);
      goto LABEL_19;
    case 2:
      v24 = *v3;
      v25 = v3[1];
      *(_QWORD *)(v5 - 144) = *v3;
      *(_QWORD *)(v5 - 136) = v25;
      v26 = *(_QWORD *)(v5 - 184);
      v27 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v28 = *(_QWORD *)(v5 - 128);
      v29 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v28;
      *(_QWORD *)(v5 - 136) = v29;
      sub_1BDDB6CA4(v24, v25);
      v31 = type metadata accessor for WeakRef(0, v26, v27, v30);
      v32 = *(_QWORD *)(v5 - 200);
      sub_1BE1966E8(v31, v32);
      sub_1BDDB796C(v28, v29);
      v33 = *(_QWORD *)(v5 - 208);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v26) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 344) + 8))(v32, *(_QWORD *)(v5 - 336));
        goto LABEL_10;
      }
      v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
      v65 = *(_QWORD *)(v5 - 352);
      v64(v65, v32, v26);
      v64(*(_QWORD *)(v5 - 328), v65, v26);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v14 = *(_QWORD *)(v5 - 152);
      goto LABEL_19;
    case 3:
      v34 = *v3;
      v35 = v3[1];
      *(_QWORD *)(v5 - 144) = *v3;
      *(_QWORD *)(v5 - 136) = v35;
      v36 = *(_QWORD *)(v5 - 168);
      v37 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v38 = *(_QWORD *)(v5 - 128);
      v39 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v38;
      *(_QWORD *)(v5 - 136) = v39;
      sub_1BDDB6CA4(v34, v35);
      v41 = type metadata accessor for WeakRef(0, v36, v37, v40);
      v42 = *(_QWORD *)(v5 - 176);
      sub_1BE1966E8(v41, v42);
      sub_1BDDB796C(v38, v39);
      v43 = *(_QWORD *)(v5 - 192);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v42, 1, v36) != 1)
      {
        v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
        v67 = *(_QWORD *)(v5 - 320);
        v66(v67, v42, v36);
        v66(*(_QWORD *)(v5 - 296), v67, v36);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v14 = *(_QWORD *)(v5 - 152);
        goto LABEL_19;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 312) + 8))(v42, *(_QWORD *)(v5 - 304));
LABEL_10:
      v14 = *(_QWORD *)(v5 - 152);
      goto LABEL_13;
    default:
      v44 = *(_QWORD *)(v5 - 272);
      v45 = *(_QWORD *)(v5 - 264);
      v46 = *v3;
      v47 = v3[1];
      *(_QWORD *)(v5 - 144) = *v3;
      *(_QWORD *)(v5 - 136) = v47;
      v48 = *(_QWORD *)(v5 - 240);
      v49 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v50 = *(_QWORD *)(v5 - 128);
      v51 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v50;
      *(_QWORD *)(v5 - 136) = v51;
      sub_1BDDB6CA4(v46, v47);
      v53 = type metadata accessor for WeakRef(0, v48, v49, v52);
      v54 = *(_QWORD *)(v5 - 248);
      sub_1BE1966E8(v53, v54);
      sub_1BDDB796C(v50, v51);
      v55 = *(_QWORD *)(v5 - 256);
      v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v54, 1, v48);
      v14 = *(_QWORD *)(v5 - 152);
      if (v56 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(v45 + 8))(v54, *(_QWORD *)(v5 - 288));
LABEL_13:
        v57 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v14, 1, 1, v57);
      }
      else
      {
        v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
        v68(v44, v54, v48);
        v68(*(_QWORD *)(v5 - 280), v44, v48);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_19:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v14, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDEB6840(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v20[24];

  v20[14] = a2;
  v20[15] = a1;
  v20[11] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v20[10] = (char *)v20 - v3;
  v20[9] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v20[8] = (char *)v20 - v5;
  v20[7] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v20[6] = (char *)v20 - v7;
  v20[5] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v20[4] = (char *)v20 - v9;
  v20[3] = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v20[2] = (char *)v20 - v11;
  swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  v20[12] = *(_QWORD *)(v12 - 8);
  v20[13] = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v20[1] = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v16 = MEMORY[0x1E0C80A78](v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v17);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20[18] = AssociatedTypeWitness;
  v20[19] = AssociatedConformanceWitness;
  v20[20] = &protocol witness table for Int;
  v20[21] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB6B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  unint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = *v3;
      v8 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v8;
      v9 = *(_QWORD *)(v6 - 248);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v11 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v12 = *(_QWORD *)(v6 - 128);
      v13 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v4, v16, v14, v11);
      sub_1BDDB6CA4(v7, v8);
      v17 = *(_QWORD *)(v6 - 256);
      v18 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v17, v18 ^ 1u, 1, v9);
      *(_QWORD *)(v6 - 144) = v12;
      *(_QWORD *)(v6 - 136) = v13;
      v19 = v6 - 144;
      v20 = v17;
      v21 = v9;
      goto LABEL_6;
    case 1:
      v38 = *v3;
      v39 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v39;
      v40 = *(_QWORD *)(v6 - 232);
      v41 = swift_getAssociatedConformanceWitness();
      v42 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v43 = *(_QWORD *)(v6 - 128);
      v44 = *(_QWORD *)(v6 - 120);
      v30 = *(_QWORD *)(v6 - 176);
      v29 = *(_QWORD *)(v6 - 168);
      v31 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v30 + 16))(v1, v31, v29, v42);
      sub_1BDDB6CA4(v38, v39);
      v45 = *(_QWORD *)(v6 - 240);
      v46 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v45, v46 ^ 1u, 1, v40);
      *(_QWORD *)(v6 - 144) = v43;
      *(_QWORD *)(v6 - 136) = v44;
      v34 = v6 - 144;
      v35 = v45;
      goto LABEL_8;
    case 2:
      v47 = *v3;
      v48 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v48;
      v49 = *(_QWORD *)(v6 - 216);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v50 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v51 = *(_QWORD *)(v6 - 128);
      v52 = *(_QWORD *)(v6 - 120);
      v15 = *(_QWORD *)(v6 - 176);
      v14 = *(_QWORD *)(v6 - 168);
      v16 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(v5, v16, v14, v50);
      sub_1BDDB6CA4(v47, v48);
      v53 = *(_QWORD *)(v6 - 224);
      v54 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v53, v54 ^ 1u, 1, v49);
      *(_QWORD *)(v6 - 144) = v51;
      *(_QWORD *)(v6 - 136) = v52;
      v19 = v6 - 144;
      v20 = v53;
      v21 = v49;
LABEL_6:
      sub_1BDE56E90(v20, v19, v21, AssociatedConformanceWitness);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    case 3:
      v56 = *v3;
      v57 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v57;
      v40 = *(_QWORD *)(v6 - 200);
      v41 = swift_getAssociatedConformanceWitness();
      v58 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v59 = *(_QWORD *)(v6 - 128);
      v60 = *(_QWORD *)(v6 - 120);
      v30 = *(_QWORD *)(v6 - 176);
      v29 = *(_QWORD *)(v6 - 168);
      v31 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v30 + 16))(v2, v31, v29, v58);
      sub_1BDDB6CA4(v56, v57);
      v61 = *(_QWORD *)(v6 - 208);
      v62 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v61, v62 ^ 1u, 1, v40);
      *(_QWORD *)(v6 - 144) = v59;
      *(_QWORD *)(v6 - 136) = v60;
      v34 = v6 - 144;
      v35 = v61;
LABEL_8:
      v36 = v40;
      v37 = v41;
      break;
    default:
      v22 = *v3;
      v23 = v3[1];
      *(_QWORD *)(v6 - 144) = *v3;
      *(_QWORD *)(v6 - 136) = v23;
      v24 = *(_QWORD *)(v6 - 184);
      v25 = swift_getAssociatedConformanceWitness();
      v26 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v27 = *(_QWORD *)(v6 - 128);
      v28 = *(_QWORD *)(v6 - 120);
      v30 = *(_QWORD *)(v6 - 176);
      v29 = *(_QWORD *)(v6 - 168);
      v31 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v30 + 16))(*(_QWORD *)(v6 - 264), v31, v29, v26);
      sub_1BDDB6CA4(v22, v23);
      v32 = *(_QWORD *)(v6 - 192);
      v33 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, v33 ^ 1u, 1, v24);
      *(_QWORD *)(v6 - 144) = v27;
      *(_QWORD *)(v6 - 136) = v28;
      v34 = v6 - 144;
      v35 = v32;
      v36 = v24;
      v37 = v25;
      break;
  }
  sub_1BDE56E90(v35, v34, v36, v37);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v31, v29);
}

void WeakTagged_4.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEB5D08);
}

uint64_t sub_1BDEB6FB4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_4(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEB6840);
  return swift_release();
}

uint64_t WeakTagged_4.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEB6840);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_4.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_4.subscript.getter(a2, a3);
}

void (*sub_1BDEB714C())(uint64_t **a1, char a2)
{
  return sub_1BDEB716C;
}

void sub_1BDEB716C(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t)sub_1BDEB6840, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_4.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEB5D08);
}

void WeakTagged_4.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_4.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_4.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_4);
}

void WeakTagged_4.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_4.hash(into:));
}

void sub_1BDEB71F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_4.hash(into:));
}

uint64_t sub_1BDEB7204(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_4.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_4.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEB7228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_4.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_4.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEB7264(a1, a2, a3, (char *)type metadata accessor for WeakTagged_4, 1, a4);
}

uint64_t sub_1BDEB7264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int EnumCaseMultiPayload;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v56[2];
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81[10];

  v56[1] = a5;
  v74 = a4;
  v75 = a3;
  v76 = a2;
  v77 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v68 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v65 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  MEMORY[0x1E0C80A78](v9);
  v69 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v64);
  v67 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v63 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v61 = (char *)v56 - v16;
  MEMORY[0x1E0C80A78](v15);
  v72 = (uint64_t)v56 - v17;
  v80 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v80);
  v62 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v70 = (uint64_t)v56 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v79 = (char *)v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v60 = (char *)v56 - v26;
  MEMORY[0x1E0C80A78](v25);
  v71 = (uint64_t)v56 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v78 = (char *)v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v73 = (char *)v56 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v56 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v56 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v59 = v38;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEB8044);
    }
    v43 = v71;
    sub_1BDDA2E8C((uint64_t)v35, v71, type metadata accessor for Proto_Value);
    v44 = *(_QWORD *)(v43 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v45 = v72;
    sub_1BDD86DEC(v44, v72, &qword_1ED6F26F0);
    v46 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48);
    if (v57(v45, 1, v46) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v45, &qword_1ED6F26F0);
      v47 = v70;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v47 = v70;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v45, v70, type metadata accessor for Proto_TaggedValue);
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v49 = *(int *)(v80 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v47 + v49) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Value);
    v50 = *(_QWORD *)(v47 + *(int *)(v80 + 20));
    swift_beginAccess();
    v51 = *(_QWORD *)(v50 + 16);
    sub_1BDD9C3E0(v47, type metadata accessor for Proto_TaggedValue);
    v81[0] = v51;
    v52 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v74)(0, v76, v75);
    v53 = (char *)(v77 + *(int *)(v52 + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v74 = v53;
    v71 = AssociatedConformanceWitness;
    v72 = AssociatedTypeWitness;
    CRExtensible.init(rawValue:)((uint64_t)v81, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v53);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEB806C(uint64_t a1, uint64_t a2)
{
  return WeakTagged_4.encode(to:)(a1, a2);
}

uint64_t WeakTagged_4.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.Enum, (uint64_t)&associated conformance descriptor for Tagged_4.Tagged_4.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_5.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_5.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_5.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_5.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_5.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_5.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_5.init(_:id:));
}

void WeakTagged_5.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_5, a4);
}

void WeakTagged_5.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_5);
}

void WeakTagged_5.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_5(0, a2, a3, a4);
  type metadata accessor for WeakTagged_5(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB81FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_5.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB82BC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_5.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB83E8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_5.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB8518(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_5.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB8648(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_5.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB8778(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_5.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB88A8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_5.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t AssociatedConformanceWitness;
  _QWORD v41[2];
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _UNKNOWN **v85;
  uint64_t v86;

  v80 = a2;
  v81 = a3;
  v79 = a1;
  v82 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62 = sub_1BE1B2EE8();
  v61 = *(_QWORD *)(v62 - 8);
  v5 = MEMORY[0x1E0C80A78](v62);
  v65 = (char *)v41 - v6;
  v78 = AssociatedTypeWitness;
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v63 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v60 = (char *)v41 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v58 = sub_1BE1B2EE8();
  v57 = *(_QWORD *)(v58 - 8);
  v11 = MEMORY[0x1E0C80A78](v58);
  v76 = (char *)v41 - v12;
  v77 = v10;
  v74 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v59 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v56 = (char *)v41 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v54 = sub_1BE1B2EE8();
  v53 = *(_QWORD *)(v54 - 8);
  v17 = MEMORY[0x1E0C80A78](v54);
  v73 = (char *)v41 - v18;
  v75 = v16;
  v71 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v55 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v52 = (char *)v41 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v50 = sub_1BE1B2EE8();
  v49 = *(_QWORD *)(v50 - 8);
  v23 = MEMORY[0x1E0C80A78](v50);
  v70 = (char *)v41 - v24;
  v72 = v22;
  v69 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v51 = (char *)v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v48 = (char *)v41 - v27;
  v28 = swift_getAssociatedTypeWitness();
  v46 = sub_1BE1B2EE8();
  v45 = *(_QWORD *)(v46 - 8);
  v29 = MEMORY[0x1E0C80A78](v46);
  v68 = (char *)v41 - v30;
  v67 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v47 = (char *)v41 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v44 = (char *)v41 - v33;
  v34 = swift_getAssociatedTypeWitness();
  v42 = sub_1BE1B2EE8();
  v41[1] = *(_QWORD *)(v42 - 8);
  v35 = MEMORY[0x1E0C80A78](v42);
  v66 = *(_QWORD *)(v34 - 8);
  v36 = MEMORY[0x1E0C80A78](v35);
  v43 = (char *)v41 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v41[0] = (char *)v41 - v38;
  v39 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v83 = v39;
  v84 = AssociatedConformanceWitness;
  v85 = &protocol witness table for Int;
  v86 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB8E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t AssociatedTypeWitness;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  CRExtensible.rawValue.getter(a1, v7 - 96);
  v8 = *(_QWORD *)(v7 - 96);
  *(_QWORD *)(v7 - 184) = v4;
  switch(v8)
  {
    case 0:
      v10 = *v2;
      v9 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v9;
      *(_QWORD *)(v7 - 192) = v6;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v12 = *(_QWORD *)(v7 - 128);
      v13 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v12;
      *(_QWORD *)(v7 - 136) = v13;
      v14 = *(_QWORD *)(v7 - 160);
      *(_QWORD *)(v7 - 200) = *(_QWORD *)(v14 + 16);
      sub_1BDDB6CA4(v10, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v7 - 200))(v7 - 144, v3, AssociatedConformanceWitness, *(_QWORD *)(v7 - 168), v14);
      sub_1BDDB796C(v12, v13);
      v15 = *(_QWORD *)(v7 - 288);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v1, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 488) + 8))(v1, *(_QWORD *)(v7 - 480));
        goto LABEL_6;
      }
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
      v71 = *(_QWORD *)(v7 - 496);
      v70(v71, v1, v3);
      v70(*(_QWORD *)(v7 - 472), v71, v3);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v25 = *(_QWORD *)(v7 - 152);
      goto LABEL_23;
    case 1:
      v16 = *v2;
      v17 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v17;
      *(_QWORD *)(v7 - 192) = v6;
      v18 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v19 = *(_QWORD *)(v7 - 128);
      v20 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v19;
      *(_QWORD *)(v7 - 136) = v20;
      v21 = *(_QWORD *)(v7 - 160);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v21 + 16);
      sub_1BDDB6CA4(v16, v17);
      v23 = *(_QWORD *)(v7 - 272);
      v22(v7 - 144, v5, v18, *(_QWORD *)(v7 - 168), v21);
      sub_1BDDB796C(v19, v20);
      v24 = *(_QWORD *)(v7 - 280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v5) != 1)
      {
        v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32);
        v74 = *(_QWORD *)(v7 - 464);
        v73(v74, v23, v5);
        v73(*(_QWORD *)(v7 - 440), v74, v5);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v25 = *(_QWORD *)(v7 - 152);
        goto LABEL_23;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 456) + 8))(v23, *(_QWORD *)(v7 - 448));
LABEL_6:
      v25 = *(_QWORD *)(v7 - 152);
      goto LABEL_16;
    case 2:
      v26 = *v2;
      v27 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v27;
      v28 = *(_QWORD *)(v7 - 240);
      v29 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v30 = *(_QWORD *)(v7 - 128);
      v31 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v30;
      *(_QWORD *)(v7 - 136) = v31;
      v32 = *(_QWORD *)(v7 - 160);
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16);
      sub_1BDDB6CA4(v26, v27);
      v34 = *(_QWORD *)(v7 - 256);
      v33(v7 - 144, v28, v29, *(_QWORD *)(v7 - 168), v32);
      sub_1BDDB796C(v30, v31);
      v35 = *(_QWORD *)(v7 - 264);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 424) + 8))(v34, *(_QWORD *)(v7 - 416));
        goto LABEL_11;
      }
      v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
      v76 = *(_QWORD *)(v7 - 432);
      v75(v76, v34, v28);
      v75(*(_QWORD *)(v7 - 408), v76, v28);
      v77 = swift_getAssociatedTypeWitness();
      v78 = *(_QWORD *)(v7 - 152);
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v78, 0, 1, v77);
    case 3:
      v36 = *v2;
      v37 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v37;
      v38 = *(_QWORD *)(v7 - 216);
      v39 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v40 = *(_QWORD *)(v7 - 128);
      v41 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v40;
      *(_QWORD *)(v7 - 136) = v41;
      v42 = *(_QWORD *)(v7 - 160);
      v43 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v42 + 16);
      sub_1BDDB6CA4(v36, v37);
      v44 = *(_QWORD *)(v7 - 232);
      v43(v7 - 144, v38, v39, *(_QWORD *)(v7 - 168), v42);
      sub_1BDDB796C(v40, v41);
      v45 = *(_QWORD *)(v7 - 248);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v44, 1, v38) != 1)
      {
        v79 = v44;
        v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
        v81 = *(_QWORD *)(v7 - 400);
        v80(v81, v79, v38);
        v80(*(_QWORD *)(v7 - 376), v81, v38);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v25 = *(_QWORD *)(v7 - 152);
        goto LABEL_23;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 392) + 8))(v44, *(_QWORD *)(v7 - 384));
LABEL_11:
      v25 = *(_QWORD *)(v7 - 152);
      goto LABEL_16;
    case 4:
      v46 = *v2;
      v47 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v47;
      v48 = *(_QWORD *)(v7 - 200);
      v49 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v50 = *(_QWORD *)(v7 - 128);
      v51 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v50;
      *(_QWORD *)(v7 - 136) = v51;
      v52 = *(_QWORD *)(v7 - 160);
      v53 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v52 + 16);
      sub_1BDDB6CA4(v46, v47);
      v54 = *(_QWORD *)(v7 - 208);
      v53(v7 - 144, v48, v49, *(_QWORD *)(v7 - 168), v52);
      sub_1BDDB796C(v50, v51);
      v55 = *(_QWORD *)(v7 - 224);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v54, 1, v48) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 360) + 8))(v54, *(_QWORD *)(v7 - 352));
        v25 = *(_QWORD *)(v7 - 152);
        goto LABEL_16;
      }
      v82 = v54;
      v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32);
      v84 = *(_QWORD *)(v7 - 368);
      v83(v84, v82, v48);
      v83(*(_QWORD *)(v7 - 344), v84, v48);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v25 = *(_QWORD *)(v7 - 152);
      goto LABEL_23;
    default:
      v56 = *v2;
      v57 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v57;
      v58 = *(_QWORD *)(v7 - 192);
      v59 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v60 = *(_QWORD *)(v7 - 128);
      v61 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v60;
      *(_QWORD *)(v7 - 136) = v61;
      v62 = *(_QWORD *)(v7 - 160);
      v63 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v62 + 16);
      sub_1BDDB6CA4(v56, v57);
      v64 = v59;
      v65 = *(_QWORD *)(v7 - 296);
      v63(v7 - 144, v58, v64, *(_QWORD *)(v7 - 168), v62);
      sub_1BDDB796C(v60, v61);
      v66 = *(_QWORD *)(v7 - 304);
      v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v65, 1, v58);
      v25 = *(_QWORD *)(v7 - 152);
      if (v67 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 328) + 8))(v65, *(_QWORD *)(v7 - 320));
LABEL_16:
        v68 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v25, 1, 1, v68);
      }
      else
      {
        v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32);
        v86 = *(_QWORD *)(v7 - 336);
        v87 = v65;
        v88 = *(_QWORD *)(v7 - 192);
        v85(v86, v87, v88);
        v85(*(_QWORD *)(v7 - 312), v86, v88);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_23:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v25, 0, 1, AssociatedTypeWitness);
      }
  }
}

void sub_1BDEB9670(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AssociatedConformanceWitness;
  _QWORD v39[3];
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _UNKNOWN **v81;
  uint64_t v82;

  v77 = a1;
  v78 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = sub_1BE1B2EE8();
  v61 = *(_QWORD *)(v58 - 8);
  v3 = MEMORY[0x1E0C80A78](v58);
  v63 = (char *)v39 - v4;
  v64 = AssociatedTypeWitness;
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v59 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v60 = (char *)v39 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v56 = sub_1BE1B2EE8();
  v55 = *(_QWORD *)(v56 - 8);
  v9 = MEMORY[0x1E0C80A78](v56);
  v75 = (char *)v39 - v10;
  v76 = v8;
  v73 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v57 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v54 = (char *)v39 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v52 = sub_1BE1B2EE8();
  v51 = *(_QWORD *)(v52 - 8);
  v15 = MEMORY[0x1E0C80A78](v52);
  v72 = (char *)v39 - v16;
  v74 = v14;
  v70 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v53 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v50 = (char *)v39 - v19;
  v20 = swift_getAssociatedTypeWitness();
  v48 = sub_1BE1B2EE8();
  v47 = *(_QWORD *)(v48 - 8);
  v21 = MEMORY[0x1E0C80A78](v48);
  v69 = (char *)v39 - v22;
  v71 = v20;
  v68 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v49 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v46 = (char *)v39 - v25;
  v26 = swift_getAssociatedTypeWitness();
  v44 = sub_1BE1B2EE8();
  v43 = *(_QWORD *)(v44 - 8);
  v27 = MEMORY[0x1E0C80A78](v44);
  v67 = (char *)v39 - v28;
  v66 = *(_QWORD *)(v26 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v45 = (char *)v39 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v42 = (char *)v39 - v31;
  v32 = swift_getAssociatedTypeWitness();
  v40 = sub_1BE1B2EE8();
  v39[2] = *(_QWORD *)(v40 - 8);
  v33 = MEMORY[0x1E0C80A78](v40);
  v65 = *(_QWORD *)(v32 - 8);
  v34 = MEMORY[0x1E0C80A78](v33);
  v41 = (char *)v39 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v39[1] = (char *)v39 - v36;
  v37 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v79 = v37;
  v80 = AssociatedConformanceWitness;
  v81 = &protocol witness table for Int;
  v82 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEB9BC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);

  CRExtensible.rawValue.getter(a1, v5 - 96);
  switch(*(_QWORD *)(v5 - 96))
  {
    case 0:
      v6 = *v2;
      v7 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v9 = *(_QWORD *)(v5 - 128);
      v10 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v9;
      *(_QWORD *)(v5 - 136) = v10;
      sub_1BDDB6CA4(v6, v7);
      v12 = type metadata accessor for WeakRef(0, v4, AssociatedConformanceWitness, v11);
      sub_1BE1966E8(v12, v1);
      sub_1BDDB796C(v9, v10);
      v13 = *(_QWORD *)(v5 - 256);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v1, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 464) + 8))(v1, *(_QWORD *)(v5 - 456));
        goto LABEL_12;
      }
      v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
      v68 = *(_QWORD *)(v5 - 472);
      v67(v68, v1, v4);
      v67(*(_QWORD *)(v5 - 448), v68, v4);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v70 = *(_QWORD *)(v5 - 152);
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v70, 0, 1, AssociatedTypeWitness);
    case 1:
      v14 = *v2;
      v15 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v15;
      v16 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v17 = *(_QWORD *)(v5 - 128);
      v18 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v17;
      *(_QWORD *)(v5 - 136) = v18;
      sub_1BDDB6CA4(v14, v15);
      v20 = type metadata accessor for WeakRef(0, v3, v16, v19);
      v21 = *(_QWORD *)(v5 - 240);
      sub_1BE1966E8(v20, v21);
      sub_1BDDB796C(v17, v18);
      v22 = *(_QWORD *)(v5 - 248);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 432) + 8))(v21, *(_QWORD *)(v5 - 424));
        goto LABEL_12;
      }
      v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
      v72 = *(_QWORD *)(v5 - 440);
      v71(v72, v21, v3);
      v73 = v5 - 160;
      goto LABEL_21;
    case 2:
      v23 = *v2;
      v24 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v24;
      v25 = *(_QWORD *)(v5 - 208);
      v26 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v27 = *(_QWORD *)(v5 - 128);
      v28 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v27;
      *(_QWORD *)(v5 - 136) = v28;
      sub_1BDDB6CA4(v23, v24);
      v30 = type metadata accessor for WeakRef(0, v25, v26, v29);
      v31 = *(_QWORD *)(v5 - 224);
      sub_1BE1966E8(v30, v31);
      sub_1BDDB796C(v27, v28);
      v32 = *(_QWORD *)(v5 - 232);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v25) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 400) + 8))(v31, *(_QWORD *)(v5 - 392));
        goto LABEL_12;
      }
      v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
      v75 = *(_QWORD *)(v5 - 408);
      v74(v75, v31, v25);
      v74(*(_QWORD *)(v5 - 384), v75, v25);
      v76 = swift_getAssociatedTypeWitness();
      v51 = *(_QWORD *)(v5 - 152);
      goto LABEL_23;
    case 3:
      v33 = *v2;
      v34 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v34;
      v3 = *(_QWORD *)(v5 - 184);
      v35 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v36 = *(_QWORD *)(v5 - 128);
      v37 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v36;
      *(_QWORD *)(v5 - 136) = v37;
      sub_1BDDB6CA4(v33, v34);
      v39 = type metadata accessor for WeakRef(0, v3, v35, v38);
      v40 = *(_QWORD *)(v5 - 200);
      sub_1BE1966E8(v39, v40);
      sub_1BDDB796C(v36, v37);
      v41 = *(_QWORD *)(v5 - 216);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v40, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 368) + 8))(v40, *(_QWORD *)(v5 - 360));
        goto LABEL_12;
      }
      v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32);
      v72 = *(_QWORD *)(v5 - 376);
      v71(v72, v40, v3);
      v73 = v5 - 96;
      goto LABEL_21;
    case 4:
      v42 = *v2;
      v43 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v43;
      v3 = *(_QWORD *)(v5 - 168);
      v44 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v45 = *(_QWORD *)(v5 - 128);
      v46 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v45;
      *(_QWORD *)(v5 - 136) = v46;
      sub_1BDDB6CA4(v42, v43);
      v48 = type metadata accessor for WeakRef(0, v3, v44, v47);
      v49 = *(_QWORD *)(v5 - 176);
      sub_1BE1966E8(v48, v49);
      sub_1BDDB796C(v45, v46);
      v50 = *(_QWORD *)(v5 - 192);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v49, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 336) + 8))(v49, *(_QWORD *)(v5 - 328));
LABEL_12:
        v51 = *(_QWORD *)(v5 - 152);
        goto LABEL_13;
      }
      v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32);
      v72 = *(_QWORD *)(v5 - 344);
      v71(v72, v49, v3);
      v73 = v5 - 64;
LABEL_21:
      v71(*(_QWORD *)(v73 - 256), v72, v3);
      v76 = swift_getAssociatedTypeWitness();
      v51 = *(_QWORD *)(v5 - 152);
      goto LABEL_23;
    default:
      v54 = *(_QWORD *)(v5 - 296);
      v55 = *(_QWORD *)(v5 - 288);
      v56 = *v2;
      v57 = v2[1];
      *(_QWORD *)(v5 - 144) = *v2;
      *(_QWORD *)(v5 - 136) = v57;
      v58 = *(_QWORD *)(v5 - 264);
      v59 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v5 - 144), (__n128 *)(v5 - 128));
      v60 = *(_QWORD *)(v5 - 128);
      v61 = *(_QWORD *)(v5 - 120);
      *(_QWORD *)(v5 - 144) = v60;
      *(_QWORD *)(v5 - 136) = v61;
      sub_1BDDB6CA4(v56, v57);
      v63 = type metadata accessor for WeakRef(0, v58, v59, v62);
      v64 = *(_QWORD *)(v5 - 272);
      sub_1BE1966E8(v63, v64);
      sub_1BDDB796C(v60, v61);
      v65 = *(_QWORD *)(v5 - 280);
      v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v64, 1, v58);
      v51 = *(_QWORD *)(v5 - 152);
      if (v66 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(v55 + 8))(v64, *(_QWORD *)(v5 - 312));
LABEL_13:
        v52 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 1, 1, v52);
      }
      else
      {
        v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32);
        v77(v54, v64, v58);
        v77(*(_QWORD *)(v5 - 304), v54, v58);
        v76 = swift_getAssociatedTypeWitness();
LABEL_23:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v51, 0, 1, v76);
      }
  }
}

void sub_1BDEBA340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _QWORD v24[26];

  v24[16] = a2;
  v24[17] = a1;
  v24[13] = swift_getAssociatedTypeWitness();
  v2 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v2);
  v24[12] = (char *)v24 - v3;
  v24[11] = swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v24[10] = (char *)v24 - v5;
  v24[9] = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v6);
  v24[8] = (char *)v24 - v7;
  v24[7] = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v8);
  v24[6] = (char *)v24 - v9;
  v24[5] = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v24[4] = (char *)v24 - v11;
  v24[3] = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v12);
  v24[2] = (char *)v24 - v13;
  swift_getAssociatedTypeWitness();
  v14 = sub_1BE1B2EE8();
  v24[14] = *(_QWORD *)(v14 - 8);
  v24[15] = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v24[1] = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v24[0] = (char *)v24 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v20 = MEMORY[0x1E0C80A78](v19);
  v21 = MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v24[20] = AssociatedTypeWitness;
  v24[21] = AssociatedConformanceWitness;
  v24[22] = &protocol witness table for Int;
  v24[23] = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBA6EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;

  CRExtensible.rawValue.getter(a1, v6 - 96);
  switch(*(_QWORD *)(v6 - 96))
  {
    case 0:
      v7 = v1;
      v8 = *v1;
      v9 = v7[1];
      *(_QWORD *)(v6 - 144) = v8;
      *(_QWORD *)(v6 - 136) = v9;
      v10 = *(_QWORD *)(v6 - 264);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v12 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v13 = *(_QWORD *)(v6 - 128);
      v14 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16))(v3, v17, v15, v12);
      sub_1BDDB6CA4(v8, v9);
      v18 = *(_QWORD *)(v6 - 272);
      v19 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v18, v19 ^ 1u, 1, v10);
      *(_QWORD *)(v6 - 144) = v13;
      *(_QWORD *)(v6 - 136) = v14;
      v20 = v6 - 144;
      v21 = v18;
      v22 = v10;
      v23 = AssociatedConformanceWitness;
      goto LABEL_11;
    case 1:
      v40 = v1;
      v41 = *v1;
      v42 = v40[1];
      *(_QWORD *)(v6 - 144) = v41;
      *(_QWORD *)(v6 - 136) = v42;
      v43 = *(_QWORD *)(v6 - 248);
      v44 = swift_getAssociatedConformanceWitness();
      v45 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v46 = *(_QWORD *)(v6 - 128);
      v47 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16))(v2, v17, v15, v45);
      sub_1BDDB6CA4(v41, v42);
      v48 = *(_QWORD *)(v6 - 256);
      v49 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v48, v49 ^ 1u, 1, v43);
      *(_QWORD *)(v6 - 144) = v46;
      *(_QWORD *)(v6 - 136) = v47;
      v20 = v6 - 144;
      v21 = v48;
      v22 = v43;
      goto LABEL_10;
    case 2:
      v50 = v1;
      v51 = *v1;
      v52 = v50[1];
      *(_QWORD *)(v6 - 144) = v51;
      *(_QWORD *)(v6 - 136) = v52;
      v53 = *(_QWORD *)(v6 - 232);
      v28 = swift_getAssociatedConformanceWitness();
      v54 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v55 = *(_QWORD *)(v6 - 128);
      v56 = *(_QWORD *)(v6 - 120);
      v33 = *(_QWORD *)(v6 - 176);
      v32 = *(_QWORD *)(v6 - 168);
      v34 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v33 + 16))(v5, v34, v32, v54);
      sub_1BDDB6CA4(v51, v52);
      v57 = *(_QWORD *)(v6 - 240);
      v58 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v57, v58 ^ 1u, 1, v53);
      *(_QWORD *)(v6 - 144) = v55;
      *(_QWORD *)(v6 - 136) = v56;
      v37 = v6 - 144;
      v38 = v57;
      v39 = v53;
      goto LABEL_6;
    case 3:
      v60 = v1;
      v61 = *v1;
      v62 = v60[1];
      *(_QWORD *)(v6 - 144) = v61;
      *(_QWORD *)(v6 - 136) = v62;
      v63 = *(_QWORD *)(v6 - 216);
      v64 = swift_getAssociatedConformanceWitness();
      v65 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v66 = *(_QWORD *)(v6 - 128);
      v67 = *(_QWORD *)(v6 - 120);
      v68 = *(_QWORD *)(v6 - 176);
      v32 = *(_QWORD *)(v6 - 168);
      v34 = *(_QWORD *)(v6 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v68 + 16))(v4, v34, v32, v65);
      sub_1BDDB6CA4(v61, v62);
      v69 = *(_QWORD *)(v6 - 224);
      v70 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v69, v70 ^ 1u, 1, v63);
      *(_QWORD *)(v6 - 144) = v66;
      *(_QWORD *)(v6 - 136) = v67;
      sub_1BDE56E90(v69, v6 - 144, v63, v64);
      swift_release();
      v59 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 8);
      goto LABEL_8;
    case 4:
      v73 = *v1;
      v74 = v1[1];
      *(_QWORD *)(v6 - 144) = *v1;
      *(_QWORD *)(v6 - 136) = v74;
      v75 = *(_QWORD *)(v6 - 200);
      v44 = swift_getAssociatedConformanceWitness();
      v76 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v77 = *(_QWORD *)(v6 - 128);
      v78 = *(_QWORD *)(v6 - 120);
      v16 = *(_QWORD *)(v6 - 176);
      v15 = *(_QWORD *)(v6 - 168);
      v17 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v16 + 16))(*(_QWORD *)(v6 - 288), v17, v15, v76);
      sub_1BDDB6CA4(v73, v74);
      v79 = *(_QWORD *)(v6 - 208);
      v80 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v79, v80 ^ 1u, 1, v75);
      *(_QWORD *)(v6 - 144) = v77;
      *(_QWORD *)(v6 - 136) = v78;
      v20 = v6 - 144;
      v21 = v79;
      v22 = v75;
LABEL_10:
      v23 = v44;
LABEL_11:
      sub_1BDE56E90(v21, v20, v22, v23);
      swift_release();
      v59 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
      v71 = v17;
      v72 = v15;
      break;
    default:
      v24 = v1;
      v25 = *v1;
      v26 = v24[1];
      *(_QWORD *)(v6 - 144) = v25;
      *(_QWORD *)(v6 - 136) = v26;
      v27 = *(_QWORD *)(v6 - 184);
      v28 = swift_getAssociatedConformanceWitness();
      v29 = WeakRef.init(id:)((__n128 *)(v6 - 144), (__n128 *)(v6 - 128));
      v30 = *(_QWORD *)(v6 - 128);
      v31 = *(_QWORD *)(v6 - 120);
      v33 = *(_QWORD *)(v6 - 176);
      v32 = *(_QWORD *)(v6 - 168);
      v34 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, uint64_t, uint64_t, __n128))(v33 + 16))(*(_QWORD *)(v6 - 280), v34, v32, v29);
      sub_1BDDB6CA4(v25, v26);
      v35 = *(_QWORD *)(v6 - 192);
      v36 = swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v35, v36 ^ 1u, 1, v27);
      *(_QWORD *)(v6 - 144) = v30;
      *(_QWORD *)(v6 - 136) = v31;
      v37 = v6 - 144;
      v38 = v35;
      v39 = v27;
LABEL_6:
      sub_1BDE56E90(v38, v37, v39, v28);
      swift_release();
      v59 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
LABEL_8:
      v71 = v34;
      v72 = v32;
      break;
  }
  return v59(v71, v72);
}

void WeakTagged_5.subscript.getter(uint64_t a1, uint64_t a2)
{
  sub_1BDED37B8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1BDEB9670);
}

uint64_t sub_1BDEBAC48(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for WeakTagged_5(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDED5058(a1, v5, v6, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEBA340);
  return swift_release();
}

uint64_t WeakTagged_5.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  sub_1BDED5058(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1BDEBA340);
  swift_release();
  swift_getAssociatedTypeWitness();
  v4 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

void WeakTagged_5.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_5.subscript.getter(a2, a3);
}

void (*sub_1BDEBADE0())(uint64_t **a1, char a2)
{
  return sub_1BDEBAE00;
}

void sub_1BDEBAE00(uint64_t **a1, char a2)
{
  sub_1BDE7E504(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t)sub_1BDEBA340, (void (*)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDED5058);
}

uint64_t WeakTagged_5.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED39F8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEB9670);
}

void WeakTagged_5.copy(renamingReferences:)()
{
  sub_1BDE7E824();
}

void WeakTagged_5.hash(into:)()
{
  sub_1BDED3A8C();
}

uint64_t static WeakTagged_5.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDED3B90(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_5);
}

void WeakTagged_5.hashValue.getter(uint64_t a1)
{
  sub_1BDE7E9FC(a1, (void (*)(_BYTE *, uint64_t))WeakTagged_5.hash(into:));
}

void sub_1BDEBAE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDE7EA60(a1, a2, a3, (void (*)(_BYTE *, uint64_t))WeakTagged_5.hash(into:));
}

uint64_t sub_1BDEBAE98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_5.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t WeakTagged_5.encode(to:)(_QWORD *a1)
{
  return sub_1BDED3D14(a1);
}

uint64_t sub_1BDEBAEBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return WeakTagged_5.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t WeakTagged_5.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDEBAEF8(a1, a2, a3, (char *)type metadata accessor for WeakTagged_5, 1, a4);
}

uint64_t sub_1BDEBAEF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t inited;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _DWORD v58[2];
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83[10];

  v58[1] = a5;
  v76 = a4;
  v77 = a3;
  v78 = a2;
  v79 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v7);
  v70 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_KeyPath(0);
  v67 = *(_QWORD *)(v9 - 8);
  v68 = v9;
  MEMORY[0x1E0C80A78](v9);
  v71 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v66);
  v69 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v65 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v62 = (char *)v58 - v16;
  MEMORY[0x1E0C80A78](v15);
  v73 = (uint64_t)v58 - v17;
  v82 = type metadata accessor for Proto_TaggedValue(0);
  v18 = MEMORY[0x1E0C80A78](v82);
  v81 = (char *)v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v74 = (char *)v58 - v20;
  v21 = type metadata accessor for Proto_Value(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v64 = (char *)v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v80 = (char *)v58 - v26;
  MEMORY[0x1E0C80A78](v25);
  v72 = (uint64_t)v58 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v29 = MEMORY[0x1E0C80A78](v28);
  v63 = (char *)v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v75 = (char *)v58 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)v58 - v34;
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)v58 - v36;
  v38 = a1;
  v39 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v37, &qword_1ED6F3770);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v22) = v40(v37, 1, v21);
  sub_1BDD86E30((uint64_t)v37, &qword_1ED6F3770);
  if ((_DWORD)v22 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    v60 = v38;
    v61 = inited;
    *(_QWORD *)(inited + 16) = v38;
    sub_1BDD86DEC(v39, (uint64_t)v35, &qword_1ED6F3770);
    v59 = v40;
    if (v40(v35, 1, v21) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDEBBD30);
    }
    v44 = v72;
    sub_1BDDA2E8C((uint64_t)v35, v72, type metadata accessor for Proto_Value);
    v45 = *(_QWORD *)(v44 + *(int *)(v21 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v46 = v45;
    v47 = v73;
    sub_1BDD86DEC(v46, v73, &qword_1ED6F26F0);
    v48 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v47, 1, v48);
    v50 = (uint64_t)v74;
    if (v49 == 1)
    {
      swift_retain();
      sub_1BDD86E30(v47, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1BDDA2E8C(v47, v50, type metadata accessor for Proto_TaggedValue);
        v51 = v79;
        goto LABEL_12;
      }
      swift_retain();
      sub_1BDD9C3E0(v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v52 = *(int *)(v82 + 20);
    v51 = v79;
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v50 + v52) = qword_1EF52B518;
LABEL_12:
    swift_retain();
    sub_1BDD9C3E0(v44, type metadata accessor for Proto_Value);
    v53 = *(_QWORD *)(v50 + *(int *)(v82 + 20));
    swift_beginAccess();
    v54 = *(_QWORD *)(v53 + 16);
    sub_1BDD9C3E0(v50, type metadata accessor for Proto_TaggedValue);
    v83[0] = v54;
    v55 = (char *)(v51 + *(int *)(((uint64_t (*)(_QWORD, uint64_t, uint64_t))v76)(0, v78, v77) + 36));
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v76 = v55;
    v74 = (char *)AssociatedConformanceWitness;
    CRExtensible.init(rawValue:)((uint64_t)v83, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E0DEB428], v55);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD000000000000017;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t sub_1BDEBBD60(uint64_t a1, uint64_t a2)
{
  return WeakTagged_5.encode(to:)(a1, a2);
}

uint64_t WeakTagged_5.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1BDEB0BE4(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.Enum, (uint64_t)&associated conformance descriptor for Tagged_5.Tagged_5.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_6.id.modify())()
{
  return nullsub_1;
}

void WeakTagged_6.tag.getter()
{
  sub_1BDECED20();
}

void WeakTagged_6.tag.setter()
{
  sub_1BDECEDF4();
}

uint64_t (*WeakTagged_6.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_6.init(_:identity:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_6.init(_:id:));
}

{
  return sub_1BDE7A8D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, __int128 *))WeakTagged_6.init(_:id:));
}

void WeakTagged_6.init(_:id:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_1BDECEEF0(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_6, a4);
}

void WeakTagged_6.init(_:id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDECF014(a1, a2, a3, a4, (void (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for WeakTagged_6);
}

void WeakTagged_6.init(_:)(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v7;

  *a5 = *a1;
  type metadata accessor for SharedTagged_6(0, a2, a3, a4);
  type metadata accessor for WeakTagged_6(0, a2, a3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBBEF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

void WeakTagged_6.tagged1.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBBFB0(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0])
  {
    v4 = 0;
    v5 = 0xF000000000000000;
  }
  else
  {
    v6 = *v2;
    v7 = v2[1];
    v8.n128_u64[0] = v6;
    v8.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v5 = v9[0].n128_u64[1];
    v4 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v6, v7);
  }
  *v1 = v4;
  v1[1] = v5;
  return result;
}

void WeakTagged_6.tagged2.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBC0DC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 1)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_6.tagged3.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBC20C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 2)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_6.tagged4.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBC33C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 3)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_6.tagged5.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBC46C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 4)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_6.tagged6.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBC59C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_u64[0] == 5)
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_6.unknown.getter()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBC6CC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  __n128 v9[7];

  result = CRExtensible.rawValue.getter(a1, (uint64_t)v9);
  if (v9[0].n128_i64[0] < 2)
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  else
  {
    v4 = *v2;
    v5 = v2[1];
    v8.n128_u64[0] = v4;
    v8.n128_u64[1] = v5;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v8, v9);
    v7 = v9[0].n128_u64[1];
    v6 = v9[0].n128_u64[0];
    result = sub_1BDDB6CA4(v4, v5);
  }
  *v1 = v6;
  v1[1] = v7;
  return result;
}

void WeakTagged_6.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedConformanceWitness;
  _QWORD v47[3];
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _UNKNOWN **v98;
  uint64_t v99;

  v94 = a2;
  v95 = a3;
  v92 = a4;
  v93 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = sub_1BE1B2EE8();
  v71 = *(_QWORD *)(v72 - 8);
  v5 = MEMORY[0x1E0C80A78](v72);
  v75 = (char *)v47 - v6;
  v91 = AssociatedTypeWitness;
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v73 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v70 = (char *)v47 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v68 = sub_1BE1B2EE8();
  v67 = *(_QWORD *)(v68 - 8);
  v11 = MEMORY[0x1E0C80A78](v68);
  v89 = (char *)v47 - v12;
  v90 = v10;
  v87 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v69 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v66 = (char *)v47 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v64 = sub_1BE1B2EE8();
  v63 = *(_QWORD *)(v64 - 8);
  v17 = MEMORY[0x1E0C80A78](v64);
  v86 = (char *)v47 - v18;
  v88 = v16;
  v84 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v65 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v62 = (char *)v47 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v60 = sub_1BE1B2EE8();
  v59 = *(_QWORD *)(v60 - 8);
  v23 = MEMORY[0x1E0C80A78](v60);
  v83 = (char *)v47 - v24;
  v85 = v22;
  v81 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v61 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v58 = (char *)v47 - v27;
  v28 = swift_getAssociatedTypeWitness();
  v56 = sub_1BE1B2EE8();
  v55 = *(_QWORD *)(v56 - 8);
  v29 = MEMORY[0x1E0C80A78](v56);
  v80 = (char *)v47 - v30;
  v82 = v28;
  v79 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v57 = (char *)v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v54 = (char *)v47 - v33;
  v34 = swift_getAssociatedTypeWitness();
  v52 = sub_1BE1B2EE8();
  v51 = *(_QWORD *)(v52 - 8);
  v35 = MEMORY[0x1E0C80A78](v52);
  v78 = (char *)v47 - v36;
  v77 = *(_QWORD *)(v34 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v53 = (char *)v47 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v50 = (char *)v47 - v39;
  v40 = swift_getAssociatedTypeWitness();
  v48 = sub_1BE1B2EE8();
  v47[2] = *(_QWORD *)(v48 - 8);
  v41 = MEMORY[0x1E0C80A78](v48);
  v76 = *(_QWORD *)(v40 - 8);
  v42 = MEMORY[0x1E0C80A78](v41);
  v49 = (char *)v47 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42);
  v47[1] = (char *)v47 - v44;
  v45 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v96 = v45;
  v97 = AssociatedConformanceWitness;
  v98 = &protocol witness table for Int;
  v99 = MEMORY[0x1E0DEB428];
  type metadata accessor for CRExtensible();
}

uint64_t sub_1BDEBCD80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t AssociatedConformanceWitness;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t AssociatedTypeWitness;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  CRExtensible.rawValue.getter(a1, v7 - 96);
  v8 = *(_QWORD *)(v7 - 96);
  *(_QWORD *)(v7 - 184) = v5;
  switch(v8)
  {
    case 0:
      v9 = *v2;
      v10 = v2[1];
      *(_QWORD *)(v7 - 144) = v9;
      *(_QWORD *)(v7 - 136) = v10;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v13 = *(_QWORD *)(v7 - 128);
      v12 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v13;
      *(_QWORD *)(v7 - 136) = v12;
      v14 = *(_QWORD *)(v7 - 152);
      *(_QWORD *)(v7 - 192) = *(_QWORD *)(v14 + 16);
      sub_1BDDB6CA4(v9, v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v7 - 192))(v7 - 144, v4, AssociatedConformanceWitness, *(_QWORD *)(v7 - 160), v14);
      sub_1BDDB796C(v13, v12);
      v15 = *(_QWORD *)(v7 - 312);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v1, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 544) + 8))(v1, *(_QWORD *)(v7 - 536));
        v16 = *(_QWORD *)(v7 - 176);
        goto LABEL_17;
      }
      v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
      v79 = *(_QWORD *)(v7 - 552);
      v78(v79, v1, v4);
      v78(*(_QWORD *)(v7 - 528), v79, v4);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v16 = *(_QWORD *)(v7 - 176);
      goto LABEL_26;
    case 1:
      v17 = *v2;
      v18 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v18;
      *(_QWORD *)(v7 - 192) = v6;
      v19 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v20 = *(_QWORD *)(v7 - 128);
      v21 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v20;
      *(_QWORD *)(v7 - 136) = v21;
      v22 = *(_QWORD *)(v7 - 152);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 16);
      sub_1BDDB6CA4(v17, v18);
      v24 = *(_QWORD *)(v7 - 296);
      v23(v7 - 144, v3, v19, *(_QWORD *)(v7 - 160), v22);
      sub_1BDDB796C(v20, v21);
      v25 = *(_QWORD *)(v7 - 304);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v24, 1, v3) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 512) + 8))(v24, *(_QWORD *)(v7 - 504));
        v16 = *(_QWORD *)(v7 - 176);
        goto LABEL_17;
      }
      v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
      v82 = *(_QWORD *)(v7 - 520);
      v81(v82, v24, v3);
      v81(*(_QWORD *)(v7 - 496), v82, v3);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v16 = *(_QWORD *)(v7 - 176);
      goto LABEL_26;
    case 2:
      v26 = *v2;
      v27 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v27;
      v28 = *(_QWORD *)(v7 - 264);
      v29 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v30 = *(_QWORD *)(v7 - 128);
      v31 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v30;
      *(_QWORD *)(v7 - 136) = v31;
      v32 = *(_QWORD *)(v7 - 152);
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16);
      sub_1BDDB6CA4(v26, v27);
      v34 = *(_QWORD *)(v7 - 280);
      v33(v7 - 144, v28, v29, *(_QWORD *)(v7 - 160), v32);
      sub_1BDDB796C(v30, v31);
      v35 = *(_QWORD *)(v7 - 288);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 480) + 8))(v34, *(_QWORD *)(v7 - 472));
        goto LABEL_14;
      }
      v83 = v34;
      v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
      v85 = *(_QWORD *)(v7 - 488);
      v84(v85, v83, v28);
      v86 = v7 - 208;
      goto LABEL_23;
    case 3:
      v36 = *v2;
      v37 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v37;
      v28 = *(_QWORD *)(v7 - 240);
      v38 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v39 = *(_QWORD *)(v7 - 128);
      v40 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v39;
      *(_QWORD *)(v7 - 136) = v40;
      v41 = *(_QWORD *)(v7 - 152);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v41 + 16);
      sub_1BDDB6CA4(v36, v37);
      v43 = *(_QWORD *)(v7 - 256);
      v42(v7 - 144, v28, v38, *(_QWORD *)(v7 - 160), v41);
      sub_1BDDB796C(v39, v40);
      v44 = *(_QWORD *)(v7 - 272);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 448) + 8))(v43, *(_QWORD *)(v7 - 440));
        goto LABEL_14;
      }
      v87 = v43;
      v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32);
      v85 = *(_QWORD *)(v7 - 456);
      v84(v85, v87, v28);
      v86 = v7 - 176;
      goto LABEL_23;
    case 4:
      v45 = *v2;
      v46 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v46;
      v28 = *(_QWORD *)(v7 - 216);
      v47 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v48 = *(_QWORD *)(v7 - 128);
      v49 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v48;
      *(_QWORD *)(v7 - 136) = v49;
      v50 = *(_QWORD *)(v7 - 152);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v50 + 16);
      sub_1BDDB6CA4(v45, v46);
      v52 = *(_QWORD *)(v7 - 232);
      v51(v7 - 144, v28, v47, *(_QWORD *)(v7 - 160), v50);
      sub_1BDDB796C(v48, v49);
      v53 = *(_QWORD *)(v7 - 248);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v52, 1, v28) == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 416) + 8))(v52, *(_QWORD *)(v7 - 408));
        goto LABEL_14;
      }
      v88 = v52;
      v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
      v85 = *(_QWORD *)(v7 - 424);
      v84(v85, v88, v28);
      v86 = v7 - 144;
LABEL_23:
      v84(*(_QWORD *)(v86 - 256), v85, v28);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v16 = *(_QWORD *)(v7 - 176);
      goto LABEL_26;
    case 5:
      v54 = *v2;
      v55 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v55;
      v56 = *(_QWORD *)(v7 - 200);
      v57 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v58 = *(_QWORD *)(v7 - 128);
      v59 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v58;
      *(_QWORD *)(v7 - 136) = v59;
      v60 = *(_QWORD *)(v7 - 152);
      v61 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v60 + 16);
      sub_1BDDB6CA4(v54, v55);
      v62 = *(_QWORD *)(v7 - 208);
      v61(v7 - 144, v56, v57, *(_QWORD *)(v7 - 160), v60);
      sub_1BDDB796C(v58, v59);
      v63 = *(_QWORD *)(v7 - 224);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v62, 1, v56) != 1)
      {
        v89 = v62;
        v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32);
        v91 = *(_QWORD *)(v7 - 392);
        v90(v91, v89, v56);
        v90(*(_QWORD *)(v7 - 368), v91, v56);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v16 = *(_QWORD *)(v7 - 176);
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 384) + 8))(v62, *(_QWORD *)(v7 - 376));
LABEL_14:
      v16 = *(_QWORD *)(v7 - 176);
      goto LABEL_17;
    default:
      v64 = *v2;
      v65 = v2[1];
      *(_QWORD *)(v7 - 144) = *v2;
      *(_QWORD *)(v7 - 136) = v65;
      v66 = *(_QWORD *)(v7 - 192);
      v67 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)((__n128 *)(v7 - 144), (__n128 *)(v7 - 128));
      v68 = *(_QWORD *)(v7 - 128);
      v69 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 144) = v68;
      *(_QWORD *)(v7 - 136) = v69;
      v70 = *(_QWORD *)(v7 - 152);
      v71 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v70 + 16);
      sub_1BDDB6CA4(v64, v65);
      v72 = v67;
      v73 = *(_QWORD *)(v7 - 320);
      v71(v7 - 144, v66, v72, *(_QWORD *)(v7 - 160), v70);
      sub_1BDDB796C(v68, v69);
      v74 = *(_QWORD *)(v7 - 328);
      v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v73, 1, v66);
      v16 = *(_QWORD *)(v7 - 176);
      if (v75 == 1)
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 352) + 8))(v73, *(_QWORD *)(v7 - 344));
LABEL_17:
        v76 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v16, 1, 1, v76);
      }
      else
      {
        v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32);
        v93 = *(_QWORD *)(v7 - 360);
        v94 = v73;
        v95 = *(_QWORD *)(v7 - 192);
        v92(v93, v94, v95);
        v92(*(_QWORD *)(v7 - 336), v93, v95);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
LABEL_26:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                            + 56))(v16, 0, 1, AssociatedTypeWitness);
      }
  }
}

