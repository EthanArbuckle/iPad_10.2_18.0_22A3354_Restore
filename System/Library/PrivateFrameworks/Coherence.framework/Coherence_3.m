void TaggedValue_2.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[28];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a1;
  v3 = a2[3];
  v41[24] = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41[25] = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v6 = MEMORY[0x1E0C80A78](v5);
  v41[20] = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v41[19] = (char *)v41 - v8;
  v42 = type metadata accessor for Proto_Value(0);
  v41[18] = *(_QWORD *)(v42 - 8);
  v9 = MEMORY[0x1E0C80A78](v42);
  v41[13] = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v41[22] = (char *)v41 - v12;
  MEMORY[0x1E0C80A78](v11);
  v41[21] = (char *)v41 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v41[8] = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v41[16] = (char *)v41 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v41[9] = (char *)v41 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v41[15] = (char *)v41 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v41[7] = (char *)v41 - v24;
  MEMORY[0x1E0C80A78](v23);
  v41[14] = (char *)v41 - v25;
  v43 = type metadata accessor for Proto_TaggedValue(0);
  v26 = MEMORY[0x1E0C80A78](v43);
  v41[6] = (char *)v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v41[23] = (char *)v41 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v41[11] = (char *)v41 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v41[12] = (char *)v41 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v41[10] = (char *)v41 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v41[17] = (char *)v41 - v37;
  v38 = a2[2];
  MEMORY[0x1E0C80A78](v36);
  v40 = a2[4];
  v39 = a2[5];
  v44 = v38;
  v45 = v3;
  v41[27] = v3;
  v46 = v40;
  v47 = v39;
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF56FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE v119[96];

  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (uint64_t *)&v119[-v9];
  v11 = *(_QWORD *)(v6 - 224);
  result = sub_1BDE25870();
  if (v11)
    return result;
  *(_QWORD *)(v6 - 456) = v3;
  *(_QWORD *)(v6 - 432) = v2;
  *(_QWORD *)(v6 - 440) = v4;
  *(_QWORD *)(v6 - 448) = v5;
  *(_QWORD *)(v6 - 424) = v1;
  *(_QWORD *)(v6 - 224) = result;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v8 + 16))(v10, *(_QWORD *)(v6 - 256), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    *(_QWORD *)(v6 - 256) = 0;
    v14 = *(_QWORD *)(v6 - 240);
    v15 = *(_QWORD *)(v6 - 224);
    v16 = *(_QWORD *)(v6 - 432);
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_QWORD, uint64_t *, _QWORD))(*(_QWORD *)(v6 - 272) + 32))(*(_QWORD *)(v6 - 264), v10, *(_QWORD *)(v6 - 248));
      v17 = v15 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      v18 = *(_QWORD *)(v17 + *(int *)(v14 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v19 = v18;
      v20 = *(_QWORD *)(v6 - 344);
      sub_1BDD86DEC(v19, v20, &qword_1ED6F26F0);
      v21 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
      if (v22(v20, 1, v21) == 1)
      {
        swift_retain();
        sub_1BDD86E30(v20, &qword_1ED6F26F0);
        v23 = *(_QWORD *)(v6 - 368);
      }
      else
      {
        v39 = swift_getEnumCaseMultiPayload();
        v23 = *(_QWORD *)(v6 - 368);
        if (v39 == 11)
        {
          sub_1BDDA2E8C(v20, *(_QWORD *)(v6 - 368), type metadata accessor for Proto_TaggedValue);
          swift_retain();
          v40 = *(_QWORD *)(v6 - 232);
          goto LABEL_20;
        }
        swift_retain();
        sub_1BDD9C3E0(v20, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1BE1B20E4();
      v40 = *(_QWORD *)(v6 - 232);
      v47 = *(int *)(v40 + 20);
      if (qword_1EF52B520 != -1)
      {
        swift_once();
        v40 = *(_QWORD *)(v6 - 232);
      }
      *(_QWORD *)(v23 + v47) = qword_1EF52B518;
      swift_retain();
LABEL_20:
      v48 = *(int *)(v40 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        v49 = swift_retain();
        *(_QWORD *)(v23 + v48) = sub_1BE138794(v49);
        swift_release();
      }
      v50 = *(_QWORD *)(v23 + v48);
      swift_beginAccess();
      *(_QWORD *)(v50 + 16) = 1;
      sub_1BE12A434(v23);
      v51 = swift_endAccess();
      MEMORY[0x1E0C80A78](v51);
      v52 = *(_QWORD *)(v6 - 256);
      v53 = *(_QWORD *)(v6 - 248);
      *(_QWORD *)&v119[-48] = *(_QWORD *)(v6 - 424);
      *(_QWORD *)&v119[-40] = v53;
      *(_QWORD *)&v119[-32] = *(_QWORD *)(v6 - 456);
      *(_QWORD *)&v119[-24] = v16;
      v54 = *(_QWORD *)(v6 - 264);
      v55 = *(_QWORD *)(v6 - 72);
      *(_QWORD *)&v119[-16] = v54;
      *(_QWORD *)&v119[-8] = v55;
      sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF7DF88, *(_QWORD *)(v6 - 288));
      if (v52)
      {
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 272) + 8))(v54, v53);
      }
      *(_QWORD *)(v6 - 256) = 0;
      swift_beginAccess();
      v56 = *(_QWORD *)(v17 + *(int *)(v14 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v57 = *(_QWORD *)(v6 - 392);
      sub_1BDD86DEC(v56, v57, &qword_1ED6F26F0);
      if (v22(v57, 1, v21) == 1)
      {
        sub_1BDD86E30(v57, &qword_1ED6F26F0);
        v58 = *(_QWORD *)(v6 - 304);
        v59 = *(_QWORD *)(v6 - 312);
        v60 = *(_QWORD *)(v6 - 320);
        v61 = *(_QWORD *)(v6 - 248);
        v62 = *(_QWORD *)(v6 - 376);
      }
      else
      {
        v90 = swift_getEnumCaseMultiPayload();
        v58 = *(_QWORD *)(v6 - 304);
        v59 = *(_QWORD *)(v6 - 312);
        v60 = *(_QWORD *)(v6 - 320);
        v61 = *(_QWORD *)(v6 - 248);
        v62 = *(_QWORD *)(v6 - 376);
        if (v90 == 11)
        {
          sub_1BDDA2E8C(v57, *(_QWORD *)(v6 - 376), type metadata accessor for Proto_TaggedValue);
          v91 = *(_QWORD *)(v6 - 232);
LABEL_54:
          v98 = *(int *)(v91 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            v99 = swift_retain();
            v100 = sub_1BE138794(v99);
            v62 = *(_QWORD *)(v6 - 376);
            *(_QWORD *)(v62 + v98) = v100;
            swift_release();
          }
          v101 = v62;
          v102 = *(_QWORD *)(v62 + v98);
          sub_1BDDA2E8C(*(_QWORD *)(v6 - 288), v59, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v14);
          sub_1BDEFF368(v59, v58);
          v103 = v102
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1BDEFF3B0(v58, v103);
          swift_endAccess();
          swift_release();
          sub_1BE12A434(v101);
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 272) + 8))(*(_QWORD *)(v6 - 264), v61);
        }
        sub_1BDD9C3E0(v57, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1BE1B20E4();
      v91 = *(_QWORD *)(v6 - 232);
      v96 = v62;
      v97 = *(int *)(v91 + 20);
      if (qword_1EF52B520 != -1)
      {
        swift_once();
        v91 = *(_QWORD *)(v6 - 232);
      }
      *(_QWORD *)(v96 + v97) = qword_1EF52B518;
      swift_retain();
      v62 = v96;
      goto LABEL_54;
    }
    v30 = *v10;
    v31 = v10[1];
    v32 = v15 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    v33 = *(_QWORD *)(v32 + *(int *)(v14 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v34 = *(_QWORD *)(v6 - 336);
    sub_1BDD86DEC(v33, v34, &qword_1ED6F26F0);
    v35 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48);
    if (v36(v34, 1, v35) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v34, &qword_1ED6F26F0);
      v37 = *(_QWORD *)(v6 - 360);
      v38 = *(_QWORD *)(v6 - 280);
    }
    else
    {
      v45 = swift_getEnumCaseMultiPayload();
      v37 = *(_QWORD *)(v6 - 360);
      v38 = *(_QWORD *)(v6 - 280);
      if (v45 == 11)
      {
        sub_1BDDA2E8C(v34, *(_QWORD *)(v6 - 280), type metadata accessor for Proto_TaggedValue);
        swift_retain();
        v46 = *(_QWORD *)(v6 - 232);
        goto LABEL_38;
      }
      swift_retain();
      sub_1BDD9C3E0(v34, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v46 = *(_QWORD *)(v6 - 232);
    v78 = *(int *)(v46 + 20);
    if (qword_1EF52B520 != -1)
    {
      swift_once();
      v46 = *(_QWORD *)(v6 - 232);
    }
    *(_QWORD *)(v38 + v78) = qword_1EF52B518;
    swift_retain();
LABEL_38:
    v79 = *(int *)(v46 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_TaggedValue._StorageClass(0);
      swift_allocObject();
      v80 = swift_retain();
      v81 = sub_1BE138794(v80);
      v38 = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v38 + v79) = v81;
      swift_release();
    }
    v82 = *(_QWORD *)(v38 + v79);
    swift_beginAccess();
    *(_QWORD *)(v82 + 16) = v30;
    sub_1BE12A434(v38);
    swift_endAccess();
    swift_retain();
    v83 = swift_retain();
    v84 = *(_QWORD *)(v6 - 256);
    sub_1BDE1C9DC(v83, v31, v83, v37);
    if (v84)
    {
      swift_release();
      return swift_release();
    }
    swift_beginAccess();
    v85 = *(_QWORD *)(v32 + *(int *)(*(_QWORD *)(v6 - 240) + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v86 = v85;
    v87 = *(_QWORD *)(v6 - 400);
    sub_1BDD86DEC(v86, v87, &qword_1ED6F26F0);
    if (v36(v87, 1, v35) == 1)
    {
      sub_1BDD86E30(v87, &qword_1ED6F26F0);
      v88 = *(_QWORD *)(v6 - 240);
      v89 = *(_QWORD *)(v6 - 416);
    }
    else
    {
      v94 = swift_getEnumCaseMultiPayload();
      v89 = *(_QWORD *)(v6 - 416);
      if (v94 == 11)
      {
        sub_1BDDA2E8C(v87, *(_QWORD *)(v6 - 416), type metadata accessor for Proto_TaggedValue);
        v88 = *(_QWORD *)(v6 - 240);
        v95 = *(_QWORD *)(v6 - 232);
LABEL_68:
        v113 = *(int *)(v95 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          v114 = swift_retain();
          *(_QWORD *)(v89 + v113) = sub_1BE138794(v114);
          swift_release();
        }
        v115 = *(_QWORD *)(v89 + v113);
        v116 = *(_QWORD *)(v6 - 312);
        sub_1BDDA2E8C(v37, v116, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 56))(v116, 0, 1, v88);
        v117 = *(_QWORD *)(v6 - 304);
        sub_1BDEFF368(v116, v117);
        v118 = v115
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1BDEFF3B0(v117, v118);
        swift_endAccess();
        swift_release();
        sub_1BE12A434(v89);
        swift_endAccess();
        swift_release();
        return swift_release();
      }
      sub_1BDD9C3E0(v87, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      v88 = *(_QWORD *)(v6 - 240);
    }
    sub_1BE1B20E4();
    v95 = *(_QWORD *)(v6 - 232);
    v112 = *(int *)(v95 + 20);
    if (qword_1EF52B520 != -1)
    {
      swift_once();
      v95 = *(_QWORD *)(v6 - 232);
    }
    *(_QWORD *)(v89 + v112) = qword_1EF52B518;
    swift_retain();
    goto LABEL_68;
  }
  (*(void (**)(_QWORD, uint64_t *, _QWORD))(*(_QWORD *)(v6 - 448) + 32))(*(_QWORD *)(v6 - 440), v10, *(_QWORD *)(v6 - 424));
  v24 = *(_QWORD *)(v6 - 224) + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v25 = *(_QWORD *)(v24 + *(int *)(*(_QWORD *)(v6 - 240) + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v26 = *(_QWORD *)(v6 - 352);
  sub_1BDD86DEC(v25, v26, &qword_1ED6F26F0);
  v27 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
  if (v28(v26, 1, v27) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v26, &qword_1ED6F26F0);
    v29 = *(_QWORD *)(v6 - 248);
  }
  else
  {
    v41 = swift_getEnumCaseMultiPayload();
    v29 = *(_QWORD *)(v6 - 248);
    if (v41 == 11)
    {
      v42 = *(_QWORD *)(v6 - 328);
      sub_1BDDA2E8C(v26, v42, type metadata accessor for Proto_TaggedValue);
      v43 = v42;
      swift_retain();
      v44 = *(_QWORD *)(v6 - 232);
      goto LABEL_30;
    }
    swift_retain();
    sub_1BDD9C3E0(v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v43 = *(_QWORD *)(v6 - 328);
  sub_1BE1B20E4();
  v44 = *(_QWORD *)(v6 - 232);
  v63 = *(int *)(v44 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v44 = *(_QWORD *)(v6 - 232);
  }
  *(_QWORD *)(v43 + v63) = qword_1EF52B518;
  swift_retain();
LABEL_30:
  v64 = *(int *)(v44 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v65 = swift_retain();
    *(_QWORD *)(v43 + v64) = sub_1BE138794(v65);
    swift_release();
  }
  v66 = *(_QWORD *)(v43 + v64);
  swift_beginAccess();
  *(_QWORD *)(v66 + 16) = 0;
  sub_1BE12A434(v43);
  v67 = swift_endAccess();
  MEMORY[0x1E0C80A78](v67);
  *(_QWORD *)&v119[-48] = *(_QWORD *)(v6 - 424);
  *(_QWORD *)&v119[-40] = v29;
  v68 = *(_QWORD *)(v6 - 432);
  *(_QWORD *)&v119[-32] = *(_QWORD *)(v6 - 456);
  *(_QWORD *)&v119[-24] = v68;
  v69 = *(_QWORD *)(v6 - 72);
  *(_QWORD *)&v119[-16] = *(_QWORD *)(v6 - 440);
  *(_QWORD *)&v119[-8] = v69;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF7DFC0, *(_QWORD *)(v6 - 296));
  swift_beginAccess();
  v70 = *(_QWORD *)(v6 - 240);
  v71 = *(_QWORD *)(v24 + *(int *)(v70 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v72 = *(_QWORD *)(v6 - 408);
  sub_1BDD86DEC(v71, v72, &qword_1ED6F26F0);
  v73 = v28(v72, 1, v27);
  v74 = *(_QWORD *)(v6 - 448);
  if (v73 == 1)
  {
    sub_1BDD86E30(v72, &qword_1ED6F26F0);
    v75 = *(_QWORD *)(v6 - 312);
    v76 = *(_QWORD *)(v6 - 320);
    v77 = *(_QWORD *)(v6 - 384);
LABEL_58:
    sub_1BE1B20E4();
    v93 = *(_QWORD *)(v6 - 232);
    v104 = *(int *)(v93 + 20);
    if (qword_1EF52B520 != -1)
    {
      swift_once();
      v93 = *(_QWORD *)(v6 - 232);
    }
    *(_QWORD *)(v77 + v104) = qword_1EF52B518;
    swift_retain();
    goto LABEL_61;
  }
  v92 = swift_getEnumCaseMultiPayload();
  v75 = *(_QWORD *)(v6 - 312);
  v76 = *(_QWORD *)(v6 - 320);
  v77 = *(_QWORD *)(v6 - 384);
  if (v92 != 11)
  {
    sub_1BDD9C3E0(v72, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_58;
  }
  sub_1BDDA2E8C(v72, *(_QWORD *)(v6 - 384), type metadata accessor for Proto_TaggedValue);
  v93 = *(_QWORD *)(v6 - 232);
LABEL_61:
  v105 = *(int *)(v93 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v106 = swift_retain();
    v107 = sub_1BE138794(v106);
    v77 = *(_QWORD *)(v6 - 384);
    *(_QWORD *)(v77 + v105) = v107;
    swift_release();
  }
  v108 = *(_QWORD *)(v77 + v105);
  sub_1BDDA2E8C(*(_QWORD *)(v6 - 296), v75, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v75, 0, 1, v70);
  v109 = *(_QWORD *)(v6 - 304);
  sub_1BDEFF368(v75, v109);
  v110 = v77;
  v111 = v108
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1BDEFF3B0(v109, v111);
  swift_endAccess();
  swift_release();
  sub_1BE12A434(v110);
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v74 + 8))(*(_QWORD *)(v6 - 440), *(_QWORD *)(v6 - 424));
}

void sub_1BDF57F24()
{
  TaggedValue_2.init(from:)();
}

void sub_1BDF57F44(uint64_t a1, _QWORD *a2)
{
  TaggedValue_2.encode(to:)(a1, a2);
}

void TaggedValue_2<>.encode(to:)(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v1);
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF58000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int EnumCaseMultiPayload;
  _BYTE v15[96];

  MEMORY[0x1E0C80A78](a1);
  v11 = &v15[-v10];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(&v15[-v10], v4, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v1, v11, v3);
      sub_1BE1B26CC();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
    }
    else
    {
      (*(void (**)(void))(**((_QWORD **)v11 + 1) + 80))();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52E2A0);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v8 - 152), *(_QWORD *)(v8 - 128));
      sub_1BE1B26CC();
      __swift_destroy_boxed_opaque_existential_1(v8 - 152);
      return swift_release();
    }
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v2 + 32))(v7, v11, v6);
    sub_1BE1B26CC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v7, v6);
  }
}

void sub_1BDF5817C(uint64_t a1)
{
  TaggedValue_2<>.encode(to:)(a1);
}

void TaggedValue_3.init(from:)()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF58214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(_BYTE *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t result;
  uint64_t inited;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int EnumCaseMultiPayload;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE v164[96];

  *(_QWORD *)(v2 - 376) = a1;
  *(_QWORD *)(v2 - 384) = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v2 - 616) = &v164[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)(v2 - 432) = &v164[-v6];
  v7 = MEMORY[0x1E0C80A78](v5);
  *(_QWORD *)(v2 - 464) = &v164[-v8];
  MEMORY[0x1E0C80A78](v7);
  *(_QWORD *)(v2 - 472) = &v164[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  *(_QWORD *)(v2 - 528) = &v164[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x1E0C80A78](v11);
  *(_QWORD *)(v2 - 536) = &v164[-v14];
  v15 = MEMORY[0x1E0C80A78](v13);
  *(_QWORD *)(v2 - 544) = &v164[-v16];
  v17 = MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v2 - 552) = &v164[-v18];
  MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v2 - 304) = &v164[-v19];
  v20 = type metadata accessor for Proto_TaggedValue(0);
  *(_QWORD *)(v2 - 288) = v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  *(_QWORD *)(v2 - 600) = &v164[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)(v2 - 480) = &v164[-v24];
  v25 = MEMORY[0x1E0C80A78](v23);
  *(_QWORD *)(v2 - 488) = &v164[-v26];
  v27 = MEMORY[0x1E0C80A78](v25);
  *(_QWORD *)(v2 - 496) = &v164[-v28];
  MEMORY[0x1E0C80A78](v27);
  *(_QWORD *)(v2 - 296) = &v164[-v29];
  v30 = type metadata accessor for Proto_Value(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  *(_QWORD *)(v2 - 608) = &v164[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = MEMORY[0x1E0C80A78](v32);
  *(_QWORD *)(v2 - 328) = &v164[-v35];
  v36 = MEMORY[0x1E0C80A78](v34);
  *(_QWORD *)(v2 - 504) = &v164[-v37];
  v38 = MEMORY[0x1E0C80A78](v36);
  *(_QWORD *)(v2 - 336) = &v164[-v39];
  v40 = MEMORY[0x1E0C80A78](v38);
  *(_QWORD *)(v2 - 512) = &v164[-v41];
  v42 = MEMORY[0x1E0C80A78](v40);
  *(_QWORD *)(v2 - 344) = &v164[-v43];
  v44 = MEMORY[0x1E0C80A78](v42);
  *(_QWORD *)(v2 - 520) = &v164[-v45];
  v46 = MEMORY[0x1E0C80A78](v44);
  *(_QWORD *)(v2 - 352) = &v164[-v47];
  MEMORY[0x1E0C80A78](v46);
  v49 = &v164[-v48];
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v51 = MEMORY[0x1E0C80A78](v50);
  *(_QWORD *)(v2 - 560) = &v164[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53 = MEMORY[0x1E0C80A78](v51);
  *(_QWORD *)(v2 - 392) = &v164[-v54];
  v55 = MEMORY[0x1E0C80A78](v53);
  *(_QWORD *)(v2 - 360) = &v164[-v56];
  v57 = MEMORY[0x1E0C80A78](v55);
  *(_QWORD *)(v2 - 400) = &v164[-v58];
  v59 = MEMORY[0x1E0C80A78](v57);
  *(_QWORD *)(v2 - 568) = &v164[-v60];
  v61 = MEMORY[0x1E0C80A78](v59);
  *(_QWORD *)(v2 - 408) = &v164[-v62];
  v63 = MEMORY[0x1E0C80A78](v61);
  *(_QWORD *)(v2 - 576) = &v164[-v64];
  v65 = MEMORY[0x1E0C80A78](v63);
  *(_QWORD *)(v2 - 416) = &v164[-v66];
  v67 = MEMORY[0x1E0C80A78](v65);
  v69 = &v164[-v68];
  MEMORY[0x1E0C80A78](v67);
  v71 = &v164[-v70];
  v72 = v1;
  v73 = v1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v73, (uint64_t)v71, &qword_1ED6F3770);
  v74 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48);
  LODWORD(v31) = v74(v71, 1, v30);
  sub_1BDD86E30((uint64_t)v71, &qword_1ED6F3770);
  if ((_DWORD)v31 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v75 = 0xD000000000000017;
    *(_QWORD *)(v75 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v75 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v72;
  sub_1BDD86DEC(v73, (uint64_t)v69, &qword_1ED6F3770);
  *(_QWORD *)(v2 - 320) = v74;
  result = v74(v69, 1, v30);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v78 = v72;
  sub_1BDDA2E8C((uint64_t)v69, (uint64_t)v49, type metadata accessor for Proto_Value);
  v79 = *(_QWORD *)&v49[*(int *)(v30 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v80 = *(_QWORD *)(v2 - 304);
  sub_1BDD86DEC(v79, v80, &qword_1ED6F26F0);
  v81 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48);
  v83 = v82(v80, 1, v81);
  v84 = *(_QWORD *)(v2 - 296);
  if (v83 == 1)
  {
    swift_retain();
    sub_1BDD86E30(v80, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1BDDA2E8C(v80, v84, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0(v80, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v85 = *(int *)(*(_QWORD *)(v2 - 288) + 20);
  if (qword_1EF52B520 != -1)
    swift_once();
  *(_QWORD *)(v84 + v85) = qword_1EF52B518;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0((uint64_t)v49, type metadata accessor for Proto_Value);
  v86 = *(_QWORD *)(v2 - 288);
  v87 = *(_QWORD *)(v84 + *(int *)(v86 + 20));
  swift_beginAccess();
  v88 = *(_QWORD *)(v87 + 16);
  sub_1BDD9C3E0(v84, type metadata accessor for Proto_TaggedValue);
  switch(v88)
  {
    case 0:
      v101 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
      swift_beginAccess();
      v102 = v101;
      v103 = *(_QWORD *)(v2 - 416);
      sub_1BDD86DEC(v102, v103, &qword_1ED6F3770);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v103, 1, v30);
      if ((_DWORD)result == 1)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      v104 = v103;
      v105 = *(_QWORD *)(v2 - 352);
      sub_1BDDA2E8C(v104, v105, type metadata accessor for Proto_Value);
      v106 = *(_QWORD *)(v105 + *(int *)(v30 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v107 = v106;
      v108 = *(_QWORD *)(v2 - 552);
      sub_1BDD86DEC(v107, v108, &qword_1ED6F26F0);
      if (v82(v108, 1, v81) == 1)
      {
        sub_1BDD86E30(v108, &qword_1ED6F26F0);
        v109 = *(_QWORD *)(v2 - 312);
        v110 = *(_QWORD *)(v2 - 496);
        v111 = *(_QWORD *)(v2 - 576);
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v110 = *(_QWORD *)(v2 - 496);
        v111 = *(_QWORD *)(v2 - 576);
        if (EnumCaseMultiPayload == 11)
        {
          sub_1BDDA2E8C(v108, *(_QWORD *)(v2 - 496), type metadata accessor for Proto_TaggedValue);
          v109 = *(_QWORD *)(v2 - 312);
          goto LABEL_39;
        }
        sub_1BDD9C3E0(v108, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        v109 = *(_QWORD *)(v2 - 312);
      }
      sub_1BE1B20E4();
      v139 = *(int *)(v86 + 20);
      if (qword_1EF52B520 != -1)
        swift_once();
      *(_QWORD *)(v110 + v139) = qword_1EF52B518;
      swift_retain();
LABEL_39:
      sub_1BDD9C3E0(*(_QWORD *)(v2 - 352), type metadata accessor for Proto_Value);
      v140 = *(_QWORD *)(v110 + *(int *)(v86 + 20))
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      sub_1BDD86DEC(v140, v111, &qword_1ED6F3770);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v111, 1, v30) == 1)
      {
        v141 = *(_QWORD *)(v2 - 520);
        sub_1BE1B20E4();
        v142 = *(int *)(v30 + 20);
        if (qword_1ED6F2718 != -1)
          swift_once();
        *(_QWORD *)(v141 + v142) = qword_1ED6F2708;
        swift_retain();
        sub_1BDD86E30(v111, &qword_1ED6F3770);
      }
      else
      {
        v141 = *(_QWORD *)(v2 - 520);
        sub_1BDDA2E8C(v111, v141, type metadata accessor for Proto_Value);
      }
      v143 = *(_QWORD **)(v2 - 472);
      sub_1BDD9C3E0(v110, type metadata accessor for Proto_TaggedValue);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v144 = sub_1BDDB4FC0(v141, v78);
      swift_release();
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 456) + 8) + 8) + 8))(v144);
      if (!v109)
        goto LABEL_67;
      goto LABEL_78;
    case 1:
      v112 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
      swift_beginAccess();
      v113 = v112;
      v114 = *(_QWORD *)(v2 - 408);
      sub_1BDD86DEC(v113, v114, &qword_1ED6F3770);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v114, 1, v30);
      if ((_DWORD)result == 1)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      v115 = v114;
      v116 = *(_QWORD *)(v2 - 344);
      sub_1BDDA2E8C(v115, v116, type metadata accessor for Proto_Value);
      v117 = *(_QWORD *)(v116 + *(int *)(v30 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v118 = v117;
      v119 = *(_QWORD *)(v2 - 544);
      sub_1BDD86DEC(v118, v119, &qword_1ED6F26F0);
      if (v82(v119, 1, v81) == 1)
      {
        sub_1BDD86E30(v119, &qword_1ED6F26F0);
        v120 = *(_QWORD *)(v2 - 312);
        v121 = *(_QWORD *)(v2 - 488);
        v122 = *(_QWORD *)(v2 - 568);
      }
      else
      {
        v134 = swift_getEnumCaseMultiPayload();
        v121 = *(_QWORD *)(v2 - 488);
        v122 = *(_QWORD *)(v2 - 568);
        if (v134 == 11)
        {
          sub_1BDDA2E8C(v119, *(_QWORD *)(v2 - 488), type metadata accessor for Proto_TaggedValue);
          v120 = *(_QWORD *)(v2 - 312);
          goto LABEL_50;
        }
        sub_1BDD9C3E0(v119, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        v120 = *(_QWORD *)(v2 - 312);
      }
      sub_1BE1B20E4();
      v145 = *(int *)(v86 + 20);
      if (qword_1EF52B520 != -1)
        swift_once();
      *(_QWORD *)(v121 + v145) = qword_1EF52B518;
      swift_retain();
LABEL_50:
      sub_1BDD9C3E0(*(_QWORD *)(v2 - 344), type metadata accessor for Proto_Value);
      v146 = *(_QWORD *)(v121 + *(int *)(v86 + 20))
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      sub_1BDD86DEC(v146, v122, &qword_1ED6F3770);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v122, 1, v30) == 1)
      {
        v147 = *(_QWORD *)(v2 - 512);
        sub_1BE1B20E4();
        v148 = *(int *)(v30 + 20);
        if (qword_1ED6F2718 != -1)
          swift_once();
        *(_QWORD *)(v147 + v148) = qword_1ED6F2708;
        swift_retain();
        sub_1BDD86E30(v122, &qword_1ED6F3770);
      }
      else
      {
        v147 = *(_QWORD *)(v2 - 512);
        sub_1BDDA2E8C(v122, v147, type metadata accessor for Proto_Value);
      }
      v143 = *(_QWORD **)(v2 - 464);
      sub_1BDD9C3E0(v121, type metadata accessor for Proto_TaggedValue);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v149 = sub_1BDDB4FC0(v147, v78);
      swift_release();
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 448) + 8) + 8) + 8))(v149);
      if (!v120)
        goto LABEL_67;
      goto LABEL_78;
    case 2:
      v89 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
      swift_beginAccess();
      v90 = v89;
      v91 = *(_QWORD *)(v2 - 400);
      sub_1BDD86DEC(v90, v91, &qword_1ED6F3770);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v91, 1, v30);
      if ((_DWORD)result != 1)
      {
        v92 = v91;
        v93 = *(_QWORD *)(v2 - 336);
        sub_1BDDA2E8C(v92, v93, type metadata accessor for Proto_Value);
        v94 = *(_QWORD *)(v93 + *(int *)(v30 + 20))
            + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        v95 = v94;
        v96 = *(_QWORD *)(v2 - 536);
        sub_1BDD86DEC(v95, v96, &qword_1ED6F26F0);
        if (v82(v96, 1, v81) == 1)
        {
          sub_1BDD86E30(v96, &qword_1ED6F26F0);
          v97 = *(_QWORD *)(v2 - 312);
          v98 = *(_QWORD *)(v2 - 584);
          v99 = *(_QWORD *)(v2 - 592);
          v100 = *(_QWORD *)(v2 - 480);
        }
        else
        {
          v135 = swift_getEnumCaseMultiPayload();
          v100 = *(_QWORD *)(v2 - 480);
          if (v135 == 11)
          {
            sub_1BDDA2E8C(v96, *(_QWORD *)(v2 - 480), type metadata accessor for Proto_TaggedValue);
            v97 = *(_QWORD *)(v2 - 312);
            v98 = *(_QWORD *)(v2 - 584);
            v99 = *(_QWORD *)(v2 - 592);
            goto LABEL_61;
          }
          sub_1BDD9C3E0(v96, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          v97 = *(_QWORD *)(v2 - 312);
          v98 = *(_QWORD *)(v2 - 584);
          v99 = *(_QWORD *)(v2 - 592);
        }
        sub_1BE1B20E4();
        v150 = *(int *)(v86 + 20);
        if (qword_1EF52B520 != -1)
          swift_once();
        *(_QWORD *)(v100 + v150) = qword_1EF52B518;
        swift_retain();
LABEL_61:
        sub_1BDD9C3E0(*(_QWORD *)(v2 - 336), type metadata accessor for Proto_Value);
        v151 = *(_QWORD *)(v100 + *(int *)(v86 + 20))
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        v152 = v151;
        v153 = *(_QWORD *)(v2 - 360);
        sub_1BDD86DEC(v152, v153, &qword_1ED6F3770);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v153, 1, v30) == 1)
        {
          v154 = *(_QWORD *)(v2 - 504);
          sub_1BE1B20E4();
          v155 = *(int *)(v30 + 20);
          if (qword_1ED6F2718 != -1)
            swift_once();
          *(_QWORD *)(v154 + v155) = qword_1ED6F2708;
          swift_retain();
          sub_1BDD86E30(*(_QWORD *)(v2 - 360), &qword_1ED6F3770);
        }
        else
        {
          v154 = *(_QWORD *)(v2 - 504);
          sub_1BDDA2E8C(v153, v154, type metadata accessor for Proto_Value);
        }
        v143 = *(_QWORD **)(v2 - 432);
        sub_1BDD9C3E0(v100, type metadata accessor for Proto_TaggedValue);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        v156 = sub_1BDDB4FC0(v154, v78);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v99 + 8) + 8) + 8))(v156, v98);
        if (!v97)
        {
LABEL_67:
          swift_release();
          swift_release();
          v157 = *(_QWORD *)(v2 - 376);
LABEL_80:
          swift_storeEnumTagMultiPayload();
          return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 384) + 32))(*(_QWORD *)(v2 - 368), v143, v157);
        }
LABEL_78:
        swift_release();
        swift_setDeallocating();
        return swift_release();
      }
      goto LABEL_82;
  }
  v123 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v124 = v123;
  v125 = *(_QWORD *)(v2 - 392);
  sub_1BDD86DEC(v124, v125, &qword_1ED6F3770);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v125, 1, v30);
  if ((_DWORD)result != 1)
  {
    v126 = v125;
    v127 = *(_QWORD *)(v2 - 328);
    sub_1BDDA2E8C(v126, v127, type metadata accessor for Proto_Value);
    v128 = *(_QWORD *)(v127 + *(int *)(v30 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v129 = v128;
    v130 = *(_QWORD *)(v2 - 528);
    sub_1BDD86DEC(v129, v130, &qword_1ED6F26F0);
    v131 = v82(v130, 1, v81);
    v132 = v30;
    if (v131 == 1)
    {
      sub_1BDD86E30(v130, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        v136 = *(_QWORD *)(v2 - 600);
        sub_1BDDA2E8C(v130, v136, type metadata accessor for Proto_TaggedValue);
        v137 = *(_QWORD *)(v2 - 312);
        v138 = *(_QWORD *)(v2 - 608);
        goto LABEL_72;
      }
      sub_1BDD9C3E0(v130, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v137 = *(_QWORD *)(v2 - 312);
    v136 = *(_QWORD *)(v2 - 600);
    v138 = *(_QWORD *)(v2 - 608);
    sub_1BE1B20E4();
    v158 = *(int *)(v86 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v136 + v158) = qword_1EF52B518;
    swift_retain();
LABEL_72:
    sub_1BDD9C3E0(*(_QWORD *)(v2 - 328), type metadata accessor for Proto_Value);
    v159 = *(_QWORD *)(v136 + *(int *)(v86 + 20))
         + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
    swift_beginAccess();
    v160 = *(_QWORD *)(v2 - 560);
    sub_1BDD86DEC(v159, v160, &qword_1ED6F3770);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 - 320))(v160, 1, v132) == 1)
    {
      sub_1BE1B20E4();
      v161 = *(int *)(v132 + 20);
      if (qword_1ED6F2718 != -1)
        swift_once();
      *(_QWORD *)(v138 + v161) = qword_1ED6F2708;
      swift_retain();
      sub_1BDD86E30(v160, &qword_1ED6F3770);
    }
    else
    {
      sub_1BDDA2E8C(v160, v138, type metadata accessor for Proto_Value);
    }
    sub_1BDD9C3E0(v136, type metadata accessor for Proto_TaggedValue);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v162 = sub_1BDDB4FC0(v138, v78);
    swift_release();
    AnyCRValue.init(from:)(v162, (uint64_t *)(v2 - 72));
    if (!v137)
    {
      swift_release();
      swift_release();
      v163 = *(_QWORD *)(v2 - 72);
      v143 = *(_QWORD **)(v2 - 616);
      *v143 = v88;
      v143[1] = v163;
      v157 = *(_QWORD *)(v2 - 376);
      goto LABEL_80;
    }
    goto LABEL_78;
  }
LABEL_85:
  __break(1u);
  return result;
}

void TaggedValue_3.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[37];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = a1;
  v57 = a2[4];
  v54[30] = *(_QWORD *)(v57 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v54[32] = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  v54[29] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v3);
  v54[31] = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v9 = MEMORY[0x1E0C80A78](v8);
  v54[26] = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v54[25] = (char *)v54 - v11;
  v55 = type metadata accessor for Proto_Value(0);
  v54[24] = *(_QWORD *)(v55 - 8);
  v12 = MEMORY[0x1E0C80A78](v55);
  v54[21] = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v54[22] = (char *)v54 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v54[27] = (char *)v54 - v17;
  MEMORY[0x1E0C80A78](v16);
  v54[20] = (char *)v54 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v54[9] = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v54[19] = (char *)v54 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v54[10] = (char *)v54 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v54[18] = (char *)v54 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v54[8] = (char *)v54 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v54[17] = (char *)v54 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v54[7] = (char *)v54 - v33;
  MEMORY[0x1E0C80A78](v32);
  v54[16] = (char *)v54 - v34;
  v56 = type metadata accessor for Proto_TaggedValue(0);
  v35 = MEMORY[0x1E0C80A78](v56);
  v54[11] = (char *)v54 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35);
  v54[28] = (char *)v54 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v54[14] = (char *)v54 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v54[23] = (char *)v54 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v54[13] = (char *)v54 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v54[15] = (char *)v54 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v54[12] = (char *)v54 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v50 = a2[2];
  MEMORY[0x1E0C80A78](v49);
  v52 = a2[5];
  v51 = a2[6];
  v53 = a2[7];
  v58 = v50;
  v59 = v6;
  v54[36] = v6;
  v60 = v57;
  v61 = v52;
  v62 = v51;
  v63 = v53;
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

void sub_1BDF59CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v2 - 280) = v0;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 552) + 32))(*(_QWORD *)(v2 - 544), v1, *(_QWORD *)(v2 - 520));
  v3 = *(_QWORD *)(v2 - 248) + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + *(int *)(*(_QWORD *)(v2 - 264) + 20))
     + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v5 = v4;
  v6 = *(_QWORD *)(v2 - 432);
  sub_1BDD86DEC(v5, v6, &qword_1ED6F26F0);
  v7 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48);
  if (v8(v6, 1, v7) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v6, &qword_1ED6F26F0);
    v9 = *(_QWORD *)(v2 - 560);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v9 = *(_QWORD *)(v2 - 560);
    if (EnumCaseMultiPayload == 11)
    {
      sub_1BDDA2E8C(v6, *(_QWORD *)(v2 - 560), type metadata accessor for Proto_TaggedValue);
      swift_retain();
      v11 = *(_QWORD *)(v2 - 256);
      goto LABEL_9;
    }
    swift_retain();
    sub_1BDD9C3E0(v6, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v11 = *(_QWORD *)(v2 - 256);
  v12 = *(int *)(v11 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v11 = *(_QWORD *)(v2 - 256);
  }
  *(_QWORD *)(v9 + v12) = qword_1EF52B518;
  swift_retain();
LABEL_9:
  v13 = *(int *)(v11 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v14 = swift_retain();
    *(_QWORD *)(v9 + v13) = sub_1BE138794(v14);
    swift_release();
  }
  v15 = *(_QWORD *)(v9 + v13);
  swift_beginAccess();
  *(_QWORD *)(v15 + 16) = 0;
  sub_1BE12A434(v9);
  v16 = swift_endAccess();
  MEMORY[0x1E0C80A78](v16);
  v17 = *(_QWORD *)(v2 - 520);
  v18 = *(_QWORD *)(v2 - 544);
  v19 = *(_QWORD *)(v2 - 280);
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF7E030, *(_QWORD *)(v2 - 400));
  if (v19)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 552) + 8))(v18, v17);
    goto LABEL_24;
  }
  *(_QWORD *)(v2 - 280) = 0;
  swift_beginAccess();
  v20 = *(_QWORD *)(v2 - 264);
  v21 = *(_QWORD *)(v3 + *(int *)(v20 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v22 = *(_QWORD *)(v2 - 504);
  sub_1BDD86DEC(v21, v22, &qword_1ED6F26F0);
  if (v8(v22, 1, v7) == 1)
  {
    sub_1BDD86E30(v22, &qword_1ED6F26F0);
    v23 = *(_QWORD *)(v2 - 352);
    v24 = *(_QWORD *)(v2 - 360);
    v25 = *(_QWORD *)(v2 - 368);
    v26 = *(_QWORD *)(v2 - 464);
  }
  else
  {
    v27 = swift_getEnumCaseMultiPayload();
    v23 = *(_QWORD *)(v2 - 352);
    v24 = *(_QWORD *)(v2 - 360);
    v25 = *(_QWORD *)(v2 - 368);
    v26 = *(_QWORD *)(v2 - 464);
    if (v27 == 11)
    {
      sub_1BDDA2E8C(v22, *(_QWORD *)(v2 - 464), type metadata accessor for Proto_TaggedValue);
      v28 = *(_QWORD *)(v2 - 256);
LABEL_21:
      v31 = *(int *)(v28 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        v32 = swift_retain();
        v33 = sub_1BE138794(v32);
        v26 = *(_QWORD *)(v2 - 464);
        *(_QWORD *)(v26 + v31) = v33;
        swift_release();
      }
      v34 = v26;
      v35 = *(_QWORD *)(v26 + v31);
      sub_1BDDA2E8C(*(_QWORD *)(v2 - 400), v24, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v24, 0, 1, v20);
      sub_1BDEFF368(v24, v23);
      v36 = v35
          + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1BDEFF3B0(v23, v36);
      swift_endAccess();
      swift_release();
      sub_1BE12A434(v34);
      swift_endAccess();
      swift_release();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 - 552) + 8))(*(_QWORD *)(v2 - 544), *(_QWORD *)(v2 - 520));
LABEL_24:
      JUMPOUT(0x1BDF59C38);
    }
    sub_1BDD9C3E0(v22, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v28 = *(_QWORD *)(v2 - 256);
  v29 = v26;
  v30 = *(int *)(v28 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v28 = *(_QWORD *)(v2 - 256);
  }
  *(_QWORD *)(v29 + v30) = qword_1EF52B518;
  swift_retain();
  v26 = v29;
  goto LABEL_21;
}

void sub_1BDF5B158()
{
  TaggedValue_3.init(from:)();
}

void sub_1BDF5B17C(uint64_t a1, _QWORD *a2)
{
  TaggedValue_3.encode(to:)(a1, a2);
}

void TaggedValue_3<>.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0C80A78](a1);
  v2 = MEMORY[0x1E0C80A78](v1);
  MEMORY[0x1E0C80A78](v2);
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF5B278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 72), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF5B2E0 + 4 * byte_1BE1BE398[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF5B2E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v0, v2);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
}

void sub_1BDF5B43C(uint64_t a1)
{
  TaggedValue_3<>.encode(to:)(a1);
}

void TaggedValue_4.init(from:)()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF5B4F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t inited;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  int EnumCaseMultiPayload;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE v199[96];

  *(_QWORD *)(v2 - 400) = a1;
  *(_QWORD *)(v2 - 408) = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v2 - 704) = &v199[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)(v2 - 440) = &v199[-v6];
  v7 = MEMORY[0x1E0C80A78](v5);
  *(_QWORD *)(v2 - 448) = &v199[-v8];
  v9 = MEMORY[0x1E0C80A78](v7);
  *(_QWORD *)(v2 - 456) = &v199[-v10];
  MEMORY[0x1E0C80A78](v9);
  *(_QWORD *)(v2 - 464) = &v199[-v11];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v13 = MEMORY[0x1E0C80A78](v12);
  *(_QWORD *)(v2 - 648) = &v199[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x1E0C80A78](v13);
  *(_QWORD *)(v2 - 656) = &v199[-v16];
  v17 = MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v2 - 664) = &v199[-v18];
  v19 = MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v2 - 672) = &v199[-v20];
  v21 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v2 - 680) = &v199[-v22];
  MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)(v2 - 328) = &v199[-v23];
  v24 = type metadata accessor for Proto_TaggedValue(0);
  *(_QWORD *)(v2 - 312) = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  *(_QWORD *)(v2 - 336) = &v199[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = MEMORY[0x1E0C80A78](v25);
  *(_QWORD *)(v2 - 472) = &v199[-v28];
  v29 = MEMORY[0x1E0C80A78](v27);
  *(_QWORD *)(v2 - 480) = &v199[-v30];
  v31 = MEMORY[0x1E0C80A78](v29);
  *(_QWORD *)(v2 - 488) = &v199[-v32];
  v33 = MEMORY[0x1E0C80A78](v31);
  *(_QWORD *)(v2 - 640) = &v199[-v34];
  MEMORY[0x1E0C80A78](v33);
  *(_QWORD *)(v2 - 320) = &v199[-v35];
  v36 = type metadata accessor for Proto_Value(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = MEMORY[0x1E0C80A78](v36);
  *(_QWORD *)(v2 - 496) = &v199[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = MEMORY[0x1E0C80A78](v38);
  *(_QWORD *)(v2 - 344) = &v199[-v41];
  v42 = MEMORY[0x1E0C80A78](v40);
  *(_QWORD *)(v2 - 504) = &v199[-v43];
  v44 = MEMORY[0x1E0C80A78](v42);
  *(_QWORD *)(v2 - 352) = &v199[-v45];
  v46 = MEMORY[0x1E0C80A78](v44);
  *(_QWORD *)(v2 - 512) = &v199[-v47];
  v48 = MEMORY[0x1E0C80A78](v46);
  *(_QWORD *)(v2 - 360) = &v199[-v49];
  v50 = MEMORY[0x1E0C80A78](v48);
  *(_QWORD *)(v2 - 520) = &v199[-v51];
  v52 = MEMORY[0x1E0C80A78](v50);
  *(_QWORD *)(v2 - 368) = &v199[-v53];
  v54 = MEMORY[0x1E0C80A78](v52);
  *(_QWORD *)(v2 - 528) = &v199[-v55];
  v56 = MEMORY[0x1E0C80A78](v54);
  *(_QWORD *)(v2 - 376) = &v199[-v57];
  MEMORY[0x1E0C80A78](v56);
  v59 = &v199[-v58];
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v61 = MEMORY[0x1E0C80A78](v60);
  *(_QWORD *)(v2 - 688) = &v199[-((v62 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v63 = MEMORY[0x1E0C80A78](v61);
  *(_QWORD *)(v2 - 536) = &v199[-v64];
  v65 = MEMORY[0x1E0C80A78](v63);
  *(_QWORD *)(v2 - 416) = &v199[-v66];
  v67 = MEMORY[0x1E0C80A78](v65);
  *(_QWORD *)(v2 - 544) = &v199[-v68];
  v69 = MEMORY[0x1E0C80A78](v67);
  *(_QWORD *)(v2 - 424) = &v199[-v70];
  v71 = MEMORY[0x1E0C80A78](v69);
  *(_QWORD *)(v2 - 552) = &v199[-v72];
  v73 = MEMORY[0x1E0C80A78](v71);
  *(_QWORD *)(v2 - 432) = &v199[-v74];
  v75 = MEMORY[0x1E0C80A78](v73);
  *(_QWORD *)(v2 - 560) = &v199[-v76];
  v77 = MEMORY[0x1E0C80A78](v75);
  *(_QWORD *)(v2 - 696) = &v199[-v78];
  v79 = MEMORY[0x1E0C80A78](v77);
  *(_QWORD *)(v2 - 568) = &v199[-v80];
  v81 = MEMORY[0x1E0C80A78](v79);
  v83 = &v199[-v82];
  MEMORY[0x1E0C80A78](v81);
  v85 = &v199[-v84];
  v86 = v1;
  v87 = v1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v87, (uint64_t)v85, &qword_1ED6F3770);
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  LODWORD(v37) = v88((uint64_t)v85, 1, v36);
  sub_1BDD86E30((uint64_t)v85, &qword_1ED6F3770);
  if ((_DWORD)v37 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(v2 - 384) = inited;
    *(_QWORD *)(inited + 16) = v86;
    sub_1BDD86DEC(v87, (uint64_t)v83, &qword_1ED6F3770);
    v92 = v88;
    if (v88((uint64_t)v83, 1, v36) == 1)
    {
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      JUMPOUT(0x1BDF5CEB4);
    }
    v93 = v86;
    v94 = v36;
    sub_1BDDA2E8C((uint64_t)v83, (uint64_t)v59, type metadata accessor for Proto_Value);
    v95 = *(_QWORD *)&v59[*(int *)(v36 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v96 = *(_QWORD *)(v2 - 328);
    sub_1BDD86DEC(v95, v96, &qword_1ED6F26F0);
    v97 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v98 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 48);
    if (v98(v96, 1, v97) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v96, &qword_1ED6F26F0);
      v99 = *(_QWORD *)(v2 - 320);
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v99 = *(_QWORD *)(v2 - 320);
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v96, *(_QWORD *)(v2 - 320), type metadata accessor for Proto_TaggedValue);
        v101 = *(_QWORD *)(v2 - 312);
LABEL_12:
        swift_retain();
        sub_1BDD9C3E0((uint64_t)v59, type metadata accessor for Proto_Value);
        v103 = *(_QWORD *)(v99 + *(int *)(v101 + 20));
        swift_beginAccess();
        v104 = *(_QWORD *)(v103 + 16);
        sub_1BDD9C3E0(v99, type metadata accessor for Proto_TaggedValue);
        v105 = v97;
        switch(v104)
        {
          case 0:
            v106 = *(_QWORD *)(*(_QWORD *)(v2 - 384) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v107 = *(_QWORD *)(v2 - 568);
            sub_1BDD86DEC(v106, v107, &qword_1ED6F3770);
            if (v92(v107, 1, v94) == 1)
              goto LABEL_97;
            v108 = v107;
            v109 = *(_QWORD *)(v2 - 376);
            sub_1BDDA2E8C(v108, v109, type metadata accessor for Proto_Value);
            v110 = *(_QWORD *)(v109 + *(int *)(v94 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v111 = v110;
            v112 = *(_QWORD *)(v2 - 680);
            sub_1BDD86DEC(v111, v112, &qword_1ED6F26F0);
            v113 = v98(v112, 1, v105);
            v114 = *(_QWORD *)(v2 - 640);
            if (v113 == 1)
            {
              sub_1BDD86E30(v112, &qword_1ED6F26F0);
              v115 = *(_QWORD *)(v2 - 304);
              v116 = *(_QWORD *)(v2 - 464);
            }
            else
            {
              v158 = swift_getEnumCaseMultiPayload();
              v115 = *(_QWORD *)(v2 - 304);
              v116 = *(_QWORD *)(v2 - 464);
              if (v158 == 11)
              {
                sub_1BDDA2E8C(v112, v114, type metadata accessor for Proto_TaggedValue);
                goto LABEL_42;
              }
              sub_1BDD9C3E0(v112, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v163 = *(int *)(v101 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v114 + v163) = qword_1EF52B518;
            swift_retain();
LABEL_42:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 376), type metadata accessor for Proto_Value);
            v164 = *(_QWORD *)(v114 + *(int *)(v101 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v165 = *(_QWORD *)(v2 - 696);
            sub_1BDD86DEC(v164, v165, &qword_1ED6F3770);
            if (v92(v165, 1, v94) == 1)
            {
              v166 = *(_QWORD *)(v2 - 528);
              sub_1BE1B20E4();
              v167 = *(int *)(v94 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v166 + v167) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v165, &qword_1ED6F3770);
            }
            else
            {
              v166 = *(_QWORD *)(v2 - 528);
              sub_1BDDA2E8C(v165, v166, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v114, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v168 = sub_1BDDB4FC0(v166, v93);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 624) + 8) + 8) + 8))(v168);
            if (v115)
              goto LABEL_93;
            swift_release();
            swift_release();
            v169 = *(_QWORD *)(v2 - 400);
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 408) + 32))(*(_QWORD *)(v2 - 392), v116, v169);
          case 1:
            v117 = *(_QWORD *)(*(_QWORD *)(v2 - 384) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v118 = v117;
            v119 = *(_QWORD *)(v2 - 560);
            sub_1BDD86DEC(v118, v119, &qword_1ED6F3770);
            if (v92(v119, 1, v94) == 1)
              goto LABEL_98;
            v120 = v119;
            v121 = *(_QWORD *)(v2 - 368);
            sub_1BDDA2E8C(v120, v121, type metadata accessor for Proto_Value);
            v122 = *(_QWORD *)(v121 + *(int *)(v94 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v123 = v122;
            v124 = *(_QWORD *)(v2 - 672);
            sub_1BDD86DEC(v123, v124, &qword_1ED6F26F0);
            if (v98(v124, 1, v97) == 1)
            {
              sub_1BDD86E30(v124, &qword_1ED6F26F0);
              v125 = *(_QWORD *)(v2 - 304);
              v126 = *(_QWORD **)(v2 - 456);
              v127 = *(_QWORD *)(v2 - 488);
            }
            else
            {
              v159 = swift_getEnumCaseMultiPayload();
              v125 = *(_QWORD *)(v2 - 304);
              v126 = *(_QWORD **)(v2 - 456);
              v127 = *(_QWORD *)(v2 - 488);
              if (v159 == 11)
              {
                sub_1BDDA2E8C(v124, *(_QWORD *)(v2 - 488), type metadata accessor for Proto_TaggedValue);
                goto LABEL_53;
              }
              sub_1BDD9C3E0(v124, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v170 = *(int *)(v101 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v127 + v170) = qword_1EF52B518;
            swift_retain();
LABEL_53:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 368), type metadata accessor for Proto_Value);
            v171 = *(_QWORD *)(v127 + *(int *)(v101 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v172 = v171;
            v173 = *(_QWORD *)(v2 - 432);
            sub_1BDD86DEC(v172, v173, &qword_1ED6F3770);
            if (v92(v173, 1, v94) == 1)
            {
              v174 = *(_QWORD *)(v2 - 520);
              sub_1BE1B20E4();
              v175 = *(int *)(v94 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v174 + v175) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(*(_QWORD *)(v2 - 432), &qword_1ED6F3770);
            }
            else
            {
              v174 = *(_QWORD *)(v2 - 520);
              sub_1BDDA2E8C(v173, v174, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v127, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v176 = sub_1BDDB4FC0(v174, v93);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 616) + 8) + 8) + 8))(v176);
            if (v125)
              goto LABEL_93;
            goto LABEL_59;
          case 2:
            v128 = *(_QWORD *)(*(_QWORD *)(v2 - 384) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v129 = v128;
            v130 = *(_QWORD *)(v2 - 552);
            sub_1BDD86DEC(v129, v130, &qword_1ED6F3770);
            if (v92(v130, 1, v94) == 1)
              goto LABEL_99;
            v131 = v130;
            v132 = *(_QWORD *)(v2 - 360);
            sub_1BDDA2E8C(v131, v132, type metadata accessor for Proto_Value);
            v133 = *(_QWORD *)(v132 + *(int *)(v94 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v134 = v133;
            v135 = *(_QWORD *)(v2 - 664);
            sub_1BDD86DEC(v134, v135, &qword_1ED6F26F0);
            if (v98(v135, 1, v97) == 1)
            {
              sub_1BDD86E30(v135, &qword_1ED6F26F0);
              v136 = *(_QWORD *)(v2 - 304);
              v126 = *(_QWORD **)(v2 - 448);
              v137 = *(_QWORD *)(v2 - 480);
            }
            else
            {
              v160 = swift_getEnumCaseMultiPayload();
              v136 = *(_QWORD *)(v2 - 304);
              v126 = *(_QWORD **)(v2 - 448);
              v137 = *(_QWORD *)(v2 - 480);
              if (v160 == 11)
              {
                sub_1BDDA2E8C(v135, *(_QWORD *)(v2 - 480), type metadata accessor for Proto_TaggedValue);
                goto LABEL_64;
              }
              sub_1BDD9C3E0(v135, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v178 = *(int *)(v101 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v137 + v178) = qword_1EF52B518;
            swift_retain();
LABEL_64:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 360), type metadata accessor for Proto_Value);
            v179 = *(_QWORD *)(v137 + *(int *)(v101 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v180 = v179;
            v181 = *(_QWORD *)(v2 - 424);
            sub_1BDD86DEC(v180, v181, &qword_1ED6F3770);
            if (v92(v181, 1, v94) == 1)
            {
              v182 = *(_QWORD *)(v2 - 512);
              sub_1BE1B20E4();
              v183 = *(int *)(v94 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v182 + v183) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(*(_QWORD *)(v2 - 424), &qword_1ED6F3770);
            }
            else
            {
              v182 = *(_QWORD *)(v2 - 512);
              sub_1BDDA2E8C(v181, v182, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v137, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v184 = sub_1BDDB4FC0(v182, v93);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 608) + 8) + 8) + 8))(v184);
            if (!v136)
              goto LABEL_59;
            goto LABEL_93;
          case 3:
            v138 = *(_QWORD *)(*(_QWORD *)(v2 - 384) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v139 = v138;
            v140 = *(_QWORD *)(v2 - 544);
            sub_1BDD86DEC(v139, v140, &qword_1ED6F3770);
            if (v92(v140, 1, v94) == 1)
              goto LABEL_100;
            v141 = v140;
            v142 = *(_QWORD *)(v2 - 352);
            sub_1BDDA2E8C(v141, v142, type metadata accessor for Proto_Value);
            v143 = *(_QWORD *)(v142 + *(int *)(v94 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v144 = v143;
            v145 = *(_QWORD *)(v2 - 656);
            sub_1BDD86DEC(v144, v145, &qword_1ED6F26F0);
            if (v98(v145, 1, v97) == 1)
            {
              sub_1BDD86E30(v145, &qword_1ED6F26F0);
              v146 = *(_QWORD *)(v2 - 304);
              v126 = *(_QWORD **)(v2 - 440);
              v147 = *(_QWORD *)(v2 - 472);
            }
            else
            {
              v161 = swift_getEnumCaseMultiPayload();
              v146 = *(_QWORD *)(v2 - 304);
              v126 = *(_QWORD **)(v2 - 440);
              v147 = *(_QWORD *)(v2 - 472);
              if (v161 == 11)
              {
                sub_1BDDA2E8C(v145, *(_QWORD *)(v2 - 472), type metadata accessor for Proto_TaggedValue);
                goto LABEL_75;
              }
              sub_1BDD9C3E0(v145, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v185 = *(int *)(v101 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v147 + v185) = qword_1EF52B518;
            swift_retain();
LABEL_75:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 352), type metadata accessor for Proto_Value);
            v186 = *(_QWORD *)(v147 + *(int *)(v101 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v187 = v186;
            v188 = *(_QWORD *)(v2 - 416);
            sub_1BDD86DEC(v187, v188, &qword_1ED6F3770);
            if (v92(v188, 1, v94) == 1)
            {
              v189 = *(_QWORD *)(v2 - 504);
              sub_1BE1B20E4();
              v190 = *(int *)(v94 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v189 + v190) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(*(_QWORD *)(v2 - 416), &qword_1ED6F3770);
            }
            else
            {
              v189 = *(_QWORD *)(v2 - 504);
              sub_1BDDA2E8C(v188, v189, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v147, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v191 = sub_1BDDB4FC0(v189, v93);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 632) + 8) + 8) + 8))(v191);
            if (v146)
              goto LABEL_93;
LABEL_59:
            swift_release();
            swift_release();
            v177 = *(_QWORD *)(v2 - 400);
            goto LABEL_95;
          default:
            v148 = *(_QWORD *)(*(_QWORD *)(v2 - 384) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v149 = v148;
            v150 = *(_QWORD *)(v2 - 536);
            sub_1BDD86DEC(v149, v150, &qword_1ED6F3770);
            if (v92(v150, 1, v94) == 1)
              goto LABEL_101;
            v151 = v150;
            v152 = *(_QWORD *)(v2 - 344);
            sub_1BDDA2E8C(v151, v152, type metadata accessor for Proto_Value);
            v153 = *(_QWORD *)(v152 + *(int *)(v94 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v154 = v153;
            v155 = *(_QWORD *)(v2 - 648);
            sub_1BDD86DEC(v154, v155, &qword_1ED6F26F0);
            if (v98(v155, 1, (uint64_t)v92) == 1)
            {
              sub_1BDD86E30(v155, &qword_1ED6F26F0);
              v156 = *(_QWORD *)(v2 - 304);
              v157 = *(_QWORD *)(v2 - 336);
            }
            else
            {
              v162 = swift_getEnumCaseMultiPayload();
              v156 = *(_QWORD *)(v2 - 304);
              v157 = *(_QWORD *)(v2 - 336);
              if (v162 == 11)
              {
                sub_1BDDA2E8C(v155, *(_QWORD *)(v2 - 336), type metadata accessor for Proto_TaggedValue);
                goto LABEL_87;
              }
              sub_1BDD9C3E0(v155, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v192 = *(int *)(v101 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v157 + v192) = qword_1EF52B518;
            swift_retain();
LABEL_87:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 344), type metadata accessor for Proto_Value);
            v193 = *(_QWORD *)(v157 + *(int *)(v101 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v194 = *(_QWORD *)(v2 - 688);
            sub_1BDD86DEC(v193, v194, &qword_1ED6F3770);
            if (v92(v194, 1, v94) == 1)
            {
              v195 = *(_QWORD *)(v2 - 496);
              sub_1BE1B20E4();
              v196 = *(int *)(v94 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v195 + v196) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v194, &qword_1ED6F3770);
            }
            else
            {
              v195 = *(_QWORD *)(v2 - 496);
              sub_1BDDA2E8C(v194, v195, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 336), type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v197 = sub_1BDDB4FC0(v195, v93);
            swift_release();
            AnyCRValue.init(from:)(v197, (uint64_t *)(v2 - 72));
            if (v156)
            {
LABEL_93:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            else
            {
              swift_release();
              swift_release();
              v198 = *(_QWORD *)(v2 - 72);
              v126 = *(_QWORD **)(v2 - 704);
              *v126 = v104;
              v126[1] = v198;
              v177 = *(_QWORD *)(v2 - 400);
LABEL_95:
              swift_storeEnumTagMultiPayload();
              return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 408) + 32))(*(_QWORD *)(v2 - 392), v126, v177);
            }
        }
      }
      swift_retain();
      sub_1BDD9C3E0(v96, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v101 = *(_QWORD *)(v2 - 312);
    v102 = *(int *)(v101 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v99 + v102) = qword_1EF52B518;
    v94 = v36;
    goto LABEL_12;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v89 = 0xD000000000000017;
  *(_QWORD *)(v89 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v89 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

void TaggedValue_4.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[45];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v71 = a1;
  v72 = a2[5];
  v68[41] = *(_QWORD *)(v72 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v68[44] = (char *)v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = *(_QWORD *)(v5 + 32);
  v68[40] = *(_QWORD *)(v82 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v68[43] = (char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = *(_QWORD *)(v8 + 24);
  v68[36] = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v6);
  v68[42] = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v11 = MEMORY[0x1E0C80A78](v10);
  v68[29] = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v68[31] = (char *)v68 - v13;
  v70 = type metadata accessor for Proto_Value(0);
  v68[30] = *(_QWORD *)(v70 - 8);
  v14 = MEMORY[0x1E0C80A78](v70);
  v68[26] = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v68[28] = (char *)v68 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v68[27] = (char *)v68 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v68[25] = (char *)v68 - v21;
  MEMORY[0x1E0C80A78](v20);
  v68[24] = (char *)v68 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v24 = MEMORY[0x1E0C80A78](v23);
  v68[11] = (char *)v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v68[23] = (char *)v68 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v68[12] = (char *)v68 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v68[22] = (char *)v68 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v68[10] = (char *)v68 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v68[21] = (char *)v68 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v68[9] = (char *)v68 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v68[20] = (char *)v68 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v68[8] = (char *)v68 - v41;
  MEMORY[0x1E0C80A78](v40);
  v68[19] = (char *)v68 - v42;
  v69 = type metadata accessor for Proto_TaggedValue(0);
  v43 = MEMORY[0x1E0C80A78](v69);
  v68[14] = (char *)v68 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v68[35] = (char *)v68 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v68[17] = (char *)v68 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v68[34] = (char *)v68 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v68[13] = (char *)v68 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v68[33] = (char *)v68 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v68[16] = (char *)v68 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v68[18] = (char *)v68 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v68[15] = (char *)v68 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v68[32] = (char *)v68 - v62;
  v63 = a2[2];
  MEMORY[0x1E0C80A78](v61);
  v64 = a2[6];
  v65 = a2[7];
  v67 = a2[8];
  v66 = a2[9];
  v74 = v63;
  v75 = v73;
  v76 = v82;
  v77 = v72;
  v78 = v64;
  v79 = v65;
  v80 = v67;
  v81 = v66;
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

void sub_1BDF5D5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = v2;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 32))(v1, v3, *(_QWORD *)(v4 - 616));
  v6 = *(_QWORD *)(v4 - 280) + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v7 = *(_QWORD *)(v6 + *(int *)(*(_QWORD *)(v4 - 288) + 20))
     + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v8 = v7;
  v9 = *(_QWORD *)(v4 - 504);
  sub_1BDD86DEC(v8, v9, &qword_1ED6F26F0);
  v10 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (v11(v9, 1, v10) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v9, &qword_1ED6F26F0);
    v12 = *(_QWORD *)(v4 - 400);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v12 = *(_QWORD *)(v4 - 400);
    if (EnumCaseMultiPayload == 11)
    {
      sub_1BDDA2E8C(v9, *(_QWORD *)(v4 - 400), type metadata accessor for Proto_TaggedValue);
      swift_retain();
      v14 = *(_QWORD *)(v4 - 296);
      goto LABEL_9;
    }
    swift_retain();
    sub_1BDD9C3E0(v9, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v14 = *(_QWORD *)(v4 - 296);
  v15 = *(int *)(v14 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v14 = *(_QWORD *)(v4 - 296);
  }
  *(_QWORD *)(v12 + v15) = qword_1EF52B518;
  swift_retain();
LABEL_9:
  v16 = *(int *)(v14 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v17 = swift_retain();
    v18 = sub_1BE138794(v17);
    v12 = *(_QWORD *)(v4 - 400);
    *(_QWORD *)(v12 + v16) = v18;
    swift_release();
  }
  v19 = *(_QWORD *)(v12 + v16);
  swift_beginAccess();
  *(_QWORD *)(v19 + 16) = 0;
  sub_1BE12A434(v12);
  v20 = swift_endAccess();
  MEMORY[0x1E0C80A78](v20);
  v21 = *(_QWORD *)(v4 - 616);
  v22 = *(_QWORD *)(v4 - 600);
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF7E110, *(_QWORD *)(v4 - 464));
  if (v5)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 608) + 8))(v22, v21);
    goto LABEL_24;
  }
  *(_QWORD *)(v4 - 72) = 0;
  swift_beginAccess();
  v23 = *(_QWORD *)(v4 - 288);
  v24 = *(_QWORD *)(v6 + *(int *)(v23 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v25 = *(_QWORD *)(v4 - 592);
  sub_1BDD86DEC(v24, v25, &qword_1ED6F26F0);
  if (v11(v25, 1, v10) == 1)
  {
    sub_1BDD86E30(v25, &qword_1ED6F26F0);
    v26 = *(_QWORD *)(v4 - 424);
    v27 = *(_QWORD *)(v4 - 408);
    v28 = *(_QWORD *)(v4 - 464);
    v29 = *(_QWORD *)(v4 - 536);
  }
  else
  {
    v30 = swift_getEnumCaseMultiPayload();
    v27 = *(_QWORD *)(v4 - 408);
    v28 = *(_QWORD *)(v4 - 464);
    v29 = *(_QWORD *)(v4 - 536);
    if (v30 == 11)
    {
      sub_1BDDA2E8C(v25, *(_QWORD *)(v4 - 536), type metadata accessor for Proto_TaggedValue);
      v26 = *(_QWORD *)(v4 - 424);
      v31 = *(_QWORD *)(v4 - 296);
LABEL_21:
      v33 = *(int *)(v31 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        v34 = swift_retain();
        v35 = sub_1BE138794(v34);
        v29 = *(_QWORD *)(v4 - 536);
        *(_QWORD *)(v29 + v33) = v35;
        swift_release();
      }
      v36 = *(_QWORD *)(v29 + v33);
      sub_1BDDA2E8C(v28, v27, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 416) + 56))(v27, 0, 1, v23);
      sub_1BDEFF368(v27, v26);
      v37 = v36
          + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1BDEFF3B0(v26, v37);
      swift_endAccess();
      swift_release();
      sub_1BE12A434(v29);
      swift_endAccess();
      swift_release();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 608) + 8))(*(_QWORD *)(v4 - 600), *(_QWORD *)(v4 - 616));
LABEL_24:
      JUMPOUT(0x1BDF5D4D4);
    }
    sub_1BDD9C3E0(v25, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v26 = *(_QWORD *)(v4 - 424);
  }
  sub_1BE1B20E4();
  v31 = *(_QWORD *)(v4 - 296);
  v32 = *(int *)(v31 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v31 = *(_QWORD *)(v4 - 296);
  }
  *(_QWORD *)(v29 + v32) = qword_1EF52B518;
  swift_retain();
  goto LABEL_21;
}

void sub_1BDF5F078()
{
  TaggedValue_4.init(from:)();
}

void sub_1BDF5F0AC(uint64_t a1, _QWORD *a2)
{
  TaggedValue_4.encode(to:)(a1, a2);
}

void TaggedValue_4<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[19];
  __int128 v21;
  __int128 v22;

  v20[8] = a6;
  v20[4] = a3;
  v20[5] = a4;
  v20[10] = a1;
  v6 = *(_QWORD *)(a2 + 40);
  v20[6] = *(_QWORD *)(v6 - 8);
  v20[7] = a5;
  v7 = MEMORY[0x1E0C80A78](a1);
  v20[3] = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 32);
  v20[2] = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v20[1] = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 24);
  v20[0] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = *(_QWORD *)(v16 + 16);
  MEMORY[0x1E0C80A78](v15);
  v20[15] = v17;
  v20[16] = v14;
  v20[17] = v10;
  v20[18] = v6;
  v19 = *(_OWORD *)(v18 + 64);
  v21 = *(_OWORD *)(v18 + 48);
  v22 = v19;
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF5F1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 200), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF5F254 + 4 * byte_1BE1BE3A1[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF5F254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

void sub_1BDF5F418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TaggedValue_4<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32));
}

void TaggedValue_5.init(from:)()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF5F4E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t inited;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t);
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int EnumCaseMultiPayload;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _BYTE v231[96];

  *(_QWORD *)(v2 - 360) = a1;
  *(_QWORD *)(v2 - 368) = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v2 - 792) = &v231[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)(v2 - 392) = &v231[-v6];
  v7 = MEMORY[0x1E0C80A78](v5);
  *(_QWORD *)(v2 - 400) = &v231[-v8];
  v9 = MEMORY[0x1E0C80A78](v7);
  *(_QWORD *)(v2 - 408) = &v231[-v10];
  v11 = MEMORY[0x1E0C80A78](v9);
  *(_QWORD *)(v2 - 416) = &v231[-v12];
  MEMORY[0x1E0C80A78](v11);
  *(_QWORD *)(v2 - 424) = &v231[-v13];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v15 = MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)(v2 - 656) = &v231[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x1E0C80A78](v15);
  *(_QWORD *)(v2 - 664) = &v231[-v18];
  v19 = MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v2 - 672) = &v231[-v20];
  v21 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v2 - 680) = &v231[-v22];
  v23 = MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)(v2 - 688) = &v231[-v24];
  v25 = MEMORY[0x1E0C80A78](v23);
  *(_QWORD *)(v2 - 696) = &v231[-v26];
  MEMORY[0x1E0C80A78](v25);
  *(_QWORD *)(v2 - 336) = &v231[-v27];
  v28 = type metadata accessor for Proto_TaggedValue(0);
  *(_QWORD *)(v2 - 320) = v28;
  v29 = MEMORY[0x1E0C80A78](v28);
  *(_QWORD *)(v2 - 432) = &v231[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = MEMORY[0x1E0C80A78](v29);
  *(_QWORD *)(v2 - 440) = &v231[-v32];
  v33 = MEMORY[0x1E0C80A78](v31);
  *(_QWORD *)(v2 - 448) = &v231[-v34];
  v35 = MEMORY[0x1E0C80A78](v33);
  *(_QWORD *)(v2 - 456) = &v231[-v36];
  v37 = MEMORY[0x1E0C80A78](v35);
  *(_QWORD *)(v2 - 464) = &v231[-v38];
  v39 = MEMORY[0x1E0C80A78](v37);
  *(_QWORD *)(v2 - 472) = &v231[-v40];
  MEMORY[0x1E0C80A78](v39);
  *(_QWORD *)(v2 - 328) = &v231[-v41];
  v42 = type metadata accessor for Proto_Value(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = MEMORY[0x1E0C80A78](v42);
  *(_QWORD *)(v2 - 480) = &v231[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = MEMORY[0x1E0C80A78](v44);
  *(_QWORD *)(v2 - 376) = &v231[-v47];
  v48 = MEMORY[0x1E0C80A78](v46);
  *(_QWORD *)(v2 - 488) = &v231[-v49];
  v50 = MEMORY[0x1E0C80A78](v48);
  *(_QWORD *)(v2 - 704) = &v231[-v51];
  v52 = MEMORY[0x1E0C80A78](v50);
  *(_QWORD *)(v2 - 496) = &v231[-v53];
  v54 = MEMORY[0x1E0C80A78](v52);
  *(_QWORD *)(v2 - 712) = &v231[-v55];
  v56 = MEMORY[0x1E0C80A78](v54);
  *(_QWORD *)(v2 - 504) = &v231[-v57];
  v58 = MEMORY[0x1E0C80A78](v56);
  *(_QWORD *)(v2 - 728) = &v231[-v59];
  v60 = MEMORY[0x1E0C80A78](v58);
  *(_QWORD *)(v2 - 512) = &v231[-v61];
  v62 = MEMORY[0x1E0C80A78](v60);
  *(_QWORD *)(v2 - 744) = &v231[-v63];
  v64 = MEMORY[0x1E0C80A78](v62);
  *(_QWORD *)(v2 - 520) = &v231[-v65];
  v66 = MEMORY[0x1E0C80A78](v64);
  *(_QWORD *)(v2 - 760) = &v231[-v67];
  MEMORY[0x1E0C80A78](v66);
  v69 = &v231[-v68];
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v71 = MEMORY[0x1E0C80A78](v70);
  *(_QWORD *)(v2 - 384) = &v231[-((v72 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v73 = MEMORY[0x1E0C80A78](v71);
  *(_QWORD *)(v2 - 528) = &v231[-v74];
  v75 = MEMORY[0x1E0C80A78](v73);
  *(_QWORD *)(v2 - 720) = &v231[-v76];
  v77 = MEMORY[0x1E0C80A78](v75);
  *(_QWORD *)(v2 - 536) = &v231[-v78];
  v79 = MEMORY[0x1E0C80A78](v77);
  *(_QWORD *)(v2 - 736) = &v231[-v80];
  v81 = MEMORY[0x1E0C80A78](v79);
  *(_QWORD *)(v2 - 544) = &v231[-v82];
  v83 = MEMORY[0x1E0C80A78](v81);
  *(_QWORD *)(v2 - 752) = &v231[-v84];
  v85 = MEMORY[0x1E0C80A78](v83);
  *(_QWORD *)(v2 - 552) = &v231[-v86];
  v87 = MEMORY[0x1E0C80A78](v85);
  *(_QWORD *)(v2 - 768) = &v231[-v88];
  v89 = MEMORY[0x1E0C80A78](v87);
  *(_QWORD *)(v2 - 560) = &v231[-v90];
  v91 = MEMORY[0x1E0C80A78](v89);
  *(_QWORD *)(v2 - 776) = &v231[-v92];
  v93 = MEMORY[0x1E0C80A78](v91);
  *(_QWORD *)(v2 - 568) = &v231[-v94];
  v95 = MEMORY[0x1E0C80A78](v93);
  v97 = &v231[-v96];
  MEMORY[0x1E0C80A78](v95);
  v99 = &v231[-v98];
  v100 = v1;
  v101 = v1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v101, (uint64_t)v99, &qword_1ED6F3770);
  v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  LODWORD(v43) = v102((uint64_t)v99, 1, v42);
  sub_1BDD86E30((uint64_t)v99, &qword_1ED6F3770);
  if ((_DWORD)v43 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(v2 - 784) = inited;
    *(_QWORD *)(inited + 16) = v100;
    sub_1BDD86DEC(v101, (uint64_t)v97, &qword_1ED6F3770);
    v105 = v102;
    if (v102((uint64_t)v97, 1, v42) == 1)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      JUMPOUT(0x1BDF612BCLL);
    }
    v106 = v100;
    sub_1BDDA2E8C((uint64_t)v97, (uint64_t)v69, type metadata accessor for Proto_Value);
    v107 = v42;
    v108 = *(_QWORD *)&v69[*(int *)(v42 + 20)]
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v109 = *(_QWORD *)(v2 - 336);
    sub_1BDD86DEC(v108, v109, &qword_1ED6F26F0);
    v110 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v111 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 48);
    v112 = v111(v109, 1, v110);
    v113 = *(_QWORD *)(v2 - 320);
    v114 = *(_QWORD *)(v2 - 328);
    *(_QWORD *)(v2 - 800) = v110;
    *(_QWORD *)(v2 - 808) = v106;
    if (v112 == 1)
    {
      swift_retain();
      sub_1BDD86E30(v109, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1BDDA2E8C(v109, v114, type metadata accessor for Proto_TaggedValue);
        v115 = v107;
LABEL_12:
        swift_retain();
        sub_1BDD9C3E0((uint64_t)v69, type metadata accessor for Proto_Value);
        v118 = v114;
        v119 = *(_QWORD *)(v114 + *(int *)(v113 + 20));
        swift_beginAccess();
        v120 = *(_QWORD *)(v119 + 16);
        sub_1BDD9C3E0(v118, type metadata accessor for Proto_TaggedValue);
        switch(v120)
        {
          case 0:
            v121 = *(_QWORD *)(*(_QWORD *)(v2 - 784) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v122 = v121;
            v123 = *(_QWORD *)(v2 - 568);
            sub_1BDD86DEC(v122, v123, &qword_1ED6F3770);
            if (v105(v123, 1, v115) == 1)
              goto LABEL_112;
            v124 = *(_QWORD *)(v2 - 760);
            sub_1BDDA2E8C(v123, v124, type metadata accessor for Proto_Value);
            v125 = *(_QWORD *)(v124 + *(int *)(v115 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v126 = v125;
            v127 = *(_QWORD *)(v2 - 696);
            sub_1BDD86DEC(v126, v127, &qword_1ED6F26F0);
            if (v111(v127, 1, *(_QWORD *)(v2 - 800)) == 1)
            {
              sub_1BDD86E30(v127, &qword_1ED6F26F0);
              v128 = *(_QWORD *)(v2 - 424);
              v129 = *(_QWORD *)(v2 - 472);
            }
            else
            {
              EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              v128 = *(_QWORD *)(v2 - 424);
              v129 = *(_QWORD *)(v2 - 472);
              if (EnumCaseMultiPayload == 11)
              {
                sub_1BDDA2E8C(v127, *(_QWORD *)(v2 - 472), type metadata accessor for Proto_TaggedValue);
                goto LABEL_47;
              }
              sub_1BDD9C3E0(v127, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v180 = *(int *)(v113 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v129 + v180) = qword_1EF52B518;
            swift_retain();
LABEL_47:
            sub_1BDD9C3E0(v124, type metadata accessor for Proto_Value);
            v181 = *(_QWORD *)(v129 + *(int *)(v113 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v182 = *(_QWORD *)(v2 - 776);
            sub_1BDD86DEC(v181, v182, &qword_1ED6F3770);
            if (v105(v182, 1, v115) == 1)
            {
              v183 = *(_QWORD *)(v2 - 520);
              sub_1BE1B20E4();
              v184 = *(int *)(v115 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v183 + v184) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v182, &qword_1ED6F3770);
            }
            else
            {
              v183 = *(_QWORD *)(v2 - 520);
              sub_1BDDA2E8C(v182, v183, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v129, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            v185 = *(_QWORD *)(v2 - 808);
            swift_retain();
            v186 = sub_1BDDB4FC0(v183, v185);
            swift_release();
            v187 = *(_QWORD *)(v2 - 344);
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 624) + 8) + 8) + 8))(v186);
            if (v187)
              goto LABEL_97;
            goto LABEL_99;
          case 1:
            v130 = *(_QWORD *)(*(_QWORD *)(v2 - 784) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v131 = v130;
            v132 = *(_QWORD *)(v2 - 560);
            sub_1BDD86DEC(v131, v132, &qword_1ED6F3770);
            if (v105(v132, 1, v115) == 1)
              goto LABEL_113;
            v133 = *(_QWORD *)(v2 - 744);
            sub_1BDDA2E8C(v132, v133, type metadata accessor for Proto_Value);
            v134 = *(_QWORD *)(v133 + *(int *)(v115 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v135 = v134;
            v136 = *(_QWORD *)(v2 - 688);
            sub_1BDD86DEC(v135, v136, &qword_1ED6F26F0);
            if (v111(v136, 1, *(_QWORD *)(v2 - 800)) == 1)
            {
              sub_1BDD86E30(v136, &qword_1ED6F26F0);
              v128 = *(_QWORD *)(v2 - 416);
              v137 = *(_QWORD *)(v2 - 464);
            }
            else
            {
              v173 = swift_getEnumCaseMultiPayload();
              v128 = *(_QWORD *)(v2 - 416);
              v137 = *(_QWORD *)(v2 - 464);
              if (v173 == 11)
              {
                sub_1BDDA2E8C(v136, *(_QWORD *)(v2 - 464), type metadata accessor for Proto_TaggedValue);
                goto LABEL_58;
              }
              sub_1BDD9C3E0(v136, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v188 = *(int *)(v113 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v137 + v188) = qword_1EF52B518;
            swift_retain();
LABEL_58:
            sub_1BDD9C3E0(v133, type metadata accessor for Proto_Value);
            v189 = *(_QWORD *)(v137 + *(int *)(v113 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v190 = *(_QWORD *)(v2 - 768);
            sub_1BDD86DEC(v189, v190, &qword_1ED6F3770);
            if (v105(v190, 1, v115) == 1)
            {
              v191 = *(_QWORD *)(v2 - 512);
              sub_1BE1B20E4();
              v192 = *(int *)(v115 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v191 + v192) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v190, &qword_1ED6F3770);
            }
            else
            {
              v191 = *(_QWORD *)(v2 - 512);
              sub_1BDDA2E8C(v190, v191, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v137, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            v193 = *(_QWORD *)(v2 - 808);
            swift_retain();
            v194 = sub_1BDDB4FC0(v191, v193);
            swift_release();
            v195 = *(_QWORD *)(v2 - 344);
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 616) + 8) + 8) + 8))(v194);
            if (!v195)
              goto LABEL_99;
            goto LABEL_97;
          case 2:
            v138 = *(_QWORD *)(*(_QWORD *)(v2 - 784) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v139 = v138;
            v140 = *(_QWORD *)(v2 - 552);
            sub_1BDD86DEC(v139, v140, &qword_1ED6F3770);
            if (v105(v140, 1, v115) == 1)
              goto LABEL_114;
            v141 = *(_QWORD *)(v2 - 728);
            sub_1BDDA2E8C(v140, v141, type metadata accessor for Proto_Value);
            v142 = *(_QWORD *)(v141 + *(int *)(v115 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v143 = v142;
            v144 = *(_QWORD *)(v2 - 680);
            sub_1BDD86DEC(v143, v144, &qword_1ED6F26F0);
            if (v111(v144, 1, *(_QWORD *)(v2 - 800)) == 1)
            {
              sub_1BDD86E30(v144, &qword_1ED6F26F0);
              v128 = *(_QWORD *)(v2 - 408);
              v145 = *(_QWORD *)(v2 - 456);
            }
            else
            {
              v174 = swift_getEnumCaseMultiPayload();
              v128 = *(_QWORD *)(v2 - 408);
              v145 = *(_QWORD *)(v2 - 456);
              if (v174 == 11)
              {
                sub_1BDDA2E8C(v144, *(_QWORD *)(v2 - 456), type metadata accessor for Proto_TaggedValue);
                goto LABEL_69;
              }
              sub_1BDD9C3E0(v144, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v196 = *(int *)(v113 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v145 + v196) = qword_1EF52B518;
            swift_retain();
LABEL_69:
            sub_1BDD9C3E0(v141, type metadata accessor for Proto_Value);
            v197 = *(_QWORD *)(v145 + *(int *)(v113 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v198 = *(_QWORD *)(v2 - 752);
            sub_1BDD86DEC(v197, v198, &qword_1ED6F3770);
            if (v105(v198, 1, v115) == 1)
            {
              v199 = *(_QWORD *)(v2 - 504);
              sub_1BE1B20E4();
              v200 = *(int *)(v115 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v199 + v200) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v198, &qword_1ED6F3770);
            }
            else
            {
              v199 = *(_QWORD *)(v2 - 504);
              sub_1BDDA2E8C(v198, v199, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v145, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            v201 = *(_QWORD *)(v2 - 808);
            swift_retain();
            v202 = sub_1BDDB4FC0(v199, v201);
            swift_release();
            v203 = *(_QWORD *)(v2 - 344);
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 648) + 8) + 8) + 8))(v202);
            if (!v203)
              goto LABEL_99;
            goto LABEL_97;
          case 3:
            v146 = *(_QWORD *)(*(_QWORD *)(v2 - 784) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v147 = v146;
            v148 = *(_QWORD *)(v2 - 544);
            sub_1BDD86DEC(v147, v148, &qword_1ED6F3770);
            if (v105(v148, 1, v115) == 1)
              goto LABEL_115;
            v149 = *(_QWORD *)(v2 - 712);
            sub_1BDDA2E8C(v148, v149, type metadata accessor for Proto_Value);
            v150 = *(_QWORD *)(v149 + *(int *)(v115 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v151 = v150;
            v152 = *(_QWORD *)(v2 - 672);
            sub_1BDD86DEC(v151, v152, &qword_1ED6F26F0);
            if (v111(v152, 1, *(_QWORD *)(v2 - 800)) == 1)
            {
              sub_1BDD86E30(v152, &qword_1ED6F26F0);
              v128 = *(_QWORD *)(v2 - 400);
              v153 = *(_QWORD *)(v2 - 448);
            }
            else
            {
              v175 = swift_getEnumCaseMultiPayload();
              v128 = *(_QWORD *)(v2 - 400);
              v153 = *(_QWORD *)(v2 - 448);
              if (v175 == 11)
              {
                sub_1BDDA2E8C(v152, *(_QWORD *)(v2 - 448), type metadata accessor for Proto_TaggedValue);
                goto LABEL_80;
              }
              sub_1BDD9C3E0(v152, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v204 = *(int *)(v113 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v153 + v204) = qword_1EF52B518;
            swift_retain();
LABEL_80:
            sub_1BDD9C3E0(v149, type metadata accessor for Proto_Value);
            v205 = *(_QWORD *)(v153 + *(int *)(v113 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v206 = *(_QWORD *)(v2 - 736);
            sub_1BDD86DEC(v205, v206, &qword_1ED6F3770);
            if (v105(v206, 1, v115) == 1)
            {
              v207 = *(_QWORD *)(v2 - 496);
              sub_1BE1B20E4();
              v208 = *(int *)(v115 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v207 + v208) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v206, &qword_1ED6F3770);
            }
            else
            {
              v207 = *(_QWORD *)(v2 - 496);
              sub_1BDDA2E8C(v206, v207, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v153, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            v209 = *(_QWORD *)(v2 - 808);
            swift_retain();
            v210 = sub_1BDDB4FC0(v207, v209);
            swift_release();
            v211 = *(_QWORD *)(v2 - 344);
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 640) + 8) + 8) + 8))(v210);
            if (!v211)
              goto LABEL_99;
            goto LABEL_97;
          case 4:
            v154 = *(_QWORD *)(*(_QWORD *)(v2 - 784) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v155 = v154;
            v156 = *(_QWORD *)(v2 - 536);
            sub_1BDD86DEC(v155, v156, &qword_1ED6F3770);
            if (v105(v156, 1, v115) == 1)
              goto LABEL_116;
            v157 = *(_QWORD *)(v2 - 704);
            sub_1BDDA2E8C(v156, v157, type metadata accessor for Proto_Value);
            v158 = *(_QWORD *)(v157 + *(int *)(v115 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v159 = v158;
            v160 = *(_QWORD *)(v2 - 664);
            sub_1BDD86DEC(v159, v160, &qword_1ED6F26F0);
            if (v111(v160, 1, *(_QWORD *)(v2 - 800)) == 1)
            {
              sub_1BDD86E30(v160, &qword_1ED6F26F0);
              v128 = *(_QWORD *)(v2 - 392);
              v161 = *(_QWORD *)(v2 - 440);
            }
            else
            {
              v176 = swift_getEnumCaseMultiPayload();
              v128 = *(_QWORD *)(v2 - 392);
              v161 = *(_QWORD *)(v2 - 440);
              if (v176 == 11)
              {
                sub_1BDDA2E8C(v160, *(_QWORD *)(v2 - 440), type metadata accessor for Proto_TaggedValue);
                goto LABEL_91;
              }
              sub_1BDD9C3E0(v160, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v212 = *(int *)(v113 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v161 + v212) = qword_1EF52B518;
            swift_retain();
LABEL_91:
            sub_1BDD9C3E0(v157, type metadata accessor for Proto_Value);
            v213 = *(_QWORD *)(v161 + *(int *)(v113 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v214 = *(_QWORD *)(v2 - 720);
            sub_1BDD86DEC(v213, v214, &qword_1ED6F3770);
            if (v105(v214, 1, v115) == 1)
            {
              v215 = *(_QWORD *)(v2 - 488);
              sub_1BE1B20E4();
              v216 = *(int *)(v115 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v215 + v216) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v214, &qword_1ED6F3770);
            }
            else
            {
              v215 = *(_QWORD *)(v2 - 488);
              sub_1BDDA2E8C(v214, v215, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v161, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            v217 = *(_QWORD *)(v2 - 808);
            swift_retain();
            v218 = sub_1BDDB4FC0(v215, v217);
            swift_release();
            v219 = *(_QWORD *)(v2 - 344);
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 632) + 8) + 8) + 8))(v218);
            if (v219)
              goto LABEL_97;
LABEL_99:
            swift_release();
            swift_release();
            v221 = *(_QWORD *)(v2 - 360);
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 368) + 32))(*(_QWORD *)(v2 - 352), v128, v221);
          default:
            v162 = *(_QWORD *)(*(_QWORD *)(v2 - 784) + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v163 = v162;
            v164 = *(_QWORD *)(v2 - 528);
            sub_1BDD86DEC(v163, v164, &qword_1ED6F3770);
            if (v105(v164, 1, v115) == 1)
              goto LABEL_117;
            v165 = v164;
            v166 = *(_QWORD *)(v2 - 376);
            sub_1BDDA2E8C(v165, v166, type metadata accessor for Proto_Value);
            v167 = *(_QWORD *)(v166 + *(int *)(v115 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v168 = v167;
            v169 = *(_QWORD *)(v2 - 656);
            sub_1BDD86DEC(v168, v169, &qword_1ED6F26F0);
            if (v111(v169, 1, *(_QWORD *)(v2 - 800)) == 1)
            {
              sub_1BDD86E30(v169, &qword_1ED6F26F0);
              v170 = *(_QWORD *)(v2 - 344);
              v171 = *(_QWORD *)(v2 - 432);
            }
            else
            {
              v177 = swift_getEnumCaseMultiPayload();
              v170 = *(_QWORD *)(v2 - 344);
              v171 = *(_QWORD *)(v2 - 432);
              if (v177 == 11)
              {
                sub_1BDDA2E8C(v169, *(_QWORD *)(v2 - 432), type metadata accessor for Proto_TaggedValue);
                v178 = v106;
                v179 = *(_QWORD *)(v2 - 384);
                goto LABEL_104;
              }
              sub_1BDD9C3E0(v169, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            v178 = v106;
            sub_1BE1B20E4();
            v222 = *(int *)(v113 + 20);
            v179 = *(_QWORD *)(v2 - 384);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v171 + v222) = qword_1EF52B518;
            swift_retain();
LABEL_104:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 376), type metadata accessor for Proto_Value);
            v223 = *(_QWORD *)(v171 + *(int *)(v113 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v223, v179, &qword_1ED6F3770);
            if (v105(v179, 1, v115) == 1)
            {
              v224 = *(_QWORD *)(v2 - 480);
              sub_1BE1B20E4();
              v225 = *(int *)(v115 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v224 + v225) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(*(_QWORD *)(v2 - 384), &qword_1ED6F3770);
            }
            else
            {
              v226 = v179;
              v224 = *(_QWORD *)(v2 - 480);
              sub_1BDDA2E8C(v226, v224, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v171, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v227 = sub_1BDDB4FC0(v224, v178);
            swift_release();
            AnyCRValue.init(from:)(v227, (uint64_t *)(v2 - 72));
            if (v170)
            {
LABEL_97:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            swift_release();
            swift_release();
            v228 = *(_QWORD *)(v2 - 72);
            v229 = *(_QWORD **)(v2 - 792);
            *v229 = v120;
            v229[1] = v228;
            v230 = *(_QWORD *)(v2 - 360);
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 368) + 32))(*(_QWORD *)(v2 - 352), v229, v230);
        }
      }
      swift_retain();
      sub_1BDD9C3E0(v109, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v116 = v114;
    v117 = *(int *)(v113 + 20);
    v115 = v107;
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v116 + v117) = qword_1EF52B518;
    v114 = v116;
    goto LABEL_12;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v103 = 0xD000000000000017;
  *(_QWORD *)(v103 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v103 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

void TaggedValue_5.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[44];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v91 = a1;
  v105 = a2[6];
  v86 = *(_QWORD *)(v105 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v89 = (char *)v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = *(_QWORD *)(v5 + 40);
  v85 = *(_QWORD *)(v94 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v88 = (char *)v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = *(_QWORD *)(v8 + 32);
  v84 = *(_QWORD *)(v93 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v87 = (char *)v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = *(_QWORD *)(v11 + 24);
  v82[39] = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v9);
  v82[43] = (char *)v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v14 = MEMORY[0x1E0C80A78](v13);
  v82[42] = (char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v82[41] = (char *)v82 - v16;
  v83 = type metadata accessor for Proto_Value(0);
  v82[40] = *(_QWORD *)(v83 - 8);
  v17 = MEMORY[0x1E0C80A78](v83);
  v82[32] = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v82[35] = (char *)v82 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v82[34] = (char *)v82 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v82[33] = (char *)v82 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v82[31] = (char *)v82 - v26;
  MEMORY[0x1E0C80A78](v25);
  v82[30] = (char *)v82 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v29 = MEMORY[0x1E0C80A78](v28);
  v82[13] = (char *)v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v82[29] = (char *)v82 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v82[15] = (char *)v82 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v82[28] = (char *)v82 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v82[12] = (char *)v82 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v82[27] = (char *)v82 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v82[11] = (char *)v82 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v82[26] = (char *)v82 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v82[10] = (char *)v82 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v82[25] = (char *)v82 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v82[9] = (char *)v82 - v50;
  MEMORY[0x1E0C80A78](v49);
  v82[24] = (char *)v82 - v51;
  v90 = type metadata accessor for Proto_TaggedValue(0);
  v52 = MEMORY[0x1E0C80A78](v90);
  v82[16] = (char *)v82 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = MEMORY[0x1E0C80A78](v52);
  v82[38] = (char *)v82 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v82[20] = (char *)v82 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v82[37] = (char *)v82 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v82[19] = (char *)v82 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v82[36] = (char *)v82 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v82[18] = (char *)v82 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v82[23] = (char *)v82 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v82[17] = (char *)v82 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v82[22] = (char *)v82 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v82[14] = (char *)v82 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v82[21] = (char *)v82 - v75;
  v76 = a2[2];
  MEMORY[0x1E0C80A78](v74);
  v78 = a2[7];
  v77 = a2[8];
  v80 = a2[9];
  v79 = a2[10];
  v81 = a2[11];
  v95 = v76;
  v96 = v92;
  v97 = v93;
  v98 = v94;
  v99 = v105;
  v100 = v78;
  v101 = v77;
  v102 = v80;
  v103 = v79;
  v104 = v81;
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

void sub_1BDF61B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v4 - 752) + 32))(*(_QWORD *)(v4 - 744), a2, *(_QWORD *)(v4 - 696));
  v5 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v6 = *(_QWORD *)(v5 + *(int *)(v2 + 20))
     + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v7 = v6;
  v8 = *(_QWORD *)(v4 - 560);
  sub_1BDD86DEC(v7, v8, &qword_1ED6F26F0);
  v9 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  if (v10(v8, 1, v9) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v8, &qword_1ED6F26F0);
    v11 = *(_QWORD *)(v4 - 584);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v11 = *(_QWORD *)(v4 - 584);
    if (EnumCaseMultiPayload == 11)
    {
      sub_1BDDA2E8C(v8, *(_QWORD *)(v4 - 584), type metadata accessor for Proto_TaggedValue);
      swift_retain();
      v13 = *(_QWORD *)(v4 - 312);
      goto LABEL_9;
    }
    swift_retain();
    sub_1BDD9C3E0(v8, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v13 = *(_QWORD *)(v4 - 312);
  v14 = *(int *)(v13 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v13 = *(_QWORD *)(v4 - 312);
  }
  *(_QWORD *)(v11 + v14) = qword_1EF52B518;
  swift_retain();
LABEL_9:
  v15 = *(int *)(v13 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v16 = swift_retain();
    *(_QWORD *)(v11 + v15) = sub_1BE138794(v16);
    swift_release();
  }
  v17 = *(_QWORD *)(v11 + v15);
  swift_beginAccess();
  *(_QWORD *)(v17 + 16) = 0;
  sub_1BE12A434(v11);
  v18 = swift_endAccess();
  MEMORY[0x1E0C80A78](v18);
  v19 = *(_QWORD *)(v4 - 696);
  v20 = *(_QWORD *)(v4 - 744);
  v21 = *(_QWORD *)(v4 - 304);
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF7E228, *(_QWORD *)(v4 - 512));
  if (v21)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 752) + 8))(v20, v19);
    goto LABEL_24;
  }
  swift_beginAccess();
  v22 = *(_QWORD *)(v5 + *(int *)(v2 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v23 = v22;
  v24 = *(_QWORD *)(v4 - 680);
  sub_1BDD86DEC(v23, v24, &qword_1ED6F26F0);
  if (v10(v24, 1, v9) == 1)
  {
    sub_1BDD86E30(v24, &qword_1ED6F26F0);
    v25 = *(_QWORD *)(v4 - 416);
    v26 = *(_QWORD *)(v4 - 512);
    v27 = *(_QWORD *)(v4 - 640);
  }
  else
  {
    v28 = swift_getEnumCaseMultiPayload();
    v25 = *(_QWORD *)(v4 - 416);
    v26 = *(_QWORD *)(v4 - 512);
    v27 = *(_QWORD *)(v4 - 640);
    if (v28 == 11)
    {
      sub_1BDDA2E8C(v24, *(_QWORD *)(v4 - 640), type metadata accessor for Proto_TaggedValue);
      v29 = *(_QWORD *)(v4 - 312);
LABEL_21:
      v31 = *(int *)(v29 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        v32 = swift_retain();
        *(_QWORD *)(v27 + v31) = sub_1BE138794(v32);
        swift_release();
      }
      v33 = *(_QWORD *)(v27 + v31);
      v34 = *(_QWORD *)(v4 - 424);
      sub_1BDDA2E8C(v26, v34, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 432) + 56))(v34, 0, 1, v2);
      sub_1BDEFF368(v34, v25);
      v35 = v33
          + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1BDEFF3B0(v25, v35);
      swift_endAccess();
      swift_release();
      sub_1BE12A434(v27);
      swift_endAccess();
      swift_release();
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 - 752) + 8))(*(_QWORD *)(v4 - 744), *(_QWORD *)(v4 - 696));
LABEL_24:
      JUMPOUT(0x1BDF619FCLL);
    }
    sub_1BDD9C3E0(v24, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v29 = *(_QWORD *)(v4 - 312);
  v30 = *(int *)(v29 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v29 = *(_QWORD *)(v4 - 312);
  }
  *(_QWORD *)(v27 + v30) = qword_1EF52B518;
  swift_retain();
  goto LABEL_21;
}

void sub_1BDF63B54()
{
  TaggedValue_5.init(from:)();
}

void sub_1BDF63B94(uint64_t a1, _QWORD *a2)
{
  TaggedValue_5.encode(to:)(a1, a2);
}

void TaggedValue_5<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[24];
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v26[10] = a6;
  v26[11] = a7;
  v26[9] = a5;
  v26[7] = a4;
  v26[6] = a3;
  v26[13] = a1;
  v26[8] = *(_QWORD *)(*(_QWORD *)(a2 + 48) - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v26[5] = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 40);
  v26[4] = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v26[3] = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 32);
  v26[2] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v26[1] = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 + 24);
  v26[0] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = *(_QWORD *)(v20 + 16);
  MEMORY[0x1E0C80A78](v19);
  v23 = *(_QWORD *)(v22 + 88);
  v26[19] = v21;
  v26[20] = v18;
  v26[21] = v14;
  v26[22] = v10;
  v26[12] = v24;
  v26[23] = v24;
  v25 = *(_OWORD *)(v22 + 72);
  v27 = *(_OWORD *)(v22 + 56);
  v28 = v25;
  v29 = v23;
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF63D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 72), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF63DA8 + 4 * byte_1BE1BE3B2[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF63DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v0, v3, v2);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_1BDF63FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TaggedValue_5<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32), *(_QWORD *)(a3 - 40));
}

void TaggedValue_6.init(from:)()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF64098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int (*v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t inited;
  unsigned int (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int EnumCaseMultiPayload;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  _BYTE v277[96];

  *(_QWORD *)(v2 - 384) = a1;
  *(_QWORD *)(v2 - 392) = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)(v2 - 880) = &v277[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = MEMORY[0x1E0C80A78](v3);
  *(_QWORD *)(v2 - 552) = &v277[-v6];
  v7 = MEMORY[0x1E0C80A78](v5);
  *(_QWORD *)(v2 - 560) = &v277[-v8];
  v9 = MEMORY[0x1E0C80A78](v7);
  *(_QWORD *)(v2 - 568) = &v277[-v10];
  v11 = MEMORY[0x1E0C80A78](v9);
  *(_QWORD *)(v2 - 576) = &v277[-v12];
  v13 = MEMORY[0x1E0C80A78](v11);
  *(_QWORD *)(v2 - 584) = &v277[-v14];
  MEMORY[0x1E0C80A78](v13);
  *(_QWORD *)(v2 - 592) = &v277[-v15];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v17 = MEMORY[0x1E0C80A78](v16);
  *(_QWORD *)(v2 - 664) = &v277[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x1E0C80A78](v17);
  *(_QWORD *)(v2 - 672) = &v277[-v20];
  v21 = MEMORY[0x1E0C80A78](v19);
  *(_QWORD *)(v2 - 688) = &v277[-v22];
  v23 = MEMORY[0x1E0C80A78](v21);
  *(_QWORD *)(v2 - 696) = &v277[-v24];
  v25 = MEMORY[0x1E0C80A78](v23);
  *(_QWORD *)(v2 - 712) = &v277[-v26];
  v27 = MEMORY[0x1E0C80A78](v25);
  *(_QWORD *)(v2 - 720) = &v277[-v28];
  v29 = MEMORY[0x1E0C80A78](v27);
  *(_QWORD *)(v2 - 736) = &v277[-v30];
  MEMORY[0x1E0C80A78](v29);
  *(_QWORD *)(v2 - 360) = &v277[-v31];
  v32 = type metadata accessor for Proto_TaggedValue(0);
  *(_QWORD *)(v2 - 336) = v32;
  v33 = MEMORY[0x1E0C80A78](v32);
  *(_QWORD *)(v2 - 856) = &v277[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = MEMORY[0x1E0C80A78](v33);
  *(_QWORD *)(v2 - 600) = &v277[-v36];
  v37 = MEMORY[0x1E0C80A78](v35);
  *(_QWORD *)(v2 - 608) = &v277[-v38];
  v39 = MEMORY[0x1E0C80A78](v37);
  *(_QWORD *)(v2 - 616) = &v277[-v40];
  v41 = MEMORY[0x1E0C80A78](v39);
  *(_QWORD *)(v2 - 624) = &v277[-v42];
  v43 = MEMORY[0x1E0C80A78](v41);
  *(_QWORD *)(v2 - 632) = &v277[-v44];
  v45 = MEMORY[0x1E0C80A78](v43);
  *(_QWORD *)(v2 - 640) = &v277[-v46];
  MEMORY[0x1E0C80A78](v45);
  *(_QWORD *)(v2 - 352) = &v277[-v47];
  v48 = type metadata accessor for Proto_Value(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  *(_QWORD *)(v2 - 864) = &v277[-((v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = MEMORY[0x1E0C80A78](v50);
  *(_QWORD *)(v2 - 400) = &v277[-v53];
  v54 = MEMORY[0x1E0C80A78](v52);
  *(_QWORD *)(v2 - 648) = &v277[-v55];
  v56 = MEMORY[0x1E0C80A78](v54);
  *(_QWORD *)(v2 - 408) = &v277[-v57];
  v58 = MEMORY[0x1E0C80A78](v56);
  *(_QWORD *)(v2 - 656) = &v277[-v59];
  v60 = MEMORY[0x1E0C80A78](v58);
  *(_QWORD *)(v2 - 416) = &v277[-v61];
  v62 = MEMORY[0x1E0C80A78](v60);
  *(_QWORD *)(v2 - 680) = &v277[-v63];
  v64 = MEMORY[0x1E0C80A78](v62);
  *(_QWORD *)(v2 - 424) = &v277[-v65];
  v66 = MEMORY[0x1E0C80A78](v64);
  *(_QWORD *)(v2 - 704) = &v277[-v67];
  v68 = MEMORY[0x1E0C80A78](v66);
  *(_QWORD *)(v2 - 432) = &v277[-v69];
  v70 = MEMORY[0x1E0C80A78](v68);
  *(_QWORD *)(v2 - 728) = &v277[-v71];
  v72 = MEMORY[0x1E0C80A78](v70);
  *(_QWORD *)(v2 - 440) = &v277[-v73];
  v74 = MEMORY[0x1E0C80A78](v72);
  *(_QWORD *)(v2 - 744) = &v277[-v75];
  v76 = MEMORY[0x1E0C80A78](v74);
  *(_QWORD *)(v2 - 448) = &v277[-v77];
  MEMORY[0x1E0C80A78](v76);
  v79 = &v277[-v78];
  v80 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v81 = MEMORY[0x1E0C80A78](v80);
  *(_QWORD *)(v2 - 872) = &v277[-((v82 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v83 = MEMORY[0x1E0C80A78](v81);
  *(_QWORD *)(v2 - 800) = &v277[-v84];
  v85 = MEMORY[0x1E0C80A78](v83);
  *(_QWORD *)(v2 - 752) = &v277[-v86];
  v87 = MEMORY[0x1E0C80A78](v85);
  *(_QWORD *)(v2 - 808) = &v277[-v88];
  v89 = MEMORY[0x1E0C80A78](v87);
  *(_QWORD *)(v2 - 760) = &v277[-v90];
  v91 = MEMORY[0x1E0C80A78](v89);
  *(_QWORD *)(v2 - 816) = &v277[-v92];
  v93 = MEMORY[0x1E0C80A78](v91);
  *(_QWORD *)(v2 - 768) = &v277[-v94];
  v95 = MEMORY[0x1E0C80A78](v93);
  *(_QWORD *)(v2 - 824) = &v277[-v96];
  v97 = MEMORY[0x1E0C80A78](v95);
  *(_QWORD *)(v2 - 776) = &v277[-v98];
  v99 = MEMORY[0x1E0C80A78](v97);
  *(_QWORD *)(v2 - 832) = &v277[-v100];
  v101 = MEMORY[0x1E0C80A78](v99);
  *(_QWORD *)(v2 - 784) = &v277[-v102];
  v103 = MEMORY[0x1E0C80A78](v101);
  *(_QWORD *)(v2 - 840) = &v277[-v104];
  v105 = MEMORY[0x1E0C80A78](v103);
  *(_QWORD *)(v2 - 792) = &v277[-v106];
  v107 = MEMORY[0x1E0C80A78](v105);
  *(_QWORD *)(v2 - 848) = &v277[-v108];
  v109 = MEMORY[0x1E0C80A78](v107);
  v111 = &v277[-v110];
  MEMORY[0x1E0C80A78](v109);
  v113 = &v277[-v112];
  v114 = v1;
  v115 = v1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v115, (uint64_t)v113, &qword_1ED6F3770);
  v116 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  LODWORD(v49) = v116((uint64_t)v113, 1, v48);
  sub_1BDD86E30((uint64_t)v113, &qword_1ED6F3770);
  if ((_DWORD)v49 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v114;
    sub_1BDD86DEC(v115, (uint64_t)v111, &qword_1ED6F3770);
    v120 = v116;
    if (v116((uint64_t)v111, 1, v48) == 1)
    {
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      JUMPOUT(0x1BDF66340);
    }
    sub_1BDDA2E8C((uint64_t)v111, (uint64_t)v79, type metadata accessor for Proto_Value);
    *(_QWORD *)(v2 - 368) = v48;
    v121 = *(_QWORD *)&v79[*(int *)(v48 + 20)]
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v122 = *(_QWORD *)(v2 - 360);
    sub_1BDD86DEC(v121, v122, &qword_1ED6F26F0);
    v123 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v124 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 48);
    v125 = v124(v122, 1, v123);
    *(_QWORD *)(v2 - 888) = v123;
    if (v125 == 1)
    {
      v126 = v114;
      swift_retain();
      sub_1BDD86E30(v122, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        v127 = *(_QWORD *)(v2 - 352);
        sub_1BDDA2E8C(v122, v127, type metadata accessor for Proto_TaggedValue);
        v126 = v114;
        v128 = *(_QWORD *)(v2 - 336);
LABEL_12:
        swift_retain();
        sub_1BDD9C3E0((uint64_t)v79, type metadata accessor for Proto_Value);
        swift_beginAccess();
        sub_1BDD9C3E0(v127, type metadata accessor for Proto_TaggedValue);
        v130 = inited;
        switch(inited)
        {
          case 0:
            v131 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v132 = *(_QWORD *)(v2 - 848);
            sub_1BDD86DEC(v131, v132, &qword_1ED6F3770);
            v133 = *(_QWORD *)(v2 - 368);
            if (v120(v132, 1, v133) == 1)
              goto LABEL_128;
            v134 = v126;
            v135 = v132;
            v136 = *(_QWORD *)(v2 - 448);
            sub_1BDDA2E8C(v135, v136, type metadata accessor for Proto_Value);
            v137 = *(_QWORD *)(v136 + *(int *)(v133 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v138 = *(_QWORD *)(v2 - 736);
            sub_1BDD86DEC(v137, v138, &qword_1ED6F26F0);
            v139 = v124(v138, 1, *(_QWORD *)(v2 - 888));
            v140 = *(_QWORD *)(v2 - 592);
            if (v139 == 1)
            {
              sub_1BDD86E30(v138, &qword_1ED6F26F0);
              v141 = *(_QWORD *)(v2 - 344);
              v142 = *(_QWORD *)(v2 - 640);
              v143 = *(_QWORD *)(v2 - 792);
            }
            else
            {
              v221 = swift_getEnumCaseMultiPayload() == 11;
              v222 = v138;
              v141 = *(_QWORD *)(v2 - 344);
              v142 = *(_QWORD *)(v2 - 640);
              v143 = *(_QWORD *)(v2 - 792);
              if (v221)
              {
                sub_1BDDA2E8C(v222, *(_QWORD *)(v2 - 640), type metadata accessor for Proto_TaggedValue);
                goto LABEL_56;
              }
              sub_1BDD9C3E0(v222, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v229 = *(int *)(v128 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v142 + v229) = qword_1EF52B518;
            swift_retain();
LABEL_56:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 448), type metadata accessor for Proto_Value);
            v230 = *(_QWORD *)(v142 + *(int *)(v128 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v230, v143, &qword_1ED6F3770);
            v231 = *(_QWORD *)(v2 - 368);
            if (v120(v143, 1, v231) == 1)
            {
              v232 = *(_QWORD *)(v2 - 744);
              sub_1BE1B20E4();
              v233 = *(int *)(v231 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v232 + v233) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v143, &qword_1ED6F3770);
            }
            else
            {
              v232 = *(_QWORD *)(v2 - 744);
              sub_1BDDA2E8C(v143, v232, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v142, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v234 = sub_1BDDB4FC0(v232, v134);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 504) + 8) + 8) + 8))(v234);
            if (v141)
              goto LABEL_125;
            swift_release();
            swift_release();
            v235 = *(_QWORD *)(v2 - 384);
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 392) + 32))(*(_QWORD *)(v2 - 376), v140, v235);
          case 1:
            v144 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v145 = *(_QWORD *)(v2 - 840);
            sub_1BDD86DEC(v144, v145, &qword_1ED6F3770);
            v146 = *(_QWORD *)(v2 - 368);
            if (v120(v145, 1, v146) == 1)
              goto LABEL_129;
            v147 = v126;
            v148 = v145;
            v149 = *(_QWORD *)(v2 - 440);
            sub_1BDDA2E8C(v148, v149, type metadata accessor for Proto_Value);
            v150 = *(_QWORD *)(v149 + *(int *)(v146 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v151 = *(_QWORD *)(v2 - 720);
            sub_1BDD86DEC(v150, v151, &qword_1ED6F26F0);
            v152 = v124(v151, 1, *(_QWORD *)(v2 - 888));
            v153 = *(_QWORD *)(v2 - 584);
            if (v152 == 1)
            {
              sub_1BDD86E30(v151, &qword_1ED6F26F0);
              v154 = *(_QWORD *)(v2 - 344);
              v155 = *(_QWORD *)(v2 - 632);
              v156 = *(_QWORD *)(v2 - 784);
            }
            else
            {
              v221 = swift_getEnumCaseMultiPayload() == 11;
              v223 = v151;
              v154 = *(_QWORD *)(v2 - 344);
              v155 = *(_QWORD *)(v2 - 632);
              v156 = *(_QWORD *)(v2 - 784);
              if (v221)
              {
                sub_1BDDA2E8C(v223, *(_QWORD *)(v2 - 632), type metadata accessor for Proto_TaggedValue);
                goto LABEL_66;
              }
              sub_1BDD9C3E0(v223, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v236 = *(int *)(v128 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v155 + v236) = qword_1EF52B518;
            swift_retain();
LABEL_66:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 440), type metadata accessor for Proto_Value);
            v237 = *(_QWORD *)(v155 + *(int *)(v128 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v237, v156, &qword_1ED6F3770);
            v238 = *(_QWORD *)(v2 - 368);
            if (v120(v156, 1, v238) == 1)
            {
              v239 = *(_QWORD *)(v2 - 728);
              sub_1BE1B20E4();
              v240 = *(int *)(v238 + 20);
              v241 = v153;
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v239 + v240) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v156, &qword_1ED6F3770);
            }
            else
            {
              v239 = *(_QWORD *)(v2 - 728);
              sub_1BDDA2E8C(v156, v239, type metadata accessor for Proto_Value);
              v241 = v153;
            }
            sub_1BDD9C3E0(v155, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v242 = sub_1BDDB4FC0(v239, v147);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 544) + 8) + 8) + 8))(v242);
            if (v154)
              goto LABEL_125;
            goto LABEL_114;
          case 2:
            v157 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v158 = *(_QWORD *)(v2 - 832);
            sub_1BDD86DEC(v157, v158, &qword_1ED6F3770);
            v159 = *(_QWORD *)(v2 - 368);
            if (v120(v158, 1, v159) == 1)
              goto LABEL_130;
            v160 = v126;
            v161 = v158;
            v162 = *(_QWORD *)(v2 - 432);
            sub_1BDDA2E8C(v161, v162, type metadata accessor for Proto_Value);
            v163 = *(_QWORD *)(v162 + *(int *)(v159 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v164 = *(_QWORD *)(v2 - 712);
            sub_1BDD86DEC(v163, v164, &qword_1ED6F26F0);
            v165 = v124(v164, 1, *(_QWORD *)(v2 - 888));
            v166 = *(_QWORD *)(v2 - 576);
            if (v165 == 1)
            {
              sub_1BDD86E30(v164, &qword_1ED6F26F0);
              v167 = *(_QWORD *)(v2 - 344);
              v168 = *(_QWORD *)(v2 - 624);
              v169 = *(_QWORD *)(v2 - 776);
            }
            else
            {
              v221 = swift_getEnumCaseMultiPayload() == 11;
              v224 = v164;
              v167 = *(_QWORD *)(v2 - 344);
              v168 = *(_QWORD *)(v2 - 624);
              v169 = *(_QWORD *)(v2 - 776);
              if (v221)
              {
                sub_1BDDA2E8C(v224, *(_QWORD *)(v2 - 624), type metadata accessor for Proto_TaggedValue);
                goto LABEL_76;
              }
              sub_1BDD9C3E0(v224, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v243 = *(int *)(v128 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v168 + v243) = qword_1EF52B518;
            swift_retain();
LABEL_76:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 432), type metadata accessor for Proto_Value);
            v244 = *(_QWORD *)(v168 + *(int *)(v128 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v244, v169, &qword_1ED6F3770);
            v245 = *(_QWORD *)(v2 - 368);
            if (v120(v169, 1, v245) == 1)
            {
              v246 = *(_QWORD *)(v2 - 704);
              sub_1BE1B20E4();
              v247 = *(int *)(v245 + 20);
              v241 = v166;
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v246 + v247) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v169, &qword_1ED6F3770);
            }
            else
            {
              v246 = *(_QWORD *)(v2 - 704);
              sub_1BDDA2E8C(v169, v246, type metadata accessor for Proto_Value);
              v241 = v166;
            }
            sub_1BDD9C3E0(v168, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v248 = sub_1BDDB4FC0(v246, v160);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 536) + 8) + 8) + 8))(v248);
            if (!v167)
              goto LABEL_114;
            goto LABEL_125;
          case 3:
            v170 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v171 = *(_QWORD *)(v2 - 824);
            sub_1BDD86DEC(v170, v171, &qword_1ED6F3770);
            v172 = *(_QWORD *)(v2 - 368);
            if (v120(v171, 1, v172) == 1)
              goto LABEL_131;
            v173 = v126;
            v174 = v171;
            v175 = *(_QWORD *)(v2 - 424);
            sub_1BDDA2E8C(v174, v175, type metadata accessor for Proto_Value);
            v176 = *(_QWORD *)(v175 + *(int *)(v172 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v177 = *(_QWORD *)(v2 - 696);
            sub_1BDD86DEC(v176, v177, &qword_1ED6F26F0);
            v178 = v124(v177, 1, *(_QWORD *)(v2 - 888));
            v179 = *(_QWORD *)(v2 - 568);
            if (v178 == 1)
            {
              sub_1BDD86E30(v177, &qword_1ED6F26F0);
              v180 = *(_QWORD *)(v2 - 344);
              v181 = *(_QWORD *)(v2 - 616);
              v182 = *(_QWORD *)(v2 - 768);
            }
            else
            {
              v221 = swift_getEnumCaseMultiPayload() == 11;
              v225 = v177;
              v180 = *(_QWORD *)(v2 - 344);
              v181 = *(_QWORD *)(v2 - 616);
              v182 = *(_QWORD *)(v2 - 768);
              if (v221)
              {
                sub_1BDDA2E8C(v225, *(_QWORD *)(v2 - 616), type metadata accessor for Proto_TaggedValue);
                goto LABEL_86;
              }
              sub_1BDD9C3E0(v225, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v249 = *(int *)(v128 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v181 + v249) = qword_1EF52B518;
            swift_retain();
LABEL_86:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 424), type metadata accessor for Proto_Value);
            v250 = *(_QWORD *)(v181 + *(int *)(v128 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v250, v182, &qword_1ED6F3770);
            v251 = *(_QWORD *)(v2 - 368);
            if (v120(v182, 1, v251) == 1)
            {
              v252 = *(_QWORD *)(v2 - 680);
              sub_1BE1B20E4();
              v253 = *(int *)(v251 + 20);
              v241 = v179;
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v252 + v253) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v182, &qword_1ED6F3770);
            }
            else
            {
              v252 = *(_QWORD *)(v2 - 680);
              sub_1BDDA2E8C(v182, v252, type metadata accessor for Proto_Value);
              v241 = v179;
            }
            sub_1BDD9C3E0(v181, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v254 = sub_1BDDB4FC0(v252, v173);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 528) + 8) + 8) + 8))(v254);
            if (!v180)
              goto LABEL_114;
            goto LABEL_125;
          case 4:
            v183 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v184 = *(_QWORD *)(v2 - 816);
            sub_1BDD86DEC(v183, v184, &qword_1ED6F3770);
            v185 = *(_QWORD *)(v2 - 368);
            if (v120(v184, 1, v185) == 1)
              goto LABEL_132;
            v186 = v126;
            v187 = v184;
            v188 = *(_QWORD *)(v2 - 416);
            sub_1BDDA2E8C(v187, v188, type metadata accessor for Proto_Value);
            v189 = *(_QWORD *)(v188 + *(int *)(v185 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v190 = *(_QWORD *)(v2 - 688);
            sub_1BDD86DEC(v189, v190, &qword_1ED6F26F0);
            v191 = v124(v190, 1, *(_QWORD *)(v2 - 888));
            v192 = *(_QWORD *)(v2 - 560);
            if (v191 == 1)
            {
              sub_1BDD86E30(v190, &qword_1ED6F26F0);
              v193 = *(_QWORD *)(v2 - 344);
              v194 = *(_QWORD *)(v2 - 608);
              v195 = *(_QWORD *)(v2 - 760);
            }
            else
            {
              v221 = swift_getEnumCaseMultiPayload() == 11;
              v226 = v190;
              v193 = *(_QWORD *)(v2 - 344);
              v194 = *(_QWORD *)(v2 - 608);
              v195 = *(_QWORD *)(v2 - 760);
              if (v221)
              {
                sub_1BDDA2E8C(v226, *(_QWORD *)(v2 - 608), type metadata accessor for Proto_TaggedValue);
                goto LABEL_96;
              }
              sub_1BDD9C3E0(v226, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v255 = *(int *)(v128 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v194 + v255) = qword_1EF52B518;
            swift_retain();
LABEL_96:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 416), type metadata accessor for Proto_Value);
            v256 = *(_QWORD *)(v194 + *(int *)(v128 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v256, v195, &qword_1ED6F3770);
            v257 = *(_QWORD *)(v2 - 368);
            if (v120(v195, 1, v257) == 1)
            {
              v258 = *(_QWORD *)(v2 - 656);
              sub_1BE1B20E4();
              v259 = *(int *)(v257 + 20);
              v241 = v192;
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v258 + v259) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v195, &qword_1ED6F3770);
            }
            else
            {
              v258 = *(_QWORD *)(v2 - 656);
              sub_1BDDA2E8C(v195, v258, type metadata accessor for Proto_Value);
              v241 = v192;
            }
            sub_1BDD9C3E0(v194, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v260 = sub_1BDDB4FC0(v258, v186);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 520) + 8) + 8) + 8))(v260);
            if (!v193)
              goto LABEL_114;
            goto LABEL_125;
          case 5:
            v196 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v197 = *(_QWORD *)(v2 - 808);
            sub_1BDD86DEC(v196, v197, &qword_1ED6F3770);
            v198 = *(_QWORD *)(v2 - 368);
            if (v120(v197, 1, v198) == 1)
              goto LABEL_133;
            v199 = v126;
            v200 = v197;
            v201 = *(_QWORD *)(v2 - 408);
            sub_1BDDA2E8C(v200, v201, type metadata accessor for Proto_Value);
            v202 = *(_QWORD *)(v201 + *(int *)(v198 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v203 = v202;
            v204 = *(_QWORD *)(v2 - 672);
            sub_1BDD86DEC(v203, v204, &qword_1ED6F26F0);
            v205 = v124(v204, 1, *(_QWORD *)(v2 - 888));
            v206 = *(_QWORD *)(v2 - 552);
            if (v205 == 1)
            {
              sub_1BDD86E30(v204, &qword_1ED6F26F0);
              v207 = *(_QWORD *)(v2 - 344);
              v208 = *(_QWORD *)(v2 - 600);
              v209 = *(_QWORD *)(v2 - 752);
            }
            else
            {
              EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              v207 = *(_QWORD *)(v2 - 344);
              v208 = *(_QWORD *)(v2 - 600);
              v209 = *(_QWORD *)(v2 - 752);
              if (EnumCaseMultiPayload == 11)
              {
                sub_1BDDA2E8C(v204, *(_QWORD *)(v2 - 600), type metadata accessor for Proto_TaggedValue);
                goto LABEL_107;
              }
              sub_1BDD9C3E0(v204, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v261 = *(int *)(v128 + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v208 + v261) = qword_1EF52B518;
            swift_retain();
LABEL_107:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 408), type metadata accessor for Proto_Value);
            v262 = *(_QWORD *)(v208 + *(int *)(v128 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v262, v209, &qword_1ED6F3770);
            v263 = *(_QWORD *)(v2 - 368);
            if (v120(v209, 1, v263) == 1)
            {
              v264 = *(_QWORD *)(v2 - 648);
              sub_1BE1B20E4();
              v265 = *(int *)(v263 + 20);
              v241 = v206;
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v264 + v265) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v209, &qword_1ED6F3770);
            }
            else
            {
              v264 = *(_QWORD *)(v2 - 648);
              sub_1BDDA2E8C(v209, v264, type metadata accessor for Proto_Value);
              v241 = v206;
            }
            sub_1BDD9C3E0(v208, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v266 = sub_1BDDB4FC0(v264, v199);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 - 512) + 8) + 8) + 8))(v266);
            if (v207)
              goto LABEL_125;
LABEL_114:
            swift_release();
            swift_release();
            v267 = *(_QWORD *)(v2 - 384);
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 392) + 32))(*(_QWORD *)(v2 - 376), v241, v267);
          default:
            v210 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v211 = *(_QWORD *)(v2 - 800);
            sub_1BDD86DEC(v210, v211, &qword_1ED6F3770);
            v212 = *(_QWORD *)(v2 - 368);
            if (v120(v211, 1, v212) == 1)
              goto LABEL_134;
            v213 = v211;
            v214 = *(_QWORD *)(v2 - 400);
            sub_1BDDA2E8C(v213, v214, type metadata accessor for Proto_Value);
            v215 = *(_QWORD *)(v214 + *(int *)(v212 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v216 = v215;
            v217 = *(_QWORD *)(v2 - 664);
            sub_1BDD86DEC(v216, v217, &qword_1ED6F26F0);
            if (v124(v217, 1, *(_QWORD *)(v2 - 888)) == 1)
            {
              sub_1BDD86E30(v217, &qword_1ED6F26F0);
              v218 = *(_QWORD *)(v2 - 344);
              v219 = *(_QWORD *)(v2 - 856);
              v220 = *(_QWORD *)(v2 - 872);
            }
            else
            {
              v228 = swift_getEnumCaseMultiPayload();
              v218 = *(_QWORD *)(v2 - 344);
              v219 = *(_QWORD *)(v2 - 856);
              v220 = *(_QWORD *)(v2 - 872);
              if (v228 == 11)
              {
                sub_1BDDA2E8C(v217, *(_QWORD *)(v2 - 856), type metadata accessor for Proto_TaggedValue);
                goto LABEL_119;
              }
              sub_1BDD9C3E0(v217, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v268 = *(int *)(*(_QWORD *)(v2 - 336) + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v219 + v268) = qword_1EF52B518;
            swift_retain();
LABEL_119:
            sub_1BDD9C3E0(*(_QWORD *)(v2 - 400), type metadata accessor for Proto_Value);
            v269 = *(_QWORD *)(v219 + *(int *)(*(_QWORD *)(v2 - 336) + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v269, v220, &qword_1ED6F3770);
            v270 = *(_QWORD *)(v2 - 368);
            if (v120(v220, 1, v270) == 1)
            {
              v271 = *(_QWORD *)(v2 - 864);
              sub_1BE1B20E4();
              v272 = *(int *)(v270 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v271 + v272) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v220, &qword_1ED6F3770);
            }
            else
            {
              v271 = *(_QWORD *)(v2 - 864);
              sub_1BDDA2E8C(v220, v271, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v219, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v273 = sub_1BDDB4FC0(v271, v126);
            swift_release();
            AnyCRValue.init(from:)(v273, (uint64_t *)(v2 - 72));
            if (v218)
            {
LABEL_125:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            else
            {
              swift_release();
              swift_release();
              v274 = *(_QWORD *)(v2 - 72);
              v275 = *(uint64_t **)(v2 - 880);
              *v275 = v130;
              v275[1] = v274;
              v276 = *(_QWORD *)(v2 - 384);
              swift_storeEnumTagMultiPayload();
              return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)(v2 - 392) + 32))(*(_QWORD *)(v2 - 376), v275, v276);
            }
        }
      }
      v126 = v114;
      swift_retain();
      sub_1BDD9C3E0(v122, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v127 = *(_QWORD *)(v2 - 352);
    sub_1BE1B20E4();
    v128 = *(_QWORD *)(v2 - 336);
    v129 = *(int *)(v128 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v127 + v129) = qword_1EF52B518;
    goto LABEL_12;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v117 = 0xD000000000000017;
  *(_QWORD *)(v117 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v117 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

void TaggedValue_6.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[61];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v99 = a1;
  v116 = a2[7];
  v96[55] = *(_QWORD *)(v116 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v96[60] = (char *)v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = *(_QWORD *)(v5 + 48);
  v96[54] = *(_QWORD *)(v103 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v96[59] = (char *)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = *(_QWORD *)(v8 + 40);
  v96[53] = *(_QWORD *)(v101 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v96[58] = (char *)v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = *(_QWORD *)(v11 + 32);
  v96[42] = *(_QWORD *)(v102 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v96[57] = (char *)v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = *(_QWORD *)(v14 + 24);
  v96[52] = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v12);
  v96[56] = (char *)v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v17 = MEMORY[0x1E0C80A78](v16);
  v96[43] = (char *)v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v96[45] = (char *)v96 - v19;
  v98 = type metadata accessor for Proto_Value(0);
  v96[44] = *(_QWORD *)(v98 - 8);
  v20 = MEMORY[0x1E0C80A78](v98);
  v96[24] = (char *)v96 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v96[36] = (char *)v96 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v96[35] = (char *)v96 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v96[34] = (char *)v96 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v96[31] = (char *)v96 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v96[33] = (char *)v96 - v31;
  MEMORY[0x1E0C80A78](v30);
  v96[32] = (char *)v96 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v34 = MEMORY[0x1E0C80A78](v33);
  v96[13] = (char *)v96 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v96[30] = (char *)v96 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v96[14] = (char *)v96 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v96[49] = (char *)v96 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v96[12] = (char *)v96 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v96[29] = (char *)v96 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v96[11] = (char *)v96 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v96[28] = (char *)v96 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v96[10] = (char *)v96 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v96[27] = (char *)v96 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v96[9] = (char *)v96 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v96[26] = (char *)v96 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v96[8] = (char *)v96 - v59;
  MEMORY[0x1E0C80A78](v58);
  v96[25] = (char *)v96 - v60;
  v97 = type metadata accessor for Proto_TaggedValue(0);
  v61 = MEMORY[0x1E0C80A78](v97);
  v96[21] = (char *)v96 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = MEMORY[0x1E0C80A78](v61);
  v96[39] = (char *)v96 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v96[16] = (char *)v96 - v66;
  v67 = MEMORY[0x1E0C80A78](v65);
  v96[41] = (char *)v96 - v68;
  v69 = MEMORY[0x1E0C80A78](v67);
  v96[20] = (char *)v96 - v70;
  v71 = MEMORY[0x1E0C80A78](v69);
  v96[38] = (char *)v96 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  v96[19] = (char *)v96 - v74;
  v75 = MEMORY[0x1E0C80A78](v73);
  v96[37] = (char *)v96 - v76;
  v77 = MEMORY[0x1E0C80A78](v75);
  v96[18] = (char *)v96 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v96[23] = (char *)v96 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v96[15] = (char *)v96 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v96[40] = (char *)v96 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v96[17] = (char *)v96 - v86;
  v87 = MEMORY[0x1E0C80A78](v85);
  v96[22] = (char *)v96 - v88;
  v89 = a2[2];
  v96[51] = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v87);
  v91 = a2[8];
  v90 = a2[9];
  v92 = a2[10];
  v93 = a2[11];
  v95 = a2[12];
  v94 = a2[13];
  v104 = v89;
  v105 = v100;
  v106 = v102;
  v107 = v101;
  v108 = v103;
  v109 = v116;
  v110 = v91;
  v111 = v90;
  v112 = v92;
  v113 = v93;
  v114 = v95;
  v115 = v94;
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

void sub_1BDF69338()
{
  TaggedValue_6.init(from:)();
}

void sub_1BDF6937C(uint64_t a1, _QWORD *a2)
{
  TaggedValue_6.encode(to:)(a1, a2);
}

void TaggedValue_6<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  _QWORD v30[29];
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v30[14] = a7;
  v30[15] = a8;
  v30[13] = a6;
  v30[12] = a5;
  v30[10] = a4;
  v30[9] = a3;
  v30[17] = a1;
  v30[11] = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v30[8] = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[6] = *(_QWORD *)(*(_QWORD *)(v10 + 48) - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v30[5] = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 40);
  v30[4] = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v30[3] = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 + 32);
  v30[2] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v30[1] = (char *)v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 + 24);
  v30[0] = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v19);
  v25 = *(_QWORD *)(v24 + 16);
  MEMORY[0x1E0C80A78](v23);
  v30[23] = v25;
  v30[24] = v22;
  v30[25] = v18;
  v30[26] = v14;
  v30[7] = v26;
  v30[27] = v26;
  v30[28] = v27;
  v30[16] = v27;
  v29 = v28[5];
  v31 = v28[4];
  v32 = v29;
  v33 = v28[6];
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF69580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 72), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF695E8 + 4 * byte_1BE1BE3C6[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF695E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, v1, v3);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v3);
}

void sub_1BDF69828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TaggedValue_6<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32), *(_QWORD *)(a3 - 40), *(_QWORD *)(a3 - 48));
}

void TaggedValue_7.init(from:)()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF698D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t inited;
  unsigned int (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, uint64_t, uint64_t);
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int EnumCaseMultiPayload;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE v298[96];

  v1[71] = a1;
  v1[70] = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  *v1 = &v298[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x1E0C80A78](v4);
  v1[2] = &v298[-v7];
  v8 = MEMORY[0x1E0C80A78](v6);
  v1[53] = &v298[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  v1[52] = &v298[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  v1[51] = &v298[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  v1[50] = &v298[-v15];
  v16 = MEMORY[0x1E0C80A78](v14);
  v1[49] = &v298[-v17];
  MEMORY[0x1E0C80A78](v16);
  v1[48] = &v298[-v18];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v1[13] = &v298[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = MEMORY[0x1E0C80A78](v20);
  v1[12] = &v298[-v23];
  v24 = MEMORY[0x1E0C80A78](v22);
  v1[11] = &v298[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v1[10] = &v298[-v27];
  v28 = MEMORY[0x1E0C80A78](v26);
  v1[9] = &v298[-v29];
  v30 = MEMORY[0x1E0C80A78](v28);
  v1[8] = &v298[-v31];
  v32 = MEMORY[0x1E0C80A78](v30);
  v1[7] = &v298[-v33];
  v34 = MEMORY[0x1E0C80A78](v32);
  v1[6] = &v298[-v35];
  MEMORY[0x1E0C80A78](v34);
  v1[74] = &v298[-v36];
  v37 = type metadata accessor for Proto_TaggedValue(0);
  v1[78] = v37;
  v38 = MEMORY[0x1E0C80A78](v37);
  v1[47] = &v298[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = MEMORY[0x1E0C80A78](v38);
  v1[61] = &v298[-v41];
  v42 = MEMORY[0x1E0C80A78](v40);
  v1[46] = &v298[-v43];
  v44 = MEMORY[0x1E0C80A78](v42);
  v1[45] = &v298[-v45];
  v46 = MEMORY[0x1E0C80A78](v44);
  v1[44] = &v298[-v47];
  v48 = MEMORY[0x1E0C80A78](v46);
  v1[43] = &v298[-v49];
  v50 = MEMORY[0x1E0C80A78](v48);
  v1[42] = &v298[-v51];
  v52 = MEMORY[0x1E0C80A78](v50);
  v1[41] = &v298[-v53];
  MEMORY[0x1E0C80A78](v52);
  v1[75] = &v298[-v54];
  v55 = type metadata accessor for Proto_Value(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = MEMORY[0x1E0C80A78](v55);
  v1[40] = &v298[-((v58 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = MEMORY[0x1E0C80A78](v57);
  v1[69] = &v298[-v60];
  v61 = MEMORY[0x1E0C80A78](v59);
  v1[1] = &v298[-v62];
  v63 = MEMORY[0x1E0C80A78](v61);
  v1[68] = &v298[-v64];
  v65 = MEMORY[0x1E0C80A78](v63);
  v1[39] = &v298[-v66];
  v67 = MEMORY[0x1E0C80A78](v65);
  v1[67] = &v298[-v68];
  v69 = MEMORY[0x1E0C80A78](v67);
  v1[38] = &v298[-v70];
  v71 = MEMORY[0x1E0C80A78](v69);
  v1[66] = &v298[-v72];
  v73 = MEMORY[0x1E0C80A78](v71);
  v1[37] = &v298[-v74];
  v75 = MEMORY[0x1E0C80A78](v73);
  v1[65] = &v298[-v76];
  v77 = MEMORY[0x1E0C80A78](v75);
  v1[36] = &v298[-v78];
  v79 = MEMORY[0x1E0C80A78](v77);
  v1[64] = &v298[-v80];
  v81 = MEMORY[0x1E0C80A78](v79);
  v1[35] = &v298[-v82];
  v83 = MEMORY[0x1E0C80A78](v81);
  v1[63] = &v298[-v84];
  v85 = MEMORY[0x1E0C80A78](v83);
  v1[34] = &v298[-v86];
  v87 = MEMORY[0x1E0C80A78](v85);
  v1[62] = &v298[-v88];
  MEMORY[0x1E0C80A78](v87);
  v1[77] = &v298[-v89];
  v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v91 = MEMORY[0x1E0C80A78](v90);
  v1[5] = &v298[-((v92 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v93 = MEMORY[0x1E0C80A78](v91);
  v1[33] = &v298[-v94];
  v95 = MEMORY[0x1E0C80A78](v93);
  v1[60] = &v298[-v96];
  v97 = MEMORY[0x1E0C80A78](v95);
  v1[4] = &v298[-v98];
  v99 = MEMORY[0x1E0C80A78](v97);
  v1[59] = &v298[-v100];
  v101 = MEMORY[0x1E0C80A78](v99);
  v1[32] = &v298[-v102];
  v103 = MEMORY[0x1E0C80A78](v101);
  v1[58] = &v298[-v104];
  v105 = MEMORY[0x1E0C80A78](v103);
  v1[31] = &v298[-v106];
  v107 = MEMORY[0x1E0C80A78](v105);
  v1[57] = &v298[-v108];
  v109 = MEMORY[0x1E0C80A78](v107);
  v1[30] = &v298[-v110];
  v111 = MEMORY[0x1E0C80A78](v109);
  v1[56] = &v298[-v112];
  v113 = MEMORY[0x1E0C80A78](v111);
  v1[29] = &v298[-v114];
  v115 = MEMORY[0x1E0C80A78](v113);
  v1[55] = &v298[-v116];
  v117 = MEMORY[0x1E0C80A78](v115);
  v1[28] = &v298[-v118];
  v119 = MEMORY[0x1E0C80A78](v117);
  v1[54] = &v298[-v120];
  v121 = MEMORY[0x1E0C80A78](v119);
  v1[27] = &v298[-v122];
  v123 = MEMORY[0x1E0C80A78](v121);
  v125 = &v298[-v124];
  MEMORY[0x1E0C80A78](v123);
  v127 = &v298[-v126];
  v128 = v2;
  v129 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v129, (uint64_t)v127, &qword_1ED6F3770);
  v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  LODWORD(v56) = v130((uint64_t)v127, 1, v55);
  sub_1BDD86E30((uint64_t)v127, &qword_1ED6F3770);
  if ((_DWORD)v56 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v128;
    sub_1BDD86DEC(v129, (uint64_t)v125, &qword_1ED6F3770);
    if (v130((uint64_t)v125, 1, v55) == 1)
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
      JUMPOUT(0x1BDF6BC20);
    }
    v133 = v130;
    v1[73] = v128;
    v134 = v1[77];
    sub_1BDDA2E8C((uint64_t)v125, v134, type metadata accessor for Proto_Value);
    v135 = *(_QWORD *)(v134 + *(int *)(v55 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v136 = v1[74];
    sub_1BDD86DEC(v135, v136, &qword_1ED6F26F0);
    v137 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v138 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 48);
    v139 = v138(v136, 1, v137);
    v140 = v1[75];
    if (v139 == 1)
    {
      v141 = v137;
      v142 = inited;
      swift_retain();
      sub_1BDD86E30(v136, &qword_1ED6F26F0);
    }
    else
    {
      v141 = v137;
      v142 = inited;
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1BDDA2E8C(v136, v140, type metadata accessor for Proto_TaggedValue);
LABEL_12:
        swift_retain();
        sub_1BDD9C3E0(v1[77], type metadata accessor for Proto_Value);
        v144 = v140;
        v145 = *(_QWORD *)(v140 + *(int *)(v1[78] + 20));
        swift_beginAccess();
        v146 = *(_QWORD *)(v145 + 16);
        sub_1BDD9C3E0(v144, type metadata accessor for Proto_TaggedValue);
        switch(v146)
        {
          case 0:
            v147 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v148 = v147;
            v149 = v1[27];
            sub_1BDD86DEC(v148, v149, &qword_1ED6F3770);
            if (v133(v149, 1, v55) == 1)
              goto LABEL_145;
            v150 = v149;
            v151 = v1[62];
            sub_1BDDA2E8C(v150, v151, type metadata accessor for Proto_Value);
            v152 = *(_QWORD *)(v151 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v153 = v1[6];
            sub_1BDD86DEC(v152, v153, &qword_1ED6F26F0);
            if (v138(v153, 1, v141) == 1)
            {
              sub_1BDD86E30(v153, &qword_1ED6F26F0);
              v154 = v1[76];
              v155 = (_QWORD *)v1[48];
              v156 = v1[73];
              v157 = v1[41];
            }
            else
            {
              v228 = swift_getEnumCaseMultiPayload() == 11;
              v229 = v153;
              v154 = v1[76];
              v155 = (_QWORD *)v1[48];
              v156 = v1[73];
              v157 = v1[41];
              if (v228)
              {
                sub_1BDDA2E8C(v229, v1[41], type metadata accessor for Proto_TaggedValue);
                goto LABEL_62;
              }
              sub_1BDD9C3E0(v229, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v238 = *(int *)(v1[78] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v157 + v238) = qword_1EF52B518;
            swift_retain();
LABEL_62:
            sub_1BDD9C3E0(v1[62], type metadata accessor for Proto_Value);
            v239 = *(_QWORD *)(v157 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v240 = v239;
            v241 = v1[54];
            sub_1BDD86DEC(v240, v241, &qword_1ED6F3770);
            if (v133(v241, 1, v55) == 1)
            {
              v242 = v1[34];
              sub_1BE1B20E4();
              v243 = *(int *)(v55 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v242 + v243) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[54], &qword_1ED6F3770);
            }
            else
            {
              v242 = v1[34];
              sub_1BDDA2E8C(v241, v242, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v157, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v244 = sub_1BDDB4FC0(v242, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[14] + 8) + 8) + 8))(v244);
            if (v154)
              goto LABEL_141;
            goto LABEL_129;
          case 1:
            v167 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v168 = v167;
            v169 = v1[28];
            sub_1BDD86DEC(v168, v169, &qword_1ED6F3770);
            if (v133(v169, 1, v55) == 1)
              goto LABEL_147;
            v170 = v169;
            v171 = v1[63];
            sub_1BDDA2E8C(v170, v171, type metadata accessor for Proto_Value);
            v172 = *(_QWORD *)(v171 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v173 = v1[7];
            sub_1BDD86DEC(v172, v173, &qword_1ED6F26F0);
            if (v138(v173, 1, v141) == 1)
            {
              sub_1BDD86E30(v173, &qword_1ED6F26F0);
              v174 = v1[76];
              v155 = (_QWORD *)v1[49];
              v175 = v1[73];
              v176 = v1[42];
            }
            else
            {
              v228 = swift_getEnumCaseMultiPayload() == 11;
              v232 = v173;
              v174 = v1[76];
              v155 = (_QWORD *)v1[49];
              v175 = v1[73];
              v176 = v1[42];
              if (v228)
              {
                sub_1BDDA2E8C(v232, v1[42], type metadata accessor for Proto_TaggedValue);
                goto LABEL_83;
              }
              sub_1BDD9C3E0(v232, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v253 = *(int *)(v1[78] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v176 + v253) = qword_1EF52B518;
            swift_retain();
LABEL_83:
            sub_1BDD9C3E0(v1[63], type metadata accessor for Proto_Value);
            v254 = *(_QWORD *)(v176 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v255 = v254;
            v256 = v1[55];
            sub_1BDD86DEC(v255, v256, &qword_1ED6F3770);
            if (v133(v256, 1, v55) == 1)
            {
              v257 = v1[35];
              sub_1BE1B20E4();
              v258 = *(int *)(v55 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v257 + v258) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[55], &qword_1ED6F3770);
            }
            else
            {
              v257 = v1[35];
              sub_1BDDA2E8C(v256, v257, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v176, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v259 = sub_1BDDB4FC0(v257, v175);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[15] + 8) + 8) + 8))(v259);
            if (!v174)
              goto LABEL_129;
            goto LABEL_141;
          case 2:
            v177 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v178 = v177;
            v179 = v1[29];
            sub_1BDD86DEC(v178, v179, &qword_1ED6F3770);
            if (v133(v179, 1, v55) == 1)
              goto LABEL_148;
            v180 = v179;
            v181 = v1[64];
            sub_1BDDA2E8C(v180, v181, type metadata accessor for Proto_Value);
            v182 = *(_QWORD *)(v181 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v183 = v1[8];
            sub_1BDD86DEC(v182, v183, &qword_1ED6F26F0);
            if (v138(v183, 1, v141) == 1)
            {
              sub_1BDD86E30(v183, &qword_1ED6F26F0);
              v184 = v1[76];
              v155 = (_QWORD *)v1[50];
              v185 = v1[73];
              v186 = v1[43];
            }
            else
            {
              v228 = swift_getEnumCaseMultiPayload() == 11;
              v233 = v183;
              v184 = v1[76];
              v155 = (_QWORD *)v1[50];
              v185 = v1[73];
              v186 = v1[43];
              if (v228)
              {
                sub_1BDDA2E8C(v233, v1[43], type metadata accessor for Proto_TaggedValue);
                goto LABEL_93;
              }
              sub_1BDD9C3E0(v233, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v260 = *(int *)(v1[78] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v186 + v260) = qword_1EF52B518;
            swift_retain();
LABEL_93:
            sub_1BDD9C3E0(v1[64], type metadata accessor for Proto_Value);
            v261 = *(_QWORD *)(v186 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v262 = v261;
            v263 = v1[56];
            sub_1BDD86DEC(v262, v263, &qword_1ED6F3770);
            if (v133(v263, 1, v55) == 1)
            {
              v264 = v1[36];
              sub_1BE1B20E4();
              v265 = *(int *)(v55 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v264 + v265) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[56], &qword_1ED6F3770);
            }
            else
            {
              v264 = v1[36];
              sub_1BDDA2E8C(v263, v264, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v186, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v266 = sub_1BDDB4FC0(v264, v185);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[16] + 8) + 8) + 8))(v266);
            if (!v184)
              goto LABEL_129;
            goto LABEL_141;
          case 3:
            v187 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v188 = v187;
            v189 = v1[30];
            sub_1BDD86DEC(v188, v189, &qword_1ED6F3770);
            if (v133(v189, 1, v55) == 1)
              goto LABEL_149;
            v190 = v189;
            v191 = v1[65];
            sub_1BDDA2E8C(v190, v191, type metadata accessor for Proto_Value);
            v192 = *(_QWORD *)(v191 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v193 = v1[9];
            sub_1BDD86DEC(v192, v193, &qword_1ED6F26F0);
            if (v138(v193, 1, v141) == 1)
            {
              sub_1BDD86E30(v193, &qword_1ED6F26F0);
              v194 = v1[76];
              v155 = (_QWORD *)v1[51];
              v195 = v1[44];
              v196 = v1[73];
            }
            else
            {
              v228 = swift_getEnumCaseMultiPayload() == 11;
              v234 = v193;
              v194 = v1[76];
              v155 = (_QWORD *)v1[51];
              v195 = v1[44];
              v196 = v1[73];
              if (v228)
              {
                sub_1BDDA2E8C(v234, v1[44], type metadata accessor for Proto_TaggedValue);
                goto LABEL_103;
              }
              sub_1BDD9C3E0(v234, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v267 = *(int *)(v1[78] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v195 + v267) = qword_1EF52B518;
            swift_retain();
LABEL_103:
            sub_1BDD9C3E0(v1[65], type metadata accessor for Proto_Value);
            v268 = *(_QWORD *)(v195 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v269 = v268;
            v270 = v1[57];
            sub_1BDD86DEC(v269, v270, &qword_1ED6F3770);
            if (v133(v270, 1, v55) == 1)
            {
              v271 = v1[37];
              sub_1BE1B20E4();
              v272 = *(int *)(v55 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v271 + v272) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[57], &qword_1ED6F3770);
            }
            else
            {
              v271 = v1[37];
              sub_1BDDA2E8C(v270, v271, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v195, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v273 = sub_1BDDB4FC0(v271, v196);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[17] + 8) + 8) + 8))(v273);
            if (!v194)
              goto LABEL_129;
            goto LABEL_141;
          case 4:
            v197 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v198 = v197;
            v199 = v1[31];
            sub_1BDD86DEC(v198, v199, &qword_1ED6F3770);
            if (v133(v199, 1, v55) == 1)
              goto LABEL_150;
            v200 = v199;
            v201 = v1[66];
            sub_1BDDA2E8C(v200, v201, type metadata accessor for Proto_Value);
            v202 = *(_QWORD *)(v201 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v203 = v1[10];
            sub_1BDD86DEC(v202, v203, &qword_1ED6F26F0);
            if (v138(v203, 1, v141) == 1)
            {
              sub_1BDD86E30(v203, &qword_1ED6F26F0);
              v204 = v1[76];
              v155 = (_QWORD *)v1[52];
              v205 = v1[45];
              v206 = v1[73];
            }
            else
            {
              v228 = swift_getEnumCaseMultiPayload() == 11;
              v235 = v203;
              v204 = v1[76];
              v155 = (_QWORD *)v1[52];
              v205 = v1[45];
              v206 = v1[73];
              if (v228)
              {
                sub_1BDDA2E8C(v235, v1[45], type metadata accessor for Proto_TaggedValue);
                goto LABEL_113;
              }
              sub_1BDD9C3E0(v235, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v274 = *(int *)(v1[78] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v205 + v274) = qword_1EF52B518;
            swift_retain();
LABEL_113:
            sub_1BDD9C3E0(v1[66], type metadata accessor for Proto_Value);
            v275 = *(_QWORD *)(v205 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v276 = v275;
            v277 = v1[58];
            sub_1BDD86DEC(v276, v277, &qword_1ED6F3770);
            if (v133(v277, 1, v55) == 1)
            {
              v278 = v1[38];
              sub_1BE1B20E4();
              v279 = *(int *)(v55 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v278 + v279) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[58], &qword_1ED6F3770);
            }
            else
            {
              v278 = v1[38];
              sub_1BDDA2E8C(v277, v278, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v205, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v280 = sub_1BDDB4FC0(v278, v206);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[18] + 8) + 8) + 8))(v280);
            if (!v204)
              goto LABEL_129;
            goto LABEL_141;
          case 5:
            v207 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v208 = v207;
            v209 = v1[32];
            sub_1BDD86DEC(v208, v209, &qword_1ED6F3770);
            if (v133(v209, 1, v55) == 1)
              goto LABEL_151;
            v210 = v209;
            v211 = v1[67];
            sub_1BDDA2E8C(v210, v211, type metadata accessor for Proto_Value);
            v212 = *(_QWORD *)(v211 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v213 = v1[11];
            sub_1BDD86DEC(v212, v213, &qword_1ED6F26F0);
            if (v138(v213, 1, v141) == 1)
            {
              sub_1BDD86E30(v213, &qword_1ED6F26F0);
              v214 = v1[76];
              v155 = (_QWORD *)v1[53];
              v215 = v1[46];
              v216 = v1[73];
            }
            else
            {
              v228 = swift_getEnumCaseMultiPayload() == 11;
              v236 = v213;
              v214 = v1[76];
              v155 = (_QWORD *)v1[53];
              v215 = v1[46];
              v216 = v1[73];
              if (v228)
              {
                sub_1BDDA2E8C(v236, v1[46], type metadata accessor for Proto_TaggedValue);
                goto LABEL_123;
              }
              sub_1BDD9C3E0(v236, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v281 = *(int *)(v1[78] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v215 + v281) = qword_1EF52B518;
            swift_retain();
LABEL_123:
            sub_1BDD9C3E0(v1[67], type metadata accessor for Proto_Value);
            v282 = *(_QWORD *)(v215 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v283 = v282;
            v284 = v1[59];
            sub_1BDD86DEC(v283, v284, &qword_1ED6F3770);
            if (v133(v284, 1, v55) == 1)
            {
              v285 = v1[39];
              sub_1BE1B20E4();
              v286 = *(int *)(v55 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v285 + v286) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[59], &qword_1ED6F3770);
            }
            else
            {
              v285 = v1[39];
              sub_1BDDA2E8C(v284, v285, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v215, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v287 = sub_1BDDB4FC0(v285, v216);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[19] + 8) + 8) + 8))(v287);
            if (v214)
              goto LABEL_141;
LABEL_129:
            swift_release();
            swift_release();
            v252 = v1[71];
            goto LABEL_130;
          case 6:
            v217 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v218 = v217;
            v219 = v1[4];
            sub_1BDD86DEC(v218, v219, &qword_1ED6F3770);
            if (v133(v219, 1, v55) == 1)
              goto LABEL_152;
            v220 = v219;
            v221 = v1[68];
            sub_1BDDA2E8C(v220, v221, type metadata accessor for Proto_Value);
            v222 = *(_QWORD *)(v221 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v223 = v1[12];
            sub_1BDD86DEC(v222, v223, &qword_1ED6F26F0);
            if (v138(v223, 1, v141) == 1)
            {
              sub_1BDD86E30(v223, &qword_1ED6F26F0);
              v224 = v1[76];
              v225 = v1[3];
              v226 = v1[61];
              v227 = v1[73];
            }
            else
            {
              EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              v224 = v1[76];
              v225 = v1[3];
              v226 = v1[61];
              v227 = v1[73];
              if (EnumCaseMultiPayload == 11)
              {
                sub_1BDDA2E8C(v223, v1[61], type metadata accessor for Proto_TaggedValue);
                goto LABEL_135;
              }
              sub_1BDD9C3E0(v223, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v289 = *(int *)(v1[78] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v226 + v289) = qword_1EF52B518;
            swift_retain();
LABEL_135:
            sub_1BDD9C3E0(v1[68], type metadata accessor for Proto_Value);
            v290 = *(_QWORD *)(v226 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v291 = v290;
            v292 = v1[60];
            sub_1BDD86DEC(v291, v292, &qword_1ED6F3770);
            if (v133(v292, 1, v55) == 1)
            {
              v293 = v1[1];
              sub_1BE1B20E4();
              v294 = *(int *)(v55 + 20);
              v295 = v1[2];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v293 + v294) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[60], &qword_1ED6F3770);
            }
            else
            {
              v293 = v1[1];
              sub_1BDDA2E8C(v292, v293, type metadata accessor for Proto_Value);
              v295 = v1[2];
            }
            sub_1BDD9C3E0(v1[61], type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v296 = sub_1BDDB4FC0(v293, v227);
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[20] + 8) + 8) + 8))(v296, v225);
            if (v224)
              goto LABEL_141;
            swift_release();
            swift_release();
            v297 = v1[71];
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1[70] + 32))(v1[72], v295, v297);
          default:
            v158 = *(_QWORD *)(v142 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v159 = v158;
            v160 = v1[33];
            sub_1BDD86DEC(v159, v160, &qword_1ED6F3770);
            if (v133(v160, 1, v55) == 1)
              goto LABEL_146;
            v161 = v160;
            v162 = v1[69];
            sub_1BDDA2E8C(v161, v162, type metadata accessor for Proto_Value);
            v163 = *(_QWORD *)(v162 + *(int *)(v55 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v164 = v1[13];
            sub_1BDD86DEC(v163, v164, &qword_1ED6F26F0);
            if (v138(v164, 1, v141) == 1)
            {
              sub_1BDD86E30(v164, &qword_1ED6F26F0);
              v165 = v1[47];
              v166 = v1[73];
            }
            else
            {
              v230 = swift_getEnumCaseMultiPayload();
              v165 = v1[47];
              v166 = v1[73];
              if (v230 == 11)
              {
                sub_1BDDA2E8C(v164, v1[47], type metadata accessor for Proto_TaggedValue);
                v231 = v1[5];
                goto LABEL_73;
              }
              sub_1BDD9C3E0(v164, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v245 = *(int *)(v1[78] + 20);
            v231 = v1[5];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v165 + v245) = qword_1EF52B518;
            swift_retain();
LABEL_73:
            sub_1BDD9C3E0(v1[69], type metadata accessor for Proto_Value);
            v246 = *(_QWORD *)(v165 + *(int *)(v1[78] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v246, v231, &qword_1ED6F3770);
            if (v133(v231, 1, v55) == 1)
            {
              v247 = v1[40];
              sub_1BE1B20E4();
              v248 = *(int *)(v55 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v247 + v248) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v231, &qword_1ED6F3770);
            }
            else
            {
              v247 = v1[40];
              sub_1BDDA2E8C(v231, v247, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v165, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v249 = sub_1BDDB4FC0(v247, v166);
            swift_release();
            v250 = v1[76];
            AnyCRValue.init(from:)(v249, (uint64_t *)(v3 - 72));
            if (v250)
            {
LABEL_141:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            swift_release();
            swift_release();
            v251 = *(_QWORD *)(v3 - 72);
            v155 = (_QWORD *)*v1;
            *v155 = v146;
            v155[1] = v251;
            v252 = v1[71];
LABEL_130:
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(v1[70] + 32))(v1[72], v155, v252);
        }
      }
      swift_retain();
      sub_1BDD9C3E0(v136, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v143 = *(int *)(v1[78] + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v140 + v143) = qword_1EF52B518;
    goto LABEL_12;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v131 = 0xD000000000000017;
  *(_QWORD *)(v131 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v131 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

void TaggedValue_7.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[70];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v114 = a1;
  v134 = a2[8];
  v111[63] = *(_QWORD *)(v134 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v111[69] = (char *)v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = *(_QWORD *)(v5 + 56);
  v111[62] = *(_QWORD *)(v118 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v111[68] = (char *)v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = *(_QWORD *)(v8 + 48);
  v111[61] = *(_QWORD *)(v115 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v111[67] = (char *)v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = *(_QWORD *)(v11 + 40);
  v111[60] = *(_QWORD *)(v117 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v111[66] = (char *)v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = *(_QWORD *)(v14 + 32);
  v111[59] = *(_QWORD *)(v119 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v111[65] = (char *)v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = *(_QWORD *)(v17 + 24);
  v111[49] = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v15);
  v111[64] = (char *)v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v20 = MEMORY[0x1E0C80A78](v19);
  v111[53] = (char *)v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v111[52] = (char *)v111 - v22;
  v112 = type metadata accessor for Proto_Value(0);
  v111[51] = *(_QWORD *)(v112 - 8);
  v23 = MEMORY[0x1E0C80A78](v112);
  v111[36] = (char *)v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v111[42] = (char *)v111 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v111[41] = (char *)v111 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v111[40] = (char *)v111 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v111[44] = (char *)v111 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v111[39] = (char *)v111 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v111[38] = (char *)v111 - v36;
  MEMORY[0x1E0C80A78](v35);
  v111[37] = (char *)v111 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v39 = MEMORY[0x1E0C80A78](v38);
  v111[15] = (char *)v111 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v39);
  v111[35] = (char *)v111 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v111[16] = (char *)v111 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v111[33] = (char *)v111 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v111[14] = (char *)v111 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v111[32] = (char *)v111 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v111[13] = (char *)v111 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v111[31] = (char *)v111 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v111[12] = (char *)v111 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v111[57] = (char *)v111 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v111[11] = (char *)v111 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v111[29] = (char *)v111 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v111[10] = (char *)v111 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v111[28] = (char *)v111 - v66;
  v67 = MEMORY[0x1E0C80A78](v65);
  v111[9] = (char *)v111 - v68;
  MEMORY[0x1E0C80A78](v67);
  v111[27] = (char *)v111 - v69;
  v113 = type metadata accessor for Proto_TaggedValue(0);
  v70 = MEMORY[0x1E0C80A78](v113);
  v111[17] = (char *)v111 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = MEMORY[0x1E0C80A78](v70);
  v111[34] = (char *)v111 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v111[24] = (char *)v111 - v75;
  v76 = MEMORY[0x1E0C80A78](v74);
  v111[47] = (char *)v111 - v77;
  v78 = MEMORY[0x1E0C80A78](v76);
  v111[23] = (char *)v111 - v79;
  v80 = MEMORY[0x1E0C80A78](v78);
  v111[46] = (char *)v111 - v81;
  v82 = MEMORY[0x1E0C80A78](v80);
  v111[22] = (char *)v111 - v83;
  v84 = MEMORY[0x1E0C80A78](v82);
  v111[45] = (char *)v111 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v111[21] = (char *)v111 - v87;
  v88 = MEMORY[0x1E0C80A78](v86);
  v111[30] = (char *)v111 - v89;
  v90 = MEMORY[0x1E0C80A78](v88);
  v111[20] = (char *)v111 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v111[26] = (char *)v111 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v111[19] = (char *)v111 - v95;
  v96 = MEMORY[0x1E0C80A78](v94);
  v111[25] = (char *)v111 - v97;
  v98 = MEMORY[0x1E0C80A78](v96);
  v111[18] = (char *)v111 - v99;
  v100 = MEMORY[0x1E0C80A78](v98);
  v111[43] = (char *)v111 - v101;
  v102 = a2[2];
  v111[48] = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v100);
  v111[50] = (char *)v111 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = a2[9];
  v104 = a2[10];
  v106 = a2[11];
  v107 = a2[12];
  v108 = a2[13];
  v109 = a2[14];
  v110 = a2[15];
  v120 = v102;
  v121 = v116;
  v122 = v119;
  v123 = v117;
  v124 = v115;
  v125 = v118;
  v126 = v134;
  v127 = v105;
  v128 = v104;
  v129 = v106;
  v130 = v107;
  v131 = v108;
  v132 = v109;
  v133 = v110;
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

void sub_1BDF6C6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = v3;
  v7 = v4;
  v8 = v2;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v5 - 544) + 32))(*(_QWORD *)(v5 - 528), a2, *(_QWORD *)(v5 - 864));
  v9 = v7 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + *(int *)(v6 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v11 = *(_QWORD *)(v5 - 712);
  sub_1BDD86DEC(v10, v11, &qword_1ED6F26F0);
  v12 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
  if (v13(v11, 1, v12) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v11, &qword_1ED6F26F0);
    v14 = *(_QWORD *)(v5 - 584);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v14 = *(_QWORD *)(v5 - 584);
    if (EnumCaseMultiPayload == 11)
    {
      sub_1BDDA2E8C(v11, *(_QWORD *)(v5 - 584), type metadata accessor for Proto_TaggedValue);
      swift_retain();
      v16 = *(_QWORD *)(v5 - 360);
      goto LABEL_9;
    }
    swift_retain();
    sub_1BDD9C3E0(v11, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v16 = *(_QWORD *)(v5 - 360);
  v17 = *(int *)(v16 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v16 = *(_QWORD *)(v5 - 360);
  }
  *(_QWORD *)(v14 + v17) = qword_1EF52B518;
  swift_retain();
LABEL_9:
  v18 = *(int *)(v16 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v19 = swift_retain();
    v20 = sub_1BE138794(v19);
    v14 = *(_QWORD *)(v5 - 584);
    *(_QWORD *)(v14 + v18) = v20;
    swift_release();
  }
  v21 = *(_QWORD *)(v14 + v18);
  swift_beginAccess();
  *(_QWORD *)(v21 + 16) = 0;
  sub_1BE12A434(v14);
  v22 = swift_endAccess();
  MEMORY[0x1E0C80A78](v22);
  v23 = *(_QWORD *)(v5 - 864);
  v24 = *(_QWORD *)(v5 - 528);
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF7E500, *(_QWORD *)(v5 - 632));
  if (v8)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 544) + 8))(v24, v23);
    goto LABEL_24;
  }
  swift_beginAccess();
  v25 = *(_QWORD *)(v5 - 368);
  v26 = *(_QWORD *)(v9 + *(int *)(v25 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v27 = *(_QWORD *)(v5 - 856);
  sub_1BDD86DEC(v26, v27, &qword_1ED6F26F0);
  if (v13(v27, 1, v12) == 1)
  {
    sub_1BDD86E30(v27, &qword_1ED6F26F0);
    v28 = *(_QWORD *)(v5 - 528);
    v29 = *(_QWORD *)(v5 - 784);
  }
  else
  {
    v30 = swift_getEnumCaseMultiPayload();
    v28 = *(_QWORD *)(v5 - 528);
    v29 = *(_QWORD *)(v5 - 784);
    if (v30 == 11)
    {
      sub_1BDDA2E8C(v27, *(_QWORD *)(v5 - 784), type metadata accessor for Proto_TaggedValue);
      v31 = *(_QWORD *)(v5 - 360);
LABEL_21:
      v33 = *(int *)(v31 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        v34 = swift_retain();
        v29 = *(_QWORD *)(v5 - 784);
        *(_QWORD *)(v29 + v33) = sub_1BE138794(v34);
        swift_release();
      }
      v35 = *(_QWORD *)(v29 + v33);
      v36 = *(_QWORD *)(v5 - 512);
      sub_1BDDA2E8C(*(_QWORD *)(v5 - 632), v36, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 520) + 56))(v36, 0, 1, v25);
      v37 = *(_QWORD *)(v5 - 504);
      sub_1BDEFF368(v36, v37);
      v38 = v35
          + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1BDEFF3B0(v37, v38);
      swift_endAccess();
      swift_release();
      sub_1BE12A434(v29);
      swift_endAccess();
      swift_release();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 544) + 8))(v28, *(_QWORD *)(v5 - 864));
LABEL_24:
      JUMPOUT(0x1BDF6C58CLL);
    }
    sub_1BDD9C3E0(v27, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v31 = *(_QWORD *)(v5 - 360);
  v32 = *(int *)(v31 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v31 = *(_QWORD *)(v5 - 360);
  }
  *(_QWORD *)(v29 + v32) = qword_1EF52B518;
  swift_retain();
  goto LABEL_21;
}

void sub_1BDF6F2FC()
{
  TaggedValue_7.init(from:)();
}

void sub_1BDF6F348(uint64_t a1, _QWORD *a2)
{
  TaggedValue_7.encode(to:)(a1, a2);
}

void TaggedValue_7<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[34];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v36[20] = a8;
  v36[18] = a7;
  v36[17] = a6;
  v36[16] = a5;
  v36[15] = a4;
  v36[14] = a3;
  v36[21] = a1;
  v36[12] = a9;
  v36[13] = *(_QWORD *)(*(_QWORD *)(a2 + 64) - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v36[11] = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[9] = *(_QWORD *)(*(_QWORD *)(v11 + 56) - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v36[8] = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[6] = *(_QWORD *)(*(_QWORD *)(v14 + 48) - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v36[5] = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 + 40);
  v36[4] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v36[3] = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 + 32);
  v36[2] = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v19);
  v36[1] = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v25 + 24);
  v36[0] = *(_QWORD *)(v26 - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v29 = *(_QWORD *)(v28 + 16);
  MEMORY[0x1E0C80A78](v27);
  v31 = *(_QWORD *)(v30 + 120);
  v36[27] = v29;
  v36[28] = v26;
  v36[29] = v22;
  v36[30] = v18;
  v36[7] = v32;
  v36[31] = v32;
  v36[32] = v33;
  v36[10] = v33;
  v36[19] = v34;
  v36[33] = v34;
  v35 = *(_OWORD *)(v30 + 88);
  v37 = *(_OWORD *)(v30 + 72);
  v38 = v35;
  v39 = *(_OWORD *)(v30 + 104);
  v40 = v31;
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF6F5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 72), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF6F620 + 4 * byte_1BE1BE3DE[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF6F620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, v1, v3);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v3);
}

void sub_1BDF6F8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TaggedValue_7<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32), *(_QWORD *)(a3 - 40), *(_QWORD *)(a3 - 48), *(_QWORD *)(a3 - 56));
}

void TaggedValue_8.init(from:)()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF6F974(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  uint64_t inited;
  unsigned int (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t, uint64_t);
  int v155;
  uint64_t v156;
  uint64_t v157;
  int EnumCaseMultiPayload;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  BOOL v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  _BYTE v346[96];

  v1[82] = a1;
  v1[81] = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v1[2] = (uint64_t)&v346[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x1E0C80A78](v4);
  v1[56] = (uint64_t)&v346[-v7];
  v8 = MEMORY[0x1E0C80A78](v6);
  v1[55] = (uint64_t)&v346[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  v1[54] = (uint64_t)&v346[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  v1[53] = (uint64_t)&v346[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  v1[52] = (uint64_t)&v346[-v15];
  v16 = MEMORY[0x1E0C80A78](v14);
  v1[51] = (uint64_t)&v346[-v17];
  v18 = MEMORY[0x1E0C80A78](v16);
  v1[50] = (uint64_t)&v346[-v19];
  MEMORY[0x1E0C80A78](v18);
  v1[49] = (uint64_t)&v346[-v20];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v1[41] = (uint64_t)&v346[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = MEMORY[0x1E0C80A78](v22);
  v1[40] = (uint64_t)&v346[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v1[39] = (uint64_t)&v346[-v27];
  v28 = MEMORY[0x1E0C80A78](v26);
  v1[38] = (uint64_t)&v346[-v29];
  v30 = MEMORY[0x1E0C80A78](v28);
  v1[37] = (uint64_t)&v346[-v31];
  v32 = MEMORY[0x1E0C80A78](v30);
  v1[36] = (uint64_t)&v346[-v33];
  v34 = MEMORY[0x1E0C80A78](v32);
  v1[35] = (uint64_t)&v346[-v35];
  v36 = MEMORY[0x1E0C80A78](v34);
  v1[34] = (uint64_t)&v346[-v37];
  v38 = MEMORY[0x1E0C80A78](v36);
  v1[33] = (uint64_t)&v346[-v39];
  MEMORY[0x1E0C80A78](v38);
  v1[86] = (uint64_t)&v346[-v40];
  v41 = type metadata accessor for Proto_TaggedValue(0);
  v1[88] = v41;
  v42 = MEMORY[0x1E0C80A78](v41);
  v1[21] = (uint64_t)&v346[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = MEMORY[0x1E0C80A78](v42);
  v1[48] = (uint64_t)&v346[-v45];
  v46 = MEMORY[0x1E0C80A78](v44);
  v1[47] = (uint64_t)&v346[-v47];
  v48 = MEMORY[0x1E0C80A78](v46);
  v1[46] = (uint64_t)&v346[-v49];
  v50 = MEMORY[0x1E0C80A78](v48);
  v1[45] = (uint64_t)&v346[-v51];
  v52 = MEMORY[0x1E0C80A78](v50);
  v1[44] = (uint64_t)&v346[-v53];
  v54 = MEMORY[0x1E0C80A78](v52);
  v1[43] = (uint64_t)&v346[-v55];
  v56 = MEMORY[0x1E0C80A78](v54);
  v1[42] = (uint64_t)&v346[-v57];
  v58 = MEMORY[0x1E0C80A78](v56);
  v1[20] = (uint64_t)&v346[-v59];
  MEMORY[0x1E0C80A78](v58);
  v1[85] = (uint64_t)&v346[-v60];
  v61 = type metadata accessor for Proto_Value(0);
  v62 = *(_QWORD *)(v61 - 8);
  v63 = MEMORY[0x1E0C80A78](v61);
  v1[19] = (uint64_t)&v346[-((v64 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = MEMORY[0x1E0C80A78](v63);
  v1[32] = (uint64_t)&v346[-v66];
  v67 = MEMORY[0x1E0C80A78](v65);
  v1[18] = (uint64_t)&v346[-v68];
  v69 = MEMORY[0x1E0C80A78](v67);
  v1[80] = (uint64_t)&v346[-v70];
  v71 = MEMORY[0x1E0C80A78](v69);
  v1[17] = (uint64_t)&v346[-v72];
  v73 = MEMORY[0x1E0C80A78](v71);
  v1[79] = (uint64_t)&v346[-v74];
  v75 = MEMORY[0x1E0C80A78](v73);
  v1[16] = (uint64_t)&v346[-v76];
  v77 = MEMORY[0x1E0C80A78](v75);
  v1[78] = (uint64_t)&v346[-v78];
  v79 = MEMORY[0x1E0C80A78](v77);
  v1[15] = (uint64_t)&v346[-v80];
  v81 = MEMORY[0x1E0C80A78](v79);
  v1[77] = (uint64_t)&v346[-v82];
  v83 = MEMORY[0x1E0C80A78](v81);
  v1[14] = (uint64_t)&v346[-v84];
  v85 = MEMORY[0x1E0C80A78](v83);
  v1[76] = (uint64_t)&v346[-v86];
  v87 = MEMORY[0x1E0C80A78](v85);
  v1[13] = (uint64_t)&v346[-v88];
  v89 = MEMORY[0x1E0C80A78](v87);
  v1[75] = (uint64_t)&v346[-v90];
  v91 = MEMORY[0x1E0C80A78](v89);
  v1[12] = (uint64_t)&v346[-v92];
  v93 = MEMORY[0x1E0C80A78](v91);
  v1[74] = (uint64_t)&v346[-v94];
  v95 = MEMORY[0x1E0C80A78](v93);
  v1[11] = (uint64_t)&v346[-v96];
  v97 = MEMORY[0x1E0C80A78](v95);
  v1[73] = (uint64_t)&v346[-v98];
  MEMORY[0x1E0C80A78](v97);
  v1[87] = (uint64_t)&v346[-v99];
  v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v101 = MEMORY[0x1E0C80A78](v100);
  v1[31] = (uint64_t)&v346[-((v102 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v103 = MEMORY[0x1E0C80A78](v101);
  v1[30] = (uint64_t)&v346[-v104];
  v105 = MEMORY[0x1E0C80A78](v103);
  v1[10] = (uint64_t)&v346[-v106];
  v107 = MEMORY[0x1E0C80A78](v105);
  v1[29] = (uint64_t)&v346[-v108];
  v109 = MEMORY[0x1E0C80A78](v107);
  v1[9] = (uint64_t)&v346[-v110];
  v111 = MEMORY[0x1E0C80A78](v109);
  v1[28] = (uint64_t)&v346[-v112];
  v113 = MEMORY[0x1E0C80A78](v111);
  v1[8] = (uint64_t)&v346[-v114];
  v115 = MEMORY[0x1E0C80A78](v113);
  v1[27] = (uint64_t)&v346[-v116];
  v117 = MEMORY[0x1E0C80A78](v115);
  v1[7] = (uint64_t)&v346[-v118];
  v119 = MEMORY[0x1E0C80A78](v117);
  v1[26] = (uint64_t)&v346[-v120];
  v121 = MEMORY[0x1E0C80A78](v119);
  v1[6] = (uint64_t)&v346[-v122];
  v123 = MEMORY[0x1E0C80A78](v121);
  v1[25] = (uint64_t)&v346[-v124];
  v125 = MEMORY[0x1E0C80A78](v123);
  v1[5] = (uint64_t)&v346[-v126];
  v127 = MEMORY[0x1E0C80A78](v125);
  v1[24] = (uint64_t)&v346[-v128];
  v129 = MEMORY[0x1E0C80A78](v127);
  v1[4] = (uint64_t)&v346[-v130];
  v131 = MEMORY[0x1E0C80A78](v129);
  v1[23] = (uint64_t)&v346[-v132];
  v133 = MEMORY[0x1E0C80A78](v131);
  v1[3] = (uint64_t)&v346[-v134];
  v135 = MEMORY[0x1E0C80A78](v133);
  v1[22] = (uint64_t)&v346[-v136];
  v137 = MEMORY[0x1E0C80A78](v135);
  v139 = &v346[-v138];
  MEMORY[0x1E0C80A78](v137);
  v141 = &v346[-v140];
  v142 = v2;
  v143 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v143, (uint64_t)v141, &qword_1ED6F3770);
  v144 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
  LODWORD(v62) = v144((uint64_t)v141, 1, v61);
  sub_1BDD86E30((uint64_t)v141, &qword_1ED6F3770);
  if ((_DWORD)v62 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v142;
    sub_1BDD86DEC(v143, (uint64_t)v139, &qword_1ED6F3770);
    v148 = v144;
    if (v144((uint64_t)v139, 1, v61) == 1)
    {
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      JUMPOUT(0x1BDF72094);
    }
    v149 = v142;
    v150 = v1[87];
    sub_1BDDA2E8C((uint64_t)v139, v150, type metadata accessor for Proto_Value);
    v151 = *(_QWORD *)(v150 + *(int *)(v61 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v152 = v1[86];
    sub_1BDD86DEC(v151, v152, &qword_1ED6F26F0);
    v153 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v154 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 48);
    v155 = v154(v152, 1, v153);
    v156 = v61;
    v1[1] = v149;
    if (v155 == 1)
    {
      swift_retain();
      sub_1BDD86E30(v152, &qword_1ED6F26F0);
      v157 = v1[85];
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v157 = v1[85];
      if (EnumCaseMultiPayload == 11)
      {
        sub_1BDDA2E8C(v152, v1[85], type metadata accessor for Proto_TaggedValue);
LABEL_12:
        swift_retain();
        sub_1BDD9C3E0(v1[87], type metadata accessor for Proto_Value);
        v160 = *(_QWORD *)(v157 + *(int *)(v1[88] + 20));
        swift_beginAccess();
        v161 = *(_QWORD *)(v160 + 16);
        sub_1BDD9C3E0(v157, type metadata accessor for Proto_TaggedValue);
        v162 = inited;
        *v1 = inited;
        switch(v161)
        {
          case 0:
            v163 = v153;
            v164 = *(_QWORD *)(v162 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v165 = v1[22];
            sub_1BDD86DEC(v164, v165, &qword_1ED6F3770);
            v166 = v156;
            if (v148(v165, 1, v156) == 1)
              goto LABEL_160;
            v167 = v165;
            v168 = v1[73];
            sub_1BDDA2E8C(v167, v168, type metadata accessor for Proto_Value);
            v169 = *(_QWORD *)(v168 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v170 = v1[33];
            sub_1BDD86DEC(v169, v170, &qword_1ED6F26F0);
            v171 = v154(v170, 1, v163);
            v172 = v1[49];
            if (v171 == 1)
            {
              sub_1BDD86E30(v170, &qword_1ED6F26F0);
              v173 = v1[84];
              v174 = v1[20];
              v175 = v1[3];
            }
            else
            {
              v276 = swift_getEnumCaseMultiPayload() == 11;
              v277 = v170;
              v173 = v1[84];
              v174 = v1[20];
              v175 = v1[3];
              if (v276)
              {
                sub_1BDDA2E8C(v277, v1[20], type metadata accessor for Proto_TaggedValue);
                goto LABEL_62;
              }
              sub_1BDD9C3E0(v277, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v286 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v174 + v286) = qword_1EF52B518;
            swift_retain();
LABEL_62:
            sub_1BDD9C3E0(v1[73], type metadata accessor for Proto_Value);
            v287 = *(_QWORD *)(v174 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v287, v175, &qword_1ED6F3770);
            if (v148(v175, 1, v166) == 1)
            {
              v288 = v1[11];
              sub_1BE1B20E4();
              v289 = *(int *)(v166 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v288 + v289) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v175, &qword_1ED6F3770);
            }
            else
            {
              v288 = v1[11];
              sub_1BDDA2E8C(v175, v288, type metadata accessor for Proto_Value);
            }
            v290 = v1[1];
            sub_1BDD9C3E0(v174, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v291 = sub_1BDDB4FC0(v288, v290);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[57] + 8) + 8) + 8))(v291);
            if (v173)
              goto LABEL_157;
            goto LABEL_146;
          case 1:
            v176 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v177 = v176;
            v178 = v1[23];
            sub_1BDD86DEC(v177, v178, &qword_1ED6F3770);
            v179 = v156;
            if (v148(v178, 1, v156) == 1)
              goto LABEL_161;
            v180 = v178;
            v181 = v1[74];
            sub_1BDDA2E8C(v180, v181, type metadata accessor for Proto_Value);
            v182 = *(_QWORD *)(v181 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v183 = v182;
            v184 = v1[34];
            sub_1BDD86DEC(v183, v184, &qword_1ED6F26F0);
            v185 = v154(v184, 1, v153);
            v172 = v1[50];
            v186 = v1[42];
            if (v185 == 1)
            {
              sub_1BDD86E30(v184, &qword_1ED6F26F0);
              v187 = v1[84];
              v188 = v1[4];
            }
            else
            {
              v278 = swift_getEnumCaseMultiPayload();
              v187 = v1[84];
              v188 = v1[4];
              if (v278 == 11)
              {
                sub_1BDDA2E8C(v184, v186, type metadata accessor for Proto_TaggedValue);
                goto LABEL_73;
              }
              sub_1BDD9C3E0(v184, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v292 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v186 + v292) = qword_1EF52B518;
            swift_retain();
LABEL_73:
            sub_1BDD9C3E0(v1[74], type metadata accessor for Proto_Value);
            v293 = *(_QWORD *)(v186 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v293, v188, &qword_1ED6F3770);
            if (v148(v188, 1, v179) == 1)
            {
              v294 = v1[12];
              sub_1BE1B20E4();
              v295 = *(int *)(v179 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v294 + v295) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v188, &qword_1ED6F3770);
            }
            else
            {
              v294 = v1[12];
              sub_1BDDA2E8C(v188, v294, type metadata accessor for Proto_Value);
            }
            v296 = v1[1];
            sub_1BDD9C3E0(v186, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v297 = sub_1BDDB4FC0(v294, v296);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[58] + 8) + 8) + 8))(v297);
            if (!v187)
              goto LABEL_146;
            goto LABEL_157;
          case 2:
            v189 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v190 = v189;
            v191 = v1[24];
            sub_1BDD86DEC(v190, v191, &qword_1ED6F3770);
            v192 = v156;
            if (v148(v191, 1, v156) == 1)
              goto LABEL_162;
            v193 = v191;
            v194 = v1[75];
            sub_1BDDA2E8C(v193, v194, type metadata accessor for Proto_Value);
            v195 = *(_QWORD *)(v194 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v196 = v195;
            v197 = v1[35];
            sub_1BDD86DEC(v196, v197, &qword_1ED6F26F0);
            v198 = v154(v197, 1, v153);
            v172 = v1[51];
            v199 = v1[43];
            if (v198 == 1)
            {
              sub_1BDD86E30(v197, &qword_1ED6F26F0);
              v200 = v1[84];
              v201 = v1[5];
            }
            else
            {
              v279 = swift_getEnumCaseMultiPayload();
              v200 = v1[84];
              v201 = v1[5];
              if (v279 == 11)
              {
                sub_1BDDA2E8C(v197, v199, type metadata accessor for Proto_TaggedValue);
                goto LABEL_84;
              }
              sub_1BDD9C3E0(v197, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v298 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v199 + v298) = qword_1EF52B518;
            swift_retain();
LABEL_84:
            sub_1BDD9C3E0(v1[75], type metadata accessor for Proto_Value);
            v299 = *(_QWORD *)(v199 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v299, v201, &qword_1ED6F3770);
            if (v148(v201, 1, v192) == 1)
            {
              v300 = v1[13];
              sub_1BE1B20E4();
              v301 = *(int *)(v192 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v300 + v301) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v201, &qword_1ED6F3770);
            }
            else
            {
              v300 = v1[13];
              sub_1BDDA2E8C(v201, v300, type metadata accessor for Proto_Value);
            }
            v302 = v1[1];
            sub_1BDD9C3E0(v199, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v303 = sub_1BDDB4FC0(v300, v302);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[59] + 8) + 8) + 8))(v303);
            if (!v200)
              goto LABEL_146;
            goto LABEL_157;
          case 3:
            v202 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v203 = v202;
            v204 = v1[25];
            sub_1BDD86DEC(v203, v204, &qword_1ED6F3770);
            v205 = v156;
            if (v148(v204, 1, v156) == 1)
              goto LABEL_163;
            v206 = v204;
            v207 = v1[76];
            sub_1BDDA2E8C(v206, v207, type metadata accessor for Proto_Value);
            v208 = *(_QWORD *)(v207 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v209 = v208;
            v210 = v1[36];
            sub_1BDD86DEC(v209, v210, &qword_1ED6F26F0);
            v211 = v154(v210, 1, v153);
            v172 = v1[52];
            v212 = v1[44];
            if (v211 == 1)
            {
              sub_1BDD86E30(v210, &qword_1ED6F26F0);
              v213 = v1[84];
              v214 = v1[6];
            }
            else
            {
              v280 = swift_getEnumCaseMultiPayload();
              v213 = v1[84];
              v214 = v1[6];
              if (v280 == 11)
              {
                sub_1BDDA2E8C(v210, v212, type metadata accessor for Proto_TaggedValue);
                goto LABEL_95;
              }
              sub_1BDD9C3E0(v210, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v304 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v212 + v304) = qword_1EF52B518;
            swift_retain();
LABEL_95:
            sub_1BDD9C3E0(v1[76], type metadata accessor for Proto_Value);
            v305 = *(_QWORD *)(v212 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v305, v214, &qword_1ED6F3770);
            if (v148(v214, 1, v205) == 1)
            {
              v306 = v1[14];
              sub_1BE1B20E4();
              v307 = *(int *)(v205 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v306 + v307) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v214, &qword_1ED6F3770);
            }
            else
            {
              v306 = v1[14];
              sub_1BDDA2E8C(v214, v306, type metadata accessor for Proto_Value);
            }
            v308 = v1[1];
            sub_1BDD9C3E0(v212, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v309 = sub_1BDDB4FC0(v306, v308);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[60] + 8) + 8) + 8))(v309);
            if (!v213)
              goto LABEL_146;
            goto LABEL_157;
          case 4:
            v215 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v216 = v215;
            v217 = v1[26];
            sub_1BDD86DEC(v216, v217, &qword_1ED6F3770);
            v218 = v156;
            if (v148(v217, 1, v156) == 1)
              goto LABEL_164;
            v219 = v217;
            v220 = v1[77];
            sub_1BDDA2E8C(v219, v220, type metadata accessor for Proto_Value);
            v221 = *(_QWORD *)(v220 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v222 = v221;
            v223 = v1[37];
            sub_1BDD86DEC(v222, v223, &qword_1ED6F26F0);
            v224 = v154(v223, 1, v153);
            v172 = v1[53];
            v225 = v1[45];
            if (v224 == 1)
            {
              sub_1BDD86E30(v223, &qword_1ED6F26F0);
              v226 = v1[84];
              v227 = v1[7];
            }
            else
            {
              v281 = swift_getEnumCaseMultiPayload();
              v226 = v1[84];
              v227 = v1[7];
              if (v281 == 11)
              {
                sub_1BDDA2E8C(v223, v225, type metadata accessor for Proto_TaggedValue);
                goto LABEL_106;
              }
              sub_1BDD9C3E0(v223, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v310 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v225 + v310) = qword_1EF52B518;
            swift_retain();
LABEL_106:
            sub_1BDD9C3E0(v1[77], type metadata accessor for Proto_Value);
            v311 = *(_QWORD *)(v225 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v311, v227, &qword_1ED6F3770);
            if (v148(v227, 1, v218) == 1)
            {
              v312 = v1[15];
              sub_1BE1B20E4();
              v313 = *(int *)(v218 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v312 + v313) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v227, &qword_1ED6F3770);
            }
            else
            {
              v312 = v1[15];
              sub_1BDDA2E8C(v227, v312, type metadata accessor for Proto_Value);
            }
            v314 = v1[1];
            sub_1BDD9C3E0(v225, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v315 = sub_1BDDB4FC0(v312, v314);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[61] + 8) + 8) + 8))(v315);
            if (!v226)
              goto LABEL_146;
            goto LABEL_157;
          case 5:
            v228 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v229 = v228;
            v230 = v1[27];
            sub_1BDD86DEC(v229, v230, &qword_1ED6F3770);
            v231 = v156;
            if (v148(v230, 1, v156) == 1)
              goto LABEL_165;
            v232 = v230;
            v233 = v1[78];
            sub_1BDDA2E8C(v232, v233, type metadata accessor for Proto_Value);
            v234 = *(_QWORD *)(v233 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v235 = v234;
            v236 = v1[38];
            sub_1BDD86DEC(v235, v236, &qword_1ED6F26F0);
            v237 = v154(v236, 1, v153);
            v172 = v1[54];
            v238 = v1[46];
            if (v237 == 1)
            {
              sub_1BDD86E30(v236, &qword_1ED6F26F0);
              v239 = v1[84];
              v240 = v1[8];
            }
            else
            {
              v282 = swift_getEnumCaseMultiPayload();
              v239 = v1[84];
              v240 = v1[8];
              if (v282 == 11)
              {
                sub_1BDDA2E8C(v236, v238, type metadata accessor for Proto_TaggedValue);
                goto LABEL_117;
              }
              sub_1BDD9C3E0(v236, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v316 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v238 + v316) = qword_1EF52B518;
            swift_retain();
LABEL_117:
            sub_1BDD9C3E0(v1[78], type metadata accessor for Proto_Value);
            v317 = *(_QWORD *)(v238 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v317, v240, &qword_1ED6F3770);
            if (v148(v240, 1, v231) == 1)
            {
              v318 = v1[16];
              sub_1BE1B20E4();
              v319 = *(int *)(v231 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v318 + v319) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v240, &qword_1ED6F3770);
            }
            else
            {
              v318 = v1[16];
              sub_1BDDA2E8C(v240, v318, type metadata accessor for Proto_Value);
            }
            v320 = v1[1];
            sub_1BDD9C3E0(v238, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v321 = sub_1BDDB4FC0(v318, v320);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[62] + 8) + 8) + 8))(v321);
            if (!v239)
              goto LABEL_146;
            goto LABEL_157;
          case 6:
            v241 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v242 = v241;
            v243 = v1[28];
            sub_1BDD86DEC(v242, v243, &qword_1ED6F3770);
            v244 = v156;
            if (v148(v243, 1, v156) == 1)
              goto LABEL_166;
            v245 = v243;
            v246 = v1[79];
            sub_1BDDA2E8C(v245, v246, type metadata accessor for Proto_Value);
            v247 = *(_QWORD *)(v246 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v248 = v247;
            v249 = v1[39];
            sub_1BDD86DEC(v248, v249, &qword_1ED6F26F0);
            v250 = v154(v249, 1, v153);
            v172 = v1[55];
            v251 = v1[47];
            if (v250 == 1)
            {
              sub_1BDD86E30(v249, &qword_1ED6F26F0);
              v252 = v1[84];
              v253 = v1[9];
            }
            else
            {
              v283 = swift_getEnumCaseMultiPayload();
              v252 = v1[84];
              v253 = v1[9];
              if (v283 == 11)
              {
                sub_1BDDA2E8C(v249, v251, type metadata accessor for Proto_TaggedValue);
                goto LABEL_128;
              }
              sub_1BDD9C3E0(v249, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v322 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v251 + v322) = qword_1EF52B518;
            swift_retain();
LABEL_128:
            sub_1BDD9C3E0(v1[79], type metadata accessor for Proto_Value);
            v323 = *(_QWORD *)(v251 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v323, v253, &qword_1ED6F3770);
            if (v148(v253, 1, v244) == 1)
            {
              v324 = v1[17];
              sub_1BE1B20E4();
              v325 = *(int *)(v244 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v324 + v325) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v253, &qword_1ED6F3770);
            }
            else
            {
              v324 = v1[17];
              sub_1BDDA2E8C(v253, v324, type metadata accessor for Proto_Value);
            }
            v326 = v1[1];
            sub_1BDD9C3E0(v251, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v327 = sub_1BDDB4FC0(v324, v326);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[63] + 8) + 8) + 8))(v327);
            if (!v252)
              goto LABEL_146;
            goto LABEL_157;
          case 7:
            v254 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v255 = v254;
            v256 = v1[29];
            sub_1BDD86DEC(v255, v256, &qword_1ED6F3770);
            v257 = v156;
            if (v148(v256, 1, v156) == 1)
              goto LABEL_167;
            v258 = v256;
            v259 = v1[80];
            sub_1BDDA2E8C(v258, v259, type metadata accessor for Proto_Value);
            v260 = *(_QWORD *)(v259 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v261 = v260;
            v262 = v1[40];
            sub_1BDD86DEC(v261, v262, &qword_1ED6F26F0);
            v263 = v154(v262, 1, v153);
            v172 = v1[56];
            v264 = v1[48];
            if (v263 == 1)
            {
              sub_1BDD86E30(v262, &qword_1ED6F26F0);
              v265 = v1[84];
              v266 = v1[10];
            }
            else
            {
              v284 = swift_getEnumCaseMultiPayload();
              v265 = v1[84];
              v266 = v1[10];
              if (v284 == 11)
              {
                sub_1BDDA2E8C(v262, v264, type metadata accessor for Proto_TaggedValue);
                goto LABEL_139;
              }
              sub_1BDD9C3E0(v262, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v328 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v264 + v328) = qword_1EF52B518;
            swift_retain();
LABEL_139:
            sub_1BDD9C3E0(v1[80], type metadata accessor for Proto_Value);
            v329 = *(_QWORD *)(v264 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v329, v266, &qword_1ED6F3770);
            if (v148(v266, 1, v257) == 1)
            {
              v330 = v1[18];
              sub_1BE1B20E4();
              v331 = *(int *)(v257 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v330 + v331) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v266, &qword_1ED6F3770);
            }
            else
            {
              v330 = v1[18];
              sub_1BDDA2E8C(v266, v330, type metadata accessor for Proto_Value);
            }
            v332 = v1[1];
            sub_1BDD9C3E0(v264, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v333 = sub_1BDDB4FC0(v330, v332);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[65] + 8) + 8) + 8))(v333);
            if (v265)
              goto LABEL_157;
LABEL_146:
            swift_release();
            swift_release();
            v334 = v1[82];
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1[81] + 32))(v1[83], v172, v334);
          default:
            v267 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v268 = v1[30];
            sub_1BDD86DEC(v267, v268, &qword_1ED6F3770);
            if (v148(v268, 1, v156) == 1)
              goto LABEL_168;
            v269 = v268;
            v270 = v1[32];
            sub_1BDDA2E8C(v269, v270, type metadata accessor for Proto_Value);
            v271 = *(_QWORD *)(v270 + *(int *)(v156 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v272 = v271;
            v273 = v1[41];
            sub_1BDD86DEC(v272, v273, &qword_1ED6F26F0);
            if (v154(v273, 1, v153) == 1)
            {
              sub_1BDD86E30(v273, &qword_1ED6F26F0);
              v274 = v1[84];
              v275 = v1[21];
            }
            else
            {
              v285 = swift_getEnumCaseMultiPayload();
              v274 = v1[84];
              v275 = v1[21];
              if (v285 == 11)
              {
                sub_1BDDA2E8C(v273, v1[21], type metadata accessor for Proto_TaggedValue);
                goto LABEL_151;
              }
              sub_1BDD9C3E0(v273, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v335 = *(int *)(v1[88] + 20);
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v275 + v335) = qword_1EF52B518;
            swift_retain();
LABEL_151:
            sub_1BDD9C3E0(v270, type metadata accessor for Proto_Value);
            v336 = *(_QWORD *)(v275 + *(int *)(v1[88] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v337 = v1[31];
            sub_1BDD86DEC(v336, v337, &qword_1ED6F3770);
            v338 = v156;
            if (v148(v337, 1, v156) == 1)
            {
              v339 = v1[19];
              sub_1BE1B20E4();
              v340 = *(int *)(v338 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v339 + v340) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v337, &qword_1ED6F3770);
            }
            else
            {
              v339 = v1[19];
              sub_1BDDA2E8C(v337, v339, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v275, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            v341 = v1[1];
            swift_retain();
            v342 = sub_1BDDB4FC0(v339, v341);
            swift_release();
            AnyCRValue.init(from:)(v342, (uint64_t *)(v3 - 72));
            if (v274)
            {
LABEL_157:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            else
            {
              swift_release();
              swift_release();
              v343 = *(_QWORD *)(v3 - 72);
              v344 = (_QWORD *)v1[2];
              *v344 = v161;
              v344[1] = v343;
              v345 = v1[82];
              swift_storeEnumTagMultiPayload();
              return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(v1[81] + 32))(v1[83], v344, v345);
            }
        }
      }
      swift_retain();
      sub_1BDD9C3E0(v152, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v159 = *(int *)(v1[88] + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v157 + v159) = qword_1EF52B518;
    goto LABEL_12;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v145 = 0xD000000000000017;
  *(_QWORD *)(v145 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v145 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

void TaggedValue_8.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[77];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v128 = a1;
  v151 = a2[9];
  v125[72] = *(_QWORD *)(v151 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v125[76] = (char *)v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = *(_QWORD *)(v5 + 64);
  v125[55] = *(_QWORD *)(v134 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v125[59] = (char *)v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = *(_QWORD *)(v8 + 56);
  v125[54] = *(_QWORD *)(v133 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v125[58] = (char *)v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = *(_QWORD *)(v11 + 48);
  v125[53] = *(_QWORD *)(v132 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v125[57] = (char *)v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = *(_QWORD *)(v14 + 40);
  v125[71] = *(_QWORD *)(v131 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v125[56] = (char *)v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = *(_QWORD *)(v17 + 32);
  v125[70] = *(_QWORD *)(v130 - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v125[75] = (char *)v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = *(_QWORD *)(v20 + 24);
  v125[52] = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v18);
  v125[74] = (char *)v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v23 = MEMORY[0x1E0C80A78](v22);
  v125[62] = (char *)v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v125[61] = (char *)v125 - v25;
  v127 = type metadata accessor for Proto_Value(0);
  v125[60] = *(_QWORD *)(v127 - 8);
  v26 = MEMORY[0x1E0C80A78](v127);
  v125[40] = (char *)v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v125[47] = (char *)v125 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v125[48] = (char *)v125 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v125[46] = (char *)v125 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v125[45] = (char *)v125 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v125[44] = (char *)v125 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v125[43] = (char *)v125 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v125[42] = (char *)v125 - v41;
  MEMORY[0x1E0C80A78](v40);
  v125[41] = (char *)v125 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v44 = MEMORY[0x1E0C80A78](v43);
  v125[14] = (char *)v125 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x1E0C80A78](v44);
  v125[39] = (char *)v125 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v125[17] = (char *)v125 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v125[38] = (char *)v125 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v125[15] = (char *)v125 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v125[67] = (char *)v125 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v125[13] = (char *)v125 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v125[37] = (char *)v125 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v125[12] = (char *)v125 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v125[36] = (char *)v125 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v125[11] = (char *)v125 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v125[35] = (char *)v125 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v125[10] = (char *)v125 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v125[34] = (char *)v125 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v125[9] = (char *)v125 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v125[33] = (char *)v125 - v75;
  v76 = MEMORY[0x1E0C80A78](v74);
  v125[8] = (char *)v125 - v77;
  MEMORY[0x1E0C80A78](v76);
  v125[32] = (char *)v125 - v78;
  v126 = type metadata accessor for Proto_TaggedValue(0);
  v79 = MEMORY[0x1E0C80A78](v126);
  v125[16] = (char *)v125 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = MEMORY[0x1E0C80A78](v79);
  v125[51] = (char *)v125 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v125[25] = (char *)v125 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v125[30] = (char *)v125 - v86;
  v87 = MEMORY[0x1E0C80A78](v85);
  v125[24] = (char *)v125 - v88;
  v89 = MEMORY[0x1E0C80A78](v87);
  v125[50] = (char *)v125 - v90;
  v91 = MEMORY[0x1E0C80A78](v89);
  v125[23] = (char *)v125 - v92;
  v93 = MEMORY[0x1E0C80A78](v91);
  v125[49] = (char *)v125 - v94;
  v95 = MEMORY[0x1E0C80A78](v93);
  v125[22] = (char *)v125 - v96;
  v97 = MEMORY[0x1E0C80A78](v95);
  v125[29] = (char *)v125 - v98;
  v99 = MEMORY[0x1E0C80A78](v97);
  v125[21] = (char *)v125 - v100;
  v101 = MEMORY[0x1E0C80A78](v99);
  v125[28] = (char *)v125 - v102;
  v103 = MEMORY[0x1E0C80A78](v101);
  v125[20] = (char *)v125 - v104;
  v105 = MEMORY[0x1E0C80A78](v103);
  v125[27] = (char *)v125 - v106;
  v107 = MEMORY[0x1E0C80A78](v105);
  v125[19] = (char *)v125 - v108;
  v109 = MEMORY[0x1E0C80A78](v107);
  v125[31] = (char *)v125 - v110;
  v111 = MEMORY[0x1E0C80A78](v109);
  v125[18] = (char *)v125 - v112;
  v113 = MEMORY[0x1E0C80A78](v111);
  v125[26] = (char *)v125 - v114;
  v115 = a2[2];
  v125[69] = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v113);
  v125[73] = (char *)v125 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = a2[10];
  v118 = a2[11];
  v119 = a2[12];
  v120 = a2[13];
  v122 = a2[14];
  v121 = a2[15];
  v124 = a2[16];
  v123 = a2[17];
  v135 = v115;
  v136 = v129;
  v137 = v130;
  v138 = v131;
  v139 = v132;
  v140 = v133;
  v141 = v134;
  v142 = v151;
  v125[63] = v117;
  v143 = v117;
  v144 = v118;
  v145 = v119;
  v146 = v120;
  v147 = v122;
  v148 = v121;
  v149 = v124;
  v150 = v123;
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

void sub_1BDF75F10()
{
  TaggedValue_8.init(from:)();
}

void sub_1BDF75F60(uint64_t a1, _QWORD *a2)
{
  TaggedValue_8.encode(to:)(a1, a2);
}

void TaggedValue_8<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[39];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v41[23] = a8;
  v41[22] = a7;
  v41[21] = a6;
  v41[20] = a5;
  v41[18] = a4;
  v41[17] = a3;
  v41[25] = a1;
  v41[16] = a10;
  v41[14] = a9;
  v41[19] = *(_QWORD *)(*(_QWORD *)(a2 + 72) - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v41[15] = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[12] = *(_QWORD *)(*(_QWORD *)(v12 + 64) - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v41[11] = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[9] = *(_QWORD *)(*(_QWORD *)(v15 + 56) - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v41[8] = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[6] = *(_QWORD *)(*(_QWORD *)(v18 + 48) - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v41[5] = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v21 + 40);
  v41[4] = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v19);
  v41[3] = (char *)v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v25 + 32);
  v41[2] = *(_QWORD *)(v26 - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v41[1] = (char *)v41 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)(v29 + 24);
  v41[0] = *(_QWORD *)(v30 - 8);
  v31 = MEMORY[0x1E0C80A78](v27);
  v33 = *(_QWORD *)(v32 + 16);
  MEMORY[0x1E0C80A78](v31);
  v41[31] = v33;
  v41[32] = v30;
  v41[33] = v26;
  v41[34] = v22;
  v41[7] = v34;
  v41[35] = v34;
  v41[36] = v35;
  v41[10] = v35;
  v41[13] = v36;
  v41[37] = v36;
  v41[38] = v37;
  v41[24] = v37;
  v39 = v38[6];
  v42 = v38[5];
  v43 = v39;
  v40 = v38[8];
  v44 = v38[7];
  v45 = v40;
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF76228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 72), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF76290 + 4 * byte_1BE1BE3F8[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF76290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v1, v2, v3);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v3);
}

void sub_1BDF765B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TaggedValue_8<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32), *(_QWORD *)(a3 - 40), *(_QWORD *)(a3 - 48), *(_QWORD *)(a3 - 56), *(_QWORD *)(a3 - 64));
}

void TaggedValue_9.init(from:)()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF76688(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t inited;
  unsigned int (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int EnumCaseMultiPayload;
  uint64_t v274;
  int v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  _BYTE v351[96];

  v1[89] = a1;
  v1[88] = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  *v1 = &v351[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x1E0C80A78](v4);
  v1[49] = &v351[-v7];
  v8 = MEMORY[0x1E0C80A78](v6);
  v1[48] = &v351[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  v1[47] = &v351[-v11];
  v12 = MEMORY[0x1E0C80A78](v10);
  v1[46] = &v351[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  v1[45] = &v351[-v15];
  v16 = MEMORY[0x1E0C80A78](v14);
  v1[44] = &v351[-v17];
  v18 = MEMORY[0x1E0C80A78](v16);
  v1[43] = &v351[-v19];
  v20 = MEMORY[0x1E0C80A78](v18);
  v1[42] = &v351[-v21];
  MEMORY[0x1E0C80A78](v20);
  v1[41] = &v351[-v22];
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v24 = MEMORY[0x1E0C80A78](v23);
  v1[32] = &v351[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = MEMORY[0x1E0C80A78](v24);
  v1[31] = &v351[-v27];
  v28 = MEMORY[0x1E0C80A78](v26);
  v1[29] = &v351[-v29];
  v30 = MEMORY[0x1E0C80A78](v28);
  v1[27] = &v351[-v31];
  v32 = MEMORY[0x1E0C80A78](v30);
  v1[26] = &v351[-v33];
  v34 = MEMORY[0x1E0C80A78](v32);
  v1[25] = &v351[-v35];
  v36 = MEMORY[0x1E0C80A78](v34);
  v1[24] = &v351[-v37];
  v38 = MEMORY[0x1E0C80A78](v36);
  v1[23] = &v351[-v39];
  v40 = MEMORY[0x1E0C80A78](v38);
  v1[22] = &v351[-v41];
  v42 = MEMORY[0x1E0C80A78](v40);
  v1[21] = &v351[-v43];
  MEMORY[0x1E0C80A78](v42);
  v1[93] = &v351[-v44];
  v45 = type metadata accessor for Proto_TaggedValue(0);
  v1[96] = v45;
  v46 = MEMORY[0x1E0C80A78](v45);
  v1[39] = &v351[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = MEMORY[0x1E0C80A78](v46);
  v1[40] = &v351[-v49];
  v50 = MEMORY[0x1E0C80A78](v48);
  v1[38] = &v351[-v51];
  v52 = MEMORY[0x1E0C80A78](v50);
  v1[37] = &v351[-v53];
  v54 = MEMORY[0x1E0C80A78](v52);
  v1[36] = &v351[-v55];
  v56 = MEMORY[0x1E0C80A78](v54);
  v1[35] = &v351[-v57];
  v58 = MEMORY[0x1E0C80A78](v56);
  v1[34] = &v351[-v59];
  v60 = MEMORY[0x1E0C80A78](v58);
  v1[33] = &v351[-v61];
  v62 = MEMORY[0x1E0C80A78](v60);
  v1[30] = &v351[-v63];
  v64 = MEMORY[0x1E0C80A78](v62);
  v1[28] = &v351[-v65];
  MEMORY[0x1E0C80A78](v64);
  v1[92] = &v351[-v66];
  v67 = type metadata accessor for Proto_Value(0);
  v68 = *(_QWORD *)(v67 - 8);
  v69 = MEMORY[0x1E0C80A78](v67);
  v1[10] = &v351[-((v70 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v71 = MEMORY[0x1E0C80A78](v69);
  v1[87] = &v351[-v72];
  v73 = MEMORY[0x1E0C80A78](v71);
  v1[9] = &v351[-v74];
  v75 = MEMORY[0x1E0C80A78](v73);
  v1[86] = &v351[-v76];
  v77 = MEMORY[0x1E0C80A78](v75);
  v1[8] = &v351[-v78];
  v79 = MEMORY[0x1E0C80A78](v77);
  v1[85] = &v351[-v80];
  v81 = MEMORY[0x1E0C80A78](v79);
  v1[7] = &v351[-v82];
  v83 = MEMORY[0x1E0C80A78](v81);
  v1[84] = &v351[-v84];
  v85 = MEMORY[0x1E0C80A78](v83);
  v1[6] = &v351[-v86];
  v87 = MEMORY[0x1E0C80A78](v85);
  v1[83] = &v351[-v88];
  v89 = MEMORY[0x1E0C80A78](v87);
  v1[5] = &v351[-v90];
  v91 = MEMORY[0x1E0C80A78](v89);
  v1[82] = &v351[-v92];
  v93 = MEMORY[0x1E0C80A78](v91);
  v1[4] = &v351[-v94];
  v95 = MEMORY[0x1E0C80A78](v93);
  v1[81] = &v351[-v96];
  v97 = MEMORY[0x1E0C80A78](v95);
  v1[3] = &v351[-v98];
  v99 = MEMORY[0x1E0C80A78](v97);
  v1[80] = &v351[-v100];
  v101 = MEMORY[0x1E0C80A78](v99);
  v1[2] = &v351[-v102];
  v103 = MEMORY[0x1E0C80A78](v101);
  v1[79] = &v351[-v104];
  v105 = MEMORY[0x1E0C80A78](v103);
  v1[1] = &v351[-v106];
  v107 = MEMORY[0x1E0C80A78](v105);
  v1[78] = &v351[-v108];
  MEMORY[0x1E0C80A78](v107);
  v1[95] = &v351[-v109];
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v111 = MEMORY[0x1E0C80A78](v110);
  v1[77] = &v351[-((v112 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v113 = MEMORY[0x1E0C80A78](v111);
  v1[20] = &v351[-v114];
  v115 = MEMORY[0x1E0C80A78](v113);
  v1[76] = &v351[-v116];
  v117 = MEMORY[0x1E0C80A78](v115);
  v1[19] = &v351[-v118];
  v119 = MEMORY[0x1E0C80A78](v117);
  v1[75] = &v351[-v120];
  v121 = MEMORY[0x1E0C80A78](v119);
  v1[18] = &v351[-v122];
  v123 = MEMORY[0x1E0C80A78](v121);
  v1[74] = &v351[-v124];
  v125 = MEMORY[0x1E0C80A78](v123);
  v1[17] = &v351[-v126];
  v127 = MEMORY[0x1E0C80A78](v125);
  v1[73] = &v351[-v128];
  v129 = MEMORY[0x1E0C80A78](v127);
  v1[16] = &v351[-v130];
  v131 = MEMORY[0x1E0C80A78](v129);
  v1[72] = &v351[-v132];
  v133 = MEMORY[0x1E0C80A78](v131);
  v1[15] = &v351[-v134];
  v135 = MEMORY[0x1E0C80A78](v133);
  v1[71] = &v351[-v136];
  v137 = MEMORY[0x1E0C80A78](v135);
  v1[14] = &v351[-v138];
  v139 = MEMORY[0x1E0C80A78](v137);
  v1[70] = &v351[-v140];
  v141 = MEMORY[0x1E0C80A78](v139);
  v1[13] = &v351[-v142];
  v143 = MEMORY[0x1E0C80A78](v141);
  v1[69] = &v351[-v144];
  v145 = MEMORY[0x1E0C80A78](v143);
  v1[12] = &v351[-v146];
  v147 = MEMORY[0x1E0C80A78](v145);
  v1[68] = &v351[-v148];
  v149 = MEMORY[0x1E0C80A78](v147);
  v1[11] = &v351[-v150];
  v151 = MEMORY[0x1E0C80A78](v149);
  v153 = &v351[-v152];
  MEMORY[0x1E0C80A78](v151);
  v155 = &v351[-v154];
  v156 = v2;
  v157 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v157, (uint64_t)v155, &qword_1ED6F3770);
  v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  LODWORD(v68) = v158((uint64_t)v155, 1, v67);
  sub_1BDD86E30((uint64_t)v155, &qword_1ED6F3770);
  if ((_DWORD)v68 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v156;
    sub_1BDD86DEC(v157, (uint64_t)v153, &qword_1ED6F3770);
    v161 = v158;
    if (v158((uint64_t)v153, 1, v67) == 1)
    {
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
      JUMPOUT(0x1BDF79168);
    }
    v162 = v156;
    v163 = (uint64_t)v153;
    v164 = v1[95];
    sub_1BDDA2E8C(v163, v164, type metadata accessor for Proto_Value);
    v1[91] = v67;
    v165 = *(_QWORD *)(v164 + *(int *)(v67 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v166 = v1[93];
    sub_1BDD86DEC(v165, v166, &qword_1ED6F26F0);
    v167 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v168 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 48);
    if (v168(v166, 1, v167) == 1)
    {
      swift_retain();
      sub_1BDD86E30(v166, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        v169 = v166;
        v170 = v1[92];
        sub_1BDDA2E8C(v169, v170, type metadata accessor for Proto_TaggedValue);
LABEL_12:
        swift_retain();
        sub_1BDD9C3E0(v1[95], type metadata accessor for Proto_Value);
        v172 = *(_QWORD *)(v170 + *(int *)(v1[96] + 20));
        swift_beginAccess();
        v173 = v170;
        v174 = *(_QWORD *)(v172 + 16);
        sub_1BDD9C3E0(v173, type metadata accessor for Proto_TaggedValue);
        switch(v174)
        {
          case 0:
            v175 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v176 = v1[11];
            sub_1BDD86DEC(v175, v176, &qword_1ED6F3770);
            v177 = v1[91];
            if (v161(v176, 1, v177) == 1)
              goto LABEL_176;
            v178 = v176;
            v179 = v1[78];
            sub_1BDDA2E8C(v178, v179, type metadata accessor for Proto_Value);
            v180 = *(_QWORD *)(v179 + *(int *)(v177 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v181 = v1[21];
            sub_1BDD86DEC(v180, v181, &qword_1ED6F26F0);
            if (v168(v181, 1, v167) == 1)
            {
              sub_1BDD86E30(v181, &qword_1ED6F26F0);
              v182 = v1[94];
              v183 = v1[28];
              v184 = v1[68];
            }
            else
            {
              EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              v182 = v1[94];
              v183 = v1[28];
              v184 = v1[68];
              if (EnumCaseMultiPayload == 11)
              {
                sub_1BDDA2E8C(v181, v1[28], type metadata accessor for Proto_TaggedValue);
                v274 = v1[1];
                goto LABEL_67;
              }
              sub_1BDD9C3E0(v181, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v293 = *(int *)(v1[96] + 20);
            v274 = v1[1];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v183 + v293) = qword_1EF52B518;
            swift_retain();
LABEL_67:
            sub_1BDD9C3E0(v1[78], type metadata accessor for Proto_Value);
            v294 = *(_QWORD *)(v183 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v294, v184, &qword_1ED6F3770);
            v295 = v1[91];
            if (v161(v184, 1, v295) == 1)
            {
              sub_1BE1B20E4();
              v296 = *(int *)(v295 + 20);
              v297 = v1[41];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v274 + v296) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[68], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v184, v274, type metadata accessor for Proto_Value);
              v297 = v1[41];
            }
            sub_1BDD9C3E0(v183, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v298 = sub_1BDDB4FC0(v274, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[50] + 8) + 8) + 8))(v298);
            if (v182)
              goto LABEL_172;
            goto LABEL_161;
          case 1:
            v185 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v186 = v1[12];
            sub_1BDD86DEC(v185, v186, &qword_1ED6F3770);
            v187 = v1[91];
            if (v161(v186, 1, v187) == 1)
              goto LABEL_177;
            v188 = v186;
            v189 = v1[79];
            sub_1BDDA2E8C(v188, v189, type metadata accessor for Proto_Value);
            v190 = *(_QWORD *)(v189 + *(int *)(v187 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v191 = v1[22];
            sub_1BDD86DEC(v190, v191, &qword_1ED6F26F0);
            if (v168(v191, 1, v167) == 1)
            {
              sub_1BDD86E30(v191, &qword_1ED6F26F0);
              v192 = v1[94];
              v193 = v1[30];
              v194 = v1[69];
            }
            else
            {
              v275 = swift_getEnumCaseMultiPayload();
              v192 = v1[94];
              v193 = v1[30];
              v194 = v1[69];
              if (v275 == 11)
              {
                sub_1BDDA2E8C(v191, v1[30], type metadata accessor for Proto_TaggedValue);
                v276 = v1[2];
                goto LABEL_78;
              }
              sub_1BDD9C3E0(v191, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v299 = *(int *)(v1[96] + 20);
            v276 = v1[2];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v193 + v299) = qword_1EF52B518;
            swift_retain();
LABEL_78:
            sub_1BDD9C3E0(v1[79], type metadata accessor for Proto_Value);
            v300 = *(_QWORD *)(v193 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v300, v194, &qword_1ED6F3770);
            v301 = v1[91];
            if (v161(v194, 1, v301) == 1)
            {
              sub_1BE1B20E4();
              v302 = *(int *)(v301 + 20);
              v297 = v1[42];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v276 + v302) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[69], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v194, v276, type metadata accessor for Proto_Value);
              v297 = v1[42];
            }
            sub_1BDD9C3E0(v193, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v303 = sub_1BDDB4FC0(v276, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[51] + 8) + 8) + 8))(v303);
            if (!v192)
              goto LABEL_161;
            goto LABEL_172;
          case 2:
            v195 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v196 = v1[13];
            sub_1BDD86DEC(v195, v196, &qword_1ED6F3770);
            v197 = v1[91];
            if (v161(v196, 1, v197) == 1)
              goto LABEL_178;
            v198 = v196;
            v199 = v1[80];
            sub_1BDDA2E8C(v198, v199, type metadata accessor for Proto_Value);
            v200 = *(_QWORD *)(v199 + *(int *)(v197 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v201 = v1[23];
            sub_1BDD86DEC(v200, v201, &qword_1ED6F26F0);
            if (v168(v201, 1, v167) == 1)
            {
              sub_1BDD86E30(v201, &qword_1ED6F26F0);
              v202 = v1[94];
              v203 = v1[33];
              v204 = v1[70];
            }
            else
            {
              v277 = swift_getEnumCaseMultiPayload();
              v202 = v1[94];
              v203 = v1[33];
              v204 = v1[70];
              if (v277 == 11)
              {
                sub_1BDDA2E8C(v201, v1[33], type metadata accessor for Proto_TaggedValue);
                v278 = v1[3];
                goto LABEL_89;
              }
              sub_1BDD9C3E0(v201, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v304 = *(int *)(v1[96] + 20);
            v278 = v1[3];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v203 + v304) = qword_1EF52B518;
            swift_retain();
LABEL_89:
            sub_1BDD9C3E0(v1[80], type metadata accessor for Proto_Value);
            v305 = *(_QWORD *)(v203 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v305, v204, &qword_1ED6F3770);
            v306 = v1[91];
            if (v161(v204, 1, v306) == 1)
            {
              sub_1BE1B20E4();
              v307 = *(int *)(v306 + 20);
              v297 = v1[43];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v278 + v307) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[70], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v204, v278, type metadata accessor for Proto_Value);
              v297 = v1[43];
            }
            sub_1BDD9C3E0(v203, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v308 = sub_1BDDB4FC0(v278, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[52] + 8) + 8) + 8))(v308);
            if (!v202)
              goto LABEL_161;
            goto LABEL_172;
          case 3:
            v205 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v206 = v1[14];
            sub_1BDD86DEC(v205, v206, &qword_1ED6F3770);
            v207 = v1[91];
            if (v161(v206, 1, v207) == 1)
              goto LABEL_179;
            v208 = v206;
            v209 = v1[81];
            sub_1BDDA2E8C(v208, v209, type metadata accessor for Proto_Value);
            v210 = *(_QWORD *)(v209 + *(int *)(v207 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v211 = v1[24];
            sub_1BDD86DEC(v210, v211, &qword_1ED6F26F0);
            if (v168(v211, 1, v167) == 1)
            {
              sub_1BDD86E30(v211, &qword_1ED6F26F0);
              v212 = v1[94];
              v213 = v1[34];
              v214 = v1[71];
            }
            else
            {
              v279 = swift_getEnumCaseMultiPayload();
              v212 = v1[94];
              v213 = v1[34];
              v214 = v1[71];
              if (v279 == 11)
              {
                sub_1BDDA2E8C(v211, v1[34], type metadata accessor for Proto_TaggedValue);
                v280 = v1[4];
                goto LABEL_100;
              }
              sub_1BDD9C3E0(v211, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v309 = *(int *)(v1[96] + 20);
            v280 = v1[4];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v213 + v309) = qword_1EF52B518;
            swift_retain();
LABEL_100:
            sub_1BDD9C3E0(v1[81], type metadata accessor for Proto_Value);
            v310 = *(_QWORD *)(v213 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v310, v214, &qword_1ED6F3770);
            v311 = v1[91];
            if (v161(v214, 1, v311) == 1)
            {
              sub_1BE1B20E4();
              v312 = *(int *)(v311 + 20);
              v297 = v1[44];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v280 + v312) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[71], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v214, v280, type metadata accessor for Proto_Value);
              v297 = v1[44];
            }
            sub_1BDD9C3E0(v213, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v313 = sub_1BDDB4FC0(v280, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[53] + 8) + 8) + 8))(v313);
            if (!v212)
              goto LABEL_161;
            goto LABEL_172;
          case 4:
            v215 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v216 = v1[15];
            sub_1BDD86DEC(v215, v216, &qword_1ED6F3770);
            v217 = v1[91];
            if (v161(v216, 1, v217) == 1)
              goto LABEL_180;
            v218 = v216;
            v219 = v1[82];
            sub_1BDDA2E8C(v218, v219, type metadata accessor for Proto_Value);
            v220 = *(_QWORD *)(v219 + *(int *)(v217 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v221 = v1[25];
            sub_1BDD86DEC(v220, v221, &qword_1ED6F26F0);
            if (v168(v221, 1, v167) == 1)
            {
              sub_1BDD86E30(v221, &qword_1ED6F26F0);
              v222 = v1[94];
              v223 = v1[35];
              v224 = v1[72];
            }
            else
            {
              v281 = swift_getEnumCaseMultiPayload();
              v222 = v1[94];
              v223 = v1[35];
              v224 = v1[72];
              if (v281 == 11)
              {
                sub_1BDDA2E8C(v221, v1[35], type metadata accessor for Proto_TaggedValue);
                v282 = v1[5];
                goto LABEL_111;
              }
              sub_1BDD9C3E0(v221, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v314 = *(int *)(v1[96] + 20);
            v282 = v1[5];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v223 + v314) = qword_1EF52B518;
            swift_retain();
LABEL_111:
            sub_1BDD9C3E0(v1[82], type metadata accessor for Proto_Value);
            v315 = *(_QWORD *)(v223 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v315, v224, &qword_1ED6F3770);
            v316 = v1[91];
            if (v161(v224, 1, v316) == 1)
            {
              sub_1BE1B20E4();
              v317 = *(int *)(v316 + 20);
              v297 = v1[45];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v282 + v317) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[72], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v224, v282, type metadata accessor for Proto_Value);
              v297 = v1[45];
            }
            sub_1BDD9C3E0(v223, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v318 = sub_1BDDB4FC0(v282, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[54] + 8) + 8) + 8))(v318);
            if (!v222)
              goto LABEL_161;
            goto LABEL_172;
          case 5:
            v225 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v226 = v1[16];
            sub_1BDD86DEC(v225, v226, &qword_1ED6F3770);
            v227 = v1[91];
            if (v161(v226, 1, v227) == 1)
              goto LABEL_181;
            v228 = v226;
            v229 = v1[83];
            sub_1BDDA2E8C(v228, v229, type metadata accessor for Proto_Value);
            v230 = *(_QWORD *)(v229 + *(int *)(v227 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v231 = v1[26];
            sub_1BDD86DEC(v230, v231, &qword_1ED6F26F0);
            if (v168(v231, 1, v167) == 1)
            {
              sub_1BDD86E30(v231, &qword_1ED6F26F0);
              v232 = v1[94];
              v233 = v1[36];
              v234 = v1[73];
            }
            else
            {
              v283 = swift_getEnumCaseMultiPayload();
              v232 = v1[94];
              v233 = v1[36];
              v234 = v1[73];
              if (v283 == 11)
              {
                sub_1BDDA2E8C(v231, v1[36], type metadata accessor for Proto_TaggedValue);
                v284 = v1[6];
                goto LABEL_122;
              }
              sub_1BDD9C3E0(v231, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v319 = *(int *)(v1[96] + 20);
            v284 = v1[6];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v233 + v319) = qword_1EF52B518;
            swift_retain();
LABEL_122:
            sub_1BDD9C3E0(v1[83], type metadata accessor for Proto_Value);
            v320 = *(_QWORD *)(v233 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v320, v234, &qword_1ED6F3770);
            v321 = v1[91];
            if (v161(v234, 1, v321) == 1)
            {
              sub_1BE1B20E4();
              v322 = *(int *)(v321 + 20);
              v297 = v1[46];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v284 + v322) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[73], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v234, v284, type metadata accessor for Proto_Value);
              v297 = v1[46];
            }
            sub_1BDD9C3E0(v233, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v323 = sub_1BDDB4FC0(v284, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[55] + 8) + 8) + 8))(v323);
            if (!v232)
              goto LABEL_161;
            goto LABEL_172;
          case 6:
            v235 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v236 = v1[17];
            sub_1BDD86DEC(v235, v236, &qword_1ED6F3770);
            v237 = v1[91];
            if (v161(v236, 1, v237) == 1)
              goto LABEL_182;
            v238 = v236;
            v239 = v1[84];
            sub_1BDDA2E8C(v238, v239, type metadata accessor for Proto_Value);
            v240 = *(_QWORD *)(v239 + *(int *)(v237 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v241 = v1[27];
            sub_1BDD86DEC(v240, v241, &qword_1ED6F26F0);
            if (v168(v241, 1, v167) == 1)
            {
              sub_1BDD86E30(v241, &qword_1ED6F26F0);
              v242 = v1[94];
              v243 = v1[37];
              v244 = v1[74];
            }
            else
            {
              v285 = swift_getEnumCaseMultiPayload();
              v242 = v1[94];
              v243 = v1[37];
              v244 = v1[74];
              if (v285 == 11)
              {
                sub_1BDDA2E8C(v241, v1[37], type metadata accessor for Proto_TaggedValue);
                v286 = v1[7];
                goto LABEL_133;
              }
              sub_1BDD9C3E0(v241, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v324 = *(int *)(v1[96] + 20);
            v286 = v1[7];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v243 + v324) = qword_1EF52B518;
            swift_retain();
LABEL_133:
            sub_1BDD9C3E0(v1[84], type metadata accessor for Proto_Value);
            v325 = *(_QWORD *)(v243 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v325, v244, &qword_1ED6F3770);
            v326 = v1[91];
            if (v161(v244, 1, v326) == 1)
            {
              sub_1BE1B20E4();
              v327 = *(int *)(v326 + 20);
              v297 = v1[47];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v286 + v327) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[74], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v244, v286, type metadata accessor for Proto_Value);
              v297 = v1[47];
            }
            sub_1BDD9C3E0(v243, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v328 = sub_1BDDB4FC0(v286, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[56] + 8) + 8) + 8))(v328);
            if (!v242)
              goto LABEL_161;
            goto LABEL_172;
          case 7:
            v245 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v246 = v1[18];
            sub_1BDD86DEC(v245, v246, &qword_1ED6F3770);
            v247 = v1[91];
            if (v161(v246, 1, v247) == 1)
              goto LABEL_183;
            v248 = v246;
            v249 = v1[85];
            sub_1BDDA2E8C(v248, v249, type metadata accessor for Proto_Value);
            v250 = *(_QWORD *)(v249 + *(int *)(v247 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v251 = v1[29];
            sub_1BDD86DEC(v250, v251, &qword_1ED6F26F0);
            if (v168(v251, 1, v167) == 1)
            {
              sub_1BDD86E30(v251, &qword_1ED6F26F0);
              v252 = v1[94];
              v253 = v1[38];
              v254 = v1[75];
            }
            else
            {
              v287 = swift_getEnumCaseMultiPayload();
              v252 = v1[94];
              v253 = v1[38];
              v254 = v1[75];
              if (v287 == 11)
              {
                sub_1BDDA2E8C(v251, v1[38], type metadata accessor for Proto_TaggedValue);
                v288 = v1[8];
                goto LABEL_144;
              }
              sub_1BDD9C3E0(v251, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v329 = *(int *)(v1[96] + 20);
            v288 = v1[8];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v253 + v329) = qword_1EF52B518;
            swift_retain();
LABEL_144:
            sub_1BDD9C3E0(v1[85], type metadata accessor for Proto_Value);
            v330 = *(_QWORD *)(v253 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v330, v254, &qword_1ED6F3770);
            v331 = v1[91];
            if (v161(v254, 1, v331) == 1)
            {
              sub_1BE1B20E4();
              v332 = *(int *)(v331 + 20);
              v297 = v1[48];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v288 + v332) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[75], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v254, v288, type metadata accessor for Proto_Value);
              v297 = v1[48];
            }
            sub_1BDD9C3E0(v253, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v333 = sub_1BDDB4FC0(v288, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[59] + 8) + 8) + 8))(v333);
            if (!v252)
              goto LABEL_161;
            goto LABEL_172;
          case 8:
            v255 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v256 = v1[19];
            sub_1BDD86DEC(v255, v256, &qword_1ED6F3770);
            v257 = v1[91];
            if (v161(v256, 1, v257) == 1)
              goto LABEL_184;
            v258 = v256;
            v259 = v1[86];
            sub_1BDDA2E8C(v258, v259, type metadata accessor for Proto_Value);
            v260 = *(_QWORD *)(v259 + *(int *)(v257 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v261 = v1[31];
            sub_1BDD86DEC(v260, v261, &qword_1ED6F26F0);
            if (v168(v261, 1, v167) == 1)
            {
              sub_1BDD86E30(v261, &qword_1ED6F26F0);
              v262 = v1[94];
              v263 = v1[40];
              v264 = v1[76];
            }
            else
            {
              v289 = swift_getEnumCaseMultiPayload();
              v262 = v1[94];
              v263 = v1[40];
              v264 = v1[76];
              if (v289 == 11)
              {
                sub_1BDDA2E8C(v261, v1[40], type metadata accessor for Proto_TaggedValue);
                v290 = v1[9];
                goto LABEL_155;
              }
              sub_1BDD9C3E0(v261, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v334 = *(int *)(v1[96] + 20);
            v290 = v1[9];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v263 + v334) = qword_1EF52B518;
            swift_retain();
LABEL_155:
            sub_1BDD9C3E0(v1[86], type metadata accessor for Proto_Value);
            v335 = *(_QWORD *)(v263 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1BDD86DEC(v335, v264, &qword_1ED6F3770);
            v336 = v1[91];
            if (v161(v264, 1, v336) == 1)
            {
              sub_1BE1B20E4();
              v337 = *(int *)(v336 + 20);
              v297 = v1[49];
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v290 + v337) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[76], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v264, v290, type metadata accessor for Proto_Value);
              v297 = v1[49];
            }
            sub_1BDD9C3E0(v263, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v338 = sub_1BDDB4FC0(v290, v162);
            swift_release();
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1[60] + 8) + 8) + 8))(v338);
            if (v262)
              goto LABEL_172;
LABEL_161:
            swift_release();
            swift_release();
            v339 = v1[89];
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v1[88] + 32))(v1[90], v297, v339);
          default:
            v1[95] = inited;
            v265 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            v266 = v1[20];
            sub_1BDD86DEC(v265, v266, &qword_1ED6F3770);
            v267 = v1[91];
            if (v161(v266, 1, v267) == 1)
              goto LABEL_185;
            v268 = v266;
            v269 = v1[87];
            sub_1BDDA2E8C(v268, v269, type metadata accessor for Proto_Value);
            v270 = *(_QWORD *)(v269 + *(int *)(v267 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            v271 = v1[32];
            sub_1BDD86DEC(v270, v271, &qword_1ED6F26F0);
            if (v168(v271, 1, v167) == 1)
            {
              sub_1BDD86E30(v271, &qword_1ED6F26F0);
              v272 = v1[39];
            }
            else
            {
              v291 = swift_getEnumCaseMultiPayload();
              v272 = v1[39];
              if (v291 == 11)
              {
                sub_1BDDA2E8C(v271, v1[39], type metadata accessor for Proto_TaggedValue);
                v292 = v1[10];
                goto LABEL_166;
              }
              sub_1BDD9C3E0(v271, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1BE1B20E4();
            v341 = *(int *)(v1[96] + 20);
            v292 = v1[10];
            if (qword_1EF52B520 != -1)
              swift_once();
            *(_QWORD *)(v272 + v341) = qword_1EF52B518;
            swift_retain();
LABEL_166:
            sub_1BDD9C3E0(v1[87], type metadata accessor for Proto_Value);
            v342 = *(_QWORD *)(v272 + *(int *)(v1[96] + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            v343 = v1[77];
            sub_1BDD86DEC(v342, v343, &qword_1ED6F3770);
            v344 = v1[91];
            if (v161(v343, 1, v344) == 1)
            {
              sub_1BE1B20E4();
              v345 = *(int *)(v344 + 20);
              if (qword_1ED6F2718 != -1)
                swift_once();
              *(_QWORD *)(v292 + v345) = qword_1ED6F2708;
              swift_retain();
              sub_1BDD86E30(v1[77], &qword_1ED6F3770);
            }
            else
            {
              sub_1BDDA2E8C(v343, v292, type metadata accessor for Proto_Value);
            }
            sub_1BDD9C3E0(v272, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            v346 = sub_1BDDB4FC0(v292, v162);
            swift_release();
            v347 = v1[94];
            AnyCRValue.init(from:)(v346, (uint64_t *)(v3 - 72));
            if (v347)
            {
LABEL_172:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            swift_release();
            swift_release();
            v348 = *(_QWORD *)(v3 - 72);
            v349 = (_QWORD *)*v1;
            *v349 = v174;
            v349[1] = v348;
            v350 = v1[89];
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(v1[88] + 32))(v1[90], v349, v350);
        }
      }
      swift_retain();
      sub_1BDD9C3E0(v166, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v170 = v1[92];
    sub_1BE1B20E4();
    v171 = *(int *)(v1[96] + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v170 + v171) = qword_1EF52B518;
    goto LABEL_12;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v159 = 0xD000000000000017;
  *(_QWORD *)(v159 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v159 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

void TaggedValue_9.encode(to:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[86];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;

  v142 = a1;
  v149 = a2[10];
  v139[78] = *(_QWORD *)(v149 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v139[85] = (char *)v139 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = *(_QWORD *)(v5 + 72);
  v139[77] = *(_QWORD *)(v148 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v139[84] = (char *)v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = *(_QWORD *)(v8 + 64);
  v139[76] = *(_QWORD *)(v147 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v139[83] = (char *)v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = *(_QWORD *)(v11 + 56);
  v139[75] = *(_QWORD *)(v146 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v139[82] = (char *)v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = *(_QWORD *)(v14 + 48);
  v139[74] = *(_QWORD *)(v145 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v139[81] = (char *)v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = *(_QWORD *)(v17 + 40);
  v139[73] = *(_QWORD *)(v144 - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v139[80] = (char *)v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = *(_QWORD *)(v20 + 32);
  v139[72] = *(_QWORD *)(v168 - 8);
  v21 = MEMORY[0x1E0C80A78](v18);
  v139[71] = (char *)v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = *(_QWORD *)(v23 + 24);
  v139[70] = *(_QWORD *)(v143 - 8);
  MEMORY[0x1E0C80A78](v21);
  v139[79] = (char *)v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v26 = MEMORY[0x1E0C80A78](v25);
  v139[61] = (char *)v139 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v139[62] = (char *)v139 - v28;
  v141 = type metadata accessor for Proto_Value(0);
  v139[60] = *(_QWORD *)(v141 - 8);
  v29 = MEMORY[0x1E0C80A78](v141);
  v139[42] = (char *)v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v139[49] = (char *)v139 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v139[48] = (char *)v139 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v139[47] = (char *)v139 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v139[46] = (char *)v139 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v139[45] = (char *)v139 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v139[44] = (char *)v139 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v139[51] = (char *)v139 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v139[43] = (char *)v139 - v46;
  MEMORY[0x1E0C80A78](v45);
  v139[50] = (char *)v139 - v47;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v49 = MEMORY[0x1E0C80A78](v48);
  v139[17] = (char *)v139 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = MEMORY[0x1E0C80A78](v49);
  v139[41] = (char *)v139 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v139[19] = (char *)v139 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v139[40] = (char *)v139 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v139[18] = (char *)v139 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v139[39] = (char *)v139 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v139[16] = (char *)v139 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v139[38] = (char *)v139 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v139[15] = (char *)v139 - v66;
  v67 = MEMORY[0x1E0C80A78](v65);
  v139[37] = (char *)v139 - v68;
  v69 = MEMORY[0x1E0C80A78](v67);
  v139[14] = (char *)v139 - v70;
  v71 = MEMORY[0x1E0C80A78](v69);
  v139[68] = (char *)v139 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  v139[13] = (char *)v139 - v74;
  v75 = MEMORY[0x1E0C80A78](v73);
  v139[36] = (char *)v139 - v76;
  v77 = MEMORY[0x1E0C80A78](v75);
  v139[12] = (char *)v139 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v139[35] = (char *)v139 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v139[11] = (char *)v139 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v139[34] = (char *)v139 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v139[10] = (char *)v139 - v86;
  MEMORY[0x1E0C80A78](v85);
  v139[33] = (char *)v139 - v87;
  v140 = type metadata accessor for Proto_TaggedValue(0);
  v88 = MEMORY[0x1E0C80A78](v140);
  v139[9] = (char *)v139 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = MEMORY[0x1E0C80A78](v88);
  v139[57] = (char *)v139 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v139[28] = (char *)v139 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v139[56] = (char *)v139 - v95;
  v96 = MEMORY[0x1E0C80A78](v94);
  v139[27] = (char *)v139 - v97;
  v98 = MEMORY[0x1E0C80A78](v96);
  v139[55] = (char *)v139 - v99;
  v100 = MEMORY[0x1E0C80A78](v98);
  v139[26] = (char *)v139 - v101;
  v102 = MEMORY[0x1E0C80A78](v100);
  v139[32] = (char *)v139 - v103;
  v104 = MEMORY[0x1E0C80A78](v102);
  v139[25] = (char *)v139 - v105;
  v106 = MEMORY[0x1E0C80A78](v104);
  v139[31] = (char *)v139 - v107;
  v108 = MEMORY[0x1E0C80A78](v106);
  v139[20] = (char *)v139 - v109;
  v110 = MEMORY[0x1E0C80A78](v108);
  v139[54] = (char *)v139 - v111;
  v112 = MEMORY[0x1E0C80A78](v110);
  v139[24] = (char *)v139 - v113;
  v114 = MEMORY[0x1E0C80A78](v112);
  v139[30] = (char *)v139 - v115;
  v116 = MEMORY[0x1E0C80A78](v114);
  v139[23] = (char *)v139 - v117;
  v118 = MEMORY[0x1E0C80A78](v116);
  v139[29] = (char *)v139 - v119;
  v120 = MEMORY[0x1E0C80A78](v118);
  v139[22] = (char *)v139 - v121;
  v122 = MEMORY[0x1E0C80A78](v120);
  v139[53] = (char *)v139 - v123;
  v124 = MEMORY[0x1E0C80A78](v122);
  v139[21] = (char *)v139 - v125;
  v126 = MEMORY[0x1E0C80A78](v124);
  v139[52] = (char *)v139 - v127;
  v128 = a2[2];
  v139[58] = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v126);
  v139[59] = (char *)v139 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = a2[11];
  v131 = a2[12];
  v133 = a2[13];
  v132 = a2[14];
  v134 = a2[15];
  v135 = a2[16];
  v136 = a2[17];
  v137 = a2[18];
  v138 = a2[19];
  v150 = v128;
  v151 = v143;
  v152 = v168;
  v153 = v144;
  v154 = v145;
  v155 = v146;
  v156 = v147;
  v157 = v148;
  v158 = v149;
  v159 = v130;
  v139[63] = v130;
  v139[64] = v131;
  v160 = v131;
  v161 = v133;
  v162 = v132;
  v163 = v134;
  v164 = v135;
  v165 = v136;
  v166 = v137;
  v167 = v138;
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

void sub_1BDF79E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v0;
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 640) + 32))(*(_QWORD *)(v2 - 632), v1, *(_QWORD *)(v2 - 1040));
  v4 = *(_QWORD *)(v2 - 400) + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + *(int *)(*(_QWORD *)(v2 - 408) + 20))
     + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v6 = v5;
  v7 = *(_QWORD *)(v2 - 840);
  sub_1BDD86DEC(v6, v7, &qword_1ED6F26F0);
  v8 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  if (v9(v7, 1, v8) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v7, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      v10 = *(_QWORD *)(v2 - 688);
      sub_1BDDA2E8C(v7, v10, type metadata accessor for Proto_TaggedValue);
      swift_retain();
      v11 = *(_QWORD *)(v2 - 416);
      goto LABEL_9;
    }
    swift_retain();
    sub_1BDD9C3E0(v7, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v10 = *(_QWORD *)(v2 - 688);
  sub_1BE1B20E4();
  v11 = *(_QWORD *)(v2 - 416);
  v12 = *(int *)(v11 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v11 = *(_QWORD *)(v2 - 416);
  }
  *(_QWORD *)(v10 + v12) = qword_1EF52B518;
  swift_retain();
LABEL_9:
  v13 = *(int *)(v11 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v14 = swift_retain();
    v15 = sub_1BE138794(v14);
    v10 = *(_QWORD *)(v2 - 688);
    *(_QWORD *)(v10 + v13) = v15;
    swift_release();
  }
  v16 = *(_QWORD *)(v10 + v13);
  swift_beginAccess();
  *(_QWORD *)(v16 + 16) = 0;
  sub_1BE12A434(v10);
  v17 = swift_endAccess();
  MEMORY[0x1E0C80A78](v17);
  v18 = *(_QWORD *)(v2 - 1040);
  v19 = *(_QWORD *)(v2 - 632);
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDF7E8B8, *(_QWORD *)(v2 - 704));
  if (v3)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 640) + 8))(v19, v18);
    goto LABEL_24;
  }
  *(_QWORD *)(v2 - 456) = 0;
  swift_beginAccess();
  v20 = *(_QWORD *)(v4 + *(int *)(*(_QWORD *)(v2 - 408) + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v21 = v20;
  v22 = *(_QWORD *)(v2 - 1024);
  sub_1BDD86DEC(v21, v22, &qword_1ED6F26F0);
  v23 = v9(v22, 1, v8);
  v24 = *(_QWORD *)(v2 - 640);
  if (v23 == 1)
  {
    sub_1BDD86E30(v22, &qword_1ED6F26F0);
    v25 = *(_QWORD *)(v2 - 616);
    v26 = *(_QWORD *)(v2 - 624);
    v27 = *(_QWORD *)(v2 - 632);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v26 = *(_QWORD *)(v2 - 624);
    v27 = *(_QWORD *)(v2 - 632);
    if (EnumCaseMultiPayload == 11)
    {
      v29 = *(_QWORD *)(v2 - 936);
      sub_1BDDA2E8C(v22, v29, type metadata accessor for Proto_TaggedValue);
      v25 = *(_QWORD *)(v2 - 616);
      v30 = *(_QWORD *)(v2 - 416);
LABEL_21:
      v32 = *(int *)(v30 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        v33 = swift_retain();
        v34 = sub_1BE138794(v33);
        v29 = *(_QWORD *)(v2 - 936);
        *(_QWORD *)(v29 + v32) = v34;
        swift_release();
      }
      v35 = *(_QWORD *)(v29 + v32);
      v36 = *(_QWORD *)(v2 - 608);
      sub_1BDDA2E8C(*(_QWORD *)(v2 - 704), v36, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v26 + 56))(v36, 0, 1, *(_QWORD *)(v2 - 408));
      sub_1BDEFF368(v36, v25);
      v37 = v35
          + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1BDEFF3B0(v25, v37);
      swift_endAccess();
      swift_release();
      sub_1BE12A434(v29);
      swift_endAccess();
      swift_release();
      (*(void (**)(uint64_t, _QWORD))(v24 + 8))(v27, *(_QWORD *)(v2 - 1040));
LABEL_24:
      JUMPOUT(0x1BDF79D00);
    }
    sub_1BDD9C3E0(v22, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v25 = *(_QWORD *)(v2 - 616);
  }
  v29 = *(_QWORD *)(v2 - 936);
  sub_1BE1B20E4();
  v30 = *(_QWORD *)(v2 - 416);
  v31 = *(int *)(v30 + 20);
  if (qword_1EF52B520 != -1)
  {
    swift_once();
    v30 = *(_QWORD *)(v2 - 416);
  }
  *(_QWORD *)(v29 + v31) = qword_1EF52B518;
  swift_retain();
  goto LABEL_21;
}

void sub_1BDF7D7CC()
{
  TaggedValue_9.init(from:)();
}

void sub_1BDF7D824(uint64_t a1, _QWORD *a2)
{
  TaggedValue_9.encode(to:)(a1, a2);
}

void TaggedValue_9<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[44];
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v47[28] = a8;
  v47[27] = a7;
  v47[25] = a6;
  v47[24] = a5;
  v47[23] = a4;
  v47[22] = a3;
  v47[29] = a1;
  v47[20] = a11;
  v47[19] = a10;
  v47[17] = a9;
  v47[21] = *(_QWORD *)(*(_QWORD *)(a2 + 80) - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v47[18] = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[15] = *(_QWORD *)(*(_QWORD *)(v13 + 72) - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v47[14] = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[12] = *(_QWORD *)(*(_QWORD *)(v16 + 64) - 8);
  v17 = MEMORY[0x1E0C80A78](v14);
  v47[11] = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v19 + 56);
  v47[9] = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v17);
  v47[8] = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v22 + 48);
  v47[6] = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x1E0C80A78](v23);
  v47[5] = (char *)v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v26 + 40);
  v47[4] = *(_QWORD *)(v27 - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v47[3] = (char *)v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v30 + 32);
  v47[2] = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x1E0C80A78](v28);
  v47[1] = (char *)v47 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(v34 + 24);
  v47[0] = *(_QWORD *)(v35 - 8);
  v36 = MEMORY[0x1E0C80A78](v32);
  v38 = *(_QWORD *)(v37 + 16);
  v39 = MEMORY[0x1E0C80A78](v36);
  v41 = *(_QWORD *)(v40 + 152);
  v47[35] = v38;
  v47[36] = v35;
  v47[37] = v31;
  v47[38] = v27;
  v47[7] = v39;
  v47[39] = v39;
  v47[40] = v20;
  v47[10] = v20;
  v47[13] = v42;
  v47[41] = v42;
  v47[42] = v43;
  v47[16] = v43;
  v47[26] = v44;
  v47[43] = v44;
  v45 = *(_OWORD *)(v40 + 104);
  v48 = *(_OWORD *)(v40 + 88);
  v49 = v45;
  *(_OWORD *)(v46 + 104) = *(_OWORD *)(v40 + 120);
  *(_OWORD *)(v46 + 120) = *(_OWORD *)(v40 + 136);
  v50 = v41;
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF7DB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int EnumCaseMultiPayload;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 16))((char *)&a9 - v12, *(_QWORD *)(v9 - 72), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_1BDF7DBC0 + 4 * byte_1BE1BE416[EnumCaseMultiPayload]))();
}

uint64_t sub_1BDF7DBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v0, v3);
  sub_1BE1B26CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
}

void sub_1BDF7DEC0()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(void))(**(_QWORD **)(v0 + 8) + 80))();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52E2A0);
  swift_dynamicCast();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 - 232), *(_QWORD *)(v1 - 208));
  sub_1BE1B26CC();
  __swift_destroy_boxed_opaque_existential_1(v1 - 232);
  swift_release();
  JUMPOUT(0x1BDF7DE9CLL);
}

void sub_1BDF7DF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  TaggedValue_9<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), *(_QWORD *)(a3 - 24), *(_QWORD *)(a3 - 32), *(_QWORD *)(a3 - 40), *(_QWORD *)(a3 - 48), *(_QWORD *)(a3 - 56), *(_QWORD *)(a3 - 64), *(_QWORD *)(a3 - 72));
}

uint64_t sub_1BDF7DF88()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[5] + 8) + 8) + 16))(v0[7], v0[3]);
}

uint64_t sub_1BDF7DFC0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[4] + 8) + 8) + 16))(v0[7], v0[2]);
}

uint64_t sub_1BDF7DFF8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[7] + 8) + 8) + 16))(v0[9], v0[4]);
}

uint64_t sub_1BDF7E030()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[5] + 8) + 8) + 16))(v0[9], v0[2]);
}

uint64_t sub_1BDF7E068()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[9] + 8) + 8) + 16))(v0[11], v0[5]);
}

uint64_t sub_1BDF7E0A0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[8] + 8) + 8) + 16))(v0[11], v0[4]);
}

uint64_t sub_1BDF7E0D8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[7] + 8) + 8) + 16))(v0[11], v0[3]);
}

uint64_t sub_1BDF7E110()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[6] + 8) + 8) + 16))(v0[11], v0[2]);
}

uint64_t sub_1BDF7E148()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[11] + 8) + 8) + 16))(v0[13], v0[6]);
}

uint64_t sub_1BDF7E180()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[10] + 8) + 8) + 16))(v0[13], v0[5]);
}

uint64_t sub_1BDF7E1B8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[9] + 8) + 8) + 16))(v0[13], v0[4]);
}

uint64_t sub_1BDF7E1F0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[8] + 8) + 8) + 16))(v0[13], v0[3]);
}

uint64_t sub_1BDF7E228()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[7] + 8) + 8) + 16))(v0[13], v0[2]);
}

uint64_t sub_1BDF7E260()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[13] + 8) + 8) + 16))(v0[15], v0[7]);
}

uint64_t sub_1BDF7E298()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[12] + 8) + 8) + 16))(v0[15], v0[6]);
}

uint64_t sub_1BDF7E2D0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[11] + 8) + 8) + 16))(v0[15], v0[5]);
}

uint64_t sub_1BDF7E308()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[10] + 8) + 8) + 16))(v0[15], v0[4]);
}

uint64_t sub_1BDF7E340()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[9] + 8) + 8) + 16))(v0[15], v0[3]);
}

uint64_t sub_1BDF7E378()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[8] + 8) + 8) + 16))(v0[15], v0[2]);
}

uint64_t sub_1BDF7E3B0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[15] + 8) + 8) + 16))(v0[17], v0[8]);
}

uint64_t sub_1BDF7E3E8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[14] + 8) + 8) + 16))(v0[17], v0[7]);
}

uint64_t sub_1BDF7E420()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[13] + 8) + 8) + 16))(v0[17], v0[6]);
}

uint64_t sub_1BDF7E458()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[12] + 8) + 8) + 16))(v0[17], v0[5]);
}

uint64_t sub_1BDF7E490()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[11] + 8) + 8) + 16))(v0[17], v0[4]);
}

uint64_t sub_1BDF7E4C8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[10] + 8) + 8) + 16))(v0[17], v0[3]);
}

uint64_t sub_1BDF7E500()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[9] + 8) + 8) + 16))(v0[17], v0[2]);
}

uint64_t sub_1BDF7E538()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[17] + 8) + 8) + 16))(v0[19], v0[9]);
}

uint64_t sub_1BDF7E570()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[16] + 8) + 8) + 16))(v0[19], v0[8]);
}

uint64_t sub_1BDF7E5A8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[15] + 8) + 8) + 16))(v0[19], v0[7]);
}

uint64_t sub_1BDF7E5E0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[14] + 8) + 8) + 16))(v0[19], v0[6]);
}

uint64_t sub_1BDF7E618()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[13] + 8) + 8) + 16))(v0[19], v0[5]);
}

uint64_t sub_1BDF7E650()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[12] + 8) + 8) + 16))(v0[19], v0[4]);
}

uint64_t sub_1BDF7E688()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[11] + 8) + 8) + 16))(v0[19], v0[3]);
}

uint64_t sub_1BDF7E6C0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[10] + 8) + 8) + 16))(v0[19], v0[2]);
}

uint64_t sub_1BDF7E6F8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[19] + 8) + 8) + 16))(v0[21], v0[10]);
}

uint64_t sub_1BDF7E730()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[18] + 8) + 8) + 16))(v0[21], v0[9]);
}

uint64_t sub_1BDF7E768()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[17] + 8) + 8) + 16))(v0[21], v0[8]);
}

uint64_t sub_1BDF7E7A0()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[16] + 8) + 8) + 16))(v0[21], v0[7]);
}

uint64_t sub_1BDF7E7D8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[15] + 8) + 8) + 16))(v0[21], v0[6]);
}

uint64_t sub_1BDF7E810()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[14] + 8) + 8) + 16))(v0[21], v0[5]);
}

uint64_t sub_1BDF7E848()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[13] + 8) + 8) + 16))(v0[21], v0[4]);
}

uint64_t sub_1BDF7E880()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[12] + 8) + 8) + 16))(v0[21], v0[3]);
}

uint64_t sub_1BDF7E8B8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[11] + 8) + 8) + 16))(v0[21], v0[2]);
}

uint64_t sub_1BDF7E8F0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_1<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7E91C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_2<A, B>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7E948(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_3<A, B, C>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7E974(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_4<A, B, C, D>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7E9A0(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_5<A, B, C, D, E>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7E9CC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_6<A, B, C, D, E, F>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7E9F8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_7<A, B, C, D, E, F, G>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7EA24(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_8<A, B, C, D, E, F, G, H>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7EA50(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for TaggedValue_9<A, B, C, D, E, F, G, H, I>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDF7EA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for TaggedValue_1.TaggedEnum(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDF7EAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1BDF7EB34 + 4 * byte_1BE1BE420[v5]))();
  }
}

_QWORD *sub_1BDF7EB8C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain();
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

_QWORD *sub_1BDF7EC64(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_OWORD *sub_1BDF7EDFC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *sub_1BDF7EED0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1BDF7F05C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF7F120 + 4 * byte_1BE1BE443[(v4 - 1)]))();
}

void sub_1BDF7F16C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for TaggedValue_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaggedValue_1);
}

uint64_t sub_1BDF7F320()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDF7F390(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 != 1)
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
      return v3;
    }
    v11 = a2[1];
    *v3 = *a2;
    v3[1] = v11;
    *((_BYTE *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t sub_1BDF7F4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v4 = *(unsigned __int8 *)(a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release();
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1BDF7F4EC + 4 * byte_1BE1BE456[v5]))();
  }
}

_QWORD *sub_1BDF7F544(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_retain();
    v9 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v9 = 0;
  }
  *((_BYTE *)a1 + v5) = v9;
  return a1;
}

_QWORD *sub_1BDF7F61C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_QWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      *((_BYTE *)a1 + v7) = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

_OWORD *sub_1BDF7F7B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 0x10uLL)
    v5 = 16;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

_OWORD *sub_1BDF7F888(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 0x10uLL)
      v7 = 16;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release();
    else
      (*(void (**)(_OWORD *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1BDF7FA14(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 0x10uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF7FAD8 + 4 * byte_1BE1BE479[(v4 - 1)]))();
}

void sub_1BDF7FB24(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF7FCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 16;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 0x10uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF7FD14 + 4 * byte_1BE1BE487[v3]))();
}

void sub_1BDF7FD5C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 0x10uLL)
    v4 = 16;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF7FE24()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDF7FEAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X14 }
    }
    if (v11 == 1)
    {
      *((_BYTE *)a1 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BDF7FFF0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(result - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (*(unsigned __int8 *)(a1 + v4) >= 2u)
  {
    if (v4 <= 3)
      v5 = v4;
    else
      v5 = 4;
    __asm { BR              X13 }
  }
  if (!*(_BYTE *)(a1 + v4))
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, result);
  return result;
}

uint64_t sub_1BDF800C0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    *(_BYTE *)(a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1BDF801C8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    if (*(unsigned __int8 *)(a1 + v6) >= 2u)
    {
      if (v6 <= 3)
        v7 = v6;
      else
        v7 = 4;
      __asm { BR              X11 }
    }
    if (!*(_BYTE *)(a1 + v6))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v8 = *(unsigned __int8 *)(a2 + v6);
    if (v8 >= 2)
    {
      if (v6 <= 3)
        v9 = v6;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      *(_BYTE *)(a1 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *(_BYTE *)(a1 + v6) = 0;
    }
  }
  return a1;
}

uint64_t sub_1BDF80368(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 == 1)
  {
    *(_BYTE *)(a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v6) = 0;
  }
  return a1;
}

uint64_t sub_1BDF80470(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    if (*(unsigned __int8 *)(a1 + v6) >= 2u)
    {
      if (v6 <= 3)
        v7 = v6;
      else
        v7 = 4;
      __asm { BR              X11 }
    }
    if (!*(_BYTE *)(a1 + v6))
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    v8 = *(unsigned __int8 *)(a2 + v6);
    if (v8 >= 2)
    {
      if (v6 <= 3)
        v9 = v6;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
    {
      *(_BYTE *)(a1 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      *(_BYTE *)(a1 + v6) = 0;
    }
  }
  return a1;
}

uint64_t sub_1BDF80610(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (!a2)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (a2 < 0xFE)
    goto LABEL_19;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_19;
      goto LABEL_12;
    }
    if (v10 < 2)
    {
LABEL_19:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 3)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_19;
LABEL_12:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  return (v11 + 254);
}

void sub_1BDF8074C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = v6 + 1;
  if (a3 < 0xFE)
  {
    v8 = 0u;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v9 = a2 - 254;
  if (v7 < 4)
  {
    if ((_DWORD)v6 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v6 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF8090C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  result = *(unsigned __int8 *)(a1 + v2);
  if (result >= 2)
  {
    if (v2 <= 3)
      v4 = v2;
    else
      v4 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF809C0(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

void sub_1BDF80A9C()
{
  type metadata accessor for TaggedValue_2.TaggedEnum();
}

uint64_t sub_1BDF80B14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) > v3)
    v3 = *(_QWORD *)(v4 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v5 = *(unsigned __int8 *)(a1 + v3);
  if (v5 < 3)
  {
    if (v5 == 2)
    {
      return swift_release();
    }
    else if (v5 == 1)
    {
      return (*(uint64_t (**)(void))(v4 + 8))();
    }
    else
    {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }
  else
  {
    if (v3 <= 3)
      v6 = v3;
    else
      v6 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1BDF80B74 + 4 * byte_1BE1BE4C7[v6]))();
  }
}

_QWORD *sub_1BDF80BE0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v6 + 64) > v5)
    v5 = *(_QWORD *)(v6 + 64);
  if (v5 <= 0x10)
    v7 = 16;
  else
    v7 = v5;
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    *((_BYTE *)a1 + v7) = 2;
    swift_retain();
  }
  else if (v8 == 1)
  {
    (*(void (**)(_QWORD *))(v6 + 16))(a1);
    *((_BYTE *)a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    *((_BYTE *)a1 + v7) = 0;
  }
  return a1;
}

_QWORD *sub_1BDF80CF4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(void);
  unsigned int v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    if (v8 <= 0x10)
      v10 = 16;
    else
      v10 = v8;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1)
        v13 = *(void (**)(void))(v9 + 8);
      else
        v13 = *(void (**)(void))(v7 + 8);
      v13();
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      *((_BYTE *)a1 + v10) = 2;
      swift_retain();
    }
    else if (v14 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v10) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v10) = 0;
    }
  }
  return a1;
}

_OWORD *sub_1BDF80EE4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v6 + 64) > v5)
    v5 = *(_QWORD *)(v6 + 64);
  if (v5 <= 0x10)
    v7 = 16;
  else
    v7 = v5;
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
  {
    *a1 = *a2;
    v10 = 2;
  }
  else if (v8 == 1)
  {
    (*(void (**)(_OWORD *))(v6 + 32))(a1);
    v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v7) = v10;
  return a1;
}

_OWORD *sub_1BDF80FF0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(void);
  unsigned int v14;
  uint64_t v15;
  char v16;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    if (v8 <= 0x10)
      v10 = 16;
    else
      v10 = v8;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1)
        v13 = *(void (**)(void))(v9 + 8);
      else
        v13 = *(void (**)(void))(v7 + 8);
      v13();
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v16 = 2;
    }
    else if (v14 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v6);
      v16 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v5);
      v16 = 0;
    }
    *((_BYTE *)a1 + v10) = v16;
  }
  return a1;
}

uint64_t sub_1BDF811D0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  v4 = 16;
  if (v3 > 0x10)
    v4 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_23;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 < 2)
    {
LABEL_23:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 3)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_23;
LABEL_16:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 254);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF812A4 + 4 * byte_1BE1BE4EA[(v5 - 1)]))();
}

void sub_1BDF812F0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_2()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF814B4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1BDF81544(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v6 + 64) > v5)
    v5 = *(_QWORD *)(v6 + 64);
  if (v5 <= 0x10)
    v7 = 16;
  else
    v7 = v5;
  v8 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80);
  if ((unint64_t)(v7 + 1) > 0x18 || (v8 & 0x1000F8) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + (((v8 & 0xF8 | 7u) + 16) & ~(unint64_t)(v8 & 0xF8 | 7u)));
LABEL_20:
    swift_retain();
    return v3;
  }
  v11 = *((unsigned __int8 *)a2 + v7);
  if (v11 >= 3)
  {
    if (v7 <= 3)
      v12 = v7;
    else
      v12 = 4;
    __asm { BR              X15 }
  }
  if (v11 == 2)
  {
    v13 = a2[1];
    *v3 = *a2;
    v3[1] = v13;
    *((_BYTE *)v3 + v7) = 2;
    goto LABEL_20;
  }
  if (v11 == 1)
  {
    (*(void (**)(uint64_t *))(v6 + 16))(a1);
    *((_BYTE *)v3 + v7) = 1;
  }
  else
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    *((_BYTE *)v3 + v7) = 0;
  }
  return v3;
}

uint64_t sub_1BDF8169C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  if (*(_QWORD *)(v4 + 64) > v3)
    v3 = *(_QWORD *)(v4 + 64);
  if (v3 <= 0x10)
    v3 = 16;
  v5 = *(unsigned __int8 *)(a1 + v3);
  if (v5 < 3)
  {
    if (v5 == 2)
    {
      return swift_release();
    }
    else if (v5 == 1)
    {
      return (*(uint64_t (**)(void))(v4 + 8))();
    }
    else
    {
      return (*(uint64_t (**)(void))(v2 + 8))();
    }
  }
  else
  {
    if (v3 <= 3)
      v6 = v3;
    else
      v6 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1BDF816FC + 4 * byte_1BE1BE4FD[v6]))();
  }
}

_QWORD *sub_1BDF81768(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v6 + 64) > v5)
    v5 = *(_QWORD *)(v6 + 64);
  if (v5 <= 0x10)
    v7 = 16;
  else
    v7 = v5;
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    *((_BYTE *)a1 + v7) = 2;
    swift_retain();
  }
  else if (v8 == 1)
  {
    (*(void (**)(_QWORD *))(v6 + 16))(a1);
    *((_BYTE *)a1 + v7) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    *((_BYTE *)a1 + v7) = 0;
  }
  return a1;
}

_QWORD *sub_1BDF8187C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(void);
  unsigned int v14;
  uint64_t v15;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    if (v8 <= 0x10)
      v10 = 16;
    else
      v10 = v8;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1)
        v13 = *(void (**)(void))(v9 + 8);
      else
        v13 = *(void (**)(void))(v7 + 8);
      v13();
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      *((_BYTE *)a1 + v10) = 2;
      swift_retain();
    }
    else if (v14 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v6);
      *((_BYTE *)a1 + v10) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v10) = 0;
    }
  }
  return a1;
}

_OWORD *sub_1BDF81A6C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v6 + 64) > v5)
    v5 = *(_QWORD *)(v6 + 64);
  if (v5 <= 0x10)
    v7 = 16;
  else
    v7 = v5;
  v8 = *((unsigned __int8 *)a2 + v7);
  if (v8 >= 3)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X15 }
  }
  if (v8 == 2)
  {
    *a1 = *a2;
    v10 = 2;
  }
  else if (v8 == 1)
  {
    (*(void (**)(_OWORD *))(v6 + 32))(a1);
    v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    v10 = 0;
  }
  *((_BYTE *)a1 + v7) = v10;
  return a1;
}

_OWORD *sub_1BDF81B78(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(void);
  unsigned int v14;
  uint64_t v15;
  char v16;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    if (v8 <= 0x10)
      v10 = 16;
    else
      v10 = v8;
    v11 = *((unsigned __int8 *)a1 + v10);
    if (v11 >= 3)
    {
      if (v10 <= 3)
        v12 = v10;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1)
        v13 = *(void (**)(void))(v9 + 8);
      else
        v13 = *(void (**)(void))(v7 + 8);
      v13();
    }
    v14 = *((unsigned __int8 *)a2 + v10);
    if (v14 >= 3)
    {
      if (v10 <= 3)
        v15 = v10;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 2)
    {
      *a1 = *a2;
      v16 = 2;
    }
    else if (v14 == 1)
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v6);
      v16 = 1;
    }
    else
    {
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v5);
      v16 = 0;
    }
    *((_BYTE *)a1 + v10) = v16;
  }
  return a1;
}

uint64_t sub_1BDF81D58(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  v4 = 16;
  if (v3 > 0x10)
    v4 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_23;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_23;
      goto LABEL_16;
    }
    if (v9 < 2)
    {
LABEL_23:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 3)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_23;
LABEL_16:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 254);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF81E2C + 4 * byte_1BE1BE520[(v5 - 1)]))();
}

void sub_1BDF81E78(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF82030(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  v3 = 16;
  if (v2 > 0x10)
    v3 = v2;
  if (*(unsigned __int8 *)(a1 + v3) < 3u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF82088 + 4 * byte_1BE1BE52E[v4]))();
}

void sub_1BDF820D0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  if (a2 > 2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > v5)
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v5 <= 0x10)
      v6 = 16;
    else
      v6 = v5;
    v7 = a2 - 3;
    if (v6 < 4)
    {
      v8 = v7 >> (8 * v6);
      v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 3;
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }
      else if ((_DWORD)v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }
      else
      {
        *a1 = v9;
      }
    }
    else
    {
      a1[v6] = 3;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF821D0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1BDF82294(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    v15 = *((unsigned __int8 *)a2 + v9);
    if (v15 >= 3)
    {
      if (v9 <= 3)
        v16 = v9;
      else
        v16 = 4;
      __asm { BR              X14 }
    }
    if (v15 == 2)
    {
      *((_BYTE *)a1 + v9) = 2;
    }
    else if (v15 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((_BYTE *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v9) = 0;
    }
  }
  else
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BDF82458(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  result = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v6 <= v4)
    v6 = v4;
  v7 = *(unsigned __int8 *)(a1 + v6);
  if (v7 >= 3)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  if (*(_BYTE *)(a1 + v6))
  {
    if (v7 != 1)
      return result;
    v3 = *(_QWORD *)(result - 8);
    AssociatedTypeWitness = result;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
}

uint64_t sub_1BDF8259C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 2)
  {
    *(_BYTE *)(a1 + v9) = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v7);
    *(_BYTE *)(a1 + v9) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v9) = 0;
  }
  return a1;
}

uint64_t sub_1BDF8271C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v9 + 64) <= v6)
    v10 = v6;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(unsigned __int8 *)(a1 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  v13 = v5;
  v14 = AssociatedTypeWitness;
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_13;
  if (v11 == 1)
  {
    v13 = *(_QWORD *)(v7 - 8);
    v14 = v7;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
  }
  v15 = *(unsigned __int8 *)(a2 + v10);
  if (v15 >= 3)
  {
    if (v10 <= 3)
      v16 = v10;
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  if (v15 == 2)
  {
    *(_BYTE *)(a1 + v10) = 2;
  }
  else if (v15 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, v8);
    *(_BYTE *)(a1 + v10) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v10) = 0;
  }
  return a1;
}

uint64_t sub_1BDF82940(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(unsigned __int8 *)(a2 + v9);
  if (v10 >= 3)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  if (v10 == 2)
  {
    *(_BYTE *)(a1 + v9) = 2;
  }
  else if (v10 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v7);
    *(_BYTE *)(a1 + v9) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v9) = 0;
  }
  return a1;
}

uint64_t sub_1BDF82AC0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v9 + 64) <= v6)
    v10 = v6;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(unsigned __int8 *)(a1 + v10);
  if (v11 >= 3)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  v13 = v5;
  v14 = AssociatedTypeWitness;
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_13;
  if (v11 == 1)
  {
    v13 = *(_QWORD *)(v7 - 8);
    v14 = v7;
LABEL_13:
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v14);
  }
  v15 = *(unsigned __int8 *)(a2 + v10);
  if (v15 >= 3)
  {
    if (v10 <= 3)
      v16 = v10;
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  if (v15 == 2)
  {
    *(_BYTE *)(a1 + v10) = 2;
  }
  else if (v15 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, v8);
    *(_BYTE *)(a1 + v10) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    *(_BYTE *)(a1 + v10) = 0;
  }
  return a1;
}

uint64_t sub_1BDF82CE4(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_22;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_22:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 4)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_22;
LABEL_15:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 253);
}

void sub_1BDF82E6C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  v8 = v7 + 1;
  if (a3 < 0xFD)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 252) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v10 = a2 - 253;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF83070(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2)
    v3 = v2;
  result = *(unsigned __int8 *)(a1 + v3);
  if (result >= 3)
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF83170(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (a2 > 2)
  {
    v7 = a2 - 3;
    if (v6 < 4)
    {
      v8 = v7 >> (8 * v6);
      v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 3;
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }
      else if ((_DWORD)v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }
      else
      {
        *a1 = v9;
      }
    }
    else
    {
      a1[v6] = 3;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    a1[v6] = a2;
  }
}

void sub_1BDF83290()
{
  type metadata accessor for TaggedValue_3.TaggedEnum();
}

uint64_t sub_1BDF83310(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  if (v4 <= 0x10)
    v4 = 16;
  switch(*(_BYTE *)(a1 + v4))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v4) <= 3u)
        v6 = *(unsigned __int8 *)(a1 + v4);
      else
        v6 = 4;
      result = ((uint64_t (*)(void))((char *)&loc_1BDF83380 + 4 * byte_1BE1BE56E[v6]))();
      break;
  }
  return result;
}

_QWORD *sub_1BDF83404(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  if (v6 <= 0x10)
    v8 = 16;
  else
    v8 = v6;
  switch(*((_BYTE *)a2 + v8))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v8) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v8) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v8) = 2;
      break;
    case 3:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      *((_BYTE *)a1 + v8) = 3;
      swift_retain();
      break;
    default:
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X17 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF83550(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;

  if (a1 != a2)
  {
    v5 = a3[2];
    v6 = a3[3];
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    v10 = a3[4];
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v11 + 64) > v8)
      v8 = *(_QWORD *)(v11 + 64);
    if (v8 <= 0x10)
      v12 = 16;
    else
      v12 = v8;
    switch(*((_BYTE *)a1 + v12))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD))(v7 + 8))(a1, a3[2]);
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD))(v9 + 8))(a1, a3[3]);
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD))(v11 + 8))(a1, a3[4]);
        break;
      case 3:
        swift_release();
        break;
      default:
        if (v12 <= 3)
          v13 = v12;
        else
          v13 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v5);
        *((_BYTE *)a1 + v12) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v6);
        *((_BYTE *)a1 + v12) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v12) = 2;
        break;
      case 3:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v12) = 3;
        swift_retain();
        break;
      default:
        if (v12 <= 3)
          v14 = v12;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF837AC(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  if (v6 <= 0x10)
    v8 = 16;
  else
    v8 = v6;
  switch(*((_BYTE *)a2 + v8))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v10 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v10 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v10 = 2;
      break;
    case 3:
      *a1 = *a2;
      v10 = 3;
      break;
    default:
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X17 }
      return result;
  }
  *((_BYTE *)a1 + v8) = v10;
  return a1;
}

_OWORD *sub_1BDF838EC(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD *result;

  if (a1 != a2)
  {
    v5 = a3[2];
    v6 = a3[3];
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    v10 = a3[4];
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v11 + 64) > v8)
      v8 = *(_QWORD *)(v11 + 64);
    if (v8 <= 0x10)
      v12 = 16;
    else
      v12 = v8;
    switch(*((_BYTE *)a1 + v12))
    {
      case 0:
        (*(void (**)(_OWORD *, _QWORD))(v7 + 8))(a1, a3[2]);
        break;
      case 1:
        (*(void (**)(_OWORD *, _QWORD))(v9 + 8))(a1, a3[3]);
        break;
      case 2:
        (*(void (**)(_OWORD *, _QWORD))(v11 + 8))(a1, a3[4]);
        break;
      case 3:
        swift_release();
        break;
      default:
        if (v12 <= 3)
          v13 = v12;
        else
          v13 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v5);
        v15 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v6);
        v15 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v10);
        v15 = 2;
        break;
      case 3:
        *a1 = *a2;
        v15 = 3;
        break;
      default:
        if (v12 <= 3)
          v14 = v12;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v12) = v15;
  }
  return a1;
}

uint64_t sub_1BDF83B34(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = 16;
  if (v3 > 0x10)
    v4 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_25;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 252) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v9 < 2)
    {
LABEL_25:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 4)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_25;
LABEL_18:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 253);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF83C1C + 4 * byte_1BE1BE5AD[(v5 - 1)]))();
}

void sub_1BDF83C68(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFD)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 252) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v8 = a2 - 253;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_3()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF83E40()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_1BDF83EF0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  if (v6 <= 0x10)
    v8 = 16;
  else
    v8 = v6;
  v9 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80);
  if ((unint64_t)(v8 + 1) <= 0x18 && (v9 & 0x1000F8) == 0)
  {
    switch(*((_BYTE *)a2 + v8))
    {
      case 0:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)v3 + v8) = 0;
        return v3;
      case 1:
        (*(void (**)(_QWORD *))(v5 + 16))(a1);
        *((_BYTE *)v3 + v8) = 1;
        return v3;
      case 2:
        (*(void (**)(_QWORD *))(v7 + 16))(a1);
        *((_BYTE *)v3 + v8) = 2;
        return v3;
      case 3:
        v14 = a2[1];
        *v3 = *a2;
        v3[1] = v14;
        *((_BYTE *)v3 + v8) = 3;
        goto LABEL_13;
      default:
        if (v8 <= 3)
          v13 = v8;
        else
          v13 = 4;
        __asm { BR              X17 }
        return result;
    }
  }
  v11 = *a2;
  *v3 = *a2;
  v3 = (_QWORD *)(v11 + (((v9 & 0xF8 | 7u) + 16) & ~(unint64_t)(v9 & 0xF8 | 7u)));
LABEL_13:
  swift_retain();
  return v3;
}

uint64_t sub_1BDF84088(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  if (v4 <= 0x10)
    v4 = 16;
  switch(*(_BYTE *)(a1 + v4))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v4) <= 3u)
        v6 = *(unsigned __int8 *)(a1 + v4);
      else
        v6 = 4;
      result = ((uint64_t (*)(void))((char *)&loc_1BDF840F8 + 4 * byte_1BE1BE5C4[v6]))();
      break;
  }
  return result;
}

_QWORD *sub_1BDF8417C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  if (v6 <= 0x10)
    v8 = 16;
  else
    v8 = v6;
  switch(*((_BYTE *)a2 + v8))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v8) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v8) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v8) = 2;
      break;
    case 3:
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      *((_BYTE *)a1 + v8) = 3;
      swift_retain();
      break;
    default:
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X17 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF842C8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;

  if (a1 != a2)
  {
    v5 = a3[2];
    v6 = a3[3];
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    v10 = a3[4];
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v11 + 64) > v8)
      v8 = *(_QWORD *)(v11 + 64);
    if (v8 <= 0x10)
      v12 = 16;
    else
      v12 = v8;
    switch(*((_BYTE *)a1 + v12))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD))(v7 + 8))(a1, a3[2]);
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD))(v9 + 8))(a1, a3[3]);
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD))(v11 + 8))(a1, a3[4]);
        break;
      case 3:
        swift_release();
        break;
      default:
        if (v12 <= 3)
          v13 = v12;
        else
          v13 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v5);
        *((_BYTE *)a1 + v12) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v6);
        *((_BYTE *)a1 + v12) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v12) = 2;
        break;
      case 3:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v12) = 3;
        swift_retain();
        break;
      default:
        if (v12 <= 3)
          v14 = v12;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF84524(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  if (v6 <= 0x10)
    v8 = 16;
  else
    v8 = v6;
  switch(*((_BYTE *)a2 + v8))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v10 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v10 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v10 = 2;
      break;
    case 3:
      *a1 = *a2;
      v10 = 3;
      break;
    default:
      if (v8 <= 3)
        v9 = v8;
      else
        v9 = 4;
      __asm { BR              X17 }
      return result;
  }
  *((_BYTE *)a1 + v8) = v10;
  return a1;
}

_OWORD *sub_1BDF84664(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD *result;

  if (a1 != a2)
  {
    v5 = a3[2];
    v6 = a3[3];
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v9 + 64) > v8)
      v8 = *(_QWORD *)(v9 + 64);
    v10 = a3[4];
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v11 + 64) > v8)
      v8 = *(_QWORD *)(v11 + 64);
    if (v8 <= 0x10)
      v12 = 16;
    else
      v12 = v8;
    switch(*((_BYTE *)a1 + v12))
    {
      case 0:
        (*(void (**)(_OWORD *, _QWORD))(v7 + 8))(a1, a3[2]);
        break;
      case 1:
        (*(void (**)(_OWORD *, _QWORD))(v9 + 8))(a1, a3[3]);
        break;
      case 2:
        (*(void (**)(_OWORD *, _QWORD))(v11 + 8))(a1, a3[4]);
        break;
      case 3:
        swift_release();
        break;
      default:
        if (v12 <= 3)
          v13 = v12;
        else
          v13 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v5);
        v15 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v6);
        v15 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v10);
        v15 = 2;
        break;
      case 3:
        *a1 = *a2;
        v15 = 3;
        break;
      default:
        if (v12 <= 3)
          v14 = v12;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v12) = v15;
  }
  return a1;
}

uint64_t sub_1BDF848AC(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = 16;
  if (v3 > 0x10)
    v4 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_25;
  v5 = v4 + 1;
  v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    v9 = ((a2 + ~(-1 << v6) - 252) >> v6) + 1;
    if (HIWORD(v9))
    {
      v7 = *(_DWORD *)(a1 + v5);
      if (!v7)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v9 > 0xFF)
    {
      v7 = *(unsigned __int16 *)(a1 + v5);
      if (!*(_WORD *)(a1 + v5))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v9 < 2)
    {
LABEL_25:
      v11 = *(unsigned __int8 *)(a1 + v4);
      if (v11 >= 4)
        return (v11 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (!*(_BYTE *)(a1 + v5))
    goto LABEL_25;
LABEL_18:
  v10 = (v7 - 1) << v6;
  if (v5 > 3)
    v10 = 0;
  if (!(_DWORD)v5)
    return (v10 + 253);
  if (v5 > 3)
    LODWORD(v5) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF84994 + 4 * byte_1BE1BE603[(v5 - 1)]))();
}

void sub_1BDF849E0(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v6 = v5 + 1;
  if (a3 < 0xFD)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 252) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v8 = a2 - 253;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF84BAC(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = 16;
  if (v2 > 0x10)
    v3 = v2;
  if (*(unsigned __int8 *)(a1 + v3) < 4u)
    return *(unsigned __int8 *)(a1 + v3);
  if (v3 <= 3)
    v4 = v3;
  else
    v4 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF84C18 + 4 * byte_1BE1BE611[v4]))();
}

void sub_1BDF84C60(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (a2 > 3)
  {
    if (v4 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v4)
      v4 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    if (v4 <= 0x10)
      v5 = 16;
    else
      v5 = v4;
    v6 = a2 - 4;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 4;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 4;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    if (v4 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v4)
      v4 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF84D84()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_1BDF84E80(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) > v6)
    v6 = *(_QWORD *)(v8 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v6)
    v11 = v6;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = v11 + 1;
  v13 = (*(_BYTE *)(v8 + 80) | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v10 + 80));
  if (v13 <= 7
    && v12 <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) == 0)
  {
    if (*((unsigned __int8 *)a2 + v11) >= 4u)
    {
      if (v11 <= 3)
        v18 = v11;
      else
        v18 = 4;
      __asm { BR              X14 }
    }
    switch(*((_BYTE *)a2 + v11))
    {
      case 0:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v11) = 0;
        break;
      case 1:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
        *((_BYTE *)a1 + v11) = 1;
        break;
      case 2:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
        *((_BYTE *)a1 + v11) = 2;
        break;
      case 3:
        *((_BYTE *)a1 + v11) = 3;
        break;
      default:
        memcpy(a1, a2, v12);
        break;
    }
  }
  else
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BDF850B4(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) > v4)
    v4 = *(_QWORD *)(v6 + 64);
  result = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v8 <= v4)
    v8 = v4;
  v9 = *(unsigned __int8 *)(a1 + v8);
  if (v9 >= 4)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (*(_BYTE *)(a1 + v8))
  {
    if (v9 == 2)
    {
      v3 = *(_QWORD *)(result - 8);
      AssociatedTypeWitness = result;
    }
    else
    {
      if (v9 != 1)
        return result;
      v3 = v6;
      AssociatedTypeWitness = v5;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
}

_BYTE *sub_1BDF85248(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) > v6)
    v6 = *(_QWORD *)(v8 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v6)
    v11 = v6;
  else
    v11 = *(_QWORD *)(v10 + 64);
  if (a2[v11] >= 4u)
  {
    if (v11 <= 3)
      v12 = v11;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v11])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v11] = 0;
      break;
    case 1u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      a1[v11] = 1;
      break;
    case 2u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
      a1[v11] = 2;
      break;
    case 3u:
      a1[v11] = 3;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1BDF85430(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) > v6)
    v6 = *(_QWORD *)(v8 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v11 + 64) <= v6)
    v12 = v6;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = a1[v12];
  if (v13 >= 4)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v15 = v5;
  v16 = AssociatedTypeWitness;
  if (a1[v12])
  {
    if (v13 == 2)
    {
      v15 = *(_QWORD *)(v9 - 8);
      v16 = v9;
    }
    else
    {
      v15 = v8;
      v16 = v7;
      if (v13 != 1)
        goto LABEL_18;
    }
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
LABEL_18:
  if (a2[v12] >= 4u)
  {
    if (v12 <= 3)
      v17 = v12;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  switch(a2[v12])
  {
    case 0u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v12] = 0;
      break;
    case 1u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      a1[v12] = 1;
      break;
    case 2u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
      a1[v12] = 2;
      break;
    case 3u:
      a1[v12] = 3;
      break;
    default:
      memcpy(a1, a2, v12 + 1);
      break;
  }
  return a1;
}

_BYTE *sub_1BDF856D0(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) > v6)
    v6 = *(_QWORD *)(v8 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v6)
    v11 = v6;
  else
    v11 = *(_QWORD *)(v10 + 64);
  if (a2[v11] >= 4u)
  {
    if (v11 <= 3)
      v12 = v11;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v11])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v11] = 0;
      break;
    case 1u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      a1[v11] = 1;
      break;
    case 2u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 32))(a1, a2, v9);
      a1[v11] = 2;
      break;
    case 3u:
      a1[v11] = 3;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1BDF858B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) > v6)
    v6 = *(_QWORD *)(v8 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v11 + 64) <= v6)
    v12 = v6;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = a1[v12];
  if (v13 >= 4)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v15 = v5;
  v16 = AssociatedTypeWitness;
  if (a1[v12])
  {
    if (v13 == 2)
    {
      v15 = *(_QWORD *)(v9 - 8);
      v16 = v9;
    }
    else
    {
      v15 = v8;
      v16 = v7;
      if (v13 != 1)
        goto LABEL_18;
    }
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
LABEL_18:
  if (a2[v12] >= 4u)
  {
    if (v12 <= 3)
      v17 = v12;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  switch(a2[v12])
  {
    case 0u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v12] = 0;
      break;
    case 1u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      a1[v12] = 1;
      break;
    case 2u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v10);
      a1[v12] = 2;
      break;
    case 3u:
      a1[v12] = 3;
      break;
    default:
      memcpy(a1, a2, v12 + 1);
      break;
  }
  return a1;
}

uint64_t sub_1BDF85B58(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_24;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 251) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v12 < 2)
    {
LABEL_24:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 5)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_24;
LABEL_17:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 252);
}

void sub_1BDF85D0C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = v8 + 1;
  if (a3 < 0xFC)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 251) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xFB)
    __asm { BR              X11 }
  v11 = a2 - 252;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF85F3C(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 <= v2)
    v4 = v2;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 4)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF86068(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (a2 > 3)
  {
    v8 = a2 - 4;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 4;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 4;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t sub_1BDF861B4()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BDF861BC()
{
  type metadata accessor for TaggedValue_4.TaggedEnum();
}

uint64_t sub_1BDF8623C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v6 = v4;
  v7 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  if (v6 <= 0x10)
    v6 = 16;
  switch(*(_BYTE *)(a1 + v6))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = (*(uint64_t (**)(void))(v7 + 8))();
      break;
    case 4:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v6) <= 3u)
        v8 = *(unsigned __int8 *)(a1 + v6);
      else
        v8 = 4;
      result = ((uint64_t (*)(void))((char *)&loc_1BDF862C0 + 4 * byte_1BE1BE665[v8]))();
      break;
  }
  return result;
}

_QWORD *sub_1BDF86350(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x10)
    v10 = 16;
  else
    v10 = v8;
  switch(*((_BYTE *)a2 + v10))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v10) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v10) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v10) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v9 + 16))(a1);
      *((_BYTE *)a1 + v10) = 3;
      break;
    case 4:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v10) = 4;
      swift_retain();
      break;
    default:
      if (v10 <= 3)
        v11 = v10;
      else
        v11 = 4;
      __asm { BR              X3 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF864CC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _QWORD *result;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = a3[3];
    v6 = *(_QWORD *)(a3[2] - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v8 + 64) > v7)
      v7 = *(_QWORD *)(v8 + 64);
    v9 = a3[4];
    v10 = a3[5];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v7)
      v7 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v7)
      v7 = *(_QWORD *)(v12 + 64);
    if (v7 <= 0x10)
      v13 = 16;
    else
      v13 = v7;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_21;
      case 1:
        v15 = *(void (**)(void))(v8 + 8);
        goto LABEL_21;
      case 2:
        v15 = *(void (**)(void))(v11 + 8);
        goto LABEL_21;
      case 3:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_21:
        v15();
        break;
      case 4:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(a1, a2, v5);
        v17 = 1;
        goto LABEL_33;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v9);
        v17 = 2;
        goto LABEL_33;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v10);
        v17 = 3;
LABEL_33:
        *((_BYTE *)a1 + v13) = v17;
        break;
      case 4:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 4;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF86760(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x10)
    v10 = 16;
  else
    v10 = v8;
  switch(*((_BYTE *)a2 + v10))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v12 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v12 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v12 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v9 + 32))(a1);
      v12 = 3;
      break;
    case 4:
      *a1 = *a2;
      v12 = 4;
      break;
    default:
      if (v10 <= 3)
        v11 = v10;
      else
        v11 = 4;
      __asm { BR              X3 }
      return result;
  }
  *((_BYTE *)a1 + v10) = v12;
  return a1;
}

_OWORD *sub_1BDF868CC(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _OWORD *result;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = a3[3];
    v6 = *(_QWORD *)(a3[2] - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v8 + 64) > v7)
      v7 = *(_QWORD *)(v8 + 64);
    v9 = a3[4];
    v10 = a3[5];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v7)
      v7 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v7)
      v7 = *(_QWORD *)(v12 + 64);
    if (v7 <= 0x10)
      v13 = 16;
    else
      v13 = v7;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_21;
      case 1:
        v15 = *(void (**)(void))(v8 + 8);
        goto LABEL_21;
      case 2:
        v15 = *(void (**)(void))(v11 + 8);
        goto LABEL_21;
      case 3:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_21:
        v15();
        break;
      case 4:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v19);
        v17 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v8 + 32))(a1, a2, v5);
        v17 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v9);
        v17 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v10);
        v17 = 3;
        break;
      case 4:
        *a1 = *a2;
        v17 = 4;
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v17;
  }
  return a1;
}

uint64_t sub_1BDF86B50(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = 16;
  if (v3 > 0x10)
    v5 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_27;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 251) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v10 < 2)
    {
LABEL_27:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 5)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_27;
LABEL_20:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 252);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF86C48 + 4 * byte_1BE1BE6AB[(v6 - 1)]))();
}

void sub_1BDF86C94(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v7 = v5 + 1;
  if (a3 < 0xFC)
  {
    v8 = 0u;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 251) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFB)
    __asm { BR              X11 }
  v9 = a2 - 252;
  if (v7 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_4()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF86E7C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1BDF86F4C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;

  v3 = a1;
  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x10)
    v10 = 16;
  else
    v10 = v8;
  v11 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80);
  if ((unint64_t)(v10 + 1) <= 0x18 && (v11 & 0x1000F8) == 0)
  {
    switch(*((_BYTE *)a2 + v10))
    {
      case 0:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)v3 + v10) = 0;
        return v3;
      case 1:
        (*(void (**)(_QWORD *))(v5 + 16))(a1);
        *((_BYTE *)v3 + v10) = 1;
        return v3;
      case 2:
        (*(void (**)(_QWORD *))(v7 + 16))(a1);
        *((_BYTE *)v3 + v10) = 2;
        return v3;
      case 3:
        (*(void (**)(_QWORD *))(v9 + 16))(a1);
        *((_BYTE *)v3 + v10) = 3;
        return v3;
      case 4:
        v16 = a2[1];
        *v3 = *a2;
        v3[1] = v16;
        *((_BYTE *)v3 + v10) = 4;
        goto LABEL_16;
      default:
        if (v10 <= 3)
          v15 = v10;
        else
          v15 = 4;
        __asm { BR              X3 }
        return result;
    }
  }
  v13 = *a2;
  *v3 = *a2;
  v3 = (_QWORD *)(v13 + (((v11 & 0xF8 | 7u) + 16) & ~(unint64_t)(v11 & 0xF8 | 7u)));
LABEL_16:
  swift_retain();
  return v3;
}

uint64_t sub_1BDF8711C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v6 = v4;
  v7 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  if (v6 <= 0x10)
    v6 = 16;
  switch(*(_BYTE *)(a1 + v6))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = (*(uint64_t (**)(void))(v7 + 8))();
      break;
    case 4:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v6) <= 3u)
        v8 = *(unsigned __int8 *)(a1 + v6);
      else
        v8 = 4;
      result = ((uint64_t (*)(void))((char *)&loc_1BDF871A0 + 4 * byte_1BE1BE6C3[v8]))();
      break;
  }
  return result;
}

_QWORD *sub_1BDF87230(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x10)
    v10 = 16;
  else
    v10 = v8;
  switch(*((_BYTE *)a2 + v10))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v10) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v10) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v10) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v9 + 16))(a1);
      *((_BYTE *)a1 + v10) = 3;
      break;
    case 4:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      *((_BYTE *)a1 + v10) = 4;
      swift_retain();
      break;
    default:
      if (v10 <= 3)
        v11 = v10;
      else
        v11 = 4;
      __asm { BR              X3 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF873AC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _QWORD *result;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = a3[3];
    v6 = *(_QWORD *)(a3[2] - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v8 + 64) > v7)
      v7 = *(_QWORD *)(v8 + 64);
    v9 = a3[4];
    v10 = a3[5];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v7)
      v7 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v7)
      v7 = *(_QWORD *)(v12 + 64);
    if (v7 <= 0x10)
      v13 = 16;
    else
      v13 = v7;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_21;
      case 1:
        v15 = *(void (**)(void))(v8 + 8);
        goto LABEL_21;
      case 2:
        v15 = *(void (**)(void))(v11 + 8);
        goto LABEL_21;
      case 3:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_21:
        v15();
        break;
      case 4:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(a1, a2, v5);
        v17 = 1;
        goto LABEL_33;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v9);
        v17 = 2;
        goto LABEL_33;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v10);
        v17 = 3;
LABEL_33:
        *((_BYTE *)a1 + v13) = v17;
        break;
      case 4:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 4;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF87640(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x10)
    v10 = 16;
  else
    v10 = v8;
  switch(*((_BYTE *)a2 + v10))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v12 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v12 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v12 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v9 + 32))(a1);
      v12 = 3;
      break;
    case 4:
      *a1 = *a2;
      v12 = 4;
      break;
    default:
      if (v10 <= 3)
        v11 = v10;
      else
        v11 = 4;
      __asm { BR              X3 }
      return result;
  }
  *((_BYTE *)a1 + v10) = v12;
  return a1;
}

_OWORD *sub_1BDF877AC(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _OWORD *result;
  uint64_t v19;

  if (a1 != a2)
  {
    v5 = a3[3];
    v6 = *(_QWORD *)(a3[2] - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v8 + 64) > v7)
      v7 = *(_QWORD *)(v8 + 64);
    v9 = a3[4];
    v10 = a3[5];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v7)
      v7 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v7)
      v7 = *(_QWORD *)(v12 + 64);
    if (v7 <= 0x10)
      v13 = 16;
    else
      v13 = v7;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_21;
      case 1:
        v15 = *(void (**)(void))(v8 + 8);
        goto LABEL_21;
      case 2:
        v15 = *(void (**)(void))(v11 + 8);
        goto LABEL_21;
      case 3:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_21:
        v15();
        break;
      case 4:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v19);
        v17 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v8 + 32))(a1, a2, v5);
        v17 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v9);
        v17 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v10);
        v17 = 3;
        break;
      case 4:
        *a1 = *a2;
        v17 = 4;
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v17;
  }
  return a1;
}

uint64_t sub_1BDF87A30(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = 16;
  if (v3 > 0x10)
    v5 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_27;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 251) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v10 < 2)
    {
LABEL_27:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 5)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_27;
LABEL_20:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 252);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF87B28 + 4 * byte_1BE1BE709[(v6 - 1)]))();
}

void sub_1BDF87B74(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v7 = v5 + 1;
  if (a3 < 0xFC)
  {
    v8 = 0u;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 251) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFB)
    __asm { BR              X11 }
  v9 = a2 - 252;
  if (v7 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF87D50(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = a2[5];
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v4 = 16;
  if (v2 > 0x10)
    v4 = v2;
  if (*(unsigned __int8 *)(a1 + v4) < 5u)
    return *(unsigned __int8 *)(a1 + v4);
  if (v4 <= 3)
    v5 = v4;
  else
    v5 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF87DCC + 4 * byte_1BE1BE717[v5]))();
}

void sub_1BDF87E14(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  if (a2 > 4)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v7)
      v7 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v7)
      v7 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v8 = a3[5];
    if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v7)
      v7 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
    if (v7 <= 0x10)
      v9 = 16;
    else
      v9 = v7;
    v10 = a2 - 5;
    if (v9 < 4)
    {
      v11 = v10 >> (8 * v9);
      v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 5;
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 5;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (v6 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v6 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (v5 <= v6)
      v5 = v6;
    if (v4 <= v5)
      v4 = v5;
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF87F5C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1BDF88090(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v21 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v21 - 8);
  if (*(_QWORD *)(v6 + 64) <= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v7)
    v7 = *(_QWORD *)(v9 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) <= v7)
    v12 = v7;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = v12 + 1;
  v14 = *(_DWORD *)(v11 + 80);
  v15 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v4 + 80) | *(_BYTE *)(v9 + 80) | v14);
  if (v15 <= 7
    && v13 <= 0x18
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v9 + 80) | v14) & 0x100000) == 0)
  {
    if (*((unsigned __int8 *)a2 + v12) >= 5u)
    {
      if (v12 <= 3)
        v20 = v12;
      else
        v20 = 4;
      __asm { BR              X14 }
    }
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v12) = 0;
        break;
      case 1:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v21);
        *((_BYTE *)a1 + v12) = 1;
        break;
      case 2:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        *((_BYTE *)a1 + v12) = 2;
        break;
      case 3:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v12) = 3;
        break;
      case 4:
        *((_BYTE *)a1 + v12) = 4;
        break;
      default:
        memcpy(a1, a2, v13);
        break;
    }
  }
  else
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BDF88324(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v12 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v5 + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) > v6)
    v6 = *(_QWORD *)(v8 + 64);
  result = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v10 <= v6)
    v10 = v6;
  if (*(unsigned __int8 *)(a1 + v10) >= 5u)
  {
    if (v10 <= 3)
      v11 = v10;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  switch(*(_BYTE *)(a1 + v10))
  {
    case 0:
      goto LABEL_17;
    case 1:
      v3 = v5;
      AssociatedTypeWitness = v12;
      goto LABEL_17;
    case 2:
      v3 = v8;
      AssociatedTypeWitness = v7;
      goto LABEL_17;
    case 3:
      v3 = *(_QWORD *)(result - 8);
      AssociatedTypeWitness = result;
LABEL_17:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_1BDF88510(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = AssociatedTypeWitness;
  v5 = *(_QWORD *)(v17 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= v5)
    v8 = v5;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) > v8)
    v8 = *(_QWORD *)(v10 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v8)
    v13 = v8;
  else
    v13 = *(_QWORD *)(v12 + 64);
  if (a2[v13] >= 5u)
  {
    if (v13 <= 3)
      v14 = v13;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v13])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v17 + 16))(a1, a2, v18);
      a1[v13] = 0;
      return a1;
    case 1u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      v15 = 1;
      goto LABEL_21;
    case 2u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
      v15 = 2;
      goto LABEL_21;
    case 3u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
      v15 = 3;
      goto LABEL_21;
    case 4u:
      v15 = 4;
LABEL_21:
      a1[v13] = v15;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1BDF88744(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v21 = *(_QWORD *)(v7 - 8);
    v22 = v7;
    if (*(_QWORD *)(v21 + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(v21 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v10 + 64) > v8)
      v8 = *(_QWORD *)(v10 + 64);
    v11 = swift_getAssociatedTypeWitness();
    v12 = v11;
    v13 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v13 + 64) <= v8)
      v14 = v8;
    else
      v14 = *(_QWORD *)(v13 + 64);
    if (a1[v14] >= 5u)
    {
      if (v14 <= 3)
        v15 = v14;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v5;
    v17 = AssociatedTypeWitness;
    switch(a1[v14])
    {
      case 0u:
        goto LABEL_19;
      case 1u:
        v16 = v21;
        v17 = v22;
        goto LABEL_19;
      case 2u:
        v16 = v10;
        v17 = v9;
        goto LABEL_19;
      case 3u:
        v16 = *(_QWORD *)(v11 - 8);
        v17 = v11;
LABEL_19:
        (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
        break;
      default:
        break;
    }
    if (a2[v14] >= 5u)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v14])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v14] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v21 + 16))(a1, a2, v22);
        v19 = 1;
        goto LABEL_32;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
        v19 = 2;
        goto LABEL_32;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 16))(a1, a2, v12);
        v19 = 3;
        goto LABEL_32;
      case 4u:
        v19 = 4;
LABEL_32:
        a1[v14] = v19;
        break;
      default:
        memcpy(a1, a2, v14 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_1BDF88A48(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = AssociatedTypeWitness;
  v5 = *(_QWORD *)(v17 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= v5)
    v8 = v5;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) > v8)
    v8 = *(_QWORD *)(v10 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v8)
    v13 = v8;
  else
    v13 = *(_QWORD *)(v12 + 64);
  if (a2[v13] >= 5u)
  {
    if (v13 <= 3)
      v14 = v13;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v13])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v17 + 32))(a1, a2, v18);
      a1[v13] = 0;
      return a1;
    case 1u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      v15 = 1;
      goto LABEL_21;
    case 2u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 32))(a1, a2, v9);
      v15 = 2;
      goto LABEL_21;
    case 3u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
      v15 = 3;
      goto LABEL_21;
    case 4u:
      v15 = 4;
LABEL_21:
      a1[v13] = v15;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1BDF88C7C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v21 = *(_QWORD *)(v7 - 8);
    v22 = v7;
    if (*(_QWORD *)(v21 + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(v21 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v10 + 64) > v8)
      v8 = *(_QWORD *)(v10 + 64);
    v11 = swift_getAssociatedTypeWitness();
    v12 = v11;
    v13 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v13 + 64) <= v8)
      v14 = v8;
    else
      v14 = *(_QWORD *)(v13 + 64);
    if (a1[v14] >= 5u)
    {
      if (v14 <= 3)
        v15 = v14;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v5;
    v17 = AssociatedTypeWitness;
    switch(a1[v14])
    {
      case 0u:
        goto LABEL_19;
      case 1u:
        v16 = v21;
        v17 = v22;
        goto LABEL_19;
      case 2u:
        v16 = v10;
        v17 = v9;
        goto LABEL_19;
      case 3u:
        v16 = *(_QWORD *)(v11 - 8);
        v17 = v11;
LABEL_19:
        (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
        break;
      default:
        break;
    }
    if (a2[v14] >= 5u)
    {
      if (v14 <= 3)
        v18 = v14;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v14])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v14] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v21 + 32))(a1, a2, v22);
        v19 = 1;
        goto LABEL_32;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v10 + 32))(a1, a2, v9);
        v19 = 2;
        goto LABEL_32;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 32))(a1, a2, v12);
        v19 = 3;
        goto LABEL_32;
      case 4u:
        v19 = 4;
LABEL_32:
        a1[v14] = v19;
        break;
      default:
        memcpy(a1, a2, v14 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1BDF88F80(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) <= v4)
    v8 = v4;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_26;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 250) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v13 < 2)
    {
LABEL_26:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 6)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_26;
LABEL_19:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 > 3)
      LODWORD(v9) = 4;
    __asm { BR              X11 }
  }
  return (v14 + 251);
}

void sub_1BDF89160(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v6)
    v9 = v6;
  v10 = v9 + 1;
  if (a3 < 0xFB)
  {
    v11 = 0u;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 250) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFA)
    __asm { BR              X11 }
  v12 = a2 - 251;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF893BC(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v2)
    v5 = v2;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 5)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF89514(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) <= v4)
    v8 = v4;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (a2 > 4)
  {
    v9 = a2 - 5;
    if (v8 < 4)
    {
      v10 = v9 >> (8 * v8);
      v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 5;
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if ((_DWORD)v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 5;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t sub_1BDF8968C()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BDF89694()
{
  type metadata accessor for TaggedValue_5.TaggedEnum();
}

uint64_t sub_1BDF8971C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v6 = v4;
  v7 = *(_QWORD *)(a2[5] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a2[6] - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x10)
    v8 = 16;
  switch(*(_BYTE *)(a1 + v8))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = (*(uint64_t (**)(void))(v7 + 8))();
      break;
    case 4:
      result = (*(uint64_t (**)(void))(v9 + 8))();
      break;
    case 5:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v8) <= 3u)
        v10 = *(unsigned __int8 *)(a1 + v8);
      else
        v10 = 4;
      result = ((uint64_t (*)(void))((char *)&loc_1BDF897B4 + 4 * byte_1BE1BE77C[v10]))();
      break;
  }
  return result;
}

_QWORD *sub_1BDF89850(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= v8)
    v10 = v8;
  v11 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v11 + 64) > v10)
    v10 = *(_QWORD *)(v11 + 64);
  if (v10 <= 0x10)
    v12 = 16;
  else
    v12 = v10;
  switch(*((_BYTE *)a2 + v12))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v12) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v12) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v12) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v9 + 16))(a1);
      *((_BYTE *)a1 + v12) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v11 + 16))(a1);
      *((_BYTE *)a1 + v12) = 4;
      break;
    case 5:
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      *((_BYTE *)a1 + v12) = 5;
      swift_retain();
      break;
    default:
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X5 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF899FC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = *(_QWORD *)(a3[2] - 8);
    v19 = a3[3];
    v5 = *(_QWORD *)(v18 + 64);
    v6 = *(_QWORD *)(v19 - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[4];
    v8 = a3[5];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[6];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v18 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v19);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v7);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v8);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 5;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF89CF4(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= v8)
    v10 = v8;
  v11 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v11 + 64) > v10)
    v10 = *(_QWORD *)(v11 + 64);
  if (v10 <= 0x10)
    v12 = 16;
  else
    v12 = v10;
  switch(*((_BYTE *)a2 + v12))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v14 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v14 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v14 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v9 + 32))(a1);
      v14 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v11 + 32))(a1);
      v14 = 4;
      break;
    case 5:
      *a1 = *a2;
      v14 = 5;
      break;
    default:
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X5 }
      return result;
  }
  *((_BYTE *)a1 + v12) = v14;
  return a1;
}

_OWORD *sub_1BDF89E8C(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v19 = *(_QWORD *)(a3[2] - 8);
    v20 = a3[3];
    v5 = *(_QWORD *)(v19 + 64);
    v6 = *(_QWORD *)(v20 - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[4];
    v8 = a3[5];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[6];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v19 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(a1, v20);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v19 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v20);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v7);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v8);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        v16 = 4;
        break;
      case 5:
        *a1 = *a2;
        v16 = 5;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF8A168(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = 16;
  if (v3 > 0x10)
    v5 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_29;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 250) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v10 < 2)
    {
LABEL_29:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 6)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_29;
LABEL_22:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 251);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF8A274 + 4 * byte_1BE1BE7C9[(v6 - 1)]))();
}

void sub_1BDF8A2C0(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v7 = v5 + 1;
  if (a3 < 0xFB)
  {
    v8 = 0u;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 250) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFA)
    __asm { BR              X11 }
  v9 = a2 - 251;
  if (v7 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_5()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF8A4BC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1BDF8A5AC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;

  v3 = a1;
  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= v8)
    v10 = v8;
  v11 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v11 + 64) > v10)
    v10 = *(_QWORD *)(v11 + 64);
  if (v10 <= 0x10)
    v12 = 16;
  else
    v12 = v10;
  v13 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v11 + 80);
  if ((unint64_t)(v12 + 1) <= 0x18 && (v13 & 0x1000F8) == 0)
  {
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)v3 + v12) = 0;
        return v3;
      case 1:
        (*(void (**)(_QWORD *))(v5 + 16))(a1);
        *((_BYTE *)v3 + v12) = 1;
        return v3;
      case 2:
        (*(void (**)(_QWORD *))(v7 + 16))(a1);
        *((_BYTE *)v3 + v12) = 2;
        return v3;
      case 3:
        (*(void (**)(_QWORD *))(v9 + 16))(a1);
        *((_BYTE *)v3 + v12) = 3;
        return v3;
      case 4:
        (*(void (**)(_QWORD *))(v11 + 16))(a1);
        *((_BYTE *)v3 + v12) = 4;
        return v3;
      case 5:
        v18 = a2[1];
        *v3 = *a2;
        v3[1] = v18;
        *((_BYTE *)v3 + v12) = 5;
        goto LABEL_18;
      default:
        if (v12 <= 3)
          v17 = v12;
        else
          v17 = 4;
        __asm { BR              X5 }
        return result;
    }
  }
  v15 = *a2;
  *v3 = *a2;
  v3 = (_QWORD *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
LABEL_18:
  swift_retain();
  return v3;
}

uint64_t sub_1BDF8A7B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v6 = v4;
  v7 = *(_QWORD *)(a2[5] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a2[6] - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  if (v8 <= 0x10)
    v8 = 16;
  switch(*(_BYTE *)(a1 + v8))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = (*(uint64_t (**)(void))(v7 + 8))();
      break;
    case 4:
      result = (*(uint64_t (**)(void))(v9 + 8))();
      break;
    case 5:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v8) <= 3u)
        v10 = *(unsigned __int8 *)(a1 + v8);
      else
        v10 = 4;
      result = ((uint64_t (*)(void))((char *)&loc_1BDF8A84C + 4 * byte_1BE1BE7E2[v10]))();
      break;
  }
  return result;
}

_QWORD *sub_1BDF8A8E8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= v8)
    v10 = v8;
  v11 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v11 + 64) > v10)
    v10 = *(_QWORD *)(v11 + 64);
  if (v10 <= 0x10)
    v12 = 16;
  else
    v12 = v10;
  switch(*((_BYTE *)a2 + v12))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v12) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v12) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v12) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v9 + 16))(a1);
      *((_BYTE *)a1 + v12) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v11 + 16))(a1);
      *((_BYTE *)a1 + v12) = 4;
      break;
    case 5:
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      *((_BYTE *)a1 + v12) = 5;
      swift_retain();
      break;
    default:
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X5 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF8AA94(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = *(_QWORD *)(a3[2] - 8);
    v19 = a3[3];
    v5 = *(_QWORD *)(v18 + 64);
    v6 = *(_QWORD *)(v19 - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[4];
    v8 = a3[5];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[6];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v18 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v19);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v7);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v8);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 5;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF8AD8C(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v6)
    v8 = v6;
  v9 = *(_QWORD *)(a3[5] - 8);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10 <= v8)
    v10 = v8;
  v11 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v11 + 64) > v10)
    v10 = *(_QWORD *)(v11 + 64);
  if (v10 <= 0x10)
    v12 = 16;
  else
    v12 = v10;
  switch(*((_BYTE *)a2 + v12))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v14 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v14 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v14 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v9 + 32))(a1);
      v14 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v11 + 32))(a1);
      v14 = 4;
      break;
    case 5:
      *a1 = *a2;
      v14 = 5;
      break;
    default:
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X5 }
      return result;
  }
  *((_BYTE *)a1 + v12) = v14;
  return a1;
}

_OWORD *sub_1BDF8AF24(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v19 = *(_QWORD *)(a3[2] - 8);
    v20 = a3[3];
    v5 = *(_QWORD *)(v19 + 64);
    v6 = *(_QWORD *)(v20 - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[4];
    v8 = a3[5];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[6];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v19 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(a1, v20);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v19 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v20);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v7);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v8);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        v16 = 4;
        break;
      case 5:
        *a1 = *a2;
        v16 = 5;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF8B200(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = 16;
  if (v3 > 0x10)
    v5 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_29;
  v6 = v5 + 1;
  v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v10 = ((a2 + ~(-1 << v7) - 250) >> v7) + 1;
    if (HIWORD(v10))
    {
      v8 = *(_DWORD *)(a1 + v6);
      if (!v8)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v10 > 0xFF)
    {
      v8 = *(unsigned __int16 *)(a1 + v6);
      if (!*(_WORD *)(a1 + v6))
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v10 < 2)
    {
LABEL_29:
      v12 = *(unsigned __int8 *)(a1 + v5);
      if (v12 >= 6)
        return (v12 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + v6);
  if (!*(_BYTE *)(a1 + v6))
    goto LABEL_29;
LABEL_22:
  v11 = (v8 - 1) << v7;
  if (v6 > 3)
    v11 = 0;
  if (!(_DWORD)v6)
    return (v11 + 251);
  if (v6 > 3)
    LODWORD(v6) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF8B30C + 4 * byte_1BE1BE82F[(v6 - 1)]))();
}

void sub_1BDF8B358(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v7 = v5 + 1;
  if (a3 < 0xFB)
  {
    v8 = 0u;
  }
  else if (v7 <= 3)
  {
    v10 = ((a3 + ~(-1 << (8 * v7)) - 250) >> (8 * v7)) + 1;
    if (HIWORD(v10))
    {
      v8 = 4u;
    }
    else if (v10 >= 0x100)
    {
      v8 = 2;
    }
    else
    {
      v8 = v10 > 1;
    }
  }
  else
  {
    v8 = 1u;
  }
  if (a2 <= 0xFA)
    __asm { BR              X11 }
  v9 = a2 - 251;
  if (v7 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v11 = v9 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *a1 = v11;
        *((_BYTE *)a1 + 2) = BYTE2(v11);
      }
      else if ((_DWORD)v7 == 2)
      {
        *a1 = v11;
      }
      else
      {
        *(_BYTE *)a1 = v11;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v9;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF8B548(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = a2[5];
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64);
  v4 = 16;
  if (v2 > 0x10)
    v4 = v2;
  if (*(unsigned __int8 *)(a1 + v4) < 6u)
    return *(unsigned __int8 *)(a1 + v4);
  if (v4 <= 3)
    v5 = v4;
  else
    v5 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF8B5D8 + 4 * byte_1BE1BE83D[v5]))();
}

void sub_1BDF8B620(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  if (a2 > 5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v8)
      v8 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v8)
      v8 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v9 = a3[5];
    if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v8)
      v8 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v8)
      v8 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    if (v8 <= 0x10)
      v10 = 16;
    else
      v10 = v8;
    v11 = a2 - 6;
    if (v10 < 4)
    {
      v12 = v11 >> (8 * v10);
      v13 = v11 & ~(-1 << (8 * v10));
      a1[v10] = v12 + 6;
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
    else
    {
      a1[v10] = 6;
      bzero(a1, v10);
      *(_DWORD *)a1 = v11;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (v7 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v7 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (v6 <= v7)
      v6 = v7;
    if (v5 <= v6)
      v5 = v6;
    if (v4 <= v5)
      v4 = v5;
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF8B790()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1BDF8B8FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v24 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v24 - 8);
  if (*(_QWORD *)(v6 + 64) <= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v23 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v23 - 8);
  if (*(_QWORD *)(v8 + 64) <= v7)
    v9 = v7;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v22 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v22 - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v9)
    v13 = v9;
  else
    v13 = *(_QWORD *)(v12 + 64);
  v14 = v13 + 1;
  v15 = *(_DWORD *)(v10 + 80);
  v16 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v4 + 80) | *(_BYTE *)(v8 + 80) | v15 | *(_BYTE *)(v12 + 80));
  if (v16 <= 7
    && v14 <= 0x18
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v8 + 80) | v15 | *(_DWORD *)(v12 + 80)) & 0x100000) == 0)
  {
    if (*((unsigned __int8 *)a2 + v13) >= 6u)
    {
      if (v13 <= 3)
        v21 = v13;
      else
        v21 = 4;
      __asm { BR              X14 }
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v24);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v23);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v22);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v12 + 16))(a1, a2, v11);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        *((_BYTE *)a1 + v13) = 5;
        break;
      default:
        memcpy(a1, a2, v14);
        break;
    }
  }
  else
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1BDF8BC04(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v5 - 8);
  v16 = v5;
  if (*(_QWORD *)(v15 + 64) <= v4)
    v6 = v4;
  else
    v6 = *(_QWORD *)(v15 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v14 - 8);
  if (*(_QWORD *)(v7 + 64) <= v6)
    v8 = v6;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) > v8)
    v8 = *(_QWORD *)(v10 + 64);
  result = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v12 <= v8)
    v12 = v8;
  if (*(unsigned __int8 *)(a1 + v12) >= 6u)
  {
    if (v12 <= 3)
      v13 = v12;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  switch(*(_BYTE *)(a1 + v12))
  {
    case 0:
      goto LABEL_21;
    case 1:
      v3 = v15;
      AssociatedTypeWitness = v16;
      goto LABEL_21;
    case 2:
      v3 = v7;
      AssociatedTypeWitness = v14;
      goto LABEL_21;
    case 3:
      v3 = v10;
      AssociatedTypeWitness = v9;
      goto LABEL_21;
    case 4:
      v3 = *(_QWORD *)(result - 8);
      AssociatedTypeWitness = result;
LABEL_21:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_1BDF8BE28(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = AssociatedTypeWitness;
  v4 = *(_QWORD *)(v19 + 64);
  v18 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v18 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= v4)
    v8 = v4;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) > v8)
    v8 = *(_QWORD *)(v10 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v8)
    v13 = v8;
  else
    v13 = *(_QWORD *)(v12 + 64);
  if (a2[v13] >= 6u)
  {
    if (v13 <= 3)
      v14 = v13;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v13])
  {
    case 0u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v19 + 16))(a1, a2, v20);
      a1[v13] = 0;
      return v15;
    case 1u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v18);
      v16 = 1;
      goto LABEL_24;
    case 2u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      v16 = 2;
      goto LABEL_24;
    case 3u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
      v16 = 3;
      goto LABEL_24;
    case 4u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
      v16 = 4;
      goto LABEL_24;
    case 5u:
      v16 = 5;
      v15 = a1;
LABEL_24:
      v15[v13] = v16;
      break;
    default:
      v15 = a1;
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return v15;
}

unsigned __int8 *sub_1BDF8C0C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v25 = *(_QWORD *)(v7 - 8);
    v26 = v7;
    if (*(_QWORD *)(v25 + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(v25 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v23 = *(_QWORD *)(v9 - 8);
    v24 = v9;
    if (*(_QWORD *)(v23 + 64) <= v8)
      v10 = v8;
    else
      v10 = *(_QWORD *)(v23 + 64);
    v11 = swift_getAssociatedTypeWitness();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v10)
      v10 = *(_QWORD *)(v12 + 64);
    v13 = swift_getAssociatedTypeWitness();
    v14 = v13;
    v15 = *(_QWORD *)(v13 - 8);
    if (*(_QWORD *)(v15 + 64) <= v10)
      v16 = v10;
    else
      v16 = *(_QWORD *)(v15 + 64);
    if (a1[v16] >= 6u)
    {
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = v5;
    v19 = AssociatedTypeWitness;
    switch(a1[v16])
    {
      case 0u:
        goto LABEL_23;
      case 1u:
        v18 = v25;
        v19 = v26;
        goto LABEL_23;
      case 2u:
        v18 = v23;
        v19 = v24;
        goto LABEL_23;
      case 3u:
        v18 = v12;
        v19 = v11;
        goto LABEL_23;
      case 4u:
        v18 = *(_QWORD *)(v13 - 8);
        v19 = v13;
LABEL_23:
        (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(a1, v19);
        break;
      default:
        break;
    }
    if (a2[v16] >= 6u)
    {
      if (v16 <= 3)
        v20 = v16;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v16])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v16] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
        v21 = 1;
        goto LABEL_37;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
        v21 = 2;
        goto LABEL_37;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
        v21 = 3;
        goto LABEL_37;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 16))(a1, a2, v14);
        v21 = 4;
        goto LABEL_37;
      case 5u:
        v21 = 5;
LABEL_37:
        a1[v16] = v21;
        break;
      default:
        memcpy(a1, a2, v16 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_1BDF8C41C(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = AssociatedTypeWitness;
  v4 = *(_QWORD *)(v19 + 64);
  v18 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v18 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 64) <= v4)
    v8 = v4;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) > v8)
    v8 = *(_QWORD *)(v10 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v8)
    v13 = v8;
  else
    v13 = *(_QWORD *)(v12 + 64);
  if (a2[v13] >= 6u)
  {
    if (v13 <= 3)
      v14 = v13;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v13])
  {
    case 0u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v19 + 32))(a1, a2, v20);
      a1[v13] = 0;
      return v15;
    case 1u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v18);
      v16 = 1;
      goto LABEL_24;
    case 2u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      v16 = 2;
      goto LABEL_24;
    case 3u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 32))(a1, a2, v9);
      v16 = 3;
      goto LABEL_24;
    case 4u:
      v15 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
      v16 = 4;
      goto LABEL_24;
    case 5u:
      v16 = 5;
      v15 = a1;
LABEL_24:
      v15[v13] = v16;
      break;
    default:
      v15 = a1;
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return v15;
}

unsigned __int8 *sub_1BDF8C6B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v25 = *(_QWORD *)(v7 - 8);
    v26 = v7;
    if (*(_QWORD *)(v25 + 64) <= v6)
      v8 = v6;
    else
      v8 = *(_QWORD *)(v25 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v23 = *(_QWORD *)(v9 - 8);
    v24 = v9;
    if (*(_QWORD *)(v23 + 64) <= v8)
      v10 = v8;
    else
      v10 = *(_QWORD *)(v23 + 64);
    v11 = swift_getAssociatedTypeWitness();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v10)
      v10 = *(_QWORD *)(v12 + 64);
    v13 = swift_getAssociatedTypeWitness();
    v14 = v13;
    v15 = *(_QWORD *)(v13 - 8);
    if (*(_QWORD *)(v15 + 64) <= v10)
      v16 = v10;
    else
      v16 = *(_QWORD *)(v15 + 64);
    if (a1[v16] >= 6u)
    {
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = v5;
    v19 = AssociatedTypeWitness;
    switch(a1[v16])
    {
      case 0u:
        goto LABEL_23;
      case 1u:
        v18 = v25;
        v19 = v26;
        goto LABEL_23;
      case 2u:
        v18 = v23;
        v19 = v24;
        goto LABEL_23;
      case 3u:
        v18 = v12;
        v19 = v11;
        goto LABEL_23;
      case 4u:
        v18 = *(_QWORD *)(v13 - 8);
        v19 = v13;
LABEL_23:
        (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(a1, v19);
        break;
      default:
        break;
    }
    if (a2[v16] >= 6u)
    {
      if (v16 <= 3)
        v20 = v16;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v16])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v16] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
        v21 = 1;
        goto LABEL_37;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
        v21 = 2;
        goto LABEL_37;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
        v21 = 3;
        goto LABEL_37;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 32))(a1, a2, v14);
        v21 = 4;
        goto LABEL_37;
      case 5u:
        v21 = 5;
LABEL_37:
        a1[v16] = v21;
        break;
      default:
        memcpy(a1, a2, v16 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1BDF8CA10(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= v4)
    v9 = v4;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_28;
  v10 = v9 + 1;
  v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v14 = ((a2 + ~(-1 << v11) - 249) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v14 < 2)
    {
LABEL_28:
      v16 = *(unsigned __int8 *)(a1 + v9);
      if (v16 >= 7)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_28;
LABEL_21:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 > 3)
      LODWORD(v10) = 4;
    __asm { BR              X11 }
  }
  return (v15 + 250);
}

void sub_1BDF8CC1C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v10 <= v6)
    v10 = v6;
  v11 = v10 + 1;
  if (a3 < 0xFA)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 249) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xF9)
    __asm { BR              X11 }
  v13 = a2 - 250;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF8CEA4(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= v2)
    v6 = v2;
  result = *(unsigned __int8 *)(a1 + v6);
  if (result >= 6)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF8D040(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) <= v4)
    v9 = v4;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (a2 > 5)
  {
    v10 = a2 - 6;
    if (v9 < 4)
    {
      v11 = v10 >> (8 * v9);
      v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 6;
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 6;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    a1[v9] = a2;
  }
}

uint64_t sub_1BDF8D1E4()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BDF8D1EC()
{
  type metadata accessor for TaggedValue_6.TaggedEnum();
}

uint64_t sub_1BDF8D274(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v7)
    v9 = v7;
  v10 = *(_QWORD *)(a2[7] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  if (v9 <= 0x10)
    v9 = 16;
  switch(*(_BYTE *)(a1 + v9))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = (*(uint64_t (**)(void))(v6 + 8))();
      break;
    case 4:
      result = (*(uint64_t (**)(void))(v8 + 8))();
      break;
    case 5:
      result = (*(uint64_t (**)(void))(v10 + 8))();
      break;
    case 6:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v9) <= 3u)
        v11 = *(unsigned __int8 *)(a1 + v9);
      else
        v11 = 4;
      __asm { BR              X19 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF8D3E4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v12 + 64) > v11)
    v11 = *(_QWORD *)(v12 + 64);
  if (v11 <= 0x10)
    v13 = 16;
  else
    v13 = v11;
  switch(*((_BYTE *)a2 + v13))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v13) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v13) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v13) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      *((_BYTE *)a1 + v13) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      *((_BYTE *)a1 + v13) = 4;
      break;
    case 5:
      (*(void (**)(_QWORD *))(v12 + 16))(a1);
      *((_BYTE *)a1 + v13) = 5;
      break;
    case 6:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      *((_BYTE *)a1 + v13) = 6;
      swift_retain();
      break;
    default:
      if (v13 <= 3)
        v14 = v13;
      else
        v14 = 4;
      __asm { BR              X7 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF8D5C4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v20 = *(_QWORD *)(a3[2] - 8);
    v21 = a3[3];
    v5 = *(_QWORD *)(v20 + 64);
    v19 = *(_QWORD *)(v21 - 8);
    if (*(_QWORD *)(v19 + 64) > v5)
      v5 = *(_QWORD *)(v19 + 64);
    v6 = a3[5];
    v18 = a3[4];
    v7 = *(_QWORD *)(v18 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[6];
    v10 = a3[7];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v20 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(a1, v21);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v18);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 5:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 6:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(a1, a2, v21);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v18);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(a1, a2, v6);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v9);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v13) = 5;
        break;
      case 6:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 6;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF8D914(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v12 + 64) > v11)
    v11 = *(_QWORD *)(v12 + 64);
  if (v11 <= 0x10)
    v13 = 16;
  else
    v13 = v11;
  switch(*((_BYTE *)a2 + v13))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v15 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v15 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v15 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v15 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v15 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v12 + 32))(a1);
      v15 = 5;
      break;
    case 6:
      *a1 = *a2;
      v15 = 6;
      break;
    default:
      if (v13 <= 3)
        v14 = v13;
      else
        v14 = 4;
      __asm { BR              X7 }
      return result;
  }
  *((_BYTE *)a1 + v13) = v15;
  return a1;
}

_OWORD *sub_1BDF8DADC(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v21 = *(_QWORD *)(a3[2] - 8);
    v22 = a3[3];
    v5 = *(_QWORD *)(v21 + 64);
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v6 = a3[5];
    v19 = a3[4];
    v7 = *(_QWORD *)(v19 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[6];
    v10 = a3[7];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v21 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v20 + 8))(a1, v22);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v7 + 8))(a1, v19);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 5:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 6:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v21 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v20 + 32))(a1, a2, v22);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v19);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v8 + 32))(a1, a2, v6);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v9);
        v16 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v10);
        v16 = 5;
        break;
      case 6:
        *a1 = *a2;
        v16 = 6;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF8DE0C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = 16;
  if (v3 > 0x10)
    v6 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_31;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 249) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v11 < 2)
    {
LABEL_31:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 7)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_31;
LABEL_24:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 250);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF8DF28 + 4 * byte_1BE1BE8FE[(v7 - 1)]))();
}

void sub_1BDF8DF74(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v8 = v5 + 1;
  if (a3 < 0xFA)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 249) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xF9)
    __asm { BR              X11 }
  v10 = a2 - 250;
  if (v8 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_6()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF8E180()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1BDF8E290(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v12 + 64) > v11)
    v11 = *(_QWORD *)(v12 + 64);
  if (v11 <= 0x10)
    v13 = 16;
  else
    v13 = v11;
  v14 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v12 + 80);
  if ((unint64_t)(v13 + 1) <= 0x18 && (v14 & 0x1000F8) == 0)
  {
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)a1 + v13) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *))(v5 + 16))(a1);
        *((_BYTE *)a1 + v13) = 1;
        return a1;
      case 2:
        (*(void (**)(_QWORD *))(v7 + 16))(a1);
        *((_BYTE *)a1 + v13) = 2;
        return a1;
      case 3:
        (*(void (**)(_QWORD *))(v8 + 16))(a1);
        *((_BYTE *)a1 + v13) = 3;
        return a1;
      case 4:
        (*(void (**)(_QWORD *))(v10 + 16))(a1);
        *((_BYTE *)a1 + v13) = 4;
        return a1;
      case 5:
        (*(void (**)(_QWORD *))(v12 + 16))(a1);
        *((_BYTE *)a1 + v13) = 5;
        return a1;
      case 6:
        v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        *((_BYTE *)a1 + v13) = 6;
        goto LABEL_21;
      default:
        if (v13 <= 3)
          v18 = v13;
        else
          v18 = 4;
        __asm { BR              X7 }
        return result;
    }
  }
  v16 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v16 + (((v14 & 0xF8 | 7u) + 16) & ~(unint64_t)(v14 & 0xF8 | 7u)));
LABEL_21:
  swift_retain();
  return a1;
}

uint64_t sub_1BDF8E4D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v7)
    v9 = v7;
  v10 = *(_QWORD *)(a2[7] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  if (v9 <= 0x10)
    v9 = 16;
  switch(*(_BYTE *)(a1 + v9))
  {
    case 0:
      result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 1:
      result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2:
      result = (*(uint64_t (**)(void))(v5 + 8))();
      break;
    case 3:
      result = (*(uint64_t (**)(void))(v6 + 8))();
      break;
    case 4:
      result = (*(uint64_t (**)(void))(v8 + 8))();
      break;
    case 5:
      result = (*(uint64_t (**)(void))(v10 + 8))();
      break;
    case 6:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v9) <= 3u)
        v11 = *(unsigned __int8 *)(a1 + v9);
      else
        v11 = 4;
      __asm { BR              X19 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF8E644(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v12 + 64) > v11)
    v11 = *(_QWORD *)(v12 + 64);
  if (v11 <= 0x10)
    v13 = 16;
  else
    v13 = v11;
  switch(*((_BYTE *)a2 + v13))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v13) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v13) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v13) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      *((_BYTE *)a1 + v13) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      *((_BYTE *)a1 + v13) = 4;
      break;
    case 5:
      (*(void (**)(_QWORD *))(v12 + 16))(a1);
      *((_BYTE *)a1 + v13) = 5;
      break;
    case 6:
      v15 = a2[1];
      *a1 = *a2;
      a1[1] = v15;
      *((_BYTE *)a1 + v13) = 6;
      swift_retain();
      break;
    default:
      if (v13 <= 3)
        v14 = v13;
      else
        v14 = 4;
      __asm { BR              X7 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF8E824(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v20 = *(_QWORD *)(a3[2] - 8);
    v21 = a3[3];
    v5 = *(_QWORD *)(v20 + 64);
    v19 = *(_QWORD *)(v21 - 8);
    if (*(_QWORD *)(v19 + 64) > v5)
      v5 = *(_QWORD *)(v19 + 64);
    v6 = a3[5];
    v18 = a3[4];
    v7 = *(_QWORD *)(v18 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[6];
    v10 = a3[7];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v20 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(a1, v21);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v18);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 5:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 6:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v19 + 16))(a1, a2, v21);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v18);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(a1, a2, v6);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v9);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v13) = 5;
        break;
      case 6:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 6;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF8EB74(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v12 + 64) > v11)
    v11 = *(_QWORD *)(v12 + 64);
  if (v11 <= 0x10)
    v13 = 16;
  else
    v13 = v11;
  switch(*((_BYTE *)a2 + v13))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v15 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v15 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v15 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v15 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v15 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v12 + 32))(a1);
      v15 = 5;
      break;
    case 6:
      *a1 = *a2;
      v15 = 6;
      break;
    default:
      if (v13 <= 3)
        v14 = v13;
      else
        v14 = 4;
      __asm { BR              X7 }
      return result;
  }
  *((_BYTE *)a1 + v13) = v15;
  return a1;
}

_OWORD *sub_1BDF8ED3C(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v21 = *(_QWORD *)(a3[2] - 8);
    v22 = a3[3];
    v5 = *(_QWORD *)(v21 + 64);
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v6 = a3[5];
    v19 = a3[4];
    v7 = *(_QWORD *)(v19 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[6];
    v10 = a3[7];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v21 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v20 + 8))(a1, v22);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v7 + 8))(a1, v19);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 5:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 6:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v21 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v20 + 32))(a1, a2, v22);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v19);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v8 + 32))(a1, a2, v6);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v9);
        v16 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v10);
        v16 = 5;
        break;
      case 6:
        *a1 = *a2;
        v16 = 6;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF8F06C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = 16;
  if (v3 > 0x10)
    v6 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_31;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 249) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v11 < 2)
    {
LABEL_31:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 7)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_31;
LABEL_24:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 250);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF8F188 + 4 * byte_1BE1BE96C[(v7 - 1)]))();
}

void sub_1BDF8F1D4(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v8 = v5 + 1;
  if (a3 < 0xFA)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 249) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xF9)
    __asm { BR              X11 }
  v10 = a2 - 250;
  if (v8 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF8F3D4(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = a2[5];
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64);
  v4 = a2[7];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = 16;
  if (v2 > 0x10)
    v5 = v2;
  if (*(unsigned __int8 *)(a1 + v5) < 7u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF8F474 + 4 * byte_1BE1BE97A[v6]))();
}

void sub_1BDF8F4BC(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  if (a2 > 6)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v9)
      v9 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v9)
      v9 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v10 = a3[5];
    if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v9)
      v9 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v9)
      v9 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v11 = a3[7];
    if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v9)
      v9 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
    if (v9 <= 0x10)
      v12 = 16;
    else
      v12 = v9;
    v13 = a2 - 7;
    if (v12 < 4)
    {
      v14 = v13 >> (8 * v12);
      v15 = v13 & ~(-1 << (8 * v12));
      a1[v12] = v14 + 7;
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v12 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
    else
    {
      a1[v12] = 7;
      bzero(a1, v12);
      *(_DWORD *)a1 = v13;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3[7] - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v8 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (v8 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v8 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (v7 <= v8)
      v7 = v8;
    if (v6 <= v7)
      v6 = v7;
    if (v5 <= v6)
      v5 = v6;
    if (v4 <= v5)
      v4 = v5;
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF8F64C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            result = swift_getAssociatedTypeWitness();
            if (v6 <= 0x3F)
            {
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1BDF8F7F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  int v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v26 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v26 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v25 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v25 - 8);
  if (*(_QWORD *)(v6 + 64) > v4)
    v4 = *(_QWORD *)(v6 + 64);
  v24 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v24 - 8);
  if (*(_QWORD *)(v7 + 64) <= v4)
    v8 = v4;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v23 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v23 - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) <= v8)
    v12 = v8;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = v12 + 1;
  v14 = *(_DWORD *)(v11 + 80);
  v15 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v3 + 80) | *(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80) | v14);
  if (v15 <= 7
    && v13 <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v3 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | v14) & 0x100000) == 0)
  {
    if (*((unsigned __int8 *)a2 + v12) >= 7u)
    {
      if (v12 <= 3)
        v21 = v12;
      else
        v21 = 4;
      __asm { BR              X14 }
    }
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        v19 = a1;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v12) = 0;
        break;
      case 1:
        v19 = a1;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v26);
        *((_BYTE *)a1 + v12) = 1;
        break;
      case 2:
        v19 = a1;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v25);
        *((_BYTE *)a1 + v12) = 2;
        break;
      case 3:
        v19 = a1;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v24);
        *((_BYTE *)a1 + v12) = 3;
        break;
      case 4:
        v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16);
        v19 = a1;
        v22(a1, a2, v23);
        *((_BYTE *)a1 + v12) = 4;
        break;
      case 5:
        v19 = a1;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v12) = 5;
        break;
      case 6:
        v19 = a1;
        *((_BYTE *)a1 + v12) = 6;
        break;
      default:
        v19 = a1;
        memcpy(a1, a2, v13);
        break;
    }
  }
  else
  {
    v18 = *a2;
    *a1 = *a2;
    v19 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return v19;
}

uint64_t sub_1BDF8FB78(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v5 - 8);
  v18 = v5;
  if (*(_QWORD *)(v17 + 64) > v4)
    v4 = *(_QWORD *)(v17 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v6 - 8);
  v16 = v6;
  if (*(_QWORD *)(v15 + 64) > v4)
    v4 = *(_QWORD *)(v15 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v14 - 8);
  if (*(_QWORD *)(v7 + 64) <= v4)
    v8 = v4;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) > v8)
    v8 = *(_QWORD *)(v10 + 64);
  result = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v12 <= v8)
    v12 = v8;
  if (*(unsigned __int8 *)(a1 + v12) >= 7u)
  {
    if (v12 <= 3)
      v13 = v12;
    else
      v13 = 4;
    __asm { BR              X14 }
  }
  switch(*(_BYTE *)(a1 + v12))
  {
    case 0:
      goto LABEL_23;
    case 1:
      v3 = v17;
      AssociatedTypeWitness = v18;
      goto LABEL_23;
    case 2:
      v3 = v15;
      AssociatedTypeWitness = v16;
      goto LABEL_23;
    case 3:
      v3 = v7;
      AssociatedTypeWitness = v14;
      goto LABEL_23;
    case 4:
      v3 = v10;
      AssociatedTypeWitness = v9;
      goto LABEL_23;
    case 5:
      v3 = *(_QWORD *)(result - 8);
      AssociatedTypeWitness = result;
LABEL_23:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_1BDF8FDF0(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void (*v17)(_BYTE *, unsigned __int8 *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = AssociatedTypeWitness;
  v4 = *(_QWORD *)(v22 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  if (*(_QWORD *)(v20 + 64) > v4)
    v4 = *(_QWORD *)(v20 + 64);
  v19 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v19 - 8);
  if (*(_QWORD *)(v6 + 64) > v4)
    v4 = *(_QWORD *)(v6 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v4)
    v9 = v4;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) > v9)
    v9 = *(_QWORD *)(v11 + 64);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) <= v9)
    v14 = v9;
  else
    v14 = *(_QWORD *)(v13 + 64);
  if (a2[v14] >= 7u)
  {
    if (v14 <= 3)
      v15 = v14;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v14])
  {
    case 0u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v22 + 16))(a1, a2, v23);
      a1[v14] = 0;
      break;
    case 1u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v20 + 16))(a1, a2, v21);
      a1[v14] = 1;
      break;
    case 2u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v19);
      a1[v14] = 2;
      break;
    case 3u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      a1[v14] = 3;
      break;
    case 4u:
      v17 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v11 + 16);
      v16 = a1;
      v17(a1, a2, v10);
      a1[v14] = 4;
      break;
    case 5u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v13 + 16))(a1, a2, v12);
      a1[v14] = 5;
      break;
    case 6u:
      v16 = a1;
      a1[v14] = 6;
      break;
    default:
      v16 = a1;
      memcpy(a1, a2, v14 + 1);
      break;
  }
  return v16;
}

unsigned __int8 *sub_1BDF9010C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v27 = *(_QWORD *)(v7 - 8);
    v28 = v7;
    if (*(_QWORD *)(v27 + 64) > v6)
      v6 = *(_QWORD *)(v27 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v25 = *(_QWORD *)(v8 - 8);
    v26 = v8;
    if (*(_QWORD *)(v25 + 64) <= v6)
      v9 = v6;
    else
      v9 = *(_QWORD *)(v25 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v23 = *(_QWORD *)(v10 - 8);
    v24 = v10;
    if (*(_QWORD *)(v23 + 64) <= v9)
      v11 = v9;
    else
      v11 = *(_QWORD *)(v23 + 64);
    v12 = swift_getAssociatedTypeWitness();
    v13 = *(_QWORD *)(v12 - 8);
    if (*(_QWORD *)(v13 + 64) > v11)
      v11 = *(_QWORD *)(v13 + 64);
    v14 = swift_getAssociatedTypeWitness();
    v15 = v14;
    v16 = *(_QWORD *)(v14 - 8);
    if (*(_QWORD *)(v16 + 64) <= v11)
      v17 = v11;
    else
      v17 = *(_QWORD *)(v16 + 64);
    if (a1[v17] >= 7u)
    {
      if (v17 <= 3)
        v18 = v17;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = v5;
    v20 = AssociatedTypeWitness;
    switch(a1[v17])
    {
      case 0u:
        goto LABEL_26;
      case 1u:
        v19 = v27;
        v20 = v28;
        goto LABEL_26;
      case 2u:
        v19 = v25;
        v20 = v26;
        goto LABEL_26;
      case 3u:
        v19 = v23;
        v20 = v24;
        goto LABEL_26;
      case 4u:
        v19 = v13;
        v20 = v12;
        goto LABEL_26;
      case 5u:
        v19 = *(_QWORD *)(v14 - 8);
        v20 = v14;
LABEL_26:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
    if (a2[v17] >= 7u)
    {
      if (v17 <= 3)
        v21 = v17;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v17])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v17] = 0;
        break;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v28);
        a1[v17] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
        a1[v17] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
        a1[v17] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 16))(a1, a2, v12);
        a1[v17] = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v16 + 16))(a1, a2, v15);
        a1[v17] = 5;
        break;
      case 6u:
        a1[v17] = 6;
        break;
      default:
        memcpy(a1, a2, v17 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_1BDF904FC(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void (*v17)(_BYTE *, unsigned __int8 *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = AssociatedTypeWitness;
  v4 = *(_QWORD *)(v22 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  if (*(_QWORD *)(v20 + 64) > v4)
    v4 = *(_QWORD *)(v20 + 64);
  v19 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v19 - 8);
  if (*(_QWORD *)(v6 + 64) > v4)
    v4 = *(_QWORD *)(v6 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v4)
    v9 = v4;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) > v9)
    v9 = *(_QWORD *)(v11 + 64);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) <= v9)
    v14 = v9;
  else
    v14 = *(_QWORD *)(v13 + 64);
  if (a2[v14] >= 7u)
  {
    if (v14 <= 3)
      v15 = v14;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v14])
  {
    case 0u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v22 + 32))(a1, a2, v23);
      a1[v14] = 0;
      break;
    case 1u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v20 + 32))(a1, a2, v21);
      a1[v14] = 1;
      break;
    case 2u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v19);
      a1[v14] = 2;
      break;
    case 3u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      a1[v14] = 3;
      break;
    case 4u:
      v17 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v11 + 32);
      v16 = a1;
      v17(a1, a2, v10);
      a1[v14] = 4;
      break;
    case 5u:
      v16 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v13 + 32))(a1, a2, v12);
      a1[v14] = 5;
      break;
    case 6u:
      v16 = a1;
      a1[v14] = 6;
      break;
    default:
      v16 = a1;
      memcpy(a1, a2, v14 + 1);
      break;
  }
  return v16;
}

unsigned __int8 *sub_1BDF90818(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v27 = *(_QWORD *)(v7 - 8);
    v28 = v7;
    if (*(_QWORD *)(v27 + 64) > v6)
      v6 = *(_QWORD *)(v27 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v25 = *(_QWORD *)(v8 - 8);
    v26 = v8;
    if (*(_QWORD *)(v25 + 64) <= v6)
      v9 = v6;
    else
      v9 = *(_QWORD *)(v25 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v23 = *(_QWORD *)(v10 - 8);
    v24 = v10;
    if (*(_QWORD *)(v23 + 64) <= v9)
      v11 = v9;
    else
      v11 = *(_QWORD *)(v23 + 64);
    v12 = swift_getAssociatedTypeWitness();
    v13 = *(_QWORD *)(v12 - 8);
    if (*(_QWORD *)(v13 + 64) > v11)
      v11 = *(_QWORD *)(v13 + 64);
    v14 = swift_getAssociatedTypeWitness();
    v15 = v14;
    v16 = *(_QWORD *)(v14 - 8);
    if (*(_QWORD *)(v16 + 64) <= v11)
      v17 = v11;
    else
      v17 = *(_QWORD *)(v16 + 64);
    if (a1[v17] >= 7u)
    {
      if (v17 <= 3)
        v18 = v17;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = v5;
    v20 = AssociatedTypeWitness;
    switch(a1[v17])
    {
      case 0u:
        goto LABEL_26;
      case 1u:
        v19 = v27;
        v20 = v28;
        goto LABEL_26;
      case 2u:
        v19 = v25;
        v20 = v26;
        goto LABEL_26;
      case 3u:
        v19 = v23;
        v20 = v24;
        goto LABEL_26;
      case 4u:
        v19 = v13;
        v20 = v12;
        goto LABEL_26;
      case 5u:
        v19 = *(_QWORD *)(v14 - 8);
        v20 = v14;
LABEL_26:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
    if (a2[v17] >= 7u)
    {
      if (v17 <= 3)
        v21 = v17;
      else
        v21 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v17])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v17] = 0;
        break;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v28);
        a1[v17] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
        a1[v17] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
        a1[v17] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 32))(a1, a2, v12);
        a1[v17] = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v16 + 32))(a1, a2, v15);
        a1[v17] = 5;
        break;
      case 6u:
        a1[v17] = 6;
        break;
      default:
        memcpy(a1, a2, v17 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1BDF90C08(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) <= v4)
    v10 = v4;
  else
    v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_30;
  v11 = v10 + 1;
  v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    v15 = ((a2 + ~(-1 << v12) - 248) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_30;
      goto LABEL_23;
    }
    if (v15 < 2)
    {
LABEL_30:
      v17 = *(unsigned __int8 *)(a1 + v10);
      if (v17 >= 8)
        return (v17 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_30;
LABEL_23:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X11 }
  }
  return (v16 + 249);
}

void sub_1BDF90E40(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v11 <= v6)
    v11 = v6;
  v12 = v11 + 1;
  if (a3 < 0xF9)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 + ~(-1 << (8 * v12)) - 248) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (a2 <= 0xF8)
    __asm { BR              X11 }
  v14 = a2 - 249;
  if (v12 < 4)
  {
    if ((_DWORD)v11 != -1)
    {
      v16 = v14 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v12 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11 + 1);
    *(_DWORD *)a1 = v14;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF910F4(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v2)
    v7 = v2;
  result = *(unsigned __int8 *)(a1 + v7);
  if (result >= 7)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF912BC(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) <= v4)
    v10 = v4;
  else
    v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  if (a2 > 6)
  {
    v11 = a2 - 7;
    if (v10 < 4)
    {
      v12 = v11 >> (8 * v10);
      v13 = v11 & ~(-1 << (8 * v10));
      a1[v10] = v12 + 7;
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
    else
    {
      a1[v10] = 7;
      bzero(a1, v10);
      *(_DWORD *)a1 = v11;
    }
  }
  else
  {
    a1[v10] = a2;
  }
}

uint64_t sub_1BDF9148C()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BDF91494()
{
  type metadata accessor for TaggedValue_7.TaggedEnum();
}

uint64_t sub_1BDF91524(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v7)
    v9 = v7;
  v10 = *(_QWORD *)(a2[7] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a2[8] - 8);
  if (*(_QWORD *)(v12 + 64) > v11)
    v11 = *(_QWORD *)(v12 + 64);
  if (v11 <= 0x10)
    v11 = 16;
  switch(*(_BYTE *)(a1 + v11))
  {
    case 0:
      v14 = *(uint64_t (**)(void))(v2 + 8);
      goto LABEL_31;
    case 1:
      v14 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_31;
    case 2:
      v14 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_31;
    case 3:
      v14 = *(uint64_t (**)(void))(v6 + 8);
      goto LABEL_31;
    case 4:
      v14 = *(uint64_t (**)(void))(v8 + 8);
      goto LABEL_31;
    case 5:
      v14 = *(uint64_t (**)(void))(v10 + 8);
      goto LABEL_31;
    case 6:
      v14 = *(uint64_t (**)(void))(v12 + 8);
LABEL_31:
      result = v14();
      break;
    case 7:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v11) <= 3u)
        v13 = *(unsigned __int8 *)(a1 + v11);
      else
        v13 = 4;
      __asm { BR              X21 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF916AC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  v13 = *(_QWORD *)(v12 + 64);
  if (v13 <= v11)
    v13 = v11;
  v14 = *(_QWORD *)(a3[8] - 8);
  if (*(_QWORD *)(v14 + 64) > v13)
    v13 = *(_QWORD *)(v14 + 64);
  if (v13 <= 0x10)
    v15 = 16;
  else
    v15 = v13;
  switch(*((_BYTE *)a2 + v15))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v15) = 0;
      return a1;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      v17 = 1;
      goto LABEL_32;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      v17 = 2;
      goto LABEL_32;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      v17 = 3;
      goto LABEL_32;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      v17 = 4;
      goto LABEL_32;
    case 5:
      (*(void (**)(_QWORD *))(v12 + 16))(a1);
      v17 = 5;
      goto LABEL_32;
    case 6:
      (*(void (**)(_QWORD *))(v14 + 16))(a1);
      v17 = 6;
LABEL_32:
      *((_BYTE *)a1 + v15) = v17;
      break;
    case 7:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *((_BYTE *)a1 + v15) = 7;
      swift_retain();
      break;
    default:
      if (v15 <= 3)
        v16 = v15;
      else
        v16 = 4;
      __asm { BR              X22 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF918B0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = *(_QWORD *)(a3[2] - 8);
    v25 = a3[3];
    v5 = *(_QWORD *)(v24 + 64);
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = a3[5];
    v22 = a3[4];
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v6 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[6];
    v8 = a3[7];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[8];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v24 + 8);
        goto LABEL_30;
      case 1:
        v15 = *(void (**)(void))(v23 + 8);
        goto LABEL_30;
      case 2:
        v15 = *(void (**)(void))(v20 + 8);
        goto LABEL_30;
      case 3:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_30;
      case 4:
        v15 = *(void (**)(void))(v9 + 8);
        goto LABEL_30;
      case 5:
        v15 = *(void (**)(void))(v10 + 8);
        goto LABEL_30;
      case 6:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_30:
        v15();
        break;
      case 7:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(a1, a2, v25);
        v17 = 1;
        goto LABEL_45;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v22);
        v17 = 2;
        goto LABEL_45;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v21);
        v17 = 3;
        goto LABEL_45;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v7);
        v17 = 4;
        goto LABEL_45;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v8);
        v17 = 5;
        goto LABEL_45;
      case 6:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        v17 = 6;
LABEL_45:
        *((_BYTE *)a1 + v13) = v17;
        break;
      case 7:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 7;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF91C28(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  v13 = *(_QWORD *)(v12 + 64);
  if (v13 <= v11)
    v13 = v11;
  v14 = *(_QWORD *)(a3[8] - 8);
  if (*(_QWORD *)(v14 + 64) > v13)
    v13 = *(_QWORD *)(v14 + 64);
  if (v13 <= 0x10)
    v15 = 16;
  else
    v15 = v13;
  switch(*((_BYTE *)a2 + v15))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v17 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v17 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v17 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v17 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v17 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v12 + 32))(a1);
      v17 = 5;
      break;
    case 6:
      (*(void (**)(_OWORD *))(v14 + 32))(a1);
      v17 = 6;
      break;
    case 7:
      *a1 = *a2;
      v17 = 7;
      break;
    default:
      if (v15 <= 3)
        v16 = v15;
      else
        v16 = 4;
      __asm { BR              X22 }
      return result;
  }
  *((_BYTE *)a1 + v15) = v17;
  return a1;
}

_OWORD *sub_1BDF91E24(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _OWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = *(_QWORD *)(a3[2] - 8);
    v25 = a3[3];
    v5 = *(_QWORD *)(v24 + 64);
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = a3[5];
    v22 = a3[4];
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v6 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[6];
    v8 = a3[7];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[8];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v24 + 8);
        goto LABEL_30;
      case 1:
        v15 = *(void (**)(void))(v23 + 8);
        goto LABEL_30;
      case 2:
        v15 = *(void (**)(void))(v20 + 8);
        goto LABEL_30;
      case 3:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_30;
      case 4:
        v15 = *(void (**)(void))(v9 + 8);
        goto LABEL_30;
      case 5:
        v15 = *(void (**)(void))(v10 + 8);
        goto LABEL_30;
      case 6:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_30:
        v15();
        break;
      case 7:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v24 + 32))(a1, a2, v19);
        v17 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v23 + 32))(a1, a2, v25);
        v17 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v20 + 32))(a1, a2, v22);
        v17 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v21);
        v17 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v7);
        v17 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v8);
        v17 = 5;
        break;
      case 6:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        v17 = 6;
        break;
      case 7:
        *a1 = *a2;
        v17 = 7;
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v17;
  }
  return a1;
}

uint64_t sub_1BDF9218C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
  v6 = 16;
  if (v3 > 0x10)
    v6 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_33;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 248) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_33;
      goto LABEL_26;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_33;
      goto LABEL_26;
    }
    if (v11 < 2)
    {
LABEL_33:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 8)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_33;
LABEL_26:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 249);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF922BC + 4 * byte_1BE1BEA4A[(v7 - 1)]))();
}

void sub_1BDF92308(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v8 = v5 + 1;
  if (a3 < 0xF9)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 248) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xF8)
    __asm { BR              X11 }
  v10 = a2 - 249;
  if (v8 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_7()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF92528()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1BDF92658(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  v13 = *(_QWORD *)(v12 + 64);
  if (v13 <= v11)
    v13 = v11;
  v14 = *(_QWORD *)(a3[8] - 8);
  if (*(_QWORD *)(v14 + 64) > v13)
    v13 = *(_QWORD *)(v14 + 64);
  if (v13 <= 0x10)
    v15 = 16;
  else
    v15 = v13;
  v16 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v12 + 80) | *(_DWORD *)(v14 + 80);
  if ((unint64_t)(v15 + 1) <= 0x18 && (v16 & 0x1000F8) == 0)
  {
    switch(*((_BYTE *)a2 + v15))
    {
      case 0:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)a1 + v15) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *))(v5 + 16))(a1);
        *((_BYTE *)a1 + v15) = 1;
        return a1;
      case 2:
        (*(void (**)(_QWORD *))(v7 + 16))(a1);
        *((_BYTE *)a1 + v15) = 2;
        return a1;
      case 3:
        (*(void (**)(_QWORD *))(v8 + 16))(a1);
        *((_BYTE *)a1 + v15) = 3;
        return a1;
      case 4:
        (*(void (**)(_QWORD *))(v10 + 16))(a1);
        *((_BYTE *)a1 + v15) = 4;
        return a1;
      case 5:
        (*(void (**)(_QWORD *))(v12 + 16))(a1);
        *((_BYTE *)a1 + v15) = 5;
        return a1;
      case 6:
        (*(void (**)(_QWORD *))(v14 + 16))(a1);
        *((_BYTE *)a1 + v15) = 6;
        return a1;
      case 7:
        v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        *((_BYTE *)a1 + v15) = 7;
        goto LABEL_23;
      default:
        if (v15 <= 3)
          v20 = v15;
        else
          v20 = 4;
        __asm { BR              X22 }
        return result;
    }
  }
  v18 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v18 + (((v16 & 0xF8 | 7u) + 16) & ~(unint64_t)(v16 & 0xF8 | 7u)));
LABEL_23:
  swift_retain();
  return a1;
}

uint64_t sub_1BDF928DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v7)
    v9 = v7;
  v10 = *(_QWORD *)(a2[7] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a2[8] - 8);
  if (*(_QWORD *)(v12 + 64) > v11)
    v11 = *(_QWORD *)(v12 + 64);
  if (v11 <= 0x10)
    v11 = 16;
  switch(*(_BYTE *)(a1 + v11))
  {
    case 0:
      v14 = *(uint64_t (**)(void))(v2 + 8);
      goto LABEL_31;
    case 1:
      v14 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_31;
    case 2:
      v14 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_31;
    case 3:
      v14 = *(uint64_t (**)(void))(v6 + 8);
      goto LABEL_31;
    case 4:
      v14 = *(uint64_t (**)(void))(v8 + 8);
      goto LABEL_31;
    case 5:
      v14 = *(uint64_t (**)(void))(v10 + 8);
      goto LABEL_31;
    case 6:
      v14 = *(uint64_t (**)(void))(v12 + 8);
LABEL_31:
      result = v14();
      break;
    case 7:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v11) <= 3u)
        v13 = *(unsigned __int8 *)(a1 + v11);
      else
        v13 = 4;
      __asm { BR              X21 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF92A64(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  v13 = *(_QWORD *)(v12 + 64);
  if (v13 <= v11)
    v13 = v11;
  v14 = *(_QWORD *)(a3[8] - 8);
  if (*(_QWORD *)(v14 + 64) > v13)
    v13 = *(_QWORD *)(v14 + 64);
  if (v13 <= 0x10)
    v15 = 16;
  else
    v15 = v13;
  switch(*((_BYTE *)a2 + v15))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v15) = 0;
      return a1;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      v17 = 1;
      goto LABEL_32;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      v17 = 2;
      goto LABEL_32;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      v17 = 3;
      goto LABEL_32;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      v17 = 4;
      goto LABEL_32;
    case 5:
      (*(void (**)(_QWORD *))(v12 + 16))(a1);
      v17 = 5;
      goto LABEL_32;
    case 6:
      (*(void (**)(_QWORD *))(v14 + 16))(a1);
      v17 = 6;
LABEL_32:
      *((_BYTE *)a1 + v15) = v17;
      break;
    case 7:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *((_BYTE *)a1 + v15) = 7;
      swift_retain();
      break;
    default:
      if (v15 <= 3)
        v16 = v15;
      else
        v16 = 4;
      __asm { BR              X22 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF92C68(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = *(_QWORD *)(a3[2] - 8);
    v25 = a3[3];
    v5 = *(_QWORD *)(v24 + 64);
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = a3[5];
    v22 = a3[4];
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v6 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[6];
    v8 = a3[7];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[8];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v24 + 8);
        goto LABEL_30;
      case 1:
        v15 = *(void (**)(void))(v23 + 8);
        goto LABEL_30;
      case 2:
        v15 = *(void (**)(void))(v20 + 8);
        goto LABEL_30;
      case 3:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_30;
      case 4:
        v15 = *(void (**)(void))(v9 + 8);
        goto LABEL_30;
      case 5:
        v15 = *(void (**)(void))(v10 + 8);
        goto LABEL_30;
      case 6:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_30:
        v15();
        break;
      case 7:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(a1, a2, v25);
        v17 = 1;
        goto LABEL_45;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v22);
        v17 = 2;
        goto LABEL_45;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v21);
        v17 = 3;
        goto LABEL_45;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v7);
        v17 = 4;
        goto LABEL_45;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v8);
        v17 = 5;
        goto LABEL_45;
      case 6:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        v17 = 6;
LABEL_45:
        *((_BYTE *)a1 + v13) = v17;
        break;
      case 7:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 7;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF92FE0(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = *(_QWORD *)(a3[7] - 8);
  v13 = *(_QWORD *)(v12 + 64);
  if (v13 <= v11)
    v13 = v11;
  v14 = *(_QWORD *)(a3[8] - 8);
  if (*(_QWORD *)(v14 + 64) > v13)
    v13 = *(_QWORD *)(v14 + 64);
  if (v13 <= 0x10)
    v15 = 16;
  else
    v15 = v13;
  switch(*((_BYTE *)a2 + v15))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v17 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v17 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v17 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v17 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v17 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v12 + 32))(a1);
      v17 = 5;
      break;
    case 6:
      (*(void (**)(_OWORD *))(v14 + 32))(a1);
      v17 = 6;
      break;
    case 7:
      *a1 = *a2;
      v17 = 7;
      break;
    default:
      if (v15 <= 3)
        v16 = v15;
      else
        v16 = 4;
      __asm { BR              X22 }
      return result;
  }
  *((_BYTE *)a1 + v15) = v17;
  return a1;
}

_OWORD *sub_1BDF931DC(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  char v17;
  _OWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = *(_QWORD *)(a3[2] - 8);
    v25 = a3[3];
    v5 = *(_QWORD *)(v24 + 64);
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = a3[5];
    v22 = a3[4];
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v6 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[6];
    v8 = a3[7];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[8];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v19 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        v15 = *(void (**)(void))(v24 + 8);
        goto LABEL_30;
      case 1:
        v15 = *(void (**)(void))(v23 + 8);
        goto LABEL_30;
      case 2:
        v15 = *(void (**)(void))(v20 + 8);
        goto LABEL_30;
      case 3:
        v15 = *(void (**)(void))(v6 + 8);
        goto LABEL_30;
      case 4:
        v15 = *(void (**)(void))(v9 + 8);
        goto LABEL_30;
      case 5:
        v15 = *(void (**)(void))(v10 + 8);
        goto LABEL_30;
      case 6:
        v15 = *(void (**)(void))(v12 + 8);
LABEL_30:
        v15();
        break;
      case 7:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v24 + 32))(a1, a2, v19);
        v17 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v23 + 32))(a1, a2, v25);
        v17 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v20 + 32))(a1, a2, v22);
        v17 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v21);
        v17 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v7);
        v17 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v8);
        v17 = 5;
        break;
      case 6:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        v17 = 6;
        break;
      case 7:
        *a1 = *a2;
        v17 = 7;
        break;
      default:
        if (v13 <= 3)
          v16 = v13;
        else
          v16 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v17;
  }
  return a1;
}

uint64_t sub_1BDF93544(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
  v6 = 16;
  if (v3 > 0x10)
    v6 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_33;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 248) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_33;
      goto LABEL_26;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_33;
      goto LABEL_26;
    }
    if (v11 < 2)
    {
LABEL_33:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 8)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_33;
LABEL_26:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 249);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF93674 + 4 * byte_1BE1BEAC0[(v7 - 1)]))();
}

void sub_1BDF936C0(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v8 = v5 + 1;
  if (a3 < 0xF9)
  {
    v9 = 0u;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 248) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xF8)
    __asm { BR              X11 }
  v10 = a2 - 249;
  if (v8 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF938D4(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = a2[5];
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64);
  v4 = a2[7];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[8] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[8] - 8) + 64);
  v5 = 16;
  if (v2 > 0x10)
    v5 = v2;
  if (*(unsigned __int8 *)(a1 + v5) < 8u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF93988 + 4 * byte_1BE1BEACE[v6]))();
}

void sub_1BDF939D0(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  if (a2 > 7)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v10)
      v10 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v10)
      v10 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v11 = a3[5];
    if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v10)
      v10 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v10)
      v10 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v12 = a3[7];
    if (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) > v10)
      v10 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v10)
      v10 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
    if (v10 <= 0x10)
      v13 = 16;
    else
      v13 = v10;
    v14 = a2 - 8;
    if (v13 < 4)
    {
      v15 = v14 >> (8 * v13);
      v16 = v14 & ~(-1 << (8 * v13));
      a1[v13] = v15 + 8;
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
    else
    {
      a1[v13] = 8;
      bzero(a1, v13);
      *(_DWORD *)a1 = v14;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(a3[7] - 8) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
    v8 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v9 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (v9 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v9 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (v8 <= v9)
      v8 = v9;
    if (v7 <= v8)
      v7 = v8;
    if (v6 <= v7)
      v6 = v7;
    if (v5 <= v6)
      v5 = v6;
    if (v4 <= v5)
      v4 = v5;
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF93B88()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            result = swift_getAssociatedTypeWitness();
            if (v6 <= 0x3F)
            {
              result = swift_getAssociatedTypeWitness();
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1BDF93D64(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  void (*v23)(uint64_t *);

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) > v3)
    v3 = *(_QWORD *)(v4 + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v5 + 64) <= v3)
    v6 = v3;
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v7 + 64) <= v6)
    v8 = v6;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v9 + 64) <= v8)
    v10 = v8;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v11 + 64) > v10)
    v10 = *(_QWORD *)(v11 + 64);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v12 + 64) <= v10)
    v13 = v10;
  else
    v13 = *(_QWORD *)(v12 + 64);
  v14 = v13 + 1;
  v15 = *(_DWORD *)(v12 + 80);
  v16 = (*(_BYTE *)(v4 + 80) | *(_BYTE *)(v2 + 80) | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80) | *(_BYTE *)(v11 + 80) | v15);
  if (v16 <= 7
    && v14 <= 0x18
    && ((*(_DWORD *)(v4 + 80) | *(_DWORD *)(v2 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v11 + 80) | v15) & 0x100000) == 0)
  {
    if (*((unsigned __int8 *)a2 + v13) >= 8u)
    {
      if (v13 <= 3)
        v22 = v13;
      else
        v22 = 4;
      __asm { BR              X14 }
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        v20 = a1;
        (*(void (**)(uint64_t *))(v2 + 16))(a1);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        v20 = a1;
        (*(void (**)(uint64_t *))(v4 + 16))(a1);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        v20 = a1;
        (*(void (**)(uint64_t *))(v5 + 16))(a1);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        v23 = *(void (**)(uint64_t *))(v7 + 16);
        v20 = a1;
        v23(a1);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        v20 = a1;
        (*(void (**)(uint64_t *))(v9 + 16))(a1);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        v20 = a1;
        (*(void (**)(uint64_t *))(v11 + 16))(a1);
        *((_BYTE *)a1 + v13) = 5;
        break;
      case 6:
        v20 = a1;
        (*(void (**)(uint64_t *))(v12 + 16))(a1);
        *((_BYTE *)a1 + v13) = 6;
        break;
      case 7:
        v20 = a1;
        *((_BYTE *)a1 + v13) = 7;
        break;
      default:
        v20 = a1;
        memcpy(a1, a2, v14);
        break;
    }
  }
  else
  {
    v19 = *a2;
    *a1 = *a2;
    v20 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  return v20;
}

uint64_t sub_1BDF94124(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  if (*(_QWORD *)(v20 + 64) > v3)
    v3 = *(_QWORD *)(v20 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v5 - 8);
  v19 = v5;
  if (*(_QWORD *)(v18 + 64) > v3)
    v3 = *(_QWORD *)(v18 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  if (*(_QWORD *)(v16 + 64) <= v3)
    v7 = v3;
  else
    v7 = *(_QWORD *)(v16 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) <= v7)
    v10 = v7;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) > v10)
    v10 = *(_QWORD *)(v12 + 64);
  result = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v14 <= v10)
    v14 = v10;
  if (*(unsigned __int8 *)(a1 + v14) >= 8u)
  {
    if (v14 <= 3)
      v15 = v14;
    else
      v15 = 4;
    __asm { BR              X14 }
  }
  switch(*(_BYTE *)(a1 + v14))
  {
    case 0:
      goto LABEL_27;
    case 1:
      v2 = v20;
      AssociatedTypeWitness = v21;
      goto LABEL_27;
    case 2:
      v2 = v18;
      AssociatedTypeWitness = v19;
      goto LABEL_27;
    case 3:
      v2 = v16;
      AssociatedTypeWitness = v17;
      goto LABEL_27;
    case 4:
      v2 = v9;
      AssociatedTypeWitness = v8;
      goto LABEL_27;
    case 5:
      v2 = v12;
      AssociatedTypeWitness = v11;
      goto LABEL_27;
    case 6:
      v2 = *(_QWORD *)(result - 8);
      AssociatedTypeWitness = result;
LABEL_27:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_1BDF943D8(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  void (*v20)(_BYTE *, unsigned __int8 *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = AssociatedTypeWitness;
  v4 = *(_QWORD *)(v27 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  if (*(_QWORD *)(v25 + 64) > v4)
    v4 = *(_QWORD *)(v25 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  if (*(_QWORD *)(v23 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v23 + 64);
  v22 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v22 - 8);
  if (*(_QWORD *)(v8 + 64) > v7)
    v7 = *(_QWORD *)(v8 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v7)
    v11 = v7;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) > v11)
    v11 = *(_QWORD *)(v13 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_QWORD *)(v15 + 64) <= v11)
    v16 = v11;
  else
    v16 = *(_QWORD *)(v15 + 64);
  if (a2[v16] >= 8u)
  {
    if (v16 <= 3)
      v17 = v16;
    else
      v17 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v16])
  {
    case 0u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v28);
      a1[v16] = 0;
      return v18;
    case 1u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
      v19 = 1;
      goto LABEL_31;
    case 2u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
      v19 = 2;
      goto LABEL_31;
    case 3u:
      v20 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16);
      v18 = a1;
      v20(a1, a2, v22);
      v19 = 3;
      goto LABEL_31;
    case 4u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
      v19 = 4;
      goto LABEL_31;
    case 5u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v13 + 16))(a1, a2, v12);
      v19 = 5;
      goto LABEL_31;
    case 6u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v15 + 16))(a1, a2, v14);
      v19 = 6;
      goto LABEL_31;
    case 7u:
      v19 = 7;
      v18 = a1;
LABEL_31:
      v18[v16] = v19;
      break;
    default:
      v18 = a1;
      memcpy(a1, a2, v16 + 1);
      break;
  }
  return v18;
}

unsigned __int8 *sub_1BDF94730(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v31 = *(_QWORD *)(v7 - 8);
    v32 = v7;
    if (*(_QWORD *)(v31 + 64) > v6)
      v6 = *(_QWORD *)(v31 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v29 = *(_QWORD *)(v8 - 8);
    v30 = v8;
    if (*(_QWORD *)(v29 + 64) > v6)
      v6 = *(_QWORD *)(v29 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v27 = *(_QWORD *)(v9 - 8);
    v28 = v9;
    if (*(_QWORD *)(v27 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v27 + 64);
    v11 = swift_getAssociatedTypeWitness();
    v25 = *(_QWORD *)(v11 - 8);
    v26 = v11;
    if (*(_QWORD *)(v25 + 64) <= v10)
      v12 = v10;
    else
      v12 = *(_QWORD *)(v25 + 64);
    v13 = swift_getAssociatedTypeWitness();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_QWORD *)(v14 + 64) > v12)
      v12 = *(_QWORD *)(v14 + 64);
    v15 = swift_getAssociatedTypeWitness();
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    if (*(_QWORD *)(v17 + 64) <= v12)
      v18 = v12;
    else
      v18 = *(_QWORD *)(v17 + 64);
    if (a1[v18] >= 8u)
    {
      if (v18 <= 3)
        v19 = v18;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    v20 = v5;
    v21 = AssociatedTypeWitness;
    switch(a1[v18])
    {
      case 0u:
        goto LABEL_29;
      case 1u:
        v20 = v31;
        v21 = v32;
        goto LABEL_29;
      case 2u:
        v20 = v29;
        v21 = v30;
        goto LABEL_29;
      case 3u:
        v20 = v27;
        v21 = v28;
        goto LABEL_29;
      case 4u:
        v20 = v25;
        v21 = v26;
        goto LABEL_29;
      case 5u:
        v20 = v14;
        v21 = v13;
        goto LABEL_29;
      case 6u:
        v20 = *(_QWORD *)(v15 - 8);
        v21 = v15;
LABEL_29:
        (*(void (**)(unsigned __int8 *, uint64_t))(v20 + 8))(a1, v21);
        break;
      default:
        break;
    }
    if (a2[v18] >= 8u)
    {
      if (v18 <= 3)
        v22 = v18;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v18])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v18] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(a1, a2, v32);
        v23 = 1;
        goto LABEL_45;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v30);
        v23 = 2;
        goto LABEL_45;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v28);
        v23 = 3;
        goto LABEL_45;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
        v23 = 4;
        goto LABEL_45;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v14 + 16))(a1, a2, v13);
        v23 = 5;
        goto LABEL_45;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v17 + 16))(a1, a2, v16);
        v23 = 6;
        goto LABEL_45;
      case 7u:
        v23 = 7;
LABEL_45:
        a1[v18] = v23;
        break;
      default:
        memcpy(a1, a2, v18 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_1BDF94B60(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  void (*v20)(_BYTE *, unsigned __int8 *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = AssociatedTypeWitness;
  v4 = *(_QWORD *)(v27 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  if (*(_QWORD *)(v25 + 64) > v4)
    v4 = *(_QWORD *)(v25 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  if (*(_QWORD *)(v23 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v23 + 64);
  v22 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v22 - 8);
  if (*(_QWORD *)(v8 + 64) > v7)
    v7 = *(_QWORD *)(v8 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v7)
    v11 = v7;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) > v11)
    v11 = *(_QWORD *)(v13 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_QWORD *)(v15 + 64) <= v11)
    v16 = v11;
  else
    v16 = *(_QWORD *)(v15 + 64);
  if (a2[v16] >= 8u)
  {
    if (v16 <= 3)
      v17 = v16;
    else
      v17 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v16])
  {
    case 0u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v28);
      a1[v16] = 0;
      return v18;
    case 1u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
      v19 = 1;
      goto LABEL_31;
    case 2u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
      v19 = 2;
      goto LABEL_31;
    case 3u:
      v20 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32);
      v18 = a1;
      v20(a1, a2, v22);
      v19 = 3;
      goto LABEL_31;
    case 4u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v10 + 32))(a1, a2, v9);
      v19 = 4;
      goto LABEL_31;
    case 5u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v13 + 32))(a1, a2, v12);
      v19 = 5;
      goto LABEL_31;
    case 6u:
      v18 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v15 + 32))(a1, a2, v14);
      v19 = 6;
      goto LABEL_31;
    case 7u:
      v19 = 7;
      v18 = a1;
LABEL_31:
      v18[v16] = v19;
      break;
    default:
      v18 = a1;
      memcpy(a1, a2, v16 + 1);
      break;
  }
  return v18;
}

unsigned __int8 *sub_1BDF94EB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v31 = *(_QWORD *)(v7 - 8);
    v32 = v7;
    if (*(_QWORD *)(v31 + 64) > v6)
      v6 = *(_QWORD *)(v31 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v29 = *(_QWORD *)(v8 - 8);
    v30 = v8;
    if (*(_QWORD *)(v29 + 64) > v6)
      v6 = *(_QWORD *)(v29 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v27 = *(_QWORD *)(v9 - 8);
    v28 = v9;
    if (*(_QWORD *)(v27 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v27 + 64);
    v11 = swift_getAssociatedTypeWitness();
    v25 = *(_QWORD *)(v11 - 8);
    v26 = v11;
    if (*(_QWORD *)(v25 + 64) <= v10)
      v12 = v10;
    else
      v12 = *(_QWORD *)(v25 + 64);
    v13 = swift_getAssociatedTypeWitness();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_QWORD *)(v14 + 64) > v12)
      v12 = *(_QWORD *)(v14 + 64);
    v15 = swift_getAssociatedTypeWitness();
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    if (*(_QWORD *)(v17 + 64) <= v12)
      v18 = v12;
    else
      v18 = *(_QWORD *)(v17 + 64);
    if (a1[v18] >= 8u)
    {
      if (v18 <= 3)
        v19 = v18;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    v20 = v5;
    v21 = AssociatedTypeWitness;
    switch(a1[v18])
    {
      case 0u:
        goto LABEL_29;
      case 1u:
        v20 = v31;
        v21 = v32;
        goto LABEL_29;
      case 2u:
        v20 = v29;
        v21 = v30;
        goto LABEL_29;
      case 3u:
        v20 = v27;
        v21 = v28;
        goto LABEL_29;
      case 4u:
        v20 = v25;
        v21 = v26;
        goto LABEL_29;
      case 5u:
        v20 = v14;
        v21 = v13;
        goto LABEL_29;
      case 6u:
        v20 = *(_QWORD *)(v15 - 8);
        v21 = v15;
LABEL_29:
        (*(void (**)(unsigned __int8 *, uint64_t))(v20 + 8))(a1, v21);
        break;
      default:
        break;
    }
    if (a2[v18] >= 8u)
    {
      if (v18 <= 3)
        v22 = v18;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v18])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v18] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 32))(a1, a2, v32);
        v23 = 1;
        goto LABEL_45;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v30);
        v23 = 2;
        goto LABEL_45;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v28);
        v23 = 3;
        goto LABEL_45;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
        v23 = 4;
        goto LABEL_45;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v14 + 32))(a1, a2, v13);
        v23 = 5;
        goto LABEL_45;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v17 + 32))(a1, a2, v16);
        v23 = 6;
        goto LABEL_45;
      case 7u:
        v23 = 7;
LABEL_45:
        a1[v18] = v23;
        break;
      default:
        memcpy(a1, a2, v18 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1BDF952E8(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  int v14;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) <= v4)
    v11 = v4;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_32;
  v12 = v11 + 1;
  v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    v16 = ((a2 + ~(-1 << v13) - 247) >> v13) + 1;
    if (HIWORD(v16))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v16 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v16 < 2)
    {
LABEL_32:
      v18 = *(unsigned __int8 *)(a1 + v11);
      if (v18 >= 9)
        return (v18 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_32;
LABEL_25:
  v17 = (v14 - 1) << v13;
  if (v12 > 3)
    v17 = 0;
  if ((_DWORD)v12)
  {
    if (v12 > 3)
      LODWORD(v12) = 4;
    __asm { BR              X11 }
  }
  return (v17 + 248);
}

void sub_1BDF9554C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  v12 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v12 <= v6)
    v12 = v6;
  v13 = v12 + 1;
  if (a3 < 0xF8)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 + ~(-1 << (8 * v13)) - 247) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (a2 <= 0xF7)
    __asm { BR              X11 }
  v15 = a2 - 248;
  if (v13 < 4)
  {
    if ((_DWORD)v12 != -1)
    {
      v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, v12 + 1);
    *(_DWORD *)a1 = v15;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF9582C(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v2)
    v8 = v2;
  result = *(unsigned __int8 *)(a1 + v8);
  if (result >= 8)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF95A20(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) <= v4)
    v11 = v4;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  if (a2 > 7)
  {
    v12 = a2 - 8;
    if (v11 < 4)
    {
      v13 = v12 >> (8 * v11);
      v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 8;
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 8;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    a1[v11] = a2;
  }
}

uint64_t sub_1BDF95C1C()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BDF95C24()
{
  type metadata accessor for TaggedValue_8.TaggedEnum();
}

uint64_t sub_1BDF95CB4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t (*v17)(void);
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  if (*(_QWORD *)(v8 + 64) > v7)
    v7 = *(_QWORD *)(v8 + 64);
  v9 = *(_QWORD *)(a2[7] - 8);
  if (*(_QWORD *)(v9 + 64) <= v7)
    v10 = v7;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(a2[8] - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= v10)
    v12 = v10;
  v13 = *(_QWORD *)(a2[9] - 8);
  if (*(_QWORD *)(v13 + 64) > v12)
    v12 = *(_QWORD *)(v13 + 64);
  if (v12 <= 0x10)
    v12 = 16;
  v14 = *(unsigned __int8 *)(a1 + v12);
  v16 = *(unsigned __int8 *)(a1 + v12);
  switch(v14)
  {
    case 0:
      v17 = *(uint64_t (**)(void))(v2 + 8);
      goto LABEL_34;
    case 1:
      v17 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_34;
    case 2:
      v17 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_34;
    case 3:
      v17 = *(uint64_t (**)(void))(v6 + 8);
      goto LABEL_34;
    case 4:
      v17 = *(uint64_t (**)(void))(v8 + 8);
      goto LABEL_34;
    case 5:
      v17 = *(uint64_t (**)(void))(v9 + 8);
      goto LABEL_34;
    case 6:
      v17 = *(uint64_t (**)(void))(v11 + 8);
      goto LABEL_34;
    case 7:
      v17 = *(uint64_t (**)(void))(v13 + 8);
LABEL_34:
      result = v17();
      break;
    case 8:
      result = swift_release();
      break;
    default:
      if (v16 <= 3)
        v15 = v16;
      else
        v15 = 4;
      __asm { BR              X23 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF95E64(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = 16;
  if (v14 > 0x10)
    v16 = v14;
  switch(*((_BYTE *)a2 + v16))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v16) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v16) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v16) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      *((_BYTE *)a1 + v16) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      *((_BYTE *)a1 + v16) = 4;
      break;
    case 5:
      (*(void (**)(_QWORD *))(v11 + 16))(a1);
      *((_BYTE *)a1 + v16) = 5;
      break;
    case 6:
      (*(void (**)(_QWORD *))(v13 + 16))(a1);
      *((_BYTE *)a1 + v16) = 6;
      break;
    case 7:
      (*(void (**)(_QWORD *))(v15 + 16))(a1);
      *((_BYTE *)a1 + v16) = 7;
      break;
    case 8:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *((_BYTE *)a1 + v16) = 8;
      swift_retain();
      break;
    default:
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X24 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF960B0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = *(_QWORD *)(a3[2] - 8);
    v25 = a3[3];
    v5 = *(_QWORD *)(v24 + 64);
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = a3[5];
    v22 = a3[4];
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v18 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v18 + 64) > v5)
      v5 = *(_QWORD *)(v18 + 64);
    v6 = a3[7];
    v19 = a3[6];
    v7 = *(_QWORD *)(v19 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[8];
    v10 = a3[9];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v24 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(a1, v25);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(a1, v22);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(a1, v21);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v19);
        break;
      case 5:
        (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 6:
        (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 7:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 8:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(a1, a2, v25);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v22);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v21);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(a1, a2, v6);
        *((_BYTE *)a1 + v13) = 5;
        break;
      case 6:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v9);
        *((_BYTE *)a1 + v13) = 6;
        break;
      case 7:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v13) = 7;
        break;
      case 8:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 8;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF964A8(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = 16;
  if (v14 > 0x10)
    v16 = v14;
  switch(*((_BYTE *)a2 + v16))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v18 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v18 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v18 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v18 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v11 + 32))(a1);
      v18 = 5;
      break;
    case 6:
      (*(void (**)(_OWORD *))(v13 + 32))(a1);
      v18 = 6;
      break;
    case 7:
      (*(void (**)(_OWORD *))(v15 + 32))(a1);
      v18 = 7;
      break;
    case 8:
      *a1 = *a2;
      v18 = 8;
      break;
    default:
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X24 }
      return result;
  }
  *((_BYTE *)a1 + v16) = v18;
  return a1;
}

_OWORD *sub_1BDF966D4(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    v25 = *(_QWORD *)(a3[2] - 8);
    v26 = a3[3];
    v5 = *(_QWORD *)(v25 + 64);
    v24 = *(_QWORD *)(v26 - 8);
    if (*(_QWORD *)(v24 + 64) > v5)
      v5 = *(_QWORD *)(v24 + 64);
    v22 = a3[5];
    v23 = a3[4];
    v21 = *(_QWORD *)(v23 - 8);
    if (*(_QWORD *)(v21 + 64) > v5)
      v5 = *(_QWORD *)(v21 + 64);
    v19 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v19 + 64) > v5)
      v5 = *(_QWORD *)(v19 + 64);
    v6 = a3[7];
    v20 = a3[6];
    v7 = *(_QWORD *)(v20 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[8];
    v10 = a3[9];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v25 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v24 + 8))(a1, v26);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v21 + 8))(a1, v23);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v19 + 8))(a1, v22);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v7 + 8))(a1, v20);
        break;
      case 5:
        (*(void (**)(_OWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 6:
        (*(void (**)(_OWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 7:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 8:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v25 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v24 + 32))(a1, a2, v26);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v21 + 32))(a1, a2, v23);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v19 + 32))(a1, a2, v22);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v20);
        v16 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v8 + 32))(a1, a2, v6);
        v16 = 5;
        break;
      case 6:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v9);
        v16 = 6;
        break;
      case 7:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v10);
        v16 = 7;
        break;
      case 8:
        *a1 = *a2;
        v16 = 8;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF96AA4(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
  v6 = a3[9];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = 16;
  if (v3 > 0x10)
    v7 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_35;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 247) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_35;
      goto LABEL_28;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_35;
      goto LABEL_28;
    }
    if (v12 < 2)
    {
LABEL_35:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 9)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_35;
LABEL_28:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 248);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF96BE4 + 4 * byte_1BE1BEBAD[(v8 - 1)]))();
}

void sub_1BDF96C30(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64);
  v8 = a4[9];
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v9 = v5 + 1;
  if (a3 < 0xF8)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 247) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xF7)
    __asm { BR              X11 }
  v11 = a2 - 248;
  if (v9 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_8()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF96E60()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                result = swift_checkMetadataState();
                if (v8 <= 0x3F)
                {
                  swift_initEnumMetadataMultiPayload();
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1BDF96FB0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = 16;
  if (v14 > 0x10)
    v16 = v14;
  v17 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v13 + 80) | *(_DWORD *)(v15 + 80);
  if ((unint64_t)(v16 + 1) <= 0x18 && (v17 & 0x1000F8) == 0)
  {
    switch(*((_BYTE *)a2 + v16))
    {
      case 0:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)a1 + v16) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *))(v5 + 16))(a1);
        *((_BYTE *)a1 + v16) = 1;
        return a1;
      case 2:
        (*(void (**)(_QWORD *))(v7 + 16))(a1);
        *((_BYTE *)a1 + v16) = 2;
        return a1;
      case 3:
        (*(void (**)(_QWORD *))(v8 + 16))(a1);
        *((_BYTE *)a1 + v16) = 3;
        return a1;
      case 4:
        (*(void (**)(_QWORD *))(v10 + 16))(a1);
        *((_BYTE *)a1 + v16) = 4;
        return a1;
      case 5:
        (*(void (**)(_QWORD *))(v11 + 16))(a1);
        *((_BYTE *)a1 + v16) = 5;
        return a1;
      case 6:
        (*(void (**)(_QWORD *))(v13 + 16))(a1);
        *((_BYTE *)a1 + v16) = 6;
        return a1;
      case 7:
        (*(void (**)(_QWORD *))(v15 + 16))(a1);
        *((_BYTE *)a1 + v16) = 7;
        return a1;
      case 8:
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *((_BYTE *)a1 + v16) = 8;
        goto LABEL_25;
      default:
        if (v16 <= 3)
          v21 = v16;
        else
          v21 = 4;
        __asm { BR              X24 }
        return result;
    }
  }
  v19 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v19 + (((v17 & 0xF8 | 7u) + 16) & ~(unint64_t)(v17 & 0xF8 | 7u)));
LABEL_25:
  swift_retain();
  return a1;
}

uint64_t sub_1BDF97284(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t (*v17)(void);
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  if (*(_QWORD *)(v8 + 64) > v7)
    v7 = *(_QWORD *)(v8 + 64);
  v9 = *(_QWORD *)(a2[7] - 8);
  if (*(_QWORD *)(v9 + 64) <= v7)
    v10 = v7;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(a2[8] - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= v10)
    v12 = v10;
  v13 = *(_QWORD *)(a2[9] - 8);
  if (*(_QWORD *)(v13 + 64) > v12)
    v12 = *(_QWORD *)(v13 + 64);
  if (v12 <= 0x10)
    v12 = 16;
  v14 = *(unsigned __int8 *)(a1 + v12);
  v16 = *(unsigned __int8 *)(a1 + v12);
  switch(v14)
  {
    case 0:
      v17 = *(uint64_t (**)(void))(v2 + 8);
      goto LABEL_34;
    case 1:
      v17 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_34;
    case 2:
      v17 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_34;
    case 3:
      v17 = *(uint64_t (**)(void))(v6 + 8);
      goto LABEL_34;
    case 4:
      v17 = *(uint64_t (**)(void))(v8 + 8);
      goto LABEL_34;
    case 5:
      v17 = *(uint64_t (**)(void))(v9 + 8);
      goto LABEL_34;
    case 6:
      v17 = *(uint64_t (**)(void))(v11 + 8);
      goto LABEL_34;
    case 7:
      v17 = *(uint64_t (**)(void))(v13 + 8);
LABEL_34:
      result = v17();
      break;
    case 8:
      result = swift_release();
      break;
    default:
      if (v16 <= 3)
        v15 = v16;
      else
        v15 = 4;
      __asm { BR              X23 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF97434(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = 16;
  if (v14 > 0x10)
    v16 = v14;
  switch(*((_BYTE *)a2 + v16))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v16) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v16) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v16) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      *((_BYTE *)a1 + v16) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      *((_BYTE *)a1 + v16) = 4;
      break;
    case 5:
      (*(void (**)(_QWORD *))(v11 + 16))(a1);
      *((_BYTE *)a1 + v16) = 5;
      break;
    case 6:
      (*(void (**)(_QWORD *))(v13 + 16))(a1);
      *((_BYTE *)a1 + v16) = 6;
      break;
    case 7:
      (*(void (**)(_QWORD *))(v15 + 16))(a1);
      *((_BYTE *)a1 + v16) = 7;
      break;
    case 8:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *((_BYTE *)a1 + v16) = 8;
      swift_retain();
      break;
    default:
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X24 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF97680(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v24 = *(_QWORD *)(a3[2] - 8);
    v25 = a3[3];
    v5 = *(_QWORD *)(v24 + 64);
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = a3[5];
    v22 = a3[4];
    v20 = *(_QWORD *)(v22 - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v18 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v18 + 64) > v5)
      v5 = *(_QWORD *)(v18 + 64);
    v6 = a3[7];
    v19 = a3[6];
    v7 = *(_QWORD *)(v19 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[8];
    v10 = a3[9];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v24 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(a1, v25);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(a1, v22);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(a1, v21);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(a1, v19);
        break;
      case 5:
        (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 6:
        (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 7:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 8:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v24 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(a1, a2, v25);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v22);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v21);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v8 + 16))(a1, a2, v6);
        *((_BYTE *)a1 + v13) = 5;
        break;
      case 6:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v11 + 16))(a1, a2, v9);
        *((_BYTE *)a1 + v13) = 6;
        break;
      case 7:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v10);
        *((_BYTE *)a1 + v13) = 7;
        break;
      case 8:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 8;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF97A78(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = 16;
  if (v14 > 0x10)
    v16 = v14;
  switch(*((_BYTE *)a2 + v16))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v18 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v18 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v18 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v18 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v11 + 32))(a1);
      v18 = 5;
      break;
    case 6:
      (*(void (**)(_OWORD *))(v13 + 32))(a1);
      v18 = 6;
      break;
    case 7:
      (*(void (**)(_OWORD *))(v15 + 32))(a1);
      v18 = 7;
      break;
    case 8:
      *a1 = *a2;
      v18 = 8;
      break;
    default:
      if (v16 <= 3)
        v17 = v16;
      else
        v17 = 4;
      __asm { BR              X24 }
      return result;
  }
  *((_BYTE *)a1 + v16) = v18;
  return a1;
}

_OWORD *sub_1BDF97CA4(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    v25 = *(_QWORD *)(a3[2] - 8);
    v26 = a3[3];
    v5 = *(_QWORD *)(v25 + 64);
    v24 = *(_QWORD *)(v26 - 8);
    if (*(_QWORD *)(v24 + 64) > v5)
      v5 = *(_QWORD *)(v24 + 64);
    v22 = a3[5];
    v23 = a3[4];
    v21 = *(_QWORD *)(v23 - 8);
    if (*(_QWORD *)(v21 + 64) > v5)
      v5 = *(_QWORD *)(v21 + 64);
    v19 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v19 + 64) > v5)
      v5 = *(_QWORD *)(v19 + 64);
    v6 = a3[7];
    v20 = a3[6];
    v7 = *(_QWORD *)(v20 - 8);
    if (*(_QWORD *)(v7 + 64) > v5)
      v5 = *(_QWORD *)(v7 + 64);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) > v5)
      v5 = *(_QWORD *)(v8 + 64);
    v9 = a3[8];
    v10 = a3[9];
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) > v5)
      v5 = *(_QWORD *)(v11 + 64);
    v12 = *(_QWORD *)(v10 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v25 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v24 + 8))(a1, v26);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v21 + 8))(a1, v23);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v19 + 8))(a1, v22);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v7 + 8))(a1, v20);
        break;
      case 5:
        (*(void (**)(_OWORD *, uint64_t))(v8 + 8))(a1, v6);
        break;
      case 6:
        (*(void (**)(_OWORD *, uint64_t))(v11 + 8))(a1, v9);
        break;
      case 7:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v10);
        break;
      case 8:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v25 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v24 + 32))(a1, a2, v26);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v21 + 32))(a1, a2, v23);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v19 + 32))(a1, a2, v22);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v7 + 32))(a1, a2, v20);
        v16 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v8 + 32))(a1, a2, v6);
        v16 = 5;
        break;
      case 6:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v11 + 32))(a1, a2, v9);
        v16 = 6;
        break;
      case 7:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v10);
        v16 = 7;
        break;
      case 8:
        *a1 = *a2;
        v16 = 8;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF98074(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
  v6 = a3[9];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = 16;
  if (v3 > 0x10)
    v7 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_35;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 247) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_35;
      goto LABEL_28;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_35;
      goto LABEL_28;
    }
    if (v12 < 2)
    {
LABEL_35:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 9)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_35;
LABEL_28:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 248);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF981B4 + 4 * byte_1BE1BEC2B[(v8 - 1)]))();
}

void sub_1BDF98200(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64);
  v8 = a4[9];
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v9 = v5 + 1;
  if (a3 < 0xF8)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 247) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xF7)
    __asm { BR              X11 }
  v11 = a2 - 248;
  if (v9 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF98424(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = a2[5];
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64);
  v4 = a2[7];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[8] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[8] - 8) + 64);
  v5 = a2[9];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = 16;
  if (v2 > 0x10)
    v6 = v2;
  if (*(unsigned __int8 *)(a1 + v6) < 9u)
    return *(unsigned __int8 *)(a1 + v6);
  if (v6 <= 3)
    v7 = v6;
  else
    v7 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF984E8 + 4 * byte_1BE1BEC39[v7]))();
}

void sub_1BDF98530(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  if (a2 > 8)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v12 = a3[5];
    if (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) > v11)
      v11 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v13 = a3[7];
    if (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) > v11)
      v11 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v11)
      v11 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
    v14 = a3[9];
    if (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) > v11)
      v11 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
    if (v11 <= 0x10)
      v15 = 16;
    else
      v15 = v11;
    v16 = a2 - 9;
    if (v15 < 4)
    {
      v17 = v16 >> (8 * v15);
      v18 = v16 & ~(-1 << (8 * v15));
      a1[v15] = v17 + 9;
      bzero(a1, v15);
      if ((_DWORD)v15 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if ((_DWORD)v15 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
    else
    {
      a1[v15] = 9;
      bzero(a1, v15);
      *(_DWORD *)a1 = v16;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3[9] - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(a3[7] - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v8 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
    v9 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v10 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (v10 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v10 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (v9 <= v10)
      v9 = v10;
    if (v8 <= v9)
      v8 = v9;
    if (v7 <= v8)
      v7 = v8;
    if (v6 <= v7)
      v6 = v7;
    if (v5 <= v6)
      v5 = v6;
    if (v4 <= v5)
      v4 = v5;
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF98708()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            result = swift_getAssociatedTypeWitness();
            if (v6 <= 0x3F)
            {
              result = swift_getAssociatedTypeWitness();
              if (v7 <= 0x3F)
              {
                result = swift_getAssociatedTypeWitness();
                if (v8 <= 0x3F)
                {
                  swift_initEnumMetadataMultiPayload();
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1BDF9891C(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t v24;

  v24 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v2 = *(_QWORD *)(v24 + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v3 + 64) <= v2)
    v4 = v2;
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v6 + 64) > v4)
    v4 = *(_QWORD *)(v6 + 64);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v7 + 64) > v4)
    v4 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v8 + 64) <= v4)
    v9 = v4;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = v5;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_QWORD *)(v13 + 64) <= v9)
    v14 = v9;
  else
    v14 = *(_QWORD *)(v13 + 64);
  v15 = v14 + 1;
  v16 = *(_DWORD *)(v10 + 80);
  v17 = (*(_BYTE *)(v3 + 80) | *(_BYTE *)(v24 + 80) | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80) | *(_BYTE *)(v8 + 80) | v16 | *(_BYTE *)(v13 + 80));
  if (v17 <= 7
    && v15 <= 0x18
    && ((*(_DWORD *)(v3 + 80) | *(_DWORD *)(v24 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80) | v16 | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    v21 = a1;
    if (*((unsigned __int8 *)a2 + v14) >= 9u)
    {
      if (v14 <= 3)
        v23 = v14;
      else
        v23 = 4;
      __asm { BR              X14 }
    }
    switch(*((_BYTE *)a2 + v14))
    {
      case 0:
        (*(void (**)(uint64_t *))(v24 + 16))(a1);
        *((_BYTE *)a1 + v14) = 0;
        break;
      case 1:
        (*(void (**)(uint64_t *))(v3 + 16))(a1);
        *((_BYTE *)a1 + v14) = 1;
        break;
      case 2:
        (*(void (**)(uint64_t *))(v12 + 16))(a1);
        *((_BYTE *)a1 + v14) = 2;
        break;
      case 3:
        (*(void (**)(uint64_t *))(v6 + 16))(a1);
        *((_BYTE *)a1 + v14) = 3;
        break;
      case 4:
        (*(void (**)(uint64_t *))(v7 + 16))(a1);
        *((_BYTE *)a1 + v14) = 4;
        break;
      case 5:
        (*(void (**)(uint64_t *))(v8 + 16))(a1);
        *((_BYTE *)a1 + v14) = 5;
        break;
      case 6:
        (*(void (**)(uint64_t *))(v10 + 16))(a1);
        *((_BYTE *)a1 + v14) = 6;
        break;
      case 7:
        (*(void (**)(uint64_t *))(v13 + 16))(a1);
        *((_BYTE *)a1 + v14) = 7;
        break;
      case 8:
        *((_BYTE *)a1 + v14) = 8;
        break;
      default:
        memcpy(a1, a2, v15);
        break;
    }
  }
  else
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return v21;
}

uint64_t sub_1BDF98D18(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  if (*(_QWORD *)(v22 + 64) > v3)
    v3 = *(_QWORD *)(v22 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  if (*(_QWORD *)(v20 + 64) > v3)
    v3 = *(_QWORD *)(v20 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v6 - 8);
  v19 = v6;
  if (*(_QWORD *)(v18 + 64) > v3)
    v3 = *(_QWORD *)(v18 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v7 - 8);
  v17 = v7;
  if (*(_QWORD *)(v16 + 64) > v3)
    v3 = *(_QWORD *)(v16 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) <= v3)
    v10 = v3;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) > v10)
    v10 = *(_QWORD *)(v12 + 64);
  result = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v14 <= v10)
    v14 = v10;
  if (*(unsigned __int8 *)(a1 + v14) >= 9u)
  {
    if (v14 <= 3)
      v15 = v14;
    else
      v15 = 4;
    __asm { BR              X14 }
  }
  switch(*(_BYTE *)(a1 + v14))
  {
    case 0:
      goto LABEL_29;
    case 1:
      v2 = v22;
      AssociatedTypeWitness = v23;
      goto LABEL_29;
    case 2:
      v2 = v20;
      AssociatedTypeWitness = v21;
      goto LABEL_29;
    case 3:
      v2 = v18;
      AssociatedTypeWitness = v19;
      goto LABEL_29;
    case 4:
      v2 = v16;
      AssociatedTypeWitness = v17;
      goto LABEL_29;
    case 5:
      v2 = v9;
      AssociatedTypeWitness = v8;
      goto LABEL_29;
    case 6:
      v2 = v12;
      AssociatedTypeWitness = v11;
      goto LABEL_29;
    case 7:
      v2 = *(_QWORD *)(result - 8);
      AssociatedTypeWitness = result;
LABEL_29:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_1BDF99004(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  void (*v22)(_BYTE *, unsigned __int8 *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(v30 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  if (*(_QWORD *)(v28 + 64) > v3)
    v3 = *(_QWORD *)(v28 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  if (*(_QWORD *)(v26 + 64) > v3)
    v3 = *(_QWORD *)(v26 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  if (*(_QWORD *)(v24 + 64) <= v3)
    v7 = v3;
  else
    v7 = *(_QWORD *)(v24 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) <= v7)
    v10 = v7;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v10)
    v13 = v10;
  else
    v13 = *(_QWORD *)(v12 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_QWORD *)(v15 + 64) > v13)
    v13 = *(_QWORD *)(v15 + 64);
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  if (*(_QWORD *)(v17 + 64) <= v13)
    v18 = v13;
  else
    v18 = *(_QWORD *)(v17 + 64);
  if (a2[v18] >= 9u)
  {
    if (v18 <= 3)
      v19 = v18;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v18])
  {
    case 0u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v31);
      a1[v18] = 0;
      return v20;
    case 1u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v29);
      v21 = 1;
      goto LABEL_35;
    case 2u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v27);
      v21 = 2;
      goto LABEL_35;
    case 3u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
      v21 = 3;
      goto LABEL_35;
    case 4u:
      v22 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v9 + 16);
      v20 = a1;
      v22(a1, a2, v8);
      v21 = 4;
      goto LABEL_35;
    case 5u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
      v21 = 5;
      goto LABEL_35;
    case 6u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v15 + 16))(a1, a2, v14);
      v21 = 6;
      goto LABEL_35;
    case 7u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v17 + 16))(a1, a2, v16);
      v21 = 7;
      goto LABEL_35;
    case 8u:
      v21 = 8;
      v20 = a1;
LABEL_35:
      v20[v18] = v21;
      break;
    default:
      v20 = a1;
      memcpy(a1, a2, v18 + 1);
      break;
  }
  return v20;
}

unsigned __int8 *sub_1BDF99388(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v34 = *(_QWORD *)(v7 - 8);
    v35 = v7;
    if (*(_QWORD *)(v34 + 64) > v6)
      v6 = *(_QWORD *)(v34 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v32 = *(_QWORD *)(v8 - 8);
    v33 = v8;
    if (*(_QWORD *)(v32 + 64) > v6)
      v6 = *(_QWORD *)(v32 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v30 = *(_QWORD *)(v9 - 8);
    v31 = v9;
    if (*(_QWORD *)(v30 + 64) > v6)
      v6 = *(_QWORD *)(v30 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v28 = *(_QWORD *)(v10 - 8);
    v29 = v10;
    if (*(_QWORD *)(v28 + 64) <= v6)
      v11 = v6;
    else
      v11 = *(_QWORD *)(v28 + 64);
    v12 = swift_getAssociatedTypeWitness();
    v26 = *(_QWORD *)(v12 - 8);
    v27 = v12;
    if (*(_QWORD *)(v26 + 64) <= v11)
      v13 = v11;
    else
      v13 = *(_QWORD *)(v26 + 64);
    v14 = swift_getAssociatedTypeWitness();
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_QWORD *)(v15 + 64) > v13)
      v13 = *(_QWORD *)(v15 + 64);
    v16 = swift_getAssociatedTypeWitness();
    v17 = v16;
    v18 = *(_QWORD *)(v16 - 8);
    if (*(_QWORD *)(v18 + 64) <= v13)
      v19 = v13;
    else
      v19 = *(_QWORD *)(v18 + 64);
    if (a1[v19] >= 9u)
    {
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    v21 = v5;
    v22 = AssociatedTypeWitness;
    switch(a1[v19])
    {
      case 0u:
        goto LABEL_32;
      case 1u:
        v21 = v34;
        v22 = v35;
        goto LABEL_32;
      case 2u:
        v21 = v32;
        v22 = v33;
        goto LABEL_32;
      case 3u:
        v21 = v30;
        v22 = v31;
        goto LABEL_32;
      case 4u:
        v21 = v28;
        v22 = v29;
        goto LABEL_32;
      case 5u:
        v21 = v26;
        v22 = v27;
        goto LABEL_32;
      case 6u:
        v21 = v15;
        v22 = v14;
        goto LABEL_32;
      case 7u:
        v21 = *(_QWORD *)(v16 - 8);
        v22 = v16;
LABEL_32:
        (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 8))(a1, v22);
        break;
      default:
        break;
    }
    if (a2[v19] >= 9u)
    {
      if (v19 <= 3)
        v23 = v19;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v19])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v19] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 16))(a1, a2, v35);
        v24 = 1;
        goto LABEL_49;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 16))(a1, a2, v33);
        v24 = 2;
        goto LABEL_49;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v31);
        v24 = 3;
        goto LABEL_49;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v29);
        v24 = 4;
        goto LABEL_49;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v27);
        v24 = 5;
        goto LABEL_49;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 16))(a1, a2, v14);
        v24 = 6;
        goto LABEL_49;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 16))(a1, a2, v17);
        v24 = 7;
        goto LABEL_49;
      case 8u:
        v24 = 8;
LABEL_49:
        a1[v19] = v24;
        break;
      default:
        memcpy(a1, a2, v19 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_1BDF9980C(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  void (*v22)(_BYTE *, unsigned __int8 *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(v30 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  if (*(_QWORD *)(v28 + 64) > v3)
    v3 = *(_QWORD *)(v28 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  if (*(_QWORD *)(v26 + 64) > v3)
    v3 = *(_QWORD *)(v26 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  if (*(_QWORD *)(v24 + 64) <= v3)
    v7 = v3;
  else
    v7 = *(_QWORD *)(v24 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) <= v7)
    v10 = v7;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_QWORD *)(v12 + 64) <= v10)
    v13 = v10;
  else
    v13 = *(_QWORD *)(v12 + 64);
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_QWORD *)(v15 + 64) > v13)
    v13 = *(_QWORD *)(v15 + 64);
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  if (*(_QWORD *)(v17 + 64) <= v13)
    v18 = v13;
  else
    v18 = *(_QWORD *)(v17 + 64);
  if (a2[v18] >= 9u)
  {
    if (v18 <= 3)
      v19 = v18;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v18])
  {
    case 0u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v31);
      a1[v18] = 0;
      return v20;
    case 1u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v29);
      v21 = 1;
      goto LABEL_35;
    case 2u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v27);
      v21 = 2;
      goto LABEL_35;
    case 3u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
      v21 = 3;
      goto LABEL_35;
    case 4u:
      v22 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v9 + 32);
      v20 = a1;
      v22(a1, a2, v8);
      v21 = 4;
      goto LABEL_35;
    case 5u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
      v21 = 5;
      goto LABEL_35;
    case 6u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v15 + 32))(a1, a2, v14);
      v21 = 6;
      goto LABEL_35;
    case 7u:
      v20 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v17 + 32))(a1, a2, v16);
      v21 = 7;
      goto LABEL_35;
    case 8u:
      v21 = 8;
      v20 = a1;
LABEL_35:
      v20[v18] = v21;
      break;
    default:
      v20 = a1;
      memcpy(a1, a2, v18 + 1);
      break;
  }
  return v20;
}

unsigned __int8 *sub_1BDF99B90(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v34 = *(_QWORD *)(v7 - 8);
    v35 = v7;
    if (*(_QWORD *)(v34 + 64) > v6)
      v6 = *(_QWORD *)(v34 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v32 = *(_QWORD *)(v8 - 8);
    v33 = v8;
    if (*(_QWORD *)(v32 + 64) > v6)
      v6 = *(_QWORD *)(v32 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v30 = *(_QWORD *)(v9 - 8);
    v31 = v9;
    if (*(_QWORD *)(v30 + 64) > v6)
      v6 = *(_QWORD *)(v30 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v28 = *(_QWORD *)(v10 - 8);
    v29 = v10;
    if (*(_QWORD *)(v28 + 64) <= v6)
      v11 = v6;
    else
      v11 = *(_QWORD *)(v28 + 64);
    v12 = swift_getAssociatedTypeWitness();
    v26 = *(_QWORD *)(v12 - 8);
    v27 = v12;
    if (*(_QWORD *)(v26 + 64) <= v11)
      v13 = v11;
    else
      v13 = *(_QWORD *)(v26 + 64);
    v14 = swift_getAssociatedTypeWitness();
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_QWORD *)(v15 + 64) > v13)
      v13 = *(_QWORD *)(v15 + 64);
    v16 = swift_getAssociatedTypeWitness();
    v17 = v16;
    v18 = *(_QWORD *)(v16 - 8);
    if (*(_QWORD *)(v18 + 64) <= v13)
      v19 = v13;
    else
      v19 = *(_QWORD *)(v18 + 64);
    if (a1[v19] >= 9u)
    {
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    v21 = v5;
    v22 = AssociatedTypeWitness;
    switch(a1[v19])
    {
      case 0u:
        goto LABEL_32;
      case 1u:
        v21 = v34;
        v22 = v35;
        goto LABEL_32;
      case 2u:
        v21 = v32;
        v22 = v33;
        goto LABEL_32;
      case 3u:
        v21 = v30;
        v22 = v31;
        goto LABEL_32;
      case 4u:
        v21 = v28;
        v22 = v29;
        goto LABEL_32;
      case 5u:
        v21 = v26;
        v22 = v27;
        goto LABEL_32;
      case 6u:
        v21 = v15;
        v22 = v14;
        goto LABEL_32;
      case 7u:
        v21 = *(_QWORD *)(v16 - 8);
        v22 = v16;
LABEL_32:
        (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 8))(a1, v22);
        break;
      default:
        break;
    }
    if (a2[v19] >= 9u)
    {
      if (v19 <= 3)
        v23 = v19;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v19])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v19] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 32))(a1, a2, v35);
        v24 = 1;
        goto LABEL_49;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 32))(a1, a2, v33);
        v24 = 2;
        goto LABEL_49;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v31);
        v24 = 3;
        goto LABEL_49;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v29);
        v24 = 4;
        goto LABEL_49;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v27);
        v24 = 5;
        goto LABEL_49;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 32))(a1, a2, v14);
        v24 = 6;
        goto LABEL_49;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 32))(a1, a2, v17);
        v24 = 7;
        goto LABEL_49;
      case 8u:
        v24 = 8;
LABEL_49:
        a1[v19] = v24;
        break;
      default:
        memcpy(a1, a2, v19 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1BDF9A014(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) <= v4)
    v12 = v4;
  else
    v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_34;
  v13 = v12 + 1;
  v14 = 8 * (v12 + 1);
  if ((v12 + 1) <= 3)
  {
    v17 = ((a2 + ~(-1 << v14) - 246) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v17 < 2)
    {
LABEL_34:
      v19 = *(unsigned __int8 *)(a1 + v12);
      if (v19 >= 0xA)
        return (v19 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_34;
LABEL_27:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 > 3)
      LODWORD(v13) = 4;
    __asm { BR              X11 }
  }
  return (v18 + 247);
}

void sub_1BDF9A2A4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  v12 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v13 <= v6)
    v13 = v6;
  v14 = v13 + 1;
  if (a3 < 0xF7)
  {
    v15 = 0u;
  }
  else if (v14 <= 3)
  {
    v17 = ((a3 + ~(-1 << (8 * v14)) - 246) >> (8 * v14)) + 1;
    if (HIWORD(v17))
    {
      v15 = 4u;
    }
    else if (v17 >= 0x100)
    {
      v15 = 2;
    }
    else
    {
      v15 = v17 > 1;
    }
  }
  else
  {
    v15 = 1u;
  }
  if (a2 <= 0xF6)
    __asm { BR              X11 }
  v16 = a2 - 247;
  if (v14 < 4)
  {
    if ((_DWORD)v13 != -1)
    {
      v18 = v16 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if ((_DWORD)v14 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if ((_DWORD)v14 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, v13 + 1);
    *(_DWORD *)a1 = v16;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF9A5B0(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v2)
    v9 = v2;
  result = *(unsigned __int8 *)(a1 + v9);
  if (result >= 9)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF9A7D0(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) <= v4)
    v12 = v4;
  else
    v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  if (a2 > 8)
  {
    v13 = a2 - 9;
    if (v12 < 4)
    {
      v14 = v13 >> (8 * v12);
      v15 = v13 & ~(-1 << (8 * v12));
      a1[v12] = v14 + 9;
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v12 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
    else
    {
      a1[v12] = 9;
      bzero(a1, v12);
      *(_DWORD *)a1 = v13;
    }
  }
  else
  {
    a1[v12] = a2;
  }
}

uint64_t sub_1BDF9A9F8()
{
  return swift_allocateGenericValueMetadata();
}

void sub_1BDF9AA00()
{
  type metadata accessor for TaggedValue_9.TaggedEnum();
}

uint64_t sub_1BDF9AA98(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  if (*(_QWORD *)(v8 + 64) > v7)
    v7 = *(_QWORD *)(v8 + 64);
  v9 = *(_QWORD *)(a2[7] - 8);
  if (*(_QWORD *)(v9 + 64) <= v7)
    v10 = v7;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(a2[8] - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= v10)
    v12 = v10;
  v13 = *(_QWORD *)(a2[9] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a2[10] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  if (v14 <= 0x10)
    v14 = 16;
  switch(*(_BYTE *)(a1 + v14))
  {
    case 0:
      v17 = *(uint64_t (**)(void))(v2 + 8);
      goto LABEL_37;
    case 1:
      v17 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_37;
    case 2:
      v17 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_37;
    case 3:
      v17 = *(uint64_t (**)(void))(v6 + 8);
      goto LABEL_37;
    case 4:
      v17 = *(uint64_t (**)(void))(v8 + 8);
      goto LABEL_37;
    case 5:
      v17 = *(uint64_t (**)(void))(v9 + 8);
      goto LABEL_37;
    case 6:
      v17 = *(uint64_t (**)(void))(v11 + 8);
      goto LABEL_37;
    case 7:
      v17 = *(uint64_t (**)(void))(v13 + 8);
      goto LABEL_37;
    case 8:
      v17 = *(uint64_t (**)(void))(v15 + 8);
LABEL_37:
      result = v17();
      break;
    case 9:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v14) <= 3u)
        v16 = *(unsigned __int8 *)(a1 + v14);
      else
        v16 = 4;
      __asm { BR              X25 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF9AC74(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = *(_QWORD *)(a3[10] - 8);
  if (*(_QWORD *)(v16 + 64) > v14)
    v14 = *(_QWORD *)(v16 + 64);
  if (v14 <= 0x10)
    v14 = 16;
  switch(*((_BYTE *)a2 + v14))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v14) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v14) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v14) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      *((_BYTE *)a1 + v14) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      *((_BYTE *)a1 + v14) = 4;
      break;
    case 5:
      (*(void (**)(_QWORD *))(v11 + 16))(a1);
      *((_BYTE *)a1 + v14) = 5;
      break;
    case 6:
      (*(void (**)(_QWORD *))(v13 + 16))(a1);
      *((_BYTE *)a1 + v14) = 6;
      break;
    case 7:
      (*(void (**)(_QWORD *))(v15 + 16))(a1);
      *((_BYTE *)a1 + v14) = 7;
      break;
    case 8:
      (*(void (**)(_QWORD *))(v16 + 16))(a1);
      *((_BYTE *)a1 + v14) = 8;
      break;
    case 9:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *((_BYTE *)a1 + v14) = 9;
      swift_retain();
      break;
    default:
      if (v14 <= 3)
        v17 = v14;
      else
        v17 = 4;
      __asm { BR              X26 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF9AEF8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    v26 = *(_QWORD *)(a3[2] - 8);
    v27 = a3[3];
    v5 = *(_QWORD *)(v26 + 64);
    v25 = *(_QWORD *)(v27 - 8);
    if (*(_QWORD *)(v25 + 64) > v5)
      v5 = *(_QWORD *)(v25 + 64);
    v23 = a3[5];
    v24 = a3[4];
    v22 = *(_QWORD *)(v24 - 8);
    if (*(_QWORD *)(v22 + 64) > v5)
      v5 = *(_QWORD *)(v22 + 64);
    v20 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v21 = a3[6];
    v18 = *(_QWORD *)(v21 - 8);
    v19 = a3[7];
    if (*(_QWORD *)(v18 + 64) > v5)
      v5 = *(_QWORD *)(v18 + 64);
    v6 = *(_QWORD *)(a3[7] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[8];
    v8 = a3[9];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[10];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v26 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(a1, v27);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(a1, v24);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(a1, v23);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(a1, v21);
        break;
      case 5:
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v19);
        break;
      case 6:
        (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 7:
        (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 8:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 9:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v26 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(a1, a2, v27);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 + 16))(a1, a2, v24);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v23);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v21);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 5;
        break;
      case 6:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v7);
        *((_BYTE *)a1 + v13) = 6;
        break;
      case 7:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v8);
        *((_BYTE *)a1 + v13) = 7;
        break;
      case 8:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        *((_BYTE *)a1 + v13) = 8;
        break;
      case 9:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 9;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF9B370(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = *(_QWORD *)(a3[10] - 8);
  if (*(_QWORD *)(v16 + 64) > v14)
    v14 = *(_QWORD *)(v16 + 64);
  if (v14 <= 0x10)
    v14 = 16;
  switch(*((_BYTE *)a2 + v14))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v18 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v18 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v18 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v18 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v11 + 32))(a1);
      v18 = 5;
      break;
    case 6:
      (*(void (**)(_OWORD *))(v13 + 32))(a1);
      v18 = 6;
      break;
    case 7:
      (*(void (**)(_OWORD *))(v15 + 32))(a1);
      v18 = 7;
      break;
    case 8:
      (*(void (**)(_OWORD *))(v16 + 32))(a1);
      v18 = 8;
      break;
    case 9:
      *a1 = *a2;
      v18 = 9;
      break;
    default:
      if (v14 <= 3)
        v17 = v14;
      else
        v17 = 4;
      __asm { BR              X26 }
      return result;
  }
  *((_BYTE *)a1 + v14) = v18;
  return a1;
}

_OWORD *sub_1BDF9B5D0(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v27 = *(_QWORD *)(a3[2] - 8);
    v28 = a3[3];
    v5 = *(_QWORD *)(v27 + 64);
    v26 = *(_QWORD *)(v28 - 8);
    if (*(_QWORD *)(v26 + 64) > v5)
      v5 = *(_QWORD *)(v26 + 64);
    v24 = a3[5];
    v25 = a3[4];
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v21 + 64) > v5)
      v5 = *(_QWORD *)(v21 + 64);
    v22 = a3[6];
    v19 = *(_QWORD *)(v22 - 8);
    v20 = a3[7];
    if (*(_QWORD *)(v19 + 64) > v5)
      v5 = *(_QWORD *)(v19 + 64);
    v6 = *(_QWORD *)(a3[7] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[8];
    v8 = a3[9];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[10];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v27 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v26 + 8))(a1, v28);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v23 + 8))(a1, v25);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v21 + 8))(a1, v24);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v19 + 8))(a1, v22);
        break;
      case 5:
        (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(a1, v20);
        break;
      case 6:
        (*(void (**)(_OWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 7:
        (*(void (**)(_OWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 8:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 9:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v27 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v26 + 32))(a1, a2, v28);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v23 + 32))(a1, a2, v25);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v21 + 32))(a1, a2, v24);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v19 + 32))(a1, a2, v22);
        v16 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v20);
        v16 = 5;
        break;
      case 6:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v7);
        v16 = 6;
        break;
      case 7:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v8);
        v16 = 7;
        break;
      case 8:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        v16 = 8;
        break;
      case 9:
        *a1 = *a2;
        v16 = 9;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF9BA1C(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
  v6 = a3[9];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[10] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[10] - 8) + 64);
  v7 = 16;
  if (v3 > 0x10)
    v7 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_37;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 246) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v12 < 2)
    {
LABEL_37:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 0xA)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_37;
LABEL_30:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 247);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF9BB70 + 4 * byte_1BE1BED27[(v8 - 1)]))();
}

void sub_1BDF9BBBC(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64);
  v8 = a4[9];
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[10] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[10] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v9 = v5 + 1;
  if (a3 < 0xF7)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 246) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xF6)
    __asm { BR              X11 }
  v11 = a2 - 247;
  if (v9 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

void type metadata accessor for TaggedValue_9()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDF9BE00()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                result = swift_checkMetadataState();
                if (v8 <= 0x3F)
                {
                  result = swift_checkMetadataState();
                  if (v9 <= 0x3F)
                  {
                    swift_initEnumMetadataMultiPayload();
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1BDF9BF70(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = *(_QWORD *)(a3[10] - 8);
  if (*(_QWORD *)(v16 + 64) > v14)
    v14 = *(_QWORD *)(v16 + 64);
  if (v14 <= 0x10)
    v14 = 16;
  v17 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v10 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v13 + 80) | *(_DWORD *)(v15 + 80) | *(_DWORD *)(v16 + 80);
  if (v14 + 1 <= 0x18 && (v17 & 0x1000F8) == 0)
  {
    switch(*((_BYTE *)a2 + v14))
    {
      case 0:
        (*(void (**)(_QWORD *))(v4 + 16))(a1);
        *((_BYTE *)a1 + v14) = 0;
        return a1;
      case 1:
        (*(void (**)(_QWORD *))(v5 + 16))(a1);
        *((_BYTE *)a1 + v14) = 1;
        return a1;
      case 2:
        (*(void (**)(_QWORD *))(v7 + 16))(a1);
        *((_BYTE *)a1 + v14) = 2;
        return a1;
      case 3:
        (*(void (**)(_QWORD *))(v8 + 16))(a1);
        *((_BYTE *)a1 + v14) = 3;
        return a1;
      case 4:
        (*(void (**)(_QWORD *))(v10 + 16))(a1);
        *((_BYTE *)a1 + v14) = 4;
        return a1;
      case 5:
        (*(void (**)(_QWORD *))(v11 + 16))(a1);
        *((_BYTE *)a1 + v14) = 5;
        return a1;
      case 6:
        (*(void (**)(_QWORD *))(v13 + 16))(a1);
        *((_BYTE *)a1 + v14) = 6;
        return a1;
      case 7:
        (*(void (**)(_QWORD *))(v15 + 16))(a1);
        *((_BYTE *)a1 + v14) = 7;
        return a1;
      case 8:
        (*(void (**)(_QWORD *))(v16 + 16))(a1);
        *((_BYTE *)a1 + v14) = 8;
        return a1;
      case 9:
        v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        *((_BYTE *)a1 + v14) = 9;
        goto LABEL_27;
      default:
        if (v14 <= 3)
          v21 = v14;
        else
          v21 = 4;
        __asm { BR              X26 }
        return result;
    }
  }
  v19 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v19 + (((v17 & 0xF8 | 7u) + 16) & ~(unint64_t)(v17 & 0xF8 | 7u)));
LABEL_27:
  swift_retain();
  return a1;
}

uint64_t sub_1BDF9C284(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t result;

  v2 = *(_QWORD *)(a2[2] - 8);
  v3 = *(_QWORD *)(a2[3] - 8);
  if (*(_QWORD *)(v3 + 64) <= *(_QWORD *)(v2 + 64))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(a2[4] - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(a2[5] - 8);
  if (*(_QWORD *)(v6 + 64) <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(a2[6] - 8);
  if (*(_QWORD *)(v8 + 64) > v7)
    v7 = *(_QWORD *)(v8 + 64);
  v9 = *(_QWORD *)(a2[7] - 8);
  if (*(_QWORD *)(v9 + 64) <= v7)
    v10 = v7;
  else
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(a2[8] - 8);
  v12 = *(_QWORD *)(v11 + 64);
  if (v12 <= v10)
    v12 = v10;
  v13 = *(_QWORD *)(a2[9] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a2[10] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  if (v14 <= 0x10)
    v14 = 16;
  switch(*(_BYTE *)(a1 + v14))
  {
    case 0:
      v17 = *(uint64_t (**)(void))(v2 + 8);
      goto LABEL_37;
    case 1:
      v17 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_37;
    case 2:
      v17 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_37;
    case 3:
      v17 = *(uint64_t (**)(void))(v6 + 8);
      goto LABEL_37;
    case 4:
      v17 = *(uint64_t (**)(void))(v8 + 8);
      goto LABEL_37;
    case 5:
      v17 = *(uint64_t (**)(void))(v9 + 8);
      goto LABEL_37;
    case 6:
      v17 = *(uint64_t (**)(void))(v11 + 8);
      goto LABEL_37;
    case 7:
      v17 = *(uint64_t (**)(void))(v13 + 8);
      goto LABEL_37;
    case 8:
      v17 = *(uint64_t (**)(void))(v15 + 8);
LABEL_37:
      result = v17();
      break;
    case 9:
      result = swift_release();
      break;
    default:
      if (*(unsigned __int8 *)(a1 + v14) <= 3u)
        v16 = *(unsigned __int8 *)(a1 + v14);
      else
        v16 = 4;
      __asm { BR              X25 }
      return result;
  }
  return result;
}

_QWORD *sub_1BDF9C460(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = *(_QWORD *)(a3[10] - 8);
  if (*(_QWORD *)(v16 + 64) > v14)
    v14 = *(_QWORD *)(v16 + 64);
  if (v14 <= 0x10)
    v14 = 16;
  switch(*((_BYTE *)a2 + v14))
  {
    case 0:
      (*(void (**)(_QWORD *))(v4 + 16))(a1);
      *((_BYTE *)a1 + v14) = 0;
      break;
    case 1:
      (*(void (**)(_QWORD *))(v5 + 16))(a1);
      *((_BYTE *)a1 + v14) = 1;
      break;
    case 2:
      (*(void (**)(_QWORD *))(v7 + 16))(a1);
      *((_BYTE *)a1 + v14) = 2;
      break;
    case 3:
      (*(void (**)(_QWORD *))(v8 + 16))(a1);
      *((_BYTE *)a1 + v14) = 3;
      break;
    case 4:
      (*(void (**)(_QWORD *))(v10 + 16))(a1);
      *((_BYTE *)a1 + v14) = 4;
      break;
    case 5:
      (*(void (**)(_QWORD *))(v11 + 16))(a1);
      *((_BYTE *)a1 + v14) = 5;
      break;
    case 6:
      (*(void (**)(_QWORD *))(v13 + 16))(a1);
      *((_BYTE *)a1 + v14) = 6;
      break;
    case 7:
      (*(void (**)(_QWORD *))(v15 + 16))(a1);
      *((_BYTE *)a1 + v14) = 7;
      break;
    case 8:
      (*(void (**)(_QWORD *))(v16 + 16))(a1);
      *((_BYTE *)a1 + v14) = 8;
      break;
    case 9:
      v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      *((_BYTE *)a1 + v14) = 9;
      swift_retain();
      break;
    default:
      if (v14 <= 3)
        v17 = v14;
      else
        v17 = 4;
      __asm { BR              X26 }
      return result;
  }
  return a1;
}

_QWORD *sub_1BDF9C6E4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    v26 = *(_QWORD *)(a3[2] - 8);
    v27 = a3[3];
    v5 = *(_QWORD *)(v26 + 64);
    v25 = *(_QWORD *)(v27 - 8);
    if (*(_QWORD *)(v25 + 64) > v5)
      v5 = *(_QWORD *)(v25 + 64);
    v23 = a3[5];
    v24 = a3[4];
    v22 = *(_QWORD *)(v24 - 8);
    if (*(_QWORD *)(v22 + 64) > v5)
      v5 = *(_QWORD *)(v22 + 64);
    v20 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v20 + 64) > v5)
      v5 = *(_QWORD *)(v20 + 64);
    v21 = a3[6];
    v18 = *(_QWORD *)(v21 - 8);
    v19 = a3[7];
    if (*(_QWORD *)(v18 + 64) > v5)
      v5 = *(_QWORD *)(v18 + 64);
    v6 = *(_QWORD *)(a3[7] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[8];
    v8 = a3[9];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[10];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v17 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *))(v26 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(a1, v27);
        break;
      case 2:
        (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(a1, v24);
        break;
      case 3:
        (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(a1, v23);
        break;
      case 4:
        (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(a1, v21);
        break;
      case 5:
        (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, v19);
        break;
      case 6:
        (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 7:
        (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 8:
        (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 9:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v26 + 16))(a1, a2, v17);
        *((_BYTE *)a1 + v13) = 0;
        break;
      case 1:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(a1, a2, v27);
        *((_BYTE *)a1 + v13) = 1;
        break;
      case 2:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 + 16))(a1, a2, v24);
        *((_BYTE *)a1 + v13) = 2;
        break;
      case 3:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v20 + 16))(a1, a2, v23);
        *((_BYTE *)a1 + v13) = 3;
        break;
      case 4:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v18 + 16))(a1, a2, v21);
        *((_BYTE *)a1 + v13) = 4;
        break;
      case 5:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v6 + 16))(a1, a2, v19);
        *((_BYTE *)a1 + v13) = 5;
        break;
      case 6:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v9 + 16))(a1, a2, v7);
        *((_BYTE *)a1 + v13) = 6;
        break;
      case 7:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 16))(a1, a2, v8);
        *((_BYTE *)a1 + v13) = 7;
        break;
      case 8:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v12 + 16))(a1, a2, v11);
        *((_BYTE *)a1 + v13) = 8;
        break;
      case 9:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_BYTE *)a1 + v13) = 9;
        swift_retain();
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return a1;
}

_OWORD *sub_1BDF9CB5C(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *result;

  v4 = *(_QWORD *)(a3[2] - 8);
  v5 = *(_QWORD *)(a3[3] - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(a3[4] - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(_QWORD *)(a3[5] - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(a3[6] - 8);
  if (*(_QWORD *)(v10 + 64) > v9)
    v9 = *(_QWORD *)(v10 + 64);
  v11 = *(_QWORD *)(a3[7] - 8);
  if (*(_QWORD *)(v11 + 64) <= v9)
    v12 = v9;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_QWORD *)(a3[8] - 8);
  v14 = *(_QWORD *)(v13 + 64);
  if (v14 <= v12)
    v14 = v12;
  v15 = *(_QWORD *)(a3[9] - 8);
  if (*(_QWORD *)(v15 + 64) > v14)
    v14 = *(_QWORD *)(v15 + 64);
  v16 = *(_QWORD *)(a3[10] - 8);
  if (*(_QWORD *)(v16 + 64) > v14)
    v14 = *(_QWORD *)(v16 + 64);
  if (v14 <= 0x10)
    v14 = 16;
  switch(*((_BYTE *)a2 + v14))
  {
    case 0:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      v18 = 0;
      break;
    case 1:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      v18 = 1;
      break;
    case 2:
      (*(void (**)(_OWORD *))(v7 + 32))(a1);
      v18 = 2;
      break;
    case 3:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      v18 = 3;
      break;
    case 4:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      v18 = 4;
      break;
    case 5:
      (*(void (**)(_OWORD *))(v11 + 32))(a1);
      v18 = 5;
      break;
    case 6:
      (*(void (**)(_OWORD *))(v13 + 32))(a1);
      v18 = 6;
      break;
    case 7:
      (*(void (**)(_OWORD *))(v15 + 32))(a1);
      v18 = 7;
      break;
    case 8:
      (*(void (**)(_OWORD *))(v16 + 32))(a1);
      v18 = 8;
      break;
    case 9:
      *a1 = *a2;
      v18 = 9;
      break;
    default:
      if (v14 <= 3)
        v17 = v14;
      else
        v17 = 4;
      __asm { BR              X26 }
      return result;
  }
  *((_BYTE *)a1 + v14) = v18;
  return a1;
}

_OWORD *sub_1BDF9CDBC(_OWORD *a1, _OWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v27 = *(_QWORD *)(a3[2] - 8);
    v28 = a3[3];
    v5 = *(_QWORD *)(v27 + 64);
    v26 = *(_QWORD *)(v28 - 8);
    if (*(_QWORD *)(v26 + 64) > v5)
      v5 = *(_QWORD *)(v26 + 64);
    v24 = a3[5];
    v25 = a3[4];
    v23 = *(_QWORD *)(v25 - 8);
    if (*(_QWORD *)(v23 + 64) > v5)
      v5 = *(_QWORD *)(v23 + 64);
    v21 = *(_QWORD *)(a3[5] - 8);
    if (*(_QWORD *)(v21 + 64) > v5)
      v5 = *(_QWORD *)(v21 + 64);
    v22 = a3[6];
    v19 = *(_QWORD *)(v22 - 8);
    v20 = a3[7];
    if (*(_QWORD *)(v19 + 64) > v5)
      v5 = *(_QWORD *)(v19 + 64);
    v6 = *(_QWORD *)(a3[7] - 8);
    if (*(_QWORD *)(v6 + 64) > v5)
      v5 = *(_QWORD *)(v6 + 64);
    v7 = a3[8];
    v8 = a3[9];
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) > v5)
      v5 = *(_QWORD *)(v9 + 64);
    v10 = *(_QWORD *)(v8 - 8);
    if (*(_QWORD *)(v10 + 64) > v5)
      v5 = *(_QWORD *)(v10 + 64);
    v11 = a3[10];
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_QWORD *)(v12 + 64) > v5)
      v5 = *(_QWORD *)(v12 + 64);
    if (v5 <= 0x10)
      v13 = 16;
    else
      v13 = v5;
    v18 = a3[2];
    switch(*((_BYTE *)a1 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *))(v27 + 8))(a1);
        break;
      case 1:
        (*(void (**)(_OWORD *, uint64_t))(v26 + 8))(a1, v28);
        break;
      case 2:
        (*(void (**)(_OWORD *, uint64_t))(v23 + 8))(a1, v25);
        break;
      case 3:
        (*(void (**)(_OWORD *, uint64_t))(v21 + 8))(a1, v24);
        break;
      case 4:
        (*(void (**)(_OWORD *, uint64_t))(v19 + 8))(a1, v22);
        break;
      case 5:
        (*(void (**)(_OWORD *, uint64_t))(v6 + 8))(a1, v20);
        break;
      case 6:
        (*(void (**)(_OWORD *, uint64_t))(v9 + 8))(a1, v7);
        break;
      case 7:
        (*(void (**)(_OWORD *, uint64_t))(v10 + 8))(a1, v8);
        break;
      case 8:
        (*(void (**)(_OWORD *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 9:
        swift_release();
        break;
      default:
        if (v13 <= 3)
          v14 = v13;
        else
          v14 = 4;
        __asm { BR              X12 }
        return result;
    }
    switch(*((_BYTE *)a2 + v13))
    {
      case 0:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v27 + 32))(a1, a2, v18);
        v16 = 0;
        break;
      case 1:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v26 + 32))(a1, a2, v28);
        v16 = 1;
        break;
      case 2:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v23 + 32))(a1, a2, v25);
        v16 = 2;
        break;
      case 3:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v21 + 32))(a1, a2, v24);
        v16 = 3;
        break;
      case 4:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v19 + 32))(a1, a2, v22);
        v16 = 4;
        break;
      case 5:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v6 + 32))(a1, a2, v20);
        v16 = 5;
        break;
      case 6:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v9 + 32))(a1, a2, v7);
        v16 = 6;
        break;
      case 7:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v10 + 32))(a1, a2, v8);
        v16 = 7;
        break;
      case 8:
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v12 + 32))(a1, a2, v11);
        v16 = 8;
        break;
      case 9:
        *a1 = *a2;
        v16 = 9;
        break;
      default:
        if (v13 <= 3)
          v15 = v13;
        else
          v15 = 4;
        __asm { BR              X12 }
        return result;
    }
    *((_BYTE *)a1 + v13) = v16;
  }
  return a1;
}

uint64_t sub_1BDF9D208(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
  v4 = a3[5];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
  v5 = a3[7];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
  v6 = a3[9];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a3[10] - 8) + 64) > v3)
    v3 = *(_QWORD *)(*(_QWORD *)(a3[10] - 8) + 64);
  v7 = 16;
  if (v3 > 0x10)
    v7 = v3;
  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_37;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 246) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_37;
      goto LABEL_30;
    }
    if (v12 < 2)
    {
LABEL_37:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 0xA)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_37;
LABEL_30:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if (!(_DWORD)v8)
    return (v13 + 247);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF9D35C + 4 * byte_1BE1BEDAD[(v8 - 1)]))();
}

void sub_1BDF9D3A8(_WORD *a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[4] - 8) + 64);
  v6 = a4[5];
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[6] - 8) + 64);
  v7 = a4[7];
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[8] - 8) + 64);
  v8 = a4[9];
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a4[10] - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(a4[10] - 8) + 64);
  if (v5 <= 0x10)
    v5 = 16;
  v9 = v5 + 1;
  if (a3 < 0xF7)
  {
    v10 = 0u;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 246) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xF6)
    __asm { BR              X11 }
  v11 = a2 - 247;
  if (v9 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *a1 = v13;
        *((_BYTE *)a1 + 2) = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *a1 = v13;
      }
      else
      {
        *(_BYTE *)a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF9D5E0(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a2[2] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[3] - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[4] - 8) + 64);
  v3 = a2[5];
  if (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[6] - 8) + 64);
  v4 = a2[7];
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[8] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[8] - 8) + 64);
  v5 = a2[9];
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(a2[10] - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(a2[10] - 8) + 64);
  v6 = 16;
  if (v2 > 0x10)
    v6 = v2;
  if (*(unsigned __int8 *)(a1 + v6) < 0xAu)
    return *(unsigned __int8 *)(a1 + v6);
  if (v6 <= 3)
    v7 = v6;
  else
    v7 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDF9D6B8 + 4 * byte_1BE1BEDBB[v7]))();
}

void sub_1BDF9D714(_BYTE *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  if (a2 > 9)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v13 = a3[5];
    if (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v14 = a3[7];
    if (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
    v15 = a3[9];
    if (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64);
    if (*(_QWORD *)(*(_QWORD *)(a3[10] - 8) + 64) > v12)
      v12 = *(_QWORD *)(*(_QWORD *)(a3[10] - 8) + 64);
    if (v12 <= 0x10)
      v16 = 16;
    else
      v16 = v12;
    v17 = a2 - 10;
    if (v16 < 4)
    {
      v18 = v17 >> (8 * v16);
      v19 = v17 & ~(-1 << (8 * v16));
      a1[v16] = v18 + 10;
      bzero(a1, v16);
      if ((_DWORD)v16 == 3)
      {
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
      }
      else if ((_DWORD)v16 == 2)
      {
        *(_WORD *)a1 = v19;
      }
      else
      {
        *a1 = v19;
      }
    }
    else
    {
      a1[v16] = 10;
      bzero(a1, v16);
      *(_DWORD *)a1 = v17;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a3[10] - 8) + 64);
    v5 = *(_QWORD *)(*(_QWORD *)(a3[9] - 8) + 64);
    v6 = *(_QWORD *)(*(_QWORD *)(a3[8] - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(a3[7] - 8) + 64);
    v8 = *(_QWORD *)(*(_QWORD *)(a3[6] - 8) + 64);
    v9 = *(_QWORD *)(*(_QWORD *)(a3[5] - 8) + 64);
    v10 = *(_QWORD *)(*(_QWORD *)(a3[4] - 8) + 64);
    v11 = *(_QWORD *)(*(_QWORD *)(a3[3] - 8) + 64);
    if (v11 <= *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64))
      v11 = *(_QWORD *)(*(_QWORD *)(a3[2] - 8) + 64);
    if (v10 <= v11)
      v10 = v11;
    if (v9 <= v10)
      v9 = v10;
    if (v8 <= v9)
      v8 = v9;
    if (v7 <= v8)
      v7 = v8;
    if (v6 <= v7)
      v6 = v7;
    if (v5 <= v6)
      v5 = v6;
    if (v4 <= v5)
      v4 = v5;
    if (v4 <= 0x10)
      v4 = 16;
    a1[v4] = a2;
  }
}

uint64_t sub_1BDF9D914()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            result = swift_getAssociatedTypeWitness();
            if (v6 <= 0x3F)
            {
              result = swift_getAssociatedTypeWitness();
              if (v7 <= 0x3F)
              {
                result = swift_getAssociatedTypeWitness();
                if (v8 <= 0x3F)
                {
                  result = swift_getAssociatedTypeWitness();
                  if (v9 <= 0x3F)
                  {
                    swift_initEnumMetadataMultiPayload();
                    return 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1BDF9DB60(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void (*v19)(uint64_t *);
  uint64_t v21;
  uint64_t v22;

  v22 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v2 = *(_QWORD *)(v22 + 64);
  v21 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v21 + 64) > v2)
    v2 = *(_QWORD *)(v21 + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v3 + 64) > v2)
    v2 = *(_QWORD *)(v3 + 64);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v4 + 64) > v2)
    v2 = *(_QWORD *)(v4 + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v5 + 64) > v2)
    v2 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v6 + 64) > v2)
    v2 = *(_QWORD *)(v6 + 64);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v7 + 64) <= v2)
    v8 = v2;
  else
    v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v9 + 64) > v8)
    v8 = *(_QWORD *)(v9 + 64);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_QWORD *)(v10 + 64) <= v8)
    v11 = v8;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = *(_DWORD *)(v10 + 80);
  v13 = (*(_BYTE *)(v21 + 80) | *(_BYTE *)(v22 + 80) | *(_BYTE *)(v3 + 80) | *(_BYTE *)(v4 + 80) | *(_BYTE *)(v5 + 80) | *(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80) | v12);
  if (v13 <= 7
    && (v11 + 1 <= 0x18
      ? (v14 = ((*(_DWORD *)(v21 + 80) | *(_DWORD *)(v22 + 80) | *(_DWORD *)(v3 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | v12) & 0x100000) == 0)
      : (v14 = 0),
        v14))
  {
    if (*((unsigned __int8 *)a2 + v11) >= 0xAu)
    {
      if (v11 <= 3)
        v15 = v11;
      else
        v15 = 4;
      __asm { BR              X14 }
    }
    switch(*((_BYTE *)a2 + v11))
    {
      case 0:
        v17 = a1;
        (*(void (**)(uint64_t *))(v22 + 16))(a1);
        *((_BYTE *)a1 + v11) = 0;
        break;
      case 1:
        v17 = a1;
        (*(void (**)(uint64_t *))(v21 + 16))(a1);
        *((_BYTE *)a1 + v11) = 1;
        break;
      case 2:
        v17 = a1;
        (*(void (**)(uint64_t *))(v3 + 16))(a1);
        *((_BYTE *)a1 + v11) = 2;
        break;
      case 3:
        v17 = a1;
        (*(void (**)(uint64_t *))(v4 + 16))(a1);
        *((_BYTE *)a1 + v11) = 3;
        break;
      case 4:
        v17 = a1;
        (*(void (**)(uint64_t *))(v5 + 16))(a1);
        *((_BYTE *)a1 + v11) = 4;
        break;
      case 5:
        v17 = a1;
        (*(void (**)(uint64_t *))(v6 + 16))(a1);
        *((_BYTE *)a1 + v11) = 5;
        break;
      case 6:
        v17 = a1;
        (*(void (**)(uint64_t *))(v7 + 16))(a1);
        *((_BYTE *)a1 + v11) = 6;
        break;
      case 7:
        v19 = *(void (**)(uint64_t *))(v9 + 16);
        v17 = a1;
        v19(a1);
        *((_BYTE *)a1 + v11) = 7;
        break;
      case 8:
        v17 = a1;
        (*(void (**)(uint64_t *))(v10 + 16))(a1);
        *((_BYTE *)a1 + v11) = 8;
        break;
      case 9:
        v17 = a1;
        *((_BYTE *)a1 + v11) = 9;
        break;
      default:
        v17 = a1;
        memcpy(a1, a2, v11 + 1);
        break;
    }
  }
  else
  {
    v16 = *a2;
    *a1 = *a2;
    v17 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return v17;
}

uint64_t sub_1BDF9DFE8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  if (*(_QWORD *)(v25 + 64) > v3)
    v3 = *(_QWORD *)(v25 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  if (*(_QWORD *)(v23 + 64) > v3)
    v3 = *(_QWORD *)(v23 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  if (*(_QWORD *)(v21 + 64) > v3)
    v3 = *(_QWORD *)(v21 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v19 = *(_QWORD *)(v7 - 8);
  v20 = v7;
  if (*(_QWORD *)(v19 + 64) > v3)
    v3 = *(_QWORD *)(v19 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v8 - 8);
  v18 = v8;
  if (*(_QWORD *)(v17 + 64) > v3)
    v3 = *(_QWORD *)(v17 + 64);
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v3)
    v11 = v3;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(v12 - 8);
  if (*(_QWORD *)(v13 + 64) > v11)
    v11 = *(_QWORD *)(v13 + 64);
  result = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (v15 <= v11)
    v15 = v11;
  if (*(unsigned __int8 *)(a1 + v15) >= 0xAu)
  {
    if (v15 <= 3)
      v16 = v15;
    else
      v16 = 4;
    __asm { BR              X14 }
  }
  switch(*(_BYTE *)(a1 + v15))
  {
    case 0:
      goto LABEL_32;
    case 1:
      v2 = v25;
      AssociatedTypeWitness = v26;
      goto LABEL_32;
    case 2:
      v2 = v23;
      AssociatedTypeWitness = v24;
      goto LABEL_32;
    case 3:
      v2 = v21;
      AssociatedTypeWitness = v22;
      goto LABEL_32;
    case 4:
      v2 = v19;
      AssociatedTypeWitness = v20;
      goto LABEL_32;
    case 5:
      v2 = v17;
      AssociatedTypeWitness = v18;
      goto LABEL_32;
    case 6:
      v2 = v10;
      AssociatedTypeWitness = v9;
      goto LABEL_32;
    case 7:
      v2 = v13;
      AssociatedTypeWitness = v12;
      goto LABEL_32;
    case 8:
      v2 = *(_QWORD *)(result - 8);
      AssociatedTypeWitness = result;
LABEL_32:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_1BDF9E30C(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(v30 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  if (*(_QWORD *)(v28 + 64) > v3)
    v3 = *(_QWORD *)(v28 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  if (*(_QWORD *)(v26 + 64) > v3)
    v3 = *(_QWORD *)(v26 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  if (*(_QWORD *)(v24 + 64) > v3)
    v3 = *(_QWORD *)(v24 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  if (*(_QWORD *)(v22 + 64) > v3)
    v3 = *(_QWORD *)(v22 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v3)
    v3 = *(_QWORD *)(v9 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) <= v3)
    v12 = v3;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_QWORD *)(v14 + 64) > v12)
    v12 = *(_QWORD *)(v14 + 64);
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  if (*(_QWORD *)(v16 + 64) <= v12)
    v17 = v12;
  else
    v17 = *(_QWORD *)(v16 + 64);
  if (a2[v17] >= 0xAu)
  {
    if (v17 <= 3)
      v18 = v17;
    else
      v18 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v17])
  {
    case 0u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v31);
      a1[v17] = 0;
      return v19;
    case 1u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v29);
      v20 = 1;
      goto LABEL_36;
    case 2u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v27);
      v20 = 2;
      goto LABEL_36;
    case 3u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
      v20 = 3;
      goto LABEL_36;
    case 4u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v22 + 16))(a1, a2, v23);
      v20 = 4;
      goto LABEL_36;
    case 5u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v8);
      v20 = 5;
      goto LABEL_36;
    case 6u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
      v20 = 6;
      goto LABEL_36;
    case 7u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v14 + 16))(a1, a2, v13);
      v20 = 7;
      goto LABEL_36;
    case 8u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v16 + 16))(a1, a2, v15);
      v20 = 8;
      goto LABEL_36;
    case 9u:
      v20 = 9;
      v19 = a1;
LABEL_36:
      v19[v17] = v20;
      break;
    default:
      v19 = a1;
      memcpy(a1, a2, v17 + 1);
      break;
  }
  return v19;
}

unsigned __int8 *sub_1BDF9E6DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = swift_getAssociatedTypeWitness();
    v35 = *(_QWORD *)(v6 - 8);
    v36 = v6;
    if (*(_QWORD *)(v35 + 64) > v5)
      v5 = *(_QWORD *)(v35 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v33 = *(_QWORD *)(v7 - 8);
    v34 = v7;
    if (*(_QWORD *)(v33 + 64) > v5)
      v5 = *(_QWORD *)(v33 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v31 = *(_QWORD *)(v8 - 8);
    v32 = v8;
    if (*(_QWORD *)(v31 + 64) > v5)
      v5 = *(_QWORD *)(v31 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v29 = *(_QWORD *)(v9 - 8);
    v30 = v9;
    if (*(_QWORD *)(v29 + 64) > v5)
      v5 = *(_QWORD *)(v29 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v27 = *(_QWORD *)(v10 - 8);
    v28 = v10;
    if (*(_QWORD *)(v27 + 64) <= v5)
      v11 = v5;
    else
      v11 = *(_QWORD *)(v27 + 64);
    v26 = swift_getAssociatedTypeWitness();
    v12 = *(_QWORD *)(v26 - 8);
    if (*(_QWORD *)(v12 + 64) <= v11)
      v13 = v11;
    else
      v13 = *(_QWORD *)(v12 + 64);
    v14 = swift_getAssociatedTypeWitness();
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_QWORD *)(v15 + 64) > v13)
      v13 = *(_QWORD *)(v15 + 64);
    v16 = swift_getAssociatedTypeWitness();
    v17 = v16;
    v18 = *(_QWORD *)(v16 - 8);
    if (*(_QWORD *)(v18 + 64) <= v13)
      v19 = v13;
    else
      v19 = *(_QWORD *)(v18 + 64);
    if (a1[v19] >= 0xAu)
    {
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    v21 = v4;
    v22 = AssociatedTypeWitness;
    switch(a1[v19])
    {
      case 0u:
        goto LABEL_35;
      case 1u:
        v21 = v35;
        v22 = v36;
        goto LABEL_35;
      case 2u:
        v21 = v33;
        v22 = v34;
        goto LABEL_35;
      case 3u:
        v21 = v31;
        v22 = v32;
        goto LABEL_35;
      case 4u:
        v21 = v29;
        v22 = v30;
        goto LABEL_35;
      case 5u:
        v21 = v27;
        v22 = v28;
        goto LABEL_35;
      case 6u:
        v21 = v12;
        v22 = v26;
        goto LABEL_35;
      case 7u:
        v21 = v15;
        v22 = v14;
        goto LABEL_35;
      case 8u:
        v21 = *(_QWORD *)(v16 - 8);
        v22 = v16;
LABEL_35:
        (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 8))(a1, v22);
        break;
      default:
        break;
    }
    if (a2[v19] >= 0xAu)
    {
      if (v19 <= 3)
        v23 = v19;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v19])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v19] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v35 + 16))(a1, a2, v36);
        v24 = 1;
        goto LABEL_53;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v33 + 16))(a1, a2, v34);
        v24 = 2;
        goto LABEL_53;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(a1, a2, v32);
        v24 = 3;
        goto LABEL_53;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v30);
        v24 = 4;
        goto LABEL_53;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v28);
        v24 = 5;
        goto LABEL_53;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v26);
        v24 = 6;
        goto LABEL_53;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 16))(a1, a2, v14);
        v24 = 7;
        goto LABEL_53;
      case 8u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 16))(a1, a2, v17);
        v24 = 8;
        goto LABEL_53;
      case 9u:
        v24 = 9;
LABEL_53:
        a1[v19] = v24;
        break;
      default:
        memcpy(a1, a2, v19 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_1BDF9EBB8(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v3 = *(_QWORD *)(v30 + 64);
  v4 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v4 - 8);
  v29 = v4;
  if (*(_QWORD *)(v28 + 64) > v3)
    v3 = *(_QWORD *)(v28 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  if (*(_QWORD *)(v26 + 64) > v3)
    v3 = *(_QWORD *)(v26 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  if (*(_QWORD *)(v24 + 64) > v3)
    v3 = *(_QWORD *)(v24 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  if (*(_QWORD *)(v22 + 64) > v3)
    v3 = *(_QWORD *)(v22 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64) > v3)
    v3 = *(_QWORD *)(v9 + 64);
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_QWORD *)(v11 + 64) <= v3)
    v12 = v3;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_QWORD *)(v14 + 64) > v12)
    v12 = *(_QWORD *)(v14 + 64);
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  if (*(_QWORD *)(v16 + 64) <= v12)
    v17 = v12;
  else
    v17 = *(_QWORD *)(v16 + 64);
  if (a2[v17] >= 0xAu)
  {
    if (v17 <= 3)
      v18 = v17;
    else
      v18 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v17])
  {
    case 0u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v31);
      a1[v17] = 0;
      return v19;
    case 1u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v29);
      v20 = 1;
      goto LABEL_36;
    case 2u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v27);
      v20 = 2;
      goto LABEL_36;
    case 3u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
      v20 = 3;
      goto LABEL_36;
    case 4u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v22 + 32))(a1, a2, v23);
      v20 = 4;
      goto LABEL_36;
    case 5u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v8);
      v20 = 5;
      goto LABEL_36;
    case 6u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v10);
      v20 = 6;
      goto LABEL_36;
    case 7u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v14 + 32))(a1, a2, v13);
      v20 = 7;
      goto LABEL_36;
    case 8u:
      v19 = a1;
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v16 + 32))(a1, a2, v15);
      v20 = 8;
      goto LABEL_36;
    case 9u:
      v20 = 9;
      v19 = a1;
LABEL_36:
      v19[v17] = v20;
      break;
    default:
      v19 = a1;
      memcpy(a1, a2, v17 + 1);
      break;
  }
  return v19;
}

unsigned __int8 *sub_1BDF9EF88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(_QWORD *)(v4 + 64);
    v6 = swift_getAssociatedTypeWitness();
    v35 = *(_QWORD *)(v6 - 8);
    v36 = v6;
    if (*(_QWORD *)(v35 + 64) > v5)
      v5 = *(_QWORD *)(v35 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v33 = *(_QWORD *)(v7 - 8);
    v34 = v7;
    if (*(_QWORD *)(v33 + 64) > v5)
      v5 = *(_QWORD *)(v33 + 64);
    v8 = swift_getAssociatedTypeWitness();
    v31 = *(_QWORD *)(v8 - 8);
    v32 = v8;
    if (*(_QWORD *)(v31 + 64) > v5)
      v5 = *(_QWORD *)(v31 + 64);
    v9 = swift_getAssociatedTypeWitness();
    v29 = *(_QWORD *)(v9 - 8);
    v30 = v9;
    if (*(_QWORD *)(v29 + 64) > v5)
      v5 = *(_QWORD *)(v29 + 64);
    v10 = swift_getAssociatedTypeWitness();
    v27 = *(_QWORD *)(v10 - 8);
    v28 = v10;
    if (*(_QWORD *)(v27 + 64) <= v5)
      v11 = v5;
    else
      v11 = *(_QWORD *)(v27 + 64);
    v26 = swift_getAssociatedTypeWitness();
    v12 = *(_QWORD *)(v26 - 8);
    if (*(_QWORD *)(v12 + 64) <= v11)
      v13 = v11;
    else
      v13 = *(_QWORD *)(v12 + 64);
    v14 = swift_getAssociatedTypeWitness();
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_QWORD *)(v15 + 64) > v13)
      v13 = *(_QWORD *)(v15 + 64);
    v16 = swift_getAssociatedTypeWitness();
    v17 = v16;
    v18 = *(_QWORD *)(v16 - 8);
    if (*(_QWORD *)(v18 + 64) <= v13)
      v19 = v13;
    else
      v19 = *(_QWORD *)(v18 + 64);
    if (a1[v19] >= 0xAu)
    {
      if (v19 <= 3)
        v20 = v19;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    v21 = v4;
    v22 = AssociatedTypeWitness;
    switch(a1[v19])
    {
      case 0u:
        goto LABEL_35;
      case 1u:
        v21 = v35;
        v22 = v36;
        goto LABEL_35;
      case 2u:
        v21 = v33;
        v22 = v34;
        goto LABEL_35;
      case 3u:
        v21 = v31;
        v22 = v32;
        goto LABEL_35;
      case 4u:
        v21 = v29;
        v22 = v30;
        goto LABEL_35;
      case 5u:
        v21 = v27;
        v22 = v28;
        goto LABEL_35;
      case 6u:
        v21 = v12;
        v22 = v26;
        goto LABEL_35;
      case 7u:
        v21 = v15;
        v22 = v14;
        goto LABEL_35;
      case 8u:
        v21 = *(_QWORD *)(v16 - 8);
        v22 = v16;
LABEL_35:
        (*(void (**)(unsigned __int8 *, uint64_t))(v21 + 8))(a1, v22);
        break;
      default:
        break;
    }
    if (a2[v19] >= 0xAu)
    {
      if (v19 <= 3)
        v23 = v19;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v19])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v19] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v35 + 32))(a1, a2, v36);
        v24 = 1;
        goto LABEL_53;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v33 + 32))(a1, a2, v34);
        v24 = 2;
        goto LABEL_53;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 32))(a1, a2, v32);
        v24 = 3;
        goto LABEL_53;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v30);
        v24 = 4;
        goto LABEL_53;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v28);
        v24 = 5;
        goto LABEL_53;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v26);
        v24 = 6;
        goto LABEL_53;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 32))(a1, a2, v14);
        v24 = 7;
        goto LABEL_53;
      case 8u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 32))(a1, a2, v17);
        v24 = 8;
        goto LABEL_53;
      case 9u:
        v24 = 9;
LABEL_53:
        a1[v19] = v24;
        break;
      default:
        memcpy(a1, a2, v19 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1BDF9F464(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int v18;
  int v19;
  unsigned int v20;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  v12 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) <= v4)
    v13 = v4;
  else
    v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_36;
  v14 = v13 + 1;
  v15 = 8 * (v13 + 1);
  if ((v13 + 1) <= 3)
  {
    v18 = ((a2 + ~(-1 << v15) - 245) >> v15) + 1;
    if (HIWORD(v18))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_36;
      goto LABEL_29;
    }
    if (v18 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_36;
      goto LABEL_29;
    }
    if (v18 < 2)
    {
LABEL_36:
      v20 = *(unsigned __int8 *)(a1 + v13);
      if (v20 >= 0xB)
        return (v20 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_36;
LABEL_29:
  v19 = (v16 - 1) << v15;
  if (v14 > 3)
    v19 = 0;
  if ((_DWORD)v14)
  {
    if (v14 > 3)
      LODWORD(v14) = 4;
    __asm { BR              X11 }
  }
  return (v19 + 246);
}

void sub_1BDF9F720(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  v12 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  v13 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) > v6)
    v6 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v14 <= v6)
    v14 = v6;
  v15 = v14 + 1;
  if (a3 < 0xF6)
  {
    v16 = 0u;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 + ~(-1 << (8 * v15)) - 245) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = 4u;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = 1u;
  }
  if (a2 <= 0xF5)
    __asm { BR              X11 }
  v17 = a2 - 246;
  if (v15 < 4)
  {
    if ((_DWORD)v14 != -1)
    {
      v19 = v17 & ~(-1 << (8 * v15));
      bzero(a1, v15);
      if ((_DWORD)v15 == 3)
      {
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
      }
      else if ((_DWORD)v15 == 2)
      {
        *(_WORD *)a1 = v19;
      }
      else
      {
        *a1 = v19;
      }
    }
  }
  else
  {
    bzero(a1, v14 + 1);
    *(_DWORD *)a1 = v17;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDF9FA58(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v5 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v2)
    v2 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v10 <= v2)
    v10 = v2;
  result = *(unsigned __int8 *)(a1 + v10);
  if (result >= 0xA)
  {
    if (v10 <= 3)
      v12 = v10;
    else
      v12 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDF9FCA4(_BYTE *a1, unsigned int a2)
{
  size_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v7 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v9 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  v10 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v11 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) > v4)
    v4 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64);
  v12 = swift_getAssociatedTypeWitness();
  if (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) <= v4)
    v13 = v4;
  else
    v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  if (a2 > 9)
  {
    v14 = a2 - 10;
    if (v13 < 4)
    {
      v15 = v14 >> (8 * v13);
      v16 = v14 & ~(-1 << (8 * v13));
      a1[v13] = v15 + 10;
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
    else
    {
      a1[v13] = 10;
      bzero(a1, v13);
      *(_DWORD *)a1 = v14;
    }
  }
  else
  {
    a1[v13] = a2;
  }
}

uint64_t Reference.identity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

__n128 Ref.init(id:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDF9FF2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7[2];

  v4 = *v2;
  v5 = v2[1];
  v7[0] = v4;
  v7[1] = v5;
  sub_1BDDB6CA4(v4, v5);
  sub_1BDE565B0(v7, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return sub_1BDDB796C(v4, v5);
}

double Ref.init<A>(_:_:identity:)@<D0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  double result;
  __int128 v10;

  v7 = *a2;
  v8 = a2[1];
  swift_retain();
  sub_1BDE58070(a1, a3, (uint64_t *)&v10);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  sub_1BDD9CC0C(v7, v8);
  result = *(double *)&v10;
  *a4 = v10;
  return result;
}

uint64_t Ref.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7[2];

  v5 = v2[1];
  v7[0] = *v2;
  v4 = v7[0];
  v7[1] = v5;
  swift_retain();
  sub_1BDDB6CA4(v7[0], v5);
  sub_1BDE565B0(v7, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  swift_release();
  return sub_1BDDB796C(v4, v5);
}

void (*Ref.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  v10 = *v3;
  v9 = v3[1];
  v7[4] = v10;
  v7[5] = v9;
  v7[6] = v8;
  swift_retain();
  sub_1BDDB6CA4(v10, v9);
  v7[7] = sub_1BDE567D8(v7, v7 + 4, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  return sub_1BDE5B014;
}

uint64_t Ref.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  __int128 v6;

  v6 = *v4;
  return (*(uint64_t (**)(__int128 *, _QWORD, _QWORD, uint64_t))(a4 + 8))(&v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

{
  __int128 *v4;
  __int128 v6;

  v6 = *v4;
  return (*(uint64_t (**)(__int128 *, _QWORD, _QWORD, uint64_t))(a4 + 16))(&v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BDFA0200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a3 + a2 - 24);
  v6 = *(_QWORD *)(a3 + a2 - 8);
  v7 = type metadata accessor for Ref(0, *(_QWORD *)(a3 + a2 - 32), *(_QWORD *)(a3 + a2 - 16), a4);
  return Ref.subscript.getter(a2, v7, v5, v6);
}

uint64_t sub_1BDFA0270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 8);
  v8 = type metadata accessor for Ref(0, *(_QWORD *)(a4 + a3 - 32), *(_QWORD *)(a4 + a3 - 16), a4);
  return sub_1BDFA1D28(a1, a3, v8, v6, v7);
}

uint64_t Ref.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1BDFA1D28(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

void (*Ref.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(_QWORD *, _QWORD *, _QWORD, _QWORD, uint64_t, uint64_t);

  v10 = malloc(0x38uLL);
  *a1 = v10;
  v11 = *v5;
  v12 = v5[1];
  v10[4] = *v5;
  v10[5] = v12;
  v13 = *(uint64_t (**)(_QWORD *, _QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(a5 + 32);
  sub_1BDDB6CA4(v11, v12);
  v10[6] = v13(v10, v10 + 4, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4, a5);
  return sub_1BDF072E8;
}

uint64_t sub_1BDFA03D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v3 = *(uint64_t *)((char *)a2 + a3 - 32);
  v4 = *(uint64_t *)((char *)a2 + a3 - 16);
  v5 = *a1;
  v6 = *a2;
  v10 = a1[1];
  sub_1BDDB6CA4(*a1, v10);
  v8 = type metadata accessor for Ref(0, v3, v4, v7);
  Ref.subscript.getter(v6, v8);
  return sub_1BDDB796C(v5, v10);
}

uint64_t sub_1BDFA045C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *a3;
  v6 = type metadata accessor for Ref(0, *(uint64_t *)((char *)a3 + a4 - 32), *(uint64_t *)((char *)a3 + a4 - 16), a4);
  swift_retain();
  sub_1BDFA1DF4(a1, v5, v6);
  return swift_release();
}

uint64_t Ref.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDFA1DF4(a1, a2, a3);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 8))(a1);
}

uint64_t *Ref.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v6;
  __int128 v8;

  v8 = *v4;
  v6 = type metadata accessor for Capsule(0, a3, a4, a4);
  return Capsule.subscript.getter((uint64_t *)&v8, v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t Ref.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 *v5;
  __int128 v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  __int128 v12[2];
  uint64_t v13;

  if (*(_QWORD *)(a1 + 16))
  {
    v8 = *(_OWORD *)a1;
    v13 = *(_QWORD *)(a1 + 16);
    v12[0] = *v5;
    v12[1] = v8;
    v9 = type metadata accessor for Capsule<>.ObservableDifference(0, a3, a4, a4);
    return Capsule<>.ObservableDifference.subscript.getter(v12, v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a5);
  }
  else
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a5, 1, 1, AssociatedTypeWitness);
  }
}

uint64_t Ref.id.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1BDDB6CA4(v2, v3);
}

uint64_t Ref.id.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_1BDDB796C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*Ref.id.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t Ref.init(identity:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BDFA06A0(a1, (uint64_t)&unk_1E775A010, a2);
}

uint64_t Ref.init(id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BDFA06A0(a1, (uint64_t)&unk_1E7759FE8, a2);
}

uint64_t sub_1BDFA06A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v18 = sub_1BDDC4278(a2);
  v19 = v10;
  v11 = sub_1BDEE7C7C();
  v13 = v12;
  sub_1BE1B1EA4();
  sub_1BDDB796C(v11, v13);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  v15 = v18;
  v16 = v19;
  result = ((uint64_t (*)(uint64_t, uint64_t))v14)(a1, v6);
  *a3 = v15;
  a3[1] = v16;
  return result;
}

double Ref.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v8;

  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a3 + 48))(&v8, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  result = *(double *)&v8;
  *a4 = v8;
  return result;
}

double Ref.init<A>(_:_:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;

  swift_retain();
  sub_1BDE57208(a1, a2, a3, v8);
  swift_release();
  swift_release();
  v10 = type metadata accessor for Capsule(0, a2, *(_QWORD *)(a3 + 16), v9);
  Capsule<>.rootID.getter((uint64_t *)&v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  result = *(double *)&v12;
  *a4 = v12;
  return result;
}

uint64_t Ref.visitReferences(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = *v2;
  v5 = v2[1];
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v9[0] = v4;
  v9[1] = v5;
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(v7 + 8))(v9, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v6, v7);
}

uint64_t Ref.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;

  v5 = *v3;
  v6 = v3[1];
  if (a1)
  {
    v9 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 48))(&v18, a2, v9);
    v11 = v18;
    v10 = v19;
    if (*(_QWORD *)(a1 + 16))
    {
      v12 = sub_1BDDB7F0C(v18, v19);
      if ((v13 & 1) != 0)
      {
        v14 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v12);
        v15 = *v14;
        v16 = v14[1];
        sub_1BDDB6CA4(*v14, v16);
        result = sub_1BDDB796C(v11, v10);
        *a3 = v15;
        a3[1] = v16;
        return result;
      }
    }
    sub_1BDDB796C(v11, v10);
  }
  *a3 = v5;
  a3[1] = v6;
  return sub_1BDDB6CA4(v5, v6);
}

uint64_t static Ref.canContainAssets.getter()
{
  return 0;
}

uint64_t Ref.ObservableDifference.contents.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  if (v3 >> 60 == 15)
    v4 = 0;
  else
    v4 = *v1;
  v5 = 0xF000000000000000;
  if (v3 >> 60 != 15)
    v5 = v1[1];
  *a1 = v4;
  a1[1] = v5;
  return sub_1BDD9C9A0(v2, v3);
}

uint64_t Ref.ObservableDifference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  __int128 v15[2];
  uint64_t v16;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = v5[1];
  if (v8)
    v10 = v9 >> 60 == 15;
  else
    v10 = 1;
  if (v10)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a5, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v12 = *v5;
    v15[1] = *(_OWORD *)a1;
    v16 = v8;
    *(_QWORD *)&v15[0] = v12;
    *((_QWORD *)&v15[0] + 1) = v9;
    v13 = type metadata accessor for Capsule<>.ObservableDifference(0, a3, a4, a4);
    return Capsule<>.ObservableDifference.subscript.getter(v15, v13, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a5);
  }
}

uint64_t Ref.ObservableDifference.isIdentityChanged.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v3;
  __int128 v4;

  v1 = *v0;
  v3 = xmmword_1BE1B6B20;
  v4 = v1;
  return static Ref.ObservableDifference.== infix(_:_:)((uint64_t *)&v4, (uint64_t)&v3) & 1;
}

uint64_t static Ref.ObservableDifference.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8[2];
  uint64_t v9[2];

  v3 = *a1;
  v2 = a1[1];
  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v2 >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v9[0] = *a1;
      v9[1] = v2;
      v8[0] = v5;
      v8[1] = v4;
      sub_1BDD9C9A0(v5, v4);
      sub_1BDD9C9A0(v3, v2);
      sub_1BDD9C9A0(v5, v4);
      sub_1BDD9C9A0(v3, v2);
      v6 = static Ref.== infix(_:_:)(v9, v8);
      sub_1BDD9CC0C(v3, v2);
      sub_1BDD9CC0C(v5, v4);
      sub_1BDD9CC0C(v5, v4);
      sub_1BDD9CC0C(v3, v2);
      return v6 & 1;
    }
    goto LABEL_5;
  }
  if (v4 >> 60 != 15)
  {
LABEL_5:
    sub_1BDD9C9A0(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    sub_1BDD9C9A0(v3, v2);
    sub_1BDD9CC0C(v3, v2);
    sub_1BDD9CC0C(v5, v4);
    v6 = 0;
    return v6 & 1;
  }
  sub_1BDD9CC0C(*a1, v2);
  sub_1BDD9CC0C(v5, v4);
  v6 = 1;
  return v6 & 1;
}

uint64_t static Ref.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  sub_1BDDB6CA4(*a1, v3);
  sub_1BDDB6CA4(v4, v5);
  sub_1BDDD6F30(v2, v3);
  v7 = v6;
  sub_1BDDB796C(v4, v5);
  sub_1BDDB796C(v2, v3);
  return v7 & 1;
}

uint64_t sub_1BDFA0CC0(uint64_t *a1, uint64_t a2)
{
  return static Ref.ObservableDifference.== infix(_:_:)(a1, a2);
}

double sub_1BDFA0CCC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1BE1B6B20;
  return result;
}

double Ref.observableDifference(from:with:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[2];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v30 = a2;
  v31 = a4;
  v6 = *(_QWORD *)(a3 + 16);
  v29 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - v10;
  v12 = *a1;
  v13 = a1[1];
  v14 = *v4;
  v15 = v4[1];
  sub_1BDDB6CA4(*v4, v15);
  sub_1BDDB6CA4(v12, v13);
  sub_1BDDD6F30(v14, v15);
  v17 = v16;
  sub_1BDDB796C(v12, v13);
  sub_1BDDB796C(v14, v15);
  if ((v17 & 1) != 0)
  {
    v27 = v11;
    v28 = v9;
    v18 = v31;
    sub_1BDD86DEC(v30, (uint64_t)v33, &qword_1ED6EF878);
    v19 = v34;
    if (v34)
    {
      v20 = v35;
      __swift_project_boxed_opaque_existential_1(v33, v34);
      v32[0] = v14;
      v32[1] = v15;
      v21 = v27;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8))(v32, v6, v29, v19, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v21, 1, AssociatedTypeWitness);
      v23 = v18;
      v24 = v8;
      v25 = v28;
      if (v22 != 1)
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v8);
        *v18 = v14;
        v18[1] = v15;
        sub_1BDDB6CA4(v14, v15);
        return result;
      }
    }
    else
    {
      sub_1BDD86E30((uint64_t)v33, &qword_1ED6EF878);
      v21 = v27;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v27, 1, 1, AssociatedTypeWitness);
      v23 = v18;
      v24 = v8;
      v25 = v28;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v24);
    result = 0.0;
    *(_OWORD *)v23 = xmmword_1BE1BFD40;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)v31 = xmmword_1BE1B6B20;
  }
  return result;
}

uint64_t Ref.hash(into:)()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  sub_1BDDB6CA4(v2, v1);
  sub_1BE1B1E8C();
  return sub_1BDDB796C(v2, v1);
}

uint64_t Ref.hashValue.getter()
{
  sub_1BE1B36F8();
  Ref.hash(into:)();
  return sub_1BE1B371C();
}

uint64_t sub_1BDFA0F98()
{
  sub_1BE1B36F8();
  Ref.hash(into:)();
  return sub_1BE1B371C();
}

void sub_1BDFA0FE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  Ref.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

void Ref.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v49 = a3;
  v48 = a2;
  v47 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v5);
  v54 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Proto_KeyPath(0);
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v55 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v50);
  v52 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_Value(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v59 = (uint64_t)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v46 - v19;
  v21 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v20, &qword_1ED6F3770);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v13) = v22(v20, 1, v12);
  sub_1BDD86E30((uint64_t)v20, &qword_1ED6F3770);
  if ((_DWORD)v13 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v23 = 0xD000000000000017;
    *(_QWORD *)(v23 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v23 + 16) = 0;
    swift_willThrow();
LABEL_17:
    swift_release();
    return;
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = a1;
  sub_1BDD86DEC(v21, (uint64_t)v18, &qword_1ED6F3770);
  if (v22(v18, 1, v12) == 1)
  {
    __break(1u);
    goto LABEL_21;
  }
  v24 = a1;
  v25 = v59;
  sub_1BDDA2E8C((uint64_t)v18, v59, type metadata accessor for Proto_Value);
  v26 = *(_QWORD *)(v25 + *(int *)(v12 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v26, (uint64_t)v10, &qword_1ED6F26F0);
  v27 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v10, 1, v27);
  v29 = v50;
  if (v28 == 1)
  {
    swift_retain();
    sub_1BDD86E30((uint64_t)v10, &qword_1ED6F26F0);
    v31 = (uint64_t)v54;
    v30 = v55;
    v32 = v51;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v32 = v51;
    if (EnumCaseMultiPayload == 7)
    {
      v34 = (uint64_t)v10;
      v35 = v52;
      sub_1BDDA2E8C(v34, v52, type metadata accessor for Proto_Reference);
      v31 = (uint64_t)v54;
      v30 = v55;
      v36 = v53;
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v31 = (uint64_t)v54;
    v30 = v55;
  }
  v35 = v52;
  sub_1BE1B20E4();
  v37 = *(int *)(v29 + 20);
  v36 = v53;
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(v35 + v37) = qword_1ED6EFD68;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0(v59, type metadata accessor for Proto_Value);
  v38 = *(_QWORD *)(v35 + *(int *)(v29 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1BDD86DEC(v38, v31, &qword_1ED6F3790);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v36) == 1)
  {
    *v30 = MEMORY[0x1E0DEE9D8];
    v30[1] = sub_1BE1B20CC();
    v30[2] = v39;
    sub_1BE1B20E4();
    sub_1BDD86E30(v31, &qword_1ED6F3790);
  }
  else
  {
    sub_1BDDA2E8C(v31, (uint64_t)v30, type metadata accessor for Proto_KeyPath);
  }
  v40 = v56;
  sub_1BDD9C3E0(v35, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1BDDC8ECC((uint64_t)v30);
  if (v40)
  {
    swift_release();
    swift_setDeallocating();
    goto LABEL_17;
  }
  v41 = *(_QWORD *)(v24 + 16);
  if (v41)
  {
    v43 = v57;
    v42 = v58;
    v44 = *(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v41 + 176);
    sub_1BDDB6CA4(v57, v58);
    swift_retain();
    v44(v48, &v57, v24, 0, v48, v49);
    swift_release();
    swift_release();
    swift_release();
    sub_1BDDB796C(v43, v42);
    v45 = v47;
    *v47 = v43;
    v45[1] = v42;
    return;
  }
LABEL_21:
  __break(1u);
}

uint64_t sub_1BDFA15D8()
{
  return Ref.encode(to:)();
}

uint64_t Ref.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v2 = MEMORY[0x1E0C80A78](v1);
  v66 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v65 = (uint64_t)&v55 - v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v67 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v64 = (uint64_t)&v55 - v8;
  v9 = type metadata accessor for Proto_Reference(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v55 - v13;
  v63 = type metadata accessor for Proto_KeyPath(0);
  v15 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *v0;
  v19 = v0[1];
  v20 = v68;
  result = sub_1BDE25870();
  if (v20)
    return result;
  v22 = result;
  v58 = v15;
  v61 = v12;
  v62 = v14;
  v68 = v9;
  v60 = 0;
  *v17 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  sub_1BDDB6CA4(v18, v19);
  v23 = sub_1BE1B20CC();
  v25 = v24;
  v26 = v63;
  sub_1BE1B20E4();
  sub_1BDDB796C(v23, v25);
  v17[1] = v18;
  v17[2] = v19;
  v59 = v22;
  v27 = v22 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v56 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
  v28 = *(_QWORD *)(v27 + v56)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v29 = v64;
  sub_1BDD86DEC(v28, v64, &qword_1ED6F26F0);
  v30 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48);
  v32 = v31(v29, 1, v30);
  v57 = v30;
  if (v32 == 1)
  {
    sub_1BDD86E30(v29, &qword_1ED6F26F0);
    v33 = v68;
    v34 = (uint64_t)v66;
    v35 = (uint64_t)v62;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v33 = v68;
    v34 = (uint64_t)v66;
    v35 = (uint64_t)v62;
    if (EnumCaseMultiPayload == 7)
    {
      sub_1BDDA2E8C(v29, (uint64_t)v62, type metadata accessor for Proto_Reference);
      goto LABEL_10;
    }
    sub_1BDD9C3E0(v29, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v37 = v35;
  v38 = *(int *)(v33 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(v37 + v38) = qword_1ED6EFD68;
  swift_retain();
  v35 = v37;
LABEL_10:
  v39 = *(int *)(v33 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v40 = swift_retain();
    v35 = (uint64_t)v62;
    *(_QWORD *)(v35 + v39) = sub_1BDDA1424(v40);
    swift_release();
  }
  v41 = v35;
  v42 = *(_QWORD *)(v35 + v39);
  v43 = v65;
  sub_1BDDA2E8C((uint64_t)v17, v65, type metadata accessor for Proto_KeyPath);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v43, 0, 1, v26);
  sub_1BDFA1E6C(v43, v34);
  v44 = v42 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1BDFA1EB4(v34, v44);
  swift_endAccess();
  swift_release();
  sub_1BE12A648(v41);
  v45 = *(_QWORD *)(v27 + v56)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v46 = v45;
  v47 = v67;
  sub_1BDD86DEC(v46, v67, &qword_1ED6F26F0);
  if (v31(v47, 1, v57) == 1)
  {
    sub_1BDD86E30(v47, &qword_1ED6F26F0);
    v48 = (uint64_t)v61;
LABEL_17:
    v50 = v68;
    sub_1BE1B20E4();
    v51 = *(int *)(v50 + 20);
    if (qword_1ED6EFD78 != -1)
      swift_once();
    *(_QWORD *)(v48 + v51) = qword_1ED6EFD68;
    swift_retain();
    goto LABEL_20;
  }
  v49 = swift_getEnumCaseMultiPayload();
  v48 = (uint64_t)v61;
  if (v49 != 7)
  {
    sub_1BDD9C3E0(v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_17;
  }
  sub_1BDDA2E8C(v47, (uint64_t)v61, type metadata accessor for Proto_Reference);
  v50 = v68;
LABEL_20:
  v52 = *(int *)(v50 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v53 = swift_retain();
    *(_QWORD *)(v48 + v52) = sub_1BDDA1424(v53);
    swift_release();
  }
  v54 = *(_QWORD *)(v48 + v52);
  swift_beginAccess();
  *(_QWORD *)(v54 + 24) = 0;
  *(_BYTE *)(v54 + 32) = 1;
  sub_1BE12A648(v48);
  swift_endAccess();
  return swift_release();
}

void sub_1BDFA1BD8(_BYTE *a1@<X8>)
{
  Ref.minEncodingVersion.getter(a1);
}

void Ref.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Ref.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _BYTE v5[24];
  uint64_t v6;

  v2 = *v1;
  v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDDB6CA4(v2, v3);
  sub_1BE1B3770();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  sub_1BDE0B580();
  sub_1BE1B34F4();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return sub_1BDDB796C(v2, v3);
}

void Ref.init(from:)()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDFA1D08()
{
  Ref.init(from:)();
}

uint64_t sub_1BDFA1D14(_QWORD *a1)
{
  return Ref.encode(to:)(a1);
}

uint64_t sub_1BDFA1D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD v17[2];

  v9 = *(_QWORD *)(a3 + 16);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v5;
  v12 = v5[1];
  (*(void (**)(char *))(v14 + 16))(v11);
  v17[0] = v13;
  v17[1] = v12;
  v15 = *(uint64_t (**)(char *, _QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))(a5 + 24);
  sub_1BDDB6CA4(v13, v12);
  return v15(v11, v17, v9, *(_QWORD *)(a3 + 24), a4, a5);
}

uint64_t sub_1BDFA1DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v7 = *v3;
  v6 = v3[1];
  v9[0] = v7;
  v9[1] = v6;
  swift_retain();
  sub_1BDDB6CA4(v7, v6);
  sub_1BDE76A9C(a1, (uint64_t)v9, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  return swift_release();
}

uint64_t sub_1BDFA1E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDFA1EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1BDFA1EFC()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDFA1F0C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDFA1F38(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>);
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDFA1F84()
{
  return 32;
}

__n128 sub_1BDFA1F90(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1BDFA1FA4()
{
  return 32;
}

__n128 sub_1BDFA1FB0(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t dispatch thunk of Reference.identity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Reference.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t type metadata accessor for Ref(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Ref);
}

uint64_t sub_1BDFA1FD8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t *sub_1BDFA1FE4(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_1BDDB796C(*result, v1);
  return result;
}

uint64_t sub_1BDFA1FFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_1BDDB6CA4(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *sub_1BDFA2050(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      v9 = *a2;
      sub_1BDDB6CA4(v9, v5);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_1BDDB796C(v10, v11);
      return a1;
    }
    sub_1BDDB796C(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v7 = *a2;
  sub_1BDDB6CA4(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *sub_1BDFA20E0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_1BDDB796C(v7, v4);
      return a1;
    }
    sub_1BDDB796C(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t sub_1BDFA2140(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t sub_1BDFA2194(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_1BDFA21E4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_1BDFA220C(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t type metadata accessor for Ref.ObservableDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Ref.ObservableDifference);
}

uint64_t sub_1BDFA224C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v195 = a4;
  v218 = a2;
  v214 = a5;
  v7 = type metadata accessor for Proto_CRDT(0);
  v206 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v183 = (uint64_t)&v172 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v189 = (uint64_t)&v172 - v10;
  v212 = type metadata accessor for Proto_Value(0);
  v209 = *(_QWORD *)(v212 - 8);
  v11 = MEMORY[0x1E0C80A78](v212);
  v179 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v203 = (char *)&v172 - v14;
  v215 = a3;
  v185 = *(_QWORD *)(a3 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v180 = (char *)&v172 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v186 = (char *)&v172 - v18;
  MEMORY[0x1E0C80A78](v17);
  v204 = (char *)&v172 - v19;
  v211 = type metadata accessor for Proto_Timestamp(0);
  v207 = *(_QWORD *)(v211 - 8);
  v20 = MEMORY[0x1E0C80A78](v211);
  v190 = (unint64_t *)((char *)&v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = MEMORY[0x1E0C80A78](v20);
  v197 = (unint64_t *)((char *)&v172 - v23);
  MEMORY[0x1E0C80A78](v22);
  v201 = (unint64_t *)((char *)&v172 - v24);
  v25 = type metadata accessor for FinalizedTimestamp(0);
  v26 = MEMORY[0x1E0C80A78](v25);
  v176 = (uint64_t)&v172 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v191 = (uint64_t)&v172 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v198 = (uint64_t)&v172 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v184 = (uint64_t)&v172 - v33;
  MEMORY[0x1E0C80A78](v32);
  v202 = (char *)&v172 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v36 = MEMORY[0x1E0C80A78](v35);
  v188 = (uint64_t)&v172 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v196 = (uint64_t)&v172 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v200 = (uint64_t)&v172 - v41;
  MEMORY[0x1E0C80A78](v40);
  v43 = (char *)&v172 - v42;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v45 = MEMORY[0x1E0C80A78](v44);
  v178 = (uint64_t)&v172 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45);
  v192 = (uint64_t)&v172 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v199 = (uint64_t)&v172 - v50;
  MEMORY[0x1E0C80A78](v49);
  v52 = (char *)&v172 - v51;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v54 = MEMORY[0x1E0C80A78](v53);
  v181 = (uint64_t)&v172 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = MEMORY[0x1E0C80A78](v54);
  v193 = (uint64_t)&v172 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v205 = (uint64_t)&v172 - v59;
  MEMORY[0x1E0C80A78](v58);
  v61 = (char *)&v172 - v60;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v63 = MEMORY[0x1E0C80A78](v62);
  v177 = (uint64_t)&v172 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = MEMORY[0x1E0C80A78](v63);
  v187 = (char *)&v172 - v66;
  MEMORY[0x1E0C80A78](v65);
  v68 = (char *)&v172 - v67;
  v210 = type metadata accessor for Proto_Register(0);
  v69 = MEMORY[0x1E0C80A78](v210);
  v182 = (uint64_t)&v172 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = MEMORY[0x1E0C80A78](v69);
  v194 = (uint64_t)&v172 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  v75 = (char *)&v172 - v74;
  MEMORY[0x1E0C80A78](v73);
  v213 = (uint64_t)&v172 - v76;
  v208 = v7;
  v77 = *(int *)(v7 + 20);
  v217 = a1;
  v78 = *(_QWORD *)(a1 + v77)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v78, (uint64_t)v68, &qword_1ED6F2DF0);
  v79 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 48);
  if (v80(v68, 1, v79) == 1)
  {
    sub_1BDD86E30((uint64_t)v68, &qword_1ED6F2DF0);
LABEL_6:
    v83 = v215;
    if (swift_conformsToProtocol2())
      v84 = v83;
    else
      v84 = 0;
    if (v84)
    {
      swift_release();
      result = sub_1BDD9C3E0(v217, type metadata accessor for Proto_CRDT);
      *v214 = 0;
      return result;
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v86 = 0xD00000000000001CLL;
    *(_QWORD *)(v86 + 8) = 0x80000001BE1CF3F0;
    *(_BYTE *)(v86 + 16) = 0;
    swift_willThrow();
    swift_release();
    v87 = type metadata accessor for Proto_CRDT;
    v88 = v217;
    return sub_1BDD9C3E0(v88, v87);
  }
  if (swift_getEnumCaseMultiPayload())
  {
    v81 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf;
    v82 = (uint64_t)v68;
LABEL_5:
    sub_1BDD9C3E0(v82, v81);
    goto LABEL_6;
  }
  v173 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v80;
  v174 = v79;
  v89 = v213;
  sub_1BDDA2E8C((uint64_t)v68, v213, type metadata accessor for Proto_Register);
  v90 = v210;
  v175 = *(int *)(v210 + 20);
  v91 = *(_QWORD *)(v89 + v175)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v91, (uint64_t)v61, &qword_1ED6F3770);
  v209 = *(_QWORD *)(v209 + 48);
  LODWORD(v91) = ((uint64_t (*)(char *, uint64_t, uint64_t))v209)(v61, 1, v212);
  sub_1BDD86E30((uint64_t)v61, &qword_1ED6F3770);
  sub_1BDD9C318(v89, (uint64_t)v75, type metadata accessor for Proto_Register);
  if ((_DWORD)v91 == 1)
  {
    v92 = *(_QWORD *)&v75[*(int *)(v90 + 20)]
        + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    sub_1BDD86DEC(v92, (uint64_t)v52, &qword_1ED6F3728);
    LODWORD(v92) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v206 + 48))(v52, 1, v208);
    v89 = v213;
    sub_1BDD86E30((uint64_t)v52, &qword_1ED6F3728);
    sub_1BDD9C3E0((uint64_t)v75, type metadata accessor for Proto_Register);
    v93 = v211;
    if ((_DWORD)v92 == 1)
    {
      v81 = type metadata accessor for Proto_Register;
      v82 = v89;
      goto LABEL_5;
    }
  }
  else
  {
    sub_1BDD9C3E0((uint64_t)v75, type metadata accessor for Proto_Register);
    v93 = v211;
  }
  v94 = v175;
  v95 = *(_QWORD *)(v89 + v175)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v95, (uint64_t)v43, &qword_1ED6F3850);
  v96 = v89;
  v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v207 + 48);
  LODWORD(v95) = v97(v43, 1, v93);
  sub_1BDD86E30((uint64_t)v43, &qword_1ED6F3850);
  v98 = v218;
  if ((_DWORD)v95 == 1)
  {
    sub_1BDD9C3E0(v96, type metadata accessor for Proto_Register);
    goto LABEL_6;
  }
  v99 = *(_QWORD *)(v96 + v94)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v100 = v205;
  sub_1BDD86DEC(v99, v205, &qword_1ED6F3770);
  LODWORD(v99) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v209)(v100, 1, v212);
  sub_1BDD86E30(v100, &qword_1ED6F3770);
  v101 = *(_QWORD *)(v96 + v94);
  if ((_DWORD)v99 == 1)
  {
    v102 = v101 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    v103 = v199;
    sub_1BDD86DEC(v102, v199, &qword_1ED6F3728);
    v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 48);
    LODWORD(v102) = v104(v103, 1, v208);
    sub_1BDD86E30(v103, &qword_1ED6F3728);
    if ((_DWORD)v102 == 1)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v105 = 0xD00000000000001CLL;
      *(_QWORD *)(v105 + 8) = 0x80000001BE1CF3F0;
      *(_BYTE *)(v105 + 16) = 0;
      swift_willThrow();
LABEL_35:
      swift_release();
      sub_1BDD9C3E0(v217, type metadata accessor for Proto_CRDT);
      v87 = type metadata accessor for Proto_Register;
      v88 = v213;
      return sub_1BDD9C3E0(v88, v87);
    }
    v109 = *(_QWORD *)(v213 + v94)
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    v110 = v196;
    sub_1BDD86DEC(v109, v196, &qword_1ED6F3850);
    if (v97((char *)v110, 1, v211) == 1)
    {
      v111 = v197;
      *v197 = 0;
      v111[1] = 0;
      sub_1BE1B20E4();
      sub_1BDD86E30(v110, &qword_1ED6F3850);
    }
    else
    {
      v111 = v197;
      sub_1BDDA2E8C(v110, (uint64_t)v197, type metadata accessor for Proto_Timestamp);
    }
    v121 = v216;
    v122 = v198;
    swift_retain();
    sub_1BDDAA440(v111, v98, v122);
    if (v121)
      goto LABEL_35;
    v127 = *(_QWORD *)(v213 + v175)
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    v128 = v192;
    sub_1BDD86DEC(v127, v192, &qword_1ED6F3728);
    v129 = v208;
    if (v104(v128, 1, v208) == 1)
    {
      v130 = v189;
      sub_1BE1B20E4();
      v131 = *(int *)(v129 + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v130 + v131) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v192, &qword_1ED6F3728);
    }
    else
    {
      v130 = v189;
      sub_1BDDA2E8C(v128, v189, type metadata accessor for Proto_CRDT);
    }
    v135 = (uint64_t)v187;
    v136 = *(_QWORD *)(v130 + *(int *)(v208 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v136, v135, &qword_1ED6F2DF0);
    if (v173(v135, 1, v174) == 1)
    {
      sub_1BDD86E30(v135, &qword_1ED6F2DF0);
    }
    else
    {
      if (!swift_getEnumCaseMultiPayload())
      {
        v140 = v194;
        sub_1BDDA2E8C(v135, v194, type metadata accessor for Proto_Register);
        goto LABEL_51;
      }
      sub_1BDD9C3E0(v135, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    v137 = v194;
    sub_1BE1B20E4();
    v138 = v137;
    v139 = *(int *)(v210 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v138 + v139) = qword_1ED6EF780;
    swift_retain();
    v140 = v138;
LABEL_51:
    sub_1BDD9C3E0(v130, type metadata accessor for Proto_CRDT);
    v141 = *(_QWORD *)(v140 + *(int *)(v210 + 20))
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    v142 = v188;
    sub_1BDD86DEC(v141, v188, &qword_1ED6F3850);
    if (v97((char *)v142, 1, v211) == 1)
    {
      v143 = v190;
      *v190 = 0;
      v143[1] = 0;
      sub_1BE1B20E4();
      sub_1BDD86E30(v142, &qword_1ED6F3850);
    }
    else
    {
      v143 = v190;
      sub_1BDDA2E8C(v142, (uint64_t)v190, type metadata accessor for Proto_Timestamp);
    }
    v144 = v213;
    v145 = v191;
    sub_1BDD9C3E0(v194, type metadata accessor for Proto_Register);
    v146 = v218;
    swift_retain();
    sub_1BDDAA440(v143, v146, v145);
    v147 = *(_QWORD *)(v144 + v175)
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    v148 = v178;
    sub_1BDD86DEC(v147, v178, &qword_1ED6F3728);
    v149 = v208;
    if (v104(v148, 1, v208) == 1)
    {
      v150 = v183;
      sub_1BE1B20E4();
      v151 = *(int *)(v149 + 20);
      v152 = v182;
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(v150 + v151) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30(v148, &qword_1ED6F3728);
    }
    else
    {
      v150 = v183;
      sub_1BDDA2E8C(v148, v183, type metadata accessor for Proto_CRDT);
      v152 = v182;
    }
    v153 = *(_QWORD *)(v150 + *(int *)(v149 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v154 = v153;
    v155 = v177;
    sub_1BDD86DEC(v154, v177, &qword_1ED6F2DF0);
    if (v173(v155, 1, v174) == 1)
    {
      sub_1BDD86E30(v155, &qword_1ED6F2DF0);
    }
    else
    {
      if (!swift_getEnumCaseMultiPayload())
      {
        sub_1BDDA2E8C(v155, v152, type metadata accessor for Proto_Register);
LABEL_67:
        v157 = v218;
        v158 = v215;
        v160 = (uint64_t)v179;
        v159 = v180;
        sub_1BDD9C3E0(v183, type metadata accessor for Proto_CRDT);
        v161 = *(_QWORD *)(v152 + *(int *)(v210 + 20))
             + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
        swift_beginAccess();
        v162 = v181;
        sub_1BDD86DEC(v161, v181, &qword_1ED6F3770);
        v163 = v212;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v209)(v162, 1, v212) == 1)
        {
          sub_1BE1B20E4();
          v164 = *(int *)(v163 + 20);
          if (qword_1ED6F2718 != -1)
            swift_once();
          *(_QWORD *)(v160 + v164) = qword_1ED6F2708;
          swift_retain();
          sub_1BDD86E30(v181, &qword_1ED6F3770);
        }
        else
        {
          sub_1BDDA2E8C(v162, v160, type metadata accessor for Proto_Value);
        }
        v165 = v159;
        sub_1BDD9C3E0(v182, type metadata accessor for Proto_Register);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        v166 = sub_1BDDB4FC0(v160, v157);
        swift_release();
        v167 = v195;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v195 + 8) + 8) + 8))(v166, v158);
        swift_release();
        sub_1BDD9C3E0(v217, type metadata accessor for Proto_CRDT);
        sub_1BDD9C3E0(v144, type metadata accessor for Proto_Register);
        type metadata accessor for CRGroupedRegisterRef(0, v158, v167, v168);
        v169 = (uint64_t)v186;
        (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v186, v165, v158);
        v170 = v184;
        sub_1BDDA2E8C(v198, v184, type metadata accessor for FinalizedTimestamp);
        v171 = v176;
        sub_1BDDA2E8C(v191, v176, type metadata accessor for FinalizedTimestamp);
        result = sub_1BDFA4804(v169, v170, v171);
        goto LABEL_42;
      }
      sub_1BDD9C3E0(v155, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v156 = *(int *)(v210 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v152 + v156) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_67;
  }
  v106 = v101
       + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  v107 = v200;
  sub_1BDD86DEC(v106, v200, &qword_1ED6F3850);
  if (v97((char *)v107, 1, v211) == 1)
  {
    v108 = v201;
    *v201 = 0;
    v108[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30(v107, &qword_1ED6F3850);
  }
  else
  {
    v108 = v201;
    sub_1BDDA2E8C(v107, (uint64_t)v201, type metadata accessor for Proto_Timestamp);
  }
  v112 = v216;
  v113 = v213;
  v114 = (uint64_t)v203;
  v115 = v204;
  v116 = (uint64_t)v202;
  swift_retain();
  sub_1BDDAA440(v108, v98, v116);
  if (v112)
  {
    swift_release();
    sub_1BDD9C3E0(v217, type metadata accessor for Proto_CRDT);
    v87 = type metadata accessor for Proto_Register;
    v88 = v113;
    return sub_1BDD9C3E0(v88, v87);
  }
  v117 = *(_QWORD *)(v113 + v94)
       + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v118 = v193;
  sub_1BDD86DEC(v117, v193, &qword_1ED6F3770);
  v119 = v212;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v209)(v118, 1, v212) == 1)
  {
    sub_1BE1B20E4();
    v120 = *(int *)(v119 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v114 + v120) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v118, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C(v118, v114, type metadata accessor for Proto_Value);
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v123 = sub_1BDDB4FC0(v114, v98);
  swift_release();
  v124 = v195;
  v125 = v123;
  v126 = v215;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v195 + 8) + 8) + 8))(v125, v215);
  swift_release();
  sub_1BDD9C3E0(v217, type metadata accessor for Proto_CRDT);
  sub_1BDD9C3E0(v113, type metadata accessor for Proto_Register);
  v132 = (uint64_t)v186;
  (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v186, v115, v126);
  v133 = v184;
  sub_1BDDA2E8C(v116, v184, type metadata accessor for FinalizedTimestamp);
  type metadata accessor for CRRegisterRef(0, v126, v124, v134);
  result = sub_1BDFA3E10(v132, v133);
LABEL_42:
  *v214 = result;
  return result;
}

uint64_t sub_1BDFA36FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD v17[2];

  v5 = type metadata accessor for FinalizedTimestamp(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v2)
  {
    v13 = *v2;
  }
  else
  {
    type metadata accessor for CRRegisterRef(0, v9, *(_QWORD *)(a2 + 24), v10);
    sub_1BDFA5F2C(a2, (uint64_t)v12);
    if (qword_1ED6EF4D8 != -1)
      swift_once();
    v14 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED6F8A38);
    sub_1BDD9C318(v14, (uint64_t)v8, type metadata accessor for FinalizedTimestamp);
    v13 = sub_1BDFA3E10((uint64_t)v12, (uint64_t)v8);
  }
  v15 = *(void (**)(uint64_t))(*(_QWORD *)v13 + 184);
  swift_retain();
  v15(a1);
  return swift_release();
}

uint64_t CRRegister.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for FinalizedTimestamp(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 120))(v4);
    return sub_1BDDA2E8C((uint64_t)v6, a1, type metadata accessor for FinalizedTimestamp);
  }
  else
  {
    if (qword_1ED6EF4D8 != -1)
      swift_once();
    v9 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED6F8A38);
    return sub_1BDD9C318(v9, a1, type metadata accessor for FinalizedTimestamp);
  }
}

uint64_t CRRegister.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  if (v3)
    return (*(uint64_t (**)(void))(*(_QWORD *)v3 + 96))();
  else
    return sub_1BDFA5F2C(a1, a2);
}

uint64_t sub_1BDFA3970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  type metadata accessor for CRRegisterRef(0, a3, a4, a4);
  result = sub_1BDFA3E10(a1, a2);
  *a5 = result;
  return result;
}

uint64_t CRRegister.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = sub_1BDDA8D6C();
  if (!v3)
  {
    v9 = v5;
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    swift_retain();
    sub_1BDE1D5BC(&v9, v7, v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDFA3A38()
{
  uint64_t v0;

  v0 = sub_1BE1B1F58();
  __swift_allocate_value_buffer(v0, qword_1ED6F8A20);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED6F8A20);
  return sub_1BE1B1F34();
}

uint64_t sub_1BDFA3AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for FinalizedTimestamp(0);
  __swift_allocate_value_buffer(v0, qword_1ED6F8A38);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1ED6F8A38);
  if (qword_1ED6EF4D0 != -1)
    swift_once();
  v2 = sub_1BE1B1F58();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED6F8A20);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v1, v3, v2);
  *(_QWORD *)(v1 + *(int *)(v0 + 20)) = 0;
  return result;
}

void sub_1BDFA3B58()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDFA3BA0()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDFA3BE8()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDFA3C30()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDFA3C78()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDFA3CC0()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDFA3D08()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t (*sub_1BDFA3D54())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1BDFA3DA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED6EF4D8 != -1)
    swift_once();
  v2 = type metadata accessor for FinalizedTimestamp(0);
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED6F8A38);
  return sub_1BDD9C318(v3, a1, type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1BDFA3E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 192) - 8) + 32))(v4 + *(_QWORD *)(*(_QWORD *)v4 + 208), a1);
  sub_1BDDA2E8C(a2, v4 + *(_QWORD *)(*(_QWORD *)v4 + 216), type metadata accessor for FinalizedTimestamp);
  return v4;
}

uint64_t sub_1BDFA3E8C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  _BYTE v14[24];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for FinalizedTimestamp(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(_QWORD *)(v2 + 192);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v4);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = (char *)v1 + *(_QWORD *)(v2 + 208);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v8 + 16))(v10, v11, v7);
  v12 = (uint64_t)v1 + *(_QWORD *)(*v1 + 216);
  swift_beginAccess();
  sub_1BDD9C318(v12, (uint64_t)v6, type metadata accessor for FinalizedTimestamp);
  return sub_1BDFA3E10((uint64_t)v10, (uint64_t)v6);
}

uint64_t sub_1BDFA3FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v4 = MEMORY[0x1E0C80A78](v3);
  v52 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v51 = (uint64_t)&v48 - v6;
  v7 = type metadata accessor for Proto_Value(0);
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  MEMORY[0x1E0C80A78](v7);
  v58 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v10 = MEMORY[0x1E0C80A78](v9);
  v55 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v48 - v12;
  v53 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v53);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto_Timestamp(0);
  v54 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (uint64_t *)((char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for Proto_Register(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v48 = (uint64_t)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v48 - v22;
  sub_1BE1B20E4();
  v24 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1ED6F2E18 != -1)
    swift_once();
  v59 = a2;
  *(_QWORD *)(a2 + v24) = qword_1ED6F2E08;
  swift_retain();
  sub_1BE1B20E4();
  v25 = *(int *)(v19 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)&v23[v25] = qword_1ED6EF780;
  v26 = v60 + *(_QWORD *)(*(_QWORD *)v60 + 216);
  swift_beginAccess();
  sub_1BDD9C318(v26, (uint64_t)v15, type metadata accessor for FinalizedTimestamp);
  swift_retain();
  sub_1BE1B20E4();
  v27 = v56;
  v28 = sub_1BDDAE244((uint64_t)v15);
  v29 = *(_QWORD *)&v15[*(int *)(v53 + 20)];
  *v18 = v28;
  v18[1] = v29;
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for FinalizedTimestamp);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    v30 = swift_retain();
    *(_QWORD *)&v23[v25] = sub_1BE131250(v30);
    swift_release();
  }
  v31 = *(_QWORD *)&v23[v25];
  sub_1BDDA2E8C((uint64_t)v18, (uint64_t)v13, type metadata accessor for Proto_Timestamp);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v13, 0, 1, v16);
  v32 = v55;
  sub_1BDDA2EF0((uint64_t)v13, v55, &qword_1ED6F3850);
  v33 = v31 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v32, v33, &qword_1ED6F3850);
  swift_endAccess();
  v34 = swift_release();
  MEMORY[0x1E0C80A78](v34);
  *(&v48 - 2) = v60;
  *(&v48 - 1) = v27;
  v35 = v57;
  v36 = v58;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDFA9F80, v58);
  v37 = v59;
  if (v35)
  {
    sub_1BDD9C3E0((uint64_t)v23, type metadata accessor for Proto_Register);
    v38 = type metadata accessor for Proto_CRDT;
    v39 = v37;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Register._StorageClass(0);
      swift_allocObject();
      v40 = swift_retain();
      *(_QWORD *)&v23[v25] = sub_1BE131250(v40);
      swift_release();
    }
    v41 = *(_QWORD *)&v23[v25];
    v42 = v36;
    v43 = v51;
    sub_1BDDA2E8C(v42, v51, type metadata accessor for Proto_Value);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v43, 0, 1, v50);
    v44 = v52;
    sub_1BDDA2EF0(v43, v52, &qword_1ED6F3770);
    v45 = v41 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v44, v45, &qword_1ED6F3770);
    swift_endAccess();
    swift_release();
    v46 = v48;
    sub_1BDD9C318((uint64_t)v23, v48, type metadata accessor for Proto_Register);
    sub_1BE12AA70(v46);
    v39 = (uint64_t)v23;
    v38 = type metadata accessor for Proto_Register;
  }
  return sub_1BDD9C3E0(v39, v38);
}

uint64_t sub_1BDFA4524()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
  return sub_1BDD9C3E0(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216), type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1BDFA4568()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
  sub_1BDD9C3E0(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216), type metadata accessor for FinalizedTimestamp);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDFA45C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 192) - 8) + 16))(a1, v4);
}

uint64_t (*sub_1BDFA4624())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BDFA466C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 208);
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 192);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v4, a1, v5);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t sub_1BDFA46EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 216);
  swift_beginAccess();
  return sub_1BDD9C318(v3, a1, type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1BDFA4744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 216);
  swift_beginAccess();
  sub_1BDF2E114(a1, v3);
  swift_endAccess();
  return sub_1BDD9C3E0(a1, type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1BDFA47AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 224);
  swift_beginAccess();
  return sub_1BDD9C318(v3, a1, type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1BDFA4804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  sub_1BDFA4858(a1, a2, a3);
  return v6;
}

uint64_t sub_1BDFA4858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 192) - 8) + 32))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 208), a1);
  sub_1BDDA2E8C(a2, v3 + *(_QWORD *)(*(_QWORD *)v3 + 216), type metadata accessor for FinalizedTimestamp);
  sub_1BDDA2E8C(a3, v3 + *(_QWORD *)(*(_QWORD *)v3 + 224), type metadata accessor for FinalizedTimestamp);
  return v3;
}

uint64_t sub_1BDFA48DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *v0;
  v2 = type metadata accessor for FinalizedTimestamp(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v18 - v7;
  v9 = *(_QWORD *)(v1 + 192);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v6);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)v0 + *(_QWORD *)(v1 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  v14 = (uint64_t)v0 + *(_QWORD *)(*v0 + 216);
  swift_beginAccess();
  sub_1BDD9C318(v14, (uint64_t)v8, type metadata accessor for FinalizedTimestamp);
  v15 = (uint64_t)v0 + *(_QWORD *)(*v0 + 224);
  swift_beginAccess();
  sub_1BDD9C318(v15, (uint64_t)v5, type metadata accessor for FinalizedTimestamp);
  v16 = swift_allocObject();
  sub_1BDFA4858((uint64_t)v12, (uint64_t)v8, (uint64_t)v5);
  return v16;
}

uint64_t sub_1BDFA4A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v107 = (uint64_t)&v93 - v9;
  MEMORY[0x1E0C80A78](v8);
  v104 = (uint64_t)&v93 - v10;
  v11 = type metadata accessor for Proto_CRDT(0);
  v106 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v105 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v14 = MEMORY[0x1E0C80A78](v13);
  v103 = (uint64_t)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v102 = (uint64_t)&v93 - v16;
  v101 = type metadata accessor for Proto_Value(0);
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v110 = (uint64_t)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v19 = MEMORY[0x1E0C80A78](v18);
  v113 = (uint64_t)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v93 - v21;
  v112 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v112);
  v24 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for Proto_Timestamp(0);
  v109 = *(_QWORD *)(v116 - 8);
  v25 = MEMORY[0x1E0C80A78](v116);
  v27 = (uint64_t *)((char *)&v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v25);
  v29 = (uint64_t *)((char *)&v93 - v28);
  v30 = type metadata accessor for Proto_Register(0);
  v31 = MEMORY[0x1E0C80A78](v30);
  v32 = MEMORY[0x1E0C80A78](v31);
  v33 = MEMORY[0x1E0C80A78](v32);
  v114 = (uint64_t)&v93 - v34;
  MEMORY[0x1E0C80A78](v33);
  v115 = (uint64_t)&v93 - v37;
  v118 = a1;
  if (*(unsigned __int8 *)(a1 + 72) >= 2u)
  {
    v97 = v36;
    v94 = v35;
    v96 = v7;
    sub_1BE1B20E4();
    v95 = v11;
    v40 = *(int *)(v11 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    v99 = a2;
    *(_QWORD *)(a2 + v40) = qword_1ED6F2E08;
    swift_retain();
    v41 = v115;
    sub_1BE1B20E4();
    v42 = *(int *)(v30 + 20);
    v43 = v117;
    if (qword_1ED6EF788 != -1)
      swift_once();
    v44 = qword_1ED6EF780;
    *(_QWORD *)(v41 + v42) = qword_1ED6EF780;
    swift_retain();
    v108 = v42;
    v45 = v114;
    sub_1BE1B20E4();
    v98 = *(int *)(v30 + 20);
    *(_QWORD *)(v45 + v98) = v44;
    v46 = v43 + *(_QWORD *)(*(_QWORD *)v43 + 216);
    swift_beginAccess();
    sub_1BDD9C318(v46, (uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    swift_retain();
    sub_1BE1B20E4();
    v47 = sub_1BDDAE244((uint64_t)v24);
    v48 = *(_QWORD *)&v24[*(int *)(v112 + 20)];
    *v29 = v47;
    v29[1] = v48;
    v49 = v108;
    sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Register._StorageClass(0);
      swift_allocObject();
      v50 = swift_retain();
      *(_QWORD *)(v41 + v49) = sub_1BE131250(v50);
      swift_release();
    }
    v51 = *(_QWORD *)(v41 + v49);
    sub_1BDDA2E8C((uint64_t)v29, (uint64_t)v22, type metadata accessor for Proto_Timestamp);
    v52 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56);
    v52(v22, 0, 1, v116);
    v53 = v113;
    sub_1BDDA2EF0((uint64_t)v22, v113, &qword_1ED6F3850);
    v54 = v51
        + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v53, v54, &qword_1ED6F3850);
    swift_endAccess();
    swift_release();
    v55 = v117 + *(_QWORD *)(*(_QWORD *)v117 + 224);
    swift_beginAccess();
    sub_1BDD9C318(v55, (uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    sub_1BE1B20E4();
    v56 = sub_1BDDAE244((uint64_t)v24);
    v57 = *(_QWORD *)&v24[*(int *)(v112 + 20)];
    *v27 = v56;
    v27[1] = v57;
    sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    v58 = v114;
    v59 = v98;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Register._StorageClass(0);
      swift_allocObject();
      v60 = swift_retain();
      *(_QWORD *)(v58 + v59) = sub_1BE131250(v60);
      swift_release();
    }
    v61 = *(_QWORD *)(v58 + v59);
    sub_1BDDA2E8C((uint64_t)v27, (uint64_t)v22, type metadata accessor for Proto_Timestamp);
    v52(v22, 0, 1, v116);
    v62 = v113;
    sub_1BDDA2EF0((uint64_t)v22, v113, &qword_1ED6F3850);
    v63 = v61
        + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v62, v63, &qword_1ED6F3850);
    swift_endAccess();
    v64 = swift_release();
    MEMORY[0x1E0C80A78](v64);
    v65 = v118;
    *(&v93 - 2) = v117;
    *(&v93 - 1) = v65;
    v67 = v110;
    v66 = v111;
    sub_1BDE1CC84((void (*)(uint64_t))sub_1BDFA9FA0, v110);
    if (v66)
    {
      sub_1BDD9C3E0(v58, type metadata accessor for Proto_Register);
      sub_1BDD9C3E0(v115, type metadata accessor for Proto_Register);
      v68 = type metadata accessor for Proto_CRDT;
      v69 = v99;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Register._StorageClass(0);
        swift_allocObject();
        v70 = swift_retain();
        *(_QWORD *)(v58 + v59) = sub_1BE131250(v70);
        swift_release();
      }
      v71 = *(_QWORD *)(v58 + v59);
      v72 = v67;
      v73 = v102;
      sub_1BDDA2E8C(v72, v102, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v73, 0, 1, v101);
      v74 = v103;
      sub_1BDDA2EF0(v73, v103, &qword_1ED6F3770);
      v75 = v71 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v74, v75, &qword_1ED6F3770);
      swift_endAccess();
      swift_release();
      sub_1BDD9C318(v58, v97, type metadata accessor for Proto_Register);
      v76 = *(_QWORD *)(v115 + v108)
          + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
      swift_beginAccess();
      v77 = v76;
      v78 = v104;
      sub_1BDD86DEC(v77, v104, &qword_1ED6F3728);
      v79 = v106;
      v80 = v95;
      v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v78, 1, v95);
      v82 = v105;
      if (v81 == 1)
      {
        sub_1BE1B20E4();
        *(_QWORD *)(v82 + *(int *)(v80 + 20)) = qword_1ED6F2E08;
        swift_retain();
        sub_1BDD86E30(v78, &qword_1ED6F3728);
      }
      else
      {
        sub_1BDDA2E8C(v78, v105, type metadata accessor for Proto_CRDT);
      }
      sub_1BE12AA70(v97);
      v83 = v115;
      v84 = v108;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Register._StorageClass(0);
        swift_allocObject();
        v85 = swift_retain();
        *(_QWORD *)(v83 + v84) = sub_1BE131250(v85);
        swift_release();
      }
      v86 = *(_QWORD *)(v83 + v84);
      v87 = v82;
      v88 = v107;
      sub_1BDDA2E8C(v87, v107, type metadata accessor for Proto_CRDT);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v88, 0, 1, v80);
      v89 = v88;
      v90 = (uint64_t)v96;
      sub_1BDDA2EF0(v89, (uint64_t)v96, &qword_1ED6F3728);
      v91 = v86 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v90, v91, &qword_1ED6F3728);
      swift_endAccess();
      swift_release();
      v92 = v94;
      sub_1BDD9C318(v83, v94, type metadata accessor for Proto_Register);
      sub_1BE12AA70(v92);
      sub_1BDD9C3E0(v114, type metadata accessor for Proto_Register);
      v69 = v83;
      v68 = type metadata accessor for Proto_Register;
    }
    return sub_1BDD9C3E0(v69, v68);
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v38 = 0xD00000000000003CLL;
    *(_QWORD *)(v38 + 8) = 0x80000001BE1CF370;
    *(_BYTE *)(v38 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t sub_1BDFA552C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 192);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v6 + *(_QWORD *)(v3 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 200) + 8) + 8) + 16))(a2, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1BDFA560C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
  sub_1BDD9C3E0(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216), type metadata accessor for FinalizedTimestamp);
  return sub_1BDD9C3E0(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224), type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1BDFA5670()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 192) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 208));
  sub_1BDD9C3E0(v0 + *(_QWORD *)(*(_QWORD *)v0 + 216), type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224), type metadata accessor for FinalizedTimestamp);
  return v0;
}

uint64_t sub_1BDFA56D8()
{
  sub_1BDFA5670();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDFA56FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v5 = v4;
  type metadata accessor for CRRegisterRefBase(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = sub_1BE1B3464();
  if ((result & 1) == 0)
  {
    v7 = *v4;
    if (*v5)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 176))();
      result = swift_release();
    }
    else
    {
      v8 = 0;
    }
    *v5 = v8;
  }
  return result;
}

uint64_t CRRegister.setValue(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v77 = a2;
  v78 = a3;
  v82 = *(_QWORD *)(a3 + 16);
  v76 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](a1);
  v80 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FinalizedTimestamp(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v74 = (uint64_t)&v73 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v75 = (uint64_t)&v73 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v79 = (uint64_t)&v73 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v73 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v73 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v73 - v22;
  v24 = v3;
  v83 = *v3;
  CRRegister.timestamp.getter((uint64_t)&v73 - v22);
  v81 = v6;
  v25 = *(int *)(v6 + 20);
  v26 = *(_QWORD *)(a1 + v25);
  v27 = *(_QWORD *)&v23[v25];
  sub_1BDD9C318(a1, (uint64_t)v21, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318((uint64_t)v23, (uint64_t)v18, type metadata accessor for FinalizedTimestamp);
  if (v26 == v27)
  {
    v28 = sub_1BE1B1F10();
    sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v23, type metadata accessor for FinalizedTimestamp);
    if ((v28 & 1) != 0)
    {
      v30 = *(_QWORD *)(v78 + 24);
      v31 = v82;
      type metadata accessor for CRRegisterRefBase(0, v82, v30, v29);
      v32 = v24;
      if ((sub_1BE1B3464() & 1) != 0
        && *v24
        && (type metadata accessor for CRGroupedRegisterRef(0, v31, v30, v33), (v34 = swift_dynamicCastClass()) != 0))
      {
        v35 = v34;
        v36 = v34 + *(_QWORD *)(*(_QWORD *)v34 + 224);
        swift_beginAccess();
        v37 = v75;
        sub_1BDD9C318(v36, v75, type metadata accessor for FinalizedTimestamp);
        swift_retain();
        v38 = v79;
        result = sub_1BE1B1F4C();
        v40 = *(int *)(v81 + 20);
        v41 = *(_QWORD *)(v37 + v40);
        v42 = __OFADD__(v41, 1);
        v43 = v41 + 1;
        if (!v42)
        {
          *(_QWORD *)(v38 + v40) = v43;
          sub_1BDD9C3E0(v37, type metadata accessor for FinalizedTimestamp);
          swift_beginAccess();
          sub_1BDF2BC30(v38, v36);
          swift_endAccess();
          v44 = v35 + *(_QWORD *)(*(_QWORD *)v35 + 208);
          swift_beginAccess();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 24))(v44, v77, v31);
          goto LABEL_17;
        }
      }
      else
      {
        v64 = (uint64_t)v80;
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v80, v77, v31);
        v65 = v79;
        sub_1BDD9C318(a1, v79, type metadata accessor for FinalizedTimestamp);
        v83 = *v24;
        v66 = v74;
        sub_1BDFA5DBC(v74);
        v67 = v75;
        result = sub_1BE1B1F4C();
        v69 = *(int *)(v81 + 20);
        v70 = *(_QWORD *)(v66 + v69);
        v71 = v70 + 1;
        if (!__OFADD__(v70, 1))
        {
          type metadata accessor for CRGroupedRegisterRef(0, v31, v30, v68);
          *(_QWORD *)(v67 + v69) = v71;
          sub_1BDD9C3E0(v66, type metadata accessor for FinalizedTimestamp);
          v72 = swift_allocObject();
          sub_1BDFA4858(v64, v65, v67);
          swift_release();
          *v32 = v72;
          return 1;
        }
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v23, type metadata accessor for FinalizedTimestamp);
  }
  v45 = v24;
  v83 = *v24;
  CRRegister.timestamp.getter((uint64_t)v9);
  v46 = v81;
  v47 = *(_QWORD *)&v9[*(int *)(v81 + 20)];
  v48 = *(_QWORD *)(a1 + v25);
  v49 = v82;
  if (v47 == v48)
  {
    v50 = sub_1BDDB2BF8();
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for FinalizedTimestamp);
    v52 = (uint64_t)v80;
    if ((v50 & 1) == 0)
      return 0;
  }
  else
  {
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for FinalizedTimestamp);
    v52 = (uint64_t)v80;
    if (v47 >= v48)
      return 0;
  }
  v53 = *(_QWORD *)(v78 + 24);
  type metadata accessor for CRRegisterRefBase(0, v49, v53, v51);
  if ((sub_1BE1B3464() & 1) == 0
    || !*v45
    || (type metadata accessor for CRGroupedRegisterRef(0, v49, v53, v54), (v55 = swift_dynamicCastClass()) == 0))
  {
    type metadata accessor for CRGroupedRegisterRef(0, v49, v53, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v52, v77, v49);
    v61 = v79;
    sub_1BDD9C318(a1, v79, type metadata accessor for FinalizedTimestamp);
    v62 = v75;
    sub_1BE1B1F4C();
    *(_QWORD *)(v62 + *(int *)(v46 + 20)) = 0;
    v63 = swift_allocObject();
    sub_1BDFA4858(v52, v61, v62);
    swift_release();
    *v45 = v63;
    return 1;
  }
  v56 = v55;
  v57 = v55 + *(_QWORD *)(*(_QWORD *)v55 + 216);
  swift_beginAccess();
  swift_retain();
  sub_1BDF2E114(a1, v57);
  swift_endAccess();
  v58 = v79;
  sub_1BE1B1F4C();
  *(_QWORD *)(v58 + *(int *)(v46 + 20)) = 0;
  v59 = v56 + *(_QWORD *)(*(_QWORD *)v56 + 224);
  swift_beginAccess();
  sub_1BDF2BC30(v58, v59);
  swift_endAccess();
  v60 = v56 + *(_QWORD *)(*(_QWORD *)v56 + 208);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 24))(v60, v77, v49);
LABEL_17:
  swift_endAccess();
  swift_release();
  return 1;
}

uint64_t sub_1BDFA5DBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for FinalizedTimestamp(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 144))(v4);
    return sub_1BDDA2E8C((uint64_t)v6, a1, type metadata accessor for FinalizedTimestamp);
  }
  else
  {
    if (qword_1ED6EF4D8 != -1)
      swift_once();
    v9 = __swift_project_value_buffer(v3, (uint64_t)qword_1ED6F8A38);
    return sub_1BDD9C318(v9, a1, type metadata accessor for FinalizedTimestamp);
  }
}

uint64_t CRRegister.projectedValue.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

uint64_t sub_1BDFA5EA0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, _QWORD);
  _QWORD *v3;
  uint64_t v5;

  v1 = *a1;
  swift_retain();
  v2 = (uint64_t (*)(uint64_t *, _QWORD))CRRegister.projectedValue.modify();
  *v3 = v1;
  swift_release();
  return v2(&v5, 0);
}

uint64_t (*CRRegister.projectedValue.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRRegister.projectedValue.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  *v1 = v2;
  return result;
}

uint64_t sub_1BDFA5F2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  int v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_1BE1B2EE8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - v6;
  v8 = swift_conformsToProtocol2();
  if (v8)
    v9 = v8;
  else
    v9 = 0;
  if (v8)
    v10 = v3;
  else
    v10 = 0;
  if (v10)
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v9 + 16);
    *((_QWORD *)&v17 + 1) = v10;
    v18 = v9;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
    v11(v10, v9);
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    v17 = 0u;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF4E0);
  v12 = swift_dynamicCast();
  v13 = *(_QWORD *)(v3 - 8);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v12)
  {
    v14(v7, 0, 1, v3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v7, v3);
  }
  else
  {
    v14(v7, 1, 1, v3);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    result = sub_1BE1B3200();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDFA60C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v2 = v1;
  v4 = type metadata accessor for FinalizedTimestamp(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0C80A78](v5);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v2;
  if (*v2)
  {
    v14 = *(_QWORD *)(a1 + 24);
    type metadata accessor for CRGroupedRegisterRef(0, v8, v14, v10);
    result = swift_dynamicCastClass();
    if (result)
    {
      type metadata accessor for CRRegisterRef(0, v8, v14, v15);
      (*(void (**)(void))(*(_QWORD *)v13 + 96))();
      v17[1] = v13;
      CRRegister.timestamp.getter((uint64_t)v7);
      v16 = sub_1BDFA3E10((uint64_t)v12, (uint64_t)v7);
      result = swift_release();
      *v2 = v16;
    }
  }
  return result;
}

uint64_t sub_1BDFA61E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v12 - v6;
  (*(void (**)(char *))(v8 + 16))((char *)&v12 - v6);
  v10 = type metadata accessor for CRRegister(0, v4, v5, v9);
  return CRRegister.value.setter((uint64_t)v7, v10);
}

uint64_t CRRegister.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a1;
  v4 = type metadata accessor for FinalizedTimestamp(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v32 - v9;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDFA60C4(a2);
  sub_1BDFA56FC(a2, v15, v16, v17);
  v18 = *v2;
  if (*v2)
  {
    v19 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v32, v11);
    v20 = *(void (**)(char *))(*(_QWORD *)v18 + 104);
    swift_retain();
    v20(v14);
    v33 = v18;
    CRRegister.timestamp.getter((uint64_t)v7);
    result = sub_1BE1B1F4C();
    v22 = *(int *)(v4 + 20);
    v23 = *(_QWORD *)&v7[v22];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      *(_QWORD *)&v10[v22] = v25;
      sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for FinalizedTimestamp);
      (*(void (**)(char *))(*(_QWORD *)v18 + 128))(v10);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v19, v11);
    }
    __break(1u);
    goto LABEL_8;
  }
  v26 = *(_QWORD *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v32, v11);
  v33 = 0;
  CRRegister.timestamp.getter((uint64_t)v7);
  result = sub_1BE1B1F4C();
  v28 = *(int *)(v4 + 20);
  v29 = *(_QWORD *)&v7[v28];
  v30 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  type metadata accessor for CRRegisterRef(0, v11, v26, v27);
  *(_QWORD *)&v10[v28] = v30;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v32, v11);
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for FinalizedTimestamp);
  v31 = sub_1BDFA3E10((uint64_t)v14, (uint64_t)v10);
  result = swift_release();
  *v2 = v31;
  return result;
}

void (*CRRegister.value.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *);

  v5 = malloc(0x78uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[6] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[8] = malloc(v8);
  v9 = malloc(v8);
  v5[9] = v9;
  v10 = type metadata accessor for FinalizedTimestamp(0);
  v5[10] = v10;
  v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  v5[11] = malloc(v11);
  v5[12] = malloc(v11);
  sub_1BDFA60C4(a2);
  sub_1BDFA56FC(a2, v12, v13, v14);
  v15 = *v2;
  v5[13] = v15;
  if (v15)
  {
    v16 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v15 + 112);
    swift_retain();
    v5[14] = v16(v5);
    return sub_1BDFA6590;
  }
  else
  {
    sub_1BDFA5F2C(a2, (uint64_t)v9);
    return sub_1BDFA6678;
  }
}

void sub_1BDFA6590(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = *a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 112))(*a1, 0);
  if ((a2 & 1) != 0)
    goto LABEL_4;
  v4 = *(_QWORD *)(v3 + 88);
  v5 = *(_QWORD *)(v3 + 80);
  CRRegister.timestamp.getter(v4);
  sub_1BE1B1F4C();
  v6 = *(int *)(v5 + 20);
  v7 = *(_QWORD *)(v4 + v6);
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (!v8)
  {
    v11 = *(_QWORD *)(v3 + 96);
    v10 = *(_QWORD *)(v3 + 104);
    v12 = *(_QWORD *)(v3 + 88);
    *(_QWORD *)(v11 + v6) = v9;
    sub_1BDD9C3E0(v12, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 128))(v11);
LABEL_4:
    swift_release();
    v13 = *(void **)(v3 + 88);
    v15 = *(void **)(v3 + 64);
    v14 = *(void **)(v3 + 72);
    free(*(void **)(v3 + 96));
    free(v13);
    free(v14);
    free(v15);
    free((void *)v3);
    return;
  }
  __break(1u);
}

void sub_1BDFA6678(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 56) + 8))(*(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 48));
LABEL_5:
    v17 = *(void **)(v2 + 88);
    v19 = *(void **)(v2 + 64);
    v18 = *(void **)(v2 + 72);
    free(*(void **)(v2 + 96));
    free(v17);
    free(v18);
    free(v19);
    free((void *)v2);
    return;
  }
  v3 = *(_QWORD *)(v2 + 88);
  v4 = *(_QWORD *)(v2 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 24);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v2 + 56) + 16))(*(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 48));
  CRRegister.timestamp.getter(v3);
  sub_1BE1B1F4C();
  v7 = *(int *)(v4 + 20);
  v8 = *(_QWORD *)(v3 + v7);
  v9 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    v11 = *(_QWORD *)(v2 + 88);
    v10 = *(_QWORD *)(v2 + 96);
    v12 = *(_QWORD *)(v2 + 64);
    v20 = *(_QWORD *)(v2 + 72);
    v13 = *(_QWORD *)(v2 + 48);
    v14 = *(_QWORD *)(v2 + 56);
    v15 = *(uint64_t **)(v2 + 40);
    type metadata accessor for CRRegisterRef(0, v13, v5, v6);
    *(_QWORD *)(v10 + v7) = v9;
    sub_1BDD9C3E0(v11, type metadata accessor for FinalizedTimestamp);
    v16 = sub_1BDFA3E10(v12, v10);
    swift_release();
    *v15 = v16;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t CRRegister.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  if (v3)
    return (*(uint64_t (**)(void))(*(_QWORD *)v3 + 96))();
  else
    return sub_1BDFA5F2C(a1, a2);
}

uint64_t CRRegister.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_1BDFA9788(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*CRRegister.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  v10 = *v2;
  if (v10)
    (*(void (**)(void))(*(_QWORD *)v10 + 96))();
  else
    sub_1BDFA5F2C(a2, (uint64_t)v9);
  return sub_1BDFA68C4;
}

void sub_1BDFA68C4(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_1BDFA9788((uint64_t)v3, v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }
  else
  {
    sub_1BDFA9788((*a1)[5], v7);
    v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CRRegister.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v18 - v13;
  v15 = *v3;
  if (v12)
  {
    if (v15)
      (*(void (**)(void))(*(_QWORD *)v15 + 96))();
    else
      sub_1BDFA5F2C(a2, (uint64_t)v11);
    v16 = *(_QWORD *)(a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 + 8) + 24))(a1, v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else
  {
    if (v15)
      (*(void (**)(void))(*(_QWORD *)v15 + 96))();
    else
      sub_1BDFA5F2C(a2, (uint64_t)&v18 - v13);
    v16 = *(_QWORD *)(a2 + 24);
  }
  return CRRegister.init(_:)((uint64_t)v14, v7, v16, a3);
}

uint64_t CRRegister.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v8 = type metadata accessor for FinalizedTimestamp(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v16((char *)&v28 - v17, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFBA8);
  if (!swift_dynamicCast())
  {
    v32 = 0;
    v30 = 0u;
    v31 = 0u;
    sub_1BDD86E30((uint64_t)&v30, (uint64_t *)&unk_1ED6EF4E0);
    goto LABEL_5;
  }
  v28 = v8;
  v29 = a1;
  v18 = a3;
  v19 = a4;
  v20 = *((_QWORD *)&v31 + 1);
  v21 = v32;
  __swift_project_boxed_opaque_existential_1(&v30, *((uint64_t *)&v31 + 1));
  v22 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
  v23 = v20;
  a4 = v19;
  a3 = v18;
  v24 = v21;
  v8 = v28;
  a1 = v29;
  v25 = v22(v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
  if ((v25 & 1) == 0)
  {
LABEL_5:
    v16(v15, a1, a2);
    sub_1BE1B1F4C();
    *(_QWORD *)&v11[*(int *)(v8 + 20)] = 0;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a2);
    type metadata accessor for CRRegisterRef(0, a2, a3, v27);
    result = sub_1BDFA3E10((uint64_t)v15, (uint64_t)v11);
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a2);
  result = 0;
LABEL_6:
  *a4 = result;
  return result;
}

uint64_t CRRegister.init<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v14 - v10, a2, v8);
  v14 = a3;
  v12 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> A?, v8, &v14);
  CRRegister.init(_:)((uint64_t)v11, v8, v12, &v15);

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  *a4 = v15;
  return result;
}

uint64_t CRRegister.init(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v12);
  CRRegister.init(_:)((uint64_t)v12, a3, a4, &v15);

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
  *a5 = v15;
  return result;
}

uint64_t CRRegister.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  CRRegister.init(_:)((uint64_t)v10, a2, a3, &v13);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
  *a4 = v13;
  return result;
}

uint64_t CRRegister.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - v8, a1, v6);
  v12 = a2;
  v10 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <A> A?, v6, &v12);
  CRRegister.init(_:)((uint64_t)v9, v6, v10, &v13);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  *a3 = v13;
  return result;
}

void CRRegister.init<>(defaultState:)(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CRRegister.init(_:clock:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v32 = a4;
  v36 = a5;
  v31 = sub_1BE1B1F58();
  v34 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for FinalizedTimestamp(0);
  v10 = MEMORY[0x1E0C80A78](v33);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v31 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v31 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22((char *)&v31 - v20, (uint64_t)a1, a3);
  v35 = a2;
  if (a2)
  {
    v23 = *(void (**)(char *, uint64_t))(v13 + 8);
    v23(v21, a3);
LABEL_7:
    v26 = v36;
    goto LABEL_8;
  }
  v22(v19, (uint64_t)v21, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFBA8);
  if (!swift_dynamicCast())
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v23 = *(void (**)(char *, uint64_t))(v13 + 8);
    v23(v21, a3);
    sub_1BDD86E30((uint64_t)&v37, (uint64_t *)&unk_1ED6EF4E0);
    goto LABEL_7;
  }
  v25 = *((_QWORD *)&v38 + 1);
  v24 = v39;
  __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
  LOBYTE(v24) = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v24);
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v21, a3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  v26 = v36;
  if ((v24 & 1) == 0)
  {
LABEL_8:
    v29 = v31;
    v28 = v32;
    v22(v16, (uint64_t)a1, a3);
    sub_1BE1B1F4C();
    v23(a1, a3);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v12, v9, v29);
    *(_QWORD *)&v12[*(int *)(v33 + 20)] = v35;
    type metadata accessor for CRRegisterRef(0, a3, v28, v30);
    result = sub_1BDFA3E10((uint64_t)v16, (uint64_t)v12);
    goto LABEL_9;
  }
  v23(a1, a3);
  result = 0;
LABEL_9:
  *v26 = result;
  return result;
}

uint64_t CRRegister.merge(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = type metadata accessor for FinalizedTimestamp(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v46 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v45 = (uint64_t)&v44 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v44 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v47 = (uint64_t)&v44 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v44 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v44 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v44 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v44 - v22;
  v24 = *a1;
  v25 = v1;
  v49 = *v1;
  CRRegister.timestamp.getter((uint64_t)&v44 - v22);
  v26 = v24;
  v49 = v24;
  CRRegister.timestamp.getter((uint64_t)v21);
  v48 = v3;
  v27 = *(int *)(v3 + 20);
  v28 = *(_QWORD *)&v23[v27];
  v29 = *(_QWORD *)&v21[v27];
  if (v28 == v29)
    v30 = sub_1BDDB2BF8();
  else
    v30 = v28 < v29;
  sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v23, type metadata accessor for FinalizedTimestamp);
  v31 = v25;
  if ((v30 & 1) != 0)
  {
LABEL_5:
    swift_release();
    *v31 = v26;
    return swift_retain();
  }
  v49 = *v25;
  CRRegister.timestamp.getter((uint64_t)v18);
  v49 = v24;
  CRRegister.timestamp.getter((uint64_t)v15);
  v33 = v47;
  v34 = *(int *)(v48 + 20);
  v35 = *(_QWORD *)&v18[v34];
  v36 = *(_QWORD *)&v15[v34];
  sub_1BDD9C318((uint64_t)v18, v47, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318((uint64_t)v15, (uint64_t)v10, type metadata accessor for FinalizedTimestamp);
  if (v35 == v36)
  {
    v37 = sub_1BE1B1F10();
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v33, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for FinalizedTimestamp);
    result = sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for FinalizedTimestamp);
    if ((v37 & 1) != 0)
    {
      v49 = *v31;
      v38 = v45;
      sub_1BDFA5DBC(v45);
      v49 = v26;
      v39 = v46;
      sub_1BDFA5DBC(v46);
      v40 = *(int *)(v48 + 20);
      v41 = *(_QWORD *)(v38 + v40);
      v42 = *(_QWORD *)(v39 + v40);
      v43 = v41 == v42 ? sub_1BDDB2BF8() : v41 < v42;
      sub_1BDD9C3E0(v39, type metadata accessor for FinalizedTimestamp);
      result = sub_1BDD9C3E0(v38, type metadata accessor for FinalizedTimestamp);
      if ((v43 & 1) != 0)
        goto LABEL_5;
    }
  }
  else
  {
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v33, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for FinalizedTimestamp);
    return sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for FinalizedTimestamp);
  }
  return result;
}

uint64_t CRRegister.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 96))(result);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40))(a1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

Swift::Bool __swiftcall CRRegister.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v5);
    LOBYTE(v8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) + 48))(v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v8 & 1;
}

uint64_t CRRegister.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, _QWORD);
  _QWORD v10[4];

  v10[0] = *(_QWORD *)v2;
  result = CRRegister.needToFinalizeTimestamps()();
  if ((result & 1) != 0)
  {
    result = sub_1BDFA56FC(a2, v6, v7, v8);
    if (*(_QWORD *)v2)
    {
      v9 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(**(_QWORD **)v2 + 112))(v10);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 56))(a1, *(_QWORD *)(a2 + 16));
      return v9(v10, 0);
    }
  }
  return result;
}

uint64_t CRRegister.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v2 = MEMORY[0x1E0C80A78](a1);
  v4 = *v1;
  v6[0] = 0x7473696765525243;
  v6[1] = 0xEB000000005B7265;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v2);
  else
    sub_1BDFA5F2C(v2, (uint64_t)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BE1B2810();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return v6[0];
}

uint64_t CRRegister.actionUndoingDifference(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - v9;
  v11 = type metadata accessor for FinalizedTimestamp(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v31 - v15;
  v17 = *a1;
  v32 = *v3;
  CRRegister.timestamp.getter((uint64_t)&v31 - v15);
  v32 = v17;
  CRRegister.timestamp.getter((uint64_t)v14);
  v18 = *(int *)(v11 + 20);
  v19 = *(_QWORD *)&v14[v18];
  v20 = *(_QWORD *)&v16[v18];
  if (v19 == v20)
    v21 = sub_1BDDB2BF8();
  else
    v21 = v19 < v20;
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  v22 = sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
  if ((v21 & 1) != 0)
  {
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 96))(v22);
    else
      sub_1BDFA5F2C(a2, (uint64_t)v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 0, 1, v6);
    v26 = *(_QWORD *)(a2 + 24);
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    v28 = v31;
    v27(v31, v10, v7);
    v30 = type metadata accessor for CRRegister.MutatingAction(0, v6, v26, v29);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v28, 0, 1, v30);
  }
  else
  {
    v24 = type metadata accessor for CRRegister.MutatingAction(0, v6, *(_QWORD *)(a2 + 24), v23);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v31, 1, 1, v24);
  }
}

uint64_t CRRegister.apply(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_1BE1B2EE8();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v30 = (char *)&v30 - v12;
  v32 = a2;
  v14 = type metadata accessor for CRRegister.MutatingAction(255, v4, *(_QWORD *)(a2 + 24), v13);
  v15 = sub_1BE1B2EE8();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v30 - v18;
  v20 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v30 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v14) == 1)
  {
    v23 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
    v24 = v19;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v19, v14);
    v25 = v33;
    v15 = v34;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v8, v22, v34);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) != 1)
    {
      v27 = v30;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v8, v4);
      v28 = (uint64_t)v31;
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v31, v27, v4);
      CRRegister.value.setter(v28, v32);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v27, v4);
      v23 = *(uint64_t (**)(char *, uint64_t))(v20 + 8);
      v24 = v22;
      v26 = v14;
      return v23(v24, v26);
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v14);
    v23 = *(uint64_t (**)(char *, uint64_t))(v25 + 8);
    v24 = v8;
  }
  v26 = v15;
  return v23(v24, v26);
}

uint64_t CRRegister.hasDelta(from:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for FinalizedTimestamp(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  v9 = *a1;
  v16 = *v1;
  CRRegister.timestamp.getter((uint64_t)&v15 - v7);
  v16 = v9;
  CRRegister.timestamp.getter((uint64_t)v6);
  v10 = *(int *)(v3 + 20);
  v11 = *(_QWORD *)&v6[v10];
  v12 = *(_QWORD *)&v8[v10];
  if (v11 == v12)
    v13 = sub_1BDDB2BF8();
  else
    v13 = v11 < v12;
  sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for FinalizedTimestamp);
  return v13 & 1;
}

uint64_t CRRegister.delta(_:from:)@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v5 = type metadata accessor for FinalizedTimestamp(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - v9;
  v11 = *a1;
  v12 = *v2;
  v19 = v11;
  CRRegister.timestamp.getter((uint64_t)&v18 - v9);
  v19 = v12;
  CRRegister.timestamp.getter((uint64_t)v8);
  v13 = *(int *)(v5 + 20);
  v14 = *(_QWORD *)&v10[v13];
  v15 = *(_QWORD *)&v8[v13];
  if (v14 == v15)
    v16 = sub_1BDDB2BF8();
  else
    v16 = v14 < v15;
  sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for FinalizedTimestamp);
  result = sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for FinalizedTimestamp);
  if ((v16 & 1) != 0)
    result = swift_retain();
  else
    v12 = 1;
  *a2 = v12;
  return result;
}

uint64_t CRRegister.canMerge(delta:)()
{
  return 1;
}

uint64_t sub_1BDFA7E84(uint64_t *a1)
{
  CRRegister.merge(delta:)(a1);
  return 1;
}

uint64_t CRRegister.merge(delta:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  CRRegister.merge(_:)(&v2);
  return 1;
}

uint64_t CRRegister.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v44 = a2;
  v45 = v9;
  v10 = MEMORY[0x1E0C80A78](a1);
  v43 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v42 = (uint64_t)&v38 - v12;
  v40 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = sub_1BE1B2EE8();
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v38 = (char *)&v38 - v15;
  v16 = type metadata accessor for FinalizedTimestamp(0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v38 - v20;
  v22 = *a1;
  v23 = *v4;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56);
  v46 = a4;
  v24(a4, 1, 1, AssociatedTypeWitness);
  v47 = v22;
  CRRegister.timestamp.getter((uint64_t)v21);
  v47 = v23;
  CRRegister.timestamp.getter((uint64_t)v19);
  v25 = *(int *)(v16 + 20);
  v26 = *(_QWORD *)&v19[v25];
  v27 = *(_QWORD *)&v21[v25];
  if (v26 == v27)
    v28 = sub_1BDDB2BF8();
  else
    v28 = v26 < v27;
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for FinalizedTimestamp);
  result = sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for FinalizedTimestamp);
  if ((v28 & 1) == 0)
  {
    if (v23)
    {
      v30 = v42;
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 96))(result);
      v32 = (uint64_t)v43;
      if (v22)
      {
LABEL_7:
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 96))(v31);
LABEL_10:
        v33 = v38;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v32, v44, v8);
        v34 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
        v34(v32, v8);
        v34(v30, v8);
        v35 = v39;
        v36 = v46;
        v37 = v41;
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v46, v41);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v36, v33, v37);
      }
    }
    else
    {
      v30 = v42;
      v31 = sub_1BDFA5F2C(a3, v42);
      v32 = (uint64_t)v43;
      if (v22)
        goto LABEL_7;
    }
    sub_1BDFA5F2C(a3, v32);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1BDFA81B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CRRegister.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t CRRegister.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t inited;
  _BYTE v17[40];
  uint64_t v18;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v12, (uint64_t)v11, &qword_1ED6F3728);
  v13 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v12) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v11, 1, v13);
  sub_1BDD86E30((uint64_t)v11, &qword_1ED6F3728);
  if ((_DWORD)v12 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v14 = 0xD000000000000014;
    *(_QWORD *)(v14 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v14 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    sub_1BDE12578(a2, a3, &v18);
    result = swift_release();
    if (!v4)
      *a4 = v18;
  }
  return result;
}

uint64_t sub_1BDFA8370(uint64_t a1, uint64_t a2)
{
  return CRRegister.encode(to:)(a1, a2);
}

BOOL CRRegister.hasEncodedData.getter()
{
  _QWORD *v0;

  return *v0 != 0;
}

uint64_t CRRegister.minEncodingVersion.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v5);
  else
    sub_1BDFA5F2C(a1, (uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 8) + 32))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t static CRRegister<>.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v61 = a5;
  v60 = type metadata accessor for FinalizedTimestamp(0);
  v9 = MEMORY[0x1E0C80A78](v60);
  v57 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v56 = (uint64_t)&v53 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v55 = (char *)&v53 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v53 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v58 = (uint64_t)&v53 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v59 = (uint64_t)&v53 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v53 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v53 - v25;
  v27 = *(_QWORD *)(a3 - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v30 = (char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v53 - v31;
  v33 = *a1;
  v34 = *a2;
  v36 = type metadata accessor for CRRegister(0, a3, a4, v35);
  v37 = v36;
  if (v33)
  {
    v38 = (*(uint64_t (**)(void))(*(_QWORD *)v33 + 96))();
    if (v34)
    {
LABEL_3:
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 96))(v38);
      goto LABEL_6;
    }
  }
  else
  {
    v38 = sub_1BDFA5F2C(v36, (uint64_t)v32);
    if (v34)
      goto LABEL_3;
  }
  sub_1BDFA5F2C(v37, (uint64_t)v30);
LABEL_6:
  v39 = sub_1BE1B2798();
  v40 = *(void (**)(char *, uint64_t))(v27 + 8);
  v40(v30, a3);
  v40(v32, a3);
  if ((v39 & 1) != 0)
  {
    v62 = v33;
    CRRegister.timestamp.getter((uint64_t)v26);
    v62 = v34;
    CRRegister.timestamp.getter((uint64_t)v23);
    v42 = v59;
    v41 = v60;
    v43 = *(int *)(v60 + 20);
    v44 = *(_QWORD *)&v26[v43];
    v45 = *(_QWORD *)&v23[v43];
    sub_1BDD9C318((uint64_t)v26, v59, type metadata accessor for FinalizedTimestamp);
    v46 = v58;
    sub_1BDD9C318((uint64_t)v23, v58, type metadata accessor for FinalizedTimestamp);
    if (v44 != v45)
      goto LABEL_12;
    v47 = sub_1BE1B1F10();
    sub_1BDD9C3E0(v46, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v42, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v23, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v26, type metadata accessor for FinalizedTimestamp);
    if ((v47 & 1) != 0)
    {
      v62 = v33;
      v26 = v54;
      sub_1BDFA5DBC((uint64_t)v54);
      v62 = v34;
      v23 = v55;
      sub_1BDFA5DBC((uint64_t)v55);
      v48 = *(int *)(v41 + 20);
      v49 = *(_QWORD *)&v26[v48];
      v50 = *(_QWORD *)&v23[v48];
      v42 = v56;
      sub_1BDD9C318((uint64_t)v26, v56, type metadata accessor for FinalizedTimestamp);
      v46 = v57;
      sub_1BDD9C318((uint64_t)v23, v57, type metadata accessor for FinalizedTimestamp);
      if (v49 == v50)
      {
        v51 = sub_1BE1B1F10();
LABEL_13:
        sub_1BDD9C3E0(v46, type metadata accessor for FinalizedTimestamp);
        sub_1BDD9C3E0(v42, type metadata accessor for FinalizedTimestamp);
        sub_1BDD9C3E0((uint64_t)v23, type metadata accessor for FinalizedTimestamp);
        sub_1BDD9C3E0((uint64_t)v26, type metadata accessor for FinalizedTimestamp);
        return v51 & 1;
      }
LABEL_12:
      v51 = 0;
      goto LABEL_13;
    }
  }
  v51 = 0;
  return v51 & 1;
}

uint64_t sub_1BDFA8820(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static CRRegister<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t CRRegister.MutatingAction.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t inited;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int EnumCaseMultiPayload;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v64 = a3;
  v66 = a4;
  v70 = a2;
  v59 = sub_1BE1B2EE8();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v65 = (char *)&v56 - v5;
  v72 = type metadata accessor for Proto_Value(0);
  v68 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v63 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v8 = MEMORY[0x1E0C80A78](v7);
  v62 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v67 = (uint64_t)&v56 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v60 = (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v56 - v14;
  v73 = type metadata accessor for Proto_Register(0);
  v16 = MEMORY[0x1E0C80A78](v73);
  v61 = (uint64_t)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v56 - v18;
  v20 = type metadata accessor for Proto_CRDT(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v69 = (uint64_t)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v56 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v29, (uint64_t)v28, &qword_1ED6F3728);
  LODWORD(v29) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v28, 1, v20);
  sub_1BDD86E30((uint64_t)v28, &qword_1ED6F3728);
  if ((_DWORD)v29 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v30 = 0xD000000000000014;
    *(_QWORD *)(v30 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v30 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a1;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  swift_retain();
  sub_1BDDA0528((uint64_t)v25);
  v33 = *(_QWORD *)&v25[*(int *)(v20 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v33, (uint64_t)v15, &qword_1ED6F2DF0);
  v34 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48);
  v35 = a1;
  if (v57(v15, 1, v34) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F2DF0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v19, type metadata accessor for Proto_Register);
      goto LABEL_10;
    }
    sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v36 = *(int *)(v73 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)&v19[v36] = qword_1ED6EF780;
  swift_retain();
LABEL_10:
  sub_1BDD9C3E0((uint64_t)v25, type metadata accessor for Proto_CRDT);
  v37 = *(_QWORD *)&v19[*(int *)(v73 + 20)]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v38 = v67;
  sub_1BDD86DEC(v37, v67, &qword_1ED6F3770);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  LODWORD(v37) = v39(v38, 1, v72);
  sub_1BDD86E30(v38, &qword_1ED6F3770);
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Register);
  if ((_DWORD)v37 == 1)
  {
    swift_release();
    swift_setDeallocating();
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v66, 1, 1);
  }
  v40 = v69;
  sub_1BDDA0528(v69);
  v41 = *(_QWORD *)(v40 + *(int *)(v20 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v42 = v60;
  sub_1BDD86DEC(v41, v60, &qword_1ED6F2DF0);
  v43 = v57((char *)v42, 1, v34);
  v44 = v70;
  if (v43 == 1)
  {
    sub_1BDD86E30(v42, &qword_1ED6F2DF0);
    v45 = v65;
    v46 = (uint64_t)v62;
    v47 = v61;
LABEL_16:
    sub_1BE1B20E4();
    v49 = *(int *)(v73 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v47 + v49) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_19;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v45 = v65;
  v46 = (uint64_t)v62;
  v47 = v61;
  if (EnumCaseMultiPayload)
  {
    sub_1BDD9C3E0(v42, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_16;
  }
  sub_1BDDA2E8C(v42, v61, type metadata accessor for Proto_Register);
LABEL_19:
  sub_1BDD9C3E0(v69, type metadata accessor for Proto_CRDT);
  v50 = *(_QWORD *)(v47 + *(int *)(v73 + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1BDD86DEC(v50, v46, &qword_1ED6F3770);
  v51 = v72;
  if (v39(v46, 1, v72) == 1)
  {
    v52 = v63;
    sub_1BE1B20E4();
    v53 = *(int *)(v51 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v52 + v53) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v46, &qword_1ED6F3770);
  }
  else
  {
    v52 = v63;
    sub_1BDDA2E8C(v46, v63, type metadata accessor for Proto_Value);
  }
  sub_1BDD9C3E0(v47, type metadata accessor for Proto_Register);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v54 = sub_1BDDB4FC0(v52, v35);
  swift_release();
  v55 = v71;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v64 + 8) + 8) + 8))(v54, v44);
  swift_release();
  swift_setDeallocating();
  result = swift_release();
  if (!v55)
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v45, 0, 1, v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v66, v45, v59);
  }
  return result;
}

uint64_t CRRegister.MutatingAction.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v5 = MEMORY[0x1E0C80A78](v4);
  v59 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v57 = (char *)&v49 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v8);
  v55 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v56);
  v58 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_Value(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = a2;
  v15 = *(_QWORD *)(a2 + 16);
  v61 = sub_1BE1B2EE8();
  v16 = *(_QWORD *)(v61 - 8);
  v17 = MEMORY[0x1E0C80A78](v61);
  v19 = (char *)&v49 - v18;
  v20 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v63;
  result = sub_1BDDA8D6C();
  if (v23)
    return result;
  v52 = v14;
  v50 = v12;
  v51 = v11;
  v53 = result;
  v54 = v22;
  v63 = 0;
  v25 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v62, v61);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v15) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v25);
  v26 = v54;
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v54, v19, v15);
  MEMORY[0x1E0C80A78](v27);
  v28 = *(_QWORD *)(v60 + 24);
  *(&v49 - 4) = v15;
  *(&v49 - 3) = v28;
  *(&v49 - 2) = (uint64_t)v26;
  *(&v49 - 1) = a1;
  v29 = v53;
  swift_retain();
  v30 = v63;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDE27F68, (uint64_t)v52);
  if (v30)
  {
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v26, v15);
  }
  v31 = v29 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  v32 = *(_QWORD *)(v31 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v33 = v55;
  sub_1BDD86DEC(v32, v55, &qword_1ED6F2DF0);
  v34 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34);
  v62 = v31;
  if (v35 == 1)
  {
    sub_1BDD86E30(v33, &qword_1ED6F2DF0);
    v37 = v58;
    v36 = (uint64_t)v59;
    v38 = v56;
    v39 = (uint64_t)v57;
LABEL_10:
    v42 = v51;
    sub_1BE1B20E4();
    v43 = *(int *)(v38 + 20);
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)(v37 + v43) = qword_1ED6EF780;
    swift_retain();
    goto LABEL_13;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v37 = v58;
  v36 = (uint64_t)v59;
  v41 = v33;
  v38 = v56;
  v39 = (uint64_t)v57;
  if (EnumCaseMultiPayload)
  {
    sub_1BDD9C3E0(v41, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  sub_1BDDA2E8C(v41, v58, type metadata accessor for Proto_Register);
  v42 = v51;
LABEL_13:
  v63 = v20;
  v44 = *(int *)(v38 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    v45 = swift_retain();
    v46 = sub_1BE131250(v45);
    v42 = v51;
    *(_QWORD *)(v37 + v44) = v46;
    swift_release();
  }
  v47 = *(_QWORD *)(v37 + v44);
  sub_1BDDA2E8C((uint64_t)v52, v39, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v39, 0, 1, v42);
  sub_1BDDA2EF0(v39, v36, &qword_1ED6F3770);
  v48 = v47 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v36, v48, &qword_1ED6F3770);
  swift_endAccess();
  swift_release();
  sub_1BE12AA70(v37);
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v54, v15);
}

void CRRegister.MutatingAction.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1BDFA95F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CRRegister.MutatingAction.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BDFA960C(uint64_t a1, uint64_t a2)
{
  return CRRegister.MutatingAction.encode(to:)(a1, a2);
}

void sub_1BDFA9620(_BYTE *a1@<X8>)
{
  CRRegister.MutatingAction.minEncodingVersion.getter(a1);
}

uint64_t CRRegister<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *v2;
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  v10 = sub_1BE1B3770();
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 96))(v10);
  else
    sub_1BDFA5F2C(a2, (uint64_t)v8);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
  sub_1BE1B34F4();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t sub_1BDFA974C(uint64_t a1, uint64_t a2)
{
  return CRRegister<>.encode(to:)(a1, a2);
}

uint64_t type metadata accessor for CRRegisterRefBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRRegisterRefBase);
}

uint64_t type metadata accessor for CRGroupedRegisterRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRGroupedRegisterRef);
}

uint64_t type metadata accessor for CRRegisterRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRRegisterRef);
}

uint64_t sub_1BDFA9788(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  return CRRegister.value.setter((uint64_t)v4, a2);
}

uint64_t type metadata accessor for CRRegister.MutatingAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRRegister.MutatingAction);
}

_UNKNOWN **sub_1BDFA9808()
{
  return &protocol witness table for CRRegister<A>;
}

uint64_t sub_1BDFA9814(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRRegister<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDFA9840@<X0>(_QWORD *a1@<X8>)
{
  return CRRegister.projectedValue.getter(a1);
}

uint64_t sub_1BDFA9874()
{
  return 16;
}

__n128 sub_1BDFA9880(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDFA988C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_1Tm(a1, a2, a3, (uint64_t (*)(uint64_t))CRRegister.value.getter);
}

uint64_t sub_1BDFA989C()
{
  return 16;
}

__n128 sub_1BDFA98A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDFA98B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_1Tm(a1, a2, a3, (uint64_t (*)(uint64_t))CRRegister.wrappedValue.getter);
}

uint64_t keypath_get_1Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = type metadata accessor for CRRegister(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), (uint64_t)a4);
  return a4(v5);
}

uint64_t sub_1BDFA9914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for CRRegister(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return sub_1BDFA9788(a1, v5);
}

uint64_t sub_1BDFA9950()
{
  return 16;
}

__n128 sub_1BDFA995C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDFA9968()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1BDFA999C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FinalizedTimestamp(319);
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1BDFA9A28()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for FinalizedTimestamp(319);
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_1BDFA9AB4(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *sub_1BDFA9AE0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *sub_1BDFA9B24(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_1BDFA9B54(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1BDFA9BB0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1BDFA9C00()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B2EE8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDFA9C6C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1BDFA9DAC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1BDFA9F54()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1BDFA9F5C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_1BDFA9F80()
{
  uint64_t v0;

  return sub_1BDFA552C(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDFA9FA0()
{
  return sub_1BDFA9F80();
}

uint64_t CRTaggedValue.tag.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CRTaggedValue.tag.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CRTaggedValue.tag.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRTaggedValue.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t CRTaggedValue.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*CRTaggedValue.value.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRTaggedValue.init(tag:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;

  *a5 = a1;
  v7 = (char *)a5 + *(int *)(type metadata accessor for CRTaggedValue(0, a3, a4, a4) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v7, a2, a3);
}

uint64_t type metadata accessor for CRTaggedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRTaggedValue);
}

uint64_t CRTaggedValue.observableDifference(from:with:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v32 = a2;
  v33 = a4;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v30 - v17;
  if (*v4 == *(_QWORD *)a1)
  {
    v31 = v16;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 32))(&a1[*(int *)(a3 + 36)], v32, v7, v8);
    v19 = v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v31);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v33, 1, 1, AssociatedTypeWitness);
    }
    else
    {
      v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v26(v18, v14, AssociatedTypeWitness);
      v27 = v33;
      v26(v33, v18, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v27, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    v21 = v15;
    v22 = swift_conformsToProtocol2();
    if (v22)
      v23 = v22;
    else
      v23 = 0;
    if (v22)
      v24 = AssociatedTypeWitness;
    else
      v24 = 0;
    if (v24)
    {
      v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      *((_QWORD *)&v35 + 1) = v24;
      v36 = v23;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
      v25(v24, v23);
    }
    else
    {
      v36 = 0;
      v34 = 0u;
      v35 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF52C570);
    v28 = v33;
    v29 = swift_dynamicCast();
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v28, v29 ^ 1u, 1, AssociatedTypeWitness);
  }
}

uint64_t CRTaggedValue.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40))(a1, *(_QWORD *)(a2 + 16));
}

Swift::Bool __swiftcall CRTaggedValue.needToFinalizeTimestamps()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 8) + 48))(*(_QWORD *)(v0 + 16)) & 1;
}

uint64_t CRTaggedValue.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 56))(a1, *(_QWORD *)(a2 + 16));
}

void CRTaggedValue.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1BDFAA34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CRTaggedValue.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t CRTaggedValue.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  int EnumCaseMultiPayload;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t inited;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v85 = a3;
  v76 = a4;
  v86 = a2;
  v74 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v75 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v84 = (char *)&v74 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v80 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v74 - v11;
  v91 = type metadata accessor for Proto_TaggedValue(0);
  v13 = MEMORY[0x1E0C80A78](v91);
  v81 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v89 = (uint64_t)&v74 - v15;
  v16 = type metadata accessor for Proto_Value(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v82 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v92 = (uint64_t)&v74 - v21;
  MEMORY[0x1E0C80A78](v20);
  v87 = (uint64_t)&v74 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v24 = MEMORY[0x1E0C80A78](v23);
  v90 = (uint64_t)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v88 = (uint64_t)&v74 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v74 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v74 - v31;
  v33 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v33, (uint64_t)v32, &qword_1ED6F3770);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v17) = v34(v32, 1, v16);
  sub_1BDD86E30((uint64_t)v32, &qword_1ED6F3770);
  if ((_DWORD)v17 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v35 = 0xD000000000000017;
    *(_QWORD *)(v35 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v35 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a1;
  sub_1BDD86DEC(v33, (uint64_t)v30, &qword_1ED6F3770);
  v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
  result = v34(v30, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  v37 = v87;
  sub_1BDDA2E8C((uint64_t)v30, v87, type metadata accessor for Proto_Value);
  v77 = v16;
  v38 = *(_QWORD *)(v37 + *(int *)(v16 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v38, (uint64_t)v12, &qword_1ED6F26F0);
  v39 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48);
  if (v40(v12, 1, v39) == 1)
  {
    swift_retain();
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6F26F0);
    v41 = v89;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v41 = v89;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1BDDA2E8C((uint64_t)v12, v89, type metadata accessor for Proto_TaggedValue);
      v43 = a1;
      goto LABEL_12;
    }
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v44 = *(int *)(v91 + 20);
  if (qword_1EF52B520 != -1)
    swift_once();
  *(_QWORD *)(v41 + v44) = qword_1EF52B518;
  v43 = a1;
LABEL_12:
  swift_retain();
  sub_1BDD9C3E0(v37, type metadata accessor for Proto_Value);
  v45 = v91;
  v46 = *(_QWORD *)(v41 + *(int *)(v91 + 20));
  swift_beginAccess();
  v47 = v41;
  v48 = *(_QWORD *)(v46 + 16);
  sub_1BDD9C3E0(v47, type metadata accessor for Proto_TaggedValue);
  v49 = *(_QWORD *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v50 = v88;
  sub_1BDD86DEC(v49, v88, &qword_1ED6F3770);
  v51 = v77;
  result = v79(v50, 1, v77);
  if ((_DWORD)result == 1)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  v89 = v48;
  v52 = v92;
  sub_1BDDA2E8C(v50, v92, type metadata accessor for Proto_Value);
  v53 = *(_QWORD *)(v52 + *(int *)(v51 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v54 = v53;
  v55 = v80;
  sub_1BDD86DEC(v54, v80, &qword_1ED6F26F0);
  if (v40((char *)v55, 1, v39) == 1)
  {
    sub_1BDD86E30(v55, &qword_1ED6F26F0);
    v56 = v86;
    v57 = v85;
    v58 = v83;
    v59 = (uint64_t)v82;
    v60 = v81;
LABEL_18:
    sub_1BE1B20E4();
    v62 = *(int *)(v45 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v60 + v62) = qword_1EF52B518;
    swift_retain();
    goto LABEL_21;
  }
  v61 = swift_getEnumCaseMultiPayload();
  v58 = v83;
  v59 = (uint64_t)v82;
  v60 = v81;
  if (v61 != 11)
  {
    sub_1BDD9C3E0(v55, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v56 = v86;
    v57 = v85;
    goto LABEL_18;
  }
  sub_1BDDA2E8C(v55, v81, type metadata accessor for Proto_TaggedValue);
  v56 = v86;
  v57 = v85;
LABEL_21:
  v63 = v84;
  sub_1BDD9C3E0(v92, type metadata accessor for Proto_Value);
  v64 = *(_QWORD *)(v60 + *(int *)(v45 + 20))
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  v65 = v90;
  sub_1BDD86DEC(v64, v90, &qword_1ED6F3770);
  v66 = v77;
  if (v79(v65, 1, v77) == 1)
  {
    sub_1BE1B20E4();
    v67 = *(int *)(v66 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v59 + v67) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v90, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C(v65, v59, type metadata accessor for Proto_Value);
  }
  sub_1BDD9C3E0(v60, type metadata accessor for Proto_TaggedValue);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v68 = sub_1BDDB4FC0(v59, v43);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 8) + 8))(v68, v56);
  if (v58)
  {
    swift_release();
    swift_setDeallocating();
    return swift_release();
  }
  swift_release();
  swift_release();
  v69 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v70 = v75;
  v69(v75, v63, v56);
  v71 = v76;
  *v76 = v89;
  v73 = type metadata accessor for CRTaggedValue(0, v56, v57, v72);
  return ((uint64_t (*)(char *, char *, uint64_t))v69)((char *)v71 + *(int *)(v73 + 36), v70, v56);
}

uint64_t sub_1BDFAAC98(unsigned int (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2)
{
  return CRTaggedValue.encode(to:)(a1, a2);
}

uint64_t CRTaggedValue.encode(to:)(unsigned int (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  char *v77;

  v76 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v4 = MEMORY[0x1E0C80A78](v3);
  v72 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v61 - v6;
  v75 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v73 = (uint64_t)&v61 - v15;
  v16 = type metadata accessor for Proto_TaggedValue(0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v61 - v20;
  v22 = (uint64_t)v77;
  result = sub_1BDE25870();
  if (v22)
    return result;
  v77 = v21;
  v66 = a1;
  v62 = v14;
  v70 = v16;
  v68 = v10;
  v71 = 0;
  v63 = v19;
  v64 = v8;
  v65 = v7;
  v24 = v74;
  v67 = *(_QWORD *)v74;
  v25 = result + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  v26 = result;
  swift_beginAccess();
  v27 = v75;
  v28 = *(_QWORD *)(v25 + *(int *)(v75 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v29 = v73;
  sub_1BDD86DEC(v28, v73, &qword_1ED6F26F0);
  v30 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48);
  v32 = v31(v29, 1, v30);
  v69 = v26;
  v61 = v31;
  if (v32 == 1)
  {
    swift_retain();
    sub_1BDD86E30(v29, &qword_1ED6F26F0);
    v33 = (uint64_t)v68;
    v34 = v70;
    v35 = v66;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v34 = v70;
    v35 = v66;
    if (EnumCaseMultiPayload == 11)
    {
      v37 = (uint64_t)v77;
      sub_1BDDA2E8C(v29, (uint64_t)v77, type metadata accessor for Proto_TaggedValue);
      swift_retain();
      v33 = (uint64_t)v68;
      goto LABEL_10;
    }
    swift_retain();
    sub_1BDD9C3E0(v29, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v33 = (uint64_t)v68;
  }
  v38 = (uint64_t)v77;
  sub_1BE1B20E4();
  v39 = *(int *)(v34 + 20);
  if (qword_1EF52B520 != -1)
    swift_once();
  *(_QWORD *)(v38 + v39) = qword_1EF52B518;
  swift_retain();
  v37 = v38;
LABEL_10:
  v40 = *(int *)(v34 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v41 = swift_retain();
    v42 = sub_1BE138794(v41);
    v37 = (uint64_t)v77;
    *(_QWORD *)&v77[v40] = v42;
    swift_release();
  }
  v43 = v37;
  v44 = *(_QWORD *)(v37 + v40);
  swift_beginAccess();
  *(_QWORD *)(v44 + 16) = v67;
  sub_1BE12A434(v43);
  v45 = swift_endAccess();
  MEMORY[0x1E0C80A78](v45);
  *((_OWORD *)&v61 - 2) = *(_OWORD *)(v76 + 16);
  *(&v61 - 2) = v24;
  *(&v61 - 1) = v35;
  v46 = v71;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDFAB590, v33);
  if (v46)
    return swift_release();
  v71 = 0;
  swift_beginAccess();
  v47 = *(int *)(v27 + 20);
  v77 = (char *)v25;
  v48 = *(_QWORD *)(v25 + v47)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v49 = (uint64_t)v62;
  sub_1BDD86DEC(v48, (uint64_t)v62, &qword_1ED6F26F0);
  if (v61(v49, 1, v30) == 1)
  {
    v50 = v27;
    sub_1BDD86E30(v49, &qword_1ED6F26F0);
    v51 = (uint64_t)v72;
    v52 = (uint64_t)v65;
    v53 = v64;
LABEL_19:
    v55 = (uint64_t)v63;
    sub_1BE1B20E4();
    v56 = *(int *)(v70 + 20);
    if (qword_1EF52B520 != -1)
      swift_once();
    *(_QWORD *)(v55 + v56) = qword_1EF52B518;
    swift_retain();
    goto LABEL_22;
  }
  v54 = swift_getEnumCaseMultiPayload();
  v51 = (uint64_t)v72;
  v52 = (uint64_t)v65;
  v53 = v64;
  v50 = v27;
  if (v54 != 11)
  {
    sub_1BDD9C3E0(v49, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_19;
  }
  v55 = (uint64_t)v63;
  sub_1BDDA2E8C(v49, (uint64_t)v63, type metadata accessor for Proto_TaggedValue);
LABEL_22:
  v57 = *(int *)(v70 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v58 = swift_retain();
    *(_QWORD *)(v55 + v57) = sub_1BE138794(v58);
    swift_release();
  }
  v59 = *(_QWORD *)(v55 + v57);
  sub_1BDDA2E8C((uint64_t)v68, v52, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v52, 0, 1, v50);
  sub_1BDEFF368(v52, v51);
  v60 = v59 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1BDEFF3B0(v51, v60);
  swift_endAccess();
  swift_release();
  sub_1BE12A434(v55);
  swift_endAccess();
  return swift_release();
}

void sub_1BDFAB390(_BYTE *a1@<X8>)
{
  CRTaggedValue.minEncodingVersion.getter(a1);
}

uint64_t static CRTaggedValue<>.== infix(_:_:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a1 != *a2)
    return 0;
  type metadata accessor for CRTaggedValue(0, a3, a4, a4);
  return sub_1BE1B2798() & 1;
}

uint64_t CRTaggedValue<>.hash(into:)()
{
  sub_1BE1B3704();
  return sub_1BE1B26E4();
}

uint64_t CRTaggedValue<>.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  sub_1BE1B26E4();
  return sub_1BE1B371C();
}

uint64_t sub_1BDFAB4E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return static CRTaggedValue<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_1BDFAB4F0()
{
  return CRTaggedValue<>.hashValue.getter();
}

uint64_t sub_1BDFAB4F8()
{
  return CRTaggedValue<>.hash(into:)();
}

uint64_t sub_1BDFAB500()
{
  sub_1BE1B36F8();
  CRTaggedValue<>.hash(into:)();
  return sub_1BE1B371C();
}

uint64_t CRTaggedValue<>.encode(to:)()
{
  return sub_1BE1B26CC();
}

uint64_t sub_1BDFAB578()
{
  return CRTaggedValue<>.encode(to:)();
}

uint64_t sub_1BDFAB590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4[2];
  v6 = v4[3];
  v7 = v4[5];
  type metadata accessor for CRTaggedValue(0, v5, v6, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 8) + 16))(v7, v5);
}

uint64_t sub_1BDFAB5F8(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRTaggedValue<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDFAB624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <> CRTaggedValue<A>, a1, &v4);
}

uint64_t sub_1BDFAB658()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDFAB6D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t sub_1BDFAB778(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1BDFAB798(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1BDFAB7E8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1BDFAB838(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *sub_1BDFAB888(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1BDFAB8D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 8) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 8) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1BDFAB998 + 4 * byte_1BE1C01A0[(v8 - 1)]))();
}

void sub_1BDFAB9F8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0u;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 8) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1BDFABBC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t i;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(*v0 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, v1, *(_QWORD *)(AssociatedConformanceWitness + 16), v3);
  v4 = sub_1BE1B2B04();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v33 - v6;
  v7 = sub_1BE1B1F58();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = sub_1BE1B2EE8();
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v33 - v13;
  swift_beginAccess();
  v15 = v0[14];
  v16 = *(_QWORD *)(v15 + 64);
  v35 = v0;
  v36 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v37 = (unint64_t)(v17 + 63) >> 6;
  v38 = v15;
  v34 = v37 - 1;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  if (!v19)
    goto LABEL_6;
LABEL_4:
  v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v23 = v21;
  v24 = v22 | (v21 << 6);
LABEL_5:
  v25 = v38;
  (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v12, *(_QWORD *)(v38 + 48) + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v24, v7);
  (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v25 + 56) + *(_QWORD *)(v5 + 72) * v24, v4);
  for (i = 0; ; i = 1)
  {
    while (1)
    {
LABEL_12:
      v29 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v12, i, 1, TupleTypeMetadata2);
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v14, v12, v41);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, TupleTypeMetadata2) == 1)
      {
        swift_release();
        v32 = v35;
        swift_bridgeObjectRelease();
        swift_unknownObjectWeakDestroy();
        swift_defaultActor_destroy();
        return (uint64_t)v32;
      }
      v30 = v39;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v39, &v14[*(int *)(TupleTypeMetadata2 + 48)], v4);
      sub_1BE1B2AF8();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v30, v4);
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v14, v7);
      v21 = v23;
      if (v19)
        goto LABEL_4;
LABEL_6:
      v27 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v27 >= v37)
      {
        v23 = v21;
        goto LABEL_11;
      }
      v28 = *(_QWORD *)(v36 + 8 * v27);
      if (v28)
        goto LABEL_9;
      v23 = v21 + 2;
      if (v21 + 2 < v37)
        break;
      v19 = 0;
      i = 1;
      v23 = v21 + 1;
    }
    v28 = *(_QWORD *)(v36 + 8 * v23);
    if (v28)
    {
      v27 = v21 + 2;
LABEL_9:
      v19 = (v28 - 1) & v28;
      v24 = __clz(__rbit64(v28)) + (v27 << 6);
      v23 = v27;
      goto LABEL_5;
    }
    v31 = v21 + 3;
    if (v31 < v37)
      break;
LABEL_11:
    v19 = 0;
  }
  v28 = *(_QWORD *)(v36 + 8 * v31);
  if (v28)
  {
    v27 = v31;
    goto LABEL_9;
  }
  while (1)
  {
    v27 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v27 >= v37)
    {
      v19 = 0;
      i = 1;
      v23 = v34;
      goto LABEL_12;
    }
    v28 = *(_QWORD *)(v36 + 8 * v27);
    ++v31;
    if (v28)
      goto LABEL_9;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1BDFABF64()
{
  sub_1BDFABBC4();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1BDFABF7C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = (_QWORD *)*v1;
  v49 = a1;
  v50 = v1 + 15;
  v3 = v2[12];
  v54 = v2[11];
  v55 = v3;
  v4 = v2[10];
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = type metadata accessor for Capsule(255, v4, *(_QWORD *)(AssociatedConformanceWitness + 16), v6);
  v8 = sub_1BE1B2AC8();
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  MEMORY[0x1E0C80A78](v8);
  v43 = (char *)&v41 - v9;
  v10 = sub_1BE1B2EE8();
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v52 = (char *)&v41 - v12;
  v51 = *(_QWORD *)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v42 = (char *)&v41 - v15;
  v53 = v7;
  v16 = sub_1BE1B2B04();
  v17 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v41 - v18;
  v20 = sub_1BE1B1F58();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v41 - v25;
  sub_1BE1B1F4C();
  v27 = swift_allocObject();
  swift_weakInit();
  v28 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v28(v24, v26, v20);
  v29 = (*(unsigned __int8 *)(v21 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v30 = (char *)swift_allocObject();
  v31 = v54;
  *((_QWORD *)v30 + 2) = v48;
  *((_QWORD *)v30 + 3) = v31;
  *((_QWORD *)v30 + 4) = v55;
  *((_QWORD *)v30 + 5) = v27;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v30[v29], v24, v20);
  v32 = v49;
  sub_1BE1B2AD4();
  v28(v24, v26, v20);
  v33 = v32;
  v34 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v19, v33, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v19, 0, 1, v16);
  swift_beginAccess();
  sub_1BDDD66DC();
  sub_1BE1B2684();
  sub_1BE1B26B4();
  swift_endAccess();
  if (MEMORY[0x1C3B7E140](v50))
  {
    v35 = v52;
    (*(void (**)(uint64_t))(v55 + 24))(v54);
    swift_unknownObjectRelease();
    v36 = v51;
    v37 = v53;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v35, 1, v53) != 1)
    {
      v38 = v42;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v42, v35, v37);
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v41, v38, v37);
      v39 = v43;
      sub_1BE1B2AEC();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v45);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v20);
    }
  }
  else
  {
    v35 = v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v52, 1, 1, v53);
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v35, v47);
}

uint64_t sub_1BDFAC3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a5;
  v22 = a6;
  v8 = sub_1BE1B1F58();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1BE1B2ABC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8);
  v16 = (*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = 0;
  v18 = v21;
  *((_QWORD *)v17 + 4) = a4;
  *((_QWORD *)v17 + 5) = v18;
  *((_QWORD *)v17 + 6) = v22;
  *((_QWORD *)v17 + 7) = v15;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v17[v16], (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  sub_1BE193B58((uint64_t)v13, (uint64_t)&unk_1EF52EEE0, (uint64_t)v17);
  return swift_release();
}

uint64_t sub_1BDFAC554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  return swift_task_switch();
}

uint64_t sub_1BDFAC570()
{
  uint64_t v0;
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 64) = Strong;
  if (Strong)
    return swift_task_switch();
  **(_BYTE **)(v0 + 40) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BDFAC5F0()
{
  uint64_t v0;

  sub_1BDFAC650(*(_QWORD *)(v0 + 56));
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1BDFAC634()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 64) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BDFAC650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, v3, *(_QWORD *)(AssociatedConformanceWitness + 16), v5);
  v6 = sub_1BE1B2B04();
  v7 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - v8;
  v10 = sub_1BE1B1F58();
  MEMORY[0x1E0C80A78](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v9, 1, 1, v6);
  swift_beginAccess();
  sub_1BDDD66DC();
  sub_1BE1B2684();
  sub_1BE1B26B4();
  return swift_endAccess();
}

uint64_t sub_1BDFAC7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, v1, *(_QWORD *)(AssociatedConformanceWitness + 16), v3);
  v4 = sub_1BE1B2AE0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v9 - v6);
  swift_checkMetadataState();
  *v7 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF07A8], v4);
  return sub_1BE1B2B28();
}

uint64_t sub_1BDFAC89C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;

  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 88);
  v21 = *(_QWORD *)(*a2 + 96);
  v6 = *(_QWORD *)(v4 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, v6, *(_QWORD *)(AssociatedConformanceWitness + 16), v8);
  v9 = sub_1BE1B2B04();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BE1B2ABC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v17 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = v6;
  *((_QWORD *)v18 + 5) = v5;
  *((_QWORD *)v18 + 6) = v21;
  *((_QWORD *)v18 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], v12, v9);
  swift_retain();
  sub_1BE193A0C((uint64_t)v15, (uint64_t)&unk_1EF52EEF0, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_1BDFACA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1BDFACA4C()
{
  uint64_t v0;

  sub_1BDFABF7C(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BDFACA7C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1BDFACA88()
{
  return sub_1BDFACA7C();
}

uint64_t sub_1BDFACAA0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BDFACAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BE1B1F58();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1BDFACB38(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 80);
  return sub_1BDFAC3A4(a1, v1[5], (uint64_t)v1 + ((v6 + 48) & ~v6), v3, v4, v5);
}

uint64_t sub_1BDFACB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BE1B1F58();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1BDFACC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = v1 + ((v4 + 64) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1BDE28004;
  v7[6] = v5;
  v7[7] = v6;
  v7[5] = a1;
  return swift_task_switch();
}

uint64_t sub_1BDFACCA4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDFAC89C(a1, v1);
}

uint64_t sub_1BDFACCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, v1, *(_QWORD *)(AssociatedConformanceWitness + 16), v3);
  v4 = sub_1BE1B2B04();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t sub_1BDFACD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, v2, *(_QWORD *)(AssociatedConformanceWitness + 16), v4);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_1BE1B2B04() - 8) + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = v0 + ((v5 + 64) & ~v5);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1BDE281A0;
  v8[2] = v6;
  v8[3] = v7;
  return swift_task_switch();
}

char *CROrderedDictionary.index(where:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char **v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  _DWORD v43[2];
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, char *);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v52 = a2;
  v50 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v61 = *(_QWORD *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v49 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v47 = (char *)v43 - v11;
  MEMORY[0x1E0C80A78](v10);
  v46 = (char *)v43 - v12;
  v13 = swift_getTupleTypeMetadata2();
  v14 = sub_1BE1B2EE8();
  v56 = *(_QWORD *)(v14 - 8);
  v57 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v55 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v54 = (char *)v43 - v17;
  v18 = v3[1];
  v62 = *v3;
  v63 = v18;
  MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedDictionary<A, B>, a3);
  sub_1BE1B28B8();
  v62 = v64;
  v63 = v65;
  sub_1BE1B3230();
  sub_1BE1B320C();
  v53 = sub_1BE1B3224();
  v51 = v9;
  v48 = TupleTypeMetadata2;
  v45 = v13;
  v19 = v46;
  while (1)
  {
    v20 = v55;
    sub_1BE1B3218();
    v21 = (char **)v54;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v54, v20, v57);
    v22 = (*(uint64_t (**)(char **, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v21, 1, v13);
    if (v22 == 1)
    {
      v19 = 0;
      goto LABEL_7;
    }
    v43[1] = v22;
    v23 = *(int *)(TupleTypeMetadata2 + 48);
    v60 = &v19[v23];
    v44 = *v21;
    v58 = (char *)v21 + *(int *)(v13 + 48) + v23;
    v24 = v47;
    v25 = &v47[v23];
    v26 = *(_QWORD *)(v5 - 8);
    v27 = *(void (**)(char *))(v26 + 32);
    v27(v47);
    v28 = v61;
    v59 = *(_QWORD *)(v61 - 8);
    v29 = v5;
    v30 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    v30(v25, v58, v61);
    ((void (*)(char *, char *, uint64_t))v27)(v19, v24, v29);
    v31 = v60;
    v32 = v25;
    v33 = v51;
    v30(v60, v32, v28);
    v5 = v29;
    TupleTypeMetadata2 = v48;
    v34 = v28;
    v35 = &v33[*(int *)(v48 + 48)];
    v36 = v26;
    v37 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v38 = v59;
    v37(v33, v19, v5);
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v31, v34);
    v39 = v66;
    v40 = v50(v33, v35);
    v66 = v39;
    if (v39)
      break;
    v41 = v40;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v19, TupleTypeMetadata2);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v61);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v5);
    v13 = v45;
    if ((v41 & 1) != 0)
    {
      v19 = v44;
LABEL_7:
      swift_release();
      swift_bridgeObjectRelease();
      return v19;
    }
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v19, TupleTypeMetadata2);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v61);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v5);
  return v19;
}

void CROrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDFB631C(a1, a2, a3);
}

uint64_t sub_1BDFAD240()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v1);
}

void CROrderedDictionary.moveOrInsert(value:forKey:to:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[11];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v15[9] = a3;
  v15[10] = a1;
  v6 = a4[3];
  v7 = sub_1BE1B2EE8();
  v8 = MEMORY[0x1E0C80A78](v7);
  v15[6] = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v16 = v4;
  v10 = *(_QWORD *)(v4 + 8);
  v15[5] = v4 + 8;
  v11 = a4[4];
  v12 = a4[5];
  v14 = a4[6];
  v13 = a4[7];
  v17 = a4[2];
  v18 = v6;
  v15[7] = v13;
  v15[8] = v11;
  v19 = v11;
  v20 = v12;
  v21 = v14;
  v22 = v13;
  v23 = v10;
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDFAD324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];
  uint64_t v29;

  *(_QWORD *)(v13 - 160) = v4;
  *(_QWORD *)(v13 - 224) = a1;
  CRDictionary.subscript.getter(v4, a4, v8);
  v14 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v13 - 232) = v14;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v8, 1, v7);
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
  v17 = v16(v8, v6);
  if (v15 == 1)
    CROrderedDictionary.insert(value:forKey:at:)(*(_QWORD *)(v13 - 176), *(_QWORD *)(v13 - 160), *(_QWORD *)(v13 - 184), v11);
  *(_QWORD *)(v13 - 248) = v16;
  *(_QWORD *)(v13 - 240) = &v29;
  *(_QWORD *)(v13 - 144) = **(_QWORD **)(v13 - 168);
  MEMORY[0x1E0C80A78](v17);
  v28[2] = v5;
  v28[3] = v7;
  v28[4] = *(_QWORD *)(v13 - 192);
  v28[5] = v12;
  v18 = *(_QWORD *)(v13 - 200);
  v28[6] = v10;
  v28[7] = v18;
  v28[8] = *(_QWORD *)(v13 - 160);
  v20 = type metadata accessor for CROrderedSetElement(255, v5, v12, v19);
  v22 = type metadata accessor for CRSequence(0, v20, (uint64_t)&off_1E7758E40, v21);
  swift_retain();
  MEMORY[0x1C3B7DF54](&unk_1BE1C7C70, v20);
  v23 = sub_1BE0C671C((uint64_t (*)(char *))sub_1BDFB6520, (uint64_t)v28, v22);
  LOBYTE(v20) = v24;
  result = swift_release();
  if ((v20 & 1) == 0)
  {
    CROrderedDictionary.move(from:to:)(v23, *(_QWORD *)(v13 - 184));
    v26 = *(_QWORD *)(v13 - 232);
    v27 = *(_QWORD *)(v13 - 208);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 16))(v27, *(_QWORD *)(v13 - 176), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v7);
    sub_1BDF2B938();
  }
  return result;
}

void CROrderedDictionary.insert(value:forKey:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[7];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v5 = v4;
  v22 = a3;
  v18[0] = a1;
  v21 = type metadata accessor for Timestamp(0);
  v7 = MEMORY[0x1E0C80A78](v21);
  v20 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a4 + 16);
  v18[1] = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v7);
  v18[4] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a4 + 40);
  v19 = type metadata accessor for CROrderedSetElement(0, v9, v11, v12);
  v18[5] = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v18[2] = (char *)v18 - v13;
  v14 = *(_QWORD *)(a4 + 24);
  v15 = sub_1BE1B2EE8();
  v16 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v16);
  v23 = v5;
  v24 = v9;
  v29 = *(_QWORD *)(v5 + 8);
  v17 = *(_QWORD *)(a4 + 32);
  v25 = v14;
  v26 = v17;
  v18[3] = v11;
  v27 = v11;
  v28 = *(_OWORD *)(a4 + 48);
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDFAD660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;

  *(_QWORD *)(v10 - 192) = v7;
  CRDictionary.subscript.getter(v7, a4, v9);
  v11 = *(_QWORD *)(v4 - 8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v4);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v6);
  if (v12 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v8, *(_QWORD *)(v10 - 240), v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v4);
    sub_1BDF2B938();
  }
  return result;
}

void CROrderedDictionary.append(value:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = v3;
  v17[0] = a1;
  v20 = type metadata accessor for Timestamp(0);
  v6 = MEMORY[0x1E0C80A78](v20);
  v19 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a3 + 16);
  v17[1] = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v6);
  v17[4] = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 40);
  v18 = type metadata accessor for CROrderedSetElement(0, v8, v10, v11);
  v17[5] = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v17[2] = (char *)v17 - v12;
  v13 = *(_QWORD *)(a3 + 24);
  v14 = sub_1BE1B2EE8();
  v15 = MEMORY[0x1E0C80A78](v14);
  MEMORY[0x1E0C80A78](v15);
  v21 = v4;
  v22 = v8;
  v27 = *(_QWORD *)(v4 + 8);
  v16 = *(_QWORD *)(a3 + 32);
  v23 = v13;
  v24 = v16;
  v17[3] = v10;
  v25 = v10;
  v26 = *(_OWORD *)(a3 + 48);
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDFAD954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;

  *(_QWORD *)(v10 - 176) = v6;
  CRDictionary.subscript.getter(v6, a4, v8);
  v11 = *(_QWORD *)(v7 - 8);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v5);
  if (v12 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v4, *(_QWORD *)(v10 - 224), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v4, 0, 1, v7);
    sub_1BDF2B938();
  }
  return result;
}

void CROrderedDictionary.moveOrAppend(value:forKey:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[12];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v14[10] = a1;
  v5 = a3[3];
  v6 = sub_1BE1B2EE8();
  v7 = MEMORY[0x1E0C80A78](v6);
  v14[6] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v15 = v3;
  v9 = *(_QWORD *)(v3 + 8);
  v14[5] = v3 + 8;
  v10 = a3[4];
  v11 = a3[5];
  v13 = a3[6];
  v12 = a3[7];
  v16 = a3[2];
  v17 = v5;
  v14[8] = v12;
  v14[9] = v10;
  v18 = v10;
  v19 = v11;
  v20 = v13;
  v21 = v12;
  v22 = v9;
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDFADB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  char v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  _QWORD v34[9];
  uint64_t v35;

  *(_QWORD *)(v13 - 168) = v6;
  *(_QWORD *)(v13 - 224) = a1;
  CRDictionary.subscript.getter(v6, a4, v8);
  v14 = *(_QWORD *)(v7 - 8);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v8, 1, v7);
  v16 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v13 - 200) = v10;
  v16(v8, v10);
  if (v15 == 1)
    CROrderedDictionary.append(value:forKey:)(*(_QWORD *)(v13 - 176), *(_QWORD *)(v13 - 168), v11);
  *(_QWORD *)(v13 - 240) = v16;
  v20 = *(uint64_t **)(v13 - 160);
  v22 = *v20;
  v21 = v20[1];
  *(_QWORD *)(v13 - 144) = v22;
  *(_QWORD *)(v13 - 136) = v21;
  v23 = CROrderedDictionary.count.getter(v11, v17, v18, v19);
  *(_QWORD *)(v13 - 248) = v23;
  *(_QWORD *)(v13 - 232) = &v35;
  *(_QWORD *)(v13 - 144) = v22;
  MEMORY[0x1E0C80A78](v23);
  v34[2] = v5;
  v34[3] = v7;
  v34[4] = *(_QWORD *)(v13 - 184);
  v34[5] = v9;
  v24 = *(_QWORD *)(v13 - 192);
  v34[6] = v12;
  v34[7] = v24;
  v34[8] = *(_QWORD *)(v13 - 168);
  v26 = type metadata accessor for CROrderedSetElement(255, v5, v9, v25);
  v28 = type metadata accessor for CRSequence(0, v26, (uint64_t)&off_1E7758E40, v27);
  swift_retain();
  MEMORY[0x1C3B7DF54](&unk_1BE1C7C70, v26);
  v29 = sub_1BE0C671C((uint64_t (*)(char *))sub_1BDFB6520, (uint64_t)v34, v28);
  v31 = v30;
  result = swift_release();
  if ((v31 & 1) == 0)
  {
    CROrderedDictionary.move(from:to:)(v29, *(_QWORD *)(v13 - 248));
    v33 = *(_QWORD *)(v13 - 208);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 16))(v33, *(_QWORD *)(v13 - 176), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v33, 0, 1, v7);
    sub_1BDF2B938();
  }
  return result;
}

uint64_t sub_1BDFADD64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t result;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t (*v76)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X8>);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[4];
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v91 = a8;
  v87 = a7;
  v88 = a6;
  v90 = a5;
  v93 = a2;
  v79 = a9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  MEMORY[0x1E0C80A78](v12);
  v83 = (uint64_t)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for Proto_Sequence(0);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v80 = (uint64_t)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Proto_Set(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocObject();
  v92 = v22;
  *(_QWORD *)(v22 + 16) = 0;
  v23 = v22 + 16;
  v24 = *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20);
  v89 = a1;
  v85 = v24;
  v25 = *(_QWORD *)(a1 + v24)
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1BDD86DEC(v25, (uint64_t)v17, qword_1ED6F2EF8);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  v84 = (_QWORD *)v23;
  if (v26 == 1)
  {
    sub_1BE1B20E4();
    v27 = *(int *)(v18 + 20);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)&v21[v27] = qword_1ED6F2800;
    swift_retain();
    sub_1BDD86E30((uint64_t)v17, qword_1ED6F2EF8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v17, (uint64_t)v21, type metadata accessor for Proto_Set);
  }
  v28 = v92;
  v29 = v93;
  v30 = v88;
  v31 = v91;
  v32 = v87;
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = a3;
  v33[3] = a4;
  v34 = a3;
  v35 = a4;
  v36 = v90;
  v33[4] = v90;
  v33[5] = v30;
  v33[6] = v32;
  v33[7] = v31;
  v33[8] = v28;
  swift_retain();
  swift_retain();
  v37 = v36;
  v38 = v35;
  v39 = v34;
  v40 = (uint64_t)v33;
  v41 = v86;
  sub_1BDDA92A8((uint64_t)v21, v29, (uint64_t)sub_1BDFB6E08, v40, v34, v38, v37, v30, (uint64_t)v94, v32, v31);
  if (v41)
  {
    swift_release();
    sub_1BDD9C3E0(v89, type metadata accessor for Proto_OrderedSet);
    return swift_release();
  }
  v42 = v30;
  v43 = v94[0];
  v44 = v84;
  result = swift_beginAccess();
  if (*v44)
  {
    v94[0] = *v44;
    v46 = (_QWORD *)(*(_QWORD *)(v89 + v85)
                   + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
    swift_beginAccess();
    *(_QWORD *)&v95 = *v46;
    type metadata accessor for CRDictionaryElement(255, v38, (uint64_t)v32, v47);
    swift_retain();
    swift_getTupleTypeMetadata2();
    v48 = sub_1BE1B2A5C();
    v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F118);
    v50 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v48);
    v88 = v43;
    v51 = v50;
    v52 = sub_1BDFB6E58();
    v53 = sub_1BE1B3668();
    v87 = &v78;
    v95 = v96;
    v54 = MEMORY[0x1E0C80A78](v53);
    *(&v78 - 8) = v39;
    *(&v78 - 7) = v38;
    v55 = v91;
    *(&v78 - 6) = v90;
    *(&v78 - 5) = v42;
    *(&v78 - 4) = (uint64_t)v32;
    *(&v78 - 3) = (uint64_t)v55;
    MEMORY[0x1E0C80A78](v54);
    *(&v78 - 8) = v39;
    *(&v78 - 7) = v38;
    *(&v78 - 6) = v56;
    *(&v78 - 5) = v42;
    *(&v78 - 4) = (uint64_t)v32;
    *(&v78 - 3) = v57;
    v76 = sub_1BDFB6EA4;
    v77 = v58;
    v94[0] = v48;
    v94[1] = v49;
    v94[2] = v51;
    v94[3] = v52;
    v59 = sub_1BE1B30B0();
    v61 = type metadata accessor for CROrderedSetElement(0, v39, v42, v60);
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    v63 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEC3A0], v59);
    v64 = sub_1BDF02134((void (*)(char *, char *))sub_1BDFB6ED4, (uint64_t)(&v78 - 10), v59, v61, v62, v63, MEMORY[0x1E0DEDB38], (uint64_t)&v97);
    v65 = v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v66 = v89;
    v67 = *(_QWORD *)(v89 + v85)
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    v68 = v83;
    sub_1BDD86DEC(v67, v83, &qword_1ED6F2E98);
    v69 = v82;
    v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v68, 1, v82);
    v71 = v93;
    if (v70 == 1)
    {
      v72 = v80;
      sub_1BE1B20E4();
      v73 = *(int *)(v69 + 20);
      if (qword_1ED6EF5C0 != -1)
        swift_once();
      *(_QWORD *)(v72 + v73) = qword_1ED6EF5B0;
      swift_retain();
      sub_1BDD86E30(v68, &qword_1ED6F2E98);
    }
    else
    {
      v72 = v80;
      sub_1BDDA2E8C(v68, v80, type metadata accessor for Proto_Sequence);
    }
    sub_1BE0C714C(v72, v64, v71, v61, (uint64_t)&off_1E7758E40, (uint64_t *)&v96);
    sub_1BDD9C3E0(v66, type metadata accessor for Proto_OrderedSet);
    v74 = v96;
    swift_retain();
    swift_release();
    v75 = v79;
    *v79 = v74;
    v75[1] = v65;
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDFAE4C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v60 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v52 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v51 = (char *)v43 - v9;
  v50 = type metadata accessor for Proto_Set(0);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v58 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  v12 = MEMORY[0x1E0C80A78](v11);
  v57 = (uint64_t)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v55 = (uint64_t)v43 - v14;
  v15 = type metadata accessor for Proto_Sequence(0);
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v3;
  v56 = v3[1];
  sub_1BE1B20E4();
  v20 = *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)(a3 + v20) = qword_1ED6EF618;
  v61 = v18;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = type metadata accessor for CROrderedSetElement(255, v21, v22, v19);
  v25 = type metadata accessor for CRSequence(0, v23, (uint64_t)&off_1E7758E40, v24);
  swift_retain();
  swift_retain();
  v26 = v59;
  sub_1BE0C732C(v60, (uint64_t)v17);
  swift_release();
  if (!v26)
  {
    v44 = a2;
    v45 = v21;
    v59 = v22;
    v46 = v25;
    v47 = v18;
    v48 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_OrderedSet._StorageClass(0);
      swift_allocObject();
      v28 = swift_retain();
      *(_QWORD *)(a3 + v20) = sub_1BE13A9C4(v28);
      swift_release();
    }
    v43[1] = a3;
    v29 = *(_QWORD *)(a3 + v20);
    v30 = v55;
    sub_1BDDA2E8C((uint64_t)v17, v55, type metadata accessor for Proto_Sequence);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v30, 0, 1, v54);
    v31 = v30;
    v32 = v57;
    sub_1BDDA2EF0(v31, v57, &qword_1ED6F2E98);
    v33 = v29
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v32, v33, &qword_1ED6F2E98);
    swift_endAccess();
    swift_release();
    v73 = v56;
    swift_retain();
    v57 = sub_1BDDA9128();
    v67 = v47;
    v43[0] = v20;
    v56 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRSequence<A>, v46);
    sub_1BE1B28B8();
    v67 = v61;
    v34 = (_QWORD *)swift_allocObject();
    v35 = v44;
    v37 = *(_QWORD *)(v44 + 24);
    v36 = *(_QWORD *)(v44 + 32);
    v38 = v45;
    v34[2] = v45;
    v34[3] = v37;
    v39 = v59;
    v34[4] = v36;
    v34[5] = v39;
    v40 = *(_QWORD *)(v35 + 48);
    v41 = *(_QWORD *)(v35 + 56);
    v34[6] = v40;
    v34[7] = v41;
    v42 = sub_1BE1B3080();
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEC330], v42);
    sub_1BE1B3278();
    swift_release();
    swift_release();
    v67 = v70;
    v68 = v71;
    v69 = v72;
    v61 = v38;
    v62 = v37;
    v53 = v37;
    v54 = v40;
    v55 = v36;
    v63 = v36;
    v64 = v59;
    v65 = v40;
    v66 = v41;
    type metadata accessor for CRDictionary();
  }
  return sub_1BDD9C3E0(a3, type metadata accessor for Proto_OrderedSet);
}

void CROrderedDictionary.init()()
{
  CRDictionary.init()();
}

void sub_1BDFAEC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v7 = v8;
  type metadata accessor for CROrderedSetElement(0, v5, v4, a4);
  CRSequence.init()(&v8);
  *v6 = v8;
  v6[1] = v7;
}

Swift::Void __swiftcall CROrderedDictionary.remove(at:)(Swift::Int at)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v3 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](at);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v8 + 40);
  v10 = type metadata accessor for CROrderedSetElement(0, v4, v20, v9);
  v18 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - v11;
  v16 = *(_QWORD *)(v3 + 24);
  v21 = sub_1BE1B2EE8();
  v19 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v22 = *v2;
  v17 = type metadata accessor for CRSequence(0, v10, (uint64_t)&off_1E7758E40, v13);
  CRSequence.subscript.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v10);
  v14 = *(_QWORD *)(v3 + 32);
  v22 = v4;
  v23 = v16;
  v24 = v14;
  v25 = v20;
  v26 = *(_OWORD *)(v3 + 48);
  type metadata accessor for CRDictionary();
}

void sub_1BDFAEE14()
{
  CRDictionary.removeValue(forKey:)();
}

void sub_1BDFAEE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 152) + 8))(v4, *(_QWORD *)(v5 - 136));
  CRSequence.remove(at:)(v3);
}

void CROrderedDictionary.merge(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t TupleTypeMetadata2;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[4];
  __int128 v98;
  uint64_t v99;

  v4 = sub_1BE1B1F64();
  v95 = *(_QWORD *)(v4 - 8);
  v96 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v93 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v94 = (char *)v57 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52EEF8);
  MEMORY[0x1E0C80A78](v8);
  v57[3] = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52EF00);
  v10 = MEMORY[0x1E0C80A78](v59);
  v57[2] = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)v57 - v12;
  v66 = type metadata accessor for Replica();
  v13 = MEMORY[0x1E0C80A78](v66);
  v62 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v61 = (char *)v57 - v15;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF740);
  MEMORY[0x1E0C80A78](v79);
  v84 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a2 + 16);
  v88 = *(_QWORD *)(a2 + 40);
  v18 = a2;
  v19 = v17;
  v85 = v17;
  v21 = type metadata accessor for CROrderedSetElement(255, v17, v88, v20);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v82 = sub_1BE1B2EE8();
  v81 = *(_QWORD *)(v82 - 8);
  v22 = MEMORY[0x1E0C80A78](v82);
  v80 = (char *)v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v86 = (char *)v57 - v24;
  v58 = sub_1BE1B206C();
  v57[1] = *(_QWORD *)(v58 - 8);
  v25 = MEMORY[0x1E0C80A78](v58);
  v78 = (char *)v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v25);
  v64 = (char *)v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF738);
  v29 = MEMORY[0x1E0C80A78](v28);
  v77 = (char *)v57 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v32 = MEMORY[0x1E0C80A78](v31);
  v33 = MEMORY[0x1E0C80A78](v32);
  v67 = (char *)v57 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v63 = (char *)v57 - v36;
  MEMORY[0x1E0C80A78](v35);
  v71 = (char *)v57 - v37;
  v90 = type metadata accessor for Timestamp(0);
  v87 = *(_QWORD *)(v90 - 8);
  v38 = MEMORY[0x1E0C80A78](v90);
  v69 = (char *)v57 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v38);
  v68 = (char *)v57 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v72 = (char *)v57 - v43;
  MEMORY[0x1E0C80A78](v42);
  v70 = (char *)v57 - v44;
  v45 = *(_QWORD *)(v18 + 24);
  v75 = sub_1BE1B2EE8();
  v74 = *(_QWORD *)(v75 - 8);
  v46 = MEMORY[0x1E0C80A78](v75);
  v73 = (char *)v57 - v47;
  v92 = *(_QWORD *)(v21 - 8);
  v48 = MEMORY[0x1E0C80A78](v46);
  v91 = (char *)v57 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0C80A78](v48);
  v57[0] = v51;
  MEMORY[0x1E0C80A78](v50);
  v89 = (char *)v57 - v52;
  v53 = a1[1];
  v97[0] = *a1;
  v55 = type metadata accessor for CRSequence(0, v21, (uint64_t)&off_1E7758E40, v54);
  CRSequence.merge(_:)(v97, v55);
  v99 = v53;
  v56 = *(_QWORD *)(v18 + 32);
  v97[0] = v85;
  v97[1] = v45;
  v76 = v45;
  v97[2] = v56;
  v97[3] = v88;
  v98 = *(_OWORD *)(v18 + 48);
  type metadata accessor for CRDictionary();
}

void CROrderedDictionary.visitReferences(_:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDFB00C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return CRDictionary.visitReferences(_:)(v4, a1, a3, a4);
}

id CROrderedDictionary.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for CROrderedSetElement(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a4);
  type metadata accessor for CRSequence(0, v4, (uint64_t)&off_1E7758E40, v5);
  return CRSequence.count.getter();
}

uint64_t CROrderedDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v3 + 8);
  v6 = type metadata accessor for CROrderedSetElement(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a2);
  type metadata accessor for CRSequence(0, v6, (uint64_t)&off_1E7758E40, v7);
  *a3 = sub_1BE0C6404();
  a3[1] = 0;
  a3[2] = v5;
  return swift_retain();
}

uint64_t CROrderedDictionary.Iterator.next()@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[4];
  __int128 v51;
  uint64_t v52;

  v4 = a1[3];
  v47 = a2;
  v48 = v4;
  v5 = sub_1BE1B2EE8();
  v6 = MEMORY[0x1E0C80A78](v5);
  v45 = (char *)&v39 - v7;
  v8 = a1[2];
  v44 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v43 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v39 - v12;
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - v13;
  v15 = a1[5];
  v41 = a1;
  v42 = v15;
  v17 = type metadata accessor for CROrderedSetElement(255, v8, v15, v16);
  v18 = sub_1BE1B2EE8();
  v49 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v39 - v22;
  v25 = *v2;
  v24 = v2[1];
  v46 = v2;
  if (v24 == MEMORY[0x1C3B7C928](v25, v17))
  {
    v26 = *(_QWORD *)(v17 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v23, 1, 1, v17);
    v27 = v48;
    goto LABEL_7;
  }
  v28 = sub_1BE1B29FC();
  sub_1BE1B29A8();
  if ((v28 & 1) != 0)
  {
    v26 = *(_QWORD *)(v17 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v23, v25+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v24, v17);
  }
  else
  {
    v38 = sub_1BE1B30BC();
    v26 = *(_QWORD *)(v17 - 8);
    if (*(_QWORD *)(v26 + 64) != 8)
      goto LABEL_12;
    v50[0] = v38;
    (*(void (**)(char *, _QWORD *, uint64_t))(v26 + 16))(v23, v50, v17);
    swift_unknownObjectRelease();
  }
  v27 = v48;
  if (__OFADD__(v24, 1))
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x1BDFB060CLL);
  }
  v46[1] = v24 + 1;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v17);
LABEL_7:
  v29 = v49;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v21, v23, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v17) != 1)
  {
    v39 = v23;
    v48 = v18;
    v32 = v14;
    v33 = v44;
    v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
    v35 = v40;
    v34(v40, v21, v8);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v17);
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v32, v35, v8);
    v34(v47, v32, v8);
    v34(v43, v32, v8);
    v52 = v46[2];
    v36 = v41[4];
    v50[0] = v8;
    v50[1] = v27;
    v50[2] = v36;
    v50[3] = v42;
    v51 = *((_OWORD *)v41 + 3);
    type metadata accessor for CRDictionary();
  }
  v30 = *(void (**)(char *, uint64_t))(v29 + 8);
  v30(v21, v18);
  v30(v23, v18);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v47, 1, 1, TupleTypeMetadata2);
}

Swift::Void __swiftcall CROrderedDictionary.move(from:to:)(Swift::Int from, Swift::Int to)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v4 = v2;
  v7 = *(_QWORD *)(v2 + 16);
  v40 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](from);
  v41 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Timestamp(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v34 - v13;
  v39 = *(_QWORD *)(v4 + 40);
  v16 = type metadata accessor for CROrderedSetElement(0, v7, v39, v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v23 = (char *)v34 - v22;
  if (from == to)
    return;
  if (__OFSUB__(to, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (to - 1 == from)
    return;
  v34[0] = to - 1;
  v35 = v12;
  v37 = v21;
  v42 = *v3;
  v24 = type metadata accessor for CRSequence(0, v16, (uint64_t)&off_1E7758E40, v20);
  v38 = v9;
  CRSequence.subscript.getter();
  CRSequence.remove(at:)(from);
  v34[1] = v3;
  v42 = *v3;
  v36 = v24;
  sub_1BE0C65BC((uint64_t)v14);
  *(_QWORD *)&v14[*(int *)(type metadata accessor for Replica() + 20)] = 0;
  v25 = *(int *)(v38 + 20);
  v26 = *(_QWORD *)&v23[*(int *)(v16 + 36) + v25];
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (from >= to)
    v29 = to;
  else
    v29 = v34[0];
  *(_QWORD *)&v14[v25] = v28;
  v30 = (uint64_t)v41;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v41, v23, v7);
  v31 = (uint64_t)v35;
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v35, type metadata accessor for Timestamp);
  sub_1BE161D24(v30, v31, v7, v39, (uint64_t)v19);
  CRSequence.insert(_:at:)((uint64_t)v19, v29, v36, v32);
  v33 = *(void (**)(char *, uint64_t))(v37 + 8);
  v33(v19, v16);
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Timestamp);
  v33(v23, v16);
}

Swift::Bool __swiftcall CROrderedDictionary.needToFinalizeTimestamps()()
{
  type metadata accessor for CRDictionary();
}

BOOL sub_1BDFB08F4()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (CRDictionary.needToFinalizeTimestamps()())
  {
    return 1;
  }
  else
  {
    v2 = type metadata accessor for CROrderedSetElement(255, v6, v5, v0);
    type metadata accessor for CRSequence(0, v2, (uint64_t)&off_1E7758E40, v3);
    return CRSequence.needToFinalizeTimestamps()();
  }
}

void CROrderedDictionary.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for CROrderedSetElement(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40), a4);
  v7 = type metadata accessor for CRSequence(0, v5, (uint64_t)&off_1E7758E40, v6);
  CRSequence.finalizeTimestamps(_:)(a1, v7);
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDFB09D4()
{
  return CRDictionary.finalizeTimestamps(_:)();
}

void CROrderedDictionary.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v20[1] = a3;
  v25 = *(_QWORD *)(a2 + 24);
  v6 = sub_1BE1B2EE8();
  v7 = MEMORY[0x1E0C80A78](v6);
  v24 = (char *)v20 - v8;
  v9 = *(_QWORD *)(a2 + 16);
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v7);
  v21 = *(_QWORD *)(a2 + 40);
  v22 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CROrderedSetElement(0, v9, v21, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v20 - v14;
  v16 = *v3;
  v17 = v3[1];
  v26 = *v3;
  type metadata accessor for CRSequence(0, v12, (uint64_t)&off_1E7758E40, v18);
  if ((uint64_t)CRSequence.count.getter() > a1)
  {
    v26 = v16;
    swift_retain();
    CRSequence.subscript.getter();
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v22, v15, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v31 = v17;
    v19 = *(_QWORD *)(a2 + 32);
    v26 = v9;
    v27 = v25;
    v28 = v19;
    v29 = v21;
    v30 = *(_OWORD *)(a2 + 48);
    type metadata accessor for CRDictionary();
  }
  __break(1u);
  JUMPOUT(0x1BDFB0C00);
}

uint64_t CROrderedDictionary.remove(atOffsets:)(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void (*v34)(_QWORD *, _QWORD);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD);
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[2];
  char *v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  _QWORD v84[4];
  __int128 v85;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF768);
  MEMORY[0x1E0C80A78](v6);
  v60 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF760);
  v8 = MEMORY[0x1E0C80A78](v61);
  v59 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v58 - v11;
  v73 = *(_QWORD *)(a2[2] - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = a2[5];
  v74 = v15;
  v71 = v14;
  v72 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CROrderedSetElement(0, v15, v14, v16);
  v70 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v69 = (char *)v58 - v18;
  v75 = a2;
  v68 = a2[3];
  v67 = sub_1BE1B2EE8();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v65 = (char *)v58 - v19;
  v81 = sub_1BE1B206C();
  v64 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v63 = (char *)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1BE1B1F64();
  v21 = *(_QWORD *)(v77 - 8);
  v22 = MEMORY[0x1E0C80A78](v77);
  v79 = (char *)v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v78 = (char *)v58 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26A8);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58[1] = a1;
  sub_1BE1B1F94();
  v82 = &v27[*(int *)(v25 + 36)];
  v83 = v27;
  v80 = v21;
  v76 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v62 = v3 + 1;
  v28 = v81;
  v29 = v77;
  v30 = v78;
  v76(v78, v82, v77);
  sub_1BDD8422C(qword_1ED6EF220, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
  v31 = v79;
  sub_1BE1B2C90();
  sub_1BDD8422C(&qword_1ED6EF208, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
  LOBYTE(a1) = sub_1BE1B2798();
  v32 = *(void (**)(char *, uint64_t))(v80 + 8);
  v32(v31, v29);
  v32(v30, v29);
  if ((a1 & 1) == 0)
  {
    v33 = (uint64_t)v83;
    v34 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
    v34(v84, 0);
    v35 = v64;
    v36 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v33, v28);
    sub_1BE1B2C9C();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v28);
    v84[0] = *v3;
    type metadata accessor for CRSequence(0, v17, (uint64_t)&off_1E7758E40, v37);
    v38 = v69;
    CRSequence.subscript.getter();
    v39 = v74;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v72, v38, v74);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v38, v17);
    v40 = v75[4];
    v84[0] = v39;
    v84[1] = v68;
    v84[2] = v40;
    v84[3] = v71;
    v85 = *((_OWORD *)v75 + 3);
    type metadata accessor for CRDictionary();
  }
  sub_1BDD86E30((uint64_t)v83, &qword_1ED6F26A8);
  v41 = v60;
  sub_1BE1B2054();
  v42 = sub_1BE1B203C();
  v43 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
  v44 = *(_QWORD *)(v42 - 8);
  v45 = (uint64_t)v59;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v59, v41, v42);
  sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, v43, MEMORY[0x1E0CB1378]);
  sub_1BE1B2C90();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v42);
  v46 = v61;
  *(_QWORD *)(v45 + *(int *)(v61 + 36)) = v84[0];
  sub_1BDDA2EF0(v45, (uint64_t)v12, &qword_1ED6EF760);
  v47 = &v12[*(int *)(v46 + 36)];
  v48 = *(_QWORD *)v47;
  sub_1BE1B2C60();
  if (v48 != v84[0])
  {
    sub_1BDD8422C(qword_1EF52D9E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1368]);
    do
    {
      sub_1BE1B26F0();
      v49 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
      v51 = *v50;
      v52 = v50[1];
      v49(v84, 0);
      v54 = type metadata accessor for CRSequence(0, v17, (uint64_t)&off_1E7758E40, v53);
      CRSequence.removeSubrange(_:)(v51, v52, v54, v55);
      v56 = *(_QWORD *)v47;
      sub_1BE1B2C60();
    }
    while (v56 != v84[0]);
  }
  return sub_1BDD86E30((uint64_t)v12, &qword_1ED6EF760);
}

uint64_t sub_1BDFB1290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t TupleTypeMetadata2;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  __int128 v101;

  v77 = a4;
  v76 = a3;
  v84 = a1;
  v15 = *(_QWORD *)(a5 + 24);
  v82 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](a1);
  v81 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v19);
  v80 = (char *)&v67 - v20;
  v75 = a8;
  v21 = *(_QWORD **)(a8 + 8);
  v71 = a9;
  v22 = *(_QWORD *)(a9 + 8);
  v97 = a6;
  v98 = a7;
  v99 = v21;
  v100 = v22;
  v72 = sub_1BE1B30B0();
  MEMORY[0x1E0C80A78](v72);
  v70 = (char *)&v67 - v23;
  v78 = a6;
  v97 = a6;
  v98 = a7;
  v83 = a7;
  v74 = v21;
  v99 = v21;
  v100 = v22;
  v73 = v22;
  v94 = sub_1BE1B30A4();
  v79 = *(_QWORD *)(v94 - 8);
  v24 = MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v67 - v25;
  v26 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = a5;
  v96 = *(_QWORD *)(a5 + 40);
  v91 = (char *)type metadata accessor for CROrderedSetElement(0, v18, v96, v29);
  v30 = *((_QWORD *)v91 - 1);
  MEMORY[0x1E0C80A78](v91);
  v32 = (char *)&v67 - v31;
  v92 = v15;
  v33 = a2;
  v34 = sub_1BE1B2EE8();
  v35 = *(_QWORD *)(v34 - 8);
  result = MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v67 - v38;
  v95 = result;
  if (v84 == v33)
  {
    v69 = v33;
    v88 = v35;
    v43 = v91;
    v85 = type metadata accessor for CRSequence(0, (uint64_t)v91, (uint64_t)&off_1E7758E40, v37);
    v44 = v9;
    v48 = sub_1BE0C6554(v85, v45, v46, v47);
    v68 = &v67;
    MEMORY[0x1E0C80A78](v48);
    v49 = v92;
    *(&v67 - 12) = v18;
    *(&v67 - 11) = v49;
    v50 = v78;
    v51 = v83;
    *(&v67 - 10) = v78;
    *(&v67 - 9) = v51;
    v52 = v89;
    v87 = *(_QWORD **)(v89 + 32);
    v53 = v96;
    *(&v67 - 8) = (uint64_t)v87;
    *(&v67 - 7) = v53;
    v54 = *(_QWORD *)(v52 + 48);
    v55 = *(_QWORD *)(v52 + 56);
    v89 = v54;
    *(&v67 - 6) = v54;
    *(&v67 - 5) = v55;
    v86 = v55;
    v56 = v75;
    v57 = v71;
    *(&v67 - 4) = v75;
    *(&v67 - 3) = v57;
    *(&v67 - 2) = (uint64_t)v9;
    v97 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDFB6D30, (uint64_t)(&v67 - 14), v50, v43, MEMORY[0x1E0DEDCE8], v56, MEMORY[0x1E0DEDD18], v58);
    v59 = sub_1BE1B2A5C();
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50], v59);
    v60 = v84;
    v84 = (uint64_t)v44;
    CRSequence.replaceSubrange<A>(_:with:)(v60, v69, (uint64_t)&v97, v85, v59);
    swift_bridgeObjectRelease();
    sub_1BE1B3668();
    sub_1BE1B308C();
    v61 = v80;
    sub_1BE1B3098();
    v62 = TupleTypeMetadata2;
    v91 = *(char **)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
    v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91)(v61, 1, TupleTypeMetadata2);
    v64 = v82;
    v65 = v81;
    v66 = v92;
    if (v63 != 1)
    {
      v85 = *(_QWORD *)(v82 + 32);
      ((void (*)(char *, char *, uint64_t))v85)(v81, &v61[*(int *)(v62 + 48)], v92);
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v28, v61, v18);
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v39, v65, v66);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v39, 0, 1, v66);
      v97 = v18;
      v98 = v66;
      v99 = v87;
      v100 = v96;
      *(_QWORD *)&v101 = v89;
      *((_QWORD *)&v101 + 1) = v86;
      type metadata accessor for CRDictionary();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v93, v94);
  }
  else
  {
    v68 = (uint64_t *)v32;
    if (v33 < v84)
    {
      __break(1u);
    }
    else if (v84 < v33)
    {
      v87 = v9 + 1;
      v40 = type metadata accessor for CRSequence(0, (uint64_t)v91, (uint64_t)&off_1E7758E40, v37);
      v85 = v30;
      v86 = v40;
      v41 = v68;
      v97 = *v9;
      CRSequence.subscript.getter();
      (*(void (**)(char *, uint64_t *, uint64_t))(v26 + 16))(v28, v41, v18);
      (*(void (**)(uint64_t *, char *))(v85 + 8))(v41, v91);
      v42 = *(_QWORD **)(v89 + 32);
      v97 = v18;
      v98 = v92;
      v99 = v42;
      v100 = v96;
      v101 = *(_OWORD *)(v89 + 48);
      type metadata accessor for CRDictionary();
    }
    __break(1u);
  }
  return result;
}

_QWORD *CROrderedDictionary.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[4];

  v5 = a1[1];
  v6 = *v4;
  v7 = v4[1];
  v9[2] = *a1;
  v9[3] = v5;
  v9[0] = v6;
  v9[1] = v7;
  return sub_1BDFB3418(v9, a2, a3, a4);
}

uint64_t CROrderedDictionary.hasDelta(from:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = a1[1];
  v6 = *(_QWORD *)(v4 + 8);
  v10 = *a1;
  v7 = type metadata accessor for CROrderedSetElement(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40), a4);
  type metadata accessor for CRSequence(0, v7, (uint64_t)&off_1E7758E40, v8);
  if (!sub_1BE0C6C7C(&v10) || v6 != v5)
  {
    v10 = v6;
    type metadata accessor for CRDictionary();
  }
  return 0;
}

void CROrderedDictionary.actionUndoingDifference(from:)()
{
  type metadata accessor for CRDictionary();
}

void sub_1BDFB1AC4(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[16];

  CRDictionary.actionUndoingDifference(from:)((_QWORD *)(v4 - 64), a1, v15);
  v5 = v15[0];
  v6 = v15[1];
  *(_QWORD *)(v4 - 64) = v2;
  *(_QWORD *)(v4 - 56) = v3;
  v8 = type metadata accessor for CROrderedSetElement(255, v14, v13, v7);
  type metadata accessor for CRSequence(0, v8, (uint64_t)&off_1E7758E40, v9);
  CRSequence.actionUndoingDifference(from:)((_QWORD *)(v4 - 64), v15);
  v10 = v15[0];
  if (v5 | v15[0])
    v11 = v5;
  else
    v11 = 1;
  if (v5 | v15[0])
    v12 = v6;
  else
    v12 = 0;
  if (!(v5 | v15[0]))
    v10 = 0;
  *v1 = v11;
  v1[1] = v12;
  v1[2] = v10;
}

void CROrderedDictionary.apply(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  if (*a1 != 1)
  {
    v4 = a1[1];
    v13 = (id)a1[2];
    v5 = v13;
    sub_1BDDC8E74(v2);
    v6 = *(void **)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 40);
    v9 = type metadata accessor for CROrderedSetElement(255, (uint64_t)v6, v7, v8);
    v11 = type metadata accessor for CRSequence(0, v9, (uint64_t)&off_1E7758E40, v10);
    v12 = v13;
    if ((sub_1BE0C7084(&v13, v11) & 1) != 0)
    {
      v17 = v2;
      v18 = v4;
      sub_1BDDC8E74(v2);
      v13 = v6;
      v14 = *(_OWORD *)(a2 + 24);
      v15 = v7;
      v16 = *(_OWORD *)(a2 + 48);
      type metadata accessor for CRDictionary();
    }
    sub_1BDFB6538(v2, v4, v5);
  }
}

BOOL CROrderedDictionary.hasEncodedData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16) || *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) != 0;
}

void CROrderedDictionary.copy(renamingReferences:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[23];

  v15[6] = a1;
  v15[0] = a3;
  v15[13] = *(_QWORD *)(a2[2] - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v15[5] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[9] = *(_QWORD *)(*(_QWORD *)(v7 + 24) - 8);
  MEMORY[0x1E0C80A78](v5);
  v15[4] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v15[8] = (char *)v15 - v10;
  v11 = sub_1BE1B2EE8();
  v12 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v12);
  v15[3] = *(_QWORD *)(v3 + 8);
  v13 = a2[4];
  v14 = a2[7];
  v15[11] = a2[5];
  v15[12] = v13;
  v15[10] = v14;
  CROrderedDictionary.init()();
}

void sub_1BDFB1E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v11 - 232) = v9;
  if (*(_QWORD *)(v11 - 240))
  {
    v12 = *(_QWORD *)(v11 - 264);
    *(_QWORD *)(v11 - 176) = v5;
    *(_QWORD *)(v11 - 168) = v12;
    *(_QWORD *)(v11 - 264) = v6;
    CROrderedDictionary.makeIterator()(v6, a4, (uint64_t *)(v11 - 128));
    v13 = *(_QWORD *)(v11 - 192);
    *(_QWORD *)(v11 - 272) = v8;
    *(_QWORD *)(v11 - 280) = v10;
    *(_QWORD *)(v11 - 176) = v7;
    *(_QWORD *)(v11 - 168) = v4;
    v14 = *(_QWORD *)(v11 - 200);
    *(_QWORD *)(v11 - 160) = v13;
    *(_QWORD *)(v11 - 152) = v14;
    v15 = *(_QWORD *)(v11 - 208);
    *(_QWORD *)(v11 - 144) = v9;
    *(_QWORD *)(v11 - 136) = v15;
    type metadata accessor for CROrderedDictionary.Iterator();
  }
  v16 = *(_QWORD *)(v11 - 264);
  *(_QWORD *)(v11 - 176) = v5;
  *(_QWORD *)(v11 - 168) = v16;
  CROrderedDictionary.makeIterator()(v6, a4, (uint64_t *)(v11 - 128));
  *(_QWORD *)(v11 - 176) = v7;
  *(_QWORD *)(v11 - 168) = v4;
  v17 = *(_QWORD *)(v11 - 200);
  *(_QWORD *)(v11 - 160) = *(_QWORD *)(v11 - 192);
  *(_QWORD *)(v11 - 152) = v17;
  v18 = *(_QWORD *)(v11 - 208);
  *(_QWORD *)(v11 - 144) = v9;
  *(_QWORD *)(v11 - 136) = v18;
  type metadata accessor for CROrderedDictionary.Iterator();
}

uint64_t sub_1BDFB2038(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;

  CROrderedDictionary.Iterator.next()(a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v6, 1, v4) != 1)
  {
    v8 = *(int *)(v4 + 48);
    v9 = &v6[v8];
    v10 = *(_QWORD *)(v7 - 224);
    v11 = v10 + v8;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 184) + 32))(v10, v6, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 216) + 32))(v11, v9, v1);
    CROrderedDictionary.append(value:forKey:)(v11, v10, v5);
  }
  swift_release();
  result = swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v7 - 96);
  v14 = *(_QWORD **)(v7 - 288);
  *v14 = *(_QWORD *)(v7 - 104);
  v14[1] = v13;
  return result;
}

void sub_1BDFB20B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  JUMPOUT(0x1BDFB2014);
}

void CROrderedDictionary.init(_:)()
{
  CROrderedDictionary.init()();
}

void sub_1BDFB2148()
{
  void *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v2;
  v1[1] = v3;
}

uint64_t sub_1BDFB2164@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v10 = type metadata accessor for Timestamp(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, a1, a3);
  v21[1] = *a2;
  v18 = type metadata accessor for CROrderedSetElement(255, a3, a4, v17);
  type metadata accessor for CRSequence(0, v18, (uint64_t)&off_1E7758E40, v19);
  sub_1BE0C65BC((uint64_t)v13);
  *(_QWORD *)&v13[*(int *)(type metadata accessor for Replica() + 20)] = 0;
  *(_QWORD *)&v13[*(int *)(v10 + 20)] = 0;
  return sub_1BE161D24((uint64_t)v15, (uint64_t)v13, a3, a4, a5);
}

void CROrderedDictionary.removeValue(forKey:)()
{
  uint64_t v0;

  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for CRDictionary();
}

void sub_1BDFB2330()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 152) = v0;
  CRDictionary.removeValue(forKey:)();
}

void sub_1BDFB2344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  char v16;
  _QWORD v17[22];

  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v5, 1, v1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v4);
  if (v9 != 1)
  {
    *(_QWORD *)(v8 - 128) = **(_QWORD **)(v8 - 144);
    MEMORY[0x1E0C80A78](v10);
    v17[2] = v2;
    v17[3] = v1;
    v17[4] = v7;
    v17[5] = v3;
    v17[6] = *(_QWORD *)(v8 - 160);
    v17[7] = v6;
    v17[8] = *(_QWORD *)(v8 - 152);
    v12 = type metadata accessor for CROrderedSetElement(255, v2, v3, v11);
    v14 = type metadata accessor for CRSequence(0, v12, (uint64_t)&off_1E7758E40, v13);
    swift_retain();
    MEMORY[0x1C3B7DF54](&unk_1BE1C7C70, v12);
    v15 = sub_1BE0C671C((uint64_t (*)(char *))sub_1BDFB6520, (uint64_t)v17, v14);
    LOBYTE(v12) = v16;
    swift_release();
    if ((v12 & 1) == 0)
      CRSequence.remove(at:)(v15);
  }
}

void CROrderedDictionary.contains(_:)()
{
  uint64_t v0;

  v0 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for CRDictionary();
}

BOOL sub_1BDFB24F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;

  CRDictionary.subscript.getter(v4, a4, v7);
  v9 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v7, 1, v5) != 1;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v6);
  return v9;
}

uint64_t CROrderedDictionary.map<A>(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;

  v35 = a1;
  v36 = a2;
  v41 = a3[3];
  v5 = sub_1BE1B2EE8();
  v6 = MEMORY[0x1E0C80A78](v5);
  v7 = a3[2];
  v42 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v34 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = a3[5];
  v29 = type metadata accessor for CROrderedSetElement(255, v7, v39, v12);
  v13 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v29 - v14;
  v17 = *v3;
  v16 = v3[1];
  v50 = sub_1BE1B2588();
  v43 = v17;
  v44 = v16;
  v38 = v16;
  v40 = a3;
  CROrderedDictionary.count.getter((uint64_t)a3, v18, v19, v20);
  v33 = sub_1BE1B2A5C();
  sub_1BE1B29C0();
  v43 = v17;
  v21 = v29;
  type metadata accessor for CRSequence(0, v29, (uint64_t)&off_1E7758E40, v22);
  CRSequence.makeIterator()(v49);
  v32 = type metadata accessor for CRSequence.Iterator(0, v21, (uint64_t)&off_1E7758E40, v23);
  CRSequence.Iterator.next()(v32, (uint64_t)v15);
  v24 = v21;
  v37 = *(_QWORD *)(v21 - 8);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
  if (v31(v15, 1, v21) != 1)
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    v25 = v41;
    v30(v10, v15, v7);
    v26 = v38;
    swift_retain();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v24);
    v48 = v26;
    v27 = v40[4];
    v43 = v7;
    v44 = v25;
    v45 = v27;
    v46 = v39;
    v47 = *((_OWORD *)v40 + 3);
    type metadata accessor for CRDictionary();
  }
  swift_bridgeObjectRelease();
  return v50;
}

void CROrderedDictionary._map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[10];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[6];

  v22[7] = a1;
  v22[8] = a2;
  MEMORY[0x1E0C80A78](a1);
  v22[3] = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 24);
  v25 = *(_QWORD *)(v6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v22[2] = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v22[1] = (char *)v22 - v12;
  v13 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v13);
  v22[9] = (char *)v22 - v14;
  v15 = *v3;
  v16 = v3[1];
  v30[5] = sub_1BE1B2588();
  v26 = v15;
  v27 = v16;
  CROrderedDictionary.count.getter(a3, v17, v18, v19);
  v22[4] = sub_1BE1B2A5C();
  sub_1BE1B29C0();
  v26 = v15;
  v27 = v16;
  CROrderedDictionary.makeIterator()(a3, v20, v30);
  v21 = *(_OWORD *)(a3 + 32);
  v23 = *(_OWORD *)(a3 + 48);
  v24 = v21;
  v22[6] = TupleTypeMetadata2;
  v22[5] = v9;
  v26 = v25;
  v27 = v7;
  v28 = v21;
  v29 = v23;
  type metadata accessor for CROrderedDictionary.Iterator();
}

uint64_t sub_1BDFB2AA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  CROrderedDictionary.Iterator.next()(a1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return *(_QWORD *)(v7 - 72);
  }
  else
  {
    v8 = *(int *)(v3 + 48);
    v9 = v1 + v8;
    *(_QWORD *)(v7 - 184) = &v5[v8];
    v10 = v3;
    v11 = v2;
    v12 = *(_QWORD *)(v7 - 168);
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v1, v5, v12);
    v14 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 32))(v9, *(_QWORD *)(v7 - 184), v11);
    v15 = v6 + *(int *)(v10 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v6, v1, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v9, v11);
    v16 = *(_QWORD *)(v7 - 176);
    (*(void (**)(uint64_t, uint64_t))(v7 - 248))(v6, v15);
    *(_QWORD *)(v7 - 176) = v16;
    if (!v16)
    {
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v11);
      (*(void (**)(uint64_t, _QWORD))(v13 + 8))(v6, *(_QWORD *)(v7 - 168));
      sub_1BE1B2A20();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 264) + 8))(v1, *(_QWORD *)(v7 - 256));
      JUMPOUT(0x1BDFB2A80);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 264) + 8))(v1, *(_QWORD *)(v7 - 256));
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v11);
    return (*(uint64_t (**)(uint64_t, _QWORD))(v13 + 8))(v6, *(_QWORD *)(v7 - 168));
  }
}

void CROrderedDictionary.subscript.getter()
{
  sub_1BDFB2E98();
}

void sub_1BDFB2C60()
{
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDFB2CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  CROrderedDictionary.subscript.getter(v2, a1, v1);
}

void sub_1BDFB2CCC()
{
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDFB2D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1BDFB631C(v1, v2, a1);
}

void CROrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  *v7 = a2;
  v7[1] = a3;
  v8 = *(_QWORD *)(a3 + 24);
  v7[2] = v3;
  v7[3] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[4] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[5] = malloc(v10);
  v11 = malloc(v10);
  v7[6] = v11;
  CROrderedDictionary.subscript.getter(a2, a3, (uint64_t)v11);
}

void (*sub_1BDFB2DB4())(uint64_t **a1, char a2)
{
  return sub_1BDFB2DD8;
}

void sub_1BDFB2DD8(uint64_t **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (*a1)[5];
  v3 = (*a1)[1];
  v4 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[4] + 16))((*a1)[5], (*a1)[6], (*a1)[3]);
    sub_1BDFB631C(v2, v4, v3);
  }
  sub_1BDFB631C((*a1)[6], v4, v3);
}

void sub_1BDFB2E8C()
{
  sub_1BDFB2E98();
}

void sub_1BDFB2E98()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDFB2EDC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, a1);
}

uint64_t CROrderedDictionary.delta(_:from:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t CROrderedDictionary.canMerge(delta:)()
{
  return 1;
}

void sub_1BDFB2F44(uint64_t *a1, uint64_t a2)
{
  CROrderedDictionary.merge(delta:)(a1, a2);
}

void CROrderedDictionary.merge(delta:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3[2];

  v2 = a1[1];
  v3[0] = *a1;
  v3[1] = v2;
  CROrderedDictionary.merge(_:)(v3, a2);
}

uint64_t sub_1BDFB2FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CROrderedDictionary.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(uint64_t **)(a2 + 48), *(_QWORD **)(a2 + 56), a3);
}

uint64_t CROrderedDictionary.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[4];

  v25 = a8;
  v26 = a7;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v16, &qword_1ED6F3728);
  v18 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v16, 1, v18);
  sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3728);
  if ((_DWORD)v17 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000014;
    *(_QWORD *)(v19 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v19 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    v22 = v27[3];
    sub_1BDE13480(a2, a3, a4, a5, a6, v26, v27);
    result = swift_release();
    if (!v22)
    {
      v23 = v27[1];
      v24 = v25;
      *v25 = v27[0];
      v24[1] = v23;
    }
  }
  return result;
}

uint64_t sub_1BDFB3184()
{
  return CROrderedDictionary.encode(to:)();
}

uint64_t CROrderedDictionary.encode(to:)()
{
  uint64_t v0;
  uint64_t result;

  result = sub_1BDDA8D6C();
  if (!v0)
  {
    swift_retain();
    sub_1BDE1D7FC();
  }
  return result;
}

void sub_1BDFB3238(_BYTE *a1@<X8>)
{
  CROrderedDictionary.minEncodingVersion.getter(a1);
}

void CROrderedDictionary.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t CROrderedDictionary.ObservableDifference.contents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CROrderedDictionary.ObservableDifference.removed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 68);
  v5 = sub_1BE1B206C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CROrderedDictionary.ObservableDifference.moved.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CROrderedDictionary.ObservableDifference.added.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 76);
  v5 = sub_1BE1B206C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t CROrderedDictionary.ObservableDifference.subscript.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  v2 = *v1;
  v5 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return MEMORY[0x1C3B7C58C](&v5, v2, MEMORY[0x1E0DEB418], AssociatedTypeWitness, MEMORY[0x1E0DEB428]);
}

void sub_1BDFB3364(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for CROrderedDictionary.ObservableDifference();
}

uint64_t sub_1BDFB33B0(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v6 = v4 + a1[17];
  v7 = sub_1BE1B206C();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
  v8(v6, v3, v7);
  *(_QWORD *)(v4 + a1[18]) = v2;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v4 + a1[19], v1, v7);
}

_QWORD *sub_1BDFB3418@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void (*v74)(uint64_t *, char *, uint64_t);
  unsigned int (*v75)(uint64_t *, uint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t TupleTypeMetadata3;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  void (*v110)(char *, uint64_t);
  _QWORD *result;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(char *, char *, _QWORD *);
  char v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  unint64_t v140;
  char v141;
  void (*v142)(uint64_t, _QWORD *);
  char *v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  id v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, _QWORD *);
  char *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char isUniquelyReferenced_nonNull_native;
  char *v210;
  uint64_t *v211;
  uint64_t v212;
  unsigned int (*v213)(uint64_t *, uint64_t, uint64_t);
  unsigned int v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  int64_t v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  void (*v242)(char *, char *, uint64_t);
  char *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _QWORD *v248;
  char v249;
  char *v250;
  void (*v251)(char *, _QWORD *);
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  void (*v262)(char *, uint64_t);
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  void (*v269)(char *, uint64_t);
  uint64_t v270;
  void (*v271)(char *, uint64_t);
  uint64_t v272;
  uint64_t v273;
  void (*v274)(char *, char *, uint64_t);
  uint64_t v275;
  void (*v276)(char *, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD v280[3];
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  id v294;
  uint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t TupleTypeMetadata2;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int (*v329)(uint64_t *, uint64_t, uint64_t);
  char *v330;
  uint64_t v331;
  uint64_t v332;
  void (*v333)(char *, char *, uint64_t);
  __int128 v334;
  uint64_t *v335;
  char *v336;
  uint64_t v337;
  char *v338;
  char *v339;
  uint64_t v340;
  int64_t v341;
  _QWORD *v342;
  __int128 v343;
  char *v344;
  __int128 v345;
  int64_t v346;
  uint64_t v347;
  char *v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  uint64_t v352;
  _QWORD *v353;
  char v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;

  v288 = a4;
  v8 = a3[6];
  v9 = a3[3];
  v300 = *(_QWORD *)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v292 = sub_1BE1B2EE8();
  v291 = *(_QWORD *)(v292 - 8);
  v11 = MEMORY[0x1E0C80A78](v292);
  v297 = (char *)v280 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v296 = (char *)v280 - v14;
  v302 = AssociatedTypeWitness;
  v295 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v290 = (char *)v280 - v15;
  v310 = v9;
  v287 = v8;
  v17 = type metadata accessor for CRDictionaryElement(255, v9, v8, v16);
  v306 = sub_1BE1B2EE8();
  v305 = *(_QWORD *)(v306 - 8);
  v18 = MEMORY[0x1E0C80A78](v306);
  v307 = (char *)v280 - v19;
  v327 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v314 = (char *)v280 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v322 = (char *)v280 - v22;
  v23 = (_QWORD *)a3[2];
  v312 = v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v318 = sub_1BE1B2EE8();
  v317 = *(_QWORD *)(v318 - 8);
  v24 = MEMORY[0x1E0C80A78](v318);
  v316 = (char *)v280 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v315 = (char *)v280 - v26;
  v308 = a3;
  v348 = (char *)a3[5];
  v28 = type metadata accessor for CROrderedSetElement(0, (uint64_t)v23, (uint64_t)v348, v27);
  v346 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x1E0C80A78](v28);
  v342 = (_QWORD *)((char *)v280 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v328 = v30;
  MEMORY[0x1E0C80A78](v29);
  v339 = (char *)v280 - v31;
  v286 = sub_1BE1B206C();
  v285 = *(_QWORD *)(v286 - 8);
  v32 = MEMORY[0x1E0C80A78](v286);
  v284 = (char *)v280 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v283 = (char *)v280 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v320 = (char *)v280 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v326 = (char *)v280 - v39;
  v347 = *(v23 - 1);
  v40 = MEMORY[0x1E0C80A78](v38);
  v304 = (char *)v280 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v40);
  v319 = (char *)v280 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v325 = (char *)v280 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v338 = (char *)v280 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v321 = (char *)v280 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v52 = (char *)v280 - v51;
  MEMORY[0x1E0C80A78](v50);
  v344 = (char *)v280 - v53;
  v332 = swift_getTupleTypeMetadata2();
  v337 = sub_1BE1B2EE8();
  v54 = *(_QWORD *)(v337 - 8);
  v55 = MEMORY[0x1E0C80A78](v337);
  v301 = (char *)v280 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = MEMORY[0x1E0C80A78](v55);
  v330 = (char *)v280 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v336 = (char *)v280 - v60;
  MEMORY[0x1E0C80A78](v59);
  v63 = (_QWORD *)((char *)v280 - v62);
  v64 = *a1;
  v65 = (char *)a1[1];
  v66 = *v4;
  v289 = (char *)v4[1];
  v303 = a2;
  if (!*(_QWORD *)(a2 + 24))
    goto LABEL_84;
  while (2)
  {
    v362 = v64;
    v355 = v66;
    v67 = type metadata accessor for CRSequence(0, v28, (uint64_t)&off_1E7758E40, v61);
    swift_retain();
    swift_retain();
    v341 = v67;
    CRSequence.observableDifference(from:with:)((uint64_t)&v355, v67, (uint64_t *)&v356);
    v281 = v64;
    swift_release();
    v340 = v66;
    swift_release();
    v311 = (uint64_t)v356;
    v282 = v65;
    if (!v356)
    {
      type metadata accessor for _NSRange(255);
      type metadata accessor for CRSequenceStorage(255, v28, (uint64_t)&off_1E7758E40, v68);
      sub_1BE1B2EE8();
      swift_getTupleTypeMetadata3();
      v311 = sub_1BE1B29D8();
    }
    v366 = sub_1BE1B257C();
    v365 = sub_1BE1B257C();
    v356 = (_QWORD *)v340;
    v69 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRSequence<A>, v341);
    sub_1BE1B28B8();
    v355 = v362;
    v280[1] = sub_1BE1B3230();
    sub_1BE1B320C();
    v280[2] = v69;
    v70 = sub_1BE1B3224();
    v71 = v332;
    v323 = v70;
    v72 = v344;
    while (1)
    {
      v73 = v336;
      sub_1BE1B3218();
      v74 = *(void (**)(uint64_t *, char *, uint64_t))(v54 + 32);
      v74(v63, v73, v337);
      v75 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48);
      if (v75(v63, 1, v71) == 1)
        break;
      v76 = *v63;
      v77 = (char *)v63 + *(int *)(v71 + 48);
      (*(void (**)(char *, char *, _QWORD *))(v347 + 16))(v72, v77, v23);
      (*(void (**)(char *, uint64_t))(v346 + 8))(v77, v28);
      v362 = v76;
      v363 = 0;
      sub_1BE1B2684();
      sub_1BE1B26B4();
    }
    v333 = (void (*)(char *, char *, uint64_t))v74;
    swift_bridgeObjectRelease();
    sub_1BE1B2060();
    sub_1BE1B2060();
    type metadata accessor for _NSRange(255);
    type metadata accessor for CRSequenceStorage(255, v28, (uint64_t)&off_1E7758E40, v78);
    sub_1BE1B2EE8();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v80 = v311;
    if (MEMORY[0x1C3B7C8EC](v311, TupleTypeMetadata3) < 1)
    {
      swift_bridgeObjectRelease();
      v338 = (char *)MEMORY[0x1E0DEE9D8];
      v159 = v312;
      v160 = v327;
      v83 = TupleTypeMetadata2;
      goto LABEL_153;
    }
    v329 = v75;
    v355 = sub_1BE1B2594();
    *(_QWORD *)&v343 = v23;
    v353 = (_QWORD *)sub_1BE1B2594();
    v81 = swift_bridgeObjectRetain();
    v82 = MEMORY[0x1C3B7C928](v81, TupleTypeMetadata3);
    v83 = TupleTypeMetadata2;
    *(_QWORD *)&v345 = v28;
    v309 = TupleTypeMetadata3;
    if (v82)
    {
      v84 = 0;
      v85 = 0;
      v331 = v80 + 32;
      while (1)
      {
        v86 = sub_1BE1B29FC();
        sub_1BE1B29A8();
        if ((v86 & 1) == 0)
          goto LABEL_218;
        v87 = v85 + 1;
        if (__OFADD__(v85, 1))
          goto LABEL_219;
        v88 = (_QWORD *)(v331 + 32 * v85);
        v89 = *v88;
        v90 = v88[1];
        v91 = *v88 + v90;
        if (__OFADD__(*v88, v90))
          goto LABEL_220;
        if (v91 < v89)
          goto LABEL_221;
        v92 = (void *)v88[3];
        v335 = (uint64_t *)v88[2];
        *(_QWORD *)&v334 = v87;
        if (v89 != v91)
          break;
        v93 = v92;
        v23 = v92;
LABEL_20:
        if (v23)
        {
          v100 = sub_1BE0CC97C();
          v23 = v23;
          v101 = swift_bridgeObjectRetain();
          if (MEMORY[0x1C3B7C928](v101, v28))
          {
            v102 = 0;
            do
            {
              v103 = sub_1BE1B29FC();
              sub_1BE1B29A8();
              if ((v103 & 1) != 0)
              {
                v104 = v346;
                (*(void (**)(_QWORD *, unint64_t, uint64_t))(v346 + 16))(v342, v100+ ((*(unsigned __int8 *)(v346 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v346 + 80))+ *(_QWORD *)(v346 + 72) * v102, v28);
                v105 = v102 + 1;
                if (__OFADD__(v102, 1))
                  goto LABEL_203;
              }
              else
              {
                result = (_QWORD *)sub_1BE1B30BC();
                if (v328 != 8)
                  goto LABEL_237;
                v356 = result;
                v112 = v346;
                (*(void (**)(_QWORD *, _QWORD **, uint64_t))(v346 + 16))(v342, &v356, v28);
                v104 = v112;
                swift_unknownObjectRelease();
                v105 = v102 + 1;
                if (__OFADD__(v102, 1))
                  goto LABEL_203;
              }
              v106 = v347;
              v107 = v342;
              v108 = v343;
              (*(void (**)(char *, _QWORD *, _QWORD))(v347 + 16))(v52, v342, v343);
              (*(void (**)(_QWORD *, _QWORD))(v104 + 8))(v107, v345);
              sub_1BE1B2BF4();
              v109 = v344;
              sub_1BE1B2BB8();
              v110 = *(void (**)(char *, uint64_t))(v106 + 8);
              v28 = v345;
              v110(v109, v108);
              ++v102;
            }
            while (v105 != MEMORY[0x1C3B7C928](v100, v28));
          }

          swift_bridgeObjectRelease();
        }
        v113 = __OFSUB__(v84, v335);
        v84 -= (uint64_t)v335;
        if (v113)
          goto LABEL_222;
        v80 = v311;
        TupleTypeMetadata3 = v309;
        v114 = MEMORY[0x1C3B7C928](v311, v309);
        v85 = v334;
        v83 = TupleTypeMetadata2;
        if ((_QWORD)v334 == v114)
          goto LABEL_34;
      }
      if (v89 >= v91)
        goto LABEL_224;
      v23 = v92;
      v94 = v92;
      while (!__OFADD__(v89, v84))
      {
        ++v89;
        v356 = (_QWORD *)v340;
        v95 = v339;
        CRSequence.subscript.getter();
        v96 = v347;
        v97 = v343;
        (*(void (**)(char *, char *, _QWORD))(v347 + 16))(v52, v95, v343);
        sub_1BE1B2BF4();
        v98 = v344;
        sub_1BE1B2BB8();
        v99 = *(void (**)(char *, uint64_t))(v96 + 8);
        v28 = v345;
        v99(v98, v97);
        (*(void (**)(char *, uint64_t))(v346 + 8))(v95, v28);
        if (!--v90)
          goto LABEL_20;
      }
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
      goto LABEL_211;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    v364 = sub_1BE1B257C();
    v313 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F110);
    v352 = sub_1BE1B257C();
    if (!MEMORY[0x1C3B7C928](v80, TupleTypeMetadata3))
    {
      v342 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v23 = (_QWORD *)v343;
LABEL_89:
      swift_bridgeObjectRelease();
      v350 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v351 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      result = v342;
      if (!v342[2])
      {
        v338 = (char *)MEMORY[0x1E0DEE9D8];
        v159 = v312;
        v196 = v337;
        goto LABEL_149;
      }
      v161 = 0;
      v162 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v163 = v342[2];
      v164 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v345 = v163;
      while (1)
      {
        if (v161 >= v163)
          goto LABEL_230;
        v165 = (uint64_t)&result[4 * v161 + 4];
        v168 = *(_QWORD *)(v165 + 8);
        v167 = (uint64_t *)(v165 + 8);
        v166 = v168;
        v169 = v164[2];
        if (v169)
          break;
        v170 = 0;
LABEL_100:
        v174 = v162[2];
        if (v174)
        {
          v175 = v162 + 4;
          v176 = v162[2];
          while (1)
          {
            v177 = *v175++;
            if (v177 < v166)
            {
              v113 = __OFSUB__(v170--, 1);
              if (v113)
                break;
            }
            if (!--v176)
              goto LABEL_107;
          }
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          __break(1u);
LABEL_214:
          __break(1u);
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
LABEL_107:
        v178 = result[4 * v161 + 6];
        v179 = 0;
        if (v169)
        {
          v180 = v164 + 4;
          do
          {
            v181 = *v180++;
            if (v178 >= v181)
            {
              v113 = __OFADD__(v179++, 1);
              if (v113)
                goto LABEL_212;
            }
          }
          while (--v169);
        }
        if (v174)
        {
          v182 = v162 + 4;
          do
          {
            v183 = *v182++;
            if (v183 < v178)
            {
              v113 = __OFSUB__(v179--, 1);
              if (v113)
                goto LABEL_213;
            }
          }
          while (--v174);
        }
        v342 = result;
        swift_beginAccess();
        v164 = v351;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v164 = sub_1BDE06F60(0, v164[2] + 1, 1, v164);
        v185 = v164[2];
        v184 = v164[3];
        if (v185 >= v184 >> 1)
          v164 = sub_1BDE06F60((_QWORD *)(v184 > 1), v185 + 1, 1, v164);
        v164[2] = v185 + 1;
        v164[v185 + 4] = v178;
        v351 = v164;
        result = (_QWORD *)swift_endAccess();
        if (v161 >= v342[2])
          goto LABEL_231;
        v186 = *v167;
        swift_beginAccess();
        v162 = v350;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v162 = sub_1BDE06F60(0, v162[2] + 1, 1, v162);
        v188 = v162[2];
        v187 = v162[3];
        if (v188 >= v187 >> 1)
          v162 = sub_1BDE06F60((_QWORD *)(v187 > 1), v188 + 1, 1, v162);
        v162[2] = v188 + 1;
        v162[v188 + 4] = v186;
        v350 = v162;
        swift_endAccess();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v159 = v312;
          result = v342;
        }
        else
        {
          result = sub_1BDFCEA28(v342);
          v159 = v312;
        }
        v189 = v345;
        v163 = result[2];
        if (v161 >= v163)
          goto LABEL_232;
        v190 = (uint64_t)&result[4 * v161 + 4];
        v191 = *(_QWORD *)(v190 + 8);
        v192 = v191 + v170;
        if (__OFADD__(v191, v170))
          goto LABEL_233;
        *(_QWORD *)(v190 + 8) = v192;
        v194 = *(_QWORD *)(v190 + 16);
        v193 = (_QWORD *)(v190 + 16);
        v195 = v194 + v179;
        if (__OFADD__(v194, v179))
          goto LABEL_234;
        ++v161;
        *v193 = v195;
        v83 = TupleTypeMetadata2;
        if (v161 == v189)
        {
          v197 = result;
          result = (_QWORD *)swift_bridgeObjectRetain();
          v198 = result + 6;
          v199 = MEMORY[0x1E0DEE9D8];
          do
          {
            v205 = *((_OWORD *)v198 - 1);
            v206 = *(v198 - 1);
            v207 = *v198;
            if (v206 != *v198)
            {
              v113 = __OFSUB__(v207, 1);
              v208 = v207 - 1;
              if (v113)
                goto LABEL_236;
              if (v206 != v208)
              {
                v343 = *(_OWORD *)v198;
                v345 = v205;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v356 = (_QWORD *)v199;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_1BDE22918(0, *(_QWORD *)(v199 + 16) + 1, 1);
                  v199 = (uint64_t)v356;
                }
                v200 = v345;
                v201 = v343;
                v203 = *(_QWORD *)(v199 + 16);
                v202 = *(_QWORD *)(v199 + 24);
                result = v197;
                if (v203 >= v202 >> 1)
                {
                  sub_1BDE22918(v202 > 1, v203 + 1, 1);
                  v201 = v343;
                  v200 = v345;
                  result = v197;
                  v199 = (uint64_t)v356;
                }
                *(_QWORD *)(v199 + 16) = v203 + 1;
                v204 = v199 + 32 * v203;
                *(_OWORD *)(v204 + 32) = v200;
                *(_OWORD *)(v204 + 48) = v201;
                v159 = v312;
              }
            }
            v198 += 4;
            --v163;
          }
          while (v163);
          v338 = (char *)v199;
          swift_bridgeObjectRelease();
          v196 = v337;
LABEL_149:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v356 = (_QWORD *)v281;
          sub_1BE1B28B8();
          v349 = v362;
          sub_1BE1B320C();
          v210 = v336;
          sub_1BE1B3218();
          v211 = (uint64_t *)v301;
          v333(v301, v210, v196);
          v212 = v332;
          v213 = v329;
          v214 = v329(v211, 1, v332);
          v215 = v344;
          if (v214 != 1)
          {
            *(_QWORD *)&v345 = *(_QWORD *)(v347 + 16);
            do
            {
              v216 = *v211;
              v217 = &v301[*(int *)(v212 + 48)];
              ((void (*)(char *, char *, _QWORD *))v345)(v215, v217, v23);
              (*(void (**)(char *, uint64_t))(v346 + 8))(v217, v28);
              v362 = v216;
              v363 = 0;
              sub_1BE1B2684();
              sub_1BE1B26B4();
              sub_1BE1B3218();
              v211 = (uint64_t *)v301;
              v333(v301, v210, v337);
            }
            while (v213(v211, 1, v212) != 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v160 = v327;
LABEL_153:
          v218 = MEMORY[0x1E0DEB418];
          v364 = sub_1BE1B257C();
          v219 = v289;
          swift_beginAccess();
          v220 = *((_QWORD *)v219 + 5);
          v221 = *(_QWORD *)(v220 + 64);
          v340 = v220 + 64;
          v222 = 1 << *(_BYTE *)(v220 + 32);
          v223 = -1;
          if (v222 < 64)
            v223 = ~(-1 << v222);
          v224 = v223 & v221;
          v225 = (unint64_t)(v222 + 63) >> 6;
          v344 = v282 + 40;
          v336 = (char *)(v225 - 1);
          v226 = swift_bridgeObjectRetain();
          v227 = 0;
          v341 = v225;
          v337 = v225 - 4;
          *(_QWORD *)&v343 = v226;
          v339 = (char *)(v226 + 96);
          v228 = v307;
          if (!v224)
            goto LABEL_160;
          while (2)
          {
            *(_QWORD *)&v345 = (v224 - 1) & v224;
            v346 = v227;
            v229 = __clz(__rbit64(v224)) | (v227 << 6);
LABEL_159:
            v230 = v343;
            v231 = v316;
            (*(void (**)(char *, unint64_t, _QWORD *))(v347 + 16))(v316, *(_QWORD *)(v343 + 48) + *(_QWORD *)(v347 + 72) * v229, v23);
            (*(void (**)(char *, unint64_t, uint64_t))(v160 + 16))(&v231[*(int *)(v83 + 48)], *(_QWORD *)(v230 + 56) + *(_QWORD *)(v160 + 72) * v229, v159);
            v232 = 0;
LABEL_166:
            v235 = *(_QWORD *)(v83 - 8);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v235 + 56))(v231, v232, 1, v83);
            v236 = v315;
            (*(void (**)(char *, char *, uint64_t))(v317 + 32))(v315, v231, v318);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48))(v236, 1, v83) == 1)
            {
              swift_release();
              if (sub_1BE1B1FB8() > 0
                || (swift_bridgeObjectRetain(), v272 = sub_1BE1B260C(), swift_bridgeObjectRelease(), v272 > 0)
                || *((_QWORD *)v338 + 2)
                || sub_1BE1B1FB8() >= 1)
              {
                v273 = v364;
                v274 = *(void (**)(char *, char *, uint64_t))(v285 + 32);
                v275 = v286;
                v274(v283, v320, v286);
                v274(v284, v326, v275);
                sub_1BDFB3364(v273, v288);
              }
LABEL_216:
              swift_bridgeObjectRelease();
              v276 = *(void (**)(char *, uint64_t))(v285 + 8);
              v277 = v286;
              v276(v320, v286);
              v276(v326, v277);
              v278 = v308[4];
              v279 = v308[7];
              v356 = v23;
              v357 = v310;
              v358 = v278;
              v359 = (uint64_t)v348;
              v360 = v287;
              v361 = v279;
              type metadata accessor for CROrderedDictionary.ObservableDifference();
            }
            v237 = v218;
            v238 = v236;
            v239 = &v236[*(int *)(v83 + 48)];
            v240 = v347;
            v241 = v319;
            (*(void (**)(char *, char *, _QWORD *))(v347 + 32))(v319, v238, v23);
            v242 = *(void (**)(char *, char *, uint64_t))(v327 + 32);
            v243 = v322;
            v242(v322, v239, v159);
            v244 = (uint64_t *)v344;
            swift_beginAccess();
            v245 = *v244;
            swift_bridgeObjectRetain();
            v246 = (uint64_t)v348;
            MEMORY[0x1C3B7C58C](v241, v245, v23, v159, v348);
            v160 = v327;
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v228, 1, v159) == 1)
            {
              (*(void (**)(char *, uint64_t))(v160 + 8))(v243, v159);
              (*(void (**)(char *, _QWORD *))(v240 + 8))(v241, v23);
              (*(void (**)(char *, uint64_t))(v305 + 8))(v228, v306);
              v218 = v237;
              v227 = v346;
              v224 = v345;
              v83 = TupleTypeMetadata2;
              if ((_QWORD)v345)
                continue;
            }
            else
            {
              v247 = v314;
              v242(v314, v228, v159);
              MEMORY[0x1C3B7C58C](&v356, v241, v365, v23, v237, v246);
              v248 = v356;
              v249 = v357;
              v250 = v304;
              (*(void (**)(char *, char *, _QWORD *))(v240 + 16))(v304, v241, v23);
              if ((v249 & 1) != 0)
              {
                result = MEMORY[0x1C3B7C58C](&v353, v250, v366, v23, v237, v246);
                if ((v354 & 1) != 0)
                  goto LABEL_238;
                v218 = v237;
                v342 = v353;
                v251 = *(void (**)(char *, _QWORD *))(v347 + 8);
                v251(v250, v23);
              }
              else
              {
                v342 = v248;
                v251 = *(void (**)(char *, _QWORD *))(v240 + 8);
                v251(v250, v23);
                v218 = v237;
              }
              v252 = &v322[*(int *)(v159 + 36)];
              v253 = v247;
              v254 = v322;
              v255 = v310;
              if ((sub_1BE1B2798() & 1) != 0)
              {
                v256 = v252;
                v257 = v296;
                (*(void (**)(char *, uint64_t, uint64_t))(v300 + 32))(v256, v303, v255);
                v258 = v295;
                v259 = v302;
                v260 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v295 + 48))(v257, 1, v302);
                v83 = TupleTypeMetadata2;
                if (v260 == 1)
                {
                  v261 = v327;
                  v262 = *(void (**)(char *, uint64_t))(v327 + 8);
                  v159 = v312;
                  v262(v314, v312);
                  v262(v322, v159);
                  v160 = v261;
                  v251(v319, v23);
                  (*(void (**)(char *, uint64_t))(v291 + 8))(v257, v292);
                }
                else
                {
                  v266 = v290;
                  (*(void (**)(char *, char *, uint64_t))(v258 + 32))(v290, v257, v259);
                  v267 = v297;
                  (*(void (**)(char *, char *, uint64_t))(v258 + 16))(v297, v266, v259);
                  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v258 + 56))(v267, 0, 1, v259);
                  v353 = v342;
                  sub_1BE1B2684();
                  sub_1BE1B26B4();
                  (*(void (**)(char *, uint64_t))(v258 + 8))(v266, v259);
                  v268 = v327;
                  v269 = *(void (**)(char *, uint64_t))(v327 + 8);
                  v159 = v312;
                  v269(v314, v312);
                  v269(v322, v159);
                  v160 = v268;
                  v251(v319, v23);
                }
                v228 = v307;
                goto LABEL_183;
              }
              v263 = *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20);
              v264 = *(_QWORD *)&v254[v263];
              v265 = *(_QWORD *)&v253[v263];
              if (v264 == v265)
              {
                if ((sub_1BDDB2BF8() & 1) == 0)
                  goto LABEL_182;
LABEL_181:
                (*(void (**)(char *, uint64_t, uint64_t))(v300 + 32))(v252, v303, v310);
                v353 = v342;
                sub_1BE1B2684();
                sub_1BE1B26B4();
              }
              else if (v264 < v265)
              {
                goto LABEL_181;
              }
LABEL_182:
              v270 = v327;
              v271 = *(void (**)(char *, uint64_t))(v327 + 8);
              v159 = v312;
              v271(v314, v312);
              v271(v254, v159);
              v160 = v270;
              v251(v319, v23);
              v228 = v307;
              v83 = TupleTypeMetadata2;
LABEL_183:
              v227 = v346;
              v224 = v345;
              if ((_QWORD)v345)
                continue;
            }
            break;
          }
LABEL_160:
          v233 = v227 + 1;
          if (__OFADD__(v227, 1))
            goto LABEL_223;
          if (v233 >= v341)
          {
            v346 = v227;
            *(_QWORD *)&v345 = 0;
            v232 = 1;
          }
          else
          {
            v234 = *(_QWORD *)(v340 + 8 * v233);
            if (v234)
              goto LABEL_163;
            if (v227 + 2 >= v341)
            {
              *(_QWORD *)&v345 = 0;
              v232 = 1;
              goto LABEL_189;
            }
            v234 = *(_QWORD *)(v340 + 8 * (v227 + 2));
            if (v234)
            {
              v233 = v227 + 2;
LABEL_163:
              *(_QWORD *)&v345 = (v234 - 1) & v234;
              v229 = __clz(__rbit64(v234)) + (v233 << 6);
              v346 = v233;
              goto LABEL_159;
            }
            v233 = v227 + 3;
            if (v227 + 3 >= v341)
            {
              *(_QWORD *)&v345 = 0;
              v232 = 1;
              v346 = v227 + 2;
            }
            else
            {
              v234 = *(_QWORD *)(v340 + 8 * v233);
              if (v234)
                goto LABEL_163;
              while (v337 != v227)
              {
                v234 = *(_QWORD *)&v339[8 * v227++];
                if (v234)
                {
                  v233 = v227 + 3;
                  goto LABEL_163;
                }
              }
              *(_QWORD *)&v345 = 0;
              v232 = 1;
              v233 = (int64_t)v336;
LABEL_189:
              v346 = v233;
            }
          }
          v231 = v316;
          goto LABEL_166;
        }
      }
      v170 = 0;
      v171 = v164 + 4;
      v172 = v164[2];
      while (1)
      {
        v173 = *v171++;
        if (v166 >= v173)
        {
          v113 = __OFADD__(v170++, 1);
          if (v113)
            goto LABEL_208;
        }
        if (!--v172)
          goto LABEL_100;
      }
    }
    v328 = 0;
    v64 = 0;
    v115 = 0;
    v293 = v80 + 32;
    v342 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v116 = v347;
    v23 = (_QWORD *)v343;
    while (1)
    {
      v117 = sub_1BE1B29FC();
      result = (_QWORD *)sub_1BE1B29A8();
      if ((v117 & 1) == 0)
        goto LABEL_225;
      if (__OFADD__(v115, 1))
        goto LABEL_226;
      v118 = v293 + 32 * v115;
      v63 = *(uint64_t **)v118;
      *(_QWORD *)&v334 = *(_QWORD *)(v118 + 8);
      v119 = (uint64_t *)((char *)v63 + v334);
      if (__OFADD__(v63, (_QWORD)v334))
        goto LABEL_227;
      if ((uint64_t)v119 < (uint64_t)v63)
        goto LABEL_228;
      v121 = *(_QWORD *)(v118 + 16);
      v120 = *(void **)(v118 + 24);
      v335 = v63;
      v298 = v115 + 1;
      v299 = v121;
      v331 = (uint64_t)v120;
      if (v63 != v119)
        break;
      result = v120;
LABEL_42:
      v122 = (void *)v331;
      if (v331)
      {
        v356 = (_QWORD *)sub_1BE0CC97C();
        v123 = sub_1BE1B2A5C();
        v294 = v122;
        MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v123);
        sub_1BE1B28B8();
        v351 = (_QWORD *)v362;
        sub_1BE1B3230();
        sub_1BE1B320C();
        v331 = sub_1BE1B3224();
        while (1)
        {
          v125 = v336;
          sub_1BE1B3218();
          v126 = (uint64_t *)v330;
          v333(v330, v125, v337);
          v127 = v332;
          if (v329(v126, 1, v332) == 1)
            break;
          v128 = *v126;
          v129 = (char *)v126 + *(int *)(v127 + 48);
          v130 = *(void (**)(char *, char *, _QWORD *))(v116 + 16);
          v130(v338, v129, v23);
          (*(void (**)(char *, uint64_t))(v346 + 8))(v129, v28);
          swift_bridgeObjectRetain();
          v131 = sub_1BE1B2BE8();
          swift_bridgeObjectRelease();
          if ((v131 & 1) != 0)
          {
            v132 = (char *)v63 + v64;
            if (__OFADD__(v63, v64))
              goto LABEL_206;
            v133 = &v132[v128];
            if (__OFADD__(v132, v128))
              goto LABEL_209;
            v134 = v338;
            v130(v344, v338, v23);
            v362 = v342[2];
            v363 = 0;
            v135 = (uint64_t)v348;
            sub_1BE1B2684();
            sub_1BE1B26B4();
            v136 = (uint64_t)v325;
            v130(v325, v134, v23);
            v137 = v352;
            v138 = *(_QWORD *)(v352 + 16);
            *(_QWORD *)&v139 = -1;
            *((_QWORD *)&v139 + 1) = -1;
            v334 = v139;
            if (v138)
            {
              v140 = sub_1BDE0D1D0(v136, (uint64_t)v23, v135);
              if ((v141 & 1) != 0)
                v334 = *(_OWORD *)(*(_QWORD *)(v137 + 56) + 16 * v140);
            }
            v142 = *(void (**)(uint64_t, _QWORD *))(v347 + 8);
            v142(v136, v23);
            v63 = v335;
            v113 = __OFADD__(v335, v128);
            v143 = (char *)v335 + v128;
            if (v113)
              goto LABEL_210;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
              v144 = v342;
            else
              v144 = sub_1BDE06F6C(0, v342[2] + 1, 1, v342);
            v146 = v144[2];
            v145 = v144[3];
            if (v146 >= v145 >> 1)
              v144 = sub_1BDE06F6C((_QWORD *)(v145 > 1), v146 + 1, 1, v144);
            v144[2] = v146 + 1;
            v342 = v144;
            v124 = &v144[4 * v146];
            *((_OWORD *)v124 + 2) = v334;
            v124[6] = v133;
            v124[7] = v143;
            v116 = v347;
            v142((uint64_t)v338, v23);
          }
          else
          {
            if (__OFADD__(v128, v63))
              goto LABEL_207;
            sub_1BE1B1FF4();
            (*(void (**)(char *, _QWORD *))(v116 + 8))(v338, v23);
          }
          v113 = __OFSUB__(v64--, 1);
          if (v113)
            goto LABEL_204;
        }
        v147 = v294;

        result = (_QWORD *)swift_bridgeObjectRelease();
      }
      v113 = __OFSUB__(v328, v299);
      v328 -= v299;
      v83 = TupleTypeMetadata2;
      if (v113)
        goto LABEL_229;
      v148 = MEMORY[0x1C3B7C928](v311, v309);
      v115 = v298;
      if (v298 == v148)
        goto LABEL_89;
    }
    v65 = v321;
    if ((uint64_t)v63 >= (uint64_t)v119)
      goto LABEL_235;
    v149 = v120;
    v150 = 0;
    while (1)
    {
      v54 = (uint64_t)v63 + v150 + v328;
      if (__OFADD__((char *)v63 + v150, v328))
        goto LABEL_205;
      v356 = (_QWORD *)v340;
      v151 = v339;
      CRSequence.subscript.getter();
      v152 = v28;
      v153 = *(void (**)(char *, char *, _QWORD *))(v116 + 16);
      v153(v65, v151, v23);
      (*(void (**)(char *, uint64_t))(v346 + 8))(v151, v152);
      swift_bridgeObjectRetain();
      LOBYTE(v151) = sub_1BE1B2BE8();
      swift_bridgeObjectRelease();
      if ((v151 & 1) != 0)
        break;
      sub_1BE1B1FF4();
      result = (_QWORD *)(*(uint64_t (**)(char *, _QWORD *))(v116 + 8))(v65, v23);
      v28 = v345;
      v63 = v335;
LABEL_68:
      if ((_QWORD)v334 == ++v150)
        goto LABEL_42;
    }
    v63 = v335;
    v154 = (char *)v335 + v64;
    if (__OFADD__(v64, v335))
      goto LABEL_214;
    v65 = v321;
    v23 = (_QWORD *)v343;
    v52 = v348;
    MEMORY[0x1C3B7C58C](&v356, v321, v364, v343, MEMORY[0x1E0DEB418], v348);
    if ((v357 & 1) != 0)
    {
      v153(v344, v65, v23);
      v356 = (_QWORD *)v54;
      v357 = (uint64_t)v154;
      LOBYTE(v358) = 0;
      sub_1BE1B2684();
      sub_1BE1B26B4();
      v116 = v347;
      result = (_QWORD *)(*(uint64_t (**)(char *, _QWORD *))(v347 + 8))(v65, v23);
      v28 = v345;
      v113 = __OFADD__(v64++, 1);
      if (v113)
        goto LABEL_215;
      goto LABEL_68;
    }
    v66 = (unint64_t)v356;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v28 = v345;
      v155 = v342;
      if ((v66 & 0x8000000000000000) != 0)
        goto LABEL_83;
    }
    else
    {
      v155 = sub_1BDFCEA28(v342);
      v28 = v345;
      if ((v66 & 0x8000000000000000) != 0)
      {
LABEL_83:
        __break(1u);
LABEL_84:
        v356 = (_QWORD *)v66;
        v362 = v64;
        type metadata accessor for CRSequence(0, v28, (uint64_t)&off_1E7758E40, v61);
        if (sub_1BE0C6C7C(&v362) && v289 == v65)
        {
          v157 = v308[4];
          v158 = v308[7];
          v356 = v23;
          v357 = v310;
          v358 = v157;
          v359 = (uint64_t)v348;
          v360 = v287;
          v361 = v158;
          type metadata accessor for CROrderedDictionary.ObservableDifference();
        }
        continue;
      }
    }
    break;
  }
  if (v66 < v155[2])
  {
    v342 = v155;
    v156 = &v155[4 * v66];
    v156[4] = v54;
    v156[5] = v154;
    v116 = v347;
    result = (_QWORD *)(*(uint64_t (**)(char *, _QWORD *))(v347 + 8))(v65, v23);
    v113 = __OFADD__(v64++, 1);
    if (v113)
      goto LABEL_215;
    goto LABEL_68;
  }
  __break(1u);
LABEL_218:
  sub_1BE1B30BC();
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  result = (_QWORD *)sub_1BE1B30BC();
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
  return result;
}

void CROrderedDictionary.MergeableDelta.merge(delta:)()
{
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDFB59FC(uint64_t a1)
{
  uint64_t v1;

  CROrderedDictionary.merge(_:)((uint64_t *)(v1 - 16), a1);
}

uint64_t CROrderedDictionary.MergeableDelta.canMerge(delta:)()
{
  return 1;
}

void CROrderedDictionary.MergeableDelta.visitReferences(_:)()
{
  type metadata accessor for CROrderedDictionary();
}

void sub_1BDFB5A58()
{
  CROrderedDictionary.visitReferences(_:)();
}

uint64_t CROrderedDictionary.MergeableDelta.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];

  result = CROrderedDictionary.init(from:)(a1, a2, a3, a4, a5, a6, a7, v12);
  if (!v8)
  {
    v11 = v12[1];
    *a8 = v12[0];
    a8[1] = v11;
  }
  return result;
}

void CROrderedDictionary.MergeableDelta.encode(to:)()
{
  swift_retain();
  swift_retain();
  type metadata accessor for CROrderedDictionary();
}

uint64_t sub_1BDFB5B08()
{
  CROrderedDictionary.encode(to:)();
  swift_release();
  return swift_release();
}

void sub_1BDFB5B4C()
{
  CROrderedDictionary.MergeableDelta.merge(delta:)();
}

uint64_t sub_1BDFB5B58()
{
  return 1;
}

uint64_t sub_1BDFB5B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CROrderedDictionary.MergeableDelta.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(uint64_t **)(a2 + 48), *(_QWORD **)(a2 + 56), a3);
}

void sub_1BDFB5B8C()
{
  CROrderedDictionary.MergeableDelta.encode(to:)();
}

uint64_t sub_1BDFB5BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  CROrderedDictionary.makeIterator()(a1, a2, a3);
  swift_release();
  return swift_release();
}

uint64_t sub_1BDFB5BCC()
{
  return 0;
}

uint64_t sub_1BDFB5BD4()
{
  uint64_t v0;

  v0 = sub_1BE155AA4();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1BDFB5C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v47 = a7;
  v48 = a1;
  v50 = (char *)a3;
  v51 = a4;
  v49 = a2;
  v46 = a8;
  v11 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (unint64_t *)((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Timestamp(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v45 = (uint64_t)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v42 - v17;
  v20 = type metadata accessor for CRDictionaryElement(255, a6, a9, v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v22 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v23 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v43 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v42 - v26;
  v28 = (char *)&v42 + *(int *)(v25 + 48) - v26;
  v29 = *(_QWORD *)(a5 - 8);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v31 = v48;
  v48 = a5;
  v30((char *)&v42 - v26, v31, a5);
  v32 = *(_QWORD *)(v20 - 8);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v44 = v28;
  v33(v28, v49, v20);
  sub_1BDD9C318((uint64_t)v50, (uint64_t)v13, type metadata accessor for Proto_Timestamp);
  v34 = v51;
  swift_retain();
  v50 = v18;
  v35 = v34;
  v36 = v52;
  sub_1BDEFF448(v13, v35, (uint64_t)v18);
  if (v36)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v27, TupleTypeMetadata2);
  v38 = (uint64_t)v43;
  v39 = &v43[*(int *)(TupleTypeMetadata2 + 48)];
  v40 = v48;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v43, v27, v48);
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v39, v44, v20);
  v41 = v45;
  sub_1BDDA2E8C((uint64_t)v50, v45, type metadata accessor for Timestamp);
  sub_1BE161D24(v38, v41, v40, v47, v46);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v39, v20);
}

uint64_t sub_1BDFB5E88(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t result;

  type metadata accessor for CRDictionaryElement(255, a5, a8, a4);
  v13 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  type metadata accessor for Proto_Timestamp(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  result = a2(a1, v13, a1 + *(int *)(TupleTypeMetadata2 + 48));
  if (v10)
    *a10 = v10;
  return result;
}

uint64_t sub_1BDFB5F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + *(int *)(type metadata accessor for CROrderedSetElement(0, a2, a3, v11) + 36);
  type metadata accessor for Proto_Timestamp(0);
  *a4 = 0;
  a4[1] = 0;
  sub_1BE1B20E4();
  sub_1BDD9C318(v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v13 = sub_1BDDAE244((uint64_t)v10);
  v14 = sub_1BE1B1F58();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v10, v14);
  *a4 = v13;
  result = type metadata accessor for Timestamp(0);
  a4[1] = *(_QWORD *)(v12 + *(int *)(result + 20));
  return result;
}

void CROrderedDictionary<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28[11];

  v5 = v4;
  v18[0] = a4;
  v18[1] = a3;
  v8 = *(_QWORD *)(a2 + 24);
  v22 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v28[10] = (uint64_t)v18 - v10;
  v11 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v11);
  v21 = (char *)v18 - v12;
  v13 = *v5;
  v14 = v5[1];
  v15 = a1[3];
  v23 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  sub_1BE1B3764();
  v24 = v13;
  v25 = v14;
  CROrderedDictionary.makeIterator()(a2, v16, v28);
  v17 = *(_OWORD *)(a2 + 32);
  v19 = *(_OWORD *)(a2 + 48);
  v20 = v17;
  v24 = v22;
  v25 = v8;
  v26 = v17;
  v27 = v19;
  type metadata accessor for CROrderedDictionary.Iterator();
}

uint64_t sub_1BDFB61A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(char **)(v6 - 224);
  CROrderedDictionary.Iterator.next()(a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v7, 1, v1) != 1)
  {
    v8 = v1;
    v9 = *(int *)(v1 + 48);
    v10 = &v7[v9];
    *(_QWORD *)(v6 - 208) = v5;
    v11 = *(_QWORD *)(v6 - 72) + v9;
    (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(*(_QWORD *)(v6 - 72), v7, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v11, v10, v3);
    __swift_mutable_project_boxed_opaque_existential_1(v6 - 128, *(_QWORD *)(v6 - 104));
    v12 = *(_QWORD *)(v6 - 208);
    sub_1BE1B3380();
    if (!v12)
    {
      __swift_mutable_project_boxed_opaque_existential_1(v6 - 128, *(_QWORD *)(v6 - 104));
      sub_1BE1B3380();
      (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v6 - 72), v8);
      JUMPOUT(0x1BDFB6180);
    }
    (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v6 - 72), v8);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v6 - 128);
}

void sub_1BDFB6300(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  CROrderedDictionary<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

void sub_1BDFB631C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  v28 = a2;
  v22 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = sub_1BE1B2EE8();
  v26 = *(_QWORD *)(v6 - 8);
  v27 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a3 + 16);
  v24 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v7);
  v23 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a3 + 40);
  v13 = type metadata accessor for CROrderedSetElement(0, v10, v21, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v21 - v15;
  v25 = v3;
  v17 = *v3;
  v29 = *v3;
  type metadata accessor for CRSequence(0, v13, (uint64_t)&off_1E7758E40, v18);
  if ((uint64_t)CRSequence.count.getter() > v28)
  {
    v29 = v17;
    CRSequence.subscript.getter();
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v23, v16, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v19 = *(_QWORD *)(v5 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v9, v22, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v9, 0, 1, v5);
    v20 = *(_QWORD *)(a3 + 32);
    v29 = v10;
    v30 = v5;
    v31 = v20;
    v32 = v21;
    v33 = *(_OWORD *)(a3 + 48);
    type metadata accessor for CRDictionary();
  }
  __break(1u);
}

uint64_t sub_1BDFB6520()
{
  return sub_1BDFB6574() & 1;
}

void sub_1BDFB6538(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 != 1)
  {
    sub_1BDDC8EA0(a1);

  }
}

void type metadata accessor for CROrderedDictionary.Iterator()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDFB6574()
{
  return sub_1BE1B2798() & 1;
}

_UNKNOWN **sub_1BDFB65B0()
{
  return &protocol witness table for CROrderedDictionary<A, B>.MergeableDelta;
}

uint64_t sub_1BDFB65BC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedDictionary<A, B>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_1BDFB65E8()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDFB6600()
{
  return 48;
}

__n128 sub_1BDFB660C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1BDFB6620()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B206C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BDFB669C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[17];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1BE1B206C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[19];
    *(uint64_t *)((char *)v7 + a3[18]) = *(uint64_t *)((char *)a2 + a3[18]);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    swift_bridgeObjectRetain();
    v12(v14, v15, v11);
  }
  return v7;
}

uint64_t sub_1BDFB676C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 68);
  v5 = sub_1BE1B206C();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 76), v5);
}

_QWORD *sub_1BDFB67F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = *a2;
  v6 = a3[17];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[19];
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  swift_bridgeObjectRetain();
  v10(v12, v13, v9);
  return a1;
}

char *sub_1BDFB6898(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[17];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10(&a1[a3[19]], &a2[a3[19]], v9);
  return a1;
}

char *sub_1BDFB6950(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[17];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[19];
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  v10(&a1[v11], &a2[v11], v9);
  return a1;
}

char *sub_1BDFB69E4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = a3[17];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1BE1B206C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  swift_bridgeObjectRelease();
  v10(&a1[a3[19]], &a2[a3[19]], v9);
  return a1;
}

uint64_t sub_1BDFB6A8C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDFB6A98(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BE1B206C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 68)], a2, v8);
  }
}

uint64_t sub_1BDFB6B14()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1BDFB6B20(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1BE1B206C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 68)], a2, a2, v7);
  }
  return result;
}

void type metadata accessor for CROrderedDictionary.ObservableDifference()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t *sub_1BDFB6BA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v4 = *a1;
  v5 = *a2;
  if (v4)
  {
    if (!v5)
      type metadata accessor for CRDictionary.MutatingAction();
    *a1 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else if (v5)
  {
    *a1 = v5;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v6 = (void *)a1[2];
  v7 = (void *)a2[2];
  a1[2] = (uint64_t)v7;
  v8 = v7;

  return a1;
}

_QWORD *sub_1BDFB6C78(_QWORD *a1, _QWORD *a2)
{
  void *v4;

  if (*a1)
  {
    if (!*a2)
      type metadata accessor for CRDictionary.MutatingAction();
    *a1 = *a2;
    swift_bridgeObjectRelease();
    a1[1] = a2[1];
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v4 = (void *)a1[2];
  a1[2] = a2[2];

  return a1;
}

void type metadata accessor for CROrderedDictionary.MutatingAction()
{
  JUMPOUT(0x1C3B7DED0);
}

void type metadata accessor for CROrderedDictionary.MergeableDelta()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDFB6D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BDFB2164(a1, *(_QWORD **)(v2 + 96), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_1BDFB6D74()
{
  return swift_deallocObject();
}

uint64_t sub_1BDFB6D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t sub_1BDFB6D9C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BDFB5F54(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1BDFB6DC0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BDFB6DE4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDFB6E08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 64);
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRetain();
}

unint64_t sub_1BDFB6E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF52F120;
  if (!qword_1EF52F120)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF52F118);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, &qword_1EF52F120);
  }
  return result;
}

uint64_t sub_1BDFB6EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_1BDFB5C1C(a1, a2, a3, v4[8], v4[2], v4[3], v4[5], a4, v4[6]);
}

uint64_t sub_1BDFB6ED4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1BDFB5E88(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_1BDFB6F08()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1DF0();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

void sub_1BDFB6FCC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  sqlite3 *v10;
  sqlite3_snapshot *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  sqlite3_stmt *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v2;
  v7 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (v3)
    return;
  v8 = v7;
  if (sqlite3_step(v7) != 101)
  {
    if (!sqlite3_errmsg(*(sqlite3 **)(v4 + 32)))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v16 = sub_1BE1B2864();
    v18 = v17;
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v19 = v16;
    *(_QWORD *)(v19 + 8) = v18;
    *(_BYTE *)(v19 + 16) = 2;
    swift_willThrow();
LABEL_9:
    sqlite3_finalize(v8);
    return;
  }
  v9 = sqlite3_finalize(v8);
  if (a1)
  {
    v10 = *(sqlite3 **)(v4 + 32);
    v11 = *(sqlite3_snapshot **)(a1 + 16);
    swift_retain();
    if (sqlite3_snapshot_open(v10, "main", v11))
    {
      if (sqlite3_errmsg(*(sqlite3 **)(v4 + 32)))
      {
        v12 = sub_1BE1B2864();
        v14 = v13;
        sub_1BDDFC134();
        swift_allocError();
        *(_QWORD *)v15 = v12;
        *(_QWORD *)(v15 + 8) = v14;
        *(_BYTE *)(v15 + 16) = 4;
        swift_willThrow();
        swift_release();
        return;
      }
      goto LABEL_19;
    }
    v9 = swift_release();
  }
  a2(v9);
  v8 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (sqlite3_step(v8) == 101)
    goto LABEL_9;
  if (!sqlite3_errmsg(*(sqlite3 **)(v4 + 32)))
  {
LABEL_21:
    __break(1u);
    return;
  }
  v20 = sub_1BE1B2864();
  v22 = v21;
  sub_1BDDFC134();
  v23 = (void *)swift_allocError();
  *(_QWORD *)v24 = v20;
  *(_QWORD *)(v24 + 8) = v22;
  *(_BYTE *)(v24 + 16) = 2;
  swift_willThrow();
  sqlite3_finalize(v8);
  v25 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (sqlite3_step(v25) == 101)
  {
    sqlite3_finalize(v25);
    swift_willThrow();
    return;
  }
  if (!sqlite3_errmsg(*(sqlite3 **)(v4 + 32)))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v26 = sub_1BE1B2864();
  v28 = v27;
  sub_1BDDFC134();
  swift_allocError();
  *(_QWORD *)v29 = v26;
  *(_QWORD *)(v29 + 8) = v28;
  *(_BYTE *)(v29 + 16) = 2;
  swift_willThrow();
  sqlite3_finalize(v25);

}

uint64_t sub_1BDFB72A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = swift_allocObject();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v3 = type metadata accessor for Capsule(0, *(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 88) + 16), v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  return v0;
}

uint64_t sub_1BDFB7308(char *a1, char *a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;

  v16 = swift_allocObject();
  sub_1BDFB8C6C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return v16;
}

void sub_1BDFB73B0()
{
  sub_1BDFB6FCC(0, (void (*)(uint64_t))sub_1BDFC5F80);
}

uint64_t sub_1BDFB73F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[4] + *(_QWORD *)(*(_QWORD *)v1[4] + 96);
  swift_beginAccess();
  type metadata accessor for Capsule(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(*(_QWORD *)(v3 + 88) + 16), v5);
  v6 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v4, v6);
}

uint64_t sub_1BDFB7478()
{
  return sub_1BE1B2E40();
}

uint64_t sub_1BDFB74C8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, uint64_t, id);
  id v27;
  void *v28;
  uint64_t inited;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(uint64_t, id);
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  NSObject *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, id);
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  __int128 v95;
  _QWORD *v96;
  _QWORD *v97[2];
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;

  v3 = v1;
  v93 = a1;
  v4 = *v1;
  v94 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v94);
  *(_QWORD *)&v95 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v4 + 80);
  v7 = *(_QWORD *)(v4 + 88);
  v114 = (_QWORD *)type metadata accessor for Capsule(255, v6, *(_QWORD *)(v7 + 16), v8);
  v9 = sub_1BE1B2EE8();
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v83 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v83 - v16;
  v18 = v3[9];
  result = sub_1BE1B2E40();
  if (!v2)
  {
    v88 = (unint64_t)v17;
    v89 = 0;
    v85 = v12;
    v86 = v15;
    v90 = v6;
    v91 = v7;
    v92 = v18;
    v20 = MEMORY[0x1E0DEE9D8];
    v21 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v22 = sub_1BDDB6CE8(v20);
    v112 = v21;
    v113 = v22;
    v23 = (void *)v3[5];
    v24 = v3[4] + *(_QWORD *)(*(_QWORD *)v3[4] + 96);
    swift_beginAccess();
    v25 = v114;
    v87 = *(v114 - 1);
    v26 = *(uint64_t (**)(uint64_t, uint64_t, id))(v87 + 48);
    result = v26(v24, 1, v114);
    if ((_DWORD)result != 1)
    {
      v27 = v23;
      swift_retain();
      Capsule.finalizeTimestamps(_:)((uint64_t)v27, (uint64_t)v25);
      swift_endAccess();
      swift_release();

      v28 = (void *)v3[5];
      type metadata accessor for CREncoder();
      inited = swift_initStackObject();
      v30 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(inited + 40) = v20;
      *(_QWORD *)(inited + 48) = v20;
      *(_QWORD *)(inited + 56) = v30;
      *(_QWORD *)(inited + 64) = v20;
      *(_QWORD *)(inited + 80) = 0;
      *(_QWORD *)(inited + 88) = 0;
      *(_QWORD *)(inited + 16) = v28;
      *(_QWORD *)(inited + 24) = v20;
      *(_BYTE *)(inited + 72) = 1;
      v31 = v88;
      v96 = v3;
      sub_1BDFB73F0(v88);
      result = v26(v31, 1, v25);
      v32 = v91;
      if ((_DWORD)result == 1)
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        return result;
      }
      v33 = v28;
      v34 = v89;
      v35 = sub_1BDE171C8(v31, v90, v32);
      v37 = v31;
      if (v34)
      {
        swift_release();
        (*(void (**)(uint64_t, _QWORD *))(v87 + 8))(v31, v25);
        sub_1BE1B2E40();
        swift_willThrow();
LABEL_12:
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v38 = (uint64_t)v35;
      v39 = v36;
      v84 = v26;
      swift_release();
      v40 = *(uint64_t (**)(uint64_t, id))(v87 + 8);
      v41 = v40(v37, v25);
      v89 = &v83;
      MEMORY[0x1E0C80A78](v41);
      v42 = (uint64_t)v96;
      *(&v83 - 4) = (uint64_t)v96;
      *(&v83 - 3) = v38;
      *(&v83 - 2) = v39;
      *(&v83 - 1) = (uint64_t)&v112;
      sub_1BE1B2E40();
      v43 = (uint64_t *)v40;
      v87 = v38;
      v88 = v39;
      v44 = (uint64_t)v86;
      sub_1BDFB73F0((uint64_t)v86);
      result = v84(v44, 1, v25);
      if ((_DWORD)result == 1)
        goto LABEL_23;
      v45 = v95;
      sub_1BDDA7300((uint64_t)v25, v95);
      v89 = v43;
      ((void (*)(uint64_t, _QWORD *))v43)(v44, v25);
      v46 = *(_QWORD *)(v42 + 16);
      v47 = *(_QWORD *)(v42 + 24);
      v48 = *(_QWORD *)(v45 + *(int *)(v94 + 20));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49 = swift_bridgeObjectRetain();
      v50 = sub_1BDDC7A88(v49);
      sub_1BDD9C3E0(v45, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      *(_QWORD *)&v104 = v48;
      *((_QWORD *)&v104 + 1) = v50;
      v105 = xmmword_1BE1B9200;
      v106 = 0u;
      v107 = 0u;
      v108 = v46;
      v109 = v47;
      v110 = 0;
      v111 = 0;
      sub_1BDD93FBC((uint64_t *)&v98);
      v51 = v100;
      if (v100)
      {
        v53 = (_QWORD *)*((_QWORD *)&v98 + 1);
        v52 = (_QWORD *)v98;
        v54 = v99;
        v55 = v101;
        v56 = v102;
        v57 = v103;
        do
        {
          v97[0] = v52;
          v97[1] = v53;
          v95 = v54;
          v98 = v54;
          *(_QWORD *)&v99 = v51;
          *((_QWORD *)&v99 + 1) = v55;
          v100 = v56;
          v101 = v57;
          sub_1BDFBD930((uint64_t)v97, &v98, (uint64_t)v96, (uint64_t)&v112);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          sub_1BDDB796C((uint64_t)v52, (unint64_t)v53);
          sub_1BDD93FBC((uint64_t *)&v98);
          v53 = (_QWORD *)*((_QWORD *)&v98 + 1);
          v52 = (_QWORD *)v98;
          v54 = v99;
          v51 = v100;
          v55 = v101;
          v56 = v102;
          v57 = v103;
        }
        while (v100);
      }
      v58 = *((_QWORD *)&v105 + 1);
      *(_QWORD *)&v95 = v109;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDD946A4(v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v59 = (uint64_t)v85;
      v60 = (uint64_t)v96;
      sub_1BDFB73F0((uint64_t)v85);
      v61 = (uint64_t)v114;
      result = v84(v59, 1, v114);
      if ((_DWORD)result == 1)
        goto LABEL_24;
      Capsule.version.getter(v61, &v104);
      v95 = v104;
      ((void (*)(uint64_t, uint64_t))v89)(v59, v61);
      *(_OWORD *)(v60 + 16) = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = type metadata accessor for CRSQLStoreBundleCapsule(0, v90, v91, v62);
      v64 = *(void **)(v60 + 40);
      v65 = swift_allocObject();
      v66 = v64;
      swift_retain();
      sub_1BDFBE3E0(v66, v60);
      v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v104 = v65;
      swift_beginAccess();
      v68 = v112;
      v69 = v113;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDF18BBC(v68, v69, 0, v63, (uint64_t)&off_1E7759388);
      v71 = v70;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v97[0] = v67;
      v72 = (uint64_t)v96;
      v73 = v96[7];
      swift_retain();
      sub_1BDDFC828(v73, v97);
      v74 = swift_bridgeObjectRetain();
      sub_1BDFBC664(v74, v93);
      v94 = v71;
      v89 = 0;
      swift_bridgeObjectRelease();
      v75 = *(void **)(v72 + 40);
      v76 = qword_1ED6F4510;
      v77 = v75;
      if (v76 != -1)
        swift_once();
      *(_QWORD *)&v95 = *(_QWORD *)(qword_1ED6F8BE8 + 40);
      v78 = swift_allocObject();
      *(_QWORD *)(v78 + 16) = v77;
      v79 = swift_allocObject();
      *(_QWORD *)(v79 + 16) = sub_1BDE28224;
      *(_QWORD *)(v79 + 24) = v78;
      *(_QWORD *)&v106 = sub_1BDE28190;
      *((_QWORD *)&v106 + 1) = v79;
      *(_QWORD *)&v104 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v104 + 1) = 1107296256;
      *(_QWORD *)&v105 = sub_1BDD843A8;
      *((_QWORD *)&v105 + 1) = &block_descriptor_59;
      v80 = _Block_copy(&v104);
      v114 = v77;
      v81 = (id)v95;
      swift_retain();
      swift_release();
      dispatch_sync(v81, v80);

      _Block_release(v80);
      LOBYTE(v81) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      sub_1BDDB796C(v87, v88);

      swift_release();
      result = swift_release();
      if ((v81 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v82 = v89;
        sub_1BE1B2E40();
        if (v82)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        sub_1BDFBC1D4(v94, v93);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_1BDFB7F20(char *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_1BDFBE3E0(a1, a2);
  return v4;
}

uint64_t sub_1BDFB7F74()
{
  return sub_1BE1B2E40();
}

uint64_t sub_1BDFB7FBC()
{
  return sub_1BE1B2E40();
}

uint64_t sub_1BDFB8000()
{
  return sub_1BDDFA7C4();
}

void sub_1BDFB8020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[24];

  v18[8] = a7;
  v18[9] = a3;
  v18[4] = a2;
  v18[5] = a1;
  v18[22] = *MEMORY[0x1E0C80C00];
  v10 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for Proto_Document(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v18[7] = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[11] = a6;
  v14 = MEMORY[0x1E0C80A78](v12);
  v18[10] = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a4 + 8) >> 62;
  v18[12] = a5;
  v17 = (char *)&loc_1BDFB8120 + *((int *)qword_1BDFB86E0 + v16);
  v18[6] = v14;
  __asm { BR              X10 }
}

uint64_t sub_1BDFB8134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v5 - 160) = v2;
  *(_WORD *)(v5 - 152) = v0;
  *(_BYTE *)(v5 - 150) = BYTE2(v0);
  *(_BYTE *)(v5 - 149) = BYTE3(v0);
  *(_BYTE *)(v5 - 148) = BYTE4(v0);
  *(_BYTE *)(v5 - 147) = BYTE5(v0);
  swift_retain();
  sub_1BDDFA5C8(v5 - 160, v5 - 160 + BYTE6(v0), v1, (uint64_t *)(v5 - 144));
  if (v3)
    return swift_release();
  swift_release();
  v7 = *(_QWORD *)(v5 - 136);
  if (v7 >> 60 == 15)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v8 = 0xD00000000000001BLL;
    *(_QWORD *)(v8 + 8) = 0x80000001BE1CEA30;
    *(_BYTE *)(v8 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    v9 = *(_QWORD *)(v5 - 144);
    v10 = *(_QWORD *)(v5 - 128);
    v11 = *(_QWORD *)(v5 - 120);
    sub_1BDDB6CA4(v9, *(_QWORD *)(v5 - 136));
    sub_1BDDB6CA4(v10, v11);
    sub_1BDDB796C(v10, v11);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v12 = *(_QWORD *)(v5 - 176);
    swift_retain();
    v13 = sub_1BDE11D48(v9, v7, v12);
    *(_QWORD *)(v5 - 264) = v9;
    *(_QWORD *)(v5 - 272) = v7;
    *(_QWORD *)(v5 - 248) = v10;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 - 208) + 16) + 8) + 8))(v13, *(_QWORD *)(v5 - 184));
    *(_QWORD *)(v5 - 256) = v4;
    v14 = swift_allocObject();
    v15 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = v15;
    v16 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v14 + 32) = v15;
    *(_QWORD *)(v14 + 40) = v16;
    *(_BYTE *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = 0;
    v17 = v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    v18 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    v20 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v5 - 176);
    swift_retain();
    swift_release();
    *(_BYTE *)(v14 + 49) = 1;
    *(_QWORD *)(v5 - 112) = 0;
    *(_OWORD *)(v5 - 144) = 0u;
    *(_OWORD *)(v5 - 128) = 0u;
    v21 = *(_QWORD *)(v5 - 248);
    sub_1BDDB6CA4(v21, v11);
    sub_1BE1B20FC();
    sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
    sub_1BE1B2270();
    v22 = *(_QWORD *)(v5 - 216);
    sub_1BDE0F688(v22, (_OWORD *)(v5 - 160));
    sub_1BDD9C3E0(v22, type metadata accessor for Proto_Document);
    sub_1BDFC5850(*(_QWORD *)(v5 - 264), *(_QWORD *)(v5 - 272), v21, v11);
    swift_setDeallocating();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDD86E30(v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
    sub_1BDD86E30(v14 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
    swift_deallocClassInstance();
    *(_OWORD *)(v5 - 176) = *(_OWORD *)(v5 - 160);
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v5 - 256) + 32))(*(_QWORD *)(v5 - 232), *(_QWORD *)(v5 - 192), *(_QWORD *)(v5 - 184));
    *(_OWORD *)*(_QWORD *)(v5 - 240) = *(_OWORD *)(v5 - 176);
  }
  return result;
}

uint64_t sub_1BDFB86F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t a1)@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  uint64_t result;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v7 = v5;
  v36 = a4;
  v33 = a5;
  v11 = sub_1BE1B1DF0();
  v34 = *(_QWORD *)(v11 - 8);
  v35 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a2;
  aBlock = sub_1BE1B1E74();
  v38 = v14;
  v45 = 47;
  v46 = 0xE100000000000000;
  v43 = 95;
  v44 = 0xE100000000000000;
  sub_1BDDC8C50();
  sub_1BE1B2F30();
  swift_bridgeObjectRelease();
  sub_1BE1B1DA8();
  swift_bridgeObjectRelease();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0;
  v16 = (uint64_t *)(v15 + 16);
  if (a3)
  {
    v29 = v6;
    v31 = a3;
    v28 = v13;
    v30 = sub_1BE1B1D90();
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = v7;
    v17[3] = v15;
    v32 = v15;
    v17[4] = v36;
    v17[5] = a1;
    v18 = v47;
    v17[6] = v47;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = sub_1BDFC5C20;
    *(_QWORD *)(v19 + 24) = v17;
    v41 = sub_1BDFC6008;
    v42 = v19;
    aBlock = MEMORY[0x1E0C809B0];
    v38 = 1107296256;
    v39 = sub_1BDE30BE4;
    v40 = &block_descriptor_38;
    v20 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1BDDB6CA4(a1, v18);
    swift_retain();
    swift_release();
    v22 = (void *)v30;
    v21 = v31;
    objc_msgSend(v31, sel_coordinateReadingItemAtURL_options_error_byAccessor_, v30, 0, 0, v20);

    _Block_release(v20);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v21 & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v13 = v28;
    a3 = sub_1BDFC5C20;
  }
  else
  {
    sub_1BDFBE08C((uint64_t)v13, v7, v15, v36, a1, v47);
  }
  swift_beginAccess();
  v24 = *v16;
  if (*v16)
  {
    v25 = *(void (**)(char *, uint64_t))(v34 + 8);
    swift_retain();
    v25(v13, v35);
    swift_release();
    result = sub_1BDE0D5B8((uint64_t)a3);
    *v33 = v24;
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v26 = 0xD000000000000017;
    *(_QWORD *)(v26 + 8) = 0x80000001BE1CF5A0;
    *(_BYTE *)(v26 + 16) = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    swift_release();
    return sub_1BDE0D5B8((uint64_t)a3);
  }
  return result;
}

uint64_t sub_1BDFB8AA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = (uint64_t (*)(uint64_t *))result;
    v7 = 0;
    v8 = MEMORY[0x1E0DEE9D8];
    v13 = (uint64_t (*)(uint64_t *))result;
    while (v7 < *(_QWORD *)(a3 + 16))
    {
      v9 = *(_QWORD *)(a3 + 8 * v7 + 32);
      v14 = v9;
      swift_retain();
      v10 = v6(&v14);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return v8;
      }
      if ((v10 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v15 = v8;
        if ((result & 1) == 0)
        {
          result = sub_1BDE227FC(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v15;
        }
        v12 = *(_QWORD *)(v8 + 16);
        v11 = *(_QWORD *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          result = sub_1BDE227FC(v11 > 1, v12 + 1, 1);
          v8 = v15;
        }
        *(_QWORD *)(v8 + 16) = v12 + 1;
        *(_QWORD *)(v8 + 8 * v12 + 32) = v9;
        v6 = v13;
      }
      else
      {
        result = swift_release();
      }
      if (v5 == ++v7)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

uint64_t sub_1BDFB8C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 96);
  type metadata accessor for Capsule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 88) + 16), a4);
  v6 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v4;
}

uint64_t sub_1BDFB8C60()
{
  return sub_1BDD93094((void (*)(void))sub_1BDFB8C08);
}

uint64_t sub_1BDFB8C6C(char *a1, char *a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char *v80;
  void *v81;
  id v82;
  void *v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void (*v100)(void);
  char *v101;
  void *v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  void *v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(void (*)(void));
  id v131;
  void *v132;
  id v133;
  id v134;
  char *v135;
  id v136;
  char *v137;
  uint64_t v138;
  id v139;
  void *v140;
  unsigned int v141;
  id v142;
  id v143;
  char *v144;
  uint64_t v145;
  char *v146;
  id v147;
  void *v148;
  void *v149;
  char *v150;
  unsigned int v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  char v162;
  uint64_t *v163;
  uint64_t v164;
  signed __int16 v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t result;
  char *v169;
  uint64_t v170;
  void *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  void (*v196)(void);
  void (*v197)(void (*)(void));
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  void (*v204)(char *, uint64_t);
  void (*v205)(char *, uint64_t);
  uint64_t v206;
  char *v207;
  _QWORD *v208;
  uint64_t *v209;
  char *v210;
  uint64_t v211;
  id v212;
  _QWORD v213[2];
  char v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;

  v190 = a8;
  v182 = a7;
  v183 = a6;
  v193 = a5;
  v189 = a4;
  v194 = a3;
  v210 = a2;
  v207 = a1;
  v188 = a10;
  v187 = a9;
  v217 = *MEMORY[0x1E0C80C00];
  v184 = *v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v11);
  v180 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_1BE1B1DF0();
  v192 = *(_QWORD *)(v211 - 8);
  v13 = MEMORY[0x1E0C80A78](v211);
  v173 = (char *)&v172 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v174 = (char *)&v172 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v175 = (char *)&v172 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v181 = (char *)&v172 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v177 = (char *)&v172 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v178 = (char *)&v172 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v179 = (char *)&v172 - v26;
  MEMORY[0x1E0C80A78](v25);
  v191 = (char *)&v172 - v27;
  v199 = sub_1BE1B2E28();
  v197 = *(void (**)(void (*)(void)))(v199 - 8);
  MEMORY[0x1E0C80A78](v199);
  v196 = (void (*)(void))((char *)&v172 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v209 = (uint64_t *)sub_1BE1B2E04();
  MEMORY[0x1E0C80A78](v209);
  v195 = (char *)&v172 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v172 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1BE1B1F58();
  v34 = *(_QWORD *)(v33 - 8);
  v206 = v33;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v172 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0DEE9E0];
  v208 = v10;
  v10[2] = MEMORY[0x1E0DEE9E0];
  v10[3] = v37;
  v186 = sub_1BDD88A30();
  v215 = 0x746972772D6C7173;
  v216 = 0xEA00000000002D65;
  sub_1BE1B1F4C();
  v204 = (void (*)(char *, uint64_t))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v38 = swift_allocObject();
  v203 = xmmword_1BE1B61C0;
  *(_OWORD *)(v38 + 16) = xmmword_1BE1B61C0;
  v39 = sub_1BE1B1F40();
  v40 = MEMORY[0x1E0DEDE70];
  v41 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v38 + 56) = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v38 + 64) = v41;
  v42 = v40;
  v43 = v41;
  *(_BYTE *)(v38 + 32) = v39;
  v44 = sub_1BE1B1F40();
  *(_QWORD *)(v38 + 96) = v42;
  *(_QWORD *)(v38 + 104) = v43;
  *(_BYTE *)(v38 + 72) = BYTE1(v44);
  sub_1BE1B27EC();
  v205 = *(void (**)(char *, uint64_t))(v34 + 8);
  v205(v36, v33);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B24A4();
  v215 = MEMORY[0x1E0DEE9D8];
  v201 = sub_1BDD8422C(qword_1ED6F4480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  v200 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  v202 = sub_1BDDA9D60((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460, MEMORY[0x1E0DEAF38]);
  sub_1BE1B2F78();
  LODWORD(v198) = *MEMORY[0x1E0DEF8D0];
  v197 = (void (*)(void (*)(void)))*((_QWORD *)v197 + 13);
  v45 = v199;
  v197(v196);
  v46 = sub_1BE1B2E58();
  v47 = v208;
  v208[8] = v46;
  v215 = 0x646165722D6C7173;
  v216 = 0xE90000000000002DLL;
  sub_1BE1B1F4C();
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = v203;
  v49 = sub_1BE1B1F40();
  v50 = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v48 + 56) = MEMORY[0x1E0DEDE70];
  v51 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v48 + 64) = MEMORY[0x1E0DEDEC8];
  *(_BYTE *)(v48 + 32) = v49;
  v52 = sub_1BE1B1F40();
  *(_QWORD *)(v48 + 96) = v50;
  *(_QWORD *)(v48 + 104) = v51;
  *(_BYTE *)(v48 + 72) = BYTE1(v52);
  sub_1BE1B27EC();
  v205(v36, v206);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  v185 = v32;
  sub_1BE1B24A4();
  v215 = MEMORY[0x1E0DEE9D8];
  sub_1BE1B2F78();
  v53 = v196;
  ((void (*)(void (*)(void), _QWORD, uint64_t))v197)(v196, v198, v45);
  v47[9] = sub_1BE1B2E58();
  v215 = 0x65722D7465737361;
  v216 = 0xEB000000002D6461;
  sub_1BE1B1F4C();
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = v203;
  v55 = sub_1BE1B1F40();
  v56 = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v54 + 56) = MEMORY[0x1E0DEDE70];
  v57 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v54 + 64) = MEMORY[0x1E0DEDEC8];
  *(_BYTE *)(v54 + 32) = v55;
  v58 = sub_1BE1B1F40();
  *(_QWORD *)(v54 + 96) = v56;
  *(_QWORD *)(v54 + 104) = v57;
  *(_BYTE *)(v54 + 72) = BYTE1(v58);
  sub_1BE1B27EC();
  v172 = v36;
  v205(v36, v206);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B24A4();
  v59 = MEMORY[0x1E0DEE9D8];
  v215 = MEMORY[0x1E0DEE9D8];
  sub_1BE1B2F78();
  ((void (*)(void (*)(void), _QWORD, uint64_t))v197)(v53, v198, v199);
  v60 = v208;
  v61 = v211;
  v60[10] = sub_1BE1B2E58();
  *((_BYTE *)v60 + qword_1EF549020) = 0;
  v62 = qword_1EF549018;
  *(_QWORD *)((char *)v60 + qword_1EF549018) = v59;
  v63 = v61;
  v209 = (_QWORD *)((char *)v60 + qword_1EF549048);
  *(_QWORD *)((char *)v60 + qword_1EF549048) = 0;
  v64 = (void *)objc_opt_self();
  v65 = objc_msgSend(v64, sel_defaultManager);
  v66 = v191;
  sub_1BE1B1DA8();
  sub_1BE1B1DE4();
  v67 = *(void (**)(char *, uint64_t))(v192 + 8);
  v67(v66, v63);
  v68 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  LOBYTE(v56) = objc_msgSend(v65, sel_fileExistsAtPath_, v68);

  if ((v56 & 1) == 0)
  {
    if ((v189 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v78 = 0xD000000000000014;
      *(_QWORD *)(v78 + 8) = 0x80000001BE1CF5E0;
      *(_BYTE *)(v78 + 16) = 0;
    }
    else
    {
      v79 = objc_msgSend(v64, sel_defaultManager);
      v80 = v191;
      sub_1BE1B1DA8();
      v81 = (void *)sub_1BE1B1D90();
      v67(v80, v211);
      v215 = 0;
      LOBYTE(v80) = objc_msgSend(v79, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v81, 1, 0, &v215);

      v82 = (id)v215;
      if ((v80 & 1) != 0)
        goto LABEL_2;
      v83 = v82;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BE1B1D3C();

    }
    swift_willThrow();

    swift_release();
    sub_1BDD86E30(v194, &qword_1ED6F3C70);
    v67(v210, v211);
    v84 = 0;
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v84)
    {
      swift_release();

      swift_release();
    }

    if (v84)
    {
      v167 = v211;
      v67((char *)v60 + qword_1EF548FC8, v211);
      v67((char *)v60 + qword_1EF549050, v167);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return (uint64_t)v60;
  }
LABEL_2:
  v201 = v62;
  v69 = sub_1BDEF9F20(v190);
  swift_bridgeObjectRelease();
  v70 = sub_1BDEF8004(v69);
  swift_bridgeObjectRelease();
  v215 = v70;
  swift_retain();
  v71 = v176;
  sub_1BDFC43F0(&v215, sub_1BDEF983C, sub_1BDFC4AF4);
  if (!v71)
  {
    swift_release();
    v72 = qword_1EF549028;
    *(_QWORD *)((char *)v60 + qword_1EF549028) = v215;
    v204 = v67;
    v73 = v188;
    if (v187)
    {
      v74 = sub_1BDEF9EB0(v187);
      swift_bridgeObjectRelease();
      v75 = sub_1BDEF7F24(v74);
      swift_bridgeObjectRelease();
      v215 = v75;
      swift_retain();
      sub_1BDFC43F0(&v215, sub_1BDEF9828, sub_1BDFC4468);
      v76 = (uint64_t)v180;
      swift_release();
      v77 = v215;
    }
    else
    {
      v77 = 0;
      v76 = (uint64_t)v180;
    }
    *(_QWORD *)&v203 = v77;
    *(_QWORD *)((char *)v60 + qword_1EF549040) = v77;
    v85 = v209;
    swift_beginAccess();
    *v85 = v77;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    v197 = (void (*)(void (*)(void)))v64;
    if (v73)
    {
      if (*v209)
      {
        v86 = swift_bridgeObjectRetain();
        v87 = sub_1BDFC56B0(v86, v73);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v87 = 0;
      }
      v202 = 0;
      *v209 = v87;
      swift_bridgeObjectRelease();
    }
    else
    {
      v202 = 0;
    }
    v88 = *(_QWORD *)((char *)v60 + v72);
    v200 = (uint64_t)v60 + qword_1EF549030;
    *(_QWORD *)((char *)v60 + qword_1EF549030) = v88;
    v89 = v207;
    v60[5] = v207;
    v199 = OBJC_IVAR___CRContext_assetManager;
    v60[6] = *(_QWORD *)&v89[OBJC_IVAR___CRContext_assetManager];
    v90 = v192;
    v91 = *(void (**)(char *, char *, uint64_t))(v192 + 16);
    v92 = v210;
    v93 = v211;
    v91((char *)v60 + qword_1EF548FC8, v210, v211);
    sub_1BDD86DEC(v194, v76, &qword_1ED6F3C70);
    v94 = v177;
    v95 = v92;
    v96 = v76;
    v91(v177, v95, v93);
    v97 = v90;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v76, 1, v93) == 1)
    {
      v98 = v178;
      v99 = v94;
      v100 = *(void (**)(void))(v90 + 32);
      ((void (*)(char *, char *, uint64_t))v100)(v178, v99, v211);
      v101 = v98;
      swift_bridgeObjectRetain();
      v102 = v207;
      v103 = v207;
      swift_retain();
      sub_1BDD86E30(v96, &qword_1ED6F3C70);
      v104 = v204;
    }
    else
    {
      swift_bridgeObjectRetain();
      v102 = v207;
      v105 = v207;
      swift_retain();
      v106 = v211;
      v104 = v204;
      v204(v94, v211);
      v100 = *(void (**)(void))(v97 + 32);
      v101 = v178;
      ((void (*)(char *, uint64_t, uint64_t))v100)(v178, v96, v106);
    }
    v107 = v182;
    sub_1BE1B1D9C();
    v108 = v211;
    v104(v101, v211);
    v198 = (char *)v60 + qword_1EF549050;
    v196 = v100;
    v100();
    v60[4] = v193;
    *((_BYTE *)v60 + qword_1EF549010) = v107 & 1;
    swift_retain();
    v109 = v181;
    sub_1BE1B1DA8();
    v110 = sub_1BE1B1DE4();
    v112 = v111;
    v104(v109, v108);
    v113 = (uint64_t)v102 + OBJC_IVAR___CRContext_encryptionDelegate;
    sub_1BDD86DEC((uint64_t)v102 + OBJC_IVAR___CRContext_encryptionDelegate, (uint64_t)&v215, qword_1ED6F3DD0);
    v114 = type metadata accessor for CRSQLStore();
    swift_allocObject();
    v115 = v203;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v116 = (void *)v202;
    v117 = sub_1BDDF4324(v110, v112, (uint64_t)&v215, 1, v189 & 1, v183 & 1, (uint64_t)&unk_1E7759E18, v115);
    if (v116)
    {
      swift_bridgeObjectRelease();
      v212 = v116;
      v118 = v116;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_24;
      v119 = v213[0];
      v120 = v214;
      if (v214 != 2)
      {
        v126 = v213[1];
        swift_bridgeObjectRelease();

        swift_release();
        sub_1BDE270DC(v119, v126, v120);
        goto LABEL_28;
      }
      if (v213[0])
      {
LABEL_24:
        swift_bridgeObjectRelease();

        swift_release();
LABEL_28:
        sub_1BDD86E30(v194, &qword_1ED6F3C70);
        v127 = v210;
        v128 = v211;
        v67 = v204;
LABEL_29:
        v67(v127, v128);

LABEL_30:
        v84 = 1;
        v60 = v208;
        goto LABEL_44;
      }

      v129 = (uint64_t)v175;
      sub_1BE1B1DA8();
      if ((v189 & 1) != 0)
      {
        v202 = v114;
        v130 = v197;
        v131 = objc_msgSend(v197, sel_defaultManager);
        v132 = (void *)sub_1BE1B1D90();
        v215 = 0;
        v133 = objc_msgSend(v131, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v132, 1, &v215);

        v134 = (id)v215;
        if (!v133)
        {
          v158 = (id)v215;
          swift_bridgeObjectRelease();
          sub_1BE1B1D3C();

          swift_willThrow();
          swift_release();
          sub_1BDD86E30(v194, &qword_1ED6F3C70);
          v159 = v211;
          v67 = v204;
          v204(v210, v211);
          v127 = (char *)v129;
          v128 = v159;
          goto LABEL_29;
        }
        v135 = v191;
        sub_1BE1B1DD8();
        v136 = v134;

        v137 = v174;
        sub_1BE1B1DA8();
        v138 = v211;
        v204(v135, v211);
        v139 = objc_msgSend(v130, (SEL)&ObjCVersion__metaData.reserved + 3);
        v140 = (void *)sub_1BE1B1D90();
        v215 = 0;
        v141 = objc_msgSend(v139, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v140, 1, 0, &v215);

        v142 = (id)v215;
        if (!v141)
        {
          v160 = (id)v215;
          swift_bridgeObjectRelease();
          sub_1BE1B1D3C();

          swift_willThrow();
          swift_release();
          sub_1BDD86E30(v194, &qword_1ED6F3C70);
          v67 = v204;
          v204(v210, v138);
          v67(v137, v138);
          v67((char *)v129, v138);

          goto LABEL_30;
        }
        v215 = 0x2D65646172677055;
        v216 = 0xE800000000000000;
        v143 = v142;
        v144 = v172;
        sub_1BE1B1F4C();
        sub_1BDD8422C(&qword_1EF52F160, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v145 = v206;
        sub_1BE1B32E4();
        sub_1BE1B284C();
        swift_bridgeObjectRelease();
        v205(v144, v145);
        v146 = v173;
        sub_1BE1B1DA8();
        swift_bridgeObjectRelease();
        v147 = objc_msgSend(v130, sel_defaultManager);
        sub_1BE1B1DA8();
        v148 = (void *)sub_1BE1B1D90();
        v67 = v204;
        v204(v135, v138);
        v149 = (void *)sub_1BE1B1D90();
        v215 = 0;
        v150 = v135;
        v151 = objc_msgSend(v147, sel_copyItemAtURL_toURL_error_, v148, v149, &v215);

        v152 = (id)v215;
        if (!v151)
        {
          v171 = v152;
          swift_bridgeObjectRelease();
          sub_1BE1B1D3C();

          swift_willThrow();
          swift_release();
          sub_1BDD86E30(v194, &qword_1ED6F3C70);
          v67(v210, v138);
          v67(v146, v138);
          v67(v174, v138);
          v127 = v175;
          v128 = v138;
          goto LABEL_29;
        }
        sub_1BE1B1DA8();
        v67(v146, v138);
        v67(v174, v138);
        v129 = (uint64_t)v175;
        v67(v175, v138);
        ((void (*)(uint64_t, char *, uint64_t))v196)(v129, v150, v138);
      }
      v124 = v207;
      v153 = v203;
      sub_1BDFCD4B8(v207, v129, v203);
      v154 = sub_1BE1B1DE4();
      v156 = v155;
      sub_1BDD86DEC(v113, (uint64_t)&v215, qword_1ED6F3DD0);
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v157 = sub_1BDDF4324(v154, v156, (uint64_t)&v215, 1, v189 & 1, v183 & 1, (uint64_t)&unk_1E7759DF0, v153);
      v123 = v210;
      v161 = v157;
      v204((char *)v129, v211);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v60 = v208;
      v208[7] = v161;

      v121 = v60[7];
      if ((*(_BYTE *)(v121 + 66) & 1) == 0)
      {
LABEL_40:
        v125 = v204;
        if (*(unsigned __int16 *)(v121 + 64) > 2u)
        {
LABEL_42:
          v164 = v60[7];
          if ((*(_BYTE *)(v164 + 70) & 1) == 0)
          {
            v165 = *(_WORD *)(v164 + 68);
            v166 = v209;
            swift_beginAccess();
            sub_1BDFBA714(v165, v166);
            v122 = swift_endAccess();
          }
          MEMORY[0x1E0C80A78](v122);
          *(&v172 - 2) = v169;
          *(&v172 - 1) = v198;
          type metadata accessor for CRAssetWatchedDirectory();
          sub_1BE1B2E40();
          swift_release();
          v170 = v215;
          sub_1BDD86E30(v194, &qword_1ED6F3C70);
          v125(v123, v211);

          *(_QWORD *)((char *)v60 + qword_1EF549038) = v170;
          return (uint64_t)v60;
        }
LABEL_41:
        MEMORY[0x1E0C80A78](v122);
        *((_BYTE *)&v172 - 16) = v162;
        v163 = (uint64_t *)v200;
        swift_beginAccess();
        sub_1BDFBA624((void (*)(uint64_t *__return_ptr))sub_1BDFC5D50, v163, v213);
        v122 = swift_endAccess();
        goto LABEL_42;
      }
    }
    else
    {
      v121 = v117;
      swift_bridgeObjectRelease();
      v122 = swift_bridgeObjectRelease();
      v60[7] = v121;
      v123 = v210;
      v124 = v207;
      if ((*(_BYTE *)(v121 + 66) & 1) == 0)
        goto LABEL_40;
    }
    v125 = v204;
    goto LABEL_41;
  }
  result = swift_release();
  __break(1u);
  return result;
}

int64_t sub_1BDFBA624@<X0>(void (*a1)(uint64_t *__return_ptr)@<X0>, uint64_t *a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  int64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  if (!*(_QWORD *)(*a2 + 16))
    goto LABEL_8;
  v5 = *(unsigned __int8 *)(v4 + 32);
  if (v5 <= 1)
  {
    a1(&v9);
    if (v9 > v5)
      LOBYTE(v5) = v9;
  }
  result = sub_1BDE0DEAC(v5, v4);
  if ((v7 & 1) != 0)
  {
LABEL_8:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000012;
    *(_QWORD *)(v8 + 8) = 0x80000001BE1CF580;
    *(_BYTE *)(v8 + 16) = 3;
    return swift_willThrow();
  }
  else if (result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (int64_t)sub_1BDF11234(0, result);
    *a3 = v5;
  }
  return result;
}

int64_t sub_1BDFBA714(signed __int16 a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 v4;
  int64_t result;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
  {
    v7 = 0;
    return v7 | ((v2 == 0) << 16);
  }
  v9 = *a2;
  if (!*(_QWORD *)(v2 + 16)
    || (*(__int16 *)(v2 + 32) <= a1 ? (v4 = a1) : (v4 = *(_WORD *)(v2 + 32)),
        result = sub_1BDE0DEF4(v4, v2),
        (v6 & 1) != 0))
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v8 = 0xD000000000000016;
    *(_QWORD *)(v8 + 8) = 0x80000001BE1CF560;
    *(_BYTE *)(v8 + 16) = 3;
    return swift_willThrow();
  }
  if ((result & 0x8000000000000000) == 0)
  {
    sub_1BDF11388(0, result);
    *a2 = v9;
    v7 = v4;
    return v7 | ((v2 == 0) << 16);
  }
  __break(1u);
  return result;
}

id *sub_1BDFBA810()
{
  id *v0;
  id *v1;
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v6;
  void *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  id v12[2];

  v1 = v0;
  v12[1] = *(id *)MEMORY[0x1E0C80C00];
  sub_1BDDF3538();
  if (*((_BYTE *)v0 + qword_1EF549020) == 1)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v3 = (void *)sub_1BE1B1D90();
    v12[0] = 0;
    v4 = objc_msgSend(v2, sel_removeItemAtURL_error_, v3, v12);

    if (v4)
    {
      v5 = v12[0];
    }
    else
    {
      v6 = v12[0];
      v7 = (void *)sub_1BE1B1D3C();

      swift_willThrow();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  v8 = (char *)v1 + qword_1EF548FC8;
  v9 = sub_1BE1B1DF0();
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10((char *)v1 + qword_1EF549050, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t sub_1BDFBAA0C()
{
  return sub_1BDD93094((void (*)(void))sub_1BDFBA810);
}

uint64_t type metadata accessor for CRDataStoreBundleNonCoordinated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDataStoreBundleNonCoordinated);
}

uint64_t sub_1BDFBAA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for Capsule(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16), a4);
  result = sub_1BE1B2EE8();
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRDataStoreBundleNonCoordinated.ModelStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDataStoreBundleNonCoordinated.ModelStorage);
}

uint64_t sub_1BDFBAAB0()
{
  return sub_1BDFBC55C();
}

void sub_1BDFBAAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11[8] = a2;
  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v13 = v4;
  type metadata accessor for Capsule(255, v4, *(_QWORD *)(v12 + 16), a4);
  v5 = sub_1BE1B2EE8();
  v11[4] = *(_QWORD *)(v5 - 8);
  v11[5] = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v11[7] = (char *)v11 - v7;
  v8 = type metadata accessor for Proto_Document(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  MEMORY[0x1E0C80A78](v9);
  sub_1BDDC4278((uint64_t)&unk_1E7759DA0);
  __asm { BR              X10 }
}

uint64_t sub_1BDFBABF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  _QWORD *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, _QWORD);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);

  *(_QWORD *)(v9 - 144) = v7;
  *(_WORD *)(v9 - 136) = v5;
  *(_BYTE *)(v9 - 134) = BYTE2(v5);
  *(_BYTE *)(v9 - 133) = BYTE3(v5);
  *(_BYTE *)(v9 - 132) = BYTE4(v5);
  *(_BYTE *)(v9 - 131) = BYTE5(v5);
  swift_retain_n();
  sub_1BDDFA5C8(v9 - 144, v9 - 144 + BYTE6(v5), v1, (uint64_t *)(v9 - 128));
  if (v6)
  {
    sub_1BDDB796C(v7, v5);
    return swift_release_n();
  }
  else
  {
    sub_1BDDB796C(v7, v5);
    swift_release_n();
    v12 = *(_QWORD *)(v9 - 120);
    v14 = *(_QWORD *)(v9 - 168);
    v13 = *(_QWORD *)(v9 - 160);
    if (v12 >> 60 == 15)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_OWORD *)v15 = xmmword_1BE1C0610;
      *(_BYTE *)(v15 + 16) = 0;
      return swift_willThrow();
    }
    else
    {
      *(_QWORD *)(v9 - 216) = v2;
      v16 = *(_QWORD *)(v9 - 128);
      v17 = *(_QWORD *)(v9 - 112);
      *(_QWORD *)(v9 - 240) = v3;
      *(_QWORD *)(v9 - 232) = v17;
      *(_QWORD *)(v9 - 224) = *(_QWORD *)(v9 - 104);
      type metadata accessor for CRDataStoreBundleDecodeContext(0, v13, v14, v11);
      v18 = *(_QWORD *)(v0 + 48);
      *(_QWORD *)(v9 - 192) = v4;
      v19 = *(void **)(v0 + 64);
      v20 = v12;
      v21 = *(void **)(v9 - 176);
      v22 = sub_1BDEFA9F8(v0, 0, v18, (uint64_t)v21, (uint64_t)v19);
      v23 = v21;
      v24 = v20;
      v25 = v16;
      v26 = v19;
      v27 = *(_QWORD *)(v9 - 192);
      swift_retain();
      swift_retain();
      sub_1BDE0E030(v9 - 128, v27, v16, v24);
      LOWORD(v16) = v28;
      *(_QWORD *)(v9 - 176) = v25;
      *(_BYTE *)(v9 - 128) = *(_BYTE *)(v9 - 128);
      v29 = *(_QWORD *)(v9 - 240);
      sub_1BDFC5F98(v27, v29);
      swift_retain();
      swift_retain();
      sub_1BDD975F4((char *)(v9 - 128), v16, v29, (uint64_t)v22, v18, *(_QWORD *)(v9 - 160), *(_QWORD *)(v9 - 168), *(_QWORD *)(v9 - 184));
      v30 = *(_QWORD *)(v8 - 8);
      v31 = *(_QWORD *)(v9 - 184);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v8);
      v32 = *(_QWORD *)(v0 + 32) + *(_QWORD *)(**(_QWORD **)(v0 + 32) + 96);
      swift_beginAccess();
      v33 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9 - 208) + 40);
      swift_retain();
      v34 = v32;
      v35 = *(_QWORD *)(v9 - 216);
      v33(v34, v31, *(_QWORD *)(v9 - 200));
      swift_endAccess();
      swift_release();
      sub_1BDFB73F0(v35);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v35, 1, v8) == 1)
      {
        __break(1u);
        JUMPOUT(0x1BDFBB0D4);
      }
      sub_1BDFC5850(*(_QWORD *)(v9 - 176), v24, *(_QWORD *)(v9 - 232), *(_QWORD *)(v9 - 224));
      swift_release();
      sub_1BDD9C3E0(*(_QWORD *)(v9 - 192), type metadata accessor for Proto_Document);
      Capsule.version.getter(v8, (_QWORD *)(v9 - 128));
      v36 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      *(_OWORD *)(v9 - 160) = *(_OWORD *)(v9 - 128);
      v36(v35, v8);
      *(_OWORD *)(v0 + 16) = *(_OWORD *)(v9 - 160);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
}

void sub_1BDFBB0E4(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96[4];
  uint64_t v97;
  _QWORD v98[3];

  v6 = v5;
  LODWORD(v89) = a4;
  v88 = a3;
  v92 = a2;
  v7 = (uint64_t)a1;
  v98[2] = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BE1B1DF0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v93 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v9 + 80);
  v90 = *(_QWORD *)(v9 + 88);
  v91 = v16;
  v18 = type metadata accessor for CRSQLStoreBundleCapsule(0, v16, v90, v17);
  v19 = *(void **)(v7 + 40);
  v20 = swift_allocObject();
  v21 = v19;
  swift_retain();
  sub_1BDFBE3E0(v21, v7);
  if (!v6)
  {
    v84 = v18;
    v83 = a5;
    v87 = 0;
    v22 = *(void **)(v20 + 16);
    v23 = v92;
    *(_QWORD *)(v20 + 16) = v92;
    v24 = v23;

    v25 = v90;
    v26 = v91;
    type metadata accessor for CRDataStoreBundleNonCoordinated(0, v91, v90, v27);
    v86 = v20;
    v85 = *(id *)(v7 + 40);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v29 = v88;
    v28(v93, v88, v13);
    v28(v12, v29, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
    type metadata accessor for CRDataStoreBundleNonCoordinated.ModelStorage(0, v26, v25, v30);
    v31 = sub_1BDFB72A0();
    v32 = *(_QWORD *)(v7 + qword_1EF549028);
    v33 = *(_QWORD *)(v7 + qword_1EF549040);
    v34 = swift_allocObject();
    v35 = (char *)v85;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = v35;
    v37 = v87;
    sub_1BDFB8C6C(v36, v93, (uint64_t)v12, 1, v31, 0, v89 & 1, v32, v33, 0);
    if (v37)
    {
LABEL_4:
      swift_release();
      return;
    }
    v38 = *(void **)(v7 + 40);
    v39 = v84;
    v40 = swift_allocObject();
    v41 = v38;
    swift_retain();
    sub_1BDFBE3E0(v41, v34);
    v97 = v40;
    v42 = MEMORY[0x1C3B7DF54](&unk_1BE1C0884, v39);
    v43 = MEMORY[0x1C3B7DF54](&unk_1BE1C0858, v39);
    v44 = sub_1BDF17B24((uint64_t)&v97, 0, 0, 0, v39, v39, v42, v43);
    v45 = MEMORY[0x1E0DEE9D8];
    v46 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v47 = sub_1BDDB6CE8(v45);
    v48 = 0;
    v94 = v46;
    v95 = v47;
    v49 = *(_QWORD *)(v44 + 56);
    v77 = (_QWORD *)(v44 + 56);
    v50 = 1 << *(_BYTE *)(v44 + 32);
    v51 = -1;
    if (v50 < 64)
      v51 = ~(-1 << v50);
    v52 = v51 & v49;
    v78 = (unint64_t)(v50 + 63) >> 6;
    v79 = v40;
    v76 = v43;
    v80 = v34;
    v81 = v44;
    if ((v51 & v49) != 0)
    {
      v53 = __clz(__rbit64(v52));
      v54 = (v52 - 1) & v52;
      goto LABEL_20;
    }
    v48 = 1;
    if (v78 > 1)
    {
      v55 = v77[1];
      if (v55)
      {
LABEL_19:
        v54 = (v55 - 1) & v55;
        v53 = __clz(__rbit64(v55)) + (v48 << 6);
LABEL_20:
        v57 = (char *)&loc_1BDFBB5DC + dword_1BDFBC1C4[*(_QWORD *)(*(_QWORD *)(v44 + 48) + 16 * v53 + 8) >> 62];
        v93 = *(char **)(v7 + 56);
        v85 = (id)v48;
        v82 = v54;
        __asm { BR              X9 }
      }
      v56 = 2;
      if (v78 > 2)
      {
        v55 = v77[2];
        if (v55)
          goto LABEL_18;
        v56 = 3;
        if (v78 > 3)
        {
          v55 = v77[3];
          if (!v55)
          {
            v56 = 4;
            if (v78 > 4)
            {
              v55 = v77[4];
              if (v55)
                goto LABEL_18;
              while (1)
              {
                v48 = v56 + 1;
                if (__OFADD__(v56, 1))
                  __break(1u);
                if (v48 >= v78)
                  break;
                v55 = v77[v48];
                ++v56;
                if (v55)
                  goto LABEL_19;
              }
            }
            goto LABEL_25;
          }
LABEL_18:
          v48 = v56;
          goto LABEL_19;
        }
      }
    }
LABEL_25:
    swift_release();
    v58 = v7 + qword_1EF549018;
    swift_beginAccess();
    v59 = *(_QWORD *)v58;
    v93 = *(char **)(*(_QWORD *)v58 + 16);
    if (v93)
    {
      v89 = v7;
      swift_bridgeObjectRetain();
      v60 = 0;
      do
      {
        v61 = *(_QWORD *)(v59 + 8 * (_QWORD)v60 + 32);
        v62 = *(_QWORD *)(v61 + 16);
        v63 = *(_QWORD *)(v61 + 24);
        swift_retain();
        sub_1BDDB6CA4(v62, v63);
        v64 = sub_1BDFBF748(v62, v63);
        sub_1BDDB796C(v62, v63);
        if ((v64 & 1) != 0)
        {
          v65 = *(_QWORD *)(v61 + 16);
          v66 = *(_QWORD *)(v61 + 24);
          sub_1BDDB6CA4(v65, v66);
          sub_1BDFC0BD8(v65, v66, v96);
          sub_1BDDB796C(v65, v66);
          sub_1BDFC0C74(v96);
          swift_release();
        }
        swift_release();
        ++v60;
      }
      while (v93 != v60);
      swift_bridgeObjectRelease();
      v39 = v84;
      v7 = v89;
    }
    v67 = v86;
    v96[0] = v86;
    v68 = v94;
    v69 = v95;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDF18BBC(v68, v69, 0, v39, (uint64_t)&off_1E7759388);
    v71 = v70;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDFBEB44(v96);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)v96;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDFBC1D4(v71, v92);
    swift_bridgeObjectRelease();
    v72 = *(_QWORD *)(v7 + 32);
    v98[0] = v67;
    v73 = v72 + *(_QWORD *)(*(_QWORD *)v72 + 96);
    swift_beginAccess();
    v75 = type metadata accessor for Capsule(0, v91, *(_QWORD *)(v90 + 16), v74);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 48))(v73, 1, v75) == 1)
    {
      __break(1u);
      JUMPOUT(0x1BDFBC1C4);
    }
    swift_retain();
    sub_1BE1703A4((uint64_t)v98, v75, v39, v76);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_1BDFBEB44(v83);
    goto LABEL_4;
  }
}

void sub_1BDFBC1D4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  unsigned int v17;
  void *v18;
  void *v19;
  id v20;
  _QWORD v21[2];
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v5 = sub_1BE1B1DF0();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_init);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_3;
LABEL_11:
    v20 = a2;

    return;
  }
  v22 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_11;
LABEL_3:
  v9 = (void *)objc_opt_self();
  v23 = v2 + qword_1EF549050;
  v24 = v9;
  v10 = a2;
  swift_bridgeObjectRetain();
  v21[1] = a1;
  v11 = (unint64_t *)(a1 + 40);
  while (1)
  {
    v13 = *(v11 - 1);
    v12 = *v11;
    sub_1BDDB6CA4(v13, *v11);
    aBlock = sub_1BE1B1E74();
    v28 = v14;
    v35 = 47;
    v36 = 0xE100000000000000;
    v33 = 95;
    v34 = 0xE100000000000000;
    sub_1BDDC8C50();
    sub_1BE1B2F30();
    swift_bridgeObjectRelease();
    sub_1BE1B1DA8();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v24, sel_defaultManager);
    sub_1BE1B1DE4();
    v16 = (void *)sub_1BE1B27A4();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v15, sel_fileExistsAtPath_, v16);

    if (v17)
      break;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
    sub_1BDDB796C(v13, v12);
LABEL_5:
    v11 += 2;
    if (!--v8)
      goto LABEL_9;
  }
  v18 = (void *)sub_1BE1B1D90();
  v31 = sub_1BDFB74C4;
  v32 = 0;
  aBlock = MEMORY[0x1E0C809B0];
  v28 = 1107296256;
  v29 = sub_1BDE30BE4;
  v30 = &block_descriptor_62;
  v19 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v22, sel_coordinateWritingItemAtURL_options_error_byAccessor_, v18, 1, 0, v19);
  _Block_release(v19);

  sub_1BDDB796C(v13, v12);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
  if ((swift_isEscapingClosureAtFileLocation() & 1) == 0)
    goto LABEL_5;
  __break(1u);
LABEL_9:

  swift_bridgeObjectRelease();
}

uint64_t sub_1BDFBC4F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRDataStoreBundleNonCoordinated.AssetClass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDataStoreBundleNonCoordinated.AssetClass);
}

uint64_t sub_1BDFBC524()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t sub_1BDFBC550()
{
  return sub_1BDFBC55C();
}

uint64_t sub_1BDFBC55C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CRDataStoreBundleNonCoordinated.CoordinatorWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDataStoreBundleNonCoordinated.CoordinatorWrapper);
}

uint64_t sub_1BDFBC5A0()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sub_1BDFBC5C4()
{
  unint64_t v0;

  sub_1BDFC2C10();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t sub_1BDFBC664(uint64_t a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  char *v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  id v20;
  void *v21;
  unsigned int v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  dispatch_group_t v42;
  NSObject *v43;
  uint64_t v44;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  dispatch_group_t v51;
  uint64_t v52;
  void (*v53)(char *, char *);
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61[4];

  v54 = a2;
  v61[3] = *(id *)MEMORY[0x1E0C80C00];
  v4 = *v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v5);
  v58 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B1DF0();
  v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v9 = MEMORY[0x1E0C80A78](v7);
  v57 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - v10;
  v55 = v2;
  v59 = v12;
  v60 = v13;
  v53 = *(void (**)(char *, char *))(v13 + 16);
  v53((char *)&v47 - v10, (char *)v2 + qword_1EF549050);
  v14 = (void *)objc_opt_self();
  v15 = objc_msgSend(v14, sel_defaultManager);
  v16 = v11;
  sub_1BE1B1DE4();
  v17 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v15, sel_fileExistsAtPath_, v17);

  if ((v18 & 1) == 0)
  {
    v20 = objc_msgSend(v14, sel_defaultManager);
    v21 = (void *)sub_1BE1B1D90();
    v61[0] = 0;
    v22 = objc_msgSend(v20, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v21, 1, 0, v61);

    if (!v22)
    {
      v46 = v61[0];
      sub_1BE1B1D3C();

      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v16, v59);
    }
    v23 = v61[0];
  }
  v52 = v8;
  v25 = *(_QWORD *)(v4 + 80);
  v24 = *(_QWORD *)(v4 + 88);
  type metadata accessor for CRDataStoreBundleNonCoordinated.AssetClass(0, v25, v24, v19);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = MEMORY[0x1E0DEE9D8];
  MEMORY[0x1E0C80A78](v26);
  *(&v47 - 2) = (uint64_t)v16;
  swift_bridgeObjectRetain();
  v27 = v56;
  v28 = sub_1BDFB8AA8((uint64_t)sub_1BDFC588C, (uint64_t)(&v47 - 4), a1);
  if (*(_QWORD *)(v28 + 16))
  {
    v51 = dispatch_group_create();
    dispatch_group_enter(v51);
    type metadata accessor for CRDataStoreBundleNonCoordinated.CoordinatorWrapper(0, v25, v24, v29);
    v49 = swift_allocObject();
    v30 = v54;
    *(_QWORD *)(v49 + 16) = v54;
    v31 = v30;
    v54 = (void *)v28;
    v32 = v58;
    sub_1BE1B2AA4();
    v33 = sub_1BE1B2ABC();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
    v50 = v16;
    v48 = v24;
    v34 = v59;
    ((void (*)(char *, char *, uint64_t))v53)(v57, v16, v59);
    v35 = v60;
    v36 = (*(unsigned __int8 *)(v60 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    v37 = (v52 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = v27;
    v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    v39 = v25;
    v40 = (char *)swift_allocObject();
    *((_QWORD *)v40 + 2) = 0;
    *((_QWORD *)v40 + 3) = 0;
    v41 = v48;
    *((_QWORD *)v40 + 4) = v39;
    *((_QWORD *)v40 + 5) = v41;
    *((_QWORD *)v40 + 6) = v54;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v40[v36], v57, v34);
    *(_QWORD *)&v40[v37] = v49;
    *(_QWORD *)&v40[v38] = v26;
    v42 = v51;
    *(_QWORD *)&v40[(v38 + 15) & 0xFFFFFFFFFFFFFFF8] = v51;
    swift_retain();
    swift_retain();
    v43 = v42;
    sub_1BE193A0C(v58, (uint64_t)&unk_1EF52F130, (uint64_t)v40);
    swift_release();
    sub_1BE1B2DF8();
    swift_beginAccess();
    v44 = swift_bridgeObjectRetain();
    sub_1BDF30618(v44);
    swift_endAccess();
    swift_release();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v50, v34);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v16, v59);
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BDFBCB04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  _QWORD v12[6];

  v2 = sub_1BE1B1DF0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  sub_1BDDB6CA4(v6, v7);
  v12[4] = sub_1BE1B1E74();
  v12[5] = v8;
  v12[2] = 47;
  v12[3] = 0xE100000000000000;
  v12[0] = 95;
  v12[1] = 0xE100000000000000;
  sub_1BDDC8C50();
  sub_1BE1B2F30();
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v6, v7);
  sub_1BE1B1DA8();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v10 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  LODWORD(a1) = objc_msgSend(v9, sel_fileExistsAtPath_, v10);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return a1 ^ 1;
}

uint64_t sub_1BDFBCCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[22] = a7;
  v8[23] = a8;
  v8[20] = a5;
  v8[21] = a6;
  v8[19] = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C20);
  v8[24] = v9;
  v8[25] = *(_QWORD *)(v9 - 8);
  v8[26] = swift_task_alloc();
  v10 = sub_1BE1B1DF0();
  v8[27] = v10;
  v8[28] = *(_QWORD *)(v10 - 8);
  v8[29] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BDFBCD4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 240) = v2;
  if (v2)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 248) = 0;
    *(_QWORD *)(v0 + 256) = v3;
    v4 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD **)(v1 + 32);
    *(_QWORD *)(v0 + 264) = v5;
    v6 = v5[2];
    v7 = v5[3];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1BDDB6CA4(v6, v7);
    *(_QWORD *)(v0 + 104) = sub_1BE1B1E74();
    *(_QWORD *)(v0 + 112) = v8;
    *(_QWORD *)(v0 + 120) = 47;
    *(_QWORD *)(v0 + 128) = 0xE100000000000000;
    *(_QWORD *)(v0 + 136) = 95;
    *(_QWORD *)(v0 + 144) = 0xE100000000000000;
    sub_1BDDC8C50();
    sub_1BE1B2F30();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v6, v7);
    sub_1BE1B1DA8();
    swift_bridgeObjectRelease();
    v9 = swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v9;
    *(_QWORD *)(v9 + 16) = v13;
    *(_QWORD *)(v9 + 24) = v4;
    v10 = v5[4];
    *(_QWORD *)(v0 + 280) = v10;
    *(_QWORD *)(v0 + 288) = *(_QWORD *)(v10 + 24);
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    v12 = *(NSObject **)(v0 + 184);
    *(_QWORD *)(*(_QWORD *)(v0 + 176) + 16) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    dispatch_group_leave(v12);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1BDFBCF24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[25];
  v1 = v0[26];
  v3 = v0[24];
  v0[2] = v0;
  v0[3] = sub_1BDFBD004;
  v4 = swift_continuation_init();
  v5 = swift_allocObject();
  v0[10] = &unk_1EF52F150;
  *(_QWORD *)(v5 + 16) = v4;
  v0[11] = v5;
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
  sub_1BE1B2AEC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_continuation_await();
}

uint64_t sub_1BDFBD004()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v5;

  v1 = (_QWORD *)*v0;
  v2 = (_QWORD *)*v0;
  v5 = (char *)&dword_1EF52F140 + dword_1EF52F140;
  v3 = (_QWORD *)swift_task_alloc();
  v1[37] = v3;
  *v3 = v2;
  v3[1] = sub_1BDFBD08C;
  return ((uint64_t (*)(_QWORD, _QWORD, void *, _QWORD))v5)(v1[33], 0, &unk_1EF52F148, v1[34]);
}

uint64_t sub_1BDFBD08C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    *(_BYTE *)(v4 + 304) = a1;
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_1BDFBD10C()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*(_BYTE *)(v0 + 304) & 1) != 0)
  {
    v2 = *(_QWORD **)(v0 + 256);
  }
  else
  {
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v2 = *(_QWORD **)(v0 + 256);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v2 = sub_1BDE06BF0(0, v2[2] + 1, 1, *(_QWORD **)(v0 + 256));
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_1BDE06BF0((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v5 = *(_QWORD *)(v0 + 264);
    v2[2] = v4 + 1;
    v2[v4 + 4] = v5;
  }
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  v9 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 216);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  if (v6 + 1 == v7)
  {
    swift_bridgeObjectRelease();
    v11 = *(NSObject **)(v0 + 184);
    *(_QWORD *)(*(_QWORD *)(v0 + 176) + 16) = v2;
    swift_bridgeObjectRelease();
    dispatch_group_leave(v11);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 248) + 1;
    *(_QWORD *)(v0 + 248) = v13;
    *(_QWORD *)(v0 + 256) = v2;
    v14 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD **)(*(_QWORD *)(v0 + 152) + 8 * v13 + 32);
    *(_QWORD *)(v0 + 264) = v15;
    v16 = v15[2];
    v17 = v15[3];
    swift_retain();
    sub_1BDDB6CA4(v16, v17);
    *(_QWORD *)(v0 + 104) = sub_1BE1B1E74();
    *(_QWORD *)(v0 + 112) = v18;
    *(_QWORD *)(v0 + 120) = 47;
    *(_QWORD *)(v0 + 128) = 0xE100000000000000;
    *(_QWORD *)(v0 + 136) = 95;
    *(_QWORD *)(v0 + 144) = 0xE100000000000000;
    sub_1BDDC8C50();
    sub_1BE1B2F30();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v16, v17);
    sub_1BE1B1DA8();
    swift_bridgeObjectRelease();
    v19 = swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v19;
    *(_QWORD *)(v19 + 16) = v21;
    *(_QWORD *)(v19 + 24) = v14;
    v20 = v15[4];
    *(_QWORD *)(v0 + 280) = v20;
    *(_QWORD *)(v0 + 288) = *(_QWORD *)(v20 + 24);
    swift_retain();
    return swift_task_switch();
  }
}

uint64_t sub_1BDFBD38C()
{
  return swift_release();
}

uint64_t sub_1BDFBD394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  v5 = sub_1BE1B1DF0();
  v4[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[13] = v6;
  v4[14] = *(_QWORD *)(v6 + 64);
  v4[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BDFBD3FC()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;

  v1 = *(void **)(v0[10] + 16);
  if (v1)
  {
    v2 = *(id *)(v0[10] + 16);
  }
  else
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_init);
    v1 = 0;
  }
  v3 = v0[15];
  v4 = v0[12];
  v5 = v0[13];
  v6 = v0[9];
  v7 = v1;
  v8 = (void *)sub_1BE1B1D90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v3, v4);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1BDFC5B6C;
  *(_QWORD *)(v11 + 24) = v10;
  v0[6] = sub_1BDFC5BB8;
  v0[7] = v11;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1BDE30BE4;
  v0[5] = &block_descriptor_25_1;
  v12 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_coordinateWritingItemAtURL_options_error_byAccessor_, v8, 0, 0, v12);

  _Block_release(v12);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)v0[8] = 1;
    swift_task_dealloc();
    return ((uint64_t (*)(void))v0[1])();
  }
  return result;
}

void sub_1BDFBD5E4()
{
  id v0;
  void *v1;
  void *v2;
  unsigned int v3;
  id v4;
  id v5;
  void *v6;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v1 = (void *)sub_1BE1B1D90();
  v2 = (void *)sub_1BE1B1D90();
  v7[0] = 0;
  v3 = objc_msgSend(v0, sel_copyItemAtURL_toURL_error_, v1, v2, v7);

  if (v3)
  {
    v4 = v7[0];
  }
  else
  {
    v5 = v7[0];
    v6 = (void *)sub_1BE1B1D3C();

    swift_willThrow();
  }
}

void sub_1BDFBD708()
{
  id v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v4;
  void *v5;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v1 = (void *)sub_1BE1B1D90();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_removeItemAtURL_error_, v1, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    v5 = (void *)sub_1BE1B1D3C();

    swift_willThrow();
  }
}

uint64_t sub_1BDFBD814(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v10;
  uint64_t result;
  signed __int16 v12;
  uint64_t *v13;
  int v14;

  v6 = v4;
  v10 = (uint64_t *)(v4 + qword_1EF549030);
  swift_beginAccess();
  sub_1BDFBA624((void (*)(uint64_t *__return_ptr))sub_1BDFC4164, v10, a1);
  result = swift_endAccess();
  if (!v5)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    v13 = (uint64_t *)(v6 + qword_1EF549048);
    swift_beginAccess();
    v14 = sub_1BDFBA714(v12, v13);
    swift_endAccess();
    return v14 & 0x1FFFF;
  }
  return result;
}

uint64_t sub_1BDFBD930(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  void *v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = a4;
  v6 = a2[1];
  v31 = *a2;
  v7 = a2[2];
  v32 = v6;
  v33 = v7;
  v8 = *(void **)(a3 + 40);
  type metadata accessor for CREncoder();
  inited = swift_initStackObject();
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v10;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = v8;
  *(_QWORD *)(inited + 24) = v10;
  *(_BYTE *)(inited + 72) = 1;
  v30 = v32;
  v12 = v8;
  v13 = sub_1BDE18E48(&v30);
  if (v4)
  {
    swift_setDeallocating();
    CREncoder.deinit();
    return swift_deallocClassInstance();
  }
  else
  {
    v16 = v13;
    v28 = v14;
    v17 = a3;
    swift_setDeallocating();
    CREncoder.deinit();
    result = swift_deallocClassInstance();
    v18 = v31;
    if ((_QWORD)v31)
    {
      *(_QWORD *)&v30 = v31;
      swift_retain();
      sub_1BDFBD814(&v29, (uint64_t)&v30, (uint64_t)&type metadata for AnyCRDT, (uint64_t)&protocol witness table for AnyCRDT);
      swift_release();
      v19 = v29;
      v20 = *(void **)(v17 + 40);
      v21 = swift_allocObject();
      v22 = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v21 + 32) = MEMORY[0x1E0DEE9E0];
      *(_QWORD *)(v21 + 40) = v10;
      *(_QWORD *)(v21 + 48) = v10;
      *(_QWORD *)(v21 + 56) = v22;
      *(_QWORD *)(v21 + 64) = v10;
      *(_QWORD *)(v21 + 80) = 0;
      *(_QWORD *)(v21 + 88) = 0;
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = v10;
      *(_BYTE *)(v21 + 72) = v19;
      *(_QWORD *)&v30 = v18;
      swift_retain();
      v23 = v20;
      v24 = sub_1BDE17DF8((uint64_t *)&v30);
      v26 = v25;
      swift_release();
      v27 = swift_release();
      MEMORY[0x1E0C80A78](v27);
      sub_1BE1B2E40();
      sub_1BDDB796C(v24, v26);
      return sub_1BDDB796C(v16, v28);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_1BDFBDC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v13 = *(_QWORD *)(a6 + 32);
  v14 = *(_QWORD *)(a6 + 40);
  v15 = *(id *)(a1 + 40);
  v16 = sub_1BDDFA0DC(v15, a2, a3, a4, a5, v13, v14, a7, a8);
  v18 = v17;

  if (!v20)
  {
    swift_beginAccess();
    sub_1BDDB99FC(v16, v18);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BDFBDD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(id *)(a1 + 40);
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v9 = sub_1BDDB6CE8(v7);
  v10 = sub_1BDDC4278((uint64_t)&unk_1E7759DC8);
  v12 = v11;
  v13 = sub_1BDDFA0DC(v6, a2, a3, 0, 0xC000000000000000, v8, v9, v10, v11);
  if (v3)
  {
    sub_1BDDB796C(v10, v12);

  }
  else
  {
    v15 = v13;
    v16 = v14;
    sub_1BDDB796C(v10, v12);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDDB99FC(v15, v16);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

const char *sub_1BDFBDE8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  sqlite3_stmt *v4;
  const char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 56);
  sub_1BE1B284C();
  v3 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (v1)
    return (const char *)swift_bridgeObjectRelease();
  v4 = v3;
  if (sqlite3_step(v3) == 101)
  {
LABEL_5:
    sqlite3_finalize(v4);
    return (const char *)swift_bridgeObjectRelease();
  }
  result = sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
  if (result)
  {
    v6 = sub_1BE1B2864();
    v8 = v7;
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = v8;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

const char *sub_1BDFBDF88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  sqlite3_stmt *v4;
  const char *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 56);
  sqlite3_step(*(sqlite3_stmt **)(v2 + 128));
  sqlite3_reset(*(sqlite3_stmt **)(v2 + 128));
  sub_1BE1B284C();
  v3 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (v1)
    return (const char *)swift_bridgeObjectRelease();
  v4 = v3;
  if (sqlite3_step(v3) == 101)
  {
LABEL_5:
    sqlite3_finalize(v4);
    return (const char *)swift_bridgeObjectRelease();
  }
  result = sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
  if (result)
  {
    v6 = sub_1BE1B2864();
    v8 = v7;
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = v8;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDFBE08C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v10;
  id v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  v10 = (_QWORD *)(a3 + 16);
  v11 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v12 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_fileExistsAtPath_, v12);

  if (v13)
  {
    if (*(_BYTE *)(a2 + qword_1EF549010) == 1)
      sub_1BE108F84(a5, a6, a1, aBlock);
    else
      sub_1BE109230(a5, a6, a1, aBlock);
    v14 = aBlock[0];
    swift_beginAccess();
    *v10 = v14;
    swift_release();
  }
  result = swift_beginAccess();
  if (!*v10)
  {
    sub_1BE108BC8(a5, a6, aBlock);
    v16 = aBlock[0];
    v17 = *(NSObject **)(a2 + 80);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = a2;
    *(_QWORD *)(v18 + 24) = v16;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = sub_1BDFC5C6C;
    *(_QWORD *)(v19 + 24) = v18;
    aBlock[4] = sub_1BDE28190;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDD843A8;
    aBlock[3] = &block_descriptor_48;
    v20 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v17, v20);
    _Block_release(v20);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      swift_beginAccess();
      *v10 = v16;
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1BDFBE304(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;

  v3 = (_QWORD **)(a1 + qword_1EF549018);
  swift_beginAccess();
  v4 = *v3;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_1BDE06BF0(0, v4[2] + 1, 1, v4);
    *v3 = v4;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    v4 = sub_1BDE06BF0((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    *v3 = v4;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = a2;
  return swift_endAccess();
}

void sub_1BDFBE3E0(char *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1BE1B1F58();
  MEMORY[0x1E0C80A78](v6);
  v17 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[6] = 0;
  v15 = v8;
  v16 = v2 + 6;
  v2[2] = 0;
  v2[7] = 0;
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v14((char *)v2 + qword_1EF549080, 1, 1, v6);
  v2[3] = a2;
  v2[4] = a1;
  v9 = *(_QWORD *)&a1[OBJC_IVAR___CRContext_assetManager];
  type metadata accessor for CRDataStorePartialDecodeContext();
  v10 = (_QWORD *)swift_allocObject();
  v11 = MEMORY[0x1E0DEE9E0];
  v10[2] = MEMORY[0x1E0DEE9E0];
  v10[3] = v11;
  v10[4] = v9;
  v2[5] = v10;
  v18 = a1;
  swift_retain();
  swift_retain();
  sub_1BDDC4278((uint64_t)&unk_1E7759360);
  __asm { BR              X10 }
}

_QWORD *sub_1BDFBE554()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v7 - 144) = v6;
  *(_WORD *)(v7 - 136) = v3;
  *(_BYTE *)(v7 - 134) = BYTE2(v3);
  *(_BYTE *)(v7 - 133) = BYTE3(v3);
  *(_BYTE *)(v7 - 132) = BYTE4(v3);
  *(_BYTE *)(v7 - 131) = BYTE5(v3);
  swift_retain_n();
  sub_1BDDFA5C8(v7 - 144, v7 - 144 + BYTE6(v3), v1, (uint64_t *)(v7 - 120));
  if (v2)
  {
    swift_release();
    swift_release();

    sub_1BDDB796C(v6, v3);
    swift_release();
    swift_release();
  }
  else
  {
    sub_1BDDB796C(v6, v3);
    swift_release_n();
    v8 = *(_QWORD *)(v7 - 112);
    if (v8 >> 60 == 15)
    {
      swift_release();
      sub_1BDDFCAFC();
      swift_allocError();
      *(_OWORD *)v9 = xmmword_1BE1C0610;
      *(_BYTE *)(v9 + 16) = 0;
      swift_willThrow();

      swift_release();
    }
    else
    {
      *(_QWORD *)(v7 - 240) = v4;
      *(_QWORD *)(v7 - 216) = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 208) = v5;
      v10 = *(_QWORD *)(v7 - 104);
      *(_QWORD *)(v7 - 224) = *(_QWORD *)(v7 - 96);
      v11 = v0[5];
      type metadata accessor for CRDecoder(0);
      v12 = swift_allocObject();
      v13 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = v13;
      *(_QWORD *)(v12 + 32) = v13;
      *(_QWORD *)(v12 + 40) = MEMORY[0x1E0DEE9E0];
      *(_BYTE *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      v14 = v12 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
      v15 = type metadata accessor for Proto_CRDT(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
      v16 = v12 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
      v17 = type metadata accessor for Proto_Value(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
      *(_QWORD *)(v12 + 16) = v11;
      v18 = *(_QWORD *)(v7 - 216);
      *(_QWORD *)(v7 - 232) = v10;
      v19 = v10;
      v20 = *(_QWORD *)(v7 - 224);
      sub_1BDFC5D14(v18, v8, v19, v20);
      swift_retain();
      swift_release();
      *(_BYTE *)(v12 + 49) = 1;
      v21 = *(_QWORD *)(v7 - 176);
      sub_1BDE0F9D8((_OWORD *)(v7 - 160), v21, v18, v8);

      swift_release();
      v22 = *(_QWORD *)(v7 - 232);
      sub_1BDFC5850(v18, v8, v22, v20);
      sub_1BDFC5850(v18, v8, v22, v20);
      swift_setDeallocating();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDD86E30(v12 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
      sub_1BDD86E30(v12 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
      swift_deallocClassInstance();
      v23 = *(_QWORD *)(v7 - 160);
      v24 = *(_QWORD *)(v7 - 152);
      v25 = *(_QWORD *)(v7 - 208);
      v26 = *(_QWORD *)(v7 - 240);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 192) + 32))(v25, v21, v26);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 - 200))(v25, 0, 1, v26);
      swift_beginAccess();
      v27 = v0[6];
      v0[6] = v23;
      v0[7] = v24;
      sub_1BDDC8EA0(v27);
      v28 = (uint64_t)v0 + qword_1EF549080;
      swift_beginAccess();
      sub_1BDFC5CCC(v25, v28);
      swift_endAccess();
    }
  }
  return v0;
}

uint64_t sub_1BDFBEB44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  swift_beginAccess();
  result = *(_QWORD *)(v1 + 48);
  if (result)
  {
    v4 = *(_QWORD *)(v1 + 56);
    *a1 = result;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDFBEB9C(void (*a1)(uint64_t))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  void *v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38[2];
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44[2];
  uint64_t v45[2];

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Capsule(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16), v8);
  v10 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v38 - v11;
  result = swift_beginAccess();
  if (!v1[6])
  {
    __break(1u);
    goto LABEL_12;
  }
  v41 = v7;
  a1((uint64_t)(v1 + 6));
  swift_endAccess();
  v14 = (void *)v1[4];
  type metadata accessor for CREncoder();
  inited = swift_initStackObject();
  v16 = MEMORY[0x1E0DEE9D8];
  v17 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 48) = v16;
  *(_QWORD *)(inited + 56) = v17;
  *(_QWORD *)(inited + 64) = v16;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = v14;
  *(_QWORD *)(inited + 24) = v16;
  *(_BYTE *)(inited + 72) = 1;
  v38[1] = (void *)v1[3];
  sub_1BDFB73F0((uint64_t)v12);
  v18 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, v9);
  if ((_DWORD)result == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  Capsule<>.rootID.getter(v45);
  v19 = v45[0];
  v20 = v45[1];
  v21 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  v38[0] = v14;
  result = v21(v12, v9);
  v39 = v19;
  v44[0] = v19;
  v44[1] = v20;
  v40 = v20;
  v22 = v2[6];
  if (!v22)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v23 = v2[7];
  *(_QWORD *)&v43 = v2[6];
  *((_QWORD *)&v43 + 1) = v23;
  v24 = (uint64_t)v2 + qword_1EF549080;
  swift_beginAccess();
  v25 = (uint64_t)v41;
  sub_1BDD86DEC(v24, (uint64_t)v41, &qword_1ED6F3CD0);
  v26 = sub_1BE1B1F58();
  v27 = *(_QWORD *)(v26 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26);
  if ((_DWORD)result == 1)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = (uint64_t)v42;
  v29 = sub_1BDE172F0(v44, &v43, 0, v25);
  if (v28)
  {
    swift_release();
    sub_1BDDC8EA0(v22);
    sub_1BDDB796C(v39, v40);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  }
  else
  {
    v31 = v30;
    v42 = v29;
    swift_release();
    sub_1BDDC8EA0(v22);
    sub_1BDDB796C(v39, v40);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    swift_retain();
    v32 = MEMORY[0x1E0DEE9D8];
    v33 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v34 = sub_1BDDB6CE8(v32);
    v35 = sub_1BDDC4278((uint64_t)&unk_1E7759310);
    v37 = v36;
    sub_1BDDFA0DC(v38[0], (uint64_t)v42, v31, 0, 0xC000000000000000, v33, v34, v35, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v35, v37);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1BDDB796C((uint64_t)v42, v31);
  }
}

uint64_t sub_1BDFBEF9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + qword_1EF549080;
  swift_beginAccess();
  sub_1BDD86DEC(v6, (uint64_t)v5, &qword_1ED6F3CD0);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  __break(1u);
  return result;
}

uint64_t sub_1BDFBF078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62[2];
  uint64_t v63[2];

  v5 = v4;
  v7 = *(_QWORD *)(*v5 + 80);
  v60 = *(_QWORD *)(*v5 + 88);
  v8 = type metadata accessor for Capsule(255, v7, *(_QWORD *)(v60 + 16), a4);
  v9 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v51 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v59 = (uint64_t)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v51 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v51 - v18;
  v20 = sub_1BE1B1F58();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, a1, v20);
  v58 = v21;
  v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
  v57 = v20;
  v22(v19, 0, 1, v20);
  sub_1BDFC5C84((uint64_t)v19, (uint64_t)v17);
  v23 = (uint64_t)v5 + qword_1EF549080;
  swift_beginAccess();
  v56 = v23;
  sub_1BDFC5CCC((uint64_t)v17, v23);
  swift_endAccess();
  v24 = (void *)v5[4];
  type metadata accessor for CREncoder();
  inited = swift_initStackObject();
  v26 = MEMORY[0x1E0DEE9D8];
  v27 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v26;
  *(_QWORD *)(inited + 48) = v26;
  *(_QWORD *)(inited + 56) = v27;
  *(_QWORD *)(inited + 64) = v26;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = v24;
  *(_QWORD *)(inited + 24) = v26;
  *(_BYTE *)(inited + 72) = 1;
  v53 = v5[3];
  sub_1BDFB73F0((uint64_t)v11);
  v28 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v11, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  Capsule<>.rootID.getter(v63);
  v30 = v8;
  v31 = v63[0];
  v32 = v63[1];
  v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v34 = v24;
  v33(v11, v30);
  v54 = v31;
  v62[0] = v31;
  v62[1] = v32;
  v60 = v32;
  result = swift_beginAccess();
  v35 = v5[6];
  if (!v35)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v52 = v34;
  v36 = v5[7];
  *(_QWORD *)&v61 = v35;
  *((_QWORD *)&v61 + 1) = v36;
  v37 = v59;
  sub_1BDD86DEC(v56, v59, &qword_1ED6F3CD0);
  v38 = v58;
  v39 = v57;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v37, 1, v57);
  if ((_DWORD)result == 1)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40 = v55;
  v41 = sub_1BDE172F0(v62, &v61, 0, v37);
  v56 = v42;
  if (v40)
  {
    swift_release();
    sub_1BDDC8EA0(v35);
    sub_1BDDB796C(v54, v60);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
  }
  else
  {
    v43 = (uint64_t)v41;
    swift_release();
    sub_1BDDC8EA0(v35);
    sub_1BDDB796C(v54, v60);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    swift_retain();
    v44 = MEMORY[0x1E0DEE9D8];
    v45 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v46 = sub_1BDDB6CE8(v44);
    v47 = sub_1BDDC4278((uint64_t)&unk_1E7759338);
    v49 = v48;
    v50 = v56;
    v60 = v45;
    sub_1BDDFA0DC(v52, v43, v56, 0, 0xC000000000000000, v45, v46, v47, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v47, v49);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_1BDDB796C(v43, v50);
  }
}

void sub_1BDFBF524(uint64_t a1)
{
  __asm { BR              X10 }
}

BOOL sub_1BDFBF574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v2;
  v6 = v1;
  v7 = BYTE2(v1);
  v8 = BYTE3(v1);
  v9 = BYTE4(v1);
  v10 = BYTE5(v1);
  swift_retain();
  sub_1BDDFADAC((uint64_t)&v5, (uint64_t)&v5 + BYTE6(v1), v0, &v4);
  swift_release();
  return v4;
}

id sub_1BDFBF748(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  id v18;
  void *v19;
  id v20;
  _QWORD v22[8];
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = sub_1BE1B1DF0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v22 - v10;
  v12 = *(_QWORD *)(v2 + 24);
  v13 = (uint64_t *)(v12 + qword_1EF549018);
  swift_beginAccess();
  v14 = *v13;
  if (*(_QWORD *)(*v13 + 16))
  {
    v22[0] = v12;
    v22[1] = v9;
    v22[2] = v6;
    v22[3] = v11;
    v22[4] = v5;
    v15 = __OFSUB__(HIDWORD(a1), (_DWORD)a1);
    v23 = v15;
    v22[7] = HIDWORD(a1) - (int)a1;
    v25 = BYTE6(a2);
    swift_bridgeObjectRetain();
    v24 = a2 >> 62;
    v22[5] = a1;
    v22[6] = a2;
    __asm { BR              X8 }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v12 + qword_1EF549050, v5);
  v31 = sub_1BE1B1E74();
  v32 = v16;
  v29 = 47;
  v30 = 0xE100000000000000;
  v27 = 95;
  v28 = 0xE100000000000000;
  sub_1BDDC8C50();
  sub_1BE1B2F30();
  swift_bridgeObjectRelease();
  sub_1BE1B1DA8();
  swift_bridgeObjectRelease();
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v9, v5);
  v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v19 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v18, sel_fileExistsAtPath_, v19);

  v17(v11, v5);
  return v20;
}

void sub_1BDFBFD80(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDFBFDE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  swift_retain();
  sub_1BDDFB200(&v6, (uint64_t)&v6 + BYTE6(v3), v0, v4, &v12);
  if (v1)
  {
    sub_1BDDCCD20(v12);
    return swift_release();
  }
  else
  {
    swift_release();
    return v12;
  }
}

void sub_1BDFBFFF4(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDFC005C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned __int8 v12;

  v6 = v2;
  v7 = v1;
  v8 = BYTE2(v1);
  v9 = BYTE3(v1);
  v10 = BYTE4(v1);
  v11 = BYTE5(v1);
  swift_retain_n();
  sub_1BDDFAE54((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v1), v0, v4, &v12);
  sub_1BDDB796C(v2, v1);
  result = swift_release_n();
  if (!v3)
    return v12;
  return result;
}

unint64_t sub_1BDFC02A8(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(_QWORD *);
  uint64_t v13;
  _QWORD v14[5];
  _QWORD v15[2];
  uint64_t v16;
  unint64_t v17;

  v3 = *a1;
  v4 = a1[1];
  v16 = *a1;
  v17 = v4;
  v15[0] = 0;
  sub_1BDFC0D74((uint64_t)&v16, (uint64_t)v15, (uint64_t)&type metadata for AnyCRDT, (uint64_t)&off_1E775A650);
  if (!v2)
  {
    v5 = v14[0];
    if (v14[0])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = type metadata accessor for RetainVisitor();
      v7 = swift_allocObject();
      v8 = MEMORY[0x1E0DEE9D8];
      v9 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
      v10 = sub_1BDDB6CE8(v8);
      *(_QWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 24) = v10;
      v14[3] = v6;
      v14[4] = &off_1E7755DD0;
      v14[0] = v7;
      v11 = *(void (**)(_QWORD *))(*(_QWORD *)v5 + 120);
      swift_retain();
      v11(v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      swift_release();
      swift_beginAccess();
      v1 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      v16 = 10278;
      v17 = 0xE200000000000000;
      v15[0] = v3;
      v15[1] = v4;
      sub_1BDE095D4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v1 = 0xD000000000000011;
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v13 = 0xD000000000000011;
      *(_QWORD *)(v13 + 8) = 0x80000001BE1CF540;
      *(_BYTE *)(v13 + 16) = 0;
      swift_willThrow();
    }
  }
  return v1;
}

uint64_t sub_1BDFC04B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  *(_QWORD *)&v22 = *a1;
  result = sub_1BDFC02A8((uint64_t *)&v22);
  if (v4)
    return result;
  v8 = result;
  if (!result)
  {
    *(_QWORD *)&v22 = 0;
    *((_QWORD *)&v22 + 1) = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v22 = 0xD000000000000015;
    *((_QWORD *)&v22 + 1) = 0x80000001BE1CF5C0;
    sub_1BDE095D4();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    v20 = v22;
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v21 = v20;
    *(_BYTE *)(v21 + 16) = 0;
    return swift_willThrow();
  }
  v23 = 0;
  result = swift_bridgeObjectRelease();
  v9 = 0;
  v10 = v8 + 64;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v8 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v9 << 6);
      goto LABEL_7;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      return swift_release();
    v18 = *(_QWORD *)(v10 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        return swift_release();
      v18 = *(_QWORD *)(v10 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          return swift_release();
        v18 = *(_QWORD *)(v10 + 8 * v9);
        if (!v18)
        {
          v9 = v17 + 3;
          if (v17 + 3 >= v14)
            return swift_release();
          v18 = *(_QWORD *)(v10 + 8 * v9);
          if (!v18)
          {
            v9 = v17 + 4;
            if (v17 + 4 >= v14)
              return swift_release();
            v18 = *(_QWORD *)(v10 + 8 * v9);
            if (!v18)
              break;
          }
        }
      }
    }
LABEL_26:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_7:
    v22 = *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v16);
    result = (*(uint64_t (**)(__int128 *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a4 + 8))(&v22, &type metadata for AnyCRDT, &protocol witness table for AnyCRDT, a3, a4);
  }
  v19 = v17 + 5;
  if (v19 >= v14)
    return swift_release();
  v18 = *(_QWORD *)(v10 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      return swift_release();
    v18 = *(_QWORD *)(v10 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1BDFC0760(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v9 = *a3;
  v8 = a3[1];
  v10 = *a4;
  v12 = *a5;
  v11 = a5[1];
  *(_QWORD *)&v34 = *a3;
  *((_QWORD *)&v34 + 1) = v8;
  v30[0] = 0;
  sub_1BDFC0D74((uint64_t)&v34, (uint64_t)v30, (uint64_t)&type metadata for AnyCRDT, (uint64_t)&off_1E775A650);
  if (!v5)
  {
    v35 = v8;
    v28 = v11;
    if (v31)
    {
      v27 = a2;
      v29 = v31;
      v33 = v32;
      v13 = v35;
      v31 = v9;
      *(_QWORD *)&v32 = v35;
      v14 = sub_1BDFC02A8(&v31);
      if (v14)
      {
        v19 = v29;
        v25 = v15;
        v26 = v14;
        if (v10 != v29)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            v20 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 160))();
            swift_release();
            v19 = v20;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 96))(v10);
          v10 = v19;
        }
        sub_1BDDAF714(v28);
        sub_1BDDAF714(v12);
        v31 = v9;
        *(_QWORD *)&v32 = v13;
        v21 = v33;
        v34 = v33;
        v30[0] = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1BDFC20A4(&v31, &v34, v30, v26, v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *a1 = v10;
        *v27 = v21;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = 0;
        *(_QWORD *)&v32 = 0xE000000000000000;
        sub_1BE1B305C();
        swift_bridgeObjectRelease();
        v31 = 0xD000000000000015;
        *(_QWORD *)&v32 = 0x80000001BE1CF5C0;
        *(_QWORD *)&v34 = 10278;
        *((_QWORD *)&v34 + 1) = 0xE200000000000000;
        v30[0] = v9;
        v30[1] = v13;
        sub_1BDE095D4();
        sub_1BE1B284C();
        swift_bridgeObjectRelease();
        sub_1BE1B284C();
        sub_1BE1B284C();
        swift_bridgeObjectRelease();
        sub_1BE1B284C();
        v22 = v31;
        v23 = v32;
        sub_1BDDFCAFC();
        swift_allocError();
        *(_QWORD *)v24 = v22;
        *(_QWORD *)(v24 + 8) = v23;
        *(_BYTE *)(v24 + 16) = 0;
        swift_willThrow();
        swift_release();
      }
    }
    else
    {
      v31 = 0;
      *(_QWORD *)&v32 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      v31 = 0xD000000000000011;
      *(_QWORD *)&v32 = 0x80000001BE1CF540;
      *(_QWORD *)&v34 = 10278;
      *((_QWORD *)&v34 + 1) = 0xE200000000000000;
      *(_QWORD *)&v33 = v9;
      *((_QWORD *)&v33 + 1) = v35;
      sub_1BDE095D4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v16 = v31;
      v17 = v32;
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v18 = v16;
      *(_QWORD *)(v18 + 8) = v17;
      *(_BYTE *)(v18 + 16) = 0;
      swift_willThrow();
    }
  }
}

void sub_1BDFC0B50(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v6 = *a1;
  v5 = 0;
  sub_1BDFC0D74((uint64_t)&v6, (uint64_t)&v5, (uint64_t)&type metadata for AnyCRDT, (uint64_t)&off_1E775A650);
  if (!v2)
  {
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a2 = v4;
    }
    else
    {
      *a2 = 0;
    }
  }
}

uint64_t sub_1BDFC0BD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v8 = v3 + 16;
  v7 = *(void **)(v3 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 40) + OBJC_IVAR___CRContext_assetManager);
  v10 = v7;
  swift_retain();
  sub_1BDFB86F0(a1, a2, (uint64_t (*)(uint64_t))v7, v9, a3);

  return swift_release();
}

uint64_t sub_1BDFC0C74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;
  id v5;

  v2 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF52BCF8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE1B61B0;
  *(_QWORD *)(inited + 32) = v2;
  v4 = *(void **)(v1 + 16);
  v5 = v4;
  swift_retain();
  sub_1BDFBC664(inited, v4);

  swift_setDeallocating();
  return swift_arrayDestroy();
}

void sub_1BDFC0D34(__int128 *a1)
{
  uint64_t v1;
  __int128 v2;

  v2 = *a1;
  v1 = 0;
  sub_1BDFC0D74((uint64_t)&v2, (uint64_t)&v1, (uint64_t)&type metadata for AnyCRDT, (uint64_t)&off_1E775A650);
}

void sub_1BDFC0D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[56];
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v19 = a4;
  v24 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  v6 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v6);
  v17 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v16);
  v8 = sub_1BE1B2EE8();
  v9 = MEMORY[0x1E0C80A78](v8);
  v23 = *(_QWORD *)(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v18 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (char *)&loc_1BDFC0EAC + dword_1BDFC14FC[*(_QWORD *)(a1 + 8) >> 62];
  v21 = v13;
  v22 = v10;
  v20 = v14;
  __asm { BR              X10 }
}

uint64_t sub_1BDFC0EC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;

  *(_QWORD *)(v8 - 160) = v4;
  *(_WORD *)(v8 - 152) = v6;
  *(_BYTE *)(v8 - 150) = BYTE2(v6);
  *(_BYTE *)(v8 - 149) = BYTE3(v6);
  *(_BYTE *)(v8 - 148) = BYTE4(v6);
  *(_BYTE *)(v8 - 147) = BYTE5(v6);
  swift_retain();
  sub_1BDDFA5C8(v8 - 160, v8 - 160 + BYTE6(v6), v3, (uint64_t *)(v8 - 144));
  if (v0)
    return swift_release();
  result = swift_release();
  v10 = *(_QWORD *)(v8 - 136);
  if (v10 >> 60 == 15)
  {
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  else
  {
    *(_QWORD *)(v8 - 248) = v2;
    *(_QWORD *)(v8 - 240) = v7;
    v11 = *(_QWORD *)(v8 - 144);
    v12 = *(_QWORD *)(v8 - 128);
    v13 = *(_QWORD *)(v8 - 120);
    sub_1BDDB6CA4(v11, v10);
    sub_1BDDB6CA4(v12, v13);
    sub_1BDDB796C(v12, v13);
    v14 = *(_QWORD *)(v1 + 40);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v15 = sub_1BDE11D48(v11, v10, v14);
    *(_QWORD *)(v8 - 280) = v14;
    *(_QWORD *)(v8 - 272) = v11;
    *(_QWORD *)(v8 - 264) = v10;
    *(_QWORD *)(v8 - 256) = v12;
    *(_BYTE *)(v15 + 48) = 1;
    v16 = *(_QWORD *)(v8 - 200);
    v17 = *(_QWORD *)(v8 - 192);
    v18 = *(_QWORD *)(v8 - 184);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v16, *(_QWORD *)(v8 - 168), v18);
    v19 = v15;
    v20 = *(_QWORD *)(v8 - 176);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v16, 1, v5) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      v21 = swift_retain();
      AnyCRDT.init(from:)(v21, (uint64_t *)(v8 - 144));
      *(_QWORD *)(v8 - 184) = v19;
      *(_QWORD *)(v8 - 168) = v13;
    }
    else
    {
      *(_QWORD *)(v8 - 168) = v13;
      v22 = *(_QWORD *)(v8 - 216);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v22, v16, v5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 208) + 8))(v19, v5);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v5);
      *(_QWORD *)(v8 - 184) = v19;
    }
    v23 = *(_QWORD *)(v8 - 240);
    *(_QWORD *)(v8 - 176) = *(_QWORD *)(v8 - 144);
    v24 = *(_QWORD *)(v8 - 256);
    v25 = *(_QWORD *)(v8 - 264);
    v26 = swift_allocObject();
    v27 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = v27;
    v28 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v26 + 32) = v27;
    *(_QWORD *)(v26 + 40) = v28;
    *(_BYTE *)(v26 + 48) = 0;
    *(_QWORD *)(v26 + 56) = 0;
    v29 = v26 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    v30 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
    v31 = v26 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    v32 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
    *(_QWORD *)(v26 + 16) = *(_QWORD *)(v8 - 280);
    swift_retain();
    swift_release();
    *(_BYTE *)(v26 + 49) = 1;
    *(_QWORD *)(v8 - 112) = 0;
    *(_OWORD *)(v8 - 144) = 0u;
    *(_OWORD *)(v8 - 128) = 0u;
    v33 = *(_QWORD *)(v8 - 168);
    sub_1BDDB6CA4(v24, v33);
    sub_1BE1B20FC();
    sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
    sub_1BE1B2270();
    sub_1BDE0F688(v23, (_OWORD *)(v8 - 160));
    sub_1BDD9C3E0(v23, type metadata accessor for Proto_Document);
    sub_1BDFC5850(*(_QWORD *)(v8 - 272), v25, *(_QWORD *)(v8 - 256), v33);
    swift_release();
    swift_setDeallocating();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDD86E30(v26 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
    sub_1BDD86E30(v26 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
    result = swift_deallocClassInstance();
    v34 = *(_OWORD *)(v8 - 160);
    v35 = *(_QWORD *)(v8 - 248);
    *(_QWORD *)v35 = *(_QWORD *)(v8 - 176);
    *(_OWORD *)(v35 + 8) = v34;
  }
  return result;
}

uint64_t sub_1BDFC150C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v2 = v1;
  v39[7] = *MEMORY[0x1E0C80C00];
  v4 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v4);
  v31 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v30);
  v29 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Timestamp(0);
  result = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v11 = v10;
    sub_1BE1B1F4C();
    v27 = *(int *)(type metadata accessor for Replica() + 20);
    v28 = (uint64_t)v11;
    *(_QWORD *)&v11[v27] = 0;
    *(_QWORD *)&v11[*(int *)(v7 + 20)] = 0;
    v12 = *(_QWORD *)(a1 + 56);
    v32 = (_QWORD *)(a1 + 56);
    v13 = 1 << *(_BYTE *)(a1 + 32);
    v14 = -1;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    v15 = v14 & v12;
    v33 = (unint64_t)(v13 + 63) >> 6;
    v26 = v39;
    swift_bridgeObjectRetain();
    v16 = 0;
    v25 = xmmword_1BE1B5DE0;
    v34 = a1;
    v35 = v2;
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v18 = (v15 - 1) & v15;
      goto LABEL_16;
    }
    v16 = 1;
    if (v33 > 1)
    {
      v19 = v32[1];
      if (v19)
      {
LABEL_15:
        v18 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v16 << 6);
LABEL_16:
        v21 = *(_QWORD *)(v2 + 24);
        v22 = (char *)&loc_1BDFC1764 + dword_1BDFC2094[*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v17 + 8) >> 62];
        v37 = v18;
        v38 = v16;
        v36 = v21;
        __asm { BR              X9 }
      }
      v20 = 2;
      if (v33 > 2)
      {
        v19 = v32[2];
        if (v19)
          goto LABEL_14;
        v20 = 3;
        if (v33 > 3)
        {
          v19 = v32[3];
          if (!v19)
          {
            v20 = 4;
            if (v33 > 4)
            {
              v19 = v32[4];
              if (v19)
                goto LABEL_14;
              while (1)
              {
                v16 = v20 + 1;
                if (__OFADD__(v20, 1))
                {
                  __break(1u);
                  JUMPOUT(0x1BDFC2080);
                }
                if (v16 >= v33)
                  break;
                v19 = v32[v16];
                ++v20;
                if (v19)
                  goto LABEL_15;
              }
            }
            goto LABEL_21;
          }
LABEL_14:
          v16 = v20;
          goto LABEL_15;
        }
      }
    }
LABEL_21:
    v23 = swift_release();
    MEMORY[0x1E0C80A78](v23);
    v24 = v28;
    *((_QWORD *)&v25 - 2) = v28;
    sub_1BDFBEB9C((void (*)(uint64_t))sub_1BDFC5804);
    return sub_1BDD9C3E0(v24, type metadata accessor for Timestamp);
  }
  return result;
}

uint64_t sub_1BDFC20A4(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  __int128 aBlock;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;
  int v47;
  char v48;

  v7 = v5;
  v10 = *a1;
  v11 = a1[1];
  v39 = *a3;
  v12 = *(void **)(v7 + 32);
  type metadata accessor for CREncoder();
  v40 = *a2;
  inited = swift_initStackObject();
  v14 = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v15;
  *(_QWORD *)(inited + 64) = v14;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = v12;
  *(_QWORD *)(inited + 24) = v14;
  *(_BYTE *)(inited + 72) = 1;
  aBlock = v40;
  v16 = v12;
  v17 = sub_1BDE18E48(&aBlock);
  if (v6)
  {
    swift_setDeallocating();
    CREncoder.deinit();
    return swift_deallocClassInstance();
  }
  else
  {
    v35 = v11;
    v36 = v10;
    v37 = v17;
    v41 = v18;
    swift_setDeallocating();
    CREncoder.deinit();
    swift_deallocClassInstance();
    *(_QWORD *)&aBlock = v39;
    v20 = sub_1BDFBD814(&v48, (uint64_t)&aBlock, (uint64_t)&type metadata for AnyCRDT, (uint64_t)&protocol witness table for AnyCRDT);
    v21 = v48;
    v22 = swift_allocObject();
    v23 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v22 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v22 + 40) = v14;
    *(_QWORD *)(v22 + 48) = v14;
    *(_QWORD *)(v22 + 56) = v23;
    *(_QWORD *)(v22 + 64) = v14;
    *(_QWORD *)(v22 + 80) = 0;
    *(_QWORD *)(v22 + 88) = 0;
    *(_QWORD *)(v22 + 16) = v16;
    *(_QWORD *)(v22 + 24) = v14;
    *(_BYTE *)(v22 + 72) = v21;
    *(_QWORD *)&aBlock = v39;
    v24 = v16;
    v25 = sub_1BDE17DF8((uint64_t *)&aBlock);
    v27 = v26;
    swift_release();
    v47 = v20;
    v33 = v25;
    if (qword_1ED6F4510 != -1)
      swift_once();
    v28 = *(void **)(qword_1ED6F8BE8 + 40);
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = v24;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = sub_1BDD84410;
    *(_QWORD *)(v30 + 24) = v29;
    v45 = sub_1BDD843E8;
    v46 = v30;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v43 = sub_1BDD843A8;
    v44 = &block_descriptor_7;
    v31 = _Block_copy(&aBlock);
    v34 = v24;
    v32 = v28;
    swift_retain();
    swift_release();
    dispatch_sync(v32, v31);

    _Block_release(v31);
    LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v32 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      swift_retain();
      sub_1BDDFA0DC(v34, v33, v27, v37, v41, a4, a5, v36, v35);
      swift_release();
      sub_1BDDB796C(v33, v27);
      sub_1BDDB796C(v37, v41);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_QWORD *sub_1BDFC24D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  _QWORD *(*v10)(uint64_t *__return_ptr, __int128 *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22[2];
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v9 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v23 = v9;
  *((_QWORD *)&v23 + 1) = v8;
  v22[0] = a1;
  v10 = *(_QWORD *(**)(uint64_t *__return_ptr, __int128 *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a3 + 48);
  v11 = type metadata accessor for AnyReference();
  result = v10(&v24, &v23, v22, v11, &off_1E7754908, a2, a3);
  if (!v4)
  {
    v13 = v24;
    if (v24)
    {
      v14 = v25;
      v24 = v9;
      v25 = v8;
      v27 = v14;
      *(_QWORD *)&v23 = v14;
      *((_QWORD *)&v23 + 1) = v26;
      v21 = v26;
      v22[0] = v13;
      sub_1BDDB6CA4(v9, v8);
      v15 = MEMORY[0x1E0DEE9D8];
      v16 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
      v17 = sub_1BDDB6CE8(v15);
      sub_1BDFC20A4(&v24, &v23, v22, v16, v17);
      sub_1BDDB796C(v9, v8);
      swift_release();
      swift_bridgeObjectRelease();
      result = (_QWORD *)swift_bridgeObjectRelease();
      *a4 = v27;
      a4[1] = v21;
    }
    else
    {
      v24 = 0;
      v25 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      v24 = 0xD000000000000011;
      v25 = 0x80000001BE1CF540;
      *(_QWORD *)&v23 = 10278;
      *((_QWORD *)&v23 + 1) = 0xE200000000000000;
      v22[0] = v9;
      v22[1] = v8;
      sub_1BDDB6CA4(v9, v8);
      sub_1BDE095D4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v9, v8);
      sub_1BE1B284C();
      v18 = v24;
      v19 = v25;
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v20 = v18;
      *(_QWORD *)(v20 + 8) = v19;
      *(_BYTE *)(v20 + 16) = 0;
      return (_QWORD *)swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_1BDFC2734()
{
  uint64_t v0;
  uint64_t v2;

  v2 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  sub_1BDDF4C2C((void (*)(uint64_t, unint64_t, uint64_t, unint64_t))sub_1BDFC2E7C);
  swift_release();
  if (v0)
    swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1BDFC27C4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD **a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD **v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;

  v39 = a6;
  v40 = a7;
  v45 = a1;
  v14 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v14);
  v15 = type metadata accessor for Proto_Document(0);
  result = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4 >> 60 != 15)
  {
    v37 = a2;
    v38 = a8;
    v19 = *(_QWORD *)(a5 + 40);
    type metadata accessor for CRDecoder(0);
    v20 = swift_allocObject();
    v21 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = v21;
    v22 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)(v20 + 40) = v22;
    *(_BYTE *)(v20 + 48) = 0;
    *(_QWORD *)(v20 + 56) = 0;
    v23 = v20 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    v24 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
    v25 = v20 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    v26 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
    *(_QWORD *)(v20 + 16) = v19;
    sub_1BDD9C9A0(a3, a4);
    swift_retain();
    swift_release();
    *(_BYTE *)(v20 + 49) = 1;
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    sub_1BDDB6CA4(a3, a4);
    sub_1BE1B20FC();
    sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
    sub_1BE1B2270();
    if (!v8)
    {
      sub_1BDE0F688((uint64_t)v18, &v44);
      sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Document);
      swift_setDeallocating();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDD86E30(v20 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
      sub_1BDD86E30(v20 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
      swift_deallocClassInstance();
      v27 = v44;
      if ((sub_1BDDB04C0(*((uint64_t *)&v44 + 1), v40) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = v37;
        v28 = v38;
        v30 = v45;
      }
      else
      {
        v31 = sub_1BDDB04C0(v27, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = v37;
        v28 = v38;
        v30 = v45;
        if ((v31 & 1) == 0)
          return sub_1BDD9CC0C(a3, a4);
      }
      v32 = *v28;
      sub_1BDDB6CA4(v30, v29);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v28 = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v32 = sub_1BDE0667C(0, v32[2] + 1, 1, v32);
        *v28 = v32;
      }
      v35 = v32[2];
      v34 = v32[3];
      if (v35 >= v34 >> 1)
        v32 = sub_1BDE0667C((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
      v32[2] = v35 + 1;
      v36 = &v32[2 * v35];
      v36[4] = v30;
      v36[5] = v29;
      *v28 = v32;
      return sub_1BDD9CC0C(a3, a4);
    }
    sub_1BDD9CC0C(a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDFC2B8C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_1BDDC8EA0(*(_QWORD *)(v0 + 48));
  sub_1BDD86E30(v0 + qword_1EF549080, &qword_1ED6F3CD0);
  return v0;
}

uint64_t sub_1BDFC2BE0()
{
  sub_1BDFC2B8C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRSQLStoreBundleCapsule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRSQLStoreBundleCapsule);
}

void sub_1BDFC2C10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF52B868[0])
  {
    sub_1BE1B1F58();
    v0 = sub_1BE1B2EE8();
    if (!v1)
      atomic_store(v0, qword_1EF52B868);
  }
}

uint64_t sub_1BDFC2C64(void (*a1)(uint64_t))
{
  return sub_1BDFBEB9C(a1);
}

uint64_t sub_1BDFC2C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDFBF078(a1, a2, a3, a4);
}

uint64_t sub_1BDFC2C8C(uint64_t a1)
{
  return sub_1BDFC150C(a1);
}

void sub_1BDFC2CA0(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1BDFC0760(a1, a2, a3, a4, a5);
}

void sub_1BDFC2CB4(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1BDFC0B50(a1, a2);
}

_QWORD *sub_1BDFC2CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  return sub_1BDFC24D4(a1, a2, a3, a4);
}

unint64_t sub_1BDFC2CDC(uint64_t a1, unint64_t a2)
{
  return (unint64_t)sub_1BDFBF748(a1, a2) & 1;
}

uint64_t sub_1BDFC2D04(uint64_t *a1)
{
  return sub_1BDFC0C74(a1);
}

unint64_t sub_1BDFC2D18(uint64_t *a1)
{
  return sub_1BDFC02A8(a1);
}

uint64_t sub_1BDFC2D2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDFC04B8(a1, a2, a3, a4);
}

void sub_1BDFC2D40(uint64_t a1)
{
  sub_1BDFBFD80(a1);
}

void sub_1BDFC2D60(uint64_t a1)
{
  sub_1BDFBFFF4(a1);
}

uint64_t sub_1BDFC2D80@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BDFBEB44(a1);
}

uint64_t sub_1BDFC2DA0@<X0>(uint64_t a1@<X8>)
{
  return sub_1BDFBEF9C(a1);
}

void sub_1BDFC2DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1BDFC0D74(a1, a2, a3, a4);
}

uint64_t sub_1BDFC2DE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1BDFC2734();
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_1BDFC2E0C(uint64_t a1)
{
  char v1;

  sub_1BDFBF524(a1);
  return v1 & 1;
}

uint64_t sub_1BDFC2E30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1BDFC0BD8(a1, a2, a3);
}

uint64_t sub_1BDFC2E50(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&unk_1BE1C0858);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDFC2E7C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return sub_1BDFC27C4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD ***)(v4 + 40));
}

uint64_t sub_1BDFC2E98(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 136) = a4;
  *(_QWORD *)(v5 + 144) = v4;
  *(_BYTE *)(v5 + 257) = a2;
  *(_QWORD *)(v5 + 120) = a1;
  *(_QWORD *)(v5 + 128) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  *(_QWORD *)(v5 + 152) = swift_task_alloc();
  v6 = sub_1BE1B1DF0();
  *(_QWORD *)(v5 + 160) = v6;
  *(_QWORD *)(v5 + 168) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 176) = swift_task_alloc();
  *(_QWORD *)(v5 + 184) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BDFC2F34()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  os_log_type_t type;
  uint64_t (*v35)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  if (qword_1ED6EE518 != -1)
    swift_once();
  v1 = sub_1BE1B23C0();
  *(_QWORD *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)qword_1ED6F8A50);
  swift_retain_n();
  swift_retain();
  v2 = sub_1BE1B23A8();
  v3 = sub_1BE1B2DC8();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  if (v4)
  {
    type = v3;
    v7 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v36 = v33;
    *(_DWORD *)v7 = 136315394;
    v9 = *(_QWORD *)(v5 + 120);
    v8 = *(_QWORD *)(v5 + 128);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 88) = sub_1BDDC1468(v9, v8, &v36);
    sub_1BE1B2F0C();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v7 + 12) = 2080;
    v10 = *(_QWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    sub_1BDDB6CA4(v10, v11);
    *(_QWORD *)(v0 + 72) = sub_1BE1B1E74();
    *(_QWORD *)(v0 + 80) = v12;
    *(_QWORD *)(v0 + 56) = 47;
    *(_QWORD *)(v0 + 64) = 0xE100000000000000;
    *(_QWORD *)(v0 + 40) = 95;
    *(_QWORD *)(v0 + 48) = 0xE100000000000000;
    sub_1BDDC8C50();
    v13 = sub_1BE1B2F30();
    v15 = v14;
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v10, v11);
    *(_QWORD *)(v0 + 112) = sub_1BDDC1468(v13, v15, &v36);
    sub_1BE1B2F0C();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1BDD82000, v2, type, "%s readAsset %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3B7E068](v33, -1, -1);
    MEMORY[0x1C3B7E068](v7, -1, -1);
  }
  else
  {
    swift_release();
    swift_release_n();
  }

  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v17 + 16);
  v18 = *(_QWORD *)(v17 + 24);
  swift_beginAccess();
  v20 = *(_QWORD *)(v16 + 112);
  if (!*(_QWORD *)(v20 + 16))
    goto LABEL_12;
  sub_1BDDB6CA4(v19, v18);
  swift_bridgeObjectRetain();
  v21 = sub_1BDE5E12C(v19, v18);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v19, v18);
    goto LABEL_12;
  }
  v23 = *(_BYTE *)(v0 + 257);
  v24 = (_QWORD *)(*(_QWORD *)(v20 + 56) + 16 * v21);
  *(_QWORD *)(v0 + 200) = *v24;
  v25 = v24[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v19, v18);
  if ((v23 & 1) == 0)
  {
    ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v25 + 40))(ObjectType, v25) & 1) != 0)
    {
      swift_unknownObjectRelease();
LABEL_12:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
    }
  }
  v28 = *(_QWORD *)(v0 + 144);
  v29 = swift_getObjectType();
  v30 = *(_QWORD *)(v28 + 120);
  *(_QWORD *)(v0 + 208) = v30;
  v31 = *(_QWORD *)(v28 + 128);
  *(_QWORD *)(v0 + 216) = v31;
  v35 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v25 + 56) + *(_QWORD *)(v25 + 56));
  v32 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v32;
  *v32 = v0;
  v32[1] = sub_1BDFC3374;
  return v35(*(_QWORD *)(v0 + 152), v30, v31, v29, v25);
}

uint64_t sub_1BDFC3374()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BDFC33CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, _QWORD);
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_unknownObjectRelease();
    sub_1BDD86E30(v3, &qword_1ED6F3C70);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v5, v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v5, v1);
    swift_retain();
    v7 = sub_1BE1B23A8();
    v8 = sub_1BE1B2DC8();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = *(_QWORD *)(v0 + 208);
      v10 = *(_QWORD *)(v0 + 216);
      v21 = *(_QWORD *)(v0 + 176);
      v22 = *(_QWORD *)(v0 + 168);
      v20 = *(_QWORD *)(v0 + 160);
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v24 = v12;
      *(_DWORD *)v11 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 104) = sub_1BDDC1468(v9, v10, &v24);
      sub_1BE1B2F0C();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v11 + 12) = 2080;
      sub_1BDD8422C(&qword_1EF52F158, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v13 = sub_1BE1B32E4();
      *(_QWORD *)(v0 + 96) = sub_1BDDC1468(v13, v14, &v24);
      sub_1BE1B2F0C();
      swift_bridgeObjectRelease();
      v15 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v15(v21, v20);
      _os_log_impl(&dword_1BDD82000, v7, v8, "%s reading url %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3B7E068](v12, -1, -1);
      MEMORY[0x1C3B7E068](v11, -1, -1);
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 168);
      v16 = *(_QWORD *)(v0 + 176);
      v18 = *(_QWORD *)(v0 + 160);
      swift_release();
      v15 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v15(v16, v18);
    }

    *(_QWORD *)(v0 + 232) = v15;
    v23 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 128) + *(_QWORD *)(v0 + 128));
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v19;
    *v19 = v0;
    v19[1] = sub_1BDFC36D4;
    return v23(v0 + 256, *(_QWORD *)(v0 + 184));
  }
}

uint64_t sub_1BDFC36D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BDFC3738()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(unsigned __int8 *)(v0 + 256);
  swift_unknownObjectRelease();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1BDFC37B0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  swift_unknownObjectRelease();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BDFC3824(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 136) = a4;
  *(_QWORD *)(v5 + 144) = v4;
  *(_BYTE *)(v5 + 256) = a2;
  *(_QWORD *)(v5 + 120) = a1;
  *(_QWORD *)(v5 + 128) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  *(_QWORD *)(v5 + 152) = swift_task_alloc();
  v6 = sub_1BE1B1DF0();
  *(_QWORD *)(v5 + 160) = v6;
  *(_QWORD *)(v5 + 168) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 176) = swift_task_alloc();
  *(_QWORD *)(v5 + 184) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BDFC38C0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  os_log_type_t type;
  uint64_t (*v35)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  if (qword_1ED6EE518 != -1)
    swift_once();
  v1 = sub_1BE1B23C0();
  *(_QWORD *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)qword_1ED6F8A50);
  swift_retain_n();
  swift_retain();
  v2 = sub_1BE1B23A8();
  v3 = sub_1BE1B2DC8();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  if (v4)
  {
    type = v3;
    v7 = swift_slowAlloc();
    v33 = swift_slowAlloc();
    v36 = v33;
    *(_DWORD *)v7 = 136315394;
    v9 = *(_QWORD *)(v5 + 120);
    v8 = *(_QWORD *)(v5 + 128);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 96) = sub_1BDDC1468(v9, v8, &v36);
    sub_1BE1B2F0C();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v7 + 12) = 2080;
    v10 = *(_QWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    sub_1BDDB6CA4(v10, v11);
    *(_QWORD *)(v0 + 40) = sub_1BE1B1E74();
    *(_QWORD *)(v0 + 48) = v12;
    *(_QWORD *)(v0 + 56) = 47;
    *(_QWORD *)(v0 + 64) = 0xE100000000000000;
    *(_QWORD *)(v0 + 72) = 95;
    *(_QWORD *)(v0 + 80) = 0xE100000000000000;
    sub_1BDDC8C50();
    v13 = sub_1BE1B2F30();
    v15 = v14;
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v10, v11);
    *(_QWORD *)(v0 + 112) = sub_1BDDC1468(v13, v15, &v36);
    sub_1BE1B2F0C();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1BDD82000, v2, type, "%s readAsset %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3B7E068](v33, -1, -1);
    MEMORY[0x1C3B7E068](v7, -1, -1);
  }
  else
  {
    swift_release();
    swift_release_n();
  }

  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v17 + 16);
  v18 = *(_QWORD *)(v17 + 24);
  swift_beginAccess();
  v20 = *(_QWORD *)(v16 + 112);
  if (!*(_QWORD *)(v20 + 16))
    goto LABEL_12;
  sub_1BDDB6CA4(v19, v18);
  swift_bridgeObjectRetain();
  v21 = sub_1BDE5E12C(v19, v18);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v19, v18);
    goto LABEL_12;
  }
  v23 = *(_BYTE *)(v0 + 256);
  v24 = (_QWORD *)(*(_QWORD *)(v20 + 56) + 16 * v21);
  *(_QWORD *)(v0 + 200) = *v24;
  v25 = v24[1];
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v19, v18);
  if ((v23 & 1) == 0)
  {
    ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v25 + 40))(ObjectType, v25) & 1) != 0)
    {
      swift_unknownObjectRelease();
LABEL_12:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
    }
  }
  v28 = *(_QWORD *)(v0 + 144);
  v29 = swift_getObjectType();
  v30 = *(_QWORD *)(v28 + 120);
  *(_QWORD *)(v0 + 208) = v30;
  v31 = *(_QWORD *)(v28 + 128);
  *(_QWORD *)(v0 + 216) = v31;
  v35 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v25 + 56) + *(_QWORD *)(v25 + 56));
  v32 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v32;
  *v32 = v0;
  v32[1] = sub_1BDFC3D04;
  return v35(*(_QWORD *)(v0 + 152), v30, v31, v29, v25);
}

uint64_t sub_1BDFC3D04()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BDFC3D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    swift_unknownObjectRelease();
    sub_1BDD86E30(v3, &qword_1ED6F3C70);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v5, v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v6, v5, v1);
    swift_retain();
    v7 = sub_1BE1B23A8();
    v8 = sub_1BE1B2DC8();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = *(_QWORD *)(v0 + 208);
      v10 = *(_QWORD *)(v0 + 216);
      v21 = *(_QWORD *)(v0 + 176);
      v22 = *(_QWORD *)(v0 + 168);
      v20 = *(_QWORD *)(v0 + 160);
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v24 = v12;
      *(_DWORD *)v11 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 104) = sub_1BDDC1468(v9, v10, &v24);
      sub_1BE1B2F0C();
      swift_bridgeObjectRelease();
      swift_release();
      *(_WORD *)(v11 + 12) = 2080;
      sub_1BDD8422C(&qword_1EF52F158, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v13 = sub_1BE1B32E4();
      *(_QWORD *)(v0 + 88) = sub_1BDDC1468(v13, v14, &v24);
      sub_1BE1B2F0C();
      swift_bridgeObjectRelease();
      v15 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v15(v21, v20);
      _os_log_impl(&dword_1BDD82000, v7, v8, "%s reading url %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3B7E068](v12, -1, -1);
      MEMORY[0x1C3B7E068](v11, -1, -1);
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 168);
      v16 = *(_QWORD *)(v0 + 176);
      v18 = *(_QWORD *)(v0 + 160);
      swift_release();
      v15 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v15(v16, v18);
    }

    *(_QWORD *)(v0 + 232) = v15;
    v23 = (uint64_t (*)(void))(**(int **)(v0 + 128) + *(_QWORD *)(v0 + 128));
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v19;
    *v19 = v0;
    v19[1] = sub_1BDFC4058;
    return v23();
  }
}

uint64_t sub_1BDFC4058()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1BDFC40BC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  swift_unknownObjectRelease();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1BDFC4130()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BDFC4154()
{
  return swift_deallocObject();
}

uint64_t sub_1BDFC4164()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 40) + 32))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDFC418C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1BE1B1C70();
  v9 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = sub_1BE1B1C88();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  sub_1BDDFA5C8(v9, v15, a3, a4);
  return swift_release();
}

uint64_t sub_1BDFC423C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result;
  char *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  result = sub_1BE1B1C70();
  v12 = (char *)result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = sub_1BE1B1C88();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = &v12[v16];
  if (v12)
    v18 = (uint64_t)v17;
  else
    v18 = 0;
  sub_1BDDFB200(v12, v18, a4, a5, a6);
  return swift_release();
}

uint64_t sub_1BDFC4304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_1BE1B1C70();
  v12 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v12 += a1 - result;
  }
  v13 = __OFSUB__(a2, a1);
  v14 = a2 - a1;
  if (v13)
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = sub_1BE1B1C88();
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = v12 + v16;
  if (v12)
    v18 = v17;
  else
    v18 = 0;
  sub_1BDDFAE54(v12, v18, a4, a5, a6);
  return swift_release();
}

uint64_t sub_1BDFC43CC(uint64_t *a1)
{
  return sub_1BDFC43F0(a1, sub_1BDEF9828, sub_1BDFC4468);
}

uint64_t sub_1BDFC43F0(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_1BDFC4468(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 *v22;
  int v23;
  uint64_t v24;
  __int16 *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1BE1B32CC();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(__int16 *)(v79 + 2 * i);
        v82 = v78;
        do
        {
          v83 = *(__int16 *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_WORD *)(v79 + v82 + 2) = v83;
          *(_WORD *)(v79 + v82) = v81;
          v82 -= 2;
        }
        while (v82 != -2);
        v78 += 2;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1BDFC516C((__int16 *)(v84 + 2 * v88), (__int16 *)(v84 + 2 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 2 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = sub_1BDEF9798((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1BE1B29E4();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 2;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(__int16 *)(v10 + 2 * v9);
      v15 = *(__int16 *)(v10 + 2 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(__int16 *)(v10 + 2 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_WORD *)(v10 + 2 * v19);
              *(_WORD *)(v10 + 2 * v19) = *(_WORD *)(v10 + 2 * v18);
              *(_WORD *)(v10 + 2 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (__int16 *)(v93 + 2 * v9);
      do
      {
        v23 = *(__int16 *)(v10 + 2 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= v26)
            break;
          if (!v10)
            goto LABEL_142;
          v25[1] = v26;
          *v25-- = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1BDEF9288(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1BDEF9288((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_1BDFC516C((__int16 *)(v10 + 2 * *(_QWORD *)v71), (__int16 *)(v10 + 2 * *(_QWORD *)v74), v10 + 2 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1BE1B31F4();
  __break(1u);
  return result;
}

uint64_t sub_1BDFC4AF4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1BE1B32CC();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(unsigned __int8 *)(v79 + i);
        v82 = v78;
        do
        {
          v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_BYTE *)(v79 + v82 + 1) = v83;
          *(_BYTE *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v94 = result;
  v95 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (unsigned __int8 *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v93 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1BDFC53CC((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(_QWORD *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = sub_1BDEF9798((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v93 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v93 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1BE1B29E4();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v95;
    v93 = v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  v9 = 0;
  v92 = v2;
  v10 = *v2;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v96 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(unsigned __int8 *)(v10 + v9);
      v15 = *(unsigned __int8 *)(v10 + v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_BYTE *)(v10 + v19);
              *(_BYTE *)(v10 + v19) = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v94)
      goto LABEL_47;
    v21 = v13 + v94;
    if (__OFADD__(v13, v94))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (_BYTE *)(v10 + v9);
      do
      {
        v23 = *(unsigned __int8 *)(v10 + v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *(v25 - 1);
          if (v23 >= v26)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v26;
          *--v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1BDEF9288(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v96;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1BDEF9288((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v96;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_1BDFC53CC((unsigned __int8 *)(v10 + *(_QWORD *)v71), (unsigned __int8 *)(v10 + *(_QWORD *)v74), v10 + v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v96;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v95;
    if (v9 >= v95)
    {
      v2 = v92;
      v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1BE1B31F4();
  __break(1u);
  return result;
}

uint64_t sub_1BDFC516C(__int16 *__src, __int16 *a2, unint64_t a3, char *__dst)
{
  __int16 *v4;
  __int16 *v6;
  __int16 *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  int v16;
  __int16 *v17;
  __int16 *v18;
  __int16 *v19;
  __int16 *v20;
  __int16 *v21;
  int v22;
  uint64_t result;
  __int16 *v24;
  __int16 *v25;
  __int16 *v26;

  v26 = __src;
  v4 = (__int16 *)__dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  else
    v9 = v8 + 1;
  v10 = v9 >> 1;
  v11 = a3 - (_QWORD)a2;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  else
    v12 = v11 + 1;
  v13 = v12 >> 1;
  v25 = (__int16 *)__dst;
  if (v10 >= v12 >> 1)
  {
    if (v11 >= -1)
    {
      if (__dst != (char *)a2 || &a2[v13] <= (__int16 *)__dst)
        memmove(__dst, a2, 2 * v13);
      v18 = &v4[v13];
      v24 = v18;
      v26 = v6;
      if (v7 < v6 && v11 >= 2)
      {
        v19 = (__int16 *)(a3 - 2);
        while (1)
        {
          v20 = v19 + 1;
          v21 = v6 - 1;
          v22 = *(v6 - 1);
          if (*(v18 - 1) >= v22)
          {
            v24 = v18 - 1;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *v19 = *(v18 - 1);
            --v18;
            if (v6 <= v7)
              goto LABEL_44;
          }
          else
          {
            if (v20 != v6 || v19 >= v6)
              *v19 = v22;
            v26 = --v6;
            if (v21 <= v7)
              goto LABEL_44;
          }
          --v19;
          if (v18 <= v4)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v8 >= -1)
  {
    if (__dst != (char *)__src || &__src[v10] <= (__int16 *)__dst)
      memmove(__dst, __src, 2 * v10);
    v14 = &v4[v10];
    v24 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 2)
    {
      do
      {
        v15 = *v6;
        v16 = *v4;
        if (v15 >= v16)
        {
          if (v7 != v4)
            *v7 = v16;
          v25 = ++v4;
          v17 = v6;
        }
        else
        {
          v17 = v6 + 1;
          if (v7 < v6 || v7 >= v17 || v7 != v6)
            *v7 = v15;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v17;
      }
      while ((unint64_t)v17 < a3);
      v26 = v7;
    }
LABEL_44:
    sub_1BDEF9498((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDFC53CC(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  size_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t result;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;

  v22 = __src;
  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a3 - (_QWORD)a2;
  v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (_QWORD)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst)
        memmove(__dst, a2, a3 - (_QWORD)a2);
      v14 = &v4[v9];
      v20 = &v4[v9];
      v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          v16 = v15 + 1;
          v17 = v6 - 1;
          v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14)
              *v15 = *(v14 - 1);
            --v14;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v16 != v6 || v15 >= v6)
              *v15 = v18;
            v22 = --v6;
            if (v17 <= v7)
              goto LABEL_38;
          }
          --v15;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v10 = &v4[v8];
    v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        v11 = *v6;
        v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4)
            *v7 = v12;
          v21 = ++v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            *v7 = v11;
        }
        ++v7;
        if (v4 >= v10)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    sub_1BDEF953C((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDFC5604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;

  result = sub_1BE1B1C70();
  v9 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = sub_1BE1B1C88();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  sub_1BDDFADAC(v9, v15, a4, &v17);
  if (!v4)
    return v17;
  return v16;
}

uint64_t sub_1BDFC56B0(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v5 = result + 32;
    v6 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v4 <= v2)
        v7 = v2;
      else
        v7 = v4;
      while (1)
      {
        if (v4 == v7)
          goto LABEL_25;
        v8 = v4++;
        v9 = *(_QWORD *)(a2 + 16);
        if (!v9)
          goto LABEL_6;
        v10 = *(unsigned __int16 *)(v5 + 2 * v8);
        if (*(unsigned __int16 *)(a2 + 32) == v10)
          break;
        if (v9 != 1)
        {
          v11 = 17;
          while (1)
          {
            v12 = v11 - 15;
            if (__OFADD__(v11 - 16, 1))
              break;
            if (*(unsigned __int16 *)(a2 + 2 * v11) == v10)
              goto LABEL_16;
            ++v11;
            if (v12 == v9)
              goto LABEL_6;
          }
          __break(1u);
LABEL_25:
          __break(1u);
          return result;
        }
LABEL_6:
        if (v4 == v2)
          return v6;
      }
LABEL_16:
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = sub_1BDE22934(0, *(_QWORD *)(v6 + 16) + 1, 1);
      v14 = *(_QWORD *)(v6 + 16);
      v13 = *(_QWORD *)(v6 + 24);
      if (v14 >= v13 >> 1)
        result = sub_1BDE22934(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v6 + 16) = v14 + 1;
      *(_WORD *)(v6 + 2 * v14 + 32) = v10;
      if (v4 == v2)
        return v6;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1BDFC5804()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for Replica();
  return sub_1BDDCB81C(v1);
}

uint64_t sub_1BDFC5850(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_1BDDB796C(result, a2);
    return sub_1BDDB796C(a3, a4);
  }
  return result;
}

uint64_t sub_1BDFC588C(uint64_t a1)
{
  return sub_1BDFBCB04(a1) & 1;
}

uint64_t sub_1BDFC58A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1BE1B1DF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BDFC5968(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(sub_1BE1B1DF0() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *(_QWORD *)((char *)v1 + v7);
  v14 = *(_QWORD *)((char *)v1 + ((v7 + 15) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_1BDE281A0;
  return sub_1BDFBCCB8(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1BDFC5A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_1BDE28004;
  return sub_1BDFBD394(a1, a2, v7, v6);
}

uint64_t sub_1BDFC5AA8()
{
  return swift_deallocObject();
}

uint64_t sub_1BDFC5AB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1BDE28004;
  return sub_1BE10BAD4(a1, v4);
}

uint64_t sub_1BDFC5B0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BE1B1DF0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void sub_1BDFC5B6C()
{
  sub_1BE1B1DF0();
  sub_1BDFBD5E4();
}

uint64_t sub_1BDFC5BA8()
{
  return swift_deallocObject();
}

uint64_t sub_1BDFC5BB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDE30BC4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1BDFC5BC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDFC5BE4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  sub_1BDDB796C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_1BDFC5C20(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDFBE08C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1BDFC5C30()
{
  return swift_deallocObject();
}

uint64_t sub_1BDFC5C40()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BDFC5C6C()
{
  uint64_t v0;

  return sub_1BDFBE304(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDFC5C74()
{
  return swift_deallocObject();
}

uint64_t sub_1BDFC5C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDFC5CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDFC5D14(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_1BDDB6CA4(result, a2);
    return sub_1BDDB6CA4(a3, a4);
  }
  return result;
}

void sub_1BDFC5D50(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void sub_1BDFC5D5C(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1BE10F598(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BDFC5D74()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1BDFC5D94()
{
  uint64_t v0;

  return sub_1BDFB74C8(*(void **)(v0 + 24));
}

uint64_t sub_1BDFC5DB8()
{
  return sub_1BDDF3D8C(1702257011, 0xE400000000000000, 0);
}

const char *sub_1BDFC5DE8()
{
  uint64_t v0;

  return sub_1BDFBDE8C(v0);
}

uint64_t sub_1BDFC5E00()
{
  uint64_t *v0;

  return sub_1BDFBDD50(v0[2], v0[3], v0[4]);
}

uint64_t sub_1BDFC5E1C()
{
  return swift_deallocObject();
}

const char *sub_1BDFC5E2C()
{
  uint64_t v0;

  return sub_1BDFBDF88(v0);
}

void sub_1BDFC5E44()
{
  uint64_t *v0;

  sub_1BDFBDC18(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9]);
}

void sub_1BDFC5E94(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1BDFBB0E4(*(uint64_t **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), a1);
}

uint64_t sub_1BDFC5EB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_1BE1B1C70();
  v9 = (char *)result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_16:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_16;
  }
  v12 = sub_1BE1B1C88();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = &v9[v13];
  if (v9)
    v15 = (uint64_t)v14;
  else
    v15 = 0;
  v16 = a4;
  v17 = sub_1BDDF50A0(v9, v15);
  if (!v4)
  {
    v16 = v17;
    if (!v17)
    {
      v18 = MEMORY[0x1E0DEE9D8];
      v16 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
      sub_1BDDB6CE8(v18);
    }
  }
  return v16;
}

void sub_1BDFC5F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1BDFBAAC0(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t sub_1BDFC5F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_Document(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDFC600C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int EnumCaseMultiPayload;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t, uint64_t);
  char *v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int (*v210)(char *, uint64_t, uint64_t);
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char v218;
  char v219;
  char v220;
  char v221;
  char v222;
  char v223;
  char v224;
  char v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;

  v209 = a2;
  v228 = *MEMORY[0x1E0C80C00];
  v3 = sub_1BE1B1F58();
  v214 = *(_QWORD *)(v3 - 8);
  v215 = v3;
  MEMORY[0x1E0C80A78](v3);
  v212 = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v5);
  v216 = (char *)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_Version(0);
  v8 = *(_QWORD *)(v7 - 8);
  v202 = v7;
  v203 = v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v182 = (uint64_t *)((char *)&v181 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v184 = (uint64_t)&v181 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v185 = (char *)&v181 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v183 = (char *)&v181 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v186 = (uint64_t)&v181 - v18;
  MEMORY[0x1E0C80A78](v17);
  v201 = (uint64_t)&v181 - v19;
  v20 = type metadata accessor for Proto_Value(0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v191 = (uint64_t)&v181 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v194 = (uint64_t)&v181 - v23;
  v24 = type metadata accessor for Proto_Reference(0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v190 = (uint64_t)&v181 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v193 = (uint64_t)&v181 - v27;
  v28 = type metadata accessor for Proto_CRDT(0);
  v29 = MEMORY[0x1E0C80A78](v28);
  v189 = (uint64_t)&v181 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v192 = (uint64_t)&v181 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  v33 = MEMORY[0x1E0C80A78](v32);
  v188 = (uint64_t)&v181 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v187 = (uint64_t)&v181 - v36;
  MEMORY[0x1E0C80A78](v35);
  v208 = (uint64_t)&v181 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  v39 = MEMORY[0x1E0C80A78](v38);
  v200 = (uint64_t)&v181 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v39);
  v204 = (uint64_t)&v181 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v198 = (char *)&v181 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v199 = (uint64_t)&v181 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v49 = (char *)&v181 - v48;
  MEMORY[0x1E0C80A78](v47);
  v51 = (char *)&v181 - v50;
  v52 = type metadata accessor for Proto_Constants(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = MEMORY[0x1E0C80A78](v52);
  v197 = (uint64_t *)((char *)&v181 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = MEMORY[0x1E0C80A78](v54);
  v195 = (uint64_t *)((char *)&v181 - v57);
  v58 = MEMORY[0x1E0C80A78](v56);
  v60 = (uint64_t *)((char *)&v181 - v59);
  MEMORY[0x1E0C80A78](v58);
  v62 = (uint64_t *)((char *)&v181 - v61);
  v63 = type metadata accessor for Proto_Document(0);
  v206 = a1;
  v207 = v63;
  v205 = *(int *)(v63 + 20);
  v64 = *(_QWORD *)(a1 + v205);
  v65 = v64 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  sub_1BDD86DEC(v65, (uint64_t)v51, &qword_1ED6F3290);
  v196 = v53;
  v210 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  if (v210(v51, 1, v52) == 1)
  {
    *v62 = sub_1BE1B20CC();
    v62[1] = v66;
    v62[2] = MEMORY[0x1E0DEE9D8];
    v67 = v52;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v51, &qword_1ED6F3290);
  }
  else
  {
    v67 = v52;
    sub_1BDDA2E8C((uint64_t)v51, (uint64_t)v62, type metadata accessor for Proto_Constants);
  }
  v68 = *v62;
  v69 = v62[1];
  sub_1BDDB6CA4(*v62, v69);
  sub_1BDD9C3E0((uint64_t)v62, type metadata accessor for Proto_Constants);
  v70 = v213;
  sub_1BDD928C0(v68, v69);
  if (v70)
    return sub_1BDDB796C(v68, v69);
  v73 = v71;
  sub_1BDDB796C(v68, v69);
  *(_QWORD *)(v211 + 16) = v73;
  swift_bridgeObjectRelease();
  v74 = v64 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  sub_1BDD86DEC(v74, (uint64_t)v49, &qword_1ED6F3290);
  if (v210(v49, 1, v67) == 1)
  {
    *v60 = sub_1BE1B20CC();
    v60[1] = v75;
    v60[2] = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v49, &qword_1ED6F3290);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v49, (uint64_t)v60, type metadata accessor for Proto_Constants);
  }
  v76 = v209;
  v77 = v207;
  v207 = v67;
  v78 = v60[2];
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v60, type metadata accessor for Proto_Constants);
  v79 = v211;
  *(_QWORD *)(v211 + 32) = v78;
  swift_bridgeObjectRelease();
  sub_1BE1B20E4();
  v80 = *(int *)(v77 + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  v213 = v80;
  *(_QWORD *)(v76 + v80) = qword_1ED6F37F0;
  v81 = v64 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  v82 = v208;
  sub_1BDD86DEC(v81, v208, &qword_1ED6F37C8);
  v83 = type metadata accessor for Proto_Document.OneOf_Root(0);
  v84 = *(_QWORD *)(v83 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83) == 1)
  {
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v89 = v82;
        v90 = v194;
        sub_1BDDA2E8C(v89, v194, type metadata accessor for Proto_Value);
        swift_retain();
        sub_1BDFC8554(v90, v191);
        v163 = v213;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_Document._StorageClass(0);
          swift_allocObject();
          v164 = swift_retain();
          *(_QWORD *)(v76 + v163) = sub_1BDDA0F18(v164);
          swift_release();
        }
        v165 = *(_QWORD *)(v76 + v163);
        v166 = v187;
        sub_1BDDA2E8C(v191, v187, type metadata accessor for Proto_Value);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v166, 0, 1, v83);
        v167 = v188;
        sub_1BDDA2EF0(v166, v188, &qword_1ED6F37C8);
        v168 = v165
             + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
        swift_beginAccess();
        swift_retain();
        sub_1BDDA1AF4(v167, v168, &qword_1ED6F37C8);
        swift_endAccess();
        swift_release();
        sub_1BDD9C3E0(v194, type metadata accessor for Proto_Value);
      }
      else
      {
        v104 = v82;
        v105 = v193;
        sub_1BDDA2E8C(v104, v193, type metadata accessor for Proto_Reference);
        swift_retain();
        sub_1BDFCB074(v105, v190);
        v175 = v213;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_Document._StorageClass(0);
          swift_allocObject();
          v176 = swift_retain();
          *(_QWORD *)(v76 + v175) = sub_1BDDA0F18(v176);
          swift_release();
        }
        v177 = *(_QWORD *)(v76 + v175);
        v178 = v187;
        sub_1BDDA2E8C(v190, v187, type metadata accessor for Proto_Reference);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v178, 0, 1, v83);
        v179 = v188;
        sub_1BDDA2EF0(v178, v188, &qword_1ED6F37C8);
        v180 = v177
             + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
        swift_beginAccess();
        swift_retain();
        sub_1BDDA1AF4(v179, v180, &qword_1ED6F37C8);
        swift_endAccess();
        swift_release();
        sub_1BDD9C3E0(v193, type metadata accessor for Proto_Reference);
      }
    }
    else
    {
      v102 = v82;
      v103 = v192;
      sub_1BDDA2E8C(v102, v192, type metadata accessor for Proto_CRDT);
      swift_retain();
      sub_1BDFC77E8(v103, v189);
      v169 = v213;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Document._StorageClass(0);
        swift_allocObject();
        v170 = swift_retain();
        *(_QWORD *)(v76 + v169) = sub_1BDDA0F18(v170);
        swift_release();
      }
      v171 = *(_QWORD *)(v76 + v169);
      v172 = v187;
      sub_1BDDA2E8C(v189, v187, type metadata accessor for Proto_CRDT);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v172, 0, 1, v83);
      v173 = v188;
      sub_1BDDA2EF0(v172, v188, &qword_1ED6F37C8);
      v174 = v171 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v173, v174, &qword_1ED6F37C8);
      swift_endAccess();
      swift_release();
      sub_1BDD9C3E0(v192, type metadata accessor for Proto_CRDT);
    }
  }
  v85 = *(_QWORD *)(v206 + v205);
  swift_beginAccess();
  swift_retain();
  v86 = swift_bridgeObjectRetain();
  v87 = sub_1BDFCD070(v86, v79);
  swift_bridgeObjectRelease();
  swift_release();
  v208 = 0;
  v91 = v213;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v92 = swift_retain();
    *(_QWORD *)(v76 + v91) = sub_1BDDA0F18(v92);
    swift_release();
  }
  v93 = (uint64_t *)(*(_QWORD *)(v76 + v91)
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  swift_beginAccess();
  *v93 = v87;
  swift_bridgeObjectRelease();
  v94 = v85 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  v95 = v201;
  sub_1BDD86DEC(v94, v201, &qword_1ED6F37A8);
  v96 = v202;
  v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
  LODWORD(v94) = v97(v95, 1, v202);
  sub_1BDD86E30(v95, &qword_1ED6F37A8);
  if ((_DWORD)v94 != 1)
  {
    v98 = v85 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    v99 = v186;
    sub_1BDD86DEC(v98, v186, &qword_1ED6F37A8);
    if (v97(v99, 1, v96) == 1)
    {
      v100 = MEMORY[0x1E0DEE9D8];
      v101 = v182;
      *v182 = MEMORY[0x1E0DEE9D8];
      v101[1] = v100;
      sub_1BE1B20E4();
      sub_1BDD86E30(v99, &qword_1ED6F37A8);
    }
    else
    {
      v101 = v182;
      sub_1BDDA2E8C(v99, (uint64_t)v182, type metadata accessor for Proto_Version);
    }
    v106 = v184;
    v107 = (uint64_t)v185;
    v108 = (uint64_t)v183;
    sub_1BDDA2E8C((uint64_t)v101, v184, type metadata accessor for Proto_Version);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Document._StorageClass(0);
      swift_allocObject();
      v109 = swift_retain();
      *(_QWORD *)(v76 + v91) = sub_1BDDA0F18(v109);
      swift_release();
    }
    v110 = *(_QWORD *)(v76 + v91);
    sub_1BDDA2E8C(v106, v108, type metadata accessor for Proto_Version);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v203 + 56))(v108, 0, 1, v96);
    sub_1BDDA2EF0(v108, v107, &qword_1ED6F37A8);
    v111 = v110
         + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v107, v111, &qword_1ED6F37A8);
    swift_endAccess();
    swift_release();
  }
  v112 = v211;
  v113 = *(_QWORD *)(*(_QWORD *)(v211 + 16) + 16);
  v114 = v216;
  if (v113 >> 59)
    __break(1u);
  v226 = sub_1BDDD6DF0(16 * v113);
  v227 = v115;
  v116 = *(_QWORD *)(v112 + 16);
  v117 = *(_QWORD *)(v116 + 16);
  v118 = v214;
  v206 = v116;
  if (v117)
  {
    v119 = v116 + ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80));
    v120 = *(_QWORD *)(v214 + 72);
    v121 = *(void (**)(char *, uint64_t, uint64_t))(v214 + 16);
    swift_bridgeObjectRetain();
    v122 = v215;
    while (1)
    {
      v121(v114, v119, v122);
      v123 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56);
      v123(v114, 0, 1, v122);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v114, 1, v122) == 1)
        break;
      v124 = v212;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v212, v216, v122);
      v217 = sub_1BE1B1F40();
      v218 = v125;
      v219 = v126;
      v220 = v127;
      v221 = v128;
      v222 = v129;
      v223 = v130;
      v224 = v131;
      v225 = v132;
      sub_1BE1B1F40();
      sub_1BE1B1CAC();
      swift_allocObject();
      sub_1BE1B1C64();
      sub_1BE1B1EA4();
      v118 = v214;
      v122 = v215;
      swift_release();
      v133 = v124;
      v114 = v216;
      (*(void (**)(char *, uint64_t))(v118 + 8))(v133, v122);
      v119 += v120;
      if (!--v117)
        goto LABEL_35;
    }
  }
  else
  {
    v123 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v214 + 56);
    swift_bridgeObjectRetain();
    v122 = v215;
LABEL_35:
    v123(v114, 1, 1, v122);
  }
  swift_bridgeObjectRelease();
  v134 = v226;
  v135 = v227;
  v136 = v209;
  v137 = *(_QWORD *)(v209 + v213)
       + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  v138 = v199;
  sub_1BDD86DEC(v137, v199, &qword_1ED6F3290);
  v139 = v207;
  if (v210((char *)v138, 1, v207) == 1)
  {
    sub_1BDDB6CA4(v134, v135);
    v140 = sub_1BE1B20CC();
    v141 = v195;
    *v195 = v140;
    v141[1] = v142;
    v141[2] = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    sub_1BDD86E30(v138, &qword_1ED6F3290);
  }
  else
  {
    v141 = v195;
    sub_1BDDA2E8C(v138, (uint64_t)v195, type metadata accessor for Proto_Constants);
    sub_1BDDB6CA4(v134, v135);
  }
  v143 = (uint64_t)v198;
  v144 = v196;
  sub_1BDDB796C(*v141, v141[1]);
  *v141 = v134;
  v141[1] = v135;
  v145 = v213;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v146 = swift_retain();
    *(_QWORD *)(v136 + v145) = sub_1BDDA0F18(v146);
    swift_release();
  }
  v147 = *(_QWORD *)(v136 + v145);
  sub_1BDDA2E8C((uint64_t)v141, v143, type metadata accessor for Proto_Constants);
  v216 = *(char **)(v144 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v216)(v143, 0, 1, v139);
  v148 = v204;
  sub_1BDDA2EF0(v143, v204, &qword_1ED6F3290);
  v149 = v147
       + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v148, v149, &qword_1ED6F3290);
  swift_endAccess();
  swift_release();
  v150 = *(_QWORD *)(v211 + 32);
  v151 = *(_QWORD *)(v136 + v145)
       + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  v152 = v151;
  v153 = v207;
  v154 = v200;
  sub_1BDD86DEC(v152, v200, &qword_1ED6F3290);
  if (v210((char *)v154, 1, v153) == 1)
  {
    swift_bridgeObjectRetain();
    v155 = sub_1BE1B20CC();
    v156 = v197;
    *v197 = v155;
    v156[1] = v157;
    v156[2] = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    sub_1BDD86E30(v154, &qword_1ED6F3290);
  }
  else
  {
    v156 = v197;
    sub_1BDDA2E8C(v154, (uint64_t)v197, type metadata accessor for Proto_Constants);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v156[2] = v150;
  v158 = v213;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v159 = swift_retain();
    *(_QWORD *)(v136 + v158) = sub_1BDDA0F18(v159);
    swift_release();
  }
  v160 = *(_QWORD *)(v136 + v158);
  sub_1BDDA2E8C((uint64_t)v156, v143, type metadata accessor for Proto_Constants);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v216)(v143, 0, 1, v153);
  v161 = v204;
  sub_1BDDA2EF0(v143, v204, &qword_1ED6F3290);
  v162 = v160
       + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v161, v162, &qword_1ED6F3290);
  swift_endAccess();
  swift_release();
  return sub_1BDDB796C(v226, v227);
}

uint64_t sub_1BDFC73F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  v5 = MEMORY[0x1E0C80A78](v4);
  v42 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v39 - v7;
  v9 = type metadata accessor for Proto_Constants(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t *)((char *)&v39 - v14);
  v16 = type metadata accessor for Proto_RetainCounts(0);
  v17 = *(int *)(v16 + 20);
  v43 = a1;
  v40 = v16;
  v41 = v17;
  v18 = *(_QWORD *)(a1 + v17);
  v19 = v18
      + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v8, &qword_1ED6F3290);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v20(v8, 1, v9) == 1)
  {
    *v15 = sub_1BE1B20CC();
    v15[1] = v21;
    v15[2] = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F3290);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v15, type metadata accessor for Proto_Constants);
  }
  v22 = *v15;
  v23 = v15[1];
  sub_1BDDB6CA4(*v15, v23);
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_Constants);
  sub_1BDD928C0(v22, v23);
  v25 = v24;
  result = sub_1BDDB796C(v22, v23);
  if (!v2)
  {
    *(_QWORD *)(v45 + 16) = v25;
    swift_bridgeObjectRelease();
    v27 = v18
        + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
    swift_beginAccess();
    v28 = v27;
    v29 = v42;
    sub_1BDD86DEC(v28, v42, &qword_1ED6F3290);
    if (v20((char *)v29, 1, v9) == 1)
    {
      *v13 = sub_1BE1B20CC();
      v13[1] = v30;
      v13[2] = MEMORY[0x1E0DEE9D8];
      sub_1BE1B20E4();
      sub_1BDD86E30(v29, &qword_1ED6F3290);
    }
    else
    {
      sub_1BDDA2E8C(v29, (uint64_t)v13, type metadata accessor for Proto_Constants);
    }
    v31 = v44;
    v32 = v13[2];
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_Constants);
    v33 = v45;
    *(_QWORD *)(v45 + 32) = v32;
    swift_bridgeObjectRelease();
    sub_1BDD9C318(v43, v31, type metadata accessor for Proto_RetainCounts);
    swift_beginAccess();
    swift_retain();
    v34 = swift_bridgeObjectRetain();
    v35 = sub_1BDFCCDC4(v34, v33, type metadata accessor for Proto_KeyPath, (void (*)(BOOL, unint64_t, uint64_t))sub_1BDE227D0, (void (*)(uint64_t))sub_1BDFCABA0);
    swift_bridgeObjectRelease();
    swift_release();
    v36 = *(int *)(v40 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_RetainCounts._StorageClass(0);
      swift_allocObject();
      v37 = swift_retain();
      *(_QWORD *)(v31 + v36) = sub_1BE12EA90(v37);
      swift_release();
    }
    v38 = (uint64_t *)(*(_QWORD *)(v31 + v36)
                    + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__referenceKeys);
    swift_beginAccess();
    *v38 = v35;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BDFC77E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t result;
  _QWORD v58[4];
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;

  v76 = a2;
  v3 = type metadata accessor for Proto_CustomCRDT(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v73 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v72 = (char *)v58 - v6;
  v7 = type metadata accessor for Proto_Counter(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v70 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v69 = (char *)v58 - v10;
  v11 = type metadata accessor for Proto_OrderedSet(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v66 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v67 = (char *)v58 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v62 = (char *)v58 - v17;
  MEMORY[0x1E0C80A78](v16);
  v64 = (char *)v58 - v18;
  v59 = type metadata accessor for Proto_Sequence(0);
  v19 = MEMORY[0x1E0C80A78](v59);
  v74 = (char *)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v77 = (char *)v58 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v58[3] = (char *)v58 - v24;
  MEMORY[0x1E0C80A78](v23);
  v58[2] = (char *)v58 - v25;
  v26 = type metadata accessor for Proto_Struct(0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v60 = (char *)v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v58[0] = (char *)v58 - v30;
  MEMORY[0x1E0C80A78](v29);
  v61 = (char *)v58 - v31;
  v75 = type metadata accessor for Proto_Set(0);
  v32 = MEMORY[0x1E0C80A78](v75);
  v68 = (char *)v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v71 = (char *)v58 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v63 = (char *)v58 - v37;
  MEMORY[0x1E0C80A78](v36);
  v65 = (char *)v58 - v38;
  v39 = type metadata accessor for Proto_Register(0);
  v40 = MEMORY[0x1E0C80A78](v39);
  v58[1] = (char *)v58 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v42);
  v44 = (char *)v58 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = MEMORY[0x1E0C80A78](v45);
  v49 = (char *)v58 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47);
  v51 = (char *)v58 - v50;
  v52 = type metadata accessor for Proto_CRDT(0);
  v53 = *(_QWORD *)(a1 + *(int *)(v52 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v53, (uint64_t)v44, &qword_1ED6F2DF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) != 1)
  {
    sub_1BDDA2E8C((uint64_t)v44, (uint64_t)v51, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    v54 = v76;
    sub_1BE1B20E4();
    v55 = *(int *)(v52 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v54 + v55) = qword_1ED6F2E08;
    sub_1BDD9C318((uint64_t)v51, (uint64_t)v49, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    v56 = (char *)&loc_1BDFC7D00 + 4 * word_1BE1C08A0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_1BDD86E30((uint64_t)v44, &qword_1ED6F2DF0);
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

uint64_t sub_1BDFC8554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t result;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v86 = a2;
  v60 = type metadata accessor for Proto_CustomCRValue(0);
  v3 = MEMORY[0x1E0C80A78](v60);
  v67 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v77 = (char *)v58 - v5;
  v82 = type metadata accessor for Proto_TaggedValue(0);
  v6 = MEMORY[0x1E0C80A78](v82);
  v68 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v83 = (char *)v58 - v8;
  v59 = type metadata accessor for Proto_RepeatedValue(0);
  v9 = MEMORY[0x1E0C80A78](v59);
  v66 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v76 = (char *)v58 - v11;
  v12 = type metadata accessor for Proto_Value(0);
  v84 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v72 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v79 = (char *)v58 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v70 = (char *)v58 - v18;
  MEMORY[0x1E0C80A78](v17);
  v71 = (char *)v58 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v21 = MEMORY[0x1E0C80A78](v20);
  v65 = (char *)v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v64 = (char *)v58 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v80 = (char *)v58 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v69 = (char *)v58 - v28;
  MEMORY[0x1E0C80A78](v27);
  v75 = (char *)v58 - v29;
  v78 = type metadata accessor for Proto_Optional(0);
  v30 = MEMORY[0x1E0C80A78](v78);
  v58[0] = (char *)v58 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v81 = (char *)v58 - v32;
  v33 = type metadata accessor for Proto_Reference(0);
  v34 = MEMORY[0x1E0C80A78](v33);
  v73 = (char *)v58 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v74 = (char *)v58 - v36;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v38 = MEMORY[0x1E0C80A78](v37);
  v62 = (char *)v58 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v38);
  v63 = (char *)v58 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v61 = (char *)v58 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v58[1] = (char *)v58 - v45;
  MEMORY[0x1E0C80A78](v44);
  v47 = (char *)v58 - v46;
  v48 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = MEMORY[0x1E0C80A78](v48);
  v52 = (char *)v58 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50);
  v54 = (char *)v58 - v53;
  v85 = v12;
  v55 = *(_QWORD *)(a1 + *(int *)(v12 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v55, (uint64_t)v47, &qword_1ED6F26F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48) != 1)
  {
    sub_1BDDA2E8C((uint64_t)v47, (uint64_t)v54, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1BDD9C318(a1, v86, type metadata accessor for Proto_Value);
    sub_1BDD9C318((uint64_t)v54, (uint64_t)v52, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v56 = (char *)&loc_1BDFC8AD4 + 4 * word_1BE1C08B4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_1BDD86E30((uint64_t)v47, &qword_1ED6F26F0);
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

uint64_t sub_1BDFC95E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v59 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v4 = MEMORY[0x1E0C80A78](v3);
  v58 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v57 = (uint64_t)&v57 - v7;
  MEMORY[0x1E0C80A78](v6);
  v64 = (uint64_t)&v57 - v8;
  v9 = type metadata accessor for Proto_Value(0);
  v68 = *(_QWORD *)(v9 - 8);
  v69 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v57 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v14 = MEMORY[0x1E0C80A78](v13);
  v62 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v61 = (uint64_t)&v57 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v57 - v18;
  v20 = type metadata accessor for Proto_Timestamp(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (uint64_t *)((char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v57 - v25;
  sub_1BE1B20E4();
  v27 = type metadata accessor for Proto_Register(0);
  v28 = *(int *)(v27 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  v70 = a2;
  v63 = v28;
  *(_QWORD *)(a2 + v28) = qword_1ED6EF780;
  v60 = *(int *)(v27 + 20);
  v29 = v59;
  v30 = *(_QWORD *)(v59 + v60)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v30, (uint64_t)v19, &qword_1ED6F3850);
  v31 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    *v24 = 0;
    v24[1] = 0;
    swift_retain();
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v19, &qword_1ED6F3850);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v19, (uint64_t)v24, type metadata accessor for Proto_Timestamp);
    swift_retain();
  }
  sub_1BDDA2E8C((uint64_t)v24, (uint64_t)v26, type metadata accessor for Proto_Timestamp);
  v32 = v70;
  v33 = v63;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = (uint64_t)v65;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    v36 = swift_retain();
    *(_QWORD *)(v32 + v33) = sub_1BE131250(v36);
    swift_release();
  }
  v37 = *(_QWORD *)(v32 + v33);
  v38 = v61;
  sub_1BDDA2E8C((uint64_t)v26, v61, type metadata accessor for Proto_Timestamp);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v38, 0, 1, v20);
  v39 = v38;
  v40 = v62;
  sub_1BDDA2EF0(v39, v62, &qword_1ED6F3850);
  v41 = v37 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v40, v41, &qword_1ED6F3850);
  swift_endAccess();
  swift_release();
  v42 = *(_QWORD *)(v29 + v60)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v43 = v64;
  sub_1BDD86DEC(v42, v64, &qword_1ED6F3770);
  v45 = v68;
  v44 = v69;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v43, 1, v69) == 1)
  {
    sub_1BE1B20E4();
    v46 = *(int *)(v44 + 20);
    v47 = (uint64_t)v67;
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v35 + v46) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v43, &qword_1ED6F3770);
  }
  else
  {
    sub_1BDDA2E8C(v43, v35, type metadata accessor for Proto_Value);
    v47 = (uint64_t)v67;
  }
  v48 = v66;
  sub_1BDFC8554(v35, v47);
  sub_1BDD9C3E0(v35, type metadata accessor for Proto_Value);
  if (v48)
    return sub_1BDD9C3E0(v32, type metadata accessor for Proto_Register);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    v50 = swift_retain();
    *(_QWORD *)(v32 + v33) = sub_1BE131250(v50);
    swift_release();
  }
  v51 = *(_QWORD *)(v32 + v33);
  v52 = v47;
  v53 = v57;
  sub_1BDDA2E8C(v52, v57, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v53, 0, 1, v44);
  v54 = v53;
  v55 = v58;
  sub_1BDDA2EF0(v54, v58, &qword_1ED6F3770);
  v56 = v51 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v55, v56, &qword_1ED6F3770);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDFC9BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;

  sub_1BDD9C318(a1, a2, type metadata accessor for Proto_Set);
  v5 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  swift_beginAccess();
  swift_retain();
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1BDFCCF1C(v6, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v3)
    return sub_1BDD9C3E0(a2, type metadata accessor for Proto_Set);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    v9 = swift_retain();
    *(_QWORD *)(a2 + v5) = sub_1BDDA1768(v9);
    swift_release();
  }
  v10 = (uint64_t *)(*(_QWORD *)(a2 + v5)
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  *v10 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDFC9D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v71 = a3;
  v75 = a2;
  v76 = type metadata accessor for Proto_CRDT(0);
  v74 = *(_QWORD *)(v76 - 8);
  v6 = MEMORY[0x1E0C80A78](v76);
  v69 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v70 = (uint64_t)&v61 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v10 = MEMORY[0x1E0C80A78](v9);
  v64 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v63 = (uint64_t)&v61 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v68 = (uint64_t)&v61 - v15;
  MEMORY[0x1E0C80A78](v14);
  v73 = (uint64_t)&v61 - v16;
  v17 = type metadata accessor for Proto_Value(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v72 = (uint64_t)&v61 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v24 = MEMORY[0x1E0C80A78](v23);
  v67 = (uint64_t)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v65 = (uint64_t)&v61 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v61 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v61 - v31;
  sub_1BDD9C318(a1, a4, type metadata accessor for Proto_Set.Element);
  v33 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  v34 = *(_QWORD *)(a4 + v33)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1BDD86DEC(v34, (uint64_t)v32, &qword_1ED6F3770);
  v66 = v18;
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v34) = v35(v32, 1, v17);
  sub_1BDD86E30((uint64_t)v32, &qword_1ED6F3770);
  if ((_DWORD)v34 == 1)
  {
    v36 = v77;
    v37 = v76;
  }
  else
  {
    v61 = a4;
    v62 = v33;
    v38 = *(_QWORD *)(a4 + v33)
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
    swift_beginAccess();
    sub_1BDD86DEC(v38, (uint64_t)v30, &qword_1ED6F3770);
    v39 = v35(v30, 1, v17);
    v37 = v76;
    if (v39 == 1)
    {
      sub_1BE1B20E4();
      v40 = *(int *)(v17 + 20);
      v41 = v77;
      if (qword_1ED6F2718 != -1)
        swift_once();
      *(_QWORD *)&v21[v40] = qword_1ED6F2708;
      swift_retain();
      sub_1BDD86E30((uint64_t)v30, &qword_1ED6F3770);
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v30, (uint64_t)v21, type metadata accessor for Proto_Value);
      v41 = v77;
    }
    sub_1BDFC8554((uint64_t)v21, v72);
    v36 = v41;
    sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for Proto_Value);
    a4 = v61;
    v33 = v62;
    if (v41)
    {
LABEL_19:
      result = sub_1BDD9C3E0(a4, type metadata accessor for Proto_Set.Element);
      *v71 = v36;
      return result;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set.Element._StorageClass(0);
      swift_allocObject();
      v42 = swift_retain();
      *(_QWORD *)(a4 + v33) = sub_1BE13500C(v42);
      swift_release();
    }
    v43 = *(_QWORD *)(a4 + v33);
    v44 = v65;
    sub_1BDDA2E8C(v72, v65, type metadata accessor for Proto_Value);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v66 + 56))(v44, 0, 1, v17);
    v45 = v67;
    sub_1BDDA2EF0(v44, v67, &qword_1ED6F3770);
    v46 = v43 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v45, v46, &qword_1ED6F3770);
    swift_endAccess();
    swift_release();
  }
  v47 = *(_QWORD *)(a4 + v33)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v48 = v73;
  sub_1BDD86DEC(v47, v73, &qword_1ED6F3728);
  v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  LODWORD(v47) = v49(v48, 1, v37);
  result = sub_1BDD86E30(v48, &qword_1ED6F3728);
  if ((_DWORD)v47 == 1)
    return result;
  v51 = *(_QWORD *)(a4 + v33)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v52 = v68;
  sub_1BDD86DEC(v51, v68, &qword_1ED6F3728);
  if (v49(v52, 1, v37) == 1)
  {
    v53 = v69;
    sub_1BE1B20E4();
    v54 = *(int *)(v37 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v53 + v54) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v52, &qword_1ED6F3728);
  }
  else
  {
    v53 = v69;
    sub_1BDDA2E8C(v52, v69, type metadata accessor for Proto_CRDT);
  }
  sub_1BDFC77E8(v53);
  sub_1BDD9C3E0(v53, type metadata accessor for Proto_CRDT);
  if (v36)
    goto LABEL_19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    v55 = swift_retain();
    *(_QWORD *)(a4 + v33) = sub_1BE13500C(v55);
    swift_release();
  }
  v56 = *(_QWORD *)(a4 + v33);
  v57 = v63;
  sub_1BDDA2E8C(v70, v63, type metadata accessor for Proto_CRDT);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v57, 0, 1, v37);
  v58 = v57;
  v59 = v64;
  sub_1BDDA2EF0(v58, v64, &qword_1ED6F3728);
  v60 = v56 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v59, v60, &qword_1ED6F3728);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDFCA488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  v5 = MEMORY[0x1E0C80A78](v4);
  v63 = (uint64_t)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v62 = (uint64_t)&v60 - v8;
  MEMORY[0x1E0C80A78](v7);
  v66 = (uint64_t)&v60 - v9;
  v68 = type metadata accessor for Proto_Sequence(0);
  v70 = *(_QWORD *)(v68 - 8);
  v10 = MEMORY[0x1E0C80A78](v68);
  v69 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v60 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v65 = (uint64_t)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v64 = (uint64_t)&v60 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v60 - v18;
  v20 = type metadata accessor for Proto_Set(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v60 - v25;
  sub_1BDD9C318(a1, a2, type metadata accessor for Proto_OrderedSet);
  v27 = type metadata accessor for Proto_OrderedSet(0);
  v28 = a2;
  v29 = *(_QWORD *)(a2 + *(int *)(v27 + 20));
  v30 = *(int *)(v27 + 20);
  v31 = v29 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1BDD86DEC(v31, (uint64_t)v19, qword_1ED6F2EF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_1BE1B20E4();
    v32 = *(int *)(v20 + 20);
    if (qword_1ED6F2808 != -1)
      swift_once();
    *(_QWORD *)&v24[v32] = qword_1ED6F2800;
    swift_retain();
    sub_1BDD86E30((uint64_t)v19, qword_1ED6F2EF8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v19, (uint64_t)v24, type metadata accessor for Proto_Set);
  }
  v33 = v71;
  sub_1BDFC9BD4((uint64_t)v24, (uint64_t)v26);
  sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_Set);
  v34 = v28;
  if (v33)
    return sub_1BDD9C3E0(v28, type metadata accessor for Proto_OrderedSet);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    v35 = swift_retain();
    *(_QWORD *)(v28 + v30) = sub_1BE13A9C4(v35);
    swift_release();
  }
  v36 = *(_QWORD *)(v28 + v30);
  v37 = v64;
  sub_1BDDA2E8C((uint64_t)v26, v64, type metadata accessor for Proto_Set);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v37, 0, 1, v20);
  v38 = v65;
  sub_1BDDA2EF0(v37, v65, qword_1ED6F2EF8);
  v39 = v36 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v38, v39, qword_1ED6F2EF8);
  swift_endAccess();
  swift_release();
  v40 = *(_QWORD *)(v34 + v30)
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  v41 = v66;
  sub_1BDD86DEC(v40, v66, &qword_1ED6F2E98);
  v42 = v68;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v41, 1, v68);
  v61 = v30;
  if (v43 == 1)
  {
    v44 = v69;
    sub_1BE1B20E4();
    v45 = *(int *)(v42 + 20);
    v46 = (uint64_t)v67;
    if (qword_1ED6EF5C0 != -1)
      swift_once();
    *(_QWORD *)(v44 + v45) = qword_1ED6EF5B0;
    swift_retain();
    sub_1BDD86E30(v41, &qword_1ED6F2E98);
  }
  else
  {
    v44 = v69;
    sub_1BDDA2E8C(v41, v69, type metadata accessor for Proto_Sequence);
    v46 = (uint64_t)v67;
  }
  sub_1BDD9C318(v44, v46, type metadata accessor for Proto_Sequence);
  v47 = *(int *)(v42 + 20);
  swift_beginAccess();
  v48 = v72;
  swift_retain();
  v49 = swift_bridgeObjectRetain();
  v50 = sub_1BDFCCDC4(v49, v48, type metadata accessor for Proto_Value, (void (*)(BOOL, unint64_t, uint64_t))sub_1BDE225DC, (void (*)(uint64_t))sub_1BDFC8554);
  swift_bridgeObjectRelease();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    v52 = (_QWORD *)swift_retain();
    *(_QWORD *)(v46 + v47) = sub_1BE13BE10(v52);
    swift_release();
  }
  v53 = *(_QWORD *)(v46 + v47);
  swift_beginAccess();
  *(_QWORD *)(v53 + 32) = v50;
  swift_bridgeObjectRelease();
  sub_1BDD9C3E0(v69, type metadata accessor for Proto_Sequence);
  v54 = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    v55 = swift_retain();
    *(_QWORD *)(v34 + v54) = sub_1BE13A9C4(v55);
    swift_release();
  }
  v56 = *(_QWORD *)(v34 + v54);
  v57 = v62;
  sub_1BDDA2E8C(v46, v62, type metadata accessor for Proto_Sequence);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v57, 0, 1, v42);
  v58 = v63;
  sub_1BDDA2EF0(v57, v63, &qword_1ED6F2E98);
  v59 = v56 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v58, v59, &qword_1ED6F2E98);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDFCABA0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;

  v4 = sub_1BE1B1F58();
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B2804();
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v42 - v14;
  v16 = type metadata accessor for Proto_Value(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  if (*(_QWORD *)(v20 + 16) != 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v29 = 0xD000000000000021;
    *(_QWORD *)(v29 + 8) = 0x80000001BE1CF660;
    *(_BYTE *)(v29 + 16) = 0;
    return swift_willThrow();
  }
  *a2 = MEMORY[0x1E0DEE9D8];
  a2[1] = sub_1BE1B20CC();
  a2[2] = v21;
  type metadata accessor for Proto_KeyPath(0);
  result = sub_1BE1B20E4();
  if (!*(_QWORD *)(v20 + 16))
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  sub_1BDD9C318(v20 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), (uint64_t)v19, type metadata accessor for Proto_Value);
  v23 = *(_QWORD *)&v19[*(int *)(v16 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v15, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Value);
  v24 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v15, 1, v24) != 1)
  {
    sub_1BDD86DEC((uint64_t)v15, (uint64_t)v13, &qword_1ED6F26F0);
    result = swift_getEnumCaseMultiPayload();
    switch((_DWORD)result)
    {
      case 5:
        v30 = *v13;
        if ((*v13 & 0x8000000000000000) == 0)
        {
          v31 = *(_QWORD *)(v46 + 16);
          if (v30 < *(_QWORD *)(v31 + 16))
          {
            v33 = v44;
            v32 = v45;
            (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v6, v31+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v30, v45);
            *(_QWORD *)&v47 = sub_1BDDC4278((uint64_t)&unk_1E7757C90);
            *((_QWORD *)&v47 + 1) = v34;
            v35 = sub_1BDEE7C7C();
            v37 = v36;
            sub_1BE1B1EA4();
            sub_1BDDB796C(v35, v37);
            (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v32);
            goto LABEL_16;
          }
          goto LABEL_24;
        }
        goto LABEL_22;
      case 3:
        v38 = *v13;
        v39 = v13[1];
        *(_QWORD *)&v47 = sub_1BDDC4278((uint64_t)&unk_1E7757CB8);
        *((_QWORD *)&v47 + 1) = v40;
        sub_1BE1B1EA4();
        sub_1BDDB796C(v38, v39);
        goto LABEL_16;
      case 2:
        if ((*v13 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)*v13 < *(_QWORD *)(*(_QWORD *)(v46 + 32) + 16))
          {
            swift_bridgeObjectRetain();
            *(_QWORD *)&v47 = sub_1BDDC4278((uint64_t)&unk_1E7757CE0);
            *((_QWORD *)&v47 + 1) = v25;
            sub_1BE1B27F8();
            v26 = sub_1BE1B27D4();
            v28 = v27;
            swift_bridgeObjectRelease();
            result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v9, v43);
            if (v28 >> 60 != 15)
            {
              sub_1BE1B1EA4();
              sub_1BDD9CC0C(v26, v28);
LABEL_16:
              v46 = v47;
              sub_1BDDB796C(a2[1], a2[2]);
              *(_OWORD *)(a2 + 1) = v46;
              return sub_1BDD86E30((uint64_t)v15, &qword_1ED6F26F0);
            }
            goto LABEL_25;
          }
          goto LABEL_23;
        }
        goto LABEL_21;
    }
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v41 = 0xD00000000000001BLL;
  *(_QWORD *)(v41 + 8) = 0x80000001BE1CF690;
  *(_BYTE *)(v41 + 16) = 0;
  swift_willThrow();
  sub_1BDD86E30((uint64_t)v15, &qword_1ED6F26F0);
  return sub_1BDD9C3E0((uint64_t)a2, type metadata accessor for Proto_KeyPath);
}

uint64_t sub_1BDFCB074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v5 = MEMORY[0x1E0C80A78](v4);
  v30 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v29 = (uint64_t)&v28 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for Proto_KeyPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (uint64_t *)((char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v17 = (uint64_t *)((char *)&v28 - v16);
  sub_1BDD9C318(a1, a2, type metadata accessor for Proto_Reference);
  v18 = *(int *)(type metadata accessor for Proto_Reference(0) + 20);
  v19 = *(_QWORD *)(a2 + v18)
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v10, &qword_1ED6F3790);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    *v15 = MEMORY[0x1E0DEE9D8];
    v15[1] = sub_1BE1B20CC();
    v15[2] = v20;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3790);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v15, type metadata accessor for Proto_KeyPath);
  }
  v21 = v31;
  sub_1BDFCABA0(v15, v17);
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_KeyPath);
  if (v21)
    return sub_1BDD9C3E0(a2, type metadata accessor for Proto_Reference);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v23 = swift_retain();
    *(_QWORD *)(a2 + v18) = sub_1BDDA1424(v23);
    swift_release();
  }
  v24 = *(_QWORD *)(a2 + v18);
  v25 = v29;
  sub_1BDDA2E8C((uint64_t)v17, v29, type metadata accessor for Proto_KeyPath);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v25, 0, 1, v11);
  v26 = v30;
  sub_1BDDA2EF0(v25, v30, &qword_1ED6F3790);
  v27 = v24 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v26, v27, &qword_1ED6F3790);
  swift_endAccess();
  return swift_release();
}

sqlite3_stmt *sub_1BDFCB36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  sqlite3_stmt *result;
  sqlite3_stmt *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  char v99;
  uint64_t v100;

  v83 = a2;
  v100 = *MEMORY[0x1E0C80C00];
  v4 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v4);
  v80 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for Proto_RetainCounts(0);
  v6 = MEMORY[0x1E0C80A78](v79);
  v77 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v89 = (char *)&v66 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v9);
  v86 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Proto_KeyPath(0);
  v87 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v74 = (uint64_t *)((char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v12);
  v75 = (uint64_t)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v78);
  v82 = (uint64_t)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Proto_Document(0);
  v15 = MEMORY[0x1E0C80A78](v88);
  v73 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v93 = (char *)&v66 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v81 = (char *)&v66 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v66 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v66 - v24;
  v26 = sub_1BE1B2804();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  result = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (v2)
  {
    v97 = v2;
    return result;
  }
  v32 = result;
  v96 = v29;
  v97 = v27;
  v71 = v25;
  v68 = v23;
  v90 = v30;
  if (sqlite3_step(result) == 100)
    v33 = sqlite3_column_int(v32, 0);
  else
    v33 = 0;
  v34 = v87;
  v35 = v26;
  v37 = v96;
  v36 = v97;
  sqlite3_finalize(v32);
  v98 = sub_1BDE067B0(0, v33 & ~(v33 >> 63), 0, MEMORY[0x1E0DEE9D8]);
  sub_1BDDF4840(v90, &v98);
  v97 = 0;
  sub_1BE1B27F8();
  v76 = sub_1BE1B27D4();
  v39 = v38;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  if (v39 >> 60 == 15)
  {
    __break(1u);
    JUMPOUT(0x1BDFCCBE8);
  }
  v40 = v98[2];
  v42 = v85;
  v41 = (uint64_t)v86;
  if (v40)
  {
    v69 = OBJC_IVAR___CRContext_assetManager;
    v67 = swift_bridgeObjectRetain();
    v92 = v67 + 40;
    v70 = v39;
    v72 = v40;
    v44 = *(_QWORD *)(v67 + 32);
    v43 = *(_QWORD *)(v67 + 40);
    sub_1BDDB6CA4(v44, v43);
    sub_1BDDD6F30(v44, v43);
    v91 = v43;
    v95 = v44;
    if ((v45 & 1) != 0)
    {
      v94 = sub_1BDDC4278((uint64_t)&unk_1E7757C68);
      v47 = v46;
      goto LABEL_23;
    }
    type metadata accessor for UpgradeKeyPaths();
    v48 = (_QWORD *)swift_allocObject();
    v49 = MEMORY[0x1E0DEE9D8];
    v48[2] = MEMORY[0x1E0DEE9D8];
    v50 = MEMORY[0x1E0DEE9E0];
    v48[3] = MEMORY[0x1E0DEE9E0];
    v48[4] = v49;
    v48[5] = v50;
    v48[6] = 0;
    v48[7] = 0;
    v51 = (uint64_t)v68;
    v52 = v97;
    sub_1BDDD1368((uint64_t)&v99, (uint64_t)v68, v44, v43);
    v97 = v52;
    if (!v52)
    {
      v53 = (uint64_t)v71;
      sub_1BDFC600C(v51, (uint64_t)v71);
      v97 = 0;
      sub_1BDD9C3E0(v51, type metadata accessor for Proto_Document);
      swift_release();
      v54 = *(_QWORD *)(v53 + *(int *)(v88 + 20))
          + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
      swift_beginAccess();
      v55 = v75;
      sub_1BDD86DEC(v54, v75, &qword_1ED6F37C8);
      v56 = type metadata accessor for Proto_Document.OneOf_Root(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v55, 1, v56) == 1)
      {
        sub_1BDD86E30(v55, &qword_1ED6F37C8);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          v57 = v82;
          sub_1BDDA2E8C(v55, v82, type metadata accessor for Proto_Reference);
LABEL_19:
          v60 = v78;
          sub_1BDD9C3E0((uint64_t)v71, type metadata accessor for Proto_Document);
          v61 = *(_QWORD *)(v57 + *(int *)(v60 + 20))
              + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
          swift_beginAccess();
          sub_1BDD86DEC(v61, v41, &qword_1ED6F3790);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v41, 1, v42) == 1)
          {
            v62 = v74;
            *v74 = MEMORY[0x1E0DEE9D8];
            v62[1] = sub_1BE1B20CC();
            v62[2] = v63;
            sub_1BE1B20E4();
            sub_1BDD86E30(v41, &qword_1ED6F3790);
          }
          else
          {
            v62 = v74;
            sub_1BDDA2E8C(v41, (uint64_t)v74, type metadata accessor for Proto_KeyPath);
          }
          sub_1BDD9C3E0(v82, type metadata accessor for Proto_Reference);
          v47 = v62[2];
          v94 = v62[1];
          sub_1BDDB6CA4(v94, v47);
          sub_1BDD9C3E0((uint64_t)v62, type metadata accessor for Proto_KeyPath);
          v43 = v91;
LABEL_23:
          v92 += 16;
          v64 = (char *)&loc_1BDFCBA40 + *((int *)qword_1BDFCCBE8 + (v43 >> 62));
          v84 = v47;
          __asm { BR              X8 }
        }
        sub_1BDD9C3E0(v55, type metadata accessor for Proto_Document.OneOf_Root);
      }
      v58 = v78;
      v57 = v82;
      sub_1BE1B20E4();
      v59 = *(int *)(v58 + 20);
      if (qword_1ED6EFD78 != -1)
        swift_once();
      *(_QWORD *)(v57 + v59) = qword_1ED6EFD68;
      swift_retain();
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v95, v91);
    sub_1BDD9CC0C(v76, v39);
    swift_release();
    return (sqlite3_stmt *)swift_bridgeObjectRelease();
  }
  else
  {
    v65 = v97;
    sub_1BDDF37C4(1, 0x10000);
    sub_1BDD9CC0C(v76, v39);
    result = (sqlite3_stmt *)swift_bridgeObjectRelease();
    v97 = v65;
  }
  return result;
}

uint64_t sub_1BDFCCC18()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UpgradeKeyPaths()
{
  return objc_opt_self();
}

uint64_t sub_1BDFCCC74(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  result = sub_1BE1B1C70();
  v5 = (const char *)result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = sub_1BE1B1C88();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = &v5[v9];
  if (v5)
    v11 = (uint64_t)v10;
  else
    v11 = 0;
  sub_1BDDF4F8C(v5, v11);
  return swift_release();
}

uint64_t sub_1BDFCCD14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1BE1B1C70();
  v9 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_13;
  }
  v12 = sub_1BE1B1C88();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  sub_1BDDFAB2C(v9, v15, a3, a4);
  return swift_release();
}

uint64_t sub_1BDFCCDC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(BOOL, unint64_t, uint64_t), void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  void (*v20)(BOOL, unint64_t, uint64_t);
  unint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;

  v23 = a2;
  v24 = a5;
  v22 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x1E0DEE9D8];
  if (v12)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    v20 = a4;
    a4(0, v12, 0);
    v13 = v25;
    v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = a1 + v21;
    v15 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      v24(v14);
      if (v5)
        break;
      v25 = v13;
      v17 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        v20(v16 > 1, v17 + 1, 1);
        v13 = v25;
      }
      *(_QWORD *)(v13 + 16) = v17 + 1;
      sub_1BDDA2E8C((uint64_t)v11, v13 + v21 + v17 * v15, v22);
      v14 += v15;
      if (!--v12)
        return v13;
    }
    swift_release();
  }
  return v13;
}

uint64_t sub_1BDFCCF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v17 = a2;
  v5 = type metadata accessor for Proto_Set.Element(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1BDE22558(0, v9, 0);
    v10 = v19;
    v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = a1 + v11;
    v13 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_1BDFC9D1C(v12, v17, &v18, (uint64_t)v8);
      if (v3)
        break;
      v3 = 0;
      v19 = v10;
      v15 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1BDE22558(v14 > 1, v15 + 1, 1);
        v10 = v19;
      }
      *(_QWORD *)(v10 + 16) = v15 + 1;
      sub_1BDDA2E8C((uint64_t)v8, v10 + v11 + v15 * v13, type metadata accessor for Proto_Set.Element);
      v12 += v13;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t sub_1BDFCD070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  v3 = v2;
  v46 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v6 = MEMORY[0x1E0C80A78](v5);
  v44 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v43 = (uint64_t)&v38 - v9;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v38 - v10;
  v12 = type metadata accessor for Proto_KeyPath(0);
  v49 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v48 = (uint64_t *)((char *)&v38 - v16);
  v45 = type metadata accessor for Proto_Reference(0);
  v17 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = MEMORY[0x1E0DEE9D8];
  if (v20)
  {
    v50 = MEMORY[0x1E0DEE9D8];
    v47 = v20;
    sub_1BDE22634(0, v20, 0);
    v41 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v22 = a1 + v41;
    v23 = *(_QWORD *)(v17 + 72);
    v39 = v15;
    v40 = v23;
    v42 = v11;
    while (1)
    {
      sub_1BDD9C318(v22, (uint64_t)v19, type metadata accessor for Proto_Reference);
      v24 = *(int *)(v45 + 20);
      v25 = *(_QWORD *)&v19[v24]
          + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
      swift_beginAccess();
      sub_1BDD86DEC(v25, (uint64_t)v11, &qword_1ED6F3790);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v11, 1, v12) == 1)
      {
        *v15 = MEMORY[0x1E0DEE9D8];
        v15[1] = sub_1BE1B20CC();
        v15[2] = v26;
        sub_1BE1B20E4();
        sub_1BDD86E30((uint64_t)v11, &qword_1ED6F3790);
      }
      else
      {
        sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Proto_KeyPath);
      }
      v21 = v46;
      sub_1BDFCABA0(v15, v48);
      sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_KeyPath);
      if (v3)
        break;
      v27 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Reference._StorageClass(0);
        swift_allocObject();
        v28 = swift_retain();
        *(_QWORD *)&v19[v24] = sub_1BDDA1424(v28);
        swift_release();
      }
      v29 = *(_QWORD *)&v19[v24];
      v30 = v43;
      sub_1BDDA2E8C((uint64_t)v48, v43, type metadata accessor for Proto_KeyPath);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v30, 0, 1, v27);
      v31 = v30;
      v32 = v44;
      sub_1BDDA2EF0(v31, v44, &qword_1ED6F3790);
      v33 = v29
          + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v32, v33, &qword_1ED6F3790);
      swift_endAccess();
      swift_release();
      v21 = v50;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BDE22634(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v50;
      }
      v35 = *(_QWORD *)(v21 + 16);
      v34 = *(_QWORD *)(v21 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_1BDE22634(v34 > 1, v35 + 1, 1);
        v21 = v50;
      }
      *(_QWORD *)(v21 + 16) = v35 + 1;
      v36 = v40;
      sub_1BDDA2E8C((uint64_t)v19, v21 + v41 + v35 * v40, type metadata accessor for Proto_Reference);
      v22 += v36;
      --v47;
      v12 = v27;
      v11 = v42;
      v3 = 0;
      v15 = v39;
      if (!v47)
        return v21;
    }
    sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Reference);
    swift_release();
  }
  return v21;
}

uint64_t sub_1BDFCD4B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];

  v6 = sub_1BE1B1DE4();
  v8 = v7;
  sub_1BDD86DEC((uint64_t)a1 + OBJC_IVAR___CRContext_encryptionDelegate, (uint64_t)v12, qword_1ED6F3DD0);
  type metadata accessor for CRSQLStore();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  result = sub_1BDDF4324(v6, v8, (uint64_t)v12, 1, 0, 0, (uint64_t)&unk_1E7757C40, a3);
  if (!v3)
  {
    v10 = result;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1BE1B61B0;
    sub_1BE1B305C();
    swift_bridgeObjectRelease();
    sub_1BE1B1DF0();
    sub_1BDD8422C(&qword_1EF52F158, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    sub_1BE1B32E4();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v11 + 32) = 0xD000000000000020;
    *(_QWORD *)(v11 + 40) = 0x80000001BE1CF6D0;
    sub_1BE1B36D4();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1BDDF3F14(0, v10, v10, a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDFCD69C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (a2 >> 60 != 15)
  {
    sub_1BDDB796C(result, a2);
    sub_1BDDB796C(a3, a4);
    return sub_1BDDB796C(a6, a7);
  }
  return result;
}

uint64_t *sub_1BDFCD6F4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BE1B1F58();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BDFCD7A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDFCD848(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1BDFCD8B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDFCD944()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDFCD950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1BDFCD9CC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDFCD9D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BE1B1F58();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1BDFCDA50(void (*a1)(_QWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v19[3];
  _QWORD v20[2];
  uint64_t v21;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1BDE224EC(0, v5, 0);
    v6 = v21;
    for (i = (uint64_t *)(a3 + 48); ; i += 3)
    {
      v9 = *(i - 2);
      v10 = *(i - 1);
      v11 = *i;
      v19[0] = v9;
      v19[1] = v10;
      v19[2] = v11;
      sub_1BDDC8E74(v9);
      swift_bridgeObjectRetain();
      a1(v20, v19);
      if (v4)
        break;
      v4 = 0;
      sub_1BDDC8EA0(v9);
      swift_bridgeObjectRelease();
      v12 = v20[0];
      v13 = v20[1];
      v21 = v6;
      v15 = *(_QWORD *)(v6 + 16);
      v14 = *(_QWORD *)(v6 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1BDE224EC(v14 > 1, v15 + 1, 1);
        v6 = v21;
      }
      *(_QWORD *)(v6 + 16) = v15 + 1;
      v16 = v6 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      if (!--v5)
        return v6;
    }
    sub_1BDDC8EA0(v9);
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1BDFCDB9C(void (*a1)(__int128 *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return v4;
  v5 = a3;
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1BDE2297C(0, v3, 0);
  v4 = v27;
  result = sub_1BDFCFF08(v5);
  v7 = result;
  v9 = v8;
  v11 = v10 & 1;
  v22 = v5 + 56;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(v5 + 32))
  {
    if (((*(_QWORD *)(v22 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(v5 + 36) != v9)
      goto LABEL_16;
    v12 = v5;
    v13 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v7);
    v15 = *v13;
    v14 = v13[1];
    v25[0] = v15;
    v25[1] = v14;
    sub_1BDDB6CA4(v15, v14);
    a1(&v26, v25);
    if (v24)
    {
      sub_1BDDB796C(v15, v14);
      swift_release();
      return v4;
    }
    v24 = 0;
    sub_1BDDB796C(v15, v14);
    v16 = v26;
    v27 = v4;
    v18 = *(_QWORD *)(v4 + 16);
    v17 = *(_QWORD *)(v4 + 24);
    if (v18 >= v17 >> 1)
    {
      v21 = v26;
      sub_1BDE2297C(v17 > 1, v18 + 1, 1);
      v16 = v21;
      v4 = v27;
    }
    *(_QWORD *)(v4 + 16) = v18 + 1;
    *(_OWORD *)(v4 + 16 * v18 + 32) = v16;
    v5 = v12;
    result = sub_1BDFCFFAC(v7, v9, v11 & 1, v12);
    v7 = result;
    v9 = v19;
    v11 = v20 & 1;
    if (!--v3)
    {
      sub_1BDE27EC8(result, v19, v20 & 1);
      return v4;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1BDFCDD70(void (*a1)(__int128 *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    sub_1BDE22998(0, v5, 0);
    v6 = v25;
    v9 = (unint64_t *)(a3 + 40);
    while (1)
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      v21[0] = v10;
      v21[1] = v11;
      sub_1BDDB6CA4(v10, v11);
      a1(&v22, v21);
      if (v4)
        break;
      v4 = 0;
      sub_1BDDB796C(v10, v11);
      v12 = v22;
      v13 = v23;
      v14 = v24;
      v25 = v6;
      v16 = *(_QWORD *)(v6 + 16);
      v15 = *(_QWORD *)(v6 + 24);
      if (v16 >= v15 >> 1)
      {
        v19 = v23;
        v20 = v22;
        sub_1BDE22998(v15 > 1, v16 + 1, 1);
        v13 = v19;
        v12 = v20;
        v6 = v25;
      }
      v9 += 2;
      *(_QWORD *)(v6 + 16) = v16 + 1;
      v17 = v6 + 40 * v16;
      *(_OWORD *)(v17 + 32) = v12;
      *(_OWORD *)(v17 + 48) = v13;
      *(_QWORD *)(v17 + 64) = v14;
      if (!--v5)
        return v6;
    }
    sub_1BDDB796C(v10, v11);
    swift_release();
  }
  return v6;
}

uint64_t sub_1BDFCDEB4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v6 = type metadata accessor for Proto_Timestamp(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1BDE229B4(0, v10, 0);
    v11 = v21;
    v12 = *(_QWORD *)(type metadata accessor for Proto4_IndexedTimestamp(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v18 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1BDE229B4(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_1BDDA2E8C((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, type metadata accessor for Proto_Timestamp);
      v13 += v18;
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_1BDFCE028@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = sub_1BDDC5B40(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[3 * a1];
    v9 = *((_OWORD *)v7 + 2);
    v8 = v7 + 4;
    v10 = v8[2];
    v11 = v6 - 1;
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      result = (uint64_t)memmove(v8, v8 + 3, 24 * v12);
      v5[2] = v11;
      *v2 = v5;
      return result;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDFCE114()
{
  uint64_t v0;

  v0 = sub_1BE1B23C0();
  __swift_allocate_value_buffer(v0, qword_1EF549068);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF549068);
  return sub_1BE1B23B4();
}

uint64_t sub_1BDFCE190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 24));
  v12 = v0;
  swift_bridgeObjectRetain();
  v2 = sub_1BDFCDA50((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1BDFD0120, (uint64_t)&v11, v1);
  swift_bridgeObjectRelease();
  v13 = 2117456;
  v14 = 0xE300000000000000;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BE1B61C0;
  v4 = sub_1BE1B1F40();
  v5 = MEMORY[0x1E0DEDE70];
  v6 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v3 + 64) = v6;
  *(_BYTE *)(v3 + 32) = v4;
  v7 = sub_1BE1B1F40();
  *(_QWORD *)(v3 + 96) = v5;
  *(_QWORD *)(v3 + 104) = v6;
  *(_BYTE *)(v3 + 72) = BYTE1(v7);
  sub_1BE1B27EC();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  v9 = v13;
  v8 = v14;
  v13 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525500);
  sub_1BDFD0158((unint64_t *)&qword_1EF525508, &qword_1EF525500);
  sub_1BE1B2708();
  swift_bridgeObjectRelease();
  v13 = v9;
  v14 = v8;
  swift_bridgeObjectRetain();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1BDFCE358@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32[16];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v4 = a1[2];
  v27 = *a1;
  v33 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_1BDFCDB9C((void (*)(__int128 *__return_ptr, _QWORD *))sub_1BDFD013C, (uint64_t)v32, v4);
  swift_bridgeObjectRelease();
  v6 = sub_1BDEFA4A8(v5);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v6 + 16);
  v8 = &unk_1BE1B6000;
  if (v7)
  {
    v26 = a3;
    v36 = MEMORY[0x1E0DEE9D8];
    sub_1BDE224EC(0, v7, 0);
    v9 = v36;
    result = sub_1BDFCFF08(v6);
    v12 = result;
    v29 = v6 + 56;
    v14 = v13 & 1;
    v28 = v6;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(v6 + 32))
    {
      if (((*(_QWORD *)(v29 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_17;
      if (*(_DWORD *)(v6 + 36) != (_DWORD)v11)
        goto LABEL_18;
      v30 = v14;
      v31 = v11;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5254F8);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1BE1B61C0;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      *(_QWORD *)(v15 + 32) = sub_1BDEEECF8();
      *(_QWORD *)(v15 + 40) = sub_1BDEEECF8();
      v34 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525528);
      sub_1BDEF2354();
      sub_1BE1B2708();
      swift_bridgeObjectRelease();
      v34 = 91;
      v35 = 0xE100000000000000;
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1BE1B284C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v16 = v34;
      v17 = v35;
      v36 = v9;
      v19 = *(_QWORD *)(v9 + 16);
      v18 = *(_QWORD *)(v9 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_1BDE224EC(v18 > 1, v19 + 1, 1);
        v9 = v36;
      }
      *(_QWORD *)(v9 + 16) = v19 + 1;
      v20 = v9 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v16;
      *(_QWORD *)(v20 + 40) = v17;
      v6 = v28;
      result = sub_1BDFCFFAC(v12, v31, v30 & 1, v28);
      v12 = result;
      v14 = v21 & 1;
      --v7;
      v8 = (_OWORD *)&unk_1BE1B6000;
      if (!v7)
      {
        sub_1BDE27EC8(result, v11, v14);
        swift_bridgeObjectRelease();
        a3 = v26;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_12:
    v34 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525500);
    sub_1BDFD0158((unint64_t *)&qword_1EF525508, &qword_1EF525500);
    v22 = 0xE200000000000000;
    sub_1BE1B2708();
    swift_bridgeObjectRelease();
    if (v27)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF5254F8);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v8[28];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v23 + 32) = sub_1BDEEECF8();
      *(_QWORD *)(v23 + 40) = sub_1BDEEECF8();
      v34 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF525528);
      sub_1BDEF2354();
      sub_1BE1B2708();
      swift_bridgeObjectRelease();
      v34 = 91;
      v35 = 0xE100000000000000;
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BDDC8EA0(v27);
      v24 = v34;
      v22 = v35;
    }
    else
    {
      v24 = 23899;
    }
    v34 = 8069178;
    v35 = 0xE300000000000000;
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    v34 = v24;
    v35 = v22;
    swift_bridgeObjectRetain();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v25 = v35;
    *a3 = v34;
    a3[1] = v25;
  }
  return result;
}

uint64_t sub_1BDFCE7F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20));
  if (*(_QWORD *)(v6 + 16))
  {
    sub_1BDDB6CA4(v5, v4);
    v7 = sub_1BDDB7F0C(v5, v4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(v6 + 56) + 48 * v7;
      v10 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v9 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB796C(v5, v4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_release();
      *a3 = v10;
      a3[1] = v11;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = sub_1BDDB796C(v5, v4);
  __break(1u);
  return result;
}

unint64_t sub_1BDFCE90C()
{
  unint64_t result;

  result = qword_1EF52F170;
  if (!qword_1EF52F170)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C09F0, &type metadata for PartiallyOrderedReferenceMap.Iterator);
    atomic_store(result, (unint64_t *)&qword_1EF52F170);
  }
  return result;
}

double sub_1BDFCE954@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  _BYTE v10[40];

  sub_1BDFD0090(&v5);
  v8[0] = v5;
  v8[1] = v6;
  v9 = v7;
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v10, &qword_1EF52F180);
  sub_1BDFD00F0((uint64_t)v10);
  sub_1BDF1ABDC(v1);
  result = *(double *)&v5;
  v4 = v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v7;
  return result;
}

uint64_t sub_1BDFCE9CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BDFCF6B8(v0);
  sub_1BDF1ABDC(v0);
  return v1;
}

uint64_t sub_1BDFCEA00(unint64_t a1)
{
  return sub_1BDDC5D60(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1BDFCEA14(unint64_t a1)
{
  return sub_1BDDA82E4(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_1BDFCEA28(_QWORD *a1)
{
  return sub_1BDE06F6C(0, a1[2], 0, a1);
}

_QWORD *sub_1BDFCEA3C(_QWORD *a1)
{
  return sub_1BDE0667C(0, a1[2], 0, a1);
}

_QWORD *sub_1BDFCEA50(_QWORD *a1)
{
  return sub_1BDE072E0(0, a1[2], 0, a1);
}

uint64_t sub_1BDFCEA64(unint64_t a1)
{
  return sub_1BDDC5E98(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1BDFCEA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v4 = v3;
  v8 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20));
  v9 = v8 + 64;
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = ~v10;
  v12 = -v10;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v14 = v13 & *(_QWORD *)(v8 + 64);
  swift_bridgeObjectRetain();
  result = sub_1BDF1ABDC(v4);
  v26 = v8;
  v27 = v8 + 64;
  v28 = (unint64_t)v11;
  v29 = v14;
  v16 = (unint64_t)v11;
  if (!a2)
  {
    a3 = 0;
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_OWORD *)(a1 + 16) = v16;
    *(_QWORD *)(a1 + 32) = v14;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    sub_1BDDA7144((uint64_t)v22);
    v17 = v23;
    if (v23)
    {
      v18 = 0;
      while (1)
      {
        v19 = v25;
        v20 = v22[1];
        v21 = v24;
        *(_OWORD *)a2 = v22[0];
        *(_OWORD *)(a2 + 16) = v20;
        *(_QWORD *)(a2 + 32) = v17;
        *(_OWORD *)(a2 + 40) = v21;
        *(_QWORD *)(a2 + 56) = v19;
        if (a3 - 1 == v18)
          break;
        sub_1BDDA7144((uint64_t)v22);
        v17 = v23;
        a2 += 64;
        ++v18;
        if (!v23)
          goto LABEL_14;
      }
      v8 = v26;
      v9 = v27;
      v16 = v28;
    }
    else
    {
      v18 = 0;
LABEL_14:
      v8 = v26;
      v9 = v27;
      v16 = v28;
      a3 = v18;
    }
    v14 = v29;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDFCEBC8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v32 - v13;
  v15 = *(_QWORD *)(a4 + 64);
  v37 = a4 + 64;
  v16 = -1 << *(_BYTE *)(a4 + 32);
  if (-v16 < 64)
    v17 = ~(-1 << -(char)v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  if (!a2)
  {
    v19 = 0;
    a3 = 0;
LABEL_39:
    v31 = v37;
    *a1 = a4;
    a1[1] = v31;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v34 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v19 = 0;
  v20 = 0;
  v36 = (unint64_t)(63 - v16) >> 6;
  v33 = v36 - 1;
  v21 = a3;
  if (!v18)
    goto LABEL_9;
LABEL_8:
  v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  v23 = v22 | (v19 << 6);
  while (1)
  {
    ++v20;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = type metadata accessor for Replica();
    sub_1BDD9C318(v27 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v23, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v29 = *(_QWORD *)(a4 + 56);
    v30 = sub_1BE1B206C();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(&v11[*(int *)(v39 + 48)], v29 + *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v23, v30);
    sub_1BDDA2EF0((uint64_t)v11, (uint64_t)v14, &qword_1ED6F3CB8);
    result = sub_1BDDA2EF0((uint64_t)v14, a2, &qword_1ED6F3CB8);
    if (v20 == v21)
    {
      a3 = v21;
      goto LABEL_38;
    }
    a2 += *(_QWORD *)(v38 + 72);
    if (v18)
      goto LABEL_8;
LABEL_9:
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v24 >= v36)
      goto LABEL_33;
    v25 = *(_QWORD *)(v37 + 8 * v24);
    if (!v25)
    {
      v19 += 2;
      if (v24 + 1 >= v36)
      {
        v18 = 0;
        v19 = v24;
      }
      else
      {
        v25 = *(_QWORD *)(v37 + 8 * v19);
        if (v25)
          goto LABEL_14;
        v26 = v24 + 2;
        if (v24 + 2 >= v36)
          goto LABEL_33;
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (v25)
        {
LABEL_17:
          v24 = v26;
          goto LABEL_18;
        }
        v19 = v24 + 3;
        if (v24 + 3 < v36)
        {
          v25 = *(_QWORD *)(v37 + 8 * v19);
          if (v25)
          {
LABEL_14:
            v24 = v19;
            goto LABEL_18;
          }
          v26 = v24 + 4;
          if (v24 + 4 >= v36)
          {
LABEL_33:
            v18 = 0;
            goto LABEL_37;
          }
          v25 = *(_QWORD *)(v37 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              v24 = v26 + 1;
              if (__OFADD__(v26, 1))
                goto LABEL_42;
              if (v24 >= v36)
              {
                v18 = 0;
                v19 = v33;
                goto LABEL_37;
              }
              v25 = *(_QWORD *)(v37 + 8 * v24);
              ++v26;
              if (v25)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v18 = 0;
        v19 = v24 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      v16 = v34;
      a1 = v35;
      goto LABEL_39;
    }
LABEL_18:
    v18 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v24 << 6);
    v19 = v24;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1BDFCEED8(_QWORD *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_WORD *)(*(_QWORD *)(a4 + 48) + 2 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_1BDFCF06C(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1BDFCF200(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    *v11 = *v20;
    v11[1] = v22;
    if (v13 == v10)
    {
      sub_1BDDB6CA4(v21, v22);
      goto LABEL_38;
    }
    v11 += 2;
    result = sub_1BDDB6CA4(v21, v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1BDFCF3FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for Replica();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v31 - v14;
  v36 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v35 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v30 = v35;
    *a1 = v36;
    a1[1] = v30;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 32);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_1BDD9C318(*(_QWORD *)(v36 + 48) + v29 * v25, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    result = sub_1BDDA2E8C((uint64_t)v15, a2, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v35 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v35 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1BDFCF6B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(a1, (uint64_t)v4, v5);
  v6 = *(_QWORD *)&v4[*(int *)(v2 + 20)];
  v7 = -1 << *(_BYTE *)(v6 + 32);
  v8 = ~v7;
  v9 = -v7;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  swift_bridgeObjectRetain();
  sub_1BDF1ABDC((uint64_t)v4);
  v44 = v6;
  v45 = v6 + 64;
  v46 = v8;
  v47 = 0;
  v48 = v11;
  result = sub_1BDDA7144((uint64_t)&v38);
  v13 = v41;
  v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v15 = 0;
  if (v41)
  {
    v16 = v43;
    v17 = v42;
    v18 = MEMORY[0x1E0DEE9D8] + 32;
    v19 = v40;
    v20 = v39;
    while (1)
    {
      v21 = v38;
      if (!v15)
      {
        v22 = v14[3];
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_29;
        v36 = v20;
        v37 = v17;
        v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1)
          v24 = 1;
        else
          v24 = v23;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F178);
        v25 = (_QWORD *)swift_allocObject();
        v26 = _swift_stdlib_malloc_size(v25);
        v27 = v26 - 32;
        if (v26 < 32)
          v27 = v26 + 31;
        v28 = v27 >> 6;
        v25[2] = v24;
        v25[3] = 2 * (v27 >> 6);
        v29 = (unint64_t)(v25 + 4);
        v30 = v14[3] >> 1;
        if (v14[2])
        {
          if (v25 != v14 || v29 >= (unint64_t)&v14[8 * v30 + 4])
            memmove(v25 + 4, v14 + 4, v30 << 6);
          v14[2] = 0;
        }
        v18 = v29 + (v30 << 6);
        v15 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        result = swift_release();
        v14 = v25;
        v20 = v36;
        v17 = v37;
      }
      v32 = __OFSUB__(v15--, 1);
      if (v32)
        break;
      *(_QWORD *)v18 = v21;
      *(_QWORD *)(v18 + 24) = v19;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 56) = v16;
      *(_OWORD *)(v18 + 8) = v20;
      *(_OWORD *)(v18 + 40) = v17;
      result = sub_1BDDA7144((uint64_t)&v38);
      v20 = v39;
      v19 = v40;
      v13 = v41;
      v17 = v42;
      v18 += 64;
      v16 = v43;
      if (!v41)
        goto LABEL_24;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_24:
  result = sub_1BDE27FD0();
  v33 = v14[3];
  if (v33 < 2)
    return (uint64_t)v14;
  v34 = v33 >> 1;
  v32 = __OFSUB__(v34, v15);
  v35 = v34 - v15;
  if (!v32)
  {
    v14[2] = v35;
    return (uint64_t)v14;
  }
LABEL_30:
  __break(1u);
  return result;
}

size_t sub_1BDFCF900(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  size_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;

  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC80);
  v4 = *(_QWORD *)(v73 - 8);
  v5 = MEMORY[0x1E0C80A78](v73);
  v7 = (uint64_t *)((char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (uint64_t *)((char *)&v62 - v9);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v62 - v11;
  v14 = *(_QWORD *)(a2 + 16);
  v71 = *(_QWORD *)(a1 + 16);
  v13 = v71;
  v72 = v14;
  if (v14 >= v71)
    v15 = v71;
  else
    v15 = v14;
  v67 = a2;
  v65 = a1;
  if (!v15)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v33 = *(unsigned __int8 *)(v4 + 80);
    v34 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24);
    v68 = (v33 + 32) & ~v33;
    v23 = MEMORY[0x1E0DEE9D8] + v68;
    v32 = v34 >> 1;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_16:
    v35 = v72;
    if (v13 <= v72)
    {
LABEL_47:
      v41 = v19;
LABEL_48:
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v59 = v41[3];
      if (v59 >= 2)
      {
        v60 = v59 >> 1;
        v58 = __OFSUB__(v60, v32);
        v61 = v60 - v32;
        if (v58)
          goto LABEL_61;
        v41[2] = v61;
      }
      return (size_t)v41;
    }
    v66 = v33 | 7;
    if (v15 <= (uint64_t)v72)
      v36 = v72;
    else
      v36 = v15;
    v69 = v65 + 32;
    v70 = v36;
    while (1)
    {
      if (v13 == v15)
        goto LABEL_54;
      if (v35 == v15)
        goto LABEL_47;
      if (v70 == v15)
        goto LABEL_55;
      v37 = *(_QWORD *)(v69 + 8 * v15);
      v38 = type metadata accessor for Proto_Value(0);
      v39 = a2
          + ((*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(v38 - 8) + 72) * v15;
      v40 = (uint64_t)v10 + *(int *)(v73 + 48);
      *v10 = v37;
      sub_1BDD9C318(v39, v40, type metadata accessor for Proto_Value);
      result = sub_1BDDA2EF0((uint64_t)v10, (uint64_t)v12, &qword_1ED6EFC80);
      if (!v32)
        break;
      v41 = v19;
LABEL_44:
      v13 = v71;
      v58 = __OFSUB__(v32--, 1);
      if (v58)
        goto LABEL_56;
      ++v15;
      result = sub_1BDDA2EF0((uint64_t)v12, v23, &qword_1ED6EFC80);
      v23 += *(_QWORD *)(v4 + 72);
      v19 = v41;
      v35 = v72;
      if (v13 == v15)
        goto LABEL_48;
    }
    v42 = v19[3];
    if ((uint64_t)((v42 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_57;
    v43 = v12;
    v44 = v10;
    v45 = v42 & 0xFFFFFFFFFFFFFFFELL;
    v46 = v4;
    if (v45 <= 1)
      v47 = 1;
    else
      v47 = v45;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC78);
    v48 = v46;
    v49 = *(_QWORD *)(v46 + 72);
    v50 = v68;
    v41 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size(v41);
    if (!v49)
      goto LABEL_58;
    v51 = result - v50;
    if (result - v50 == 0x8000000000000000 && v49 == -1)
      goto LABEL_59;
    v53 = v51 / v49;
    v41[2] = v47;
    v41[3] = 2 * (v51 / v49);
    v54 = (char *)v41 + v50;
    v55 = v19[3] >> 1;
    v56 = v55 * v49;
    v4 = v48;
    v10 = v44;
    v12 = v43;
    if (!v19[2])
    {
LABEL_43:
      v23 = (uint64_t)&v54[v56];
      v32 = (v53 & 0x7FFFFFFFFFFFFFFFLL) - v55;
      result = swift_release();
      a2 = v67;
      goto LABEL_44;
    }
    if (v41 < v19 || v54 >= (char *)v19 + v68 + v56)
    {
      v57 = v53;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (v41 == v19)
      {
LABEL_42:
        v19[2] = 0;
        goto LABEL_43;
      }
      v57 = v53;
      swift_arrayInitWithTakeBackToFront();
    }
    v53 = v57;
    goto LABEL_42;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC78);
  v16 = v4;
  v17 = *(_QWORD *)(v4 + 72);
  v70 = v16;
  v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v69 = *(unsigned __int8 *)(v16 + 80);
  v19 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v19);
  if (v17)
  {
    if (result - v18 == 0x8000000000000000 && v17 == -1)
      goto LABEL_62;
    v66 = (uint64_t)v10;
    v22 = (uint64_t)(result - v18) / v17;
    v19[2] = v15;
    v19[3] = 2 * v22;
    v68 = v18;
    v23 = (uint64_t)v19 + v18;
    v63 = v22 & 0x7FFFFFFFFFFFFFFFLL;
    v64 = v12;
    v24 = a2;
    v25 = a1 + 32;
    result = type metadata accessor for Proto_Value(0);
    v26 = 0;
    v27 = *(_QWORD *)(result - 8);
    v28 = v24 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    while (v71 != v26)
    {
      if (v72 == v26)
        goto LABEL_53;
      v29 = v26 + 1;
      v30 = v28 + *(_QWORD *)(v27 + 72) * v26;
      v31 = (uint64_t)v7 + *(int *)(v73 + 48);
      *v7 = *(_QWORD *)(v25 + 8 * v26);
      sub_1BDD9C318(v30, v31, type metadata accessor for Proto_Value);
      result = sub_1BDDA2EF0((uint64_t)v7, v23, &qword_1ED6EFC80);
      v23 += v17;
      v26 = v29;
      if (v15 == v29)
      {
        swift_bridgeObjectRetain();
        a2 = v67;
        result = swift_bridgeObjectRetain();
        v12 = v64;
        v32 = v63 - v29;
        v4 = v70;
        v13 = v71;
        v10 = (_QWORD *)v66;
        v33 = v69;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

uint64_t sub_1BDFCFD98(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v6 = result;
      result = swift_bridgeObjectRetain();
      v4 = 0;
      v7 = v3 + 4;
      while (1)
      {
        v8 = *(_BYTE *)(v6 + v5 + 32);
        if (!v4)
        {
          v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_29;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3A08);
          v12 = (_QWORD *)swift_allocObject();
          v13 = 2 * _swift_stdlib_malloc_size(v12) - 64;
          v12[2] = v11;
          v12[3] = v13;
          v14 = (unint64_t)(v12 + 4);
          v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32)
              memmove(v12 + 4, v3 + 4, v15);
            v3[2] = 0;
          }
          v7 = (_BYTE *)(v14 + v15);
          v4 = (v13 >> 1) - v15;
          result = swift_release();
          v3 = v12;
        }
        v17 = __OFSUB__(v4--, 1);
        if (v17)
          break;
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  v4 = 0;
LABEL_24:
  v18 = v3[3];
  if (v18 < 2)
    return (uint64_t)v3;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v4);
  v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1BDFCFF08(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1BDFCFFAC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BDFD0090@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = type metadata accessor for PartiallyOrderedReferenceMap();
  v4 = *(_QWORD *)(v1 + *(int *)(result + 20));
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  *a1 = v4;
  v9 = *(_QWORD *)(v4 + 64);
  v7 = v4 + 64;
  v8 = v9;
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  a1[1] = v7;
  a1[2] = ~v6;
  a1[3] = 0;
  a1[4] = v5 & v8;
  return result;
}

uint64_t sub_1BDFD00F0(uint64_t a1)
{
  sub_1BDE77680();
  return a1;
}

uint64_t sub_1BDFD0120@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1BDFCE358(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1BDFD013C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1BDFCE7F8(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1BDFD0158(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF20], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PartiallyOrderedReferenceMap.Iterator()
{
  return &type metadata for PartiallyOrderedReferenceMap.Iterator;
}

uint64_t *assignWithCopy for PartiallyOrderedReferenceMap.Before(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  if (!v4)
  {
    if (v5)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v5)
  {
    sub_1BDF32D38((uint64_t)a1);
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for PartiallyOrderedReferenceMap.Before(_QWORD *a1, uint64_t a2)
{
  if (!*a1)
    goto LABEL_5;
  if (!*(_QWORD *)a2)
  {
    sub_1BDF32D38((uint64_t)a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
LABEL_6:
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t CRVoid.Partial.merge(delta:)()
{
  return 1;
}

uint64_t CRVoid.Partial.canMerge(delta:)()
{
  return 1;
}

uint64_t sub_1BDFD02E0()
{
  return swift_release();
}

uint64_t CRVoid.isDefaultState.getter()
{
  return 1;
}

uint64_t CRVoid.hasEncodedData.getter()
{
  return 0;
}

void CRVoid.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CRVoid.init(from:)()
{
  return swift_release();
}

Swift::Bool __swiftcall CRVoid.needToFinalizeTimestamps()()
{
  return 0;
}

uint64_t CRVoid.observableDifference(from:with:)()
{
  return 1;
}

uint64_t CRVoid.actionUndoingDifference(from:)()
{
  return 1;
}

uint64_t CRVoid.hasDelta(from:)()
{
  return 0;
}

void CRVoid.delta(_:from:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t CRVoid.canMerge(delta:)()
{
  return 1;
}

uint64_t CRVoid.merge(delta:)()
{
  return 1;
}

uint64_t static CRVoid.== infix(_:_:)()
{
  return 1;
}

uint64_t CRVoid.serializedData(_:version:)()
{
  return 0;
}

uint64_t CRVoid.init(_:serializedData:)(void *a1, uint64_t a2, unint64_t a3)
{

  return sub_1BDDB796C(a2, a3);
}

uint64_t CRVoid.init(serializedData:)(uint64_t a1, unint64_t a2)
{
  return sub_1BDDB796C(a1, a2);
}

uint64_t CRVoid.hashValue.getter()
{
  sub_1BE1B36F8();
  return sub_1BE1B371C();
}

uint64_t sub_1BDFD0450()
{
  sub_1BE1B36F8();
  return sub_1BE1B371C();
}

uint64_t sub_1BDFD0484()
{
  sub_1BE1B36F8();
  return sub_1BE1B371C();
}

_UNKNOWN **sub_1BDFD04B4()
{
  return &protocol witness table for CRVoid.Partial;
}

unint64_t sub_1BDFD04C4()
{
  unint64_t result;

  result = qword_1EF52F188[0];
  if (!qword_1EF52F188[0])
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRVoid, &type metadata for CRVoid);
    atomic_store(result, qword_1EF52F188);
  }
  return result;
}

uint64_t sub_1BDFD0508()
{
  return 0;
}

uint64_t sub_1BDFD0514(uint64_t a1, unint64_t a2)
{
  return sub_1BDDB796C(a1, a2);
}

ValueMetadata *type metadata accessor for CRVoid()
{
  return &type metadata for CRVoid;
}

ValueMetadata *type metadata accessor for CRVoid.Partial()
{
  return &type metadata for CRVoid.Partial;
}

uint64_t CRVoid.Partial.init(from:)()
{
  return CRVoid.init(from:)();
}

uint64_t dispatch thunk of ReferenceDifferencer.observableDifference<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ReferenceVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ReferenceVisitor.visit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1BDFD0594(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  _QWORD **v3;
  uint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;

  v3 = (_QWORD **)v1;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1BDDB6CA4(v5, v6);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = (_QWORD *)*v1;
  v22 = v8;
  *v3 = (_QWORD *)0x8000000000000000;
  v10 = sub_1BDE5E12C(v5, v6);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  v2 = v9;
  if (v8[3] >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    sub_1BDE612E8(v13, isUniquelyReferenced_nonNull_native);
    v14 = sub_1BDE5E12C(v5, v6);
    if ((v2 & 1) != (v15 & 1))
    {
      swift_release();
      result = sub_1BE1B3680();
      __break(1u);
      return result;
    }
    v10 = v14;
  }
  while (1)
  {
    *v3 = v8;
    swift_bridgeObjectRelease();
    v16 = (uint64_t)*v3;
    if ((v2 & 1) == 0)
    {
      sub_1BE155180(v10, v5, v6, a1, 0, *v3);
      sub_1BDDB6CA4(v5, v6);
      swift_retain();
    }
    v17 = *(_QWORD *)(v16 + 56) + 16 * v10;
    v19 = *(_QWORD *)(v17 + 8);
    v18 = (_QWORD *)(v17 + 8);
    v20 = v19 + 1;
    if (!__OFADD__(v19, 1))
      break;
LABEL_11:
    __break(1u);
LABEL_12:
    sub_1BDE65630();
    v8 = v22;
  }
  *v18 = v20;
  sub_1BDDB796C(v5, v6);
  return swift_release();
}

uint64_t sub_1BDFD0710(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t sub_1BDFD0748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v12;
  __n128 v13;

  type metadata accessor for TypedReference(0, a2, a3, a4);
  v7 = type metadata accessor for Ref(0, a2, a3, v6);
  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v7);
  Reference.identity.getter(v7, v8);
  v13 = v12;
  sub_1BDF158F0(&v13);
  v10 = v9;
  swift_beginAccess();
  sub_1BDE6806C((uint64_t *)&v13, v10);
  swift_endAccess();
  return swift_release();
}

uint64_t type metadata accessor for TypedRefVisitor()
{
  return objc_opt_self();
}

uint64_t sub_1BDFD0840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDFD0748(a1, a2, a3, a4);
}

uint64_t sub_1BDFD0860(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;

  v6 = *v3;
  v7 = *a1;
  v8 = a1[1];
  v14 = v3[3];
  v13.n128_u64[0] = v7;
  v13.n128_u64[1] = v8;
  result = (*(uint64_t (**)(__n128 *, _QWORD))(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 16) + 64))(&v13, *(_QWORD *)(v6 + 80));
  if ((result & 1) == 0)
  {
    type metadata accessor for TypedReference(0, a2, a3, v10);
    v13.n128_u64[0] = v7;
    v13.n128_u64[1] = v8;
    sub_1BDF158F0(&v13);
    v12 = v11;
    swift_beginAccess();
    sub_1BDDB6CA4(v7, v8);
    sub_1BDE6806C(&v14, v12);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDFD0934(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDFD0860(a1, a2, a3);
}

uint64_t sub_1BDFD0954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for Ref(0, a2, a3, a4);
  v5 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Ref<A>, v4);
  Reference.identity.getter(v4, v5);
  v6 = v10;
  v7 = v11;
  v9[0] = v10;
  v9[1] = v11;
  swift_beginAccess();
  sub_1BDF15DBC(v9);
  swift_endAccess();
  return sub_1BDDB796C(v6, v7);
}

uint64_t sub_1BDFD09F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDFD0954(a1, a2, a3, a4);
}

uint64_t sub_1BDFD0A14(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  swift_beginAccess();
  sub_1BDFD0594(v1);
  return swift_endAccess();
}

uint64_t sub_1BDFD0A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  sub_1BDDCCA44(a3, a4);
  return swift_release();
}

uint64_t sub_1BDFD0ACC()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void sub_1BDFD0AF0()
{
  uint64_t v0;

  sub_1BDDCCC08(v0, 1, &qword_1ED6F39A8, &qword_1ED6F8B98);
}

uint64_t sub_1BDFD0B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v87 = a4;
  v97 = a2;
  v83 = a5;
  v7 = type metadata accessor for Proto_CRDT(0);
  v90 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v86 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v10 = MEMORY[0x1E0C80A78](v9);
  v85 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v89 = (uint64_t)&v78 - v12;
  v13 = type metadata accessor for Proto_Timestamp(0);
  v96 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v93 = (unint64_t *)((char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v78 - v19;
  v21 = type metadata accessor for FinalizedTimestamp(0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v82 = (uint64_t)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v92 = (uint64_t)&v78 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v95 = (uint64_t)&v78 - v27;
  v88 = a3;
  v80 = *(_QWORD *)(a3 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v81 = (char *)&v78 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v84 = (char *)&v78 - v31;
  MEMORY[0x1E0C80A78](v30);
  v79 = (char *)&v78 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v78 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v36);
  v38 = (char *)&v78 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = v7;
  v39 = *(int *)(v7 + 20);
  v98 = a1;
  v40 = *(_QWORD *)(a1 + v39)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v40, (uint64_t)v35, &qword_1ED6F2DF0);
  v41 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v35, 1, v41) == 1)
  {
    sub_1BDD86E30((uint64_t)v35, &qword_1ED6F2DF0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1BDDA2E8C((uint64_t)v35, (uint64_t)v38, type metadata accessor for Proto_Register);
      goto LABEL_8;
    }
    sub_1BDD9C3E0((uint64_t)v35, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v42 = *(int *)(v36 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)&v38[v42] = qword_1ED6EF780;
  swift_retain();
LABEL_8:
  v43 = *(int *)(v36 + 20);
  v44 = *(_QWORD *)&v38[v43]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v44, (uint64_t)v20, &qword_1ED6F3850);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48);
  LODWORD(v44) = v45(v20, 1, v13);
  sub_1BDD86E30((uint64_t)v20, &qword_1ED6F3850);
  if ((_DWORD)v44 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v46 = 0xD000000000000021;
    *(_QWORD *)(v46 + 8) = 0x80000001BE1CF980;
    *(_BYTE *)(v46 + 16) = 0;
    swift_willThrow();
LABEL_14:
    swift_release();
    v54 = type metadata accessor for Proto_CRDT;
    v55 = v98;
LABEL_15:
    sub_1BDD9C3E0(v55, v54);
    return sub_1BDD9C3E0((uint64_t)v38, type metadata accessor for Proto_Register);
  }
  v47 = *(_QWORD *)&v38[v43]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1BDD86DEC(v47, (uint64_t)v18, &qword_1ED6F3850);
  v48 = v45(v18, 1, v13);
  v49 = v97;
  v50 = v93;
  if (v48 == 1)
  {
    *v93 = 0;
    v50[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v18, &qword_1ED6F3850);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v18, (uint64_t)v93, type metadata accessor for Proto_Timestamp);
  }
  v51 = v95;
  swift_retain();
  v52 = v92;
  v53 = v94;
  sub_1BDDAA440(v50, v49, v92);
  if (v53)
    goto LABEL_14;
  sub_1BDDA2E8C(v52, v51, type metadata accessor for FinalizedTimestamp);
  v57 = *(_QWORD *)&v38[v43]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  swift_beginAccess();
  v58 = v89;
  sub_1BDD86DEC(v57, v89, &qword_1ED6F3728);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  v60 = v91;
  LODWORD(v57) = v59(v58, 1, v91);
  sub_1BDD86E30(v58, &qword_1ED6F3728);
  if ((_DWORD)v57 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v61 = 0xD000000000000016;
    *(_QWORD *)(v61 + 8) = 0x80000001BE1CF9B0;
    *(_BYTE *)(v61 + 16) = 0;
    swift_willThrow();
    swift_release();
    sub_1BDD9C3E0(v98, type metadata accessor for Proto_CRDT);
    v54 = type metadata accessor for FinalizedTimestamp;
    v55 = v95;
    goto LABEL_15;
  }
  v62 = *(_QWORD *)&v38[v43]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  swift_beginAccess();
  v63 = v85;
  sub_1BDD86DEC(v62, v85, &qword_1ED6F3728);
  if (v59(v63, 1, v60) == 1)
  {
    v64 = v86;
    sub_1BE1B20E4();
    v65 = *(int *)(v60 + 20);
    v66 = v88;
    v67 = v87;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v64 + v65) = qword_1ED6F2E08;
    swift_retain();
    sub_1BDD86E30(v63, &qword_1ED6F3728);
  }
  else
  {
    v64 = v86;
    sub_1BDDA2E8C(v63, v86, type metadata accessor for Proto_CRDT);
    v66 = v88;
    v67 = v87;
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v68 = sub_1BDDA1B44(v64, v49);
  swift_release();
  v69 = v84;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 16) + 8) + 8))(v68, v66);
  swift_release();
  sub_1BDD9C3E0(v98, type metadata accessor for Proto_CRDT);
  sub_1BDD9C3E0((uint64_t)v38, type metadata accessor for Proto_Register);
  v70 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
  v71 = v79;
  v70(v79, v69, v66);
  v72 = v81;
  v70(v81, v71, v66);
  v73 = v82;
  sub_1BDDA2E8C(v95, v82, type metadata accessor for FinalizedTimestamp);
  v74 = v73;
  v75 = v83;
  sub_1BDDA2E8C(v74, v83, type metadata accessor for FinalizedTimestamp);
  v77 = type metadata accessor for CRDTRegister(0, v66, v67, v76);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v70)(v75 + *(int *)(v77 + 36), v72, v66);
}

uint64_t sub_1BDFD1428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v57 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v54 = (uint64_t)&v48 - v9;
  v10 = type metadata accessor for Proto_CRDT(0);
  v53 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v60 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v13 = MEMORY[0x1E0C80A78](v12);
  v56 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v48 - v15;
  v17 = type metadata accessor for Proto_Timestamp(0);
  v55 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)((char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for Proto_Register(0);
  v21 = MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v48 - v23;
  v61 = a1;
  if (*(unsigned __int8 *)(a1 + 72) >= 2u)
  {
    v49 = v22;
    v51 = v8;
    sub_1BE1B20E4();
    v50 = v10;
    v27 = *(int *)(v10 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    v52 = a3;
    *(_QWORD *)(a3 + v27) = qword_1ED6F2E08;
    swift_retain();
    sub_1BE1B20E4();
    v28 = *(int *)(v20 + 20);
    v29 = v58;
    if (qword_1ED6EF788 != -1)
      swift_once();
    *(_QWORD *)&v24[v28] = qword_1ED6EF780;
    swift_retain();
    sub_1BE1B20E4();
    *v19 = sub_1BDDAE244(v29);
    v19[1] = *(_QWORD *)(v29 + *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = (uint64_t)v51;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for Proto_Register._StorageClass(0);
      swift_allocObject();
      v32 = swift_retain();
      *(_QWORD *)&v24[v28] = sub_1BE131250(v32);
      swift_release();
    }
    v33 = *(_QWORD *)&v24[v28];
    sub_1BDDA2E8C((uint64_t)v19, (uint64_t)v16, type metadata accessor for Proto_Timestamp);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v16, 0, 1, v17);
    v34 = v56;
    sub_1BDDA2EF0((uint64_t)v16, v56, &qword_1ED6F3850);
    v35 = v33
        + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v34, v35, &qword_1ED6F3850);
    swift_endAccess();
    v36 = swift_release();
    MEMORY[0x1E0C80A78](v36);
    *((_OWORD *)&v48 - 2) = *(_OWORD *)(v57 + 16);
    v37 = v61;
    *(&v48 - 2) = v29;
    *(&v48 - 1) = v37;
    v38 = v59;
    v39 = v60;
    sub_1BDDA82F8((void (*)(uint64_t))sub_1BDFDA564, v60);
    if (v38)
    {
      sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_Register);
      v40 = type metadata accessor for Proto_CRDT;
      v41 = v52;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Register._StorageClass(0);
        swift_allocObject();
        v42 = swift_retain();
        *(_QWORD *)&v24[v28] = sub_1BE131250(v42);
        swift_release();
      }
      v43 = *(_QWORD *)&v24[v28];
      v44 = v39;
      v45 = v54;
      sub_1BDDA2E8C(v44, v54, type metadata accessor for Proto_CRDT);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v45, 0, 1, v50);
      sub_1BDDA2EF0(v45, v31, &qword_1ED6F3728);
      v46 = v43 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v31, v46, &qword_1ED6F3728);
      swift_endAccess();
      swift_release();
      v47 = v49;
      sub_1BDD9C318((uint64_t)v24, v49, type metadata accessor for Proto_Register);
      sub_1BE12AA70(v47);
      v41 = (uint64_t)v24;
      v40 = type metadata accessor for Proto_Register;
    }
    return sub_1BDD9C3E0(v41, v40);
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v25 = 0xD00000000000003ALL;
    *(_QWORD *)(v25 + 8) = 0x80000001BE1CEA50;
    *(_BYTE *)(v25 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t CRDTRegister.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDD9C318(v1, a1, type metadata accessor for FinalizedTimestamp);
}

uint64_t (*CRDTRegister._value.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRDTRegister.value.setter(uint64_t a1, uint64_t a2)
{
  sub_1BDFD73F8(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*CRDTRegister.value.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  *a1 = v1;
  v3 = type metadata accessor for FinalizedTimestamp(0);
  a1[1] = v3;
  a1[2] = malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  return sub_1BDFD1A70;
}

void sub_1BDFD1A70(uint64_t *a1, char a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = (char *)a1[2];
  if ((a2 & 1) != 0)
    goto LABEL_4;
  v3 = *a1;
  v4 = a1[1];
  sub_1BE1B1F4C();
  v5 = *(int *)(v4 + 20);
  v6 = *(_QWORD *)(v3 + v5);
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (!v7)
  {
    *(_QWORD *)&v2[v5] = v8;
    sub_1BDF2BC30((uint64_t)v2, v3);
LABEL_4:
    free(v2);
    return;
  }
  __break(1u);
}

uint64_t _s9Coherence12CRDTRegisterV6_valuexvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t sub_1BDFD1AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v12 - v6;
  (*(void (**)(char *))(v8 + 16))((char *)&v12 - v6);
  v10 = type metadata accessor for CRDTRegister(0, v4, v5, v9);
  return CRDTRegister.crdt.setter(v7, v10);
}

uint64_t _s9Coherence12CRDTRegisterV6_valuexvs_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*CRDTRegister.crdt.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRDTRegister.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t sub_1BDFD1BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD v9[4];

  v5 = *(_QWORD *)(a4 + a3 - 16);
  type metadata accessor for CRDTRegister(0, v5, *(_QWORD *)(a4 + a3 - 8), a4);
  v6 = CRDTRegister.wrappedValue.modify(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v7, a1, v5);
  return ((uint64_t (*)(_QWORD *, _QWORD))v6)(v9, 0);
}

void (*CRDTRegister.wrappedValue.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CRDTRegister.crdt.modify();
  return sub_1BDFD1C8C;
}

void sub_1BDFD1C8C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t CRDTRegister.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t CRDTRegister.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t sub_1BDFD1CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t *, _QWORD);
  uint64_t v7;
  uint64_t v9;

  v5 = type metadata accessor for CRDTRegister(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  v6 = (uint64_t (*)(uint64_t *, _QWORD))CRDTRegister.projectedValue.modify();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v7, a1, v5);
  return v6(&v9, 0);
}

uint64_t (*CRDTRegister.projectedValue.modify())(_QWORD, _QWORD)
{
  return nullsub_1;
}

uint64_t CRDTRegister.projectedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 40))(v2, a1);
}

uint64_t CRDTRegister.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  CRDTRegister.init(_:)((uint64_t)v10, a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
}

uint64_t CRDTRegister.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1ED6EF4D8 != -1)
    swift_once();
  v8 = type metadata accessor for FinalizedTimestamp(0);
  v9 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED6F8A38);
  sub_1BDD9C318(v9, a4, type metadata accessor for FinalizedTimestamp);
  v11 = a4 + *(int *)(type metadata accessor for CRDTRegister(0, a2, a3, v10) + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(v11, a1, a2);
}

uint64_t CRDTRegister.merge(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v36 = *(_QWORD *)(a2 + 16);
  v37 = a2;
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](a1);
  v34 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FinalizedTimestamp(0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v34 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v34 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v34 - v15;
  v17 = v2;
  sub_1BDD9C318(v2, (uint64_t)&v34 - v15, v18);
  v19 = *(int *)(v5 + 20);
  v20 = *(_QWORD *)&v16[v19];
  v21 = *(_QWORD *)(a1 + v19);
  if (v20 == v21)
  {
    v22 = sub_1BDDB2BF8();
    sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
    if ((v22 & 1) == 0)
      goto LABEL_3;
LABEL_7:
    v32 = v37;
    v33 = *(_QWORD *)(v37 - 8);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v17, v37);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v17, a1, v32);
  }
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
  if (v20 < v21)
    goto LABEL_7;
LABEL_3:
  sub_1BDD9C318(v17, (uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  v23 = *(_QWORD *)&v14[*(int *)(v5 + 20)];
  v24 = *(_QWORD *)(a1 + v19);
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v11, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318(a1, (uint64_t)v8, type metadata accessor for FinalizedTimestamp);
  if (v23 == v24)
  {
    v25 = sub_1BE1B1F10();
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for FinalizedTimestamp);
    result = sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for FinalizedTimestamp);
    if ((v25 & 1) != 0)
    {
      v28 = v36;
      v27 = v37;
      v29 = a1 + *(int *)(v37 + 36);
      v31 = v34;
      v30 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v29, v36);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 24) + 8) + 8))(v31, v28);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v31, v28);
    }
  }
  else
  {
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for FinalizedTimestamp);
    return sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  }
  return result;
}

uint64_t CRDTRegister.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(int *)(v9 + 36), v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 40))(a1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Bool __swiftcall CRDTRegister.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + *(int *)(v5 + 36), v3);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) + 48))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v2 & 1;
}

uint64_t CRDTRegister.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16) + 56))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t CRDTRegister.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + *(int *)(v14 + 36), v7);
  v15 = *(_QWORD *)(a2 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 + 16) + 24))(a1, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return CRDTRegister.init(_:)((uint64_t)v13, v7, v15, a3);
}

uint64_t CRDTRegister.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD v8[2];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  strcpy((char *)v8, "CRDTRegister[");
  HIWORD(v8[1]) = -4864;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + *(int *)(a1 + 36), v3);
  sub_1BE1B2810();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return v8[0];
}

uint64_t CRDTRegister.actionUndoingDifference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t TupleTypeMetadata2;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v5 = *(_QWORD *)(a2 + 16);
  v73 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v71 = (char *)&v62 - v9;
  v74 = v10;
  v75 = *(_QWORD *)(v10 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  v66 = *(_QWORD *)(v12 - 8);
  v67 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v70 = (char *)&v62 - v14;
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13);
  v68 = (char *)&v62 - v15;
  v16 = type metadata accessor for FinalizedTimestamp(0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v24 = (char *)&v62 - v23;
  v25 = *(int *)(v20 + 20);
  v26 = *(_QWORD *)(v3 + v25);
  v27 = *(_QWORD *)(v22 + v25);
  v72 = v8;
  if (v26 == v27)
  {
    v28 = v22;
    v29 = sub_1BDDB2BF8();
    v22 = v28;
    if ((v29 & 1) == 0)
      goto LABEL_3;
LABEL_9:
    v50 = type metadata accessor for CRDTRegister.MutatingAction(0, v5, v75, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(a3, 1, 1, v50);
  }
  if (v26 < v27)
    goto LABEL_9;
LABEL_3:
  v64 = (char *)a3;
  v65 = v22;
  sub_1BDD9C318(v22, (uint64_t)v24, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318(v3, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
  if (v26 != v27)
  {
    sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    goto LABEL_11;
  }
  v30 = sub_1BE1B1F10();
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for FinalizedTimestamp);
  if ((v30 & 1) == 0)
  {
LABEL_11:
    v46 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v64, v65 + *(int *)(v74 + 36), v5);
    v48 = v5;
    v49 = v75;
    goto LABEL_12;
  }
  v31 = v73;
  v32 = v74;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  v34 = v71;
  v33(v71, v3 + *(int *)(v74 + 36), v5);
  v35 = *(int *)(v32 + 36);
  v63 = v3;
  v36 = v72;
  v33(v72, v65 + v35, v5);
  v37 = v70;
  v38 = v34;
  (*(void (**)(char *, uint64_t))(v75 + 56))(v36, v5);
  v39 = *(void (**)(char *, uint64_t))(v31 + 8);
  v39(v36, v5);
  v39(v38, v5);
  v40 = v69;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v37, 1, AssociatedTypeWitness) != 1)
  {
    v55 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v56 = v68;
    v55(v68, v37, AssociatedTypeWitness);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v58 = (uint64_t)v64;
    v59 = &v64[*(int *)(TupleTypeMetadata2 + 48)];
    sub_1BDD9C318(v63, (uint64_t)v64, type metadata accessor for FinalizedTimestamp);
    v55(v59, v56, AssociatedTypeWitness);
    v52 = type metadata accessor for CRDTRegister.MutatingAction(0, v5, v75, v60);
    swift_storeEnumTagMultiPayload();
    v53 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v54 = v58;
    return v53(v54, 0, 1, v52);
  }
  (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v67);
  v33(v38, v63 + *(int *)(v32 + 36), v5);
  v41 = v65;
  v33(v36, v65 + *(int *)(v32 + 36), v5);
  v42 = v75;
  v43 = v38;
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 72))(v36, v5, v75);
  v39(v36, v5);
  v39(v43, v5);
  if ((v44 & 1) != 0)
  {
    v46 = (uint64_t)v64;
    v33(v64, v41 + *(int *)(v32 + 36), v5);
    v48 = v5;
    v49 = v42;
LABEL_12:
    v52 = type metadata accessor for CRDTRegister.MutatingAction(0, v48, v49, v47);
    swift_storeEnumTagMultiPayload();
    v53 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v54 = v46;
    return v53(v54, 0, 1, v52);
  }
  v61 = type metadata accessor for CRDTRegister.MutatingAction(0, v5, v42, v45);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v64, 1, 1, v61);
}

uint64_t CRDTRegister.apply(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v2 = *(_QWORD *)(a2 + 24);
  v65 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_1BE1B2EE8();
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v58 = (char *)&v54 - v7;
  v69 = AssociatedTypeWitness;
  v64 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v6);
  v66 = (char *)&v54 - v8;
  v68 = type metadata accessor for FinalizedTimestamp(0);
  v9 = MEMORY[0x1E0C80A78](v68);
  v61 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v62 = (uint64_t)&v54 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v63 = (uint64_t)&v54 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v67 = (uint64_t)&v54 - v16;
  v17 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v2;
  v21 = type metadata accessor for CRDTRegister.MutatingAction(255, v3, v2, v20);
  v22 = sub_1BE1B2EE8();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v54 - v25;
  v27 = *(_QWORD *)(v21 - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v30 = (char *)&v54 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v54 - v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v71, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v26, 1, v21) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v71 = v3;
  v34 = v70;
  v35 = v68;
  v36 = v69;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v32, v26, v21);
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v30, v32, v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v55 = v21;
    v56 = v32;
    v54 = v27;
    v37 = v35;
    v38 = v36;
    v39 = &v30[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v40 = v67;
    sub_1BDDA2E8C((uint64_t)v30, v67, type metadata accessor for FinalizedTimestamp);
    v41 = v64;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v66, v39, v38);
    v42 = v63;
    sub_1BDD9C318(v34, v63, type metadata accessor for FinalizedTimestamp);
    v43 = *(int *)(v37 + 20);
    v44 = *(_QWORD *)(v42 + v43);
    v45 = *(_QWORD *)(v40 + v43);
    v46 = v62;
    sub_1BDD9C318(v42, v62, type metadata accessor for FinalizedTimestamp);
    v47 = v40;
    v48 = v61;
    sub_1BDD9C318(v47, v61, type metadata accessor for FinalizedTimestamp);
    if (v44 == v45)
    {
      v49 = sub_1BE1B1F10();
      sub_1BDD9C3E0(v48, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v46, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v42, type metadata accessor for FinalizedTimestamp);
      v50 = v66;
      v51 = v54;
      if ((v49 & 1) != 0)
      {
        v52 = v58;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v58, v66, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v52, 0, 1, v38);
        (*(void (**)(char *, uint64_t))(v57 + 64))(v52, v71);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v52, v60);
      }
    }
    else
    {
      sub_1BDD9C3E0(v48, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v46, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v42, type metadata accessor for FinalizedTimestamp);
      v50 = v66;
      v51 = v54;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v50, v38);
    sub_1BDD9C3E0(v67, type metadata accessor for FinalizedTimestamp);
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v55);
  }
  else
  {
    v53 = v71;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v30, v71);
    sub_1BDFD73F8((uint64_t)v19, v65);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v53);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v32, v21);
  }
}

uint64_t CRDTRegister.hasDelta(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v56 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v55 = (char *)&v55 - v9;
  v10 = type metadata accessor for FinalizedTimestamp(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v55 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v60 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v59 = (char *)&v55 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v55 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v27 = (char *)&v55 - v26;
  v28 = *(int *)(v24 + 20);
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(v2 + v28);
  v57 = v6;
  v58 = v5;
  if (v29 == v30)
  {
    v31 = v25;
    v32 = sub_1BDDB2BF8();
    v25 = v31;
    v33 = v32;
  }
  else
  {
    v33 = v29 < v30;
  }
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v35 = v2;
  v36 = v25;
  v34(v27, v35, a2);
  v34(v23, a1, a2);
  if (!v33)
  {
    v39 = v36;
    v40 = *(int *)(v10 + 20);
    v41 = *(_QWORD *)&v27[v40];
    v42 = *(_QWORD *)&v23[v40];
    sub_1BDD9C318((uint64_t)v27, (uint64_t)v16, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C318((uint64_t)v23, (uint64_t)v13, type metadata accessor for FinalizedTimestamp);
    if (v41 == v42)
    {
      v43 = sub_1BE1B1F10();
      sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
      v44 = v59;
      v34(v59, (uint64_t)v27, a2);
      v45 = v60;
      v34(v60, (uint64_t)v23, a2);
      if ((v43 & 1) != 0)
      {
        v46 = v57;
        v47 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
        v48 = v55;
        v49 = v45;
        v50 = v58;
        v47(v55, &v44[*(int *)(a2 + 36)], v58);
        v51 = &v49[*(int *)(a2 + 36)];
        v52 = v56;
        v47(v56, v51, v50);
        v38 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(a2 + 24) + 72))(v52, v50);
        v53 = *(void (**)(char *, uint64_t))(v46 + 8);
        v53(v52, v50);
        v53(v48, v50);
        v37 = *(void (**)(char *, uint64_t))(v39 + 8);
        v37(v60, a2);
        v37(v44, a2);
        v37(v23, a2);
        goto LABEL_11;
      }
    }
    else
    {
      sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
      v44 = v59;
      v34(v59, (uint64_t)v27, a2);
      v45 = v60;
      v34(v60, (uint64_t)v23, a2);
    }
    v37 = *(void (**)(char *, uint64_t))(v39 + 8);
    v37(v45, a2);
    v37(v44, a2);
    v38 = 0;
    v37(v23, a2);
    goto LABEL_11;
  }
  v37 = *(void (**)(char *, uint64_t))(v36 + 8);
  v38 = 1;
  v37(v23, a2);
LABEL_11:
  v37(v27, a2);
  return v38 & 1;
}

uint64_t CRDTRegister.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v5 = v4;
  v84 = a4;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v78 = a1;
  v79 = v9;
  v10 = MEMORY[0x1E0C80A78](a1);
  v77 = (char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v76 = (char *)v70 - v12;
  v14 = *(_QWORD *)(v13 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = sub_1BE1B2EE8();
  v71 = *(_QWORD *)(v16 - 8);
  v72 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v70 - v18;
  v80 = AssociatedTypeWitness;
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17);
  v73 = (char *)v70 - v20;
  v21 = type metadata accessor for FinalizedTimestamp(0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)v70 - v25;
  v83 = v14;
  v28 = type metadata accessor for CRDTRegister.Partial.PartialCases(0, v8, v14, v27);
  v29 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)v70 - v31;
  v70[1] = v21;
  v33 = *(int *)(v21 + 20);
  v34 = *(_QWORD *)(a2 + v33);
  v35 = *(_QWORD *)(v5 + v33);
  v81 = v36;
  v82 = v29;
  v75 = v19;
  v37 = v8;
  if (v34 == v35)
  {
    v38 = v30;
    v39 = sub_1BDDB2BF8();
    v30 = v38;
    if ((v39 & 1) == 0)
      goto LABEL_3;
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v32, v5, a3);
    v57 = v82;
    swift_storeEnumTagMultiPayload();
    v58 = v84;
    (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v84, v32, v57);
    v60 = type metadata accessor for CRDTRegister.Partial(0, v37, v83, v59);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v58, 0, 1, v60);
  }
  if (v34 < v35)
    goto LABEL_8;
LABEL_3:
  v40 = v30;
  sub_1BDD9C318(v30, (uint64_t)v26, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318(v5, (uint64_t)v24, type metadata accessor for FinalizedTimestamp);
  if (v34 != v35)
  {
    sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v26, type metadata accessor for FinalizedTimestamp);
    v44 = v83;
    v45 = v37;
    goto LABEL_10;
  }
  v41 = v40;
  v42 = sub_1BE1B1F10();
  sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v26, type metadata accessor for FinalizedTimestamp);
  v44 = v83;
  v45 = v37;
  if ((v42 & 1) == 0)
  {
LABEL_10:
    v62 = type metadata accessor for CRDTRegister.Partial(0, v45, v44, v43);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v84, 1, 1, v62);
  }
  v46 = v5;
  v47 = v5 + *(int *)(a3 + 36);
  v48 = v79;
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
  v50 = v76;
  v49(v76, v47, v37);
  v51 = v41 + *(int *)(a3 + 36);
  v52 = v77;
  v49(v77, v51, v37);
  v53 = v75;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v44 + 80))(v78, v52, v45, v44);
  v54 = *(void (**)(char *, uint64_t))(v48 + 8);
  v54(v52, v45);
  v54(v50, v45);
  v55 = v74;
  v56 = v80;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v53, 1, v80) == 1)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v53, v72);
    goto LABEL_10;
  }
  v63 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v64 = v73;
  v63(v73, v53, v56);
  v65 = &v32[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  sub_1BDD9C318(v46, (uint64_t)v32, type metadata accessor for FinalizedTimestamp);
  v63(v65, v64, v56);
  v66 = v82;
  swift_storeEnumTagMultiPayload();
  v67 = v84;
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v84, v32, v66);
  v69 = type metadata accessor for CRDTRegister.Partial(0, v45, v44, v68);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v67, 0, 1, v69);
}

uint64_t CRDTRegister.canMerge(delta:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v45 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v44 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v46 = (char *)&v41 - v9;
  v10 = type metadata accessor for FinalizedTimestamp(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v49 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v47 = (uint64_t)&v41 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v41 - v15;
  v18 = type metadata accessor for CRDTRegister.Partial.PartialCases(0, v3, v6, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v41 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v41 - v20, v50, v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v42 = v3;
    v22 = &v21[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    sub_1BDDA2E8C((uint64_t)v21, (uint64_t)v16, type metadata accessor for FinalizedTimestamp);
    v43 = v8;
    v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v24 = v46;
    v50 = AssociatedTypeWitness;
    v23(v46, v22, AssociatedTypeWitness);
    v25 = *(int *)(v10 + 20);
    v27 = v47;
    v26 = v48;
    v28 = *(_QWORD *)(v48 + v25);
    v29 = *(_QWORD *)&v16[v25];
    sub_1BDD9C318(v48, v47, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C318((uint64_t)v16, v49, type metadata accessor for FinalizedTimestamp);
    v30 = v28 == v29;
    v31 = v26;
    if (v30)
    {
      v32 = v49;
      v33 = sub_1BE1B1F10();
      sub_1BDD9C3E0(v32, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v27, type metadata accessor for FinalizedTimestamp);
      if ((v33 & 1) != 0)
      {
        v35 = v44;
        v34 = v45;
        v36 = v42;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v31 + *(int *)(a2 + 36), v42);
        v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 88))(v24, v36, v6);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v50);
LABEL_11:
        sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
        return v37 & 1;
      }
    }
    else
    {
      sub_1BDD9C3E0(v49, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v27, type metadata accessor for FinalizedTimestamp);
    }
    v38 = *(_QWORD *)&v16[v25];
    v39 = *(_QWORD *)(v26 + v25);
    if (v38 == v39)
      v37 = sub_1BDDB2BF8();
    else
      v37 = v38 < v39;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v50);
    goto LABEL_11;
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v37 = 1;
  return v37 & 1;
}

uint64_t CRDTRegister.merge(delta:)(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;

  v61 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v58 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v56 = (char *)&v51 - v6;
  v55 = type metadata accessor for FinalizedTimestamp(0);
  v7 = MEMORY[0x1E0C80A78](v55);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v59 = (uint64_t)&v51 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v60 = (uint64_t)&v51 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v51 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v51 - v18;
  v20 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CRDTRegister.Partial.PartialCases(0, v3, v4, v23);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v51 - v25;
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))((char *)&v51 - v25, v61, v24);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v51 = v3;
    v52 = v4;
    v54 = v9;
    v28 = v55;
    v29 = v58;
    v30 = &v26[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    sub_1BDDA2E8C((uint64_t)v26, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
    v32 = v56;
    v31 = v57;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v30, v29);
    sub_1BDD9C318(v62, (uint64_t)v16, type metadata accessor for FinalizedTimestamp);
    v33 = *(int *)(v28 + 20);
    v34 = *(_QWORD *)&v16[v33];
    v53 = v33;
    v35 = *(_QWORD *)&v19[v33];
    sub_1BDD9C318((uint64_t)v16, v60, type metadata accessor for FinalizedTimestamp);
    v61 = v19;
    sub_1BDD9C318((uint64_t)v19, v59, type metadata accessor for FinalizedTimestamp);
    v36 = v34 == v35;
    v37 = v29;
    v38 = v31;
    v39 = v28;
    if (v36)
    {
      v41 = v59;
      v40 = v60;
      v42 = sub_1BE1B1F10();
      sub_1BDD9C3E0(v41, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v40, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
      v46 = (uint64_t)v61;
      v45 = v62;
      if ((v42 & 1) != 0)
      {
        v43 = (*(uint64_t (**)(char *, uint64_t))(v52 + 96))(v32, v51);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v37);
        v44 = v46;
LABEL_11:
        sub_1BDD9C3E0(v44, type metadata accessor for FinalizedTimestamp);
        return v43 & 1;
      }
    }
    else
    {
      sub_1BDD9C3E0(v59, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v60, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
      v46 = (uint64_t)v61;
      v45 = v62;
    }
    v47 = (uint64_t)v54;
    sub_1BDD9C318(v45, (uint64_t)v54, type metadata accessor for FinalizedTimestamp);
    v48 = *(_QWORD *)(v46 + v53);
    v49 = *(_QWORD *)(v47 + *(int *)(v39 + 20));
    if (v48 == v49)
      v43 = sub_1BDDB2BF8();
    else
      v43 = v48 < v49;
    sub_1BDD9C3E0(v47, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v37);
    v44 = v46;
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v26, a2);
  CRDTRegister.merge(_:)((uint64_t)v22, a2);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, a2);
  v43 = 1;
  return v43 & 1;
}

uint64_t CRDTRegister.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v66 = a2;
  v67 = v9;
  v10 = MEMORY[0x1E0C80A78](a1);
  v65 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v64 = (char *)&v57 - v12;
  v62 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15 = sub_1BE1B2EE8();
  v60 = *(_QWORD *)(v15 - 8);
  v61 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v63 = (char *)&v57 - v17;
  v68 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16);
  v59 = (char *)&v57 - v18;
  v19 = type metadata accessor for FinalizedTimestamp(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v27 = (char *)&v57 - v26;
  v28 = *(int *)(v23 + 20);
  v29 = *(_QWORD *)(v4 + v28);
  v30 = *(_QWORD *)(a1 + v28);
  if (v29 == v30)
  {
    if ((sub_1BDDB2BF8() & 1) == 0)
      goto LABEL_3;
LABEL_8:
    v46 = type metadata accessor for WrappedObservableDifference(0, AssociatedTypeWitness, v24, v25);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(a4, 1, 1, v46);
  }
  if (v29 < v30)
    goto LABEL_8;
LABEL_3:
  v58 = a4;
  sub_1BDD9C318(a1, (uint64_t)v27, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318(v4, (uint64_t)v22, type metadata accessor for FinalizedTimestamp);
  if (v29 == v30)
  {
    v31 = sub_1BE1B1F10();
    sub_1BDD9C3E0((uint64_t)v22, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for FinalizedTimestamp);
    if ((v31 & 1) != 0)
    {
      v32 = v4 + *(int *)(a3 + 36);
      v33 = v67;
      v34 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      v35 = v64;
      v34(v64, v32, v8);
      v36 = v65;
      v34(v65, a1 + *(int *)(a3 + 36), v8);
      v37 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v36, v66, v8);
      v38 = *(void (**)(char *, uint64_t))(v33 + 8);
      v38(v36, v8);
      v38(v35, v8);
      v39 = v68;
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48))(v37, 1, AssociatedTypeWitness);
      v41 = v58;
      if (v40 == 1)
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v61);
        v44 = type metadata accessor for WrappedObservableDifference(0, AssociatedTypeWitness, v42, v43);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v41, 1, 1, v44);
      }
      v53 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      v54 = v59;
      v53(v59, v37, AssociatedTypeWitness);
      v53(v41, v54, AssociatedTypeWitness);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, AssociatedTypeWitness);
      v50 = type metadata accessor for WrappedObservableDifference(0, AssociatedTypeWitness, v55, v56);
      v51 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
      v52 = v41;
      return v51((uint64_t)v52, 0, 1, v50);
    }
  }
  else
  {
    sub_1BDD9C3E0((uint64_t)v22, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for FinalizedTimestamp);
  }
  v47 = v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v58, 1, 1, AssociatedTypeWitness);
  v50 = type metadata accessor for WrappedObservableDifference(0, AssociatedTypeWitness, v48, v49);
  v51 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
  v52 = v47;
  return v51((uint64_t)v52, 0, 1, v50);
}

uint64_t sub_1BDFD428C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CRDTRegister.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t CRDTRegister.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  _BYTE v16[40];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v11, (uint64_t)v10, &qword_1ED6F3728);
  v12 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v11) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3728);
  if ((_DWORD)v11 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v13 = 0xD000000000000014;
    *(_QWORD *)(v13 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v13 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    sub_1BDE12618(a2, a3, a4);
  }
  return swift_release();
}

uint64_t sub_1BDFD4438(uint64_t a1, uint64_t a2)
{
  return CRDTRegister.encode(to:)(a1, a2);
}

uint64_t CRDTRegister.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = sub_1BDDA8D6C();
  if (!v3)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    swift_retain();
    sub_1BDE1D5E0(v2, v6, v7);
    return swift_release();
  }
  return result;
}

uint64_t CRDTRegister.hasEncodedData.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = *(_QWORD *)(a1 + 16);
  v32 = *(_QWORD *)(v33 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FinalizedTimestamp(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v31 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v31 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v31 - v18;
  v34 = v1;
  sub_1BDD9C318(v1, (uint64_t)&v31 - v18, v20);
  if (qword_1ED6EF4D8 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v8, (uint64_t)qword_1ED6F8A38);
  sub_1BDD9C318(v21, (uint64_t)v17, type metadata accessor for FinalizedTimestamp);
  v22 = *(int *)(v8 + 20);
  v23 = *(_QWORD *)&v19[v22];
  v24 = *(_QWORD *)&v17[v22];
  sub_1BDD9C318((uint64_t)v19, (uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318((uint64_t)v17, (uint64_t)v11, type metadata accessor for FinalizedTimestamp);
  if (v23 != v24)
  {
    sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v34, a1);
    goto LABEL_7;
  }
  v25 = sub_1BE1B1F10();
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for FinalizedTimestamp);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v34, a1);
  if ((v25 & 1) == 0)
  {
LABEL_7:
    v29 = 1;
    goto LABEL_8;
  }
  v27 = v31;
  v26 = v32;
  v28 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v31, &v7[*(int *)(a1 + 36)], v33);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8) + 24))(v28);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
LABEL_8:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
  return v29 & 1;
}

void sub_1BDFD4798(_BYTE *a1@<X8>)
{
  CRDTRegister.minEncodingVersion.getter(a1);
}

void CRDTRegister.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static CRDTRegister<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a5;
  v45 = a1;
  v42 = type metadata accessor for FinalizedTimestamp(0);
  v9 = MEMORY[0x1E0C80A78](v42);
  v44 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v43 = (uint64_t)&v42 - v11;
  v13 = type metadata accessor for CRDTRegister(0, a3, a4, v12);
  v46 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v42 - v18;
  v20 = *(_QWORD *)(a3 - 8);
  v21 = MEMORY[0x1E0C80A78](v17);
  v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v42 - v25;
  v27 = a1 + *(int *)(v24 + 36);
  v28 = *(_QWORD *)(v24 + 16);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  v29((char *)&v42 - v25, v27, v28);
  v29(v23, a2 + *(int *)(v13 + 36), v28);
  LOBYTE(v28) = sub_1BE1B2798();
  v30 = *(void (**)(char *, uint64_t))(v20 + 8);
  v31 = v23;
  v32 = v46;
  v30(v31, a3);
  v30(v26, a3);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v33(v19, v45, v13);
  v33(v16, a2, v13);
  if ((v28 & 1) != 0)
  {
    v34 = v43;
    v35 = *(int *)(v42 + 20);
    v36 = *(_QWORD *)&v19[v35];
    v37 = *(_QWORD *)&v16[v35];
    sub_1BDD9C318((uint64_t)v19, v43, type metadata accessor for FinalizedTimestamp);
    v38 = v44;
    sub_1BDD9C318((uint64_t)v16, v44, type metadata accessor for FinalizedTimestamp);
    if (v36 == v37)
      v39 = sub_1BE1B1F10();
    else
      v39 = 0;
    sub_1BDD9C3E0(v38, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v34, type metadata accessor for FinalizedTimestamp);
  }
  else
  {
    v39 = 0;
  }
  v40 = *(void (**)(char *, uint64_t))(v32 + 8);
  v40(v16, v13);
  v40(v19, v13);
  return v39 & 1;
}

uint64_t sub_1BDFD4A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static CRDTRegister<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t sub_1BDFD4A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRDTRegister(0, v11, v12, v12);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v13 + 16) - 8) + 16))(v10, a1 + *(int *)(v13 + 36));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 16))(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
}

uint64_t CRDTRegister<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v11[24];
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  sub_1BE1B3770();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + *(int *)(a2 + 36), v4);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
  sub_1BE1B34F4();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t sub_1BDFD4C40(uint64_t a1, uint64_t a2)
{
  return CRDTRegister<>.encode(to:)(a1, a2);
}

uint64_t CRDTRegister.Partial.merge(delta:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t TupleTypeMetadata2;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t AssociatedConformanceWitness;
  char *v74;
  char v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t AssociatedTypeWitness;
  uint64_t v140;
  uint64_t v141;

  v137 = (char *)a1;
  v3 = *(_QWORD *)(a2 + 16);
  v2 = *(_QWORD *)(a2 + 24);
  v122 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v135 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v127 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v130 = (char *)&v119 - v7;
  MEMORY[0x1E0C80A78](v6);
  v134 = (char *)&v119 - v8;
  v141 = type metadata accessor for FinalizedTimestamp(0);
  v9 = MEMORY[0x1E0C80A78](v141);
  v128 = (uint64_t)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v126 = (uint64_t)&v119 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v131 = (uint64_t)&v119 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v133 = (char *)&v119 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v132 = (void (*)(char *, char *, uint64_t))((char *)&v119 - v18);
  v19 = MEMORY[0x1E0C80A78](v17);
  v123 = (uint64_t)&v119 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v124 = (uint64_t)&v119 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v125 = (uint64_t)&v119 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v119 - v26;
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v119 - v28;
  v136 = type metadata accessor for CRDTRegister(0, v3, v2, v30);
  v138 = *(_QWORD *)(v136 - 8);
  v31 = MEMORY[0x1E0C80A78](v136);
  v33 = (char *)&v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v119 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v119 - v38;
  MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v119 - v40;
  v120 = v3;
  v121 = v2;
  v43 = type metadata accessor for CRDTRegister.Partial.PartialCases(255, v3, v2, v42);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v45 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v47 = (char *)&v119 - v46;
  v48 = (char *)&v119 + *(int *)(v45 + 48) - v46;
  v129 = *(_QWORD *)(v43 - 8);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 16);
  v49((char *)&v119 - v46, v140, v43);
  v49(v48, (uint64_t)v137, v43);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v133 = v27;
    v137 = v36;
    v80 = v141;
    v81 = v134;
    v82 = AssociatedTypeWitness;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v112 = v138;
      v113 = *(void (**)(char *, char *, uint64_t))(v138 + 32);
      v114 = v136;
      v113(v41, v47, v136);
      v113(v39, v48, v114);
      CRDTRegister.merge(_:)((uint64_t)v39, v114);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v39, v114);
      v115 = v140;
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v140, v43);
      v113((char *)v115, v41, v114);
      goto LABEL_18;
    }
    v83 = v80;
    v84 = &v48[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    v85 = (uint64_t)v137;
    v132 = *(void (**)(char *, char *, uint64_t))(v138 + 32);
    v132(v137, v47, v136);
    v86 = (uint64_t)v48;
    v87 = v29;
    sub_1BDDA2E8C(v86, (uint64_t)v29, type metadata accessor for FinalizedTimestamp);
    v88 = v135;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v81, v84, v82);
    v89 = v85;
    v90 = (uint64_t)v87;
    v91 = (uint64_t)v133;
    sub_1BDD9C318(v89, (uint64_t)v133, type metadata accessor for FinalizedTimestamp);
    v92 = *(int *)(v83 + 20);
    v93 = *(_QWORD *)&v87[v92];
    v94 = *(_QWORD *)(v91 + v92);
    if (v93 == v94)
    {
      v95 = sub_1BDDB2BF8();
      sub_1BDD9C3E0(v91, type metadata accessor for FinalizedTimestamp);
      if ((v95 & 1) == 0)
        goto LABEL_10;
    }
    else
    {
      sub_1BDD9C3E0(v91, type metadata accessor for FinalizedTimestamp);
      if (v93 >= v94)
      {
LABEL_10:
        v96 = v125;
        sub_1BDD9C318((uint64_t)v137, v125, type metadata accessor for FinalizedTimestamp);
        v97 = *(int *)(v83 + 20);
        v98 = v96;
        v99 = *(_QWORD *)(v96 + v97);
        v100 = *(_QWORD *)(v90 + v92);
        v101 = v124;
        sub_1BDD9C318(v98, v124, type metadata accessor for FinalizedTimestamp);
        v102 = v123;
        sub_1BDD9C318(v90, v123, type metadata accessor for FinalizedTimestamp);
        if (v99 == v100)
        {
          v103 = sub_1BE1B1F10();
          sub_1BDD9C3E0(v102, type metadata accessor for FinalizedTimestamp);
          sub_1BDD9C3E0(v101, type metadata accessor for FinalizedTimestamp);
          sub_1BDD9C3E0(v98, type metadata accessor for FinalizedTimestamp);
          if ((v103 & 1) != 0)
          {
            v104 = v136;
            v105 = (uint64_t)v137;
            v106 = (*(uint64_t (**)(char *, uint64_t))(v121 + 96))(v81, v120);
            (*(void (**)(char *, uint64_t))(v135 + 8))(v81, v82);
            sub_1BDD9C3E0(v90, type metadata accessor for FinalizedTimestamp);
            if ((v106 & 1) == 0)
            {
              (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v105, v104);
              goto LABEL_30;
            }
            v107 = v140;
            (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v140, v43);
            v132((char *)v107, (char *)v105, v104);
LABEL_18:
            swift_storeEnumTagMultiPayload();
            v79 = 1;
            return v79 & 1;
          }
        }
        else
        {
          sub_1BDD9C3E0(v102, type metadata accessor for FinalizedTimestamp);
          sub_1BDD9C3E0(v101, type metadata accessor for FinalizedTimestamp);
          sub_1BDD9C3E0(v98, type metadata accessor for FinalizedTimestamp);
        }
        (*(void (**)(char *, uint64_t))(v135 + 8))(v81, v82);
        sub_1BDD9C3E0(v90, type metadata accessor for FinalizedTimestamp);
        (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v136);
        goto LABEL_30;
      }
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v81, v82);
    sub_1BDD9C3E0(v90, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v136);
    goto LABEL_27;
  }
  v50 = v33;
  v52 = (uint64_t)v132;
  v51 = (uint64_t)v133;
  v53 = AssociatedTypeWitness;
  v54 = swift_getTupleTypeMetadata2();
  v55 = *(int *)(v54 + 48);
  v56 = &v47[v55];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1BDDA2E8C((uint64_t)v47, v52, type metadata accessor for FinalizedTimestamp);
    v108 = v136;
    (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v50, v48, v136);
    v109 = *(int *)(v141 + 20);
    v110 = *(_QWORD *)(v52 + v109);
    v111 = *(_QWORD *)&v50[v109];
    if (v110 == v111)
    {
      if ((sub_1BDDB2BF8() & 1) == 0)
      {
        v79 = sub_1BDDB2BF8();
LABEL_31:
        (*(void (**)(char *, uint64_t))(v138 + 8))(v50, v108);
        sub_1BDD9C3E0(v52, type metadata accessor for FinalizedTimestamp);
        (*(void (**)(char *, uint64_t))(v135 + 8))(v56, v53);
        return v79 & 1;
      }
    }
    else if (v110 >= v111)
    {
      v79 = v111 < v110;
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v138 + 8))(v50, v108);
    sub_1BDD9C3E0(v52, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(v122 - 8) + 24))(v140, v137);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v56, v53);
LABEL_27:
    v79 = 1;
    return v79 & 1;
  }
  v138 = v54;
  v57 = &v48[v55];
  v58 = v51;
  sub_1BDDA2E8C((uint64_t)v47, v51, type metadata accessor for FinalizedTimestamp);
  v59 = (uint64_t)v48;
  v60 = v53;
  v61 = v131;
  sub_1BDDA2E8C(v59, v131, type metadata accessor for FinalizedTimestamp);
  v62 = v135;
  v63 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
  v63(v130, v56, v60);
  v64 = v127;
  v63(v127, v57, v60);
  v65 = *(int *)(v141 + 20);
  v66 = *(_QWORD *)(v58 + v65);
  v67 = *(_QWORD *)(v61 + v65);
  v68 = v126;
  sub_1BDD9C318(v58, v126, type metadata accessor for FinalizedTimestamp);
  v69 = v61;
  v70 = v128;
  sub_1BDD9C318(v69, v128, type metadata accessor for FinalizedTimestamp);
  if (v66 != v67)
  {
    sub_1BDD9C3E0(v70, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v68, type metadata accessor for FinalizedTimestamp);
    goto LABEL_20;
  }
  v71 = sub_1BE1B1F10();
  sub_1BDD9C3E0(v70, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0(v68, type metadata accessor for FinalizedTimestamp);
  if ((v71 & 1) == 0)
  {
LABEL_20:
    v116 = *(void (**)(char *, uint64_t))(v62 + 8);
    v117 = AssociatedTypeWitness;
    v116(v64, AssociatedTypeWitness);
    v116(v130, v117);
    sub_1BDD9C3E0(v131, type metadata accessor for FinalizedTimestamp);
LABEL_21:
    sub_1BDD9C3E0(v58, type metadata accessor for FinalizedTimestamp);
LABEL_30:
    v79 = 0;
    return v79 & 1;
  }
  v72 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v74 = v130;
  v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(v64, v72, AssociatedConformanceWitness);
  v76 = *(void (**)(char *, uint64_t))(v62 + 8);
  v76(v64, v72);
  sub_1BDD9C3E0(v131, type metadata accessor for FinalizedTimestamp);
  if ((v75 & 1) == 0)
  {
    v76(v74, v72);
    goto LABEL_21;
  }
  v77 = v140;
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v140, v43);
  v78 = v77 + *(int *)(v138 + 48);
  sub_1BDDA2E8C(v58, v77, type metadata accessor for FinalizedTimestamp);
  v63((char *)v78, v74, v72);
  v79 = 1;
  swift_storeEnumTagMultiPayload();
  return v79 & 1;
}

uint64_t CRDTRegister.Partial.canMerge(delta:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t TupleTypeMetadata2;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t AssociatedConformanceWitness;
  char *v68;
  char v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t AssociatedTypeWitness;
  char *v122;
  char *v123;
  uint64_t v124;

  v123 = (char *)a1;
  v2 = *(_QWORD *)(a2 + 16);
  v105 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v104 = (char *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v118 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v112 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v113 = (char *)&v104 - v9;
  MEMORY[0x1E0C80A78](v8);
  v117 = (char *)&v104 - v10;
  v120 = type metadata accessor for FinalizedTimestamp(0);
  v11 = MEMORY[0x1E0C80A78](v120);
  v110 = (uint64_t)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v111 = (uint64_t)&v104 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v116 = (char *)&v104 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v115 = (char *)&v104 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v109 = (uint64_t)&v104 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v108 = (uint64_t)&v104 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v114 = (char *)&v104 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v104 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v104 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v104 - v31;
  v119 = type metadata accessor for CRDTRegister(0, v2, v5, v33);
  v124 = *(_QWORD *)(v119 - 8);
  v34 = MEMORY[0x1E0C80A78](v119);
  v36 = (char *)&v104 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v104 - v37;
  v106 = v5;
  v107 = v2;
  v40 = type metadata accessor for CRDTRegister.Partial.PartialCases(255, v2, v5, v39);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v42 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v44 = (char *)&v104 - v43;
  v45 = (char *)&v104 + *(int *)(v42 + 48) - v43;
  v46 = *(_QWORD *)(v40 - 8);
  v47 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v47((char *)&v104 - v43, v122, v40);
  v47(v45, v123, v40);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v123 = v27;
    v71 = (uint64_t)v30;
    v72 = (uint64_t)v38;
    v73 = v120;
    v74 = AssociatedTypeWitness;
    v75 = v117;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v76 = v73;
      v77 = v74;
      v78 = &v45[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(uint64_t, char *, uint64_t))(v124 + 32))(v72, v44, v119);
      v79 = (uint64_t)v32;
      sub_1BDDA2E8C((uint64_t)v45, (uint64_t)v32, type metadata accessor for FinalizedTimestamp);
      v80 = v118;
      v81 = v75;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v75, v78, v77);
      v82 = *(int *)(v76 + 20);
      v83 = *(_QWORD *)&v32[v82];
      v84 = *(_QWORD *)(v72 + v82);
      if (v83 == v84)
      {
        if ((sub_1BDDB2BF8() & 1) == 0)
        {
LABEL_9:
          v85 = v71;
          sub_1BDD9C318(v72, v71, type metadata accessor for FinalizedTimestamp);
          v86 = (uint64_t)v123;
          sub_1BDD9C318(v79, (uint64_t)v123, type metadata accessor for FinalizedTimestamp);
          if (v83 == v84)
          {
            v87 = sub_1BE1B1F10();
            sub_1BDD9C3E0(v86, type metadata accessor for FinalizedTimestamp);
            sub_1BDD9C3E0(v85, type metadata accessor for FinalizedTimestamp);
            v88 = v119;
            if ((v87 & 1) != 0)
            {
              v89 = v104;
              (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v119 + 16) - 8) + 16))(v104, v72 + *(int *)(v119 + 36));
              v90 = v107;
              v69 = (*(uint64_t (**)(char *, uint64_t))(v106 + 88))(v81, v107);
              (*(void (**)(char *, uint64_t))(v105 + 8))(v89, v90);
              (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v77);
              sub_1BDD9C3E0(v79, type metadata accessor for FinalizedTimestamp);
              (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v72, v88);
              return v69 & 1;
            }
          }
          else
          {
            sub_1BDD9C3E0(v86, type metadata accessor for FinalizedTimestamp);
            sub_1BDD9C3E0(v85, type metadata accessor for FinalizedTimestamp);
            v88 = v119;
          }
          (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v77);
          sub_1BDD9C3E0(v79, type metadata accessor for FinalizedTimestamp);
          (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v72, v88);
          goto LABEL_24;
        }
      }
      else if (v83 >= v84)
      {
        goto LABEL_9;
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v75, v77);
      sub_1BDD9C3E0(v79, type metadata accessor for FinalizedTimestamp);
      (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v72, v119);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v40);
      (*(void (**)(char *, uint64_t))(v124 + 8))(v44, v119);
    }
    v69 = 1;
    return v69 & 1;
  }
  v123 = v36;
  v48 = (uint64_t)v114;
  v49 = (uint64_t)v115;
  v50 = (uint64_t)v116;
  v51 = v120;
  v52 = AssociatedTypeWitness;
  v53 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v54 = &v44[v53];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v55 = &v45[v53];
    v56 = (uint64_t)v44;
    v57 = v49;
    sub_1BDDA2E8C(v56, v49, type metadata accessor for FinalizedTimestamp);
    sub_1BDDA2E8C((uint64_t)v45, v50, type metadata accessor for FinalizedTimestamp);
    v58 = v118;
    v59 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
    v59(v113, v54, v52);
    v60 = v112;
    v59(v112, v55, v52);
    v61 = *(int *)(v51 + 20);
    v62 = *(_QWORD *)(v49 + v61);
    v63 = *(_QWORD *)(v50 + v61);
    v64 = v111;
    sub_1BDD9C318(v49, v111, type metadata accessor for FinalizedTimestamp);
    v65 = v110;
    sub_1BDD9C318(v50, v110, type metadata accessor for FinalizedTimestamp);
    if (v62 == v63)
    {
      v66 = sub_1BE1B1F10();
      sub_1BDD9C3E0(v65, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v64, type metadata accessor for FinalizedTimestamp);
      if ((v66 & 1) != 0)
      {
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v68 = v113;
        v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v60, v52, AssociatedConformanceWitness);
        v70 = *(void (**)(char *, uint64_t))(v58 + 8);
        v70(v60, v52);
        v70(v68, v52);
        sub_1BDD9C3E0(v50, type metadata accessor for FinalizedTimestamp);
        sub_1BDD9C3E0(v57, type metadata accessor for FinalizedTimestamp);
        return v69 & 1;
      }
    }
    else
    {
      sub_1BDD9C3E0(v65, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v64, type metadata accessor for FinalizedTimestamp);
    }
    v98 = *(void (**)(char *, uint64_t))(v58 + 8);
    v98(v60, v52);
    v98(v113, v52);
    sub_1BDD9C3E0(v50, type metadata accessor for FinalizedTimestamp);
    sub_1BDD9C3E0(v57, type metadata accessor for FinalizedTimestamp);
LABEL_24:
    v69 = 0;
    return v69 & 1;
  }
  v122 = &v44[v53];
  sub_1BDDA2E8C((uint64_t)v44, v48, type metadata accessor for FinalizedTimestamp);
  v91 = (uint64_t)v123;
  v92 = v119;
  (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v123, v45, v119);
  v93 = *(int *)(v51 + 20);
  v94 = *(_QWORD *)(v91 + v93);
  v95 = *(_QWORD *)(v48 + v93);
  v96 = v108;
  sub_1BDD9C318(v91, v108, type metadata accessor for FinalizedTimestamp);
  v97 = v109;
  sub_1BDD9C318(v48, v109, type metadata accessor for FinalizedTimestamp);
  if (v94 == v95)
    v69 = sub_1BE1B1F10() ^ 1;
  else
    v69 = 1;
  v99 = v52;
  v100 = v118;
  v102 = v122;
  v101 = (uint64_t)v123;
  sub_1BDD9C3E0(v97, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C3E0(v96, type metadata accessor for FinalizedTimestamp);
  (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v101, v92);
  sub_1BDD9C3E0(v48, type metadata accessor for FinalizedTimestamp);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v99);
  return v69 & 1;
}

uint64_t CRDTRegister.Partial.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v24 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v23 - v7;
  v10 = type metadata accessor for CRDTRegister(0, v5, v4, v9);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v23 - v12;
  v15 = type metadata accessor for CRDTRegister.Partial.PartialCases(0, v5, v4, v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v23 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v23 - v16, v3, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for FinalizedTimestamp(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v20 = v23;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v8, &v17[*(int *)(TupleTypeMetadata2 + 48)], AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v24, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, AssociatedTypeWitness);
    return sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for FinalizedTimestamp);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    CRDTRegister.visitReferences(_:)(v24, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t CRDTRegister.Partial.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int EnumCaseMultiPayload;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t AssociatedTypeWitness;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;

  v78 = a4;
  v86 = type metadata accessor for Proto_Timestamp(0);
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v74 = (unint64_t *)((char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v71);
  v75 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v85 = (char *)&v70 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v11 = MEMORY[0x1E0C80A78](v10);
  v73 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v83 = (uint64_t)&v70 - v13;
  v87 = a2;
  v88 = a3;
  v77 = type metadata accessor for CRDTRegister.Partial.PartialCases(0, a2, a3, v14);
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v82 = (uint64_t)&v70 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Proto_CRDT(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v80 = (uint64_t)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v70 - v23;
  v90 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v90);
  v92 = (uint64_t)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v27 = MEMORY[0x1E0C80A78](v26);
  v79 = (uint64_t *)((char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v70 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v70 - v32;
  v34 = a1;
  v35 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v35, (uint64_t)v33, &qword_1ED6F3728);
  v91 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v35) = v91(v33, 1, v19);
  sub_1BDD86E30((uint64_t)v33, &qword_1ED6F3728);
  if ((_DWORD)v35 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v36 = 0xD000000000000014;
    *(_QWORD *)(v36 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v36 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v34;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  swift_retain();
  sub_1BDDA0528((uint64_t)v24);
  v39 = v19;
  v40 = *(_QWORD *)&v24[*(int *)(v19 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v40, (uint64_t)v18, &qword_1ED6F2DF0);
  v41 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v18, 1, v41);
  v70 = v34;
  if (v42 == 1)
  {
    sub_1BDD86E30((uint64_t)v18, &qword_1ED6F2DF0);
    v43 = v92;
    v44 = v90;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v43 = v92;
    v44 = v90;
    if (!EnumCaseMultiPayload)
    {
      sub_1BDDA2E8C((uint64_t)v18, v92, type metadata accessor for Proto_Register);
      goto LABEL_10;
    }
    sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v46 = *(int *)(v44 + 20);
  if (qword_1ED6EF788 != -1)
    swift_once();
  *(_QWORD *)(v43 + v46) = qword_1ED6EF780;
  swift_retain();
LABEL_10:
  sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_CRDT);
  v47 = *(int *)(v44 + 20);
  v48 = &qword_1ED6EEFE0[4];
  v49 = *(_QWORD *)(v43 + v47)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialCrdt;
  swift_beginAccess();
  sub_1BDD86DEC(v49, (uint64_t)v31, &qword_1ED6F3728);
  LODWORD(v49) = v91(v31, 1, v39);
  sub_1BDD86E30((uint64_t)v31, &qword_1ED6F3728);
  if ((_DWORD)v49 == 1)
  {
    v50 = v82;
    v51 = v89;
    CRDTRegister.init(from:)(v70, v87, v88, v82);
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_Register);
    if (v51)
    {
      swift_setDeallocating();
      return swift_release();
    }
    else
    {
      swift_release();
      v63 = v77;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v78, v50, v63);
    }
  }
  v52 = *(_QWORD *)(v43 + v47)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  v53 = &qword_1ED6F3850;
  v54 = v83;
  sub_1BDD86DEC(v52, v83, &qword_1ED6F3850);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  v56 = v55(v54, 1, v86);
  sub_1BDD86E30(v54, &qword_1ED6F3850);
  if ((_DWORD)v56 == 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  v57 = *(_QWORD *)(v43 + v47)
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialCrdt;
  swift_beginAccess();
  v53 = v79;
  sub_1BDD86DEC(v57, (uint64_t)v79, &qword_1ED6F3728);
  if (v91((char *)v53, 1, v39) == 1)
  {
    v54 = v80;
    sub_1BE1B20E4();
    v56 = *(int *)(v39 + 20);
    v48 = (uint64_t *)AssociatedTypeWitness;
    if (qword_1ED6F2E18 == -1)
    {
LABEL_16:
      *(_QWORD *)(v54 + v56) = qword_1ED6F2E08;
      swift_retain();
      sub_1BDD86E30((uint64_t)v53, &qword_1ED6F3728);
      goto LABEL_18;
    }
LABEL_27:
    swift_once();
    goto LABEL_16;
  }
  v54 = v80;
  sub_1BDDA2E8C((uint64_t)v53, v80, type metadata accessor for Proto_CRDT);
  v48 = (uint64_t *)AssociatedTypeWitness;
LABEL_18:
  v58 = v70;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDDA1B44(v54, v58);
  swift_release();
  v59 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v60 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v59 + 8);
  v61 = swift_retain();
  v62 = v89;
  v60(v61, v48, v59);
  if (v62)
  {
    swift_release();
    swift_release();
    swift_release();
    return sub_1BDD9C3E0(v92, type metadata accessor for Proto_Register);
  }
  else
  {
    v64 = *(_QWORD *)(v92 + v47)
        + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    v65 = v73;
    sub_1BDD86DEC(v64, v73, &qword_1ED6F3850);
    if (v55(v65, 1, v86) == 1)
    {
      v66 = v74;
      *v74 = 0;
      v66[1] = 0;
      sub_1BE1B20E4();
      sub_1BDD86E30(v65, &qword_1ED6F3850);
    }
    else
    {
      v66 = v74;
      sub_1BDDA2E8C(v65, (uint64_t)v74, type metadata accessor for Proto_Timestamp);
    }
    v67 = v75;
    v68 = v85;
    sub_1BDDAA440(v66, v58, v75);
    sub_1BDD9C3E0(v92, type metadata accessor for Proto_Register);
    swift_release();
    swift_release();
    v69 = v78 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    sub_1BDDA2E8C(v67, v78, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, char *, uint64_t *))(v72 + 32))(v69, v68, v48);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t CRDTRegister.Partial.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;

  v85 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v4 = MEMORY[0x1E0C80A78](v3);
  v71 = (uint64_t)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v70 = (uint64_t)v66 - v6;
  v69 = type metadata accessor for Proto_CRDT(0);
  v67 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v80 = (char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v9 = MEMORY[0x1E0C80A78](v8);
  v79 = (uint64_t)v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v76 = (uint64_t)v66 - v11;
  v12 = type metadata accessor for Proto_Timestamp(0);
  v74 = *(_QWORD *)(v12 - 8);
  v75 = v12;
  MEMORY[0x1E0C80A78](v12);
  v73 = (_QWORD *)((char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = type metadata accessor for Proto_Register(0);
  v14 = MEMORY[0x1E0C80A78](v72);
  v68 = (uint64_t)v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v81 = (char *)v66 - v16;
  v18 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v82 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v21 = (char *)v66 - v20;
  v22 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for CRDTRegister(0, v18, v17, v25);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)v66 - v28;
  v77 = v18;
  v78 = v17;
  v31 = type metadata accessor for CRDTRegister.Partial.PartialCases(0, v18, v17, v30);
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)v66 - v32;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))((char *)v66 - v32, v83, v31);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v35 = &v33[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    sub_1BDDA2E8C((uint64_t)v33, (uint64_t)v24, type metadata accessor for FinalizedTimestamp);
    v36 = v82;
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v21, v35, AssociatedTypeWitness);
    v37 = (uint64_t)v84;
    v38 = sub_1BDDA8D6C();
    if (v37)
    {
      sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for FinalizedTimestamp);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v21, AssociatedTypeWitness);
    }
    else
    {
      v40 = v22;
      v66[0] = AssociatedTypeWitness;
      v84 = v24;
      v66[1] = v38;
      swift_retain();
      v41 = v81;
      sub_1BE1B20E4();
      v42 = *(int *)(v72 + 20);
      if (qword_1ED6EF788 != -1)
        swift_once();
      v83 = v21;
      *(_QWORD *)&v41[v42] = qword_1ED6EF780;
      v43 = v75;
      v44 = v73;
      swift_retain();
      sub_1BE1B20E4();
      v45 = (uint64_t)v84;
      v46 = sub_1BDDAE244((uint64_t)v84);
      v47 = *(_QWORD *)(v45 + *(int *)(v40 + 20));
      *v44 = v46;
      v44[1] = v47;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49 = (uint64_t)v80;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        type metadata accessor for Proto_Register._StorageClass(0);
        swift_allocObject();
        v50 = swift_retain();
        *(_QWORD *)&v41[v42] = sub_1BE131250(v50);
        swift_release();
      }
      v51 = *(_QWORD *)&v41[v42];
      v52 = v76;
      sub_1BDDA2E8C((uint64_t)v44, v76, type metadata accessor for Proto_Timestamp);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v52, 0, 1, v43);
      v53 = (uint64_t)v41;
      v54 = v52;
      v55 = v79;
      sub_1BDDA2EF0(v54, v79, &qword_1ED6F3850);
      v56 = v51
          + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v55, v56, &qword_1ED6F3850);
      swift_endAccess();
      v57 = swift_release();
      MEMORY[0x1E0C80A78](v57);
      v58 = v78;
      v66[-4] = v77;
      v66[-3] = v58;
      v59 = v85;
      v66[-2] = v83;
      v66[-1] = v59;
      sub_1BDDA82F8((void (*)(uint64_t))sub_1BDFD74DC, v49);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Register._StorageClass(0);
        swift_allocObject();
        v60 = swift_retain();
        *(_QWORD *)(v53 + v42) = sub_1BE131250(v60);
        swift_release();
      }
      v61 = *(_QWORD *)(v53 + v42);
      v62 = v70;
      sub_1BDDA2E8C(v49, v70, type metadata accessor for Proto_CRDT);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v62, 0, 1, v69);
      v63 = v71;
      sub_1BDDA2EF0(v62, v71, &qword_1ED6F3728);
      v64 = v61
          + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialCrdt;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v63, v64, &qword_1ED6F3728);
      swift_endAccess();
      swift_release();
      v65 = v68;
      sub_1BDD9C318(v53, v68, type metadata accessor for Proto_Register);
      swift_beginAccess();
      sub_1BE12AA70(v65);
      swift_release();
      sub_1BDD9C3E0(v53, type metadata accessor for Proto_Register);
      sub_1BDD9C3E0((uint64_t)v84, type metadata accessor for FinalizedTimestamp);
      return (*(uint64_t (**)(char *, _QWORD))(v82 + 8))(v83, v66[0]);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v33, v26);
    CRDTRegister.encode(to:)(v85, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  }
}

uint64_t sub_1BDFD730C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 8);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v5 = swift_checkMetadataState();
  return v4(a2, v5, v3);
}

uint64_t sub_1BDFD73C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CRDTRegister.Partial.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1BDFD73E4(uint64_t a1, uint64_t a2)
{
  return CRDTRegister.Partial.encode(to:)(a1, a2);
}

uint64_t sub_1BDFD73F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 24))(v2 + *(int *)(a2 + 36), a1);
  result = sub_1BE1B1F4C();
  v9 = *(int *)(v5 + 20);
  v10 = *(_QWORD *)(v2 + v9);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v7[v9] = v12;
    return sub_1BDF2BC30((uint64_t)v7, v2);
  }
  return result;
}

uint64_t type metadata accessor for CRDTRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTRegister);
}

uint64_t type metadata accessor for CRDTRegister.MutatingAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTRegister.MutatingAction);
}

uint64_t type metadata accessor for CRDTRegister.Partial.PartialCases(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTRegister.Partial.PartialCases);
}

uint64_t type metadata accessor for CRDTRegister.Partial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTRegister.Partial);
}

uint64_t sub_1BDFD74DC()
{
  uint64_t v0;

  return sub_1BDFD730C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

_UNKNOWN **sub_1BDFD74F8()
{
  return &protocol witness table for CRDTRegister<A>.Partial;
}

uint64_t sub_1BDFD7504(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTRegister<A>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDFD7530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(uint64_t))CRDTRegister.value.getter);
}

uint64_t sub_1BDFD753C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for CRDTRegister(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return sub_1BDFD73F8(a1, v5);
}

uint64_t sub_1BDFD7578()
{
  return 16;
}

__n128 sub_1BDFD7584(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDFD7590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(uint64_t))CRDTRegister.crdt.getter);
}

uint64_t keypath_getTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = type metadata accessor for CRDTRegister(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(a3 + a2 - 8), (uint64_t)a4);
  return a4(v5);
}

uint64_t sub_1BDFD75E4()
{
  return 16;
}

__n128 sub_1BDFD75F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDFD75FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(uint64_t))CRDTRegister.wrappedValue.getter);
}

uint64_t sub_1BDFD760C()
{
  return 16;
}

__n128 sub_1BDFD7618(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDFD7624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(uint64_t))CRDTRegister.projectedValue.getter);
}

uint64_t sub_1BDFD7634()
{
  return 16;
}

__n128 sub_1BDFD7640(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BDFD764C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FinalizedTimestamp(319);
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1BDFD76D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  v13 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || (v12 & ~v11) + *(_QWORD *)(v10 + 64) > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    v17 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    *(_QWORD *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFF8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v17, ((unint64_t)a2 + v12) & v17, v9);
  }
  return a1;
}

uint64_t sub_1BDFD77E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_1BDFD7858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))(((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_1BDFD78F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_1BDFD7998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))(((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_1BDFD7A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(v7 + 64) + 7;
  *(_QWORD *)((v8 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v8 + a2) & 0xFFFFFFFFFFFFF8);
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))(((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((v8 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v9 + 80) + 8 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_1BDFD7AD8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
  if (a2 <= v12)
    goto LABEL_23;
  v15 = (v14 & ~v13) + *(_QWORD *)(v10 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v12)
      {
        if (v8 >= v11)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, v6);
        else
          return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v10 + 48))((v14 + a1) & ~v13, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = (v14 & ~(_DWORD)v13) + *(_DWORD *)(v10 + 64);
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v12 + v19 + 1;
}

void sub_1BDFD7C74(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v8 = *(_QWORD *)(sub_1BE1B1F58() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = ((v11 + v12) & ~v12) + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v14 = 0u;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 - v10 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v10 < a2)
  {
    v15 = ~v10 + a2;
    if (v13 < 4)
    {
      if ((_DWORD)v13)
      {
        v17 = v15 & ~(-1 << (8 * v13));
        bzero(a1, ((v11 + v12) & ~v12) + *(_QWORD *)(v9 + 64));
        if ((_DWORD)v13 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v13 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, ((v11 + v12) & ~v12) + *(_QWORD *)(v9 + 64));
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_1BDFD7EB8()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[6];

  v0 = swift_checkMetadataState();
  AssociatedTypeWitness = v0;
  if (v2 <= 0x3F)
  {
    v7[4] = *(_QWORD *)(v0 - 8) + 64;
    v3 = type metadata accessor for FinalizedTimestamp(319);
    if (v4 > 0x3F)
    {
      return v3;
    }
    else
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v5 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v7[5] = v7;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_1BDFD7F9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v25 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v25 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v12 + 8;
  v14 = *(_QWORD *)(v11 + 64);
  if ((v13 & ~v12) + v14 > v7)
    v7 = (v13 & ~v12) + v14;
  v15 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80);
  v16 = v15 & 0xF8 | v12;
  if (v16 > 7 || ((v15 | *(_DWORD *)(v11 + 80)) & 0x100000) != 0 || v7 + 1 > 0x18)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + (((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)));
    swift_retain();
  }
  else
  {
    v20 = *((unsigned __int8 *)a2 + v7);
    if (v20 >= 2)
    {
      if (v7 <= 3)
        v21 = v7;
      else
        v21 = 4;
      __asm { BR              X13 }
    }
    if (v20 == 1)
    {
      v22 = ~v12;
      v23 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v25);
      *(_QWORD *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)a1 + v13) & v22, ((unint64_t)a2 + v13) & v22, v23);
      *((_BYTE *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((_BYTE *)a1 + v7) = 0;
    }
  }
  return a1;
}

uint64_t sub_1BDFD81A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v8 + v11 + 8;
  v13 = (v12 & ~v11) + *(_QWORD *)(v10 + 64);
  if (v13 <= v5)
    v13 = v5;
  v14 = *(unsigned __int8 *)(a1 + v13);
  if (v14 >= 2)
  {
    if (v13 <= 3)
      v15 = v13;
    else
      v15 = 4;
    __asm { BR              X14 }
  }
  if (v14 == 1)
  {
    v16 = ~v11;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v17 = (v12 + a1) & v16;
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    v19 = AssociatedTypeWitness;
  }
  else
  {
    v18 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
    v17 = a1;
    v19 = v3;
  }
  return v18(v17, v19);
}

uint64_t sub_1BDFD82FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v21 + 64);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v12 + 8;
  v14 = *(_QWORD *)(v11 + 64);
  if ((v13 & ~v12) + v14 > v6)
    v6 = (v13 & ~v12) + v14;
  v15 = *(unsigned __int8 *)(a2 + v6);
  if (v15 >= 2)
  {
    if (v6 <= 3)
      v16 = v6;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    v17 = ~v12;
    v18 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v7);
    *(_QWORD *)((a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v13 + a1) & v17, (v13 + a2) & v17, v18);
    v19 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a1, a2, v5);
    v19 = 0;
  }
  *(_BYTE *)(a1 + v6) = v19;
  return a1;
}

uint64_t sub_1BDFD84B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v22 = *(_QWORD *)(v5 - 8);
    v6 = *(_QWORD *)(v22 + 64);
    v7 = sub_1BE1B1F58();
    v8 = *(_QWORD *)(v7 - 8);
    v21 = *(_QWORD *)(v8 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
    v13 = *(_QWORD *)(v10 + 64);
    if ((v12 & ~v11) + v13 > v6)
      v6 = (v12 & ~v11) + v13;
    v14 = *(unsigned __int8 *)(a1 + v6);
    if (v14 >= 2)
    {
      if (v6 <= 3)
        v15 = v6;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    v16 = ~v11;
    if (v14 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))((v12 + a1) & v16, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, v5);
    }
    v17 = *(unsigned __int8 *)(a2 + v6);
    if (v17 >= 2)
    {
      if (v6 <= 3)
        v18 = v6;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v7);
      *(_QWORD *)((a1 + v21 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v21 + 7) & 0xFFFFFFFFFFFFF8);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))((v12 + a1) & v16, (v12 + a2) & v16, AssociatedTypeWitness);
      v19 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a1, a2, v5);
      v19 = 0;
    }
    *(_BYTE *)(a1 + v6) = v19;
  }
  return a1;
}

uint64_t sub_1BDFD872C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v21 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v21 + 64);
  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v12 + 8;
  v14 = *(_QWORD *)(v11 + 64);
  if ((v13 & ~v12) + v14 > v6)
    v6 = (v13 & ~v12) + v14;
  v15 = *(unsigned __int8 *)(a2 + v6);
  if (v15 >= 2)
  {
    if (v6 <= 3)
      v16 = v6;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
  {
    v17 = ~v12;
    v18 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v7);
    *(_QWORD *)((a1 + v9 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v9 + 7) & 0xFFFFFFFFFFFFF8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))((v13 + a1) & v17, (v13 + a2) & v17, v18);
    v19 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(a1, a2, v5);
    v19 = 0;
  }
  *(_BYTE *)(a1 + v6) = v19;
  return a1;
}

uint64_t sub_1BDFD88E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v22 = *(_QWORD *)(v5 - 8);
    v6 = *(_QWORD *)(v22 + 64);
    v7 = sub_1BE1B1F58();
    v8 = *(_QWORD *)(v7 - 8);
    v21 = *(_QWORD *)(v8 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v12 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
    v13 = *(_QWORD *)(v10 + 64);
    if ((v12 & ~v11) + v13 > v6)
      v6 = (v12 & ~v11) + v13;
    v14 = *(unsigned __int8 *)(a1 + v6);
    if (v14 >= 2)
    {
      if (v6 <= 3)
        v15 = v6;
      else
        v15 = 4;
      __asm { BR              X13 }
    }
    v16 = ~v11;
    if (v14 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))((v12 + a1) & v16, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, v5);
    }
    v17 = *(unsigned __int8 *)(a2 + v6);
    if (v17 >= 2)
    {
      if (v6 <= 3)
        v18 = v6;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, v7);
      *(_QWORD *)((a1 + v21 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v21 + 7) & 0xFFFFFFFFFFFFF8);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))((v12 + a1) & v16, (v12 + a2) & v16, AssociatedTypeWitness);
      v19 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(a1, a2, v5);
      v19 = 0;
    }
    *(_BYTE *)(a1 + v6) = v19;
  }
  return a1;
}

uint64_t sub_1BDFD8B5C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v5)
    v8 = v5;
  else
    v8 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 > 3)
      LODWORD(v9) = 4;
    __asm { BR              X11 }
  }
  return (v14 + 255);
}

void sub_1BDFD8CEC(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t AssociatedTypeWitness;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = ((v8 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (v10 <= v7)
    v10 = v7;
  v11 = v10 + 1;
  if (a3 < 0xFF)
  {
    v12 = 0u;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 + ~(-1 << (8 * v11)) - 254) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = 4u;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v13 = a2 - 255;
  if (v11 < 4)
  {
    if ((_DWORD)v10 != -1)
    {
      v15 = v13 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if ((_DWORD)v11 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if ((_DWORD)v11 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
  }
  else
  {
    bzero(a1, v10 + 1);
    *(_DWORD *)a1 = v13;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDFD8EF8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = ((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (v6 <= v3)
    v6 = v3;
  result = *(unsigned __int8 *)(a1 + v6);
  if (result >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDFD9000(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  if (a2 > 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    v11 = (*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (((v11 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v10)
      v13 = v10;
    else
      v13 = ((v11 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v14 = a2 - 2;
    if (v13 < 4)
    {
      v15 = v14 >> (8 * v13);
      v16 = v14 & ~(-1 << (8 * v13));
      a1[v13] = v15 + 2;
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
    else
    {
      a1[v13] = 2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v14;
    }
  }
  else
  {
    v6 = (*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = swift_getAssociatedTypeWitness();
    v9 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
    if (v9 <= *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64))
      v9 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
    a1[v9] = a2;
  }
}

uint64_t sub_1BDFD918C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for CRDTRegister.Partial.PartialCases(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDFD9218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  unint64_t v9;
  _QWORD v11[6];

  v4 = type metadata accessor for CRDTRegister(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = v4;
  if (v6 <= 0x3F)
  {
    v11[4] = *(_QWORD *)(v4 - 8) + 64;
    v5 = type metadata accessor for FinalizedTimestamp(319);
    if (v7 <= 0x3F)
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      if (v9 > 0x3F)
      {
        return AssociatedTypeWitness;
      }
      else
      {
        swift_getTupleTypeLayout2();
        v11[5] = v11;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return v5;
}

uint64_t *sub_1BDFD9300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  v30 = *(_QWORD *)(v7 + 64);
  v8 = ((v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10;
  v27 = v8 + v10;
  v12 = ((v8 + v11) & ~v11) + *(_QWORD *)(v9 + 64);
  v28 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v16 = v8 + v15;
  v17 = *(_QWORD *)(v14 + 64);
  if (((v8 + v15) & ~v15) + v17 > v12)
    v12 = ((v8 + v15) & ~v15) + v17;
  v18 = v15 | *(_DWORD *)(v7 + 80) & 0xF8 | v10;
  if (v18 > 7 || ((*(_DWORD *)(v14 + 80) | v10 | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v12 + 1 > 0x18)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + (((v18 | 7) + 16) & ~(unint64_t)(v18 | 7)));
    swift_retain();
  }
  else
  {
    v22 = *((unsigned __int8 *)a2 + v12);
    v26 = v16;
    if (v22 >= 2)
    {
      if (v12 <= 3)
        v23 = v12;
      else
        v23 = 4;
      __asm { BR              X11 }
    }
    v24 = AssociatedTypeWitness;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v29);
    *(_QWORD *)(((unint64_t)a1 + v30 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v30 + 7) & 0xFFFFFFFFFFFFF8);
    if (v22 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))(((unint64_t)a1 + v26) & ~v15, ((unint64_t)a2 + v26) & ~v15, v24);
      *((_BYTE *)a1 + v12) = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v27) & ~v11, ((unint64_t)a2 + v27) & ~v11, v28);
      *((_BYTE *)a1 + v12) = 0;
    }
  }
  return a1;
}

uint64_t sub_1BDFD9548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v25 = ~v9;
  v10 = v6 + v9;
  v11 = ((v6 + v9) & ~v9) + *(_QWORD *)(v8 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v24 = ~v14;
  v15 = v6 + v14;
  v16 = (v15 & ~v14) + *(_QWORD *)(v13 + 64);
  if (v16 <= v11)
    v16 = v11;
  v17 = *(unsigned __int8 *)(a1 + v16);
  if (v17 >= 2)
  {
    if (v16 <= 3)
      v18 = v16;
    else
      v18 = 4;
    __asm { BR              X12 }
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  if (v17 == 1)
    v19 = v15;
  else
    v19 = v10;
  v20 = v25;
  if (v17 == 1)
  {
    v20 = v24;
    v21 = v13;
  }
  else
  {
    v21 = v8;
  }
  if (v17 == 1)
    v22 = AssociatedTypeWitness;
  else
    v22 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))((v19 + a1) & v20, v22);
}

uint64_t sub_1BDFD96C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_1BE1B1F58();
  v29 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v29 + 64);
  v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v30 = ~v11;
  v31 = v6;
  v28 = v8 + v11;
  v12 = ((v8 + v11) & ~v11) + *(_QWORD *)(v10 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v27 = ~v15;
  v16 = v8 + v15;
  v17 = ((v8 + v15) & ~v15) + *(_QWORD *)(v14 + 64);
  if (v17 <= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = *(unsigned __int8 *)(a2 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(a1, a2, v31);
  v21 = v19 == 1;
  *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  v22 = v28;
  if (v21)
    v22 = v16;
  v23 = v30;
  if (v21)
  {
    v23 = v27;
    v24 = v14;
  }
  else
  {
    v24 = v10;
  }
  if (v21)
    v25 = AssociatedTypeWitness;
  else
    v25 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))((v22 + a1) & v23, (v22 + a2) & v23, v25);
  *(_BYTE *)(a1 + v18) = v21;
  return a1;
}

uint64_t sub_1BDFD9884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a1 != a2)
  {
    v6 = sub_1BE1B1F58();
    v34 = *(_QWORD *)(v6 - 8);
    v32 = *(_QWORD *)(v34 + 64);
    v7 = ((v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v35 = ~v10;
    v36 = v6;
    v11 = v7 + v10;
    v12 = ((v7 + v10) & ~v10) + *(_QWORD *)(v9 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v33 = ~v15;
    v16 = v7 + v15;
    v17 = (v16 & ~v15) + *(_QWORD *)(v14 + 64);
    if (v17 > v12)
      v12 = v17;
    v18 = *(unsigned __int8 *)(a1 + v12);
    if (v18 >= 2)
    {
      if (v12 <= 3)
        v19 = v12;
      else
        v19 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a1, v36);
    if (v18 == 1)
      v20 = v16;
    else
      v20 = v11;
    v21 = v35;
    if (v18 == 1)
    {
      v21 = v33;
      v22 = v14;
    }
    else
    {
      v22 = v9;
    }
    if (v18 == 1)
      v23 = AssociatedTypeWitness;
    else
      v23 = v8;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))((v20 + a1) & v21, v23);
    v24 = *(unsigned __int8 *)(a2 + v12);
    if (v24 >= 2)
    {
      if (v12 <= 3)
        v25 = v12;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(a1, a2, v36);
    v26 = v24 == 1;
    *(_QWORD *)((a1 + v32 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v32 + 7) & 0xFFFFFFFFFFFFF8);
    if (v26)
      v27 = v16;
    else
      v27 = v11;
    v28 = v35;
    if (v26)
    {
      v28 = v33;
      v29 = v14;
    }
    else
    {
      v29 = v9;
    }
    if (v26)
      v30 = AssociatedTypeWitness;
    else
      v30 = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))((v27 + a1) & v28, (v27 + a2) & v28, v30);
    *(_BYTE *)(a1 + v12) = v26;
  }
  return a1;
}

uint64_t sub_1BDFD9B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_1BE1B1F58();
  v29 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v29 + 64);
  v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v30 = ~v11;
  v31 = v6;
  v28 = v8 + v11;
  v12 = ((v8 + v11) & ~v11) + *(_QWORD *)(v10 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v27 = ~v15;
  v16 = v8 + v15;
  v17 = ((v8 + v15) & ~v15) + *(_QWORD *)(v14 + 64);
  if (v17 <= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = *(unsigned __int8 *)(a2 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X11 }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(a1, a2, v31);
  v21 = v19 == 1;
  *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
  v22 = v28;
  if (v21)
    v22 = v16;
  v23 = v30;
  if (v21)
  {
    v23 = v27;
    v24 = v14;
  }
  else
  {
    v24 = v10;
  }
  if (v21)
    v25 = AssociatedTypeWitness;
  else
    v25 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))((v22 + a1) & v23, (v22 + a2) & v23, v25);
  *(_BYTE *)(a1 + v18) = v21;
  return a1;
}

uint64_t sub_1BDFD9CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (a1 != a2)
  {
    v6 = sub_1BE1B1F58();
    v34 = *(_QWORD *)(v6 - 8);
    v32 = *(_QWORD *)(v34 + 64);
    v7 = ((v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v35 = ~v10;
    v36 = v6;
    v11 = v7 + v10;
    v12 = ((v7 + v10) & ~v10) + *(_QWORD *)(v9 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v33 = ~v15;
    v16 = v7 + v15;
    v17 = (v16 & ~v15) + *(_QWORD *)(v14 + 64);
    if (v17 > v12)
      v12 = v17;
    v18 = *(unsigned __int8 *)(a1 + v12);
    if (v18 >= 2)
    {
      if (v12 <= 3)
        v19 = v12;
      else
        v19 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a1, v36);
    if (v18 == 1)
      v20 = v16;
    else
      v20 = v11;
    v21 = v35;
    if (v18 == 1)
    {
      v21 = v33;
      v22 = v14;
    }
    else
    {
      v22 = v9;
    }
    if (v18 == 1)
      v23 = AssociatedTypeWitness;
    else
      v23 = v8;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))((v20 + a1) & v21, v23);
    v24 = *(unsigned __int8 *)(a2 + v12);
    if (v24 >= 2)
    {
      if (v12 <= 3)
        v25 = v12;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(a1, a2, v36);
    v26 = v24 == 1;
    *(_QWORD *)((a1 + v32 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v32 + 7) & 0xFFFFFFFFFFFFF8);
    if (v26)
      v27 = v16;
    else
      v27 = v11;
    v28 = v35;
    if (v26)
    {
      v28 = v33;
      v29 = v14;
    }
    else
    {
      v29 = v9;
    }
    if (v26)
      v30 = AssociatedTypeWitness;
    else
      v30 = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))((v27 + a1) & v28, (v27 + a2) & v28, v30);
    *(_BYTE *)(a1 + v12) = v26;
  }
  return a1;
}

uint64_t sub_1BDFD9F40(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t AssociatedTypeWitness;
  unint64_t v9;
  unint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v6 = ((*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v7)
    v9 = v7;
  else
    v9 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v10 = v9 + 1;
  v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    v14 = ((a2 + ~(-1 << v11) - 254) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_22:
      v16 = *(unsigned __int8 *)(a1 + v9);
      if (v16 >= 2)
        return (v16 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_22;
LABEL_15:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 > 3)
      LODWORD(v10) = 4;
    __asm { BR              X11 }
  }
  return (v15 + 255);
}

void sub_1BDFDA0D0(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t AssociatedTypeWitness;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v8 = ((*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v9 = ((v8 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = ((v8 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (v11 <= v9)
    v11 = v9;
  v12 = v11 + 1;
  if (a3 < 0xFF)
  {
    v13 = 0u;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 + ~(-1 << (8 * v12)) - 254) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = 4u;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v14 = a2 - 255;
  if (v12 < 4)
  {
    if ((_DWORD)v11 != -1)
    {
      v16 = v14 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if ((_DWORD)v12 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if ((_DWORD)v12 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11 + 1);
    *(_DWORD *)a1 = v14;
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDFDA2DC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = ((*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v5 = ((v4 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = ((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (v7 <= v5)
    v7 = v5;
  result = *(unsigned __int8 *)(a1 + v7);
  if (result >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_1BDFDA3E4(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t AssociatedTypeWitness;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = ((*(_QWORD *)(*(_QWORD *)(sub_1BE1B1F58() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a2 > 1)
  {
    v10 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80))
        + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) > v10)
      v10 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v12 = a2 - 2;
    if (v10 < 4)
    {
      v13 = v12 >> (8 * v10);
      v14 = v12 & ~(-1 << (8 * v10));
      a1[v10] = v13 + 2;
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v10] = 2;
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 16);
    v8 = swift_getAssociatedTypeWitness();
    v9 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
    if (v9 <= ((v6 + *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
             + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64))
      v9 = ((v6 + *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
    a1[v9] = a2;
  }
}

uint64_t sub_1BDFDA564()
{
  uint64_t *v0;

  return sub_1BDFD4A60(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_1BDFDA580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int EnumCaseMultiPayload;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD, _QWORD);
  char *v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(_QWORD, _QWORD, _QWORD);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t, uint64_t);
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;

  v83 = a7;
  v84 = a6;
  v82 = a5;
  v11 = sub_1BE1B2EE8();
  v12 = MEMORY[0x1E0C80A78](v11);
  v79 = (char *)&v71 - v13;
  v86 = a4;
  v78 = *(_QWORD *)(a4 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v81 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = *(_QWORD *)(a3 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v77 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v71 - v18;
  v20 = type metadata accessor for Proto_Value(0);
  v72 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v91 = (uint64_t)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1BE1B2EE8();
  v85 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v80 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v90 = (char *)&v71 - v26;
  MEMORY[0x1E0C80A78](v25);
  v95 = (char *)&v71 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v29 = MEMORY[0x1E0C80A78](v28);
  v88 = (uint64_t)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v71 - v31;
  v93 = type metadata accessor for Proto_RepeatedValue(0);
  v33 = MEMORY[0x1E0C80A78](v93);
  v87 = (uint64_t *)((char *)&v71 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v33);
  v36 = (uint64_t *)((char *)&v71 - v35);
  v37 = *(int *)(v20 + 20);
  v74 = a1;
  v38 = *(_QWORD *)(a1 + v37);
  v39 = v38 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v39, (uint64_t)v32, &qword_1ED6F26F0);
  v40 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48);
  if (v41(v32, 1, v40) == 1)
  {
    sub_1BDD86E30((uint64_t)v32, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      sub_1BDF03540((uint64_t)v32, (uint64_t)v36);
      goto LABEL_7;
    }
    sub_1BDD9C3E0((uint64_t)v32, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v36 = MEMORY[0x1E0DEE9D8];
  sub_1BE1B20E4();
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v36, type metadata accessor for Proto_RepeatedValue);
  swift_bridgeObjectRelease();
  v96 = sub_1BE1B25C4();
  v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
  v89(v95, 1, 1, a3);
  v42 = v38 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v43 = v42;
  v44 = v88;
  sub_1BDD86DEC(v43, v88, &qword_1ED6F26F0);
  if (v41((char *)v44, 1, v40) == 1)
  {
    sub_1BDD86E30(v44, &qword_1ED6F26F0);
    v45 = v85;
LABEL_12:
    v47 = v87;
    *v87 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_13;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v45 = v85;
  if (EnumCaseMultiPayload != 10)
  {
    sub_1BDD9C3E0(v44, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_12;
  }
  v47 = v87;
  sub_1BDF03540(v44, (uint64_t)v87);
LABEL_13:
  v48 = v92;
  v49 = *v47;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v47, type metadata accessor for Proto_RepeatedValue);
  v50 = *(_QWORD *)(v49 + 16);
  v73 = v49;
  if (!v50)
  {
LABEL_21:
    swift_release();
    sub_1BDD9C3E0(v74, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v95, v22);
    return v96;
  }
  v51 = v49 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
  v88 = *(_QWORD *)(v72 + 72);
  v76 = v22;
  v75 = a2;
  while (1)
  {
    v93 = v50;
    v52 = v91;
    sub_1BDDD2EB4(v51, v91);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v53 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1BDDB4FC0(v52, a2);
    swift_release();
    v54 = v90;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v90, v95, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v54, 1, a3) != 1)
      break;
    v55 = *(void (**)(char *, uint64_t))(v45 + 8);
    v55(v54, v22);
    v56 = v53;
    v57 = v80;
    v58 = v94;
    (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(*(_QWORD *)(*(_QWORD *)(v82 + 8) + 8)
                                                                                 + 8))(v56, a3);
    v94 = v58;
    if (v58)
    {
      swift_release();
      sub_1BDD9C3E0(v74, type metadata accessor for Proto_Value);
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    v59 = v95;
    v55(v95, v22);
    v89(v57, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v59, v57, v22);
    v48 = v92;
LABEL_15:
    v51 += v88;
    v50 = v93 - 1;
    if (v93 == 1)
      goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v19, v54, a3);
  v60 = v48;
  v61 = *(_QWORD *)(*(_QWORD *)(v83 + 8) + 8);
  v87 = *(uint64_t **)(v61 + 8);
  v62 = swift_retain();
  v63 = v81;
  v64 = v86;
  v65 = v94;
  ((void (*)(uint64_t, uint64_t, uint64_t))v87)(v62, v86, v61);
  v94 = v65;
  if (!v65)
  {
    v66 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
    v87 = (uint64_t *)v53;
    v66(v77, v19, a3);
    v67 = v78;
    v68 = v79;
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v79, v63, v64);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v68, 0, 1, v64);
    sub_1BE1B2684();
    sub_1BE1B26B4();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v63, v64);
    v48 = v92;
    (*(void (**)(char *, uint64_t))(v92 + 8))(v19, a3);
    v45 = v85;
    v69 = v95;
    v22 = v76;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v95, v76);
    v89(v69, 1, 1, a3);
    a2 = v75;
    goto LABEL_15;
  }
  swift_release();
  swift_release();
  sub_1BDD9C3E0(v74, type metadata accessor for Proto_Value);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v19, a3);
  swift_bridgeObjectRelease();
  v55 = *(void (**)(char *, uint64_t))(v85 + 8);
  v22 = v76;
LABEL_24:
  v55(v95, v22);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDFDADC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a7;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v15);
  v33 = (uint64_t)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Proto_RepeatedValue(0);
  MEMORY[0x1E0C80A78](v31);
  v32 = (uint64_t *)((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BE1B20E4();
  v18 = type metadata accessor for Proto_Value(0);
  v19 = *(int *)(v18 + 20);
  if (qword_1ED6F2718 != -1)
    v18 = swift_once();
  v34 = &v31;
  *(_QWORD *)(a8 + v19) = qword_1ED6F2708;
  v36 = a2;
  MEMORY[0x1E0C80A78](v18);
  *(&v31 - 6) = a3;
  *(&v31 - 5) = a4;
  *(&v31 - 4) = a5;
  *(&v31 - 3) = a6;
  *(&v31 - 2) = v35;
  *(&v31 - 1) = a1;
  v20 = sub_1BE1B2684();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F390);
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0D0], v20);
  sub_1BDFDD360();
  v21 = v37;
  v22 = sub_1BE1B2900();
  if (v21)
    return sub_1BDD9C3E0(a8, type metadata accessor for Proto_Value);
  v24 = v22;
  v25 = *(_QWORD *)(a8 + v19)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v26 = v25;
  v27 = v33;
  sub_1BDD86DEC(v26, v33, &qword_1ED6F26F0);
  v28 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28) == 1)
  {
    sub_1BDD86E30(v27, &qword_1ED6F26F0);
LABEL_10:
    v30 = v32;
    *v32 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 10)
  {
    sub_1BDD9C3E0(v27, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  v29 = v27;
  v30 = v32;
  sub_1BDF03540(v29, (uint64_t)v32);
LABEL_11:
  swift_bridgeObjectRelease();
  *v30 = v24;
  return sub_1BE1295CC((uint64_t)v30);
}

uint64_t Dictionary<>.observableDifference(from:with:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  int64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v108 = a2;
  v107 = *(_QWORD *)(a8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v97 = sub_1BE1B2EE8();
  v96 = *(_QWORD *)(v97 - 8);
  v14 = MEMORY[0x1E0C80A78](v97);
  v95 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v106 = (char *)&v88 - v17;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v16);
  v105 = (char *)&v88 - v19;
  v90 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v90 - 8);
  v20 = MEMORY[0x1E0C80A78](v90);
  v109 = (char *)&v88 - v21;
  v118 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v20);
  v113 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v116 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v24 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v94 = (char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v88 - v27;
  MEMORY[0x1E0C80A78](v26);
  v117 = (char *)&v88 - v29;
  v111 = v30;
  v31 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)&v88 - v32;
  v34 = sub_1BE1B260C();
  v110 = a1;
  v120 = a5;
  v121 = a4;
  v35 = 0;
  if (v34 != sub_1BE1B260C())
    return v35;
  v112 = a7;
  v122 = sub_1BE1B257C();
  v99 = v18;
  v36 = AssociatedTypeWitness;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v37 = sub_1BE1B31C4();
    v92 = 0;
    v38 = 0;
    v39 = 0;
    v40 = v37 | 0x8000000000000000;
  }
  else
  {
    v41 = -1 << *(_BYTE *)(a3 + 32);
    v38 = ~v41;
    v42 = *(_QWORD *)(a3 + 64);
    v92 = a3 + 64;
    v43 = -v41;
    if (v43 < 64)
      v44 = ~(-1 << v43);
    else
      v44 = -1;
    v39 = v44 & v42;
    v40 = a3;
  }
  v45 = v111;
  v93 = v40 & 0x7FFFFFFFFFFFFFFFLL;
  v88 = v38;
  v91 = (unint64_t)(v38 + 64) >> 6;
  result = swift_bridgeObjectRetain();
  v47 = 0;
  v100 = v36;
  v104 = v28;
  v101 = v40;
  v98 = v33;
  while (1)
  {
    v102 = v47;
    v103 = v39;
    if ((v40 & 0x8000000000000000) != 0)
      break;
    if (v39)
    {
      v114 = (v39 - 1) & v39;
      v115 = v47;
      v48 = __clz(__rbit64(v39)) | (v47 << 6);
    }
    else
    {
      v51 = v47 + 1;
      if (__OFADD__(v47, 1))
      {
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      if (v51 >= v91)
        goto LABEL_33;
      v52 = *(_QWORD *)(v92 + 8 * v51);
      v53 = v47 + 1;
      if (!v52)
      {
        v53 = v47 + 2;
        if (v47 + 2 >= v91)
          goto LABEL_33;
        v52 = *(_QWORD *)(v92 + 8 * v53);
        if (!v52)
        {
          v54 = v47 + 3;
          if (v47 + 3 >= v91)
          {
LABEL_33:
            v85 = v112;
            goto LABEL_35;
          }
          v52 = *(_QWORD *)(v92 + 8 * v54);
          if (!v52)
          {
            while (1)
            {
              v53 = v54 + 1;
              if (__OFADD__(v54, 1))
                goto LABEL_39;
              if (v53 >= v91)
                goto LABEL_33;
              v52 = *(_QWORD *)(v92 + 8 * v53);
              ++v54;
              if (v52)
                goto LABEL_27;
            }
          }
          v53 = v47 + 3;
        }
      }
LABEL_27:
      v114 = (v52 - 1) & v52;
      v115 = v53;
      v48 = __clz(__rbit64(v52)) + (v53 << 6);
    }
    v55 = *(_QWORD *)(v121 - 8);
    v56 = *(_QWORD *)(v40 + 48) + *(_QWORD *)(v55 + 72) * v48;
    v119 = (char *)v55;
    (*(void (**)(char *, unint64_t))(v55 + 16))(v33, v56);
    v50 = v120;
    (*(void (**)(char *, unint64_t, uint64_t))(v118 + 16))(&v33[*(int *)(v45 + 48)], *(_QWORD *)(v40 + 56) + *(_QWORD *)(v118 + 72) * v48, v120);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v33, 0, 1, v45);
LABEL_29:
    v57 = *(int *)(v45 + 48);
    v58 = v117;
    v59 = &v117[v57];
    v60 = &v33[v57];
    v61 = v119;
    v62 = v121;
    (*((void (**)(char *, char *, uint64_t))v119 + 4))(v117, v33, v121);
    v63 = v45;
    v64 = v118;
    v65 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
    v65(v59, v60, v50);
    v66 = v104;
    v67 = &v104[*(int *)(v63 + 48)];
    v68 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v61 + 2);
    v68(v104, v58, v62);
    v69 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
    v69(v67, v59, v50);
    v70 = v109;
    MEMORY[0x1C3B7C58C](v66, v110, v62, v50, v112);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v70, 1, v50) == 1)
    {
      (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v111);
      sub_1BDE27FD0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v70, v90);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v67, v120);
      (*((void (**)(char *, uint64_t))v119 + 1))(v66, v121);
      return 0;
    }
    v71 = v113;
    v72 = v120;
    v65(v113, v70, v120);
    v73 = v121;
    v74 = *(void (**)(char *, uint64_t))(v118 + 8);
    v74(v67, v72);
    (*((void (**)(char *, uint64_t))v119 + 1))(v66, v73);
    v75 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 32))(v71, v108, v72);
    v76 = v99;
    v36 = v100;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v75, 1, v100) == 1)
    {
      v74(v71, v120);
      v45 = v111;
      (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v111);
      result = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v75, v97);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v105, v75, v36);
      v45 = v111;
      v77 = v73;
      v78 = v36;
      v119 = &v94[*(int *)(v111 + 48)];
      v79 = v119;
      v68(v94, v117, v77);
      v80 = v79;
      v36 = v78;
      v81 = v74;
      v82 = v120;
      v69(v80, v59, v120);
      v83 = v95;
      v84 = v105;
      (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v95, v105, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v83, 0, 1, v36);
      sub_1BE1B2684();
      sub_1BE1B26B4();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v84, v36);
      v81(v113, v82);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v45);
      result = ((uint64_t (*)(char *, uint64_t))v81)(v119, v82);
    }
    v39 = v114;
    v47 = v115;
    v33 = v98;
    v40 = v101;
  }
  if (sub_1BE1B31DC())
  {
    v49 = v121;
    sub_1BE1B3494();
    swift_unknownObjectRelease();
    v50 = v120;
    sub_1BE1B3494();
    swift_unknownObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v33, 0, 1, v45);
    v119 = *(char **)(v49 - 8);
    v114 = v39;
    v115 = v47;
    goto LABEL_29;
  }
  v85 = v112;
LABEL_35:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v116 + 56))(v33, 1, 1, v45);
  sub_1BDE27FD0();
  v35 = v122;
  v86 = swift_bridgeObjectRetain();
  v87 = MEMORY[0x1C3B7C52C](v86, v121, v36, v85);
  swift_bridgeObjectRelease();
  if ((v87 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return v35;
}

uint64_t Dictionary<>.visitReferences(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  int64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t);
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;

  v61 = a5;
  v62 = a7;
  v60 = a1;
  v67 = *(_QWORD *)(a4 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v59 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v8);
  v58 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v12;
  v69 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = sub_1BE1B2EE8();
  v63 = *(_QWORD *)(v15 - 8);
  v64 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v65 = (char *)&v51 - v19;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v20 = sub_1BE1B31C4();
    v54 = 0;
    v21 = 0;
    v22 = 0;
    v23 = v20 | 0x8000000000000000;
  }
  else
  {
    v24 = -1 << *(_BYTE *)(a2 + 32);
    v21 = ~v24;
    v25 = *(_QWORD *)(a2 + 64);
    v54 = a2 + 64;
    v26 = -v24;
    if (v26 < 64)
      v27 = ~(-1 << v26);
    else
      v27 = -1;
    v22 = v27 & v25;
    v23 = a2;
  }
  v55 = (unint64_t)(v21 + 64) >> 6;
  v56 = v23 & 0x7FFFFFFFFFFFFFFFLL;
  v52 = v55 - 1;
  v53 = v21;
  result = swift_bridgeObjectRetain();
  v29 = 0;
  v57 = v23;
  v30 = v69;
  if ((v23 & 0x8000000000000000) != 0)
    goto LABEL_11;
LABEL_8:
  v31 = v65;
  if (v22)
  {
    v32 = (v22 - 1) & v22;
    v33 = __clz(__rbit64(v22)) | (v29 << 6);
    v34 = v29;
LABEL_10:
    (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v18, *(_QWORD *)(v23 + 48) + *(_QWORD *)(v66 + 72) * v33, v68);
    (*(void (**)(char *, unint64_t, uint64_t))(v67 + 16))(&v18[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v23 + 56) + *(_QWORD *)(v67 + 72) * v33, v69);
    v35 = 0;
    goto LABEL_20;
  }
  v34 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
  }
  else
  {
    if (v34 >= v55)
    {
      v32 = 0;
      v35 = 1;
      v34 = v29;
      goto LABEL_20;
    }
    v37 = *(_QWORD *)(v54 + 8 * v34);
    if (v37)
      goto LABEL_16;
    if (v29 + 2 >= v55)
    {
      v32 = 0;
      v35 = 1;
      goto LABEL_20;
    }
    v37 = *(_QWORD *)(v54 + 8 * (v29 + 2));
    if (v37)
    {
      v34 = v29 + 2;
LABEL_16:
      v32 = (v37 - 1) & v37;
      v33 = __clz(__rbit64(v37)) + (v34 << 6);
      goto LABEL_10;
    }
    v50 = v29 + 3;
    if (v29 + 3 >= v55)
    {
      v32 = 0;
      v35 = 1;
      v34 = v29 + 2;
      goto LABEL_20;
    }
    v37 = *(_QWORD *)(v54 + 8 * v50);
    if (v37)
    {
      v34 = v29 + 3;
      goto LABEL_16;
    }
    while (1)
    {
      v34 = v50 + 1;
      if (__OFADD__(v50, 1))
        break;
      if (v34 >= v55)
      {
        v32 = 0;
        v35 = 1;
        v34 = v52;
LABEL_20:
        while (1)
        {
          v38 = *(_QWORD *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v18, v35, 1, TupleTypeMetadata2);
          (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v31, v18, v64);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v31, 1, TupleTypeMetadata2) == 1)
            return sub_1BDE27FD0();
          v39 = &v31[*(int *)(TupleTypeMetadata2 + 48)];
          v40 = v66;
          v41 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
          v70 = v32;
          v71 = v34;
          v42 = v58;
          v43 = TupleTypeMetadata2;
          v44 = v68;
          v41(v58, v31, v68);
          v45 = v67;
          v46 = v59;
          (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v59, v39, v30);
          v47 = v60;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 + 8) + 40))(v60, v44);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 + 8) + 40))(v47, v30);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v30);
          v48 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
          v23 = v57;
          v49 = v44;
          TupleTypeMetadata2 = v43;
          result = v48(v42, v49);
          v22 = v70;
          v29 = v71;
          if ((v23 & 0x8000000000000000) == 0)
            goto LABEL_8;
LABEL_11:
          v36 = sub_1BE1B31DC();
          v31 = v65;
          if (v36)
          {
            sub_1BE1B3494();
            swift_unknownObjectRelease();
            sub_1BE1B3494();
            swift_unknownObjectRelease();
            v35 = 0;
          }
          else
          {
            v35 = 1;
          }
          v34 = v29;
          v32 = v22;
        }
      }
      v37 = *(_QWORD *)(v54 + 8 * v34);
      ++v50;
      if (v37)
        goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t Dictionary<>.copy(renamingReferences:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  int64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;

  v78 = a5;
  v79 = a7;
  v77 = a1;
  v10 = sub_1BE1B2EE8();
  v11 = MEMORY[0x1E0C80A78](v10);
  v76 = (char *)&v62 - v12;
  v83 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v75 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v62 - v16;
  v84 = *(_QWORD *)(a3 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v73 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v72 = (char *)&v62 - v20;
  MEMORY[0x1E0C80A78](v19);
  v89 = (char *)&v62 - v21;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v23 = sub_1BE1B2EE8();
  v80 = *(_QWORD *)(v23 - 8);
  v81 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v82 = (char *)&v62 - v27;
  v90 = sub_1BE1B257C();
  sub_1BE1B260C();
  v85 = a4;
  v86 = a3;
  v69 = sub_1BE1B2684();
  sub_1BE1B25D0();
  if ((a2 & 0xC000000000000001) != 0)
  {
    v28 = sub_1BE1B31C4();
    v65 = 0;
    v29 = 0;
    v30 = 0;
    v31 = v28 | 0x8000000000000000;
  }
  else
  {
    v32 = -1 << *(_BYTE *)(a2 + 32);
    v29 = ~v32;
    v33 = *(_QWORD *)(a2 + 64);
    v65 = a2 + 64;
    v34 = -v32;
    if (v34 < 64)
      v35 = ~(-1 << v34);
    else
      v35 = -1;
    v30 = v35 & v33;
    v31 = a2;
  }
  v67 = v31 & 0x7FFFFFFFFFFFFFFFLL;
  v64 = v29;
  v66 = (unint64_t)(v29 + 64) >> 6;
  v63 = v66 - 1;
  result = swift_bridgeObjectRetain();
  v37 = 0;
  v70 = v26;
  v71 = TupleTypeMetadata2;
  v68 = v31;
  if ((v31 & 0x8000000000000000) != 0)
    goto LABEL_11;
LABEL_8:
  v38 = v82;
  if (v30)
  {
    v39 = (v30 - 1) & v30;
    v40 = __clz(__rbit64(v30)) | (v37 << 6);
    v41 = v37;
LABEL_10:
    (*(void (**)(char *, unint64_t, uint64_t))(v84 + 16))(v26, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v84 + 72) * v40, v86);
    (*(void (**)(char *, unint64_t, uint64_t))(v83 + 16))(&v26[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v31 + 56) + *(_QWORD *)(v83 + 72) * v40, v85);
    v42 = 0;
    goto LABEL_20;
  }
  v41 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
  }
  else
  {
    if (v41 >= v66)
    {
      v39 = 0;
      v42 = 1;
      v41 = v37;
      goto LABEL_20;
    }
    v44 = *(_QWORD *)(v65 + 8 * v41);
    if (v44)
      goto LABEL_16;
    if (v37 + 2 >= v66)
    {
      v39 = 0;
      v42 = 1;
      goto LABEL_20;
    }
    v44 = *(_QWORD *)(v65 + 8 * (v37 + 2));
    if (v44)
    {
      v41 = v37 + 2;
LABEL_16:
      v39 = (v44 - 1) & v44;
      v40 = __clz(__rbit64(v44)) + (v41 << 6);
      goto LABEL_10;
    }
    v61 = v37 + 3;
    if (v37 + 3 >= v66)
    {
      v39 = 0;
      v42 = 1;
      v41 = v37 + 2;
      goto LABEL_20;
    }
    v44 = *(_QWORD *)(v65 + 8 * v61);
    if (v44)
    {
      v41 = v37 + 3;
      goto LABEL_16;
    }
    while (1)
    {
      v41 = v61 + 1;
      if (__OFADD__(v61, 1))
        break;
      if (v41 >= v66)
      {
        v39 = 0;
        v42 = 1;
        v41 = v63;
LABEL_20:
        while (1)
        {
          v45 = *(_QWORD *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v26, v42, 1, TupleTypeMetadata2);
          (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v38, v26, v81);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v38, 1, TupleTypeMetadata2) == 1)
            break;
          v46 = &v38[*(int *)(TupleTypeMetadata2 + 48)];
          v88 = v39;
          v47 = v84;
          v48 = v86;
          (*(void (**)(void))(v84 + 32))();
          v49 = v83;
          v50 = v74;
          v51 = v85;
          (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v74, v46, v85);
          v52 = v77;
          v53 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 + 8) + 24);
          v54 = v72;
          v87 = v41;
          v53(v77, v48);
          v55 = v75;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v79 + 8) + 24))(v52, v51);
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v73, v54, v48);
          v56 = v76;
          (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v76, v55, v51);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v56, 0, 1, v51);
          sub_1BE1B26B4();
          v57 = *(void (**)(char *, uint64_t))(v49 + 8);
          v26 = v70;
          v57(v55, v51);
          v58 = *(void (**)(char *, uint64_t))(v47 + 8);
          v59 = v54;
          TupleTypeMetadata2 = v71;
          v58(v59, v48);
          v60 = v51;
          v31 = v68;
          v57(v50, v60);
          result = ((uint64_t (*)(char *, uint64_t))v58)(v89, v48);
          v37 = v87;
          v30 = v88;
          if ((v31 & 0x8000000000000000) == 0)
            goto LABEL_8;
LABEL_11:
          v43 = sub_1BE1B31DC();
          v38 = v82;
          if (v43)
          {
            sub_1BE1B3494();
            swift_unknownObjectRelease();
            sub_1BE1B3494();
            swift_unknownObjectRelease();
            v42 = 0;
          }
          else
          {
            v42 = 1;
          }
          v41 = v37;
          v39 = v30;
        }
        sub_1BDE27FD0();
        return v90;
      }
      v44 = *(_QWORD *)(v65 + 8 * v41);
      ++v61;
      if (v44)
        goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t Dictionary<>.needToFinalizeTimestamps()()
{
  uint64_t v0;

  v0 = sub_1BE1B2684();
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0D0], v0);
  return sub_1BE1B290C() & 1;
}

uint64_t sub_1BDFDC50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v13 = (char *)&v20 - v12;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a4 + 8) + 48))(a2);
  v15 = *(int *)(TupleTypeMetadata2 + 48);
  v16 = &v13[v15];
  v17 = a1 + v15;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v13, a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v16, v17, a3);
  if ((v14 & 1) != 0)
    v18 = 1;
  else
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 + 8) + 48))(a3);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, TupleTypeMetadata2);
  return v18 & 1;
}

uint64_t Dictionary<>.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;

  v66 = a1;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = sub_1BE1B2EE8();
  v10 = MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v52 - v11;
  v72 = *(_QWORD *)(v8 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v64 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 16);
  v73 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v63 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v62 = (char *)&v52 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = sub_1BE1B2EE8();
  v69 = *(_QWORD *)(v19 - 8);
  v70 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v71 = (char *)&v52 - v23;
  v24 = *v4;
  v67 = a3;
  v68 = a4;
  result = Dictionary<>.needToFinalizeTimestamps()();
  if ((result & 1) != 0)
  {
    v55 = (uint64_t *)v4;
    v76 = sub_1BE1B257C();
    sub_1BE1B260C();
    result = sub_1BE1B25D0();
    v26 = v8;
    v61 = a2;
    if ((v24 & 0xC000000000000001) != 0)
    {
      result = sub_1BE1B31C4();
      v56 = 0;
      v27 = 0;
      v28 = 0;
      v24 = result | 0x8000000000000000;
    }
    else
    {
      v29 = -1 << *(_BYTE *)(v24 + 32);
      v30 = *(_QWORD *)(v24 + 64);
      v56 = v24 + 64;
      v31 = ~v29;
      v32 = -v29;
      if (v32 < 64)
        v33 = ~(-1 << v32);
      else
        v33 = -1;
      v28 = v33 & v30;
      v27 = v31;
    }
    v34 = v71;
    v35 = 0;
    v58 = v24 & 0x7FFFFFFFFFFFFFFFLL;
    v54 = v27;
    v57 = (unint64_t)(v27 + 64) >> 6;
    v53 = v57 - 1;
    v59 = v24;
    v60 = v22;
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_12;
LABEL_9:
    if (v28)
    {
      v75 = (v28 - 1) & v28;
      v36 = __clz(__rbit64(v28)) | (v35 << 6);
      v37 = v35;
LABEL_11:
      (*(void (**)(char *, unint64_t, uint64_t))(v73 + 16))(v22, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v73 + 72) * v36, v14);
      (*(void (**)(char *, unint64_t, uint64_t))(v72 + 16))(&v22[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v24 + 56) + *(_QWORD *)(v72 + 72) * v36, v26);
      v38 = 0;
      goto LABEL_21;
    }
    v37 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
    }
    else
    {
      if (v37 >= v57)
      {
        v75 = 0;
        v38 = 1;
        v37 = v35;
        goto LABEL_21;
      }
      v39 = *(_QWORD *)(v56 + 8 * v37);
      if (v39)
        goto LABEL_17;
      if (v35 + 2 >= v57)
      {
        v75 = 0;
        v38 = 1;
        goto LABEL_21;
      }
      v39 = *(_QWORD *)(v56 + 8 * (v35 + 2));
      if (v39)
      {
        v37 = v35 + 2;
LABEL_17:
        v75 = (v39 - 1) & v39;
        v36 = __clz(__rbit64(v39)) + (v37 << 6);
        goto LABEL_11;
      }
      v51 = v35 + 3;
      if (v35 + 3 >= v57)
      {
        v75 = 0;
        v38 = 1;
        v37 = v35 + 2;
        goto LABEL_21;
      }
      v39 = *(_QWORD *)(v56 + 8 * v51);
      if (v39)
      {
        v37 = v35 + 3;
        goto LABEL_17;
      }
      while (1)
      {
        v37 = v51 + 1;
        if (__OFADD__(v51, 1))
          break;
        if (v37 >= v57)
        {
          v75 = 0;
          v38 = 1;
          v37 = v53;
LABEL_21:
          while (1)
          {
            v40 = *(_QWORD *)(TupleTypeMetadata2 - 8);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v22, v38, 1, TupleTypeMetadata2);
            (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v34, v22, v70);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v34, 1, TupleTypeMetadata2) == 1)
              break;
            v41 = &v34[*(int *)(TupleTypeMetadata2 + 48)];
            v74 = v37;
            v42 = v73;
            v43 = v62;
            (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v62, v34, v14);
            v44 = TupleTypeMetadata2;
            v45 = v72;
            v46 = v64;
            (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v64, v41, v26);
            v47 = v66;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 + 8) + 56))(v66, v14);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 + 8) + 56))(v47, v26);
            (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v63, v43, v14);
            v48 = v65;
            (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v65, v46, v26);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v48, 0, 1, v26);
            v34 = v71;
            sub_1BE1B26B4();
            v49 = *(void (**)(char *, uint64_t))(v45 + 8);
            TupleTypeMetadata2 = v44;
            v22 = v60;
            v49(v46, v26);
            v50 = v43;
            v24 = v59;
            result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v50, v14);
            v35 = v74;
            v28 = v75;
            if ((v24 & 0x8000000000000000) == 0)
              goto LABEL_9;
LABEL_12:
            if (sub_1BE1B31DC())
            {
              sub_1BE1B3494();
              swift_unknownObjectRelease();
              sub_1BE1B3494();
              swift_unknownObjectRelease();
              v38 = 0;
            }
            else
            {
              v38 = 1;
            }
            v37 = v35;
            v75 = v28;
            v34 = v71;
          }
          result = sub_1BDE27FD0();
          *v55 = v76;
          return result;
        }
        v39 = *(_QWORD *)(v56 + 8 * v37);
        ++v51;
        if (v39)
          goto LABEL_17;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t static Dictionary<>.canContainAssets.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (((*(uint64_t (**)(void))(*(_QWORD *)(a3 + 8) + 64))() & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a5 + 8) + 64))(a2) & 1;
}

uint64_t sub_1BDFDCC7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t *v4;
  uint64_t result;

  result = Dictionary<>.copy(renamingReferences:)(a1, *v4, a2[2], a2[3], *(_QWORD *)(a3 - 8), a2[4], *(_QWORD *)(a3 - 16));
  *a4 = result;
  return result;
}

uint64_t sub_1BDFDCCB4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  unint64_t *v6;
  uint64_t result;

  result = Dictionary<>.observableDifference(from:with:)(*a1, a2, *v6, a3[2], a3[3], a5, a3[4], *(_QWORD *)(a4 - 16));
  *a6 = result;
  return result;
}

uint64_t sub_1BDFDCCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v6;

  return Dictionary<>.visitReferences(_:)(a1, *v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 - 8), a6, *(_QWORD *)(a3 - 16));
}

uint64_t sub_1BDFDCD04()
{
  return Dictionary<>.needToFinalizeTimestamps()();
}

uint64_t sub_1BDFDCD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary<>.finalizeTimestamps(_:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t sub_1BDFDCD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Dictionary<>.canContainAssets.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 - 8), a4, *(_QWORD *)(a2 - 16));
}

uint64_t sub_1BDFDCD38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t result;

  result = Dictionary<>.init(from:)(a1, a2[2], a2[3], *(_QWORD *)(a3 - 8), a2[4], *(_QWORD *)(a3 - 16));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t Dictionary<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v14, &qword_1ED6F3770);
  v16 = type metadata accessor for Proto_Value(0);
  v17 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v14, 1, v16);
  sub_1BDD86E30((uint64_t)v14, &qword_1ED6F3770);
  if ((_DWORD)v17 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000017;
    *(_QWORD *)(v18 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v18 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v17 = sub_1BDE15B08(a2, a3, a4, a5, a6);
  }
  swift_release();
  return v17;
}

uint64_t sub_1BDFDCF1C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return Dictionary<>.encode(to:)(a1, *v3, a2[2], a2[3], *(_QWORD *)(a3 - 8), a2[4], *(_QWORD *)(a3 - 16));
}

uint64_t Dictionary<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;

  result = sub_1BDE25870();
  if (!v7)
  {
    swift_retain();
    sub_1BDE20C38(a2, a3, a4, a5, a6, a7);
    return swift_release();
  }
  return result;
}

void Dictionary<>.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1BDFDCFE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, _QWORD *);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, _QWORD *);
  void (*v27)(_QWORD, _QWORD);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t result;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD);
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;

  v45 = a5;
  v46 = a6;
  v47 = a7;
  v36 = a8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v43 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v13 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v41 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v36 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC70);
  v17 = *(_QWORD *)(type metadata accessor for Proto_Value(0) - 8);
  v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v38 = *(_QWORD *)(v17 + 72);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1BE1B61C0;
  v42 = v19;
  v55 = TupleTypeMetadata2;
  v20 = *(int *)(TupleTypeMetadata2 + 48);
  v21 = &v16[v20];
  v22 = a1 + v20;
  v23 = *(void (**)(char *, uint64_t, _QWORD *))(*(a3 - 1) + 16);
  v39 = a1;
  v24 = a1;
  v25 = v19 + v18;
  v23(v16, v24, a3);
  v26 = *(void (**)(char *, uint64_t, _QWORD *))(*(a4 - 1) + 16);
  v37 = v22;
  v26(v21, v22, a4);
  v48 = a3;
  v49 = a4;
  v27 = v44;
  v50 = v45;
  v51 = v46;
  v52 = v47;
  v53 = v16;
  v54 = a2;
  v40 = a2;
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDFDD3AC, v25);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v55);
    *(_QWORD *)(v42 + 16) = 0;
    return swift_release();
  }
  else
  {
    v28 = v16;
    v29 = v55;
    v44 = *(void (**)(_QWORD, _QWORD))(v43 + 8);
    v44(v28, v55);
    v30 = v25 + v38;
    v31 = (uint64_t *)v41;
    v32 = &v41[*(int *)(v29 + 48)];
    v23(v41, v39, a3);
    v33 = ((uint64_t (*)(char *, uint64_t, _QWORD *))v26)(v32, v37, a4);
    MEMORY[0x1E0C80A78](v33);
    *(&v36 - 8) = a3;
    *(&v36 - 7) = a4;
    v34 = v46;
    *(&v36 - 6) = v45;
    *(&v36 - 5) = v34;
    *(&v36 - 4) = v47;
    *(&v36 - 3) = v31;
    *(&v36 - 2) = v40;
    sub_1BDE1CC84((void (*)(uint64_t))sub_1BDFDD3E4, v30);
    result = ((uint64_t (*)(char *, uint64_t))v44)(v41, v55);
    *v36 = v42;
  }
  return result;
}

uint64_t sub_1BDFDD29C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDFDC50C(a1, v1[2], v1[3], v1[4], v1[5], v1[6]) & 1;
}

uint64_t sub_1BDFDD2C0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <> [A : B], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDFDD300(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 v5;

  v5 = *a3;
  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for <> [A : B], a2, &v5);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDFDD340@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD **v2;

  return sub_1BDFDCFE0(a1, v2[7], v2[2], v2[3], v2[4], v2[5], v2[6], a2);
}

unint64_t sub_1BDFDD360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF52F398;
  if (!qword_1EF52F398)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF52F390);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EF52F398);
  }
  return result;
}

uint64_t sub_1BDFDD3AC()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(v0[4] + 8) + 8) + 16))(v0[8], v0[2]);
}

uint64_t sub_1BDFDD3E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[3];
  v2 = v0[6];
  v3 = v0[8];
  swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 16))(v3, v1);
}

uint64_t sub_1BDFDD458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;

  v5 = v3;
  v44 = a2;
  v45 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v7);
  v46 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_CRDT(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v39 - v17;
  v49 = a1;
  v47 = &v49;
  v48 = v5;
  result = sub_1BDDA82F8((void (*)(uint64_t))sub_1BE0C06E0, (uint64_t)&v39 - v17);
  if (v4)
    return result;
  v40 = v11;
  v41 = v16;
  v42 = v13;
  v43 = v18;
  v20 = *(_QWORD *)(v5 + 16);
  v21 = sub_1BDDA84A8(v44, v45);
  v22 = v20 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  v23 = *(_QWORD *)(v22 + *(int *)(v12 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v24 = v46;
  sub_1BDD86DEC(v23, v46, &qword_1ED6F2DF0);
  v25 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25) == 1)
  {
    sub_1BDD86E30(v24, &qword_1ED6F2DF0);
    v26 = (uint64_t)v41;
LABEL_7:
    v29 = MEMORY[0x1E0DEE9D8];
    v30 = v40;
    *v40 = MEMORY[0x1E0DEE9D8];
    v30[1] = v29;
    v30[2] = v29;
    v28 = v30;
    sub_1BE1B20E4();
    goto LABEL_8;
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v26 = (uint64_t)v41;
  if (EnumCaseMultiPayload != 3)
  {
    sub_1BDD9C3E0(v24, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_7;
  }
  v28 = v40;
  sub_1BDDA2E8C(v24, (uint64_t)v40, type metadata accessor for Proto_Struct);
LABEL_8:
  v31 = v42;
  v32 = (_QWORD *)*v28;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v32 = sub_1BDDAEBFC(0, v32[2] + 1, 1, v32);
  v34 = v32[2];
  v33 = v32[3];
  if (v34 >= v33 >> 1)
    v32 = sub_1BDDAEBFC((_QWORD *)(v33 > 1), v34 + 1, 1, v32);
  v32[2] = v34 + 1;
  v32[v34 + 4] = v21;
  *v28 = v32;
  v35 = (uint64_t)v43;
  sub_1BDDA7DD4((uint64_t)v43, v26);
  v36 = v28[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v36 = sub_1BDDA82E4(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
  v38 = *(_QWORD *)(v36 + 16);
  v37 = *(_QWORD *)(v36 + 24);
  if (v38 >= v37 >> 1)
    v36 = sub_1BDDA82E4(v37 > 1, v38 + 1, 1, v36);
  *(_QWORD *)(v36 + 16) = v38 + 1;
  sub_1BDDA2E8C(v26, v36+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v38, type metadata accessor for Proto_CRDT);
  v28[1] = v36;
  sub_1BDDBE3B0((uint64_t)v28);
  swift_endAccess();
  return sub_1BDD9C3E0(v35, type metadata accessor for Proto_CRDT);
}

uint64_t static CRStruct_0.fieldKeys.getter()
{
  return MEMORY[0x1E0DEE9D8];
}

void sub_1BDFDD80C(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9E0];
}

uint64_t sub_1BDFDD81C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1BDFDD834(a1, *v1);
}

uint64_t sub_1BDFDD834(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F3A0);
  v24 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDFDDDB0();
  sub_1BE1B377C();
  v8 = *(_QWORD *)(a2 + 64);
  v25 = a2 + 64;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v26 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    v29 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    v27 = v20;
    v28 = v21;
    sub_1BDFDDDF4();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BE1B32B4();
    if (v2)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v26)
      goto LABEL_26;
    v17 = *(_QWORD *)(v25 + 8 * v13);
    if (!v17)
      break;
LABEL_17:
    v11 = (v17 - 1) & v17;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v26)
    goto LABEL_26;
  v17 = *(_QWORD *)(v25 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 2;
  if (v13 + 2 >= v26)
    goto LABEL_26;
  v17 = *(_QWORD *)(v25 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 3;
  if (v13 + 3 >= v26)
    goto LABEL_26;
  v17 = *(_QWORD *)(v25 + 8 * v18);
  if (v17)
    goto LABEL_16;
  v18 = v13 + 4;
  if (v13 + 4 >= v26)
  {
LABEL_26:
    v22 = v24;
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  }
  v17 = *(_QWORD *)(v25 + 8 * v18);
  if (v17)
  {
LABEL_16:
    v13 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v26)
      goto LABEL_26;
    v17 = *(_QWORD *)(v25 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t CRStruct_0.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F3A0);
  v27 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDFDDDB0();
  sub_1BE1B377C();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 24))(a2);
  v11 = result;
  v12 = 0;
  v13 = *(_QWORD *)(result + 64);
  v28 = result + 64;
  v14 = 1 << *(_BYTE *)(result + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v29 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) == 0)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v17 | (v12 << 6); ; i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    v22 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * i);
    v23 = *v22;
    v24 = v22[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * i);
    v30 = v23;
    v31 = v24;
    sub_1BDFDDDF4();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BE1B32B4();
    if (v3)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v29)
      goto LABEL_24;
    v20 = *(_QWORD *)(v28 + 8 * v12);
    if (!v20)
      break;
LABEL_15:
    v16 = (v20 - 1) & v20;
  }
  v21 = v12 + 1;
  if (v12 + 1 >= v29)
    goto LABEL_24;
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
    goto LABEL_14;
  v21 = v12 + 2;
  if (v12 + 2 >= v29)
    goto LABEL_24;
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
    goto LABEL_14;
  v21 = v12 + 3;
  if (v12 + 3 >= v29)
  {
LABEL_24:
    v25 = v27;
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  }
  v20 = *(_QWORD *)(v28 + 8 * v21);
  if (v20)
  {
LABEL_14:
    v12 = v21;
    goto LABEL_15;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v29)
      goto LABEL_24;
    v20 = *(_QWORD *)(v28 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1BDFDDDB0()
{
  unint64_t result;

  result = qword_1EF52F3A8;
  if (!qword_1EF52F3A8)
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C1764, &type metadata for CRStructCodingKey);
    atomic_store(result, (unint64_t *)&qword_1EF52F3A8);
  }
  return result;
}

unint64_t sub_1BDFDDDF4()
{
  unint64_t result;

  result = qword_1EF52F3B0[0];
  if (!qword_1EF52F3B0[0])
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for AnyCRDT, &type metadata for AnyCRDT);
    atomic_store(result, qword_1EF52F3B0);
  }
  return result;
}

uint64_t CRStruct_0.actionUndoingDifference(from:)()
{
  return 1;
}

uint64_t sub_1BDFDDE44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1BDDB1F18(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t CRStruct_0.hasDelta(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 24);
  v6 = v5(a2, v4);
  v7 = v5(a2, v4);
  v8 = sub_1BDDB1F18(v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BDFDDF1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1BE0A03A8(v4, a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t CRStruct_0.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  v8 = *(_QWORD *)(a3 + 8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(a2, v8);
  swift_bridgeObjectRetain();
  v10 = sub_1BE0A03A8(v9, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, a2, v8);
}

uint64_t CRStruct_0.observableDifference(from:with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t sub_1BDFDE08C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1BDDB1100(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_0.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 24))(a2);
  sub_1BDDB1100(a1, v4);
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall CRStruct_0.needToFinalizeTimestamps()()
{
  return 0;
}

uint64_t sub_1BDFDE114()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  sub_1BDDC8334(v0);
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_0.merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, _QWORD);
  _BYTE v8[32];

  v4 = *(_QWORD *)(a3 + 8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(a2, v4);
  v6 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v4 + 40))(v8, a2, v4);
  sub_1BDDC8334(v5);
  swift_bridgeObjectRelease();
  v6(v8, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 64))(a2, v4);
}

uint64_t sub_1BDFDE1E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1BE0A007C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1BDFDE20C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v21);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Proto_CRDT(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v14, (uint64_t)v13, &qword_1ED6F3728);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7);
  sub_1BDD86E30((uint64_t)v13, &qword_1ED6F3728);
  if ((_DWORD)v14 != 1)
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    swift_retain();
    sub_1BDDA0528((uint64_t)v10);
    v17 = *(_QWORD *)&v10[*(int *)(v7 + 20)]
        + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v17, (uint64_t)v4, &qword_1ED6F2DF0);
    v18 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v4, 1, v18) == 1)
    {
      sub_1BDD86E30((uint64_t)v4, &qword_1ED6F2DF0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        sub_1BDDA2E8C((uint64_t)v4, (uint64_t)v6, type metadata accessor for Proto_Struct);
LABEL_9:
        a1 = sub_1BE192324((uint64_t)v6, a1);
        sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_CRDT);
        swift_setDeallocating();
        swift_release();
        return a1;
      }
      sub_1BDD9C3E0((uint64_t)v4, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    v19 = MEMORY[0x1E0DEE9D8];
    *v6 = MEMORY[0x1E0DEE9D8];
    v6[1] = v19;
    v6[2] = v19;
    sub_1BE1B20E4();
    goto LABEL_9;
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v15 = 0xD000000000000014;
  *(_QWORD *)(v15 + 8) = 0x80000001BE1CD0F0;
  *(_BYTE *)(v15 + 16) = 0;
  swift_willThrow();
  swift_release();
  return a1;
}

uint64_t CRStruct_0.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a3;
  v22 = a4;
  v6 = type metadata accessor for Proto_CRDT(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v15, &qword_1ED6F3728);
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6);
  sub_1BDD86E30((uint64_t)v15, &qword_1ED6F3728);
  if ((_DWORD)v6 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v17 = 0xD000000000000014;
    *(_QWORD *)(v17 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v17 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    swift_retain();
    sub_1BDDA0528((uint64_t)v10);
    v20 = v24;
    sub_1BDFDEB70((uint64_t)v10, a1, a2, v23, (uint64_t)v12);
    result = swift_release();
    if (!v20)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v22, v12, a2);
  }
  return result;
}

uint64_t sub_1BDFDE758(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDFDE770(a1, *v1);
}

uint64_t sub_1BDFDE770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1BDDA8D6C();
  if (!v2)
  {
    v9 = result;
    type metadata accessor for CREncoder.CRDTKeyedContainer();
    inited = swift_initStackObject();
    v11 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(inited + 16) = v9;
    *(_QWORD *)(inited + 24) = a1;
    *v7 = v11;
    v7[1] = v11;
    v7[2] = v11;
    swift_retain();
    swift_retain();
    sub_1BE1B20E4();
    swift_beginAccess();
    sub_1BDDBE3B0((uint64_t)v7);
    sub_1BDFDF34C(inited, a2);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t CRStruct_0.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_0.encode(to:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(v6 + 56))(a2, v6);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(a2, v6);
  v8 = result;
  v9 = 0;
  v10 = result + 64;
  v11 = 1 << *(_BYTE *)(result + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(result + 64);
  v23 = (unint64_t)(v11 + 63) >> 6;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * i);
    v20 = *v19;
    v21 = v19[1];
    swift_bridgeObjectRetain();
    v22 = swift_retain();
    sub_1BDFDD458(v22, v20, v21);
    swift_release();
    if (v4)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v23)
      return swift_release();
    v17 = *(_QWORD *)(v10 + 8 * v9);
    if (!v17)
      break;
LABEL_15:
    v13 = (v17 - 1) & v17;
  }
  v18 = v9 + 1;
  if (v9 + 1 >= v23)
    return swift_release();
  v17 = *(_QWORD *)(v10 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v9 + 2;
  if (v9 + 2 >= v23)
    return swift_release();
  v17 = *(_QWORD *)(v10 + 8 * v18);
  if (v17)
    goto LABEL_14;
  v18 = v9 + 3;
  if (v9 + 3 >= v23)
    return swift_release();
  v17 = *(_QWORD *)(v10 + 8 * v18);
  if (v17)
  {
LABEL_14:
    v9 = v18;
    goto LABEL_15;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v23)
      return swift_release();
    v17 = *(_QWORD *)(v10 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1BDFDE8BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_bridgeObjectRetain();
  sub_1BE198F48(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_0.minEncodingVersion.getter@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 24))();
  sub_1BE198F48(v3, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDFDE928()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BDFDE954@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_1BDFDE95C()
{
  return 0;
}

uint64_t sub_1BDFDE968@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1BE1B32E4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BDFDE9AC()
{
  sub_1BDFDDDB0();
  return sub_1BE1B3794();
}

uint64_t sub_1BDFDE9D4()
{
  sub_1BDFDDDB0();
  return sub_1BE1B37A0();
}

void CRStruct_Base.init(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);

}

Swift::Void __swiftcall CRStruct_Base.merge(additionalFields:)(Swift::OpaquePointer additionalFields)
{
  uint64_t v1;
  void (*v3)(_BYTE *, _QWORD);
  _BYTE v4[32];

  v3 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(v1 + 40))(v4);
  sub_1BDDC8334((uint64_t)additionalFields._rawValue);
  v3(v4, 0);
}

Swift::Bool __swiftcall CRStruct_Base.additionalFieldsHasDelta(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)())(v1 + 24))();
  LOBYTE(from._rawValue) = sub_1BDDB1F18((uint64_t)from._rawValue, v3);
  swift_bridgeObjectRelease();
  return (uint64_t)from._rawValue & 1;
}

uint64_t CRStruct_Base.copyAdditionalFields(renamingReferences:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  swift_bridgeObjectRetain();
  v5 = sub_1BE0A03A8(v4, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t CRStruct_Base.additionalFieldsMinEncodingVersion.getter@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(a1 + 24))();
  sub_1BE198F48(v3, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDFDEB70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v11, &qword_1ED6F2DF0);
  v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v11, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v11, &qword_1ED6F2DF0);
LABEL_6:
    v17 = MEMORY[0x1E0DEE9D8];
    *v14 = MEMORY[0x1E0DEE9D8];
    v14[1] = v17;
    v14[2] = v17;
    sub_1BE1B20E4();
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_6;
  }
  sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v14, type metadata accessor for Proto_Struct);
LABEL_7:
  sub_1BDFDED48((uint64_t)v14, a2, a3, v20, a5);
  return sub_1BDD9C3E0(a1, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDFDED48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, char *, uint64_t);
  uint64_t (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char isUniquelyReferenced_nonNull_native;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD *, _QWORD);
  uint64_t *v53;
  uint64_t *v54;
  char v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[4];
  uint64_t v80;

  v76 = a2;
  v9 = type metadata accessor for Proto_CRDT(0);
  v75 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v74 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a4 + 8);
  (*(void (**)(uint64_t, uint64_t))(v15 + 48))(a3, v15);
  v65 = v12;
  v16 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v67 = a5;
  v16(a5, v14, a3);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 16);
  v68 = a3;
  v66 = v15;
  v18 = (_QWORD *)v17(a3, v15);
  v77 = a1;
  v19 = *(_QWORD *)a1;
  v72 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v72)
  {
    swift_bridgeObjectRetain();
LABEL_46:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v73)
    {
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v68);
      swift_bridgeObjectRelease();
      return sub_1BDD9C3E0(v77, type metadata accessor for Proto_Struct);
    }
    else
    {
      sub_1BDD9C3E0(v77, type metadata accessor for Proto_Struct);
      return swift_bridgeObjectRelease();
    }
  }
  v71 = v19 + 32;
  swift_bridgeObjectRetain();
  v20 = 0;
  v64 = v18 + 9;
  v21 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v69 = v19;
  v70 = v18;
  while (1)
  {
    if (v20 >= *(_QWORD *)(v19 + 16))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v23 = *(_QWORD *)(v77 + 8);
    if (v20 >= *(_QWORD *)(v23 + 16))
      goto LABEL_53;
    v24 = *(_QWORD *)(v71 + 8 * v20);
    v25 = v74;
    sub_1BDDA7DD4(v23+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v20, v74);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v26 = v76;
    swift_retain();
    v27 = sub_1BDDA1B44(v25, v26);
    swift_release();
    v28 = *(_QWORD *)(v27 + 32);
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
      v30 = v24 >= v29;
    else
      v30 = 1;
    if (v30)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_OWORD *)v61 = xmmword_1BE1B63E0;
      *(_BYTE *)(v61 + 16) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v68);
      return sub_1BDD9C3E0(v77, type metadata accessor for Proto_Struct);
    }
    v31 = v28 + 16 * v24;
    v32 = *(_QWORD *)(v31 + 32);
    v33 = *(_QWORD *)(v31 + 40);
    v34 = v18[2];
    if (!v34)
      goto LABEL_28;
    v35 = v18[4] == v32 && v18[5] == v33;
    if (!v35 && (sub_1BE1B34AC() & 1) == 0)
    {
      if (v34 == 1)
        goto LABEL_28;
      v56 = v18[6] == v32 && v18[7] == v33;
      if (!v56 && (sub_1BE1B34AC() & 1) == 0)
        break;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v79[0] = v21;
    v38 = sub_1BDDB271C(v32, v33);
    v39 = v21[2];
    v40 = (v37 & 1) == 0;
    v41 = v39 + v40;
    if (__OFADD__(v39, v40))
      goto LABEL_54;
    v42 = v37;
    if (v21[3] >= v41)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1BDE64994();
    }
    else
    {
      sub_1BDDB2888(v41, isUniquelyReferenced_nonNull_native);
      v43 = sub_1BDDB271C(v32, v33);
      if ((v42 & 1) != (v44 & 1))
        goto LABEL_57;
      v38 = v43;
    }
    v18 = v70;
    v21 = (_QWORD *)v79[0];
    if ((v42 & 1) != 0)
    {
      v22 = *(_QWORD *)(v79[0] + 56);
      swift_release();
      *(_QWORD *)(v22 + 8 * v38) = v27;
    }
    else
    {
      *(_QWORD *)(v79[0] + 8 * (v38 >> 6) + 64) |= 1 << v38;
      v45 = (uint64_t *)(v21[6] + 16 * v38);
      *v45 = v32;
      v45[1] = v33;
      *(_QWORD *)(v21[7] + 8 * v38) = v27;
      v46 = v21[2];
      v47 = __OFADD__(v46, 1);
      v48 = v46 + 1;
      if (v47)
        goto LABEL_55;
      v21[2] = v48;
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    ++v20;
    v19 = v69;
    if (v20 == v72)
      goto LABEL_46;
  }
  if (v34 == 2)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v49 = swift_retain();
    v50 = v73;
    AnyCRDT.init(from:)(v49, &v80);
    v73 = v50;
    if (v50)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v68);
      return sub_1BDD9C3E0(v77, type metadata accessor for Proto_Struct);
    }
    v51 = v80;
    v52 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t))(v66 + 40))(v79, v68);
    v54 = v53;
    v55 = swift_isUniquelyReferenced_nonNull_native();
    v78 = *v54;
    *v54 = 0x8000000000000000;
    sub_1BE1542E0(v51, v32, v33, v55);
    *v54 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52(v79, 0);
    swift_release();
    v18 = v70;
    goto LABEL_5;
  }
  v57 = v64;
  v58 = 2;
  while (1)
  {
    v59 = v58 + 1;
    if (__OFADD__(v58, 1))
      break;
    v60 = *(v57 - 1) == v32 && *v57 == v33;
    if (v60 || (sub_1BE1B34AC() & 1) != 0)
      goto LABEL_18;
    v57 += 2;
    ++v58;
    if (v59 == v34)
      goto LABEL_28;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_0.decode(fields:)(Swift::OpaquePointer fields)
{
  nullsub_1();
}

uint64_t sub_1BDFDF34C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v5 = a2 + 64;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    swift_bridgeObjectRetain();
    v20 = swift_retain();
    sub_1BDFDD458(v20, v18, v19);
    swift_release();
    if (v3)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v9)
      return swift_release();
    v15 = *(_QWORD *)(v5 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v8 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v9)
    return swift_release();
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v9)
    return swift_release();
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v9)
    return swift_release();
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v9)
    return swift_release();
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v9)
      return swift_release();
    v15 = *(_QWORD *)(v5 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_3.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  _QWORD v35[2];
  void *rawValue;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD v47[10];
  uint64_t v48;

  v3 = v1;
  v5 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v40 = (char *)v35 - v6;
  v41 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v41);
  v42 = (char *)v35 - v7;
  v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v8);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 64))(v47, v3, v5);
  v9 = v47[1];
  v10 = (void *)v47[5];
  v45 = v47[7];
  v46 = (void *)v47[8];
  if (!*((_QWORD *)fields._rawValue + 2))
    goto LABEL_19;
  v43 = v47[2];
  v44 = v47[4];
  v11 = v47[0];
  v38 = (void (*)(uint64_t, uint64_t, uint64_t))v47[3];
  v12 = v47[6];
  swift_bridgeObjectRetain();
  v13 = sub_1BDDB271C(v11, v9);
  v37 = v12;
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v18 = v44;
    if (*((_QWORD *)fields._rawValue + 2))
      goto LABEL_7;
LABEL_19:
    swift_release();
    goto LABEL_20;
  }
  rawValue = v10;
  v15 = *(_QWORD *)(*((_QWORD *)fields._rawValue + 7) + 8 * v13);
  swift_retain();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v35[0] = *(_QWORD *)(v16 + 8);
  swift_retain();
  v35[1] = v9;
  swift_retain();
  v17 = v48;
  ((void (*)(uint64_t, uint64_t, uint64_t))v35[0])(v15, v8, v16);
  v48 = v17;
  if (v17)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_18:
    swift_release();
    swift_release();
    swift_release();
    return;
  }
  swift_setAtWritableKeyPath();
  swift_release();
  swift_release();
  v10 = rawValue;
  v18 = v44;
  if (!*((_QWORD *)fields._rawValue + 2))
    goto LABEL_19;
LABEL_7:
  swift_bridgeObjectRetain();
  v19 = sub_1BDDB271C((uint64_t)v38, v18);
  if ((v20 & 1) != 0)
  {
    v21 = *((_QWORD *)fields._rawValue + 7);
    rawValue = fields._rawValue;
    v22 = *(_QWORD *)(v21 + 8 * v19);
    swift_retain();
    swift_bridgeObjectRelease();
    v23 = v41;
    v24 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 8);
    swift_retain();
    swift_retain();
    v25 = v48;
    v38(v22, v23, v24);
    v48 = v25;
    if (v25)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_18;
    }
    v26 = rawValue;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    v26 = fields._rawValue;
    swift_bridgeObjectRelease();
  }
  v27 = v45;
  if (!v26[2])
    goto LABEL_19;
  swift_bridgeObjectRetain();
  v28 = sub_1BDDB271C(v37, v27);
  if ((v29 & 1) != 0)
  {
    rawValue = v10;
    v30 = *(_QWORD *)(v26[7] + 8 * v28);
    swift_retain();
    swift_bridgeObjectRelease();
    v31 = AssociatedTypeWitness;
    v32 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 8);
    swift_retain();
    swift_retain();
    v34 = v48;
    v33(v30, v31, v32);
    v48 = v34;
    if (v34)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release_n();
    v46 = rawValue;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t CRStruct_3.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_3.decode(fields:), a4);
}

uint64_t CRStruct_3.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_3.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_3.encodeFields(to:));
}

uint64_t CRStruct_3.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[12];

  v37[11] = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v28 = (char *)v23 - v5;
  v31 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v30 = (char *)v23 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v23 - v8;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v37, a2, v4);
  v10 = v37[0];
  v11 = v37[1];
  v12 = v37[2];
  v27 = v37[3];
  v33 = v37[4];
  v36 = v37[5];
  v24 = v37[6];
  v13 = v37[8];
  v34 = v37[7];
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = v35;
  sub_1BDDA7E18((uint64_t)v9, v10, v11, v7, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v15)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  }
  else
  {
    v23[0] = v13;
    v23[1] = v12;
    v35 = v11;
    v17 = (uint64_t)v28;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
    swift_retain();
    v18 = (uint64_t)v30;
    swift_getAtKeyPath();
    swift_release();
    v19 = v31;
    v20 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v18, v27, v33, v19, *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    v21 = AssociatedTypeWitness;
    v22 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v17, v24, v34, v21, *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v17, v21);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_4.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  _QWORD *rawValue;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t AssociatedTypeWitness;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[13];
  uint64_t v64;

  v3 = v1;
  v5 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v48 = (char *)&v45 - v6;
  v49 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v49);
  v50 = (char *)&v45 - v7;
  v51 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v51);
  v52 = (char *)&v45 - v8;
  v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 80))(v63, v3, v5);
  v10 = v63[0];
  v11 = v63[1];
  v13 = v63[2];
  v12 = v63[3];
  v62 = v63[5];
  v14 = v63[7];
  v54 = v63[6];
  v60 = v63[4];
  v61 = v63[8];
  v53 = v63[9];
  v57 = v63[11];
  v58 = v63[10];
  swift_bridgeObjectRetain();
  v15 = *((_QWORD *)fields._rawValue + 2);
  v55 = v13;
  v56 = v11;
  v59 = v14;
  if (v15)
  {
    v46 = v12;
    sub_1BDDB271C(v10, v11);
    if ((v16 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRelease_n();
      v17 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 8);
      v19 = swift_retain();
      v20 = v64;
      v18(v19, v9, v17);
      v64 = v20;
      if (v20)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_26:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
        return;
      }
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v21 = v60;
    }
    else
    {
      swift_bridgeObjectRelease();
      v21 = v60;
    }
    v14 = v59;
    v12 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = v60;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)fields._rawValue + 2))
  {
    v22 = sub_1BDDB271C(v12, v21);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(*((_QWORD *)fields._rawValue + 7) + 8 * v22);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_bridgeObjectRelease();
      v25 = v51;
      v26 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 8);
      swift_retain();
      v28 = v64;
      v27(v24, v25, v26);
      v64 = v28;
      if (v28)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_26;
      }
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v29 = v58;
    v14 = v59;
  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = v58;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)fields._rawValue + 2) && (v30 = sub_1BDDB271C(v54, v14), (v31 & 1) != 0))
  {
    v32 = *(_QWORD *)(*((_QWORD *)fields._rawValue + 7) + 8 * v30);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v33 = v49;
    v34 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 8);
    swift_retain();
    v54 = v32;
    v36 = v64;
    v35(v32, v33, v34);
    v64 = v36;
    if (v36)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_26;
    }
    rawValue = fields._rawValue;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v29 = v58;
  }
  else
  {
    rawValue = fields._rawValue;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  if (rawValue[2] && (v38 = sub_1BDDB271C(v53, v29), (v39 & 1) != 0))
  {
    v40 = *(_QWORD *)(rawValue[7] + 8 * v38);
    swift_retain();
    swift_bridgeObjectRelease();
    v41 = AssociatedTypeWitness;
    v42 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 8);
    swift_retain();
    swift_retain();
    v44 = v64;
    v43(v40, v41, v42);
    v64 = v44;
    if (v44)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_26;
    }
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

uint64_t CRStruct_4.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_4.decode(fields:), a4);
}

uint64_t CRStruct_4.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_4.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_4.encodeFields(to:));
}

uint64_t CRStruct_4.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[12];

  v51 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v32 = (char *)&v29 - v5;
  v36 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v35 = (char *)&v29 - v6;
  v40 = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v43 = (char *)&v29 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v29 - v9;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 80))(v52, a2, v4);
  v12 = v52[0];
  v11 = v52[1];
  v13 = (char *)v52[2];
  v39 = v52[3];
  v50 = v52[4];
  v46 = v52[5];
  v34 = v52[6];
  v48 = v52[8];
  v49 = v52[7];
  v31 = v52[9];
  v14 = v52[11];
  v44 = v52[10];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  v41 = v4;
  v42 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = v47;
  sub_1BDDA7E18((uint64_t)v10, v12, v11, v8, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v16)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v10, v8);
  }
  else
  {
    v47 = v14;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
    swift_bridgeObjectRetain();
    swift_retain();
    v18 = v50;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v19 = (uint64_t)v43;
    swift_getAtKeyPath();
    swift_release();
    v20 = v40;
    v21 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v19, v39, v18, v20, *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v38 + 8))(v43, v20);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v22 = v49;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v43 = v13;
    v23 = (uint64_t)v35;
    swift_getAtKeyPath();
    swift_release();
    v45 = v11;
    v24 = v36;
    v25 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v23, v34, v22, v24, *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v23, v24);
    swift_retain();
    v26 = (uint64_t)v32;
    swift_getAtKeyPath();
    swift_release();
    v27 = AssociatedTypeWitness;
    v28 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v26, v31, v44, v27, *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v26, v27);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_5.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t AssociatedTypeWitness;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[15];
  uint64_t v82;

  v3 = v1;
  v5 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v61 = (char *)&v58 - v6;
  v62 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v62);
  v63 = (char *)&v58 - v7;
  v64 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v64);
  v65 = (char *)&v58 - v8;
  v66 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v66);
  v67 = (char *)&v58 - v9;
  v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v10);
  v11 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 96);
  v75 = v3;
  v11(v81, v3, v5);
  v12 = v81[0];
  v13 = v81[1];
  v14 = v81[2];
  v71 = v81[3];
  v15 = v81[5];
  v79 = v81[4];
  v70 = v81[6];
  v77 = v81[7];
  v78 = v81[8];
  v16 = v81[10];
  v69 = v81[9];
  v76 = v81[11];
  v68 = v81[12];
  v74 = v81[13];
  v73 = v81[14];
  swift_bridgeObjectRetain();
  rawValue = fields._rawValue;
  v18 = *((_QWORD *)fields._rawValue + 2);
  v80 = v16;
  v72 = v15;
  if (v18)
  {
    sub_1BDDB271C(v12, v13);
    if ((v19 & 1) != 0)
    {
      v59 = fields._rawValue;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRelease_n();
      v20 = v14;
      v21 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 8);
      v23 = swift_retain();
      v24 = v82;
      v22(v23, v10, v21);
      v82 = v24;
      if (v24)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_34:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
        return;
      }
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v14 = v20;
      v25 = v79;
      v16 = v80;
      rawValue = v59;
    }
    else
    {
      swift_bridgeObjectRelease();
      v25 = v79;
      v16 = v80;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = v79;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2])
  {
    v26 = sub_1BDDB271C(v71, v25);
    if ((v27 & 1) != 0)
    {
      v28 = *(_QWORD *)(rawValue[7] + 8 * v26);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_bridgeObjectRelease();
      v29 = v66;
      v30 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 8);
      swift_retain();
      v71 = v28;
      v32 = v82;
      v31(v28, v29, v30);
      v82 = v32;
      if (v32)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_34;
      }
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v33 = v77;
    v16 = v80;
  }
  else
  {
    swift_bridgeObjectRelease();
    v33 = v77;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2])
  {
    v34 = sub_1BDDB271C(v70, v33);
    if ((v35 & 1) != 0)
    {
      v36 = v13;
      v37 = *(_QWORD *)(rawValue[7] + 8 * v34);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v70 = v36;
      swift_bridgeObjectRelease();
      v38 = v64;
      v39 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 8);
      swift_retain();
      v71 = v37;
      v41 = v82;
      v40(v37, v38, v39);
      v82 = v41;
      if (v41)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_34;
      }
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v16 = v80;
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = v80;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (!rawValue[2])
  {
    v70 = v14;
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v42 = sub_1BDDB271C(v69, v16);
  if ((v43 & 1) == 0)
  {
    v70 = v14;
    goto LABEL_29;
  }
  v44 = *(_QWORD *)(rawValue[7] + 8 * v42);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v45 = v62;
  v46 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 8);
  swift_retain();
  v71 = v44;
  v48 = v82;
  v47(v44, v45, v46);
  v82 = v48;
  if (v48)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_34;
  }
  v70 = v14;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_release();
LABEL_30:
  v49 = v74;
  swift_bridgeObjectRetain();
  if (rawValue[2] && (v50 = sub_1BDDB271C(v68, v49), (v51 & 1) != 0))
  {
    v52 = *(_QWORD *)(rawValue[7] + 8 * v50);
    swift_retain();
    swift_bridgeObjectRelease();
    v53 = v52;
    v54 = AssociatedTypeWitness;
    v55 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 8);
    swift_retain();
    swift_retain();
    v57 = v82;
    v56(v53, v54, v55);
    v82 = v57;
    if (v57)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_34;
    }
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
}

uint64_t CRStruct_5.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_5.decode(fields:), a4);
}

uint64_t CRStruct_5.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_5.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_5.encodeFields(to:));
}

uint64_t CRStruct_5.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[18];

  v63[17] = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v37 = (char *)v35 - v5;
  v42 = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v43 = (char *)v35 - v6;
  v47 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v46 = (char *)v35 - v7;
  v53 = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v52 = (char *)v35 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v35 - v10;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 96))(v63, a2, v4);
  v12 = v63[1];
  v54 = v63[0];
  v13 = v63[2];
  v49 = v63[3];
  v60 = v63[4];
  v61 = v63[5];
  v45 = v63[6];
  v62 = v63[7];
  v59 = v63[8];
  v41 = v63[9];
  v58 = v63[10];
  v57 = v63[11];
  v14 = v63[13];
  v36 = v63[12];
  v15 = v63[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  v50 = v4;
  v51 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = v56;
  sub_1BDDA7E18((uint64_t)v11, v54, v12, v9, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v17)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v11, v9);
  }
  else
  {
    v19 = v48;
    v54 = v15;
    v56 = v14;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v9);
    swift_bridgeObjectRetain();
    swift_retain();
    v20 = v60;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v21 = (uint64_t)v52;
    swift_getAtKeyPath();
    swift_release();
    v22 = v53;
    v23 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v21, v49, v20, v22, *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v19 + 8))(v52, v53);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v24 = v62;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v55 = v12;
    v25 = (uint64_t)v46;
    swift_getAtKeyPath();
    swift_release();
    v35[1] = v13;
    v26 = v47;
    v27 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v25, v45, v24, v26, *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v25, v26);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v28 = v58;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v29 = (uint64_t)v43;
    swift_getAtKeyPath();
    swift_release();
    v30 = v42;
    v31 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v29, v41, v28, v30, *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v30);
    swift_retain();
    v32 = (uint64_t)v37;
    swift_getAtKeyPath();
    swift_release();
    v33 = AssociatedTypeWitness;
    v34 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v32, v36, v56, v33, *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v32, v33);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_6.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t AssociatedConformanceWitness;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t AssociatedTypeWitness;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *rawValue;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[19];
  uint64_t v131;

  v3 = v1;
  rawValue = fields._rawValue;
  v4 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v81 = (char *)&v78 - v5;
  v82 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v82);
  v83 = (char *)&v78 - v6;
  v84 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v84);
  v85 = (char *)&v78 - v7;
  v86 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v86);
  v87 = (char *)&v78 - v8;
  v89 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v89);
  v90 = (char *)&v78 - v9;
  v92 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v92);
  v93 = (char *)&v78 - v10;
  v11 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 112);
  v98 = v3;
  v99 = v4;
  v11(&v112, v3, v4);
  v12 = v114;
  v131 = v116;
  v111 = v117;
  v101 = v119;
  v102 = v113;
  v13 = v120;
  v14 = v122;
  v15 = v123;
  v16 = v125;
  v17 = v126;
  v18 = v128;
  v19 = v129;
  v96 = v115;
  v97 = v112;
  v130[0] = v112;
  v130[1] = v113;
  v130[2] = v114;
  v130[3] = v115;
  v130[4] = v116;
  v130[5] = v117;
  v94 = v121;
  v95 = v118;
  v130[6] = v118;
  v130[7] = v119;
  v130[8] = v120;
  v130[9] = v121;
  v130[10] = v122;
  v130[11] = v123;
  v91 = v124;
  v130[12] = v124;
  v130[13] = v125;
  v130[14] = v126;
  v130[15] = v127;
  v88 = v127;
  v130[16] = v128;
  v130[17] = v129;
  sub_1BE0A05D0((uint64_t)v130);
  v108 = v12;
  swift_release();
  v110 = v19;
  swift_release();
  v106 = v18;
  swift_bridgeObjectRelease();
  v107 = v17;
  swift_release();
  v100 = v16;
  swift_bridgeObjectRelease();
  v104 = v15;
  swift_release();
  v20 = v14;
  swift_bridgeObjectRelease();
  v109 = v13;
  swift_release();
  v21 = v101;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v22 = rawValue;
  if (rawValue[2] && (v23 = sub_1BDDB271C(v97, v102), (v24 & 1) != 0))
  {
    v25 = *(_QWORD *)(v22[7] + 8 * v23);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A05D0((uint64_t)v130);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v79 = v20;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v26 = v92;
    v27 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 8);
    swift_retain();
    v29 = v105;
    v28(v25, v26, v27);
    v105 = v29;
    if (v29)
      goto LABEL_29;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v22 = rawValue;
    v30 = v100;
    v21 = v101;
    v20 = v79;
  }
  else
  {
    swift_bridgeObjectRelease();
    v30 = v100;
  }
  sub_1BE0A05D0((uint64_t)v130);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v31 = v30;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v32 = v21;
  swift_bridgeObjectRelease();
  v33 = v20;
  if (v22[2] && (v34 = sub_1BDDB271C(v96, v131), (v35 & 1) != 0))
  {
    v36 = *(_QWORD *)(v22[7] + 8 * v34);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A05D0((uint64_t)v130);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v37 = v89;
    v38 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 8);
    swift_retain();
    v40 = v105;
    v39(v36, v37, v38);
    v105 = v40;
    if (v40)
      goto LABEL_29;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v22 = rawValue;
    v76 = v20;
    v42 = v100;
    v41 = v101;
    v33 = v76;
  }
  else
  {
    swift_bridgeObjectRelease();
    v41 = v32;
    v42 = v31;
  }
  sub_1BE0A05D0((uint64_t)v130);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (v22[2] && (v43 = sub_1BDDB271C(v95, v41), (v44 & 1) != 0))
  {
    v45 = *(_QWORD *)(v22[7] + 8 * v43);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A05D0((uint64_t)v130);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v46 = v86;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v48 = v33;
    v49 = *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8);
    v50 = v42;
    v51 = v48;
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 8);
    swift_retain();
    v53 = v105;
    v52(v45, v46, v49);
    v105 = v53;
    if (v53)
      goto LABEL_29;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v22 = rawValue;
    v77 = v50;
    v33 = v51;
    v42 = v77;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A05D0((uint64_t)v130);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (v22[2] && (v54 = sub_1BDDB271C(v94, v33), (v55 & 1) != 0))
  {
    v56 = *(_QWORD *)(v22[7] + 8 * v54);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A05D0((uint64_t)v130);
    swift_bridgeObjectRelease();
    v79 = v33;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v57 = v84;
    v58 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 8);
    swift_retain();
    v60 = v105;
    v59(v56, v57, v58);
    v105 = v60;
    if (v60)
      goto LABEL_29;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v22 = rawValue;
    v33 = v79;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A05D0((uint64_t)v130);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (v22[2] && (v61 = sub_1BDDB271C(v91, v42), (v62 & 1) != 0))
  {
    v63 = *(_QWORD *)(v22[7] + 8 * v61);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A05D0((uint64_t)v130);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v79 = v33;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v64 = v82;
    v65 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 8);
    swift_retain();
    v67 = v105;
    v66(v63, v64, v65);
    v105 = v67;
    if (v67)
      goto LABEL_29;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v22 = rawValue;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A05D0((uint64_t)v130);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v22[2] || (v68 = sub_1BDDB271C(v88, v106), (v69 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v70 = *(_QWORD *)(v22[7] + 8 * v68);
  swift_retain();
  swift_bridgeObjectRelease();
  sub_1BE0A05D0((uint64_t)v130);
  swift_bridgeObjectRelease();
  swift_release();
  v71 = v70;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v72 = AssociatedTypeWitness;
  v73 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 8);
  swift_retain();
  v75 = v105;
  v74(v71, v72, v73);
  v105 = v75;
  if (v75)
  {
LABEL_29:
    swift_release();
    swift_release();
LABEL_33:
    sub_1BE0A0698((uint64_t)v130);
    return;
  }
  swift_setAtWritableKeyPath();
  sub_1BE0A0698((uint64_t)v130);
  swift_release();
  swift_release();
}

uint64_t CRStruct_6.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_6.decode(fields:), a4);
}

uint64_t CRStruct_6.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_6.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_6.encodeFields(to:));
}

uint64_t CRStruct_6.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[19];

  v79 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v52 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)&v48 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  v56 = v8;
  MEMORY[0x1E0C80A78](v7);
  v54 = (char *)&v48 - v9;
  v60 = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v59 = (char *)&v48 - v10;
  v64 = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v62 = (char *)&v48 - v11;
  v73 = swift_getAssociatedTypeWitness();
  v65 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v72 = (char *)&v48 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(v13 - 8);
  v75 = v13;
  MEMORY[0x1E0C80A78](v13);
  v76 = (char *)&v48 - v14;
  v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 112);
  v86 = a2;
  v15(&v87, a2, v4);
  v77 = v87;
  v80 = v89;
  v81 = v91;
  v83 = v94;
  v84 = v92;
  v82 = v95;
  v17 = v97;
  v16 = v98;
  v18 = v100;
  v19 = v101;
  v20 = v103;
  v21 = v104;
  v105[0] = v87;
  v105[1] = v88;
  v85 = v88;
  v105[2] = v89;
  v105[3] = v90;
  v66 = v90;
  v105[4] = v91;
  v105[5] = v92;
  v63 = v93;
  v105[6] = v93;
  v105[7] = v94;
  v105[8] = v95;
  v105[9] = v96;
  v58 = v96;
  v105[10] = v97;
  v105[11] = v98;
  v53 = v99;
  v105[12] = v99;
  v105[13] = v100;
  v105[14] = v101;
  v105[15] = v102;
  v49 = v102;
  v105[16] = v103;
  v105[17] = v104;
  sub_1BE0A05D0((uint64_t)v105);
  swift_bridgeObjectRelease();
  v70 = v21;
  swift_release();
  v71 = v20;
  v22 = v75;
  swift_bridgeObjectRelease();
  v67 = v19;
  swift_release();
  v68 = v18;
  swift_bridgeObjectRelease();
  v69 = v16;
  swift_release();
  v23 = v17;
  swift_bridgeObjectRelease();
  v24 = (uint64_t)v76;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v26 = v78;
  sub_1BDDA7E18(v24, v77, v85, v22, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v26)
  {
    sub_1BE0A0698((uint64_t)v105);
    v27 = v74;
  }
  else
  {
    v29 = v65;
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v24, v22);
    sub_1BE0A05D0((uint64_t)v105);
    v30 = v81;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v31 = (uint64_t)v72;
    swift_getAtKeyPath();
    swift_release();
    v32 = v73;
    v33 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v31, v66, v30, v32, *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v29 + 8))(v72, v73);
    sub_1BE0A05D0((uint64_t)v105);
    v34 = v83;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v35 = (uint64_t)v62;
    swift_getAtKeyPath();
    swift_release();
    v36 = v64;
    v37 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v35, v63, v34, v36, *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v35, v36);
    sub_1BE0A05D0((uint64_t)v105);
    v38 = v23;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v39 = (uint64_t)v59;
    swift_getAtKeyPath();
    swift_release();
    v40 = v60;
    v41 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v39, v58, v38, v40, *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v39, v40);
    sub_1BE0A05D0((uint64_t)v105);
    v42 = v68;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v43 = (uint64_t)v54;
    swift_getAtKeyPath();
    swift_release();
    v44 = v55;
    v45 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v43, v53, v42, v44, *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v43, v44);
    sub_1BE0A05D0((uint64_t)v105);
    v46 = v71;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v24 = (uint64_t)v50;
    swift_getAtKeyPath();
    swift_release();
    v22 = v52;
    v47 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v24, v49, v46, v22, *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8));
    sub_1BE0A0698((uint64_t)v105);
    v27 = v51;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v24, v22);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_7.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  _QWORD v75[2];
  uint64_t AssociatedTypeWitness;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[22];
  _QWORD *rawValue;

  v3 = v1;
  rawValue = fields._rawValue;
  v4 = *(_QWORD *)(v2 + 8);
  v75[0] = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v75[0]);
  v75[1] = (char *)v75 - v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v77 = (char *)v75 - v6;
  v78 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v78);
  v79 = (char *)v75 - v7;
  v80 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v80);
  v81 = (char *)v75 - v8;
  v83 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v83);
  v84 = (char *)v75 - v9;
  v86 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v86);
  v87 = (char *)v75 - v10;
  v89 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v89);
  v90 = (char *)v75 - v11;
  v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 128);
  v95 = v4;
  v96 = v3;
  v12(&v112, v3, v4);
  v13 = v114;
  v99 = v116;
  v97 = v119;
  v98 = v113;
  v102 = v120;
  v103 = v117;
  v14 = v123;
  v101 = v122;
  v15 = v125;
  v16 = v126;
  v18 = v128;
  v17 = v129;
  v19 = v131;
  v20 = v132;
  v93 = v115;
  v94 = v112;
  v133[0] = v112;
  v133[1] = v113;
  v133[2] = v114;
  v133[3] = v115;
  v133[4] = v116;
  v133[5] = v117;
  v91 = v121;
  v92 = v118;
  v133[6] = v118;
  v133[7] = v119;
  v133[8] = v120;
  v133[9] = v121;
  v133[10] = v122;
  v133[11] = v123;
  v88 = v124;
  v133[12] = v124;
  v133[13] = v125;
  v133[14] = v126;
  v133[15] = v127;
  v85 = v127;
  v133[16] = v128;
  v133[17] = v129;
  v82 = v130;
  v133[18] = v130;
  v133[19] = v131;
  v133[20] = v132;
  sub_1BE0A075C((uint64_t)v133);
  v111 = v13;
  swift_release();
  v107 = v20;
  swift_release();
  v109 = v19;
  swift_bridgeObjectRelease();
  v110 = v17;
  swift_release();
  v108 = v18;
  swift_bridgeObjectRelease();
  v106 = v16;
  swift_release();
  v105 = v15;
  swift_bridgeObjectRelease();
  v100 = v14;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v21 = v97;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (v22 = sub_1BDDB271C(v94, v98), (v23 & 1) != 0))
  {
    v24 = *(_QWORD *)(rawValue[7] + 8 * v22);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A075C((uint64_t)v133);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v25 = v21;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v26 = v89;
    v27 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 8);
    swift_retain();
    v29 = v104;
    v28(v24, v26, v27);
    v104 = v29;
    if (v29)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v21 = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v30 = v101;
  sub_1BE0A075C((uint64_t)v133);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v31 = v21;
  swift_bridgeObjectRelease();
  if (rawValue[2] && (sub_1BDDB271C(v93, v99), (v32 & 1) != 0))
  {
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A075C((uint64_t)v133);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v33 = v86;
    v34 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 8);
    v36 = swift_retain();
    v37 = v104;
    v35(v36, v33, v34);
    v104 = v37;
    if (v37)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v31 = v21;
    v38 = v101;
  }
  else
  {
    swift_bridgeObjectRelease();
    v38 = v30;
  }
  sub_1BE0A075C((uint64_t)v133);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (v39 = sub_1BDDB271C(v92, v31), (v40 & 1) != 0))
  {
    v41 = *(_QWORD *)(rawValue[7] + 8 * v39);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A075C((uint64_t)v133);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v42 = v83;
    v43 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 8);
    swift_retain();
    v45 = v104;
    v44(v41, v42, v43);
    v104 = v45;
    if (v45)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v38 = v101;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A075C((uint64_t)v133);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (v46 = sub_1BDDB271C(v91, v38), (v47 & 1) != 0))
  {
    v48 = *(_QWORD *)(rawValue[7] + 8 * v46);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A075C((uint64_t)v133);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v49 = v80;
    v50 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 8);
    swift_retain();
    v52 = v104;
    v51(v48, v49, v50);
    v104 = v52;
    if (v52)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A075C((uint64_t)v133);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (v53 = sub_1BDDB271C(v88, v105), (v54 & 1) != 0))
  {
    v94 = *(_QWORD *)(rawValue[7] + 8 * v53);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A075C((uint64_t)v133);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v55 = v78;
    v56 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 8);
    v58 = swift_retain();
    v59 = v104;
    v57(v58, v55, v56);
    v104 = v59;
    if (v59)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A075C((uint64_t)v133);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (v60 = sub_1BDDB271C(v85, v108), (v61 & 1) != 0))
  {
    v62 = *(_QWORD *)(rawValue[7] + 8 * v60);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A075C((uint64_t)v133);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v63 = AssociatedTypeWitness;
    v64 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 8);
    swift_retain();
    v66 = v104;
    v65(v62, v63, v64);
    v104 = v66;
    if (v66)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A075C((uint64_t)v133);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (!rawValue[2] || (v67 = sub_1BDDB271C(v82, v109), (v68 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  v69 = *(_QWORD *)(rawValue[7] + 8 * v67);
  swift_retain();
  swift_bridgeObjectRelease();
  sub_1BE0A075C((uint64_t)v133);
  v70 = v69;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v71 = v75[0];
  v72 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 8);
  swift_retain();
  v74 = v104;
  v73(v70, v71, v72);
  v104 = v74;
  if (v74)
  {
LABEL_44:
    swift_release();
    swift_release();
LABEL_45:
    sub_1BE0A0840((uint64_t)v133);
    return;
  }
  swift_setAtWritableKeyPath();
  sub_1BE0A0840((uint64_t)v133);
  swift_release();
  swift_release();
}

uint64_t CRStruct_7.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_7.decode(fields:), a4);
}

uint64_t CRStruct_7.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_7.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_7.encodeFields(to:));
}

uint64_t CRStruct_7.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t AssociatedTypeWitness;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[24];

  v89 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v54 = (char *)&v52 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  v59 = v7;
  MEMORY[0x1E0C80A78](v6);
  v57 = (char *)&v52 - v8;
  v63 = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v62 = (char *)&v52 - v9;
  v67 = swift_getAssociatedTypeWitness();
  v64 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v66 = (char *)&v52 - v10;
  v71 = swift_getAssociatedTypeWitness();
  v68 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v69 = (char *)&v52 - v11;
  v74 = swift_getAssociatedTypeWitness();
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74);
  v82 = (char *)&v52 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v83 = *(_QWORD *)(v13 - 8);
  v84 = v13;
  MEMORY[0x1E0C80A78](v13);
  v85 = (char *)&v52 - v14;
  v90 = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 128))(&v96, a2, v4);
  v15 = v97;
  v86 = v96;
  v88 = v98;
  v91 = v100;
  v117[23] = v101;
  v94 = v104;
  v95 = v103;
  v92 = v107;
  v93 = v106;
  v16 = v109;
  v17 = v110;
  v18 = v112;
  v19 = v113;
  v20 = v115;
  v21 = v116;
  v117[0] = v96;
  v117[1] = v97;
  v117[2] = v98;
  v117[3] = v99;
  v73 = v99;
  v117[4] = v100;
  v117[5] = v101;
  v70 = v102;
  v117[6] = v102;
  v117[7] = v103;
  v117[8] = v104;
  v117[9] = v105;
  v65 = v105;
  v117[10] = v106;
  v117[11] = v107;
  v61 = v108;
  v117[12] = v108;
  v117[13] = v109;
  v117[14] = v110;
  v117[15] = v111;
  v56 = v111;
  v117[16] = v112;
  v117[17] = v113;
  v53 = v114;
  v117[18] = v114;
  v117[19] = v115;
  v117[20] = v116;
  sub_1BE0A075C((uint64_t)v117);
  swift_bridgeObjectRelease();
  v80 = v21;
  v22 = v84;
  swift_release();
  v75 = v20;
  swift_bridgeObjectRelease();
  v76 = v19;
  swift_release();
  v77 = v18;
  v23 = (uint64_t)v85;
  swift_bridgeObjectRelease();
  v78 = v17;
  swift_release();
  v79 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  v81 = a2;
  v24 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v25 = v86;
  v26 = v87;
  v86 = v15;
  sub_1BDDA7E18(v23, v25, v15, v22, v24);
  if (v26)
  {
    sub_1BE0A0840((uint64_t)v117);
    v27 = v83;
  }
  else
  {
    v29 = v72;
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v23, v22);
    sub_1BE0A075C((uint64_t)v117);
    v30 = v91;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v31 = (uint64_t)v82;
    swift_getAtKeyPath();
    swift_release();
    v32 = v74;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v31, v73, v30, v32, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
    (*(void (**)(char *, uint64_t))(v29 + 8))(v82, v32);
    sub_1BE0A075C((uint64_t)v117);
    v34 = v95;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v35 = (uint64_t)v69;
    swift_getAtKeyPath();
    swift_release();
    v36 = v71;
    v37 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v35, v70, v34, v36, *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v35, v36);
    sub_1BE0A075C((uint64_t)v117);
    v38 = v93;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v39 = (uint64_t)v66;
    swift_getAtKeyPath();
    swift_release();
    v40 = v67;
    v41 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v39, v65, v38, v40, *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v39, v40);
    sub_1BE0A075C((uint64_t)v117);
    v42 = v79;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v43 = (uint64_t)v62;
    swift_getAtKeyPath();
    swift_release();
    v44 = v63;
    v45 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v43, v61, v42, v44, *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v43, v44);
    sub_1BE0A075C((uint64_t)v117);
    v46 = v77;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v47 = (uint64_t)v57;
    swift_getAtKeyPath();
    swift_release();
    v48 = v58;
    v49 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v47, v56, v46, v48, *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v47, v48);
    sub_1BE0A075C((uint64_t)v117);
    v50 = v75;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v23 = (uint64_t)v54;
    swift_getAtKeyPath();
    swift_release();
    v22 = AssociatedTypeWitness;
    v51 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v23, v53, v50, v22, *(_QWORD *)(*(_QWORD *)(v51 + 16) + 8));
    sub_1BE0A0840((uint64_t)v117);
    v27 = v52;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v23, v22);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_8.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t AssociatedTypeWitness;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *rawValue;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[27];

  v3 = v1;
  rawValue = fields._rawValue;
  v4 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v91 = (char *)&v89 - v5;
  v92 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v92);
  v93 = (char *)&v89 - v6;
  v94 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v94);
  v95 = (char *)&v89 - v7;
  v96 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v96);
  v97 = (char *)&v89 - v8;
  v99 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v99);
  v100 = (char *)&v89 - v9;
  v102 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v102);
  v103 = (char *)&v89 - v10;
  v105 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v105);
  v106 = (char *)&v89 - v11;
  v108 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v108);
  v109 = (char *)&v89 - v12;
  v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 144);
  v113 = v3;
  v114 = v4;
  v13(&v133, v3, v4);
  v14 = v135;
  v123 = v137;
  v157[26] = v138;
  v126 = v141;
  v119 = v143;
  v120 = v140;
  v131 = v146;
  v132 = v144;
  v15 = v147;
  v17 = v149;
  v16 = v150;
  v18 = v152;
  v19 = v153;
  v20 = v155;
  v21 = v156;
  v115 = v133;
  v157[0] = v133;
  v117 = v134;
  v157[1] = v134;
  v157[2] = v135;
  v112 = v136;
  v157[3] = v136;
  v157[4] = v137;
  v157[5] = v138;
  v110 = v142;
  v111 = v139;
  v157[6] = v139;
  v157[7] = v140;
  v157[8] = v141;
  v157[9] = v142;
  v157[10] = v143;
  v157[11] = v144;
  v107 = v145;
  v157[12] = v145;
  v157[13] = v146;
  v157[14] = v147;
  v104 = v148;
  v157[15] = v148;
  v157[16] = v149;
  v157[17] = v150;
  v101 = v151;
  v157[18] = v151;
  v157[19] = v152;
  v157[20] = v153;
  v98 = v154;
  v157[21] = v154;
  v157[22] = v155;
  v157[23] = v156;
  sub_1BE0A0920((uint64_t)v157);
  v125 = v14;
  swift_release();
  v129 = v21;
  swift_release();
  v127 = v20;
  swift_bridgeObjectRelease();
  v128 = v19;
  swift_release();
  v122 = v18;
  swift_bridgeObjectRelease();
  v130 = v16;
  swift_release();
  v22 = v17;
  v23 = rawValue;
  swift_bridgeObjectRelease();
  v118 = v15;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v24 = v23[2];
  v116 = v22;
  if (v24 && (v25 = sub_1BDDB271C(v115, v117), (v26 & 1) != 0))
  {
    v115 = *(_QWORD *)(v23[7] + 8 * v25);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0920((uint64_t)v157);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v27 = v108;
    v28 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 8);
    v30 = swift_retain();
    v31 = v121;
    v29(v30, v27, v28);
    v121 = v31;
    if (v31)
      goto LABEL_51;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0920((uint64_t)v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v32 = rawValue;
  if (rawValue[2] && (v33 = sub_1BDDB271C(v112, v123), (v34 & 1) != 0))
  {
    v115 = *(_QWORD *)(v32[7] + 8 * v33);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0920((uint64_t)v157);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v35 = v105;
    v36 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v37 = v115;
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 8);
    swift_retain();
    v39 = v121;
    v38(v37, v35, v36);
    v121 = v39;
    if (v39)
      goto LABEL_51;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0920((uint64_t)v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v40 = rawValue;
  if (rawValue[2] && (v41 = sub_1BDDB271C(v111, v120), (v42 & 1) != 0))
  {
    v115 = *(_QWORD *)(v40[7] + 8 * v41);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0920((uint64_t)v157);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v43 = v102;
    v44 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v45 = v115;
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 8);
    swift_retain();
    v47 = v121;
    v46(v45, v43, v44);
    v121 = v47;
    if (v47)
      goto LABEL_51;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0920((uint64_t)v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v48 = rawValue;
  if (rawValue[2] && (v49 = sub_1BDDB271C(v110, v119), (v50 & 1) != 0))
  {
    v115 = *(_QWORD *)(v48[7] + 8 * v49);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0920((uint64_t)v157);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v51 = v99;
    v52 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v53 = v115;
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 8);
    swift_retain();
    v55 = v121;
    v54(v53, v51, v52);
    v121 = v55;
    if (v55)
      goto LABEL_51;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0920((uint64_t)v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v56 = rawValue;
  if (rawValue[2] && (v57 = sub_1BDDB271C(v107, v131), (v58 & 1) != 0))
  {
    v115 = *(_QWORD *)(v56[7] + 8 * v57);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0920((uint64_t)v157);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v59 = v96;
    v60 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 8);
    v62 = swift_retain();
    v63 = v121;
    v61(v62, v59, v60);
    v121 = v63;
    if (v63)
      goto LABEL_51;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0920((uint64_t)v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v64 = rawValue;
  if (!rawValue[2])
  {
    swift_bridgeObjectRelease();
LABEL_40:
    v72 = v122;
    goto LABEL_41;
  }
  v65 = sub_1BDDB271C(v104, v116);
  if ((v66 & 1) != 0)
  {
    v115 = *(_QWORD *)(v64[7] + 8 * v65);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0920((uint64_t)v157);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v67 = v94;
    v68 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v69 = v115;
    v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 8);
    swift_retain();
    v71 = v121;
    v70(v69, v67, v68);
    v121 = v71;
    if (v71)
      goto LABEL_51;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  v72 = v122;
LABEL_41:
  sub_1BE0A0920((uint64_t)v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v73 = rawValue;
  if (rawValue[2] && (v74 = sub_1BDDB271C(v101, v72), (v75 & 1) != 0))
  {
    v76 = *(_QWORD *)(v73[7] + 8 * v74);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0920((uint64_t)v157);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v77 = v92;
    v78 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 8);
    swift_retain();
    v80 = v121;
    v79(v76, v77, v78);
    v121 = v80;
    if (v80)
      goto LABEL_51;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0920((uint64_t)v157);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v81 = rawValue;
  if (!rawValue[2] || (v82 = sub_1BDDB271C(v98, v127), (v83 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  v84 = *(_QWORD *)(v81[7] + 8 * v82);
  swift_retain();
  swift_bridgeObjectRelease();
  sub_1BE0A0920((uint64_t)v157);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v85 = AssociatedTypeWitness;
  v86 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 8);
  swift_retain();
  v88 = v121;
  v87(v84, v85, v86);
  v121 = v88;
  if (v88)
  {
LABEL_51:
    swift_release();
    swift_release();
LABEL_52:
    sub_1BE0A0A20((uint64_t)v157);
    return;
  }
  swift_setAtWritableKeyPath();
  sub_1BE0A0A20((uint64_t)v157);
  swift_release();
  swift_release();
}

uint64_t CRStruct_8.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_8.decode(fields:), a4);
}

uint64_t CRStruct_8.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_8.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_8.encodeFields(to:));
}

uint64_t CRStruct_8.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t AssociatedTypeWitness;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[25];

  v100 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v60 = (char *)&v57 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v65 = v7;
  MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v57 - v8;
  v69 = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v68 = (char *)&v57 - v9;
  v73 = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v72 = (char *)&v57 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(v11 - 8);
  v77 = v11;
  MEMORY[0x1E0C80A78](v11);
  v75 = (char *)&v57 - v12;
  v81 = swift_getAssociatedTypeWitness();
  v78 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v79 = (char *)&v57 - v13;
  v84 = swift_getAssociatedTypeWitness();
  v82 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v92 = (char *)&v57 - v14;
  v94 = swift_getAssociatedTypeWitness();
  v96 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v57 - v15;
  v98 = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 144))(&v110, a2, v4);
  v95 = v110;
  v99 = v112;
  v108 = v115;
  v109 = v114;
  v106 = v118;
  v107 = v117;
  v104 = v121;
  v105 = v120;
  v102 = v124;
  v103 = v123;
  v16 = v126;
  v17 = v127;
  v18 = v129;
  v19 = v130;
  v20 = v132;
  v21 = v133;
  v134[0] = v110;
  v134[1] = v111;
  v101 = v111;
  v134[2] = v112;
  v83 = v113;
  v134[3] = v113;
  v134[4] = v114;
  v134[5] = v115;
  v80 = v116;
  v134[6] = v116;
  v134[7] = v117;
  v134[8] = v118;
  v74 = v119;
  v134[9] = v119;
  v134[10] = v120;
  v134[11] = v121;
  v71 = v122;
  v134[12] = v122;
  v134[13] = v123;
  v134[14] = v124;
  v67 = v125;
  v134[15] = v125;
  v134[16] = v126;
  v134[17] = v127;
  v62 = v128;
  v134[18] = v128;
  v134[19] = v129;
  v134[20] = v130;
  v59 = v131;
  v134[21] = v131;
  v134[22] = v132;
  v134[23] = v133;
  sub_1BE0A0920((uint64_t)v134);
  swift_bridgeObjectRelease();
  v90 = v21;
  v22 = (uint64_t)v93;
  swift_release();
  v85 = v20;
  swift_bridgeObjectRelease();
  v86 = v19;
  swift_release();
  v87 = v18;
  swift_bridgeObjectRelease();
  v88 = v17;
  v23 = v94;
  swift_release();
  v89 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  v91 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = v97;
  sub_1BDDA7E18(v22, v95, v101, v23, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v25)
  {
    sub_1BE0A0A20((uint64_t)v134);
    v26 = *(uint64_t (**)(uint64_t, uint64_t))(v96 + 8);
    v27 = v22;
  }
  else
  {
    v29 = v82;
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v22, v23);
    sub_1BE0A0920((uint64_t)v134);
    v30 = v109;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v31 = (uint64_t)v92;
    swift_getAtKeyPath();
    swift_release();
    v32 = v84;
    v33 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v31, v83, v30, v32, *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v29 + 8))(v92, v32);
    sub_1BE0A0920((uint64_t)v134);
    v34 = v107;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v35 = (uint64_t)v79;
    swift_getAtKeyPath();
    swift_release();
    v36 = v81;
    v37 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v35, v80, v34, v36, *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v35, v36);
    sub_1BE0A0920((uint64_t)v134);
    v38 = v105;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v39 = (uint64_t)v75;
    swift_getAtKeyPath();
    swift_release();
    v40 = v77;
    v41 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v39, v74, v38, v40, *(_QWORD *)(*(_QWORD *)(v41 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v39, v40);
    sub_1BE0A0920((uint64_t)v134);
    v42 = v103;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v43 = (uint64_t)v72;
    swift_getAtKeyPath();
    swift_release();
    v44 = v73;
    v45 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v43, v71, v42, v44, *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v43, v44);
    sub_1BE0A0920((uint64_t)v134);
    v46 = v89;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v47 = (uint64_t)v68;
    swift_getAtKeyPath();
    swift_release();
    v48 = v69;
    v49 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v47, v67, v46, v48, *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v47, v48);
    sub_1BE0A0920((uint64_t)v134);
    v50 = v87;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v51 = (uint64_t)v63;
    swift_getAtKeyPath();
    swift_release();
    v52 = v64;
    v53 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v51, v62, v50, v52, *(_QWORD *)(*(_QWORD *)(v53 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v51, v52);
    sub_1BE0A0920((uint64_t)v134);
    v54 = v85;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v55 = (uint64_t)v60;
    swift_getAtKeyPath();
    swift_release();
    v23 = AssociatedTypeWitness;
    v56 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v55, v59, v54, v23, *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8));
    sub_1BE0A0A20((uint64_t)v134);
    v26 = *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8);
    v27 = v55;
  }
  return v26(v27, v23);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_9.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  _QWORD v92[2];
  uint64_t AssociatedTypeWitness;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[28];
  _QWORD *rawValue;

  v3 = v1;
  rawValue = fields._rawValue;
  v4 = *(_QWORD *)(v2 + 8);
  v92[0] = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v92[0]);
  v92[1] = (char *)v92 - v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v94 = (char *)v92 - v6;
  v95 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v95);
  v96 = (char *)v92 - v7;
  v97 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v97);
  v98 = (char *)v92 - v8;
  v100 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v100);
  v101 = (char *)v92 - v9;
  v103 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v103);
  v104 = (char *)v92 - v10;
  v106 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v106);
  v107 = (char *)v92 - v11;
  v109 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v109);
  v110 = (char *)v92 - v12;
  v112 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v112);
  v113 = (char *)v92 - v13;
  v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 160);
  v118 = v3;
  v119 = v4;
  v14(&v139, v3, v4);
  v15 = v141;
  v136 = v146;
  v137 = v144;
  v125 = v147;
  v133 = v150;
  v138 = v152;
  v122 = v143;
  v123 = v153;
  v134 = v155;
  v135 = v149;
  v120 = v156;
  v16 = v158;
  v17 = v159;
  v18 = v161;
  v19 = v162;
  v20 = v164;
  v21 = v165;
  v117 = v139;
  v166[0] = v139;
  v128 = v140;
  v166[1] = v140;
  v166[2] = v141;
  v115 = v145;
  v116 = v142;
  v166[3] = v142;
  v166[4] = v143;
  v166[5] = v144;
  v166[6] = v145;
  v166[7] = v146;
  v166[8] = v147;
  v114 = v148;
  v166[9] = v148;
  v166[10] = v149;
  v166[11] = v150;
  v111 = v151;
  v166[12] = v151;
  v166[13] = v152;
  v166[14] = v153;
  v108 = v154;
  v166[15] = v154;
  v166[16] = v155;
  v166[17] = v156;
  v105 = v157;
  v166[18] = v157;
  v166[19] = v158;
  v166[20] = v159;
  v102 = v160;
  v166[21] = v160;
  v166[22] = v161;
  v166[23] = v162;
  v99 = v163;
  v166[24] = v163;
  v166[25] = v164;
  v166[26] = v165;
  sub_1BE0A0B1C((uint64_t)v166);
  v131 = v15;
  swift_release();
  v132 = v21;
  swift_release();
  v129 = v20;
  swift_bridgeObjectRelease();
  v130 = v19;
  swift_release();
  v126 = v18;
  v22 = rawValue;
  swift_bridgeObjectRelease();
  v124 = v17;
  swift_release();
  v121 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (v22[2] && (v23 = sub_1BDDB271C(v117, v128), (v24 & 1) != 0))
  {
    v25 = *(_QWORD *)(v22[7] + 8 * v23);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0B1C((uint64_t)v166);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v26 = v112;
    v27 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 8);
    swift_retain();
    v29 = v127;
    v28(v25, v26, v27);
    v127 = v29;
    if (v29)
      goto LABEL_59;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (v30 = sub_1BDDB271C(v116, v122), (v31 & 1) != 0))
  {
    v117 = *(_QWORD *)(rawValue[7] + 8 * v30);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0B1C((uint64_t)v166);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v32 = v109;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v34 = v117;
    v35 = *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8);
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 8);
    swift_retain();
    v37 = v127;
    v36(v34, v32, v35);
    v127 = v37;
    if (v37)
      goto LABEL_59;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
    v38 = v126;
  }
  else
  {
    swift_bridgeObjectRelease();
    v38 = v126;
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2])
  {
    v39 = sub_1BDDB271C(v115, v136);
    if ((v40 & 1) != 0)
    {
      v117 = *(_QWORD *)(rawValue[7] + 8 * v39);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1BE0A0B1C((uint64_t)v166);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v41 = v106;
      v42 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 8);
      v44 = swift_retain();
      v45 = v127;
      v43(v44, v41, v42);
      v127 = v45;
      if (v45)
        goto LABEL_59;
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v46 = v126;
    }
    else
    {
      swift_bridgeObjectRelease();
      v46 = v126;
    }
  }
  else
  {
    v46 = v38;
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2])
  {
    v47 = sub_1BDDB271C(v114, v135);
    if ((v48 & 1) != 0)
    {
      v49 = *(_QWORD *)(rawValue[7] + 8 * v47);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1BE0A0B1C((uint64_t)v166);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v50 = v103;
      v51 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 8);
      swift_retain();
      v53 = v127;
      v52(v49, v50, v51);
      v127 = v53;
      if (v53)
        goto LABEL_59;
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v46 = v126;
    }
    else
    {
      swift_bridgeObjectRelease();
      v46 = v126;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2])
  {
    v54 = sub_1BDDB271C(v111, v138);
    if ((v55 & 1) != 0)
    {
      v56 = *(_QWORD *)(rawValue[7] + 8 * v54);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1BE0A0B1C((uint64_t)v166);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v57 = v100;
      v58 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 8);
      swift_retain();
      v60 = v127;
      v59(v56, v57, v58);
      v127 = v60;
      if (v60)
        goto LABEL_59;
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v46 = v126;
    }
    else
    {
      swift_bridgeObjectRelease();
      v46 = v126;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v61 = v121;
  swift_bridgeObjectRelease();
  if (rawValue[2])
  {
    v62 = sub_1BDDB271C(v108, v134);
    if ((v63 & 1) != 0)
    {
      v64 = *(_QWORD *)(rawValue[7] + 8 * v62);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1BE0A0B1C((uint64_t)v166);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v65 = v97;
      v66 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 8);
      swift_retain();
      v68 = v127;
      v67(v64, v65, v66);
      v127 = v68;
      if (v68)
        goto LABEL_59;
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v46 = v126;
    }
    else
    {
      swift_bridgeObjectRelease();
      v46 = v126;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2])
  {
    v69 = sub_1BDDB271C(v105, v61);
    if ((v70 & 1) != 0)
    {
      v117 = *(_QWORD *)(rawValue[7] + 8 * v69);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_1BE0A0B1C((uint64_t)v166);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v71 = v95;
      v72 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 8);
      v74 = swift_retain();
      v75 = v127;
      v73(v74, v71, v72);
      v127 = v75;
      if (v75)
        goto LABEL_59;
      swift_setAtWritableKeyPath();
      swift_release();
      swift_release();
      v76 = v126;
    }
    else
    {
      swift_bridgeObjectRelease();
      v76 = v126;
    }
  }
  else
  {
    v76 = v46;
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (v77 = sub_1BDDB271C(v102, v76), (v78 & 1) != 0))
  {
    v79 = *(_QWORD *)(rawValue[7] + 8 * v77);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0B1C((uint64_t)v166);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v80 = AssociatedTypeWitness;
    v81 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 8);
    swift_retain();
    v83 = v127;
    v82(v79, v80, v81);
    v127 = v83;
    if (v83)
      goto LABEL_59;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0B1C((uint64_t)v166);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (!rawValue[2] || (v84 = sub_1BDDB271C(v99, v129), (v85 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  v86 = *(_QWORD *)(rawValue[7] + 8 * v84);
  swift_retain();
  swift_bridgeObjectRelease();
  sub_1BE0A0B1C((uint64_t)v166);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v87 = v86;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v88 = v92[0];
  v89 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 8);
  swift_retain();
  v91 = v127;
  v90(v87, v88, v89);
  v127 = v91;
  if (v91)
  {
LABEL_59:
    swift_release();
    swift_release();
LABEL_60:
    sub_1BE0A0C38((uint64_t)v166);
    return;
  }
  swift_setAtWritableKeyPath();
  sub_1BE0A0C38((uint64_t)v166);
  swift_release();
  swift_release();
}

uint64_t CRStruct_9.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_9.decode(fields:), a4);
}

uint64_t CRStruct_9.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_9.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_9.encodeFields(to:));
}

uint64_t CRStruct_9.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD v149[28];

  v107 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v67 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v65 = (char *)&v63 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  MEMORY[0x1E0C80A78](v7);
  v69 = (char *)&v63 - v8;
  v75 = swift_getAssociatedTypeWitness();
  v72 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v74 = (char *)&v63 - v9;
  v79 = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v78 = (char *)&v63 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v82 = *(_QWORD *)(v11 - 8);
  v83 = v11;
  MEMORY[0x1E0C80A78](v11);
  v81 = (char *)&v63 - v12;
  v87 = swift_getAssociatedTypeWitness();
  v84 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v86 = (char *)&v63 - v13;
  v91 = swift_getAssociatedTypeWitness();
  v88 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v89 = (char *)&v63 - v14;
  v94 = swift_getAssociatedTypeWitness();
  v92 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v102 = (char *)&v63 - v15;
  v105 = swift_getAssociatedTypeWitness();
  v103 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v104 = (char *)&v63 - v16;
  v109 = v4;
  v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 160);
  v121 = a2;
  v17(&v122, a2, v4);
  v106 = v122;
  v110 = v124;
  v119 = v127;
  v120 = v126;
  v117 = v130;
  v118 = v129;
  v115 = v133;
  v116 = v132;
  v113 = v136;
  v114 = v135;
  v111 = v123;
  v112 = v138;
  v18 = v139;
  v19 = v141;
  v20 = v142;
  v21 = v144;
  v22 = v145;
  v23 = v147;
  v24 = v148;
  v149[0] = v122;
  v149[1] = v123;
  v149[2] = v124;
  v93 = v125;
  v149[3] = v125;
  v149[4] = v126;
  v149[5] = v127;
  v90 = v128;
  v149[6] = v128;
  v149[7] = v129;
  v149[8] = v130;
  v85 = v131;
  v149[9] = v131;
  v149[10] = v132;
  v149[11] = v133;
  v80 = v134;
  v149[12] = v134;
  v149[13] = v135;
  v149[14] = v136;
  v77 = v137;
  v149[15] = v137;
  v149[16] = v138;
  v149[17] = v139;
  v73 = v140;
  v149[18] = v140;
  v149[19] = v141;
  v149[20] = v142;
  v68 = v143;
  v149[21] = v143;
  v149[22] = v144;
  v149[23] = v145;
  v64 = v146;
  v149[24] = v146;
  v149[25] = v147;
  v149[26] = v148;
  sub_1BE0A0B1C((uint64_t)v149);
  swift_bridgeObjectRelease();
  v101 = v24;
  swift_release();
  v95 = v23;
  swift_bridgeObjectRelease();
  v96 = v22;
  swift_release();
  v97 = v21;
  swift_bridgeObjectRelease();
  v98 = v20;
  swift_release();
  v99 = v19;
  v25 = v105;
  swift_bridgeObjectRelease();
  v100 = v18;
  v26 = (uint64_t)v104;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = v108;
  sub_1BDDA7E18(v26, v106, v111, v25, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v28)
  {
    sub_1BE0A0C38((uint64_t)v149);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 8))(v26, v25);
  }
  else
  {
    v30 = v92;
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v26, v25);
    sub_1BE0A0B1C((uint64_t)v149);
    v31 = v120;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v102;
    swift_getAtKeyPath();
    swift_release();
    v33 = v94;
    v34 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v32, v93, v31, v33, *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v30 + 8))(v102, v33);
    sub_1BE0A0B1C((uint64_t)v149);
    v35 = v118;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v36 = (uint64_t)v89;
    swift_getAtKeyPath();
    swift_release();
    v37 = v91;
    v38 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v36, v90, v35, v37, *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v36, v37);
    sub_1BE0A0B1C((uint64_t)v149);
    v39 = v116;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v40 = (uint64_t)v86;
    swift_getAtKeyPath();
    swift_release();
    v41 = v87;
    v42 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v40, v85, v39, v41, *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v40, v41);
    sub_1BE0A0B1C((uint64_t)v149);
    v43 = v114;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v44 = (uint64_t)v81;
    swift_getAtKeyPath();
    swift_release();
    v45 = v83;
    v46 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v44, v80, v43, v45, *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v44, v45);
    sub_1BE0A0B1C((uint64_t)v149);
    v47 = v112;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v48 = (uint64_t)v78;
    swift_getAtKeyPath();
    swift_release();
    v49 = v79;
    v50 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v48, v77, v47, v49, *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v48, v49);
    sub_1BE0A0B1C((uint64_t)v149);
    v51 = v99;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v52 = (uint64_t)v74;
    swift_getAtKeyPath();
    swift_release();
    v53 = v75;
    v54 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v52, v73, v51, v53, *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v52, v53);
    sub_1BE0A0B1C((uint64_t)v149);
    v55 = v97;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v56 = (uint64_t)v69;
    swift_getAtKeyPath();
    swift_release();
    v57 = v71;
    v58 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v56, v68, v55, v57, *(_QWORD *)(*(_QWORD *)(v58 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v56, v57);
    sub_1BE0A0B1C((uint64_t)v149);
    v59 = v95;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v60 = (uint64_t)v65;
    swift_getAtKeyPath();
    swift_release();
    v61 = v67;
    v62 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v60, v64, v59, v61, *(_QWORD *)(*(_QWORD *)(v62 + 16) + 8));
    sub_1BE0A0C38((uint64_t)v149);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v60, v61);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_10_Final.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t AssociatedConformanceWitness;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t AssociatedTypeWitness;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *rawValue;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[33];

  v3 = v1;
  rawValue = fields._rawValue;
  v4 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v100 = (char *)&v98 - v5;
  v101 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v101);
  v102 = (char *)&v98 - v6;
  v103 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v103);
  v104 = (char *)&v98 - v7;
  v105 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v105);
  v106 = (char *)&v98 - v8;
  v108 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v108);
  v109 = (char *)&v98 - v9;
  v111 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v111);
  v112 = (char *)&v98 - v10;
  v114 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v114);
  v115 = (char *)&v98 - v11;
  v117 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v117);
  v118 = (char *)&v98 - v12;
  v120 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v120);
  v121 = (char *)&v98 - v13;
  v123 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v123);
  v124 = (char *)&v98 - v14;
  v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 176);
  v129 = v4;
  v130 = v3;
  v15(&v152, v3, v4);
  v133 = v156;
  v146 = v154;
  v147 = v157;
  v144 = v159;
  v182[32] = v160;
  v134 = v162;
  v136 = v163;
  v145 = v168;
  v148 = v165;
  v149 = v169;
  v150 = v166;
  v151 = v171;
  v143 = v172;
  v16 = v174;
  v17 = v175;
  v18 = v177;
  v19 = v178;
  v20 = v180;
  v21 = v181;
  v128 = v152;
  v182[0] = v152;
  v131 = v153;
  v182[1] = v153;
  v182[2] = v154;
  v126 = v158;
  v127 = v155;
  v182[3] = v155;
  v182[4] = v156;
  v182[5] = v157;
  v182[6] = v158;
  v182[7] = v159;
  v182[8] = v160;
  v125 = v161;
  v182[9] = v161;
  v182[10] = v162;
  v182[11] = v163;
  v122 = v164;
  v182[12] = v164;
  v182[13] = v165;
  v182[14] = v166;
  v119 = v167;
  v182[15] = v167;
  v182[16] = v168;
  v182[17] = v169;
  v116 = v170;
  v182[18] = v170;
  v182[19] = v171;
  v182[20] = v172;
  v113 = v173;
  v182[21] = v173;
  v182[22] = v174;
  v182[23] = v175;
  v110 = v176;
  v182[24] = v176;
  v182[25] = v177;
  v182[26] = v178;
  v107 = v179;
  v182[27] = v179;
  v182[28] = v180;
  v182[29] = v181;
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  v142 = v21;
  swift_release();
  v139 = v20;
  swift_bridgeObjectRelease();
  v141 = v19;
  swift_release();
  v138 = v18;
  swift_bridgeObjectRelease();
  v140 = v17;
  v22 = rawValue;
  swift_release();
  v137 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (v22[2] && (v23 = sub_1BDDB271C(v128, v131), (v24 & 1) != 0))
  {
    v25 = *(_QWORD *)(v22[7] + 8 * v23);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v26 = v123;
    v27 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 8);
    swift_retain();
    v29 = v132;
    v28(v25, v26, v27);
    v132 = v29;
    if (v29)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v30 = rawValue;
  if (rawValue[2] && (v31 = sub_1BDDB271C(v127, v133), (v32 & 1) != 0))
  {
    v128 = *(_QWORD *)(v30[7] + 8 * v31);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v33 = v120;
    v34 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 8);
    v36 = swift_retain();
    v37 = v132;
    v35(v36, v33, v34);
    v132 = v37;
    if (v37)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (sub_1BDDB271C(v126, v144), (v38 & 1) != 0))
  {
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v39 = v117;
    v40 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 8);
    v42 = swift_retain();
    v43 = v132;
    v41(v42, v39, v40);
    v132 = v43;
    if (v43)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v44 = rawValue;
  if (rawValue[2] && (v45 = sub_1BDDB271C(v125, v134), (v46 & 1) != 0))
  {
    v128 = *(_QWORD *)(v44[7] + 8 * v45);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v47 = v114;
    v48 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 8);
    v50 = swift_retain();
    v51 = v132;
    v49(v50, v47, v48);
    v132 = v51;
    if (v51)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v52 = rawValue;
  if (rawValue[2] && (v53 = sub_1BDDB271C(v122, v148), (v54 & 1) != 0))
  {
    v128 = *(_QWORD *)(v52[7] + 8 * v53);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v55 = v111;
    v56 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 8);
    v58 = swift_retain();
    v59 = v132;
    v57(v58, v55, v56);
    v132 = v59;
    if (v59)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v60 = rawValue;
  if (rawValue[2] && (v61 = sub_1BDDB271C(v119, v145), (v62 & 1) != 0))
  {
    v128 = *(_QWORD *)(v60[7] + 8 * v61);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v63 = v108;
    v64 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 8);
    v66 = swift_retain();
    v67 = v132;
    v65(v66, v63, v64);
    v132 = v67;
    if (v67)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (rawValue[2] && (sub_1BDDB271C(v116, v151), (v68 & 1) != 0))
  {
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v69 = v105;
    v70 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 8);
    v72 = swift_retain();
    v73 = v132;
    v71(v72, v69, v70);
    v132 = v73;
    if (v73)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v74 = rawValue;
  if (rawValue[2] && (v75 = sub_1BDDB271C(v113, v137), (v76 & 1) != 0))
  {
    v128 = *(_QWORD *)(v74[7] + 8 * v75);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v77 = v103;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v79 = v128;
    v80 = *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8);
    v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 8);
    swift_retain();
    v82 = v132;
    v81(v79, v77, v80);
    v132 = v82;
    if (v82)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v83 = rawValue;
  if (rawValue[2] && (v84 = sub_1BDDB271C(v110, v138), (v85 & 1) != 0))
  {
    v128 = *(_QWORD *)(v83[7] + 8 * v84);
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1BE0A0D50((uint64_t)v182);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v86 = v101;
    v87 = swift_getAssociatedConformanceWitness();
    v88 = v128;
    v89 = *(_QWORD *)(*(_QWORD *)(v87 + 16) + 8);
    v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 8);
    swift_retain();
    v91 = v132;
    v90(v88, v86, v89);
    v132 = v91;
    if (v91)
      goto LABEL_44;
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_1BE0A0D50((uint64_t)v182);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (!rawValue[2] || (sub_1BDDB271C(v107, v139), (v92 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  sub_1BE0A0D50((uint64_t)v182);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v93 = AssociatedTypeWitness;
  v94 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 8);
  v96 = swift_retain();
  v97 = v132;
  v95(v96, v93, v94);
  v132 = v97;
  if (v97)
  {
LABEL_44:
    swift_release();
    swift_release();
LABEL_45:
    sub_1BE0A0E88((uint64_t)v182);
    return;
  }
  swift_setAtWritableKeyPath();
  sub_1BE0A0E88((uint64_t)v182);
  swift_release();
  swift_release();
}

uint64_t CRStruct_10_Final.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_10_Final.decode(fields:), a4);
}

uint64_t CRStruct_10_Final.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_10_Final.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_10_Final.encodeFields(to:));
}

uint64_t CRStruct_10_Final.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[31];

  v112 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v71 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v69 = (char *)&v67 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(v7 - 8);
  v75 = v7;
  MEMORY[0x1E0C80A78](v7);
  v73 = (char *)&v67 - v8;
  v79 = swift_getAssociatedTypeWitness();
  v76 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v78 = (char *)&v67 - v9;
  v83 = swift_getAssociatedTypeWitness();
  v80 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v82 = (char *)&v67 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v86 = *(_QWORD *)(v11 - 8);
  v87 = v11;
  MEMORY[0x1E0C80A78](v11);
  v85 = (char *)&v67 - v12;
  v91 = swift_getAssociatedTypeWitness();
  v88 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v90 = (char *)&v67 - v13;
  v95 = swift_getAssociatedTypeWitness();
  v92 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v94 = (char *)&v67 - v14;
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  v98 = v15;
  v99 = v16;
  MEMORY[0x1E0C80A78](v15);
  v96 = (char *)&v67 - v17;
  v102 = swift_getAssociatedTypeWitness();
  v100 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v107 = (char *)&v67 - v18;
  v110 = swift_getAssociatedTypeWitness();
  v108 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110);
  v109 = (char *)&v67 - v19;
  v114 = v4;
  v20 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 176);
  v131 = a2;
  v20(&v132, a2, v4);
  v111 = v132;
  v128 = v137;
  v129 = v136;
  v115 = v134;
  v116 = v139;
  v126 = v142;
  v127 = v140;
  v124 = v145;
  v125 = v143;
  v122 = v148;
  v123 = v146;
  v120 = v151;
  v121 = v149;
  v119 = v152;
  v117 = v155;
  v118 = v154;
  v21 = v157;
  v22 = v158;
  v23 = v160;
  v24 = v161;
  v162[0] = v132;
  v162[1] = v133;
  v130 = v133;
  v162[2] = v134;
  v101 = v135;
  v162[3] = v135;
  v162[4] = v136;
  v162[5] = v137;
  v97 = v138;
  v162[6] = v138;
  v162[7] = v139;
  v162[8] = v140;
  v93 = v141;
  v162[9] = v141;
  v162[10] = v142;
  v162[11] = v143;
  v89 = v144;
  v162[12] = v144;
  v162[13] = v145;
  v162[14] = v146;
  v84 = v147;
  v162[15] = v147;
  v162[16] = v148;
  v162[17] = v149;
  v81 = v150;
  v162[18] = v150;
  v162[19] = v151;
  v162[20] = v152;
  v77 = v153;
  v162[21] = v153;
  v162[22] = v154;
  v162[23] = v155;
  v72 = v156;
  v162[24] = v156;
  v162[25] = v157;
  v162[26] = v158;
  v68 = v159;
  v162[27] = v159;
  v162[28] = v160;
  v162[29] = v161;
  sub_1BE0A0D50((uint64_t)v162);
  swift_bridgeObjectRelease();
  v106 = v24;
  swift_release();
  v103 = v23;
  swift_bridgeObjectRelease();
  v104 = v22;
  v25 = v110;
  swift_release();
  v105 = v21;
  v26 = (uint64_t)v109;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v28 = v113;
  sub_1BDDA7E18(v26, v111, v130, v25, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v28)
  {
    sub_1BE0A0E88((uint64_t)v162);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 8))(v26, v25);
  }
  else
  {
    v30 = v100;
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v26, v25);
    sub_1BE0A0D50((uint64_t)v162);
    v31 = v129;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v107;
    swift_getAtKeyPath();
    swift_release();
    v33 = v102;
    v34 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v32, v101, v31, v33, *(_QWORD *)(*(_QWORD *)(v34 + 16) + 8));
    (*(void (**)(char *, uint64_t))(v30 + 8))(v107, v33);
    sub_1BE0A0D50((uint64_t)v162);
    v35 = v116;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v36 = (uint64_t)v96;
    swift_getAtKeyPath();
    swift_release();
    v37 = v98;
    v38 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v36, v97, v35, v37, *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v36, v37);
    sub_1BE0A0D50((uint64_t)v162);
    v39 = v126;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v40 = (uint64_t)v94;
    swift_getAtKeyPath();
    swift_release();
    v41 = v95;
    v42 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v40, v93, v39, v41, *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v40, v41);
    sub_1BE0A0D50((uint64_t)v162);
    v43 = v124;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v44 = (uint64_t)v90;
    swift_getAtKeyPath();
    swift_release();
    v45 = v91;
    v46 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v44, v89, v43, v45, *(_QWORD *)(*(_QWORD *)(v46 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v44, v45);
    sub_1BE0A0D50((uint64_t)v162);
    v47 = v122;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v48 = (uint64_t)v85;
    swift_getAtKeyPath();
    swift_release();
    v49 = v87;
    v50 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v48, v84, v47, v49, *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v48, v49);
    sub_1BE0A0D50((uint64_t)v162);
    v51 = v120;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v52 = (uint64_t)v82;
    swift_getAtKeyPath();
    swift_release();
    v53 = v83;
    v54 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v52, v81, v51, v53, *(_QWORD *)(*(_QWORD *)(v54 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v52, v53);
    sub_1BE0A0D50((uint64_t)v162);
    v55 = v118;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v56 = (uint64_t)v78;
    swift_getAtKeyPath();
    swift_release();
    v57 = v79;
    v58 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v56, v77, v55, v57, *(_QWORD *)(*(_QWORD *)(v58 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v56, v57);
    sub_1BE0A0D50((uint64_t)v162);
    v59 = v105;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v60 = (uint64_t)v73;
    swift_getAtKeyPath();
    swift_release();
    v61 = v75;
    v62 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v60, v72, v59, v61, *(_QWORD *)(*(_QWORD *)(v62 + 16) + 8));
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v60, v61);
    sub_1BE0A0D50((uint64_t)v162);
    v63 = v103;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v64 = (uint64_t)v69;
    swift_getAtKeyPath();
    swift_release();
    v65 = v71;
    v66 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18(v64, v68, v63, v65, *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8));
    sub_1BE0A0E88((uint64_t)v162);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v64, v65);
  }
}

uint64_t CRStruct_1.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];

  v5 = v4;
  v21[1] = a4;
  v9 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v5, a2);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(a2, v9);
  v21[2] = v15;
  swift_retain();
  swift_getAtKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 24))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  swift_setAtWritableKeyPath();
  swift_release();
  v17 = *(_QWORD *)(v9 + 8);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(a2, v17);
  swift_bridgeObjectRetain();
  v19 = sub_1BE0A03A8(v18, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v19, a2, v17);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_1.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t TupleTypeMetadata2;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v43 = a1;
  v44 = a2;
  v47 = a5;
  v6 = *(_QWORD *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v37 = (char *)&v35 - v9;
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v8);
  v36 = (char *)&v35 - v10;
  v11 = swift_checkMetadataState();
  v40 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v35 - v15;
  v39 = sub_1BE1B2EE8();
  v17 = *(_QWORD *)(v39 - 8);
  v18 = MEMORY[0x1E0C80A78](v39);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v35 - v21;
  v23 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  v45 = v6;
  v46 = a3;
  v23(a3, v6);
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v14, v44, v11);
  swift_release();
  swift_bridgeObjectRelease();
  v24 = *(void (**)(char *, uint64_t))(v40 + 8);
  v24(v14, v11);
  v25 = v11;
  v26 = v41;
  v24(v16, v25);
  v27 = v17;
  v28 = v39;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v20, v22, v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v20, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v28);
    v29 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v47, 1, 1, v29);
  }
  else
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v32 = v36;
    v31(v36, v20, AssociatedTypeWitness);
    v31(v37, v32, AssociatedTypeWitness);
    v33 = swift_getAssociatedTypeWitness();
    v34 = v47;
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v34, 0, 1, v33);
  }
}

uint64_t CRStruct_1.actionUndoingDifference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedConformanceWitness;
  void (*v14)(char *, uint64_t);
  _QWORD v16[2];

  v16[0] = a1;
  v16[1] = a4;
  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v16 - v11;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, v5);
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, AssociatedTypeWitness);
}

uint64_t CRStruct_1.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a3 + 8) + 32))(a2, *(_QWORD *)(a3 + 8));
  swift_retain();
  v4 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v7 = swift_checkMetadataState();
  v6(a1, v7, AssociatedConformanceWitness);
  v4(&v9, 0);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t CRStruct_1.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *, _QWORD);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(a3 + 8) + 32))(a2, *(_QWORD *)(a3 + 8));
  swift_retain();
  v4 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 56);
  v7 = swift_checkMetadataState();
  v6(a1, v7, v5);
  v4(&v9, 0);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t CRStruct_1.minEncodingVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t AssociatedConformanceWitness;
  unsigned int v13;
  uint64_t result;
  _QWORD v15[2];
  _BYTE *v16;
  uint64_t v17;

  v16 = a3;
  v4 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)v15 - v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(a1, v4);
  v15[1] = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 24))(a1);
  sub_1BE198F48(v10, (_BYTE *)&v17 + 1);
  swift_bridgeObjectRelease();
  v11 = BYTE1(v17);
  if (BYTE1(v17) > 1u)
  {
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_getAtKeyPath();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16)
                                                                       + 8)
                                                           + 32))(&v17, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
    v13 = v17;
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v13 > v11)
      LOBYTE(v11) = v13;
  }
  *v16 = v11;
  return result;
}

uint64_t CRStruct_1<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t i;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v42 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v36 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F3A0);
  v39 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 32);
  v37 = v6;
  v38 = a2;
  v40 = v12(a2, v6);
  v14 = v13;
  v16 = v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDFDDDB0();
  v17 = v16;
  v18 = AssociatedTypeWitness;
  sub_1BE1B377C();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v45 = v40;
  v46 = v14;
  v19 = v43;
  sub_1BE1B32B4();
  if (v19)
  {
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v18);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v9);
    return swift_bridgeObjectRelease();
  }
  v40 = v17;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v18);
  v42 = v14;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v37 + 8) + 24))(v38);
  v20 = result;
  v21 = 0;
  v22 = *(_QWORD *)(result + 64);
  v43 = result + 64;
  v23 = 1 << *(_BYTE *)(result + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v44 = (unint64_t)(v23 + 63) >> 6;
  if ((v24 & v22) == 0)
    goto LABEL_7;
LABEL_6:
  v26 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  for (i = v26 | (v21 << 6); ; i = __clz(__rbit64(v29)) + (v21 << 6))
  {
    v31 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * i);
    v32 = *v31;
    v33 = v31[1];
    v47 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * i);
    v45 = v32;
    v46 = v33;
    sub_1BDFDDDF4();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BE1B32B4();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v25)
      goto LABEL_6;
LABEL_7:
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v44)
      goto LABEL_24;
    v29 = *(_QWORD *)(v43 + 8 * v21);
    if (!v29)
      break;
LABEL_17:
    v25 = (v29 - 1) & v29;
  }
  v30 = v21 + 1;
  if (v21 + 1 >= v44)
    goto LABEL_24;
  v29 = *(_QWORD *)(v43 + 8 * v30);
  if (v29)
    goto LABEL_16;
  v30 = v21 + 2;
  if (v21 + 2 >= v44)
    goto LABEL_24;
  v29 = *(_QWORD *)(v43 + 8 * v30);
  if (v29)
    goto LABEL_16;
  v30 = v21 + 3;
  if (v21 + 3 >= v44)
  {
LABEL_24:
    v35 = v39;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v11, v9);
  }
  v29 = *(_QWORD *)(v43 + 8 * v30);
  if (v29)
  {
LABEL_16:
    v21 = v30;
    goto LABEL_17;
  }
  while (1)
  {
    v21 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v21 >= v44)
      goto LABEL_24;
    v29 = *(_QWORD *)(v43 + 8 * v21);
    ++v30;
    if (v29)
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t CRStruct_2.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];

  v28 = a1;
  v25[1] = a4;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v30 = (char *)v25 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 48))(v35, a2, v7);
  v15 = v35[2];
  v34 = v35[1];
  v32 = v35[4];
  swift_retain();
  v25[0] = v4;
  swift_getAtKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = v28;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 24))(v28, v11);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v11);
  v27 = v15;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_retain();
  v18 = v29;
  swift_getAtKeyPath();
  v19 = AssociatedTypeWitness;
  v20 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 + 16) + 24))(v17, v19);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v19);
  swift_setAtWritableKeyPath();
  swift_release();
  v21 = *(_QWORD *)(v7 + 8);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(a2, v21);
  swift_bridgeObjectRetain();
  v23 = sub_1BE0A03A8(v22, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v23, a2, v21);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_2.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t TupleTypeMetadata2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t AssociatedTypeWitness;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[5];

  v65 = a1;
  v66 = a2;
  v71 = a5;
  v6 = *(_QWORD *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  v63 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1BE1B2EE8();
  swift_getAssociatedTypeWitness();
  v64 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v48 = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  v59 = v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v49 = (char *)&v47 - v9;
  v10 = swift_checkMetadataState();
  v11 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  v61 = v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v58 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v57 = (char *)&v47 - v15;
  v56 = *(_QWORD *)(v8 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v54 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v55 = (char *)&v47 - v18;
  v19 = swift_checkMetadataState();
  v51 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v47 - v24;
  v68 = v7;
  v62 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v47 - v26;
  v28 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 48);
  v69 = v6;
  v70 = a3;
  v28(v72, a3, v6);
  v53 = v72[1];
  v52 = v72[4];
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  v29 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v22, v66, v19);
  v30 = *(void (**)(char *, uint64_t))(v51 + 8);
  v30(v22, v19);
  v30(v25, v19);
  swift_retain();
  v31 = v57;
  v32 = v56;
  swift_getAtKeyPath();
  v33 = v58;
  v34 = v55;
  swift_getAtKeyPath();
  swift_release();
  v35 = v29;
  v36 = v31;
  v37 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v33, v35, v60);
  v38 = v59;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v39 = *(void (**)(char *, uint64_t))(v61 + 8);
  v39(v33, v37);
  v39(v36, v37);
  LODWORD(v39) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v27, 1);
  v40 = v54;
  (*(void (**)(void))(v32 + 16))();
  if ((_DWORD)v39 == 1
    && (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v40, 1) == 1)
  {
    v41 = *(void (**)(char *, uint64_t))(v32 + 8);
    v41(v40, v38);
    v41(v34, v38);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v27, v68);
    v42 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v71, 1, 1, v42);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v40, v38);
    v44 = &v49[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v49, v27, v68);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v44, v34, v38);
    v45 = swift_getAssociatedTypeWitness();
    v46 = v71;
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v46, 0, 1, v45);
  }
}

uint64_t CRStruct_2.actionUndoingDifference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t TupleTypeMetadata2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t AssociatedConformanceWitness;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[5];

  v47 = a1;
  v56 = a4;
  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v50 = AssociatedTypeWitness;
  v55 = v7;
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v52 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v49 = (char *)v41 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v41[0] = swift_getAssociatedTypeWitness();
  v53 = sub_1BE1B2EE8();
  v48 = *(_QWORD *)(v53 - 8);
  v11 = MEMORY[0x1E0C80A78](v53);
  v44 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v45 = (char *)v41 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v41 - v18;
  v20 = swift_getAssociatedConformanceWitness();
  v43 = swift_getAssociatedTypeWitness();
  v54 = sub_1BE1B2EE8();
  v51 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v22 = (char *)v41 - v21;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 48))(v57, a2, v5);
  v41[2] = v57[1];
  v41[1] = v57[4];
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 56))(v17, v14, v20);
  v23 = *(void (**)(char *, uint64_t))(v42 + 8);
  v23(v17, v14);
  v24 = v19;
  v25 = v44;
  v23(v24, v14);
  swift_retain();
  v26 = v49;
  swift_getAtKeyPath();
  v27 = v52;
  swift_getAtKeyPath();
  swift_release();
  v28 = v45;
  v29 = v50;
  (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 56))(v27, v50);
  v30 = v22;
  swift_release();
  swift_bridgeObjectRelease();
  v31 = v48;
  swift_release();
  swift_bridgeObjectRelease();
  v32 = *(void (**)(char *, uint64_t))(v55 + 8);
  v32(v27, v29);
  v33 = v53;
  v32(v26, v29);
  LODWORD(v32) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v30, 1);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v25, v28, v33);
  if ((_DWORD)v32 == 1
    && (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v41[0] - 8) + 48))(v25, 1) == 1)
  {
    v34 = *(void (**)(char *, uint64_t))(v31 + 8);
    v34(v25, v33);
    v34(v28, v33);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v54);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v56, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v33);
    v37 = v54;
    v38 = swift_getTupleTypeMetadata2();
    v39 = v56;
    v40 = v56 + *(int *)(v38 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v56, v30, v37);
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v40, v28, v33);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v39, 0, 1, v38);
  }
}

uint64_t CRStruct_2.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(_QWORD *, _QWORD);
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(_QWORD *, _QWORD);
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t AssociatedConformanceWitness;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[7];

  v57 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v54 = AssociatedTypeWitness;
  v43 = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  v56 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v51 = (char *)&v42 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v45 = swift_getAssociatedConformanceWitness();
  v46 = v8;
  v9 = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = sub_1BE1B2EE8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v47 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v42 - v17;
  v55 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v42 - v19;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 48))(v58, a2, v4);
  v49 = v58[4];
  v50 = v58[1];
  v48 = v58[5];
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v44(v18, v57, v12);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48);
  v22 = v21(v18, 1, TupleTypeMetadata2);
  v52 = v6;
  v42 = v13;
  if (v22 == 1)
  {
    v23 = *(void (**)(char *, uint64_t))(v13 + 8);
    swift_retain();
    v23(v18, v12);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v20, 1, 1, v9);
  }
  else
  {
    v24 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v20, v18, v10);
    v25 = *(void (**)(char *, uint64_t))(v56 + 8);
    swift_retain();
    v25(v24, v6);
  }
  v26 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v27 = v45;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 64);
  v29 = swift_checkMetadataState();
  v28(v20, v29, v27);
  v30 = *(void (**)(char *, uint64_t))(v55 + 8);
  v30(v20, v10);
  v26(v58, 0);
  swift_release();
  v31 = v47;
  v44(v47, v57, v12);
  if (v21(v31, 1, TupleTypeMetadata2) == 1)
  {
    v32 = *(void (**)(char *, uint64_t))(v42 + 8);
    swift_retain();
    v32(v31, v12);
    v33 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v51, 1, 1);
    v34 = v52;
    v35 = v56;
  }
  else
  {
    v36 = &v31[*(int *)(TupleTypeMetadata2 + 48)];
    v35 = v56;
    v33 = v51;
    v34 = v52;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v51, v36, v52);
    swift_retain();
    v30(v31, v10);
  }
  v37 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v38 = AssociatedConformanceWitness;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v40 = swift_checkMetadataState();
  v39(v33, v40, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
  v37(v58, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_2.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *, _QWORD);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t *, _QWORD);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)(a3 + 8) + 48))(&v13, a2, *(_QWORD *)(a3 + 8));
  swift_retain();
  v4 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 56);
  v7 = swift_checkMetadataState();
  v6(a1, v7, v5);
  v4(&v13, 0);
  swift_release();
  swift_retain();
  v8 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
  v11 = swift_checkMetadataState();
  v10(a1, v11, v9);
  v8(&v13, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t CRStruct_2.minEncodingVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t AssociatedConformanceWitness;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE v26[41];

  v24 = a3;
  v4 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v19 - v6;
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - v9;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v4 + 48))(&v26[1], a1, v4);
  v25 = *(_QWORD *)&v26[17];
  v22 = *(_QWORD *)&v26[33];
  v23 = *(_QWORD *)&v26[9];
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 24))(a1);
  sub_1BE198F48(v11, &v26[1]);
  swift_bridgeObjectRelease();
  v12 = v26[1];
  if (v26[1] > 1u)
    goto LABEL_8;
  swift_getAtKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8)
                                                       + 32))(v26, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v26[0] > v12)
    v12 = v26[0];
  v26[1] = v12;
  if (v12 > 1)
  {
LABEL_8:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v19;
    swift_getAtKeyPath();
    v15 = v21;
    v16 = swift_getAssociatedConformanceWitness();
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 16) + 8) + 32))(v26, v15);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v15);
    v17 = v26[0];
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v17 > v12)
      LOBYTE(v12) = v17;
  }
  *v24 = v12;
  return result;
}

uint64_t CRStruct_2<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t i;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t AssociatedTypeWitness;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v51 = a4;
  v42 = a5;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v43 = (char *)&v37 - v8;
  v48 = swift_getAssociatedTypeWitness();
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v10 = (char *)&v37 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F3A0);
  v45 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 48);
  v39 = a2;
  v38 = v7;
  v14(&v53, a2, v7);
  v15 = v54;
  v47 = v53;
  v16 = v55;
  v40 = v56;
  v49 = v58;
  v50 = v57;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDFDDDB0();
  v17 = v48;
  sub_1BE1B377C();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v53 = v47;
  v54 = v15;
  v18 = v52;
  sub_1BE1B32B4();
  if (v18)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v13, v11);
  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v17);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v53 = v40;
  v54 = v50;
  swift_bridgeObjectRetain();
  sub_1BE1B32B4();
  v47 = v16;
  v48 = v15;
  v51 = v13;
  v52 = v11;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v43, AssociatedTypeWitness);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v38 + 8) + 24))(v39);
  v20 = result;
  v21 = 0;
  v22 = result + 64;
  v23 = 1 << *(_BYTE *)(result + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(result + 64);
  v26 = (unint64_t)(v23 + 63) >> 6;
  if (!v25)
    goto LABEL_7;
LABEL_6:
  v27 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  for (i = v27 | (v21 << 6); ; i = __clz(__rbit64(v30)) + (v21 << 6))
  {
    v32 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * i);
    v33 = *v32;
    v34 = v32[1];
    v59 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * i);
    v53 = v33;
    v54 = v34;
    sub_1BDFDDDF4();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BE1B32B4();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v25)
      goto LABEL_6;
LABEL_7:
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v26)
      goto LABEL_24;
    v30 = *(_QWORD *)(v22 + 8 * v21);
    if (!v30)
      break;
LABEL_17:
    v25 = (v30 - 1) & v30;
  }
  v31 = v21 + 1;
  if (v21 + 1 >= v26)
    goto LABEL_24;
  v30 = *(_QWORD *)(v22 + 8 * v31);
  if (v30)
    goto LABEL_16;
  v31 = v21 + 2;
  if (v21 + 2 >= v26)
    goto LABEL_24;
  v30 = *(_QWORD *)(v22 + 8 * v31);
  if (v30)
    goto LABEL_16;
  v31 = v21 + 3;
  if (v21 + 3 >= v26)
  {
LABEL_24:
    v35 = v45;
    v36 = v51;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v52);
  }
  v30 = *(_QWORD *)(v22 + 8 * v31);
  if (v30)
  {
LABEL_16:
    v21 = v31;
    goto LABEL_17;
  }
  while (1)
  {
    v21 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v21 >= v26)
      goto LABEL_24;
    v30 = *(_QWORD *)(v22 + 8 * v21);
    ++v31;
    if (v30)
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t CRStruct_3.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[4];
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[10];

  v40 = a1;
  v36[1] = a4;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = AssociatedTypeWitness;
  v49 = v9;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v44 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v46 = (char *)v36 - v12;
  v39 = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(v39 - 8);
  v13 = MEMORY[0x1E0C80A78](v39);
  v37 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v38 = (char *)v36 - v15;
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16);
  v36[0] = v4;
  v21(a4, v4, a2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 64))(v50, a2, v7);
  v22 = v50[2];
  v47 = v50[1];
  v23 = v50[5];
  v45 = v50[4];
  v43 = v50[7];
  v36[2] = v50[8];
  swift_retain();
  swift_getAtKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v25 = v40;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 24))(v40, v16);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v42 = v22;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_retain();
  v26 = v37;
  swift_getAtKeyPath();
  v27 = v39;
  v28 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 + 16) + 24))(v25, v27);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v27);
  v36[3] = v23;
  swift_setAtWritableKeyPath();
  swift_release();
  swift_retain();
  v29 = v44;
  swift_getAtKeyPath();
  v30 = v48;
  v31 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 + 16) + 24))(v25, v30);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v30);
  swift_setAtWritableKeyPath();
  swift_release();
  v32 = *(_QWORD *)(v7 + 8);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 24))(a2, v32);
  swift_bridgeObjectRetain();
  v34 = sub_1BE0A03A8(v33, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v34, a2, v32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static CRStruct_3.fieldKeys.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  _QWORD v8[8];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)(a2 + 8) + 64))(v8);
  v6 = *(_OWORD *)&v8[3];
  v7 = *(_OWORD *)v8;
  v2 = v8[6];
  v3 = v8[7];
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2898);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BE1B6B40;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 48) = v6;
  *(_QWORD *)(v4 + 64) = v2;
  *(_QWORD *)(v4 + 72) = v3;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t CRStruct_3.merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  void (*v17)(_QWORD *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(_QWORD *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD);
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t AssociatedTypeWitness;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];

  v28[1] = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v32 = (char *)v28 - v5;
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  v30 = v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v28 - v8;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v28 - v12;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v39, a2, v4);
  v14 = v39[2];
  v36 = v39[4];
  v37 = v39[1];
  v38 = v39[5];
  v34 = v39[7];
  v28[3] = v39[8];
  swift_retain();
  swift_getAtKeyPath();
  v31 = v14;
  v15 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15(v39, 0);
  swift_release();
  swift_retain();
  swift_getAtKeyPath();
  v17 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v18 = v29;
  v19 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 + 8) + 8))(v9, v18);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v18);
  v17(v39, 0);
  swift_release();
  swift_retain();
  v20 = v32;
  swift_getAtKeyPath();
  v21 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v22 = AssociatedTypeWitness;
  v23 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v20, v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v22);
  v21(v39, 0);
  swift_release();
  v24 = *(_QWORD *)(v4 + 8);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(a2, v24);
  v26 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v24 + 40))(v39, a2, v24);
  sub_1BDDC8334(v25);
  swift_bridgeObjectRelease();
  v26(v39, 0);
  (*(void (**)(uint64_t, uint64_t))(v24 + 64))(a2, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_3.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  BOOL v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t TupleTypeMetadata3;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t AssociatedTypeWitness;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD v102[8];

  v91 = a1;
  v92 = a2;
  v100 = a5;
  v6 = *(_QWORD *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  v86 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_1BE1B2EE8();
  swift_getAssociatedTypeWitness();
  v88 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v65 = swift_getAssociatedTypeWitness();
  v8 = sub_1BE1B2EE8();
  swift_getAssociatedTypeWitness();
  v89 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v66 = swift_getAssociatedTypeWitness();
  v9 = sub_1BE1B2EE8();
  v81 = v8;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  MEMORY[0x1E0C80A78](TupleTypeMetadata3);
  v67 = (char *)&v65 - v10;
  v85 = swift_checkMetadataState();
  v87 = *(_QWORD *)(v85 - 8);
  v11 = MEMORY[0x1E0C80A78](v85);
  v84 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v83 = (char *)&v65 - v14;
  v96 = v9;
  v94 = *(_QWORD *)(v9 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v93 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v80 = (char *)&v65 - v17;
  v78 = swift_checkMetadataState();
  v79 = *(_QWORD *)(v78 - 8);
  v18 = MEMORY[0x1E0C80A78](v78);
  v76 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v72 = (char *)&v65 - v21;
  v73 = *(_QWORD *)(v8 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v82 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v71 = (char *)&v65 - v24;
  v25 = swift_checkMetadataState();
  v69 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)&v65 - v30;
  v97 = v7;
  v90 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v29);
  v101 = (char *)&v65 - v32;
  v33 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 64);
  v98 = v6;
  v99 = a3;
  v33(v102, a3, v6);
  v77 = v102[1];
  v70 = v102[2];
  v75 = v102[4];
  v74 = v102[7];
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  v34 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v28, v92, v25);
  v35 = *(void (**)(char *, uint64_t))(v69 + 8);
  v35(v28, v25);
  v35(v31, v25);
  swift_retain();
  v36 = v72;
  swift_getAtKeyPath();
  v37 = v76;
  swift_getAtKeyPath();
  swift_release();
  v38 = v71;
  v39 = v34;
  v40 = v34;
  v41 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v37, v40, v78);
  v42 = *(void (**)(char *, uint64_t))(v79 + 8);
  v42(v37, v41);
  v42(v36, v41);
  swift_retain();
  v43 = v83;
  swift_getAtKeyPath();
  v44 = v84;
  v45 = v80;
  swift_getAtKeyPath();
  swift_release();
  v46 = v39;
  v47 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v44, v46, v85);
  swift_release();
  swift_bridgeObjectRelease();
  v48 = v81;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v49 = *(void (**)(char *, uint64_t))(v87 + 8);
  v50 = v47;
  v51 = v82;
  v49(v44, v50);
  v49(v43, v50);
  v52 = 1;
  LODWORD(v49) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(v101, 1);
  v53 = v73;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v51, v38, v48);
  if ((_DWORD)v49 == 1)
    v52 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v51, 1) != 1;
  v54 = *(void (**)(char *, uint64_t))(v53 + 8);
  v54(v51, v48);
  v55 = v93;
  v56 = v94;
  v57 = v96;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, v45, v96);
  if (v52 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v55, 1) != 1)
  {
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
    v61 = &v67[*(int *)(TupleTypeMetadata3 + 48)];
    v62 = &v67[*(int *)(TupleTypeMetadata3 + 64)];
    (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v67, v101, v97);
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v61, v38, v48);
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v62, v45, v57);
    v63 = swift_getAssociatedTypeWitness();
    v64 = v100;
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v64, 0, 1, v63);
  }
  else
  {
    v58 = *(void (**)(char *, uint64_t))(v56 + 8);
    v58(v55, v57);
    v58(v45, v57);
    v54(v38, v48);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v101, v97);
    v59 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v100, 1, 1, v59);
  }
}

uint64_t CRStruct_3.hasDelta(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedConformanceWitness;
  char v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  char v29;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[10];

  v53 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v44 = AssociatedTypeWitness;
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v42 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v41 = (char *)&v41 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v45 = (char *)&v41 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v41 - v18;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v54, a2, v4);
  v51 = v54[7];
  v52 = v54[4];
  v49 = v54[1];
  v50 = v54[8];
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v17, v13, AssociatedConformanceWitness);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if ((v21 & 1) != 0)
    goto LABEL_3;
  swift_retain();
  v23 = v45;
  swift_getAtKeyPath();
  v24 = v46;
  swift_getAtKeyPath();
  swift_release();
  v25 = v48;
  v26 = swift_getAssociatedConformanceWitness();
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 72))(v24, v25, v26);
  v28 = *(void (**)(char *, uint64_t))(v47 + 8);
  v28(v24, v25);
  v28(v23, v25);
  if ((v27 & 1) != 0)
    goto LABEL_3;
  swift_retain();
  v31 = v41;
  swift_getAtKeyPath();
  v32 = v42;
  swift_getAtKeyPath();
  swift_release();
  v33 = v44;
  v34 = swift_getAssociatedConformanceWitness();
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 72))(v32, v33, v34);
  v36 = *(void (**)(char *, uint64_t))(v43 + 8);
  v36(v32, v33);
  v36(v31, v33);
  if ((v35 & 1) != 0)
  {
LABEL_3:
    swift_release();
    v29 = 1;
  }
  else
  {
    v37 = *(_QWORD *)(v4 + 8);
    v38 = *(uint64_t (**)(uint64_t, uint64_t))(v37 + 24);
    v39 = v38(a2, v37);
    v40 = v38(a2, v37);
    v29 = sub_1BDDB1F18(v40, v39);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v29 & 1;
}

uint64_t CRStruct_3.actionUndoingDifference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  BOOL v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v53;
  uint64_t TupleTypeMetadata3;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t AssociatedConformanceWitness;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  _QWORD v90[8];

  v75 = a1;
  v86 = a4;
  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v82 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v79 = AssociatedTypeWitness;
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v81 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v78 = (char *)&v58 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v60 = swift_getAssociatedTypeWitness();
  v10 = sub_1BE1B2EE8();
  v84 = *(_QWORD *)(v10 - 8);
  v85 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v83 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v89 = (char *)&v58 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v70 = v14;
  v72 = v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v71 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v67 = (char *)&v58 - v18;
  v68 = swift_getAssociatedConformanceWitness();
  v59 = swift_getAssociatedTypeWitness();
  v74 = sub_1BE1B2EE8();
  v64 = *(_QWORD *)(v74 - 8);
  v19 = MEMORY[0x1E0C80A78](v74);
  v73 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v88 = (char *)&v58 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v58 - v26;
  v28 = swift_getAssociatedConformanceWitness();
  v69 = swift_getAssociatedTypeWitness();
  v80 = sub_1BE1B2EE8();
  v76 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v87 = (char *)&v58 - v29;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 64))(v90, a2, v5);
  v66 = v90[1];
  v62 = v90[2];
  v65 = v90[4];
  v63 = v90[7];
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  v30 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 56))(v25, v22, v28);
  v31 = *(void (**)(char *, uint64_t))(v61 + 8);
  v31(v25, v22);
  v31(v27, v22);
  swift_retain();
  v32 = v67;
  swift_getAtKeyPath();
  v33 = v71;
  swift_getAtKeyPath();
  swift_release();
  v34 = v30;
  v35 = v70;
  (*(void (**)(char *, uint64_t))(v68 + 56))(v33, v70);
  v36 = *(void (**)(char *, uint64_t))(v72 + 8);
  v36(v33, v35);
  v36(v32, v35);
  swift_retain();
  v37 = v78;
  swift_getAtKeyPath();
  v38 = v81;
  swift_getAtKeyPath();
  swift_release();
  v39 = v38;
  v40 = v79;
  (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 56))(v38, v79);
  swift_release();
  swift_bridgeObjectRelease();
  v41 = v74;
  swift_release();
  swift_bridgeObjectRelease();
  v42 = v73;
  swift_release();
  swift_bridgeObjectRelease();
  v43 = *(void (**)(char *, uint64_t))(v82 + 8);
  v43(v39, v40);
  v43(v37, v40);
  v44 = 1;
  LODWORD(v43) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v87, 1);
  v45 = v64;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v42, v34, v41);
  if ((_DWORD)v43 == 1)
    v44 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v42, 1) != 1;
  v46 = *(void (**)(char *, uint64_t))(v45 + 8);
  v46(v42, v41);
  v47 = v83;
  v48 = v84;
  v49 = v85;
  (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v83, v89, v85);
  if (v44 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v47, 1) != 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
    v53 = v80;
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v55 = v86;
    v56 = v86 + *(int *)(TupleTypeMetadata3 + 48);
    v57 = v86 + *(int *)(TupleTypeMetadata3 + 64);
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v86, v87, v53);
    (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v56, v88, v41);
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v57, v89, v49);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(v55, 0, 1, TupleTypeMetadata3);
  }
  else
  {
    v50 = *(void (**)(char *, uint64_t))(v48 + 8);
    v50(v47, v49);
    v50(v89, v49);
    v46(v88, v41);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v87, v80);
    v51 = swift_getTupleTypeMetadata3();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v86, 1, 1, v51);
  }
}

uint64_t CRStruct_3.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata3;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void (*v33)(_QWORD *, _QWORD);
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  int v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(_QWORD *, _QWORD);
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(_QWORD *, _QWORD);
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t AssociatedConformanceWitness;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t);
  void (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[9];

  v91 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v85 = AssociatedTypeWitness;
  v68 = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v83 = (char *)&v65 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v78 = swift_getAssociatedConformanceWitness();
  v79 = v8;
  v66 = swift_getAssociatedTypeWitness();
  v9 = sub_1BE1B2EE8();
  v86 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v73 = (char *)&v65 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v69 = swift_getAssociatedConformanceWitness();
  v80 = v11;
  v65 = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  v90 = v6;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v14 = sub_1BE1B2EE8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v72 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v70 = (char *)&v65 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v65 - v21;
  v23 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v65 - v24;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v92, a2, v4);
  v26 = v92[2];
  v81 = v92[1];
  v77 = v92[4];
  v76 = v92[5];
  v75 = v92[7];
  v74 = v92[8];
  v88 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v88(v22, v91, v14);
  v87 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 48);
  v27 = v87(v22, 1, TupleTypeMetadata3);
  v82 = v9;
  v71 = v15;
  if (v27 == 1)
  {
    v28 = *(void (**)(char *, uint64_t))(v15 + 8);
    swift_retain();
    v28(v22, v14);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v25, 1, 1);
  }
  else
  {
    v29 = &v22[*(int *)(TupleTypeMetadata3 + 48)];
    v30 = &v22[*(int *)(TupleTypeMetadata3 + 64)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v22, v12);
    v31 = *(void (**)(char *, uint64_t))(v89 + 8);
    swift_retain();
    v31(v30, v90);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v29, v9);
  }
  v32 = v14;
  v33 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v34 = v69;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 64);
  v36 = swift_checkMetadataState();
  v35(v25, v36, v34);
  v37 = *(void (**)(char *, uint64_t))(v23 + 8);
  v37(v25, v12);
  v33(v92, 0);
  v80 = v26;
  swift_release();
  v38 = v70;
  v88(v70, v91, v32);
  v39 = v87(v38, 1, TupleTypeMetadata3);
  v67 = v12;
  v69 = (uint64_t)v37;
  if (v39 == 1)
  {
    v40 = *(void (**)(char *, uint64_t))(v71 + 8);
    swift_retain();
    v40(v38, v32);
    v41 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v73, 1, 1);
    v42 = v82;
    v43 = v32;
    v44 = v86;
  }
  else
  {
    v45 = &v38[*(int *)(TupleTypeMetadata3 + 48)];
    v66 = (uint64_t)&v38[*(int *)(TupleTypeMetadata3 + 64)];
    v43 = v32;
    v44 = v86;
    v46 = v73;
    v42 = v82;
    (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v73, v45, v82);
    v47 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    swift_retain();
    v47(v66, v90);
    v48 = v12;
    v41 = v46;
    v37(v38, v48);
  }
  v49 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v50 = v78;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 64);
  v52 = swift_checkMetadataState();
  v51(v41, v52, v50);
  v53 = *(void (**)(char *, uint64_t))(v44 + 8);
  v53(v41, v42);
  v49(v92, 0);
  swift_release();
  v54 = v72;
  v88(v72, v91, v43);
  if (v87(v54, 1, TupleTypeMetadata3) == 1)
  {
    v55 = *(void (**)(char *, uint64_t))(v71 + 8);
    swift_retain();
    v55(v54, v43);
    v56 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v83, 1, 1);
    v57 = v89;
    v58 = v90;
  }
  else
  {
    v59 = &v54[*(int *)(TupleTypeMetadata3 + 48)];
    v57 = v89;
    v58 = v90;
    v56 = v83;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v83, &v54[*(int *)(TupleTypeMetadata3 + 64)], v90);
    swift_retain();
    v53(v59, v42);
    ((void (*)(char *, uint64_t))v69)(v54, v67);
  }
  v60 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v61 = AssociatedConformanceWitness;
  v62 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v63 = swift_checkMetadataState();
  v62(v56, v63, v61);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  v60(v92, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_3.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[10];

  v24 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = AssociatedTypeWitness;
  v32 = v6;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v28 = (char *)v23 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v23 - v9;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v23 - v13;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 64))(v33, a2, v4);
  v29 = v33[4];
  v30 = v33[1];
  v26 = v33[2];
  v27 = v33[7];
  v23[1] = v33[5];
  v23[2] = v33[8];
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = v24;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 40))(v24, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v17 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 + 16) + 40))(v16, v8);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  swift_retain();
  v18 = v28;
  swift_getAtKeyPath();
  swift_release();
  v19 = v31;
  v20 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 + 16) + 40))(v16, v19);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v19);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 24))(a2);
  sub_1BDDB1100(v16, v21);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall CRStruct_3.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[10];

  v3 = v2;
  v4 = v0;
  v5 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v35 = (char *)&v34 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v38 = (char *)&v34 - v10;
  v11 = *(_QWORD *)(v4 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v43 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v34 - v14;
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v34 - v18;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 64))(v48, v4, v5);
  v20 = v48[2];
  v45 = v48[4];
  v46 = v48[1];
  v47 = v48[5];
  v44 = v48[7];
  v42 = v48[8];
  swift_retain();
  swift_getAtKeyPath();
  v41 = v20;
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(v20) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 48))(v16);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v22(v15, v3, v4);
  if ((v20 & 1) != 0)
  {
    v23 = *(void (**)(char *, uint64_t))(v11 + 8);
    v23(v15, v4);
    v24 = v43;
    v22(v43, v3, v4);
  }
  else
  {
    v25 = v38;
    swift_getAtKeyPath();
    v26 = v40;
    v27 = swift_getAssociatedConformanceWitness();
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v27 + 16) + 48))(v26);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v26);
    v23 = *(void (**)(char *, uint64_t))(v11 + 8);
    v23(v15, v4);
    v24 = v43;
    v22(v43, v3, v4);
    if ((v28 & 1) == 0)
    {
      v30 = v35;
      swift_getAtKeyPath();
      v31 = v37;
      v32 = swift_getAssociatedConformanceWitness();
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 + 16) + 48))(v31);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v31);
      v23(v24, v4);
      return v29 & 1;
    }
  }
  v23(v24, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v29 = 1;
  return v29 & 1;
}

uint64_t CRStruct_3.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v3)(uint64_t *, _QWORD);
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  void (*v7)(uint64_t *, _QWORD);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)(a3 + 8) + 64))(&v17, a2, *(_QWORD *)(a3 + 8));
  swift_retain();
  v3 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 56);
  v6 = swift_checkMetadataState();
  v5(a1, v6, v4);
  v3(&v17, 0);
  swift_release();
  swift_retain();
  v7 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  v7(&v17, 0);
  swift_release();
  swift_retain();
  v11 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
  v14 = swift_checkMetadataState();
  v13(a1, v14, v12);
  v11(&v17, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t CRStruct_3.minEncodingVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  unsigned int v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[10];

  v35 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v26 = (char *)&v25 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - v9;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - v13;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v5 + 64))((char *)v38 + 1, a1, v5);
  v33 = *(_QWORD *)((char *)&v38[4] + 1);
  v34 = *(_QWORD *)((char *)&v38[1] + 1);
  v36 = *(_QWORD *)((char *)&v38[5] + 1);
  v37 = *(_QWORD *)((char *)&v38[2] + 1);
  v31 = *(_QWORD *)((char *)&v38[8] + 1);
  v32 = *(_QWORD *)((char *)&v38[7] + 1);
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 24);
  v30 = v3;
  v16 = v15(a1);
  sub_1BE198F48(v16, (_BYTE *)v38 + 1);
  swift_bridgeObjectRelease();
  v17 = BYTE1(v38[0]);
  if (BYTE1(v38[0]) > 1u)
    goto LABEL_11;
  swift_getAtKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16)
                                                                    + 8)
                                                        + 32))(v38, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (LOBYTE(v38[0]) > v17)
    v17 = LOBYTE(v38[0]);
  BYTE1(v38[0]) = v17;
  if (v17 > 1)
    goto LABEL_11;
  swift_getAtKeyPath();
  v19 = swift_getAssociatedConformanceWitness();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 8) + 32))(v38, v8);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
  if (LOBYTE(v38[0]) > v17)
    v17 = LOBYTE(v38[0]);
  BYTE1(v38[0]) = v17;
  if (v17 > 1)
  {
LABEL_11:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v20 = v26;
    swift_getAtKeyPath();
    v21 = v28;
    v22 = swift_getAssociatedConformanceWitness();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 16) + 8) + 32))(v38, v21);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v21);
    v23 = LOBYTE(v38[0]);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v23 > v17)
      LOBYTE(v17) = v23;
  }
  *v35 = v17;
  return result;
}

uint64_t CRStruct_3<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t i;
  unint64_t v35;
  int64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v44 = a6;
  v49 = a5;
  v56 = a4;
  v8 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v51 = (char *)&v41 - v9;
  v50 = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v52 = (char *)&v41 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  v54 = v11;
  v55 = v12;
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v41 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F3A0);
  v60 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 64))(&v64, a2, v8);
  v53 = v64;
  v18 = v66;
  v61 = v65;
  v48 = v67;
  v62 = v68;
  v63 = v69;
  v43 = v70;
  v58 = v72;
  v59 = v71;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDFDDDB0();
  sub_1BE1B377C();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v19 = v15;
  v20 = v54;
  v64 = v53;
  v65 = v61;
  v21 = v57;
  sub_1BE1B32B4();
  if (v21)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v17, v19);
  }
  v42 = v8;
  v53 = a2;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v20);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v64 = v48;
  v65 = v62;
  swift_bridgeObjectRetain();
  v22 = v50;
  sub_1BE1B32B4();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v52, v22);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v64 = v43;
  v65 = v59;
  swift_bridgeObjectRetain();
  v24 = AssociatedTypeWitness;
  sub_1BE1B32B4();
  v55 = v18;
  v56 = v17;
  v57 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v24);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v42 + 8) + 24))(v53);
  v25 = result;
  v26 = 0;
  v27 = result + 64;
  v28 = 1 << *(_BYTE *)(result + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(result + 64);
  v31 = (unint64_t)(v28 + 63) >> 6;
  if (!v30)
    goto LABEL_7;
LABEL_6:
  v32 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  for (i = v32 | (v26 << 6); ; i = __clz(__rbit64(v35)) + (v26 << 6))
  {
    v37 = (uint64_t *)(*(_QWORD *)(v25 + 48) + 16 * i);
    v38 = *v37;
    v39 = v37[1];
    v73 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * i);
    v64 = v38;
    v65 = v39;
    sub_1BDFDDDF4();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BE1B32B4();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v30)
      goto LABEL_6;
LABEL_7:
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v26 >= v31)
      goto LABEL_24;
    v35 = *(_QWORD *)(v27 + 8 * v26);
    if (!v35)
      break;
LABEL_17:
    v30 = (v35 - 1) & v35;
  }
  v36 = v26 + 1;
  if (v26 + 1 >= v31)
    goto LABEL_24;
  v35 = *(_QWORD *)(v27 + 8 * v36);
  if (v35)
    goto LABEL_16;
  v36 = v26 + 2;
  if (v26 + 2 >= v31)
    goto LABEL_24;
  v35 = *(_QWORD *)(v27 + 8 * v36);
  if (v35)
    goto LABEL_16;
  v36 = v26 + 3;
  if (v26 + 3 >= v31)
  {
LABEL_24:
    v40 = v60;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v56, v57);
  }
  v35 = *(_QWORD *)(v27 + 8 * v36);
  if (v35)
  {
LABEL_16:
    v26 = v36;
    goto LABEL_17;
  }
  while (1)
  {
    v26 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v26 >= v31)
      goto LABEL_24;
    v35 = *(_QWORD *)(v27 + 8 * v26);
    ++v36;
    if (v35)
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t CRStruct_4.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[12];

  v50 = a1;
  v62 = a4;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v60 = AssociatedTypeWitness;
  v61 = v9;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v58 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v59 = (char *)&v42 - v12;
  v55 = swift_getAssociatedTypeWitness();
  v56 = *(_QWORD *)(v55 - 8);
  v13 = MEMORY[0x1E0C80A78](v55);
  v53 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v54 = (char *)&v42 - v15;
  v49 = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(v49 - 8);
  v16 = MEMORY[0x1E0C80A78](v49);
  v46 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v48 = (char *)&v42 - v18;
  v19 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16);
  v43 = v4;
  v23(a4, v4, a2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 80))(v68, a2, v7);
  v25 = v68[1];
  v24 = v68[2];
  v66 = v68[7];
  v67 = v68[4];
  v64 = v68[8];
  v65 = v68[5];
  v57 = v68[10];
  v52 = v68[11];
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_getAtKeyPath();
  swift_release();
  v45 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v27 = v50;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 24))(v50, v19);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v19);
  swift_setAtWritableKeyPath();
  swift_bridgeObjectRetain_n();
  v63 = v24;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v28 = v46;
  swift_getAtKeyPath();
  swift_release();
  v29 = v49;
  v30 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 + 16) + 24))(v27, v29);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v28, v29);
  swift_setAtWritableKeyPath();
  v47 = v25;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v31 = v53;
  swift_getAtKeyPath();
  swift_release();
  v32 = v45;
  v33 = v55;
  v34 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 + 16) + 24))(v27, v33);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v33);
  swift_setAtWritableKeyPath();
  swift_release();
  swift_retain_n();
  v35 = v58;
  swift_getAtKeyPath();
  swift_release();
  v36 = v60;
  v37 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 + 16) + 24))(v27, v36);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v35, v36);
  swift_setAtWritableKeyPath();
  swift_release();
  v38 = *(_QWORD *)(v32 + 8);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 24))(a2, v38);
  swift_bridgeObjectRetain();
  v40 = sub_1BE0A03A8(v39, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v40, a2, v38);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static CRStruct_4.fieldKeys.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[11];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)(a2 + 8) + 80))(v12);
  v3 = v12[0];
  v2 = v12[1];
  v4 = v12[3];
  v5 = v12[4];
  v7 = v12[6];
  v6 = v12[7];
  v8 = v12[10];
  v11 = v12[9];
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2898);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BE1B6910;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v9 + 32) = v3;
  *(_QWORD *)(v9 + 40) = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 48) = v4;
  *(_QWORD *)(v9 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 64) = v7;
  *(_QWORD *)(v9 + 72) = v6;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v9 + 80) = v11;
  *(_QWORD *)(v9 + 88) = v8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t CRStruct_4.merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_QWORD *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  _BYTE *v17;
  void (*v18)(_QWORD *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  void (*v22)(_QWORD *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void (*v26)(_QWORD *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD *, _QWORD);
  _BYTE v33[16];
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[13];

  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v44 = AssociatedTypeWitness;
  v45 = v6;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v42 = &v33[-v7];
  v40 = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v39 = &v33[-v8];
  v35 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v34 = &v33[-v9];
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v33[-v12];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 80))(v51, a2, v4);
  v14 = v51[2];
  v47 = v51[1];
  v48 = v51[5];
  v49 = v51[7];
  v50 = v51[4];
  v36 = v51[8];
  v43 = v51[10];
  v38 = v51[11];
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_getAtKeyPath();
  swift_release();
  v15 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v13, v10);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  v15(v51, 0);
  swift_bridgeObjectRetain_n();
  v46 = v14;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v17 = v34;
  swift_getAtKeyPath();
  swift_release();
  v18 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v19 = v35;
  v20 = swift_getAssociatedConformanceWitness();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v20 + 8) + 8))(v17, v19);
  (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v17, v19);
  v18(v51, 0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v21 = v39;
  swift_getAtKeyPath();
  swift_release();
  v22 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v23 = v40;
  v24 = swift_getAssociatedConformanceWitness();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v24 + 8) + 8))(v21, v23);
  (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v21, v23);
  v22(v51, 0);
  swift_release();
  swift_retain_n();
  v25 = v42;
  swift_getAtKeyPath();
  swift_release();
  v26 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v27 = v44;
  v28 = swift_getAssociatedConformanceWitness();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v28 + 8) + 8))(v25, v27);
  (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v25, v27);
  v26(v51, 0);
  swift_release();
  v29 = *(_QWORD *)(v4 + 8);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(a2, v29);
  v31 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v29 + 40))(v51, a2, v29);
  sub_1BDDC8334(v30);
  swift_bridgeObjectRelease();
  v31(v51, 0);
  (*(void (**)(uint64_t, uint64_t))(v29 + 64))(a2, v29);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_4.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *__return_ptr, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  BOOL v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int *TupleTypeMetadata;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  char *v119;
  void (**v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  _QWORD v126[12];

  v121 = a2;
  v122 = a1;
  v116 = a5;
  v6 = *(_QWORD *)(a4 + 8);
  v118 = &associated type descriptor for CRStruct_Base_4.Type_1;
  swift_getAssociatedTypeWitness();
  v119 = (char *)&associated conformance descriptor for CRStruct_Base_4.CRStruct_Base_4.Type_1: CRDT;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v126[0] = sub_1BE1B2EE8();
  v120 = (void (**)(char *, char *, uint64_t))&associated type descriptor for CRStruct_Base_4.Type_2;
  swift_getAssociatedTypeWitness();
  v123 = (char *)&associated conformance descriptor for CRStruct_Base_4.CRStruct_Base_4.Type_2: CRDT;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v126[1] = sub_1BE1B2EE8();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v126[2] = sub_1BE1B2EE8();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v126[3] = sub_1BE1B2EE8();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v82 = (char *)&v78 - v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v108 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v105 = AssociatedTypeWitness;
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v106 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v103 = (char *)&v78 - v11;
  v104 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v81 = swift_getAssociatedTypeWitness();
  v113 = sub_1BE1B2EE8();
  v112 = *(_QWORD *)(v113 - 8);
  v12 = MEMORY[0x1E0C80A78](v113);
  v111 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v124 = (char *)&v78 - v14;
  v15 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v15 - 8);
  v97 = v15;
  v100 = v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v99 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v94 = (char *)&v78 - v19;
  v96 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v80 = swift_getAssociatedTypeWitness();
  v110 = sub_1BE1B2EE8();
  v109 = *(_QWORD *)(v110 - 8);
  v20 = MEMORY[0x1E0C80A78](v110);
  v107 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v125 = (char *)&v78 - v22;
  v23 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v23 - 8);
  v88 = v23;
  v91 = v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v89 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v86 = (char *)&v78 - v27;
  v87 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v79 = swift_getAssociatedTypeWitness();
  v98 = sub_1BE1B2EE8();
  v120 = *(void (***)(char *, char *, uint64_t))(v98 - 8);
  v28 = MEMORY[0x1E0C80A78](v98);
  v95 = (char *)&v78 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v123 = (char *)&v78 - v30;
  v31 = swift_getAssociatedTypeWitness();
  v84 = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v78 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v78 - v35;
  v37 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v93 = swift_getAssociatedTypeWitness();
  v102 = sub_1BE1B2EE8();
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102);
  v119 = (char *)&v78 - v38;
  v39 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 80);
  v115 = a3;
  v114 = v6;
  v39(v126, a3, v6);
  v117 = v126[4];
  v118 = (void *)v126[7];
  v85 = v126[8];
  v92 = v126[10];
  v90 = v126[11];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 32))(v34, v121, v31, v37);
  v40 = *(void (**)(char *, uint64_t))(v84 + 8);
  v40(v34, v31);
  v40(v36, v31);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v41 = v86;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v42 = v89;
  swift_getAtKeyPath();
  swift_release();
  v43 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v42, v121, v88);
  v44 = *(void (**)(char *, uint64_t))(v91 + 8);
  v44(v42, v43);
  v44(v41, v43);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v45 = v94;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v46 = v99;
  swift_getAtKeyPath();
  swift_release();
  v47 = v121;
  v48 = v97;
  (*(void (**)(char *))(v96 + 32))(v46);
  v49 = *(void (**)(char *, uint64_t))(v100 + 8);
  v49(v46, v48);
  v49(v45, v48);
  swift_retain();
  v50 = v103;
  swift_getAtKeyPath();
  swift_release();
  swift_retain();
  v51 = v106;
  swift_getAtKeyPath();
  swift_release();
  v52 = v51;
  v53 = v47;
  v54 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 32))(v51, v53, v105);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v55 = *(void (**)(char *, uint64_t))(v108 + 8);
  v56 = v54;
  v57 = v95;
  v55(v52, v56);
  v58 = v50;
  v59 = v98;
  v55(v58, v56);
  v60 = 1;
  LODWORD(v55) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v93 - 8) + 48))(v119, 1);
  v120[2](v57, v123, v59);
  if ((_DWORD)v55 == 1)
    v60 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v79 - 8) + 48))(v57, 1) != 1;
  v61 = v120[1];
  ((void (*)(char *, uint64_t))v61)(v57, v59);
  v62 = v109;
  v63 = v107;
  v64 = v110;
  (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v107, v125, v110);
  v65 = v60 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v80 - 8) + 48))(v63, 1) != 1;
  v66 = v113;
  v67 = v112;
  v68 = v111;
  v69 = *(void (**)(char *, uint64_t))(v62 + 8);
  v69(v63, v64);
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v68, v124, v66);
  if (v65 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v68, 1) != 1)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v66);
    v73 = &v82[TupleTypeMetadata[12]];
    v74 = &v82[TupleTypeMetadata[16]];
    v75 = &v82[TupleTypeMetadata[20]];
    (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v82, v119, v102);
    v120[4](v73, v123, v59);
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v74, v125, v64);
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v75, v124, v66);
    v76 = swift_getAssociatedTypeWitness();
    v77 = v116;
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v77, 0, 1, v76);
  }
  else
  {
    v70 = *(void (**)(char *, uint64_t))(v67 + 8);
    v70(v68, v66);
    v70(v124, v66);
    v69(v125, v64);
    ((void (*)(char *, uint64_t))v61)(v123, v59);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v119, v102);
    v71 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v116, 1, 1, v71);
  }
}

uint64_t CRStruct_4.hasDelta(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  void (*v24)(char *, uint64_t);
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  char v44;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t AssociatedTypeWitness;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[12];

  v72 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v52 = (char *)&v51 - v7;
  v59 = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(v59 - 8);
  v8 = MEMORY[0x1E0C80A78](v59);
  v57 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v56 = (char *)&v51 - v10;
  v63 = swift_getAssociatedTypeWitness();
  v62 = *(_QWORD *)(v63 - 8);
  v11 = MEMORY[0x1E0C80A78](v63);
  v61 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v60 = (char *)&v51 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v51 - v19;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 80))(v73, a2, v4);
  v21 = v73[1];
  v22 = v73[2];
  v69 = v73[8];
  v70 = v73[7];
  v68 = v73[10];
  v66 = v73[4];
  v67 = v73[11];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  v71 = v21;
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  v64 = v4;
  v65 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(v21) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v18, v14, AssociatedConformanceWitness);
  v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v18, v14);
  v24(v20, v14);
  if ((v21 & 1) != 0)
    goto LABEL_6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v25 = v60;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v26 = v61;
  swift_getAtKeyPath();
  swift_release();
  v27 = v63;
  v28 = swift_getAssociatedConformanceWitness();
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 72))(v26, v27, v28);
  v30 = *(void (**)(char *, uint64_t))(v62 + 8);
  v30(v26, v27);
  v30(v25, v27);
  if ((v29 & 1) != 0)
    goto LABEL_6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v31 = v56;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v63 = v22;
  v32 = v57;
  swift_getAtKeyPath();
  swift_release();
  v33 = v59;
  v34 = swift_getAssociatedConformanceWitness();
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 72))(v32, v33, v34);
  v36 = *(void (**)(char *, uint64_t))(v58 + 8);
  v36(v32, v33);
  v36(v31, v33);
  if ((v35 & 1) != 0)
    goto LABEL_6;
  swift_retain();
  v37 = v52;
  swift_getAtKeyPath();
  swift_release();
  swift_retain();
  v38 = v53;
  swift_getAtKeyPath();
  swift_release();
  v39 = v64;
  v40 = AssociatedTypeWitness;
  v41 = swift_getAssociatedConformanceWitness();
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 72))(v38, v40, v41);
  v43 = *(void (**)(char *, uint64_t))(v54 + 8);
  v43(v38, v40);
  v43(v37, v40);
  if ((v42 & 1) != 0)
  {
LABEL_6:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v44 = 1;
  }
  else
  {
    v46 = *(_QWORD *)(v39 + 8);
    v47 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 24);
    v48 = v65;
    v49 = v47(v65, v46);
    v50 = v47(v48, v46);
    v44 = sub_1BDDB1F18(v50, v49);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v71 = v50;
  }
  swift_bridgeObjectRelease();
  return v44 & 1;
}

uint64_t CRStruct_4.actionUndoingDifference(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  BOOL v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  int *TupleTypeMetadata;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t AssociatedConformanceWitness;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v114 = a1;
  v109 = a4;
  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v103 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v100 = AssociatedTypeWitness;
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v101 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v112 = (char *)&v76 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v78 = swift_getAssociatedTypeWitness();
  v108 = sub_1BE1B2EE8();
  v107 = *(_QWORD *)(v108 - 8);
  v10 = MEMORY[0x1E0C80A78](v108);
  v105 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v117 = (char *)&v76 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v94 = v13;
  v96 = v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v95 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v90 = (char *)&v76 - v17;
  v93 = swift_getAssociatedConformanceWitness();
  v77 = swift_getAssociatedTypeWitness();
  v106 = sub_1BE1B2EE8();
  v104 = *(_QWORD *)(v106 - 8);
  v18 = MEMORY[0x1E0C80A78](v106);
  v102 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v116 = (char *)&v76 - v20;
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v84 = v21;
  v87 = v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v85 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v82 = (char *)&v76 - v25;
  v83 = swift_getAssociatedConformanceWitness();
  v76 = swift_getAssociatedTypeWitness();
  v91 = sub_1BE1B2EE8();
  v113 = *(_QWORD *)(v91 - 8);
  v26 = MEMORY[0x1E0C80A78](v91);
  v92 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v115 = (char *)&v76 - v28;
  v29 = swift_getAssociatedTypeWitness();
  v80 = *(_QWORD *)(v29 - 8);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v76 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v76 - v33;
  v35 = swift_getAssociatedConformanceWitness();
  v89 = swift_getAssociatedTypeWitness();
  v99 = sub_1BE1B2EE8();
  v97 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v111 = (char *)&v76 - v36;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 80))(&v118, a2, v5);
  v37 = v122;
  v110 = v123;
  v81 = v124;
  v88 = v125;
  v86 = v126;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 56))(v32, v29, v35);
  v38 = *(void (**)(char *, uint64_t))(v80 + 8);
  v38(v32, v29);
  v38(v34, v29);
  swift_bridgeObjectRetain();
  swift_retain();
  v39 = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v40 = v82;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v41 = v85;
  swift_getAtKeyPath();
  swift_release();
  v42 = v84;
  (*(void (**)(char *, uint64_t))(v83 + 56))(v41, v84);
  v43 = *(void (**)(char *, uint64_t))(v87 + 8);
  v43(v41, v42);
  v43(v40, v42);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v44 = v90;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  v79 = v39;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v45 = v95;
  swift_getAtKeyPath();
  swift_release();
  v46 = v94;
  (*(void (**)(char *, uint64_t))(v93 + 56))(v45, v94);
  v47 = *(void (**)(char *, uint64_t))(v96 + 8);
  v47(v45, v46);
  v47(v44, v46);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_retain();
  v48 = v101;
  swift_getAtKeyPath();
  swift_release();
  v49 = v91;
  v50 = v48;
  v51 = v100;
  (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 56))(v48, v100);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v52 = v92;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v53 = *(void (**)(char *, uint64_t))(v103 + 8);
  v53(v50, v51);
  v53(v112, v51);
  v54 = 1;
  LODWORD(v53) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v89 - 8) + 48))(v111, 1);
  v55 = v49;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v52, v115, v49);
  if ((_DWORD)v53 == 1)
    v54 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v52, 1) != 1;
  v56 = *(void (**)(char *, uint64_t))(v113 + 8);
  v56(v52, v49);
  v57 = v104;
  v58 = v102;
  v59 = v106;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v102, v116, v106);
  v60 = v54 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v58, 1) != 1;
  v61 = v108;
  v62 = v107;
  v63 = v105;
  v64 = *(void (**)(char *, uint64_t))(v57 + 8);
  v64(v58, v59);
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v63, v117, v61);
  if (v60 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v63, 1) != 1)
  {
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v61);
    v69 = v59;
    v70 = v99;
    v118 = v99;
    v119 = v55;
    v120 = v69;
    v121 = v61;
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v72 = v57;
    v73 = v109;
    v74 = v109 + TupleTypeMetadata[12];
    v75 = v109 + TupleTypeMetadata[16];
    v114 = v109 + TupleTypeMetadata[20];
    (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v109, v111, v70);
    (*(void (**)(uint64_t, char *, uint64_t))(v113 + 32))(v74, v115, v55);
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v75, v116, v69);
    (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v114, v117, v61);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)TupleTypeMetadata - 1) + 56))(v73, 0, 1, TupleTypeMetadata);
  }
  else
  {
    v65 = *(void (**)(char *, uint64_t))(v62 + 8);
    v65(v63, v61);
    v65(v117, v61);
    v64(v116, v59);
    v56(v115, v55);
    v66 = v99;
    (*(void (**)(char *, uint64_t))(v97 + 8))(v111, v99);
    v118 = v66;
    v119 = v55;
    v120 = v59;
    v121 = v61;
    v67 = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v109, 1, 1, v67);
  }
}

uint64_t CRStruct_4.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *TupleTypeMetadata;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t *, _QWORD);
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  void (**v42)(char *, char *, uint64_t);
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(uint64_t *, _QWORD);
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  void (**v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(uint64_t *, _QWORD);
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void (*v77)(uint64_t *, _QWORD);
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t AssociatedConformanceWitness;
  uint64_t v102;
  void (**v103)(char *, char *, uint64_t);
  void (**v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(char *, uint64_t, int *);
  void (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v119 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v102 = AssociatedTypeWitness;
  v86 = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  v110 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v100 = (char *)&v82 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v98 = swift_getAssociatedConformanceWitness();
  v99 = v8;
  v85 = swift_getAssociatedTypeWitness();
  v9 = sub_1BE1B2EE8();
  v108 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v97 = (char *)&v82 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v90 = swift_getAssociatedConformanceWitness();
  v91 = v11;
  v84 = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  v104 = *(void (***)(char *, uint64_t))(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v89 = (char *)&v82 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v87 = swift_getAssociatedConformanceWitness();
  v88 = v14;
  v15 = swift_getAssociatedTypeWitness();
  v120 = sub_1BE1B2EE8();
  v121 = v12;
  v109 = v9;
  v122 = v9;
  v123 = v6;
  v111 = v6;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v17 = sub_1BE1B2EE8();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v96 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v92 = (char *)&v82 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v82 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v82 - v26;
  v83 = v15;
  v28 = sub_1BE1B2EE8();
  v103 = *(void (***)(char *, char *, uint64_t))(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v82 - v29;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 80))(&v120, a2, v4);
  v31 = v121;
  v32 = v122;
  v115 = v125;
  v116 = v124;
  v107 = v126;
  v114 = v127;
  v95 = v128;
  v94 = v129;
  swift_bridgeObjectRetain();
  v117 = v32;
  swift_retain();
  v118 = v31;
  swift_bridgeObjectRelease();
  v113 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v113(v27, v119, v17);
  v112 = *(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)TupleTypeMetadata - 1) + 48);
  v33 = v112(v27, 1, TupleTypeMetadata);
  v106 = v12;
  v105 = v18;
  if (v33 == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v30, 1, 1);
  }
  else
  {
    v34 = &v27[TupleTypeMetadata[12]];
    v35 = &v27[TupleTypeMetadata[16]];
    v36 = &v27[TupleTypeMetadata[20]];
    v103[4](v30, v27, v28);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v36, v111);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v35, v109);
    v104[1](v34, v12);
  }
  v37 = v28;
  v38 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v39 = v87;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 64);
  v41 = swift_checkMetadataState();
  v40(v30, v41, v39);
  v42 = (void (**)(char *, char *, uint64_t))v103[1];
  ((void (*)(char *, uint64_t))v42)(v30, v37);
  v38(&v120, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  v113(v25, v119, v17);
  v43 = v112(v25, 1, TupleTypeMetadata);
  v44 = v89;
  v93 = v37;
  v103 = v42;
  if (v43 == 1)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v25, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v44, 1, 1);
    v45 = v106;
    v46 = v17;
    v47 = v104;
  }
  else
  {
    v48 = &v25[TupleTypeMetadata[16]];
    v49 = &v25[TupleTypeMetadata[20]];
    v46 = v17;
    v47 = v104;
    v45 = v106;
    v104[4](v89, (uint64_t)&v25[TupleTypeMetadata[12]]);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v49, v111);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v48, v109);
    ((void (*)(char *, uint64_t))v42)(v25, v37);
  }
  v50 = v44;
  v51 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v52 = v90;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 64);
  v54 = swift_checkMetadataState();
  v53(v50, v54, v52);
  v55 = (void (**)(char *, uint64_t))v47[1];
  v56 = v50;
  v57 = v45;
  ((void (*)(char *, uint64_t))v55)(v56, v45);
  v51(&v120, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v58 = v92;
  v113(v92, v119, v46);
  v59 = v112(v58, 1, TupleTypeMetadata);
  v60 = v46;
  v104 = v55;
  if (v59 == 1)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v58, v46);
    v61 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v97, 1, 1);
    v62 = v108;
    v63 = v109;
  }
  else
  {
    v64 = &v58[TupleTypeMetadata[12]];
    v65 = &v58[TupleTypeMetadata[20]];
    v62 = v108;
    v61 = v97;
    v63 = v109;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v97, &v58[TupleTypeMetadata[16]], v109);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v65, v111);
    ((void (*)(char *, uint64_t))v55)(v64, v57);
    ((void (*)(char *, uint64_t))v103)(v58, v93);
  }
  v66 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v67 = v98;
  v68 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 64);
  v69 = swift_checkMetadataState();
  v68(v61, v69, v67);
  v70 = *(void (**)(char *, uint64_t))(v62 + 8);
  v70(v61, v63);
  v66(&v120, 0);
  swift_release();
  swift_retain();
  v71 = v96;
  v113(v96, v119, v60);
  if (v112(v71, 1, TupleTypeMetadata) == 1)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v71, v60);
    v72 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v100, 1, 1);
    v73 = v111;
    v74 = v110;
  }
  else
  {
    v75 = &v71[TupleTypeMetadata[12]];
    v76 = &v71[TupleTypeMetadata[16]];
    v74 = v110;
    v72 = v100;
    v73 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v100, &v71[TupleTypeMetadata[20]], v111);
    v70(v76, v63);
    ((void (*)(char *, uint64_t))v104)(v75, v106);
    ((void (*)(char *, uint64_t))v103)(v71, v93);
  }
  v77 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v78 = AssociatedConformanceWitness;
  v79 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v80 = swift_checkMetadataState();
  v79(v72, v80, v78);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v72, v73);
  v77(&v120, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_4.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[13];

  v31 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v39 = AssociatedTypeWitness;
  v40 = v6;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v38 = (char *)v29 - v7;
  v35 = swift_getAssociatedTypeWitness();
  v37 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v34 = (char *)v29 - v8;
  v30 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v29[0] = (char *)v29 - v9;
  v10 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v29 - v12;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 80))(v44, a2, v4);
  v14 = v44[1];
  v41 = v44[5];
  v42 = v44[7];
  v43 = v44[4];
  v29[2] = v44[8];
  v36 = v44[10];
  v33 = v44[11];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = v31;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 40))(v31, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v17 = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v18 = v29[0];
  swift_getAtKeyPath();
  swift_release();
  v19 = v30;
  v20 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 + 16) + 40))(v16, v19);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v18, v19);
  v29[1] = v17;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v21 = v34;
  swift_getAtKeyPath();
  swift_release();
  v22 = v35;
  v23 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 + 16) + 40))(v16, v22);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v21, v22);
  swift_retain();
  v24 = v38;
  swift_getAtKeyPath();
  swift_release();
  v25 = v39;
  v26 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 + 16) + 40))(v16, v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v24, v25);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 24))(a2);
  sub_1BDDB1100(v16, v27);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall CRStruct_4.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t AssociatedTypeWitness;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  _QWORD v63[12];

  v3 = v2;
  v4 = v0;
  v5 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v43 = (char *)&v42 - v6;
  v48 = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v46 = (char *)&v42 - v7;
  v51 = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(v51 - 8);
  v8 = MEMORY[0x1E0C80A78](v51);
  v49 = (char *)&v42 - v9;
  v52 = *(_QWORD *)(v4 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v60 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v62 = (char *)&v42 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v42 - v14;
  v16 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v42 - v18;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 80))(v63, v4, v5);
  v20 = v63[1];
  v21 = v63[2];
  v61 = v63[5];
  v56 = v63[7];
  v57 = v63[4];
  v54 = v63[10];
  v55 = v63[8];
  v53 = v63[11];
  swift_bridgeObjectRetain();
  swift_retain();
  v59 = v20;
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  v58 = v21;
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(v20) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 48))(v16);
  v23 = *(void (**)(char *, uint64_t))(v17 + 8);
  v24 = v52;
  v23(v19, v16);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v25(v15, v3, v4);
  if ((v20 & 1) != 0)
  {
    v26 = *(void (**)(char *, uint64_t))(v24 + 8);
    v26(v15, v4);
    v27 = v62;
    v25(v62, v3, v4);
    v28 = v60;
    v29 = v27;
LABEL_5:
    v26(v29, v4);
    v25(v28, v3, v4);
    goto LABEL_6;
  }
  v30 = v49;
  swift_getAtKeyPath();
  v31 = v51;
  v32 = swift_getAssociatedConformanceWitness();
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v32 + 16) + 48))(v31);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v31);
  v26 = *(void (**)(char *, uint64_t))(v24 + 8);
  v26(v15, v4);
  v25(v62, v3, v4);
  if ((v33 & 1) != 0)
  {
    v28 = v60;
    v29 = v62;
    goto LABEL_5;
  }
  v36 = v46;
  swift_getAtKeyPath();
  v37 = v48;
  v38 = swift_getAssociatedConformanceWitness();
  LODWORD(v52) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v38 + 16) + 48))(v37);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v37);
  v26(v62, v4);
  v28 = v60;
  v25(v60, v3, v4);
  if ((v52 & 1) == 0)
  {
    v39 = v43;
    swift_getAtKeyPath();
    v40 = AssociatedTypeWitness;
    v41 = swift_getAssociatedConformanceWitness();
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v41 + 16) + 48))(v40);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v40);
    v26(v28, v4);
    return v34 & 1;
  }
LABEL_6:
  v26(v28, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v34 = 1;
  return v34 & 1;
}

uint64_t CRStruct_4.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *, _QWORD);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t *, _QWORD);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t *, _QWORD);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t *, _QWORD);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)(a3 + 8) + 80))(&v21, a2, *(_QWORD *)(a3 + 8));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  v4 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 56);
  v7 = swift_checkMetadataState();
  v6(a1, v7, v5);
  v4(&v21, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  v8 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
  v11 = swift_checkMetadataState();
  v10(a1, v11, v9);
  v8(&v21, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v12 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 56);
  v15 = swift_checkMetadataState();
  v14(a1, v15, v13);
  v12(&v21, 0);
  swift_release();
  swift_retain();
  v16 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 56);
  v19 = swift_checkMetadataState();
  v18(a1, v19, v17);
  v16(&v21, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release_n();
}

uint64_t CRStruct_4.minEncodingVersion.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  unsigned int v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[13];

  v42 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)&v28 - v6;
  v34 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v32 = (char *)&v28 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v35 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - v9;
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v28 - v13;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v5 + 80))((char *)v46 + 1, a1, v5);
  v40 = *(_QWORD *)((char *)&v46[4] + 1);
  v41 = *(_QWORD *)((char *)&v46[1] + 1);
  v44 = *(_QWORD *)((char *)&v46[5] + 1);
  v45 = *(_QWORD *)((char *)&v46[2] + 1);
  v43 = *(_QWORD *)((char *)&v46[8] + 1);
  v38 = *(_QWORD *)((char *)&v46[10] + 1);
  v39 = *(_QWORD *)((char *)&v46[7] + 1);
  v37 = *(_QWORD *)((char *)&v46[11] + 1);
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 24);
  v36 = v3;
  v16 = v15(a1);
  sub_1BE198F48(v16, (_BYTE *)v46 + 1);
  swift_bridgeObjectRelease();
  v17 = BYTE1(v46[0]);
  if (BYTE1(v46[0]) > 1u)
    goto LABEL_14;
  swift_getAtKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16)
                                                                    + 8)
                                                        + 32))(v46, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (LOBYTE(v46[0]) > v17)
    v17 = LOBYTE(v46[0]);
  BYTE1(v46[0]) = v17;
  if (v17 > 1)
    goto LABEL_14;
  swift_getAtKeyPath();
  v19 = swift_getAssociatedConformanceWitness();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 8) + 32))(v46, v8);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v8);
  if (LOBYTE(v46[0]) > v17)
    v17 = LOBYTE(v46[0]);
  BYTE1(v46[0]) = v17;
  if (v17 > 1)
    goto LABEL_14;
  v20 = v32;
  swift_getAtKeyPath();
  v21 = v34;
  v22 = swift_getAssociatedConformanceWitness();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 16) + 8) + 32))(v46, v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v21);
  if (LOBYTE(v46[0]) > v17)
    v17 = LOBYTE(v46[0]);
  BYTE1(v46[0]) = v17;
  if (v17 > 1)
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v23 = v29;
    swift_getAtKeyPath();
    v24 = AssociatedTypeWitness;
    v25 = swift_getAssociatedConformanceWitness();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 16) + 8) + 32))(v46, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v24);
    v26 = LOBYTE(v46[0]);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v26 > v17)
      LOBYTE(v17) = v26;
  }
  *v42 = v17;
  return result;
}

uint64_t CRStruct_4<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  unint64_t i;
  unint64_t v43;
  int64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v51 = a7;
  v57 = a6;
  v61 = a5;
  v68 = a4;
  v9 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v52 = (char *)&v49 - v10;
  v58 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v63 = (char *)&v49 - v11;
  v62 = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v64 = (char *)&v49 - v12;
  v66 = swift_getAssociatedTypeWitness();
  v67 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v14 = (char *)&v49 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52F3A0);
  v71 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 80);
  v49 = a2;
  v18(&v77, a2, v9);
  v19 = v78;
  v65 = v77;
  v20 = v79;
  v59 = v80;
  v72 = v81;
  v73 = v82;
  v56 = v83;
  v74 = v84;
  v75 = v85;
  v50 = v86;
  v70 = v87;
  v76 = v88;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BDFDDDB0();
  v21 = v20;
  sub_1BE1B377C();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  v77 = v65;
  v78 = v19;
  v22 = v17;
  v23 = v66;
  v24 = v69;
  sub_1BE1B32B4();
  if (v24)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v14, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v22, v15);
  }
  v65 = v9;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v14, v23);
  swift_bridgeObjectRetain();
  swift_retain();
  v25 = v72;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  v77 = v59;
  v78 = v25;
  v26 = v62;
  sub_1BE1B32B4();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v26);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v28 = v74;
  swift_bridgeObjectRetain();
  v69 = v15;
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v77 = v56;
  v78 = v28;
  v29 = v58;
  sub_1BE1B32B4();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v63, v29);
  swift_retain();
  v30 = v52;
  swift_getAtKeyPath();
  swift_release();
  v31 = swift_bridgeObjectRetain();
  v77 = v50;
  v78 = v31;
  v32 = AssociatedTypeWitness;
  sub_1BE1B32B4();
  v66 = v21;
  v67 = v19;
  v68 = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v65 + 8) + 24))(v49);
  v33 = result;
  v34 = 0;
  v35 = result + 64;
  v36 = 1 << *(_BYTE *)(result + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & *(_QWORD *)(result + 64);
  v39 = (unint64_t)(v36 + 63) >> 6;
  if (!v38)
    goto LABEL_7;
LABEL_6:
  v40 = __clz(__rbit64(v38));
  v38 &= v38 - 1;
  for (i = v40 | (v34 << 6); ; i = __clz(__rbit64(v43)) + (v34 << 6))
  {
    v45 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * i);
    v46 = *v45;
    v47 = v45[1];
    v89 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * i);
    v77 = v46;
    v78 = v47;
    sub_1BDFDDDF4();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BE1B32B4();
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v38)
      goto LABEL_6;
LABEL_7:
    if (__OFADD__(v34++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v34 >= v39)
      goto LABEL_24;
    v43 = *(_QWORD *)(v35 + 8 * v34);
    if (!v43)
      break;
LABEL_17:
    v38 = (v43 - 1) & v43;
  }
  v44 = v34 + 1;
  if (v34 + 1 >= v39)
    goto LABEL_24;
  v43 = *(_QWORD *)(v35 + 8 * v44);
  if (v43)
    goto LABEL_16;
  v44 = v34 + 2;
  if (v34 + 2 >= v39)
    goto LABEL_24;
  v43 = *(_QWORD *)(v35 + 8 * v44);
  if (v43)
    goto LABEL_16;
  v44 = v34 + 3;
  if (v34 + 3 >= v39)
  {
LABEL_24:
    v48 = v71;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v68, v69);
  }
  v43 = *(_QWORD *)(v35 + 8 * v44);
  if (v43)
  {
LABEL_16:
    v34 = v44;
    goto LABEL_17;
  }
  while (1)
  {
    v34 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v34 >= v39)
      goto LABEL_24;
    v43 = *(_QWORD *)(v35 + 8 * v34);
    ++v44;
    if (v43)
      goto LABEL_17;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t CRStruct_5.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t AssociatedTypeWitness;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[15];

  v80 = a1;
  v76 = a4;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v67 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v68 = (char *)&v48 - v10;
  v65 = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(v65 - 8);
  v11 = MEMORY[0x1E0C80A78](v65);
  v62 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v63 = (char *)&v48 - v13;
  v59 = swift_getAssociatedTypeWitness();
  v60 = *(_QWORD *)(v59 - 8);
  v14 = MEMORY[0x1E0C80A78](v59);
  v57 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v58 = (char *)&v48 - v16;
  v55 = swift_getAssociatedTypeWitness();
  v56 = *(_QWORD *)(v55 - 8);
  v17 = MEMORY[0x1E0C80A78](v55);
  v51 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v52 = (char *)&v48 - v19;
  v20 = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  v24 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 96);
  v71 = v7;
  v24(v81, a2, v7);
  v26 = v81[1];
  v25 = v81[2];
  v77 = v81[4];
  v78 = v81[5];
  v79 = v81[7];
  v73 = v81[8];
  v74 = v81[10];
  v75 = v81[11];
  v64 = v81[13];
  v61 = v81[14];
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  v72 = v4;
  swift_getAtKeyPath();
  swift_release();
  v50 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 24))(v80, v20);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v23, v20);
  swift_setAtWritableKeyPath();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v28 = v51;
  swift_getAtKeyPath();
  swift_release();
  v29 = v55;
  v30 = swift_getAssociatedConformanceWitness();
  v31 = v80;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 + 16) + 24))(v80, v29);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v28, v29);
  swift_setAtWritableKeyPath();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v32 = v57;
  swift_getAtKeyPath();
  swift_release();
  v33 = v50;
  v34 = v59;
  v35 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 + 16) + 24))(v31, v34);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v34);
  swift_setAtWritableKeyPath();
  v53 = v26;
  swift_bridgeObjectRetain_n();
  v54 = v25;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v36 = v62;
  swift_getAtKeyPath();
  swift_release();
  v37 = v71;
  v38 = v65;
  v39 = swift_getAssociatedConformanceWitness();
  v40 = v80;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 + 16) + 24))(v80, v38);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v38);
  swift_setAtWritableKeyPath();
  swift_release();
  swift_retain_n();
  v41 = v67;
  swift_getAtKeyPath();
  swift_release();
  v42 = AssociatedTypeWitness;
  v43 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 + 16) + 24))(v40, v42);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v41, v42);
  swift_setAtWritableKeyPath();
  swift_release();
  v44 = *(_QWORD *)(v37 + 8);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 24))(v33, v44);
  swift_bridgeObjectRetain();
  v46 = sub_1BE0A03A8(v45, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v46, v33, v44);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t static CRStruct_5.fieldKeys.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[14];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)(a2 + 8) + 96))(v14);
  v3 = v14[0];
  v2 = v14[1];
  v4 = v14[3];
  v5 = v14[4];
  v6 = v14[7];
  v11 = v14[6];
  v7 = v14[10];
  v8 = v14[13];
  v12 = v14[9];
  v13 = v14[12];
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2898);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BE1B6B50;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v9 + 32) = v3;
  *(_QWORD *)(v9 + 40) = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 48) = v4;
  *(_QWORD *)(v9 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 64) = v11;
  *(_QWORD *)(v9 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 80) = v12;
  *(_QWORD *)(v9 + 88) = v7;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v9 + 96) = v13;
  *(_QWORD *)(v9 + 104) = v8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t CRStruct_5.merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  char *v18;
  void (*v19)(_QWORD *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void (*v23)(_QWORD *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(_QWORD *, _QWORD);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(_QWORD *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD *, _QWORD);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[15];

  v58 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v55 = (char *)&v40 - v5;
  v52 = swift_getAssociatedTypeWitness();
  v53 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v51 = (char *)&v40 - v6;
  v48 = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v47 = (char *)&v40 - v7;
  v43 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v42 = (char *)&v40 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - v11;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 96))(v65, a2, v4);
  v14 = v65[1];
  v13 = v65[2];
  v64 = v65[4];
  v62 = v65[5];
  v63 = v65[7];
  v59 = v65[8];
  v60 = v65[10];
  v61 = v65[11];
  v54 = v65[13];
  v50 = v65[14];
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_getAtKeyPath();
  swift_release();
  v15 = v13;
  v16 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v40 = v4;
  v41 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v16(v65, 0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v18 = v42;
  swift_getAtKeyPath();
  swift_release();
  v19 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v20 = v43;
  v21 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 + 8) + 8))(v18, v20);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v20);
  v19(v65, 0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v22 = v47;
  swift_getAtKeyPath();
  swift_release();
  v23 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v24 = v40;
  v25 = v41;
  v26 = v48;
  v27 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 + 8) + 8))(v22, v26);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v22, v26);
  v23(v65, 0);
  v45 = v14;
  swift_bridgeObjectRetain_n();
  v46 = v15;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  v28 = v51;
  swift_getAtKeyPath();
  swift_release();
  v29 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v30 = v52;
  v31 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 + 8) + 8))(v28, v30);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v30);
  v29(v65, 0);
  swift_release();
  swift_retain_n();
  v32 = v55;
  swift_getAtKeyPath();
  swift_release();
  v33 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v34 = AssociatedTypeWitness;
  v35 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 + 8) + 8))(v32, v34);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v34);
  v33(v65, 0);
  swift_release();
  v36 = *(_QWORD *)(v24 + 8);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 24))(v25, v36);
  v38 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v36 + 40))(v65, v25, v36);
  sub_1BDDC8334(v37);
  swift_bridgeObjectRelease();
  v38(v65, 0);
  (*(void (**)(uint64_t, uint64_t))(v36 + 64))(v25, v36);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_5.observableDifference(from:with:)@<X0>(void (*a1)(char *, _QWORD *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  BOOL v68;
  char *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  BOOL v79;
  void (*v80)(char *, uint64_t);
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  int *TupleTypeMetadata;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  char *v141;
  uint64_t v142;
  void (**v143)(char *, char *, uint64_t);
  char *v144;
  _QWORD *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  void (*v150)(char *, _QWORD *);
  _QWORD v151[4];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v149 = a2;
  v150 = a1;
  v136 = a5;
  v6 = *(_QWORD *)(a4 + 8);
  v140 = &associated type descriptor for CRStruct_Base_5.Type_1;
  swift_getAssociatedTypeWitness();
  v141 = (char *)&associated conformance descriptor for CRStruct_Base_5.CRStruct_Base_5.Type_1: CRDT;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v151[0] = sub_1BE1B2EE8();
  v144 = (char *)&associated type descriptor for CRStruct_Base_5.Type_2;
  swift_getAssociatedTypeWitness();
  v145 = &associated conformance descriptor for CRStruct_Base_5.CRStruct_Base_5.Type_2: CRDT;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v151[1] = sub_1BE1B2EE8();
  v143 = (void (**)(char *, char *, uint64_t))&associated type descriptor for CRStruct_Base_5.Type_3;
  swift_getAssociatedTypeWitness();
  v146 = (char *)&associated conformance descriptor for CRStruct_Base_5.CRStruct_Base_5.Type_3: CRDT;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v151[2] = sub_1BE1B2EE8();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v151[3] = sub_1BE1B2EE8();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v152 = sub_1BE1B2EE8();
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v95 = (char *)&v90 - v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v127 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v125 = AssociatedTypeWitness;
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v126 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v123 = (char *)&v90 - v11;
  v124 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v94 = swift_getAssociatedTypeWitness();
  v137 = sub_1BE1B2EE8();
  v133 = *(_QWORD *)(v137 - 8);
  v12 = MEMORY[0x1E0C80A78](v137);
  v132 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v147 = (char *)&v90 - v14;
  v15 = swift_getAssociatedTypeWitness();
  v119 = *(_QWORD *)(v15 - 8);
  v117 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v118 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v114 = (char *)&v90 - v18;
  v116 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v93 = swift_getAssociatedTypeWitness();
  v131 = sub_1BE1B2EE8();
  v130 = *(_QWORD *)(v131 - 8);
  v19 = MEMORY[0x1E0C80A78](v131);
  v128 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v148 = (char *)&v90 - v21;
  v22 = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(v22 - 8);
  v109 = v22;
  v112 = v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v110 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v106 = (char *)&v90 - v26;
  v108 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v92 = swift_getAssociatedTypeWitness();
  v129 = sub_1BE1B2EE8();
  v143 = *(void (***)(char *, char *, uint64_t))(v129 - 8);
  v27 = MEMORY[0x1E0C80A78](v129);
  v122 = (char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v146 = (char *)&v90 - v29;
  v30 = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(v30 - 8);
  v102 = v30;
  v104 = v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v103 = (char *)&v90 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v100 = (char *)&v90 - v34;
  v101 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v91 = swift_getAssociatedTypeWitness();
  v145 = (_QWORD *)sub_1BE1B2EE8();
  v142 = *(v145 - 1);
  v35 = MEMORY[0x1E0C80A78](v145);
  v115 = (char *)&v90 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v144 = (char *)&v90 - v37;
  v38 = swift_getAssociatedTypeWitness();
  v98 = *(_QWORD *)(v38 - 8);
  v39 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v90 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v90 - v42;
  v44 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v113 = swift_getAssociatedTypeWitness();
  v121 = sub_1BE1B2EE8();
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121);
  v141 = (char *)&v90 - v45;
  v46 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 96);
  v135 = a3;
  v134 = v6;
  v46(v151, a3, v6);
  v47 = v153;
  v138 = v152;
  v139 = v154;
  v99 = v155;
  v140 = v156;
  v105 = v157;
  v111 = v158;
  v107 = v159;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 32))(v41, v149, v38, v44);
  v48 = *(void (**)(char *, uint64_t))(v98 + 8);
  v48(v41, v38);
  v48(v43, v38);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v49 = v100;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v50 = v103;
  swift_getAtKeyPath();
  swift_release();
  v51 = v102;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v50, v149, v102);
  v52 = *(void (**)(char *, uint64_t))(v104 + 8);
  v52(v50, v51);
  v52(v49, v51);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v53 = v106;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v54 = v110;
  swift_getAtKeyPath();
  swift_release();
  v55 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v108 + 32))(v54, v149, v109);
  v56 = *(void (**)(char *, uint64_t))(v112 + 8);
  v56(v54, v55);
  v56(v53, v55);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v57 = v114;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v97 = v47;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v58 = v118;
  swift_getAtKeyPath();
  swift_release();
  v59 = v149;
  v60 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v58, v149, v117);
  v61 = *(void (**)(char *, uint64_t))(v119 + 8);
  v61(v58, v60);
  v61(v57, v60);
  swift_retain();
  v62 = v123;
  swift_getAtKeyPath();
  swift_release();
  swift_retain();
  v63 = v126;
  swift_getAtKeyPath();
  swift_release();
  v64 = v63;
  v65 = v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v124 + 32))(v63, v59, v125);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v66 = *(void (**)(char *, uint64_t))(v127 + 8);
  v66(v64, v65);
  v67 = v115;
  v66(v62, v65);
  v68 = 1;
  LODWORD(v66) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v113 - 8) + 48))(v141, 1);
  (*(void (**)(char *, char *, _QWORD *))(v142 + 16))(v67, v144, v145);
  if ((_DWORD)v66 == 1)
    v68 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v91 - 8) + 48))(v67, 1) != 1;
  v150 = *(void (**)(char *, _QWORD *))(v142 + 8);
  v150(v67, v145);
  v69 = v122;
  v70 = v129;
  v143[2](v122, v146, v129);
  v71 = v68 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v92 - 8) + 48))(v69, 1) != 1;
  v72 = v137;
  v73 = v133;
  v74 = v132;
  v75 = v131;
  v76 = v130;
  v77 = v128;
  v78 = v143[1];
  ((void (*)(char *, uint64_t))v78)(v69, v70);
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v77, v148, v75);
  v79 = v71 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v93 - 8) + 48))(v77, 1) != 1;
  v80 = *(void (**)(char *, uint64_t))(v76 + 8);
  v80(v77, v75);
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v74, v147, v72);
  if (v79 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v94 - 8) + 48))(v74, 1) != 1)
  {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v72);
    v84 = &v95[TupleTypeMetadata[12]];
    v85 = &v95[TupleTypeMetadata[16]];
    v86 = &v95[TupleTypeMetadata[20]];
    v87 = &v95[TupleTypeMetadata[24]];
    (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v95, v141, v121);
    (*(void (**)(char *, char *, _QWORD *))(v142 + 32))(v84, v144, v145);
    v143[4](v85, v146, v70);
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v86, v148, v75);
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v87, v147, v137);
    v88 = swift_getAssociatedTypeWitness();
    v89 = v136;
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v89, 0, 1, v88);
  }
  else
  {
    v81 = *(void (**)(char *, uint64_t))(v73 + 8);
    v81(v74, v72);
    v81(v147, v72);
    v80(v148, v75);
    ((void (*)(char *, uint64_t))v78)(v146, v70);
    v150(v144, v145);
    (*(void (**)(char *, uint64_t))(v120 + 8))(v141, v121);
    v82 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v136, 1, 1, v82);
  }
}

uint64_t CRStruct_5.hasDelta(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  void (*v26)(char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  void (*v51)(char *, uint64_t);
  char v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t AssociatedTypeWitness;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[15];

  v85 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v61 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v60 = (char *)&v59 - v7;
  v67 = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(v67 - 8);
  v8 = MEMORY[0x1E0C80A78](v67);
  v65 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v64 = (char *)&v59 - v10;
  v71 = swift_getAssociatedTypeWitness();
  v70 = *(_QWORD *)(v71 - 8);
  v11 = MEMORY[0x1E0C80A78](v71);
  v69 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v68 = (char *)&v59 - v13;
  v75 = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(v75 - 8);
  v14 = MEMORY[0x1E0C80A78](v75);
  v73 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v72 = (char *)&v59 - v16;
  v17 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v59 - v22;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 96))(v86, a2, v4);
  v24 = v86[1];
  v82 = v86[4];
  v83 = v86[7];
  v78 = v86[8];
  v84 = v86[10];
  v81 = v86[11];
  v80 = v86[13];
  v79 = v86[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  v76 = v4;
  v77 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v21, v17, AssociatedConformanceWitness);
  v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v26(v21, v17);
  v26(v23, v17);
  if ((a2 & 1) != 0)
    goto LABEL_7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v27 = v72;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v28 = v73;
  swift_getAtKeyPath();
  swift_release();
  v29 = v75;
  v30 = swift_getAssociatedConformanceWitness();
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 72))(v28, v29, v30);
  v32 = *(void (**)(char *, uint64_t))(v74 + 8);
  v32(v28, v29);
  v32(v27, v29);
  if ((v31 & 1) != 0)
    goto LABEL_7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v33 = v68;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v34 = v69;
  swift_getAtKeyPath();
  swift_release();
  v35 = v71;
  v36 = swift_getAssociatedConformanceWitness();
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 72);
  v75 = v24;
  v38 = v37(v34, v35, v36);
  v39 = *(void (**)(char *, uint64_t))(v70 + 8);
  v39(v34, v35);
  v39(v33, v35);
  if ((v38 & 1) != 0)
    goto LABEL_7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v40 = v64;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v41 = v65;
  swift_getAtKeyPath();
  swift_release();
  v42 = v67;
  v43 = swift_getAssociatedConformanceWitness();
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 72))(v41, v42, v43);
  v45 = *(void (**)(char *, uint64_t))(v66 + 8);
  v45(v41, v42);
  v45(v40, v42);
  if ((v44 & 1) != 0)
    goto LABEL_7;
  swift_retain();
  v46 = v60;
  swift_getAtKeyPath();
  swift_release();
  swift_retain();
  v47 = v61;
  swift_getAtKeyPath();
  swift_release();
  v48 = AssociatedTypeWitness;
  v49 = swift_getAssociatedConformanceWitness();
  v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 72))(v47, v48, v49);
  v51 = *(void (**)(char *, uint64_t))(v62 + 8);
  v51(v47, v48);
  v51(v46, v48);
  if ((v50 & 1) != 0)
  {
LABEL_7:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v52 = 1;
  }
  else
  {
    v54 = *(_QWORD *)(v76 + 8);
    v55 = v77;
    v56 = *(uint64_t (**)(uint64_t, uint64_t))(v54 + 24);
    v57 = v56(v77, v54);
    v58 = v56(v55, v54);
    v52 = sub_1BDDB1F18(v58, v57);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v52 & 1;
}

uint64_t CRStruct_5.actionUndoingDifference(from:)@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  BOOL v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  BOOL v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *TupleTypeMetadata;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t AssociatedConformanceWitness;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  void (*v145)(char *, uint64_t);
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v145 = a1;
  v135 = a4;
  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v129 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v127 = AssociatedTypeWitness;
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v128 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v125 = (char *)&v95 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v99 = swift_getAssociatedTypeWitness();
  v138 = sub_1BE1B2EE8();
  v137 = *(_QWORD *)(v138 - 8);
  v10 = MEMORY[0x1E0C80A78](v138);
  v133 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v147 = (char *)&v95 - v12;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v119 = v13;
  v121 = v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v120 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v117 = (char *)&v95 - v17;
  v118 = swift_getAssociatedConformanceWitness();
  v98 = swift_getAssociatedTypeWitness();
  v134 = sub_1BE1B2EE8();
  v136 = *(_QWORD *)(v134 - 8);
  v18 = MEMORY[0x1E0C80A78](v134);
  v130 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v149 = (char *)&v95 - v20;
  v21 = swift_getAssociatedTypeWitness();
  v22 = *(_QWORD *)(v21 - 8);
  v111 = v21;
  v114 = v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v112 = (char *)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v108 = (char *)&v95 - v25;
  v110 = swift_getAssociatedConformanceWitness();
  v97 = swift_getAssociatedTypeWitness();
  v132 = sub_1BE1B2EE8();
  v131 = *(_QWORD *)(v132 - 8);
  v26 = MEMORY[0x1E0C80A78](v132);
  v123 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v150 = (char *)&v95 - v28;
  v29 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v29 - 8);
  v104 = v29;
  v106 = v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v105 = (char *)&v95 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v102 = (char *)&v95 - v33;
  v103 = swift_getAssociatedConformanceWitness();
  v96 = swift_getAssociatedTypeWitness();
  v146 = sub_1BE1B2EE8();
  v143 = *(_QWORD *)(v146 - 8);
  v34 = MEMORY[0x1E0C80A78](v146);
  v116 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v148 = (char *)&v95 - v36;
  v37 = swift_getAssociatedTypeWitness();
  v100 = *(_QWORD *)(v37 - 8);
  v38 = MEMORY[0x1E0C80A78](v37);
  v40 = (char *)&v95 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v95 - v41;
  v43 = swift_getAssociatedConformanceWitness();
  v115 = swift_getAssociatedTypeWitness();
  v124 = sub_1BE1B2EE8();
  v122 = *(_QWORD *)(v124 - 8);
  MEMORY[0x1E0C80A78](v124);
  v142 = (char *)&v95 - v44;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 96))(&v151, a2, v5);
  v139 = v155;
  v140 = v156;
  v101 = v157;
  v141 = v158;
  v107 = v159;
  v113 = v160;
  v109 = v161;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 56))(v40, v37, v43);
  v45 = *(void (**)(char *, uint64_t))(v100 + 8);
  v45(v40, v37);
  v45(v42, v37);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v46 = v102;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v47 = v105;
  swift_getAtKeyPath();
  swift_release();
  v48 = v104;
  (*(void (**)(char *, uint64_t))(v103 + 56))(v47, v104);
  v49 = *(void (**)(char *, uint64_t))(v106 + 8);
  v49(v47, v48);
  v49(v46, v48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v50 = v108;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v51 = v112;
  swift_getAtKeyPath();
  swift_release();
  v52 = v51;
  v53 = v111;
  (*(void (**)(char *, uint64_t))(v110 + 56))(v51, v111);
  v54 = *(void (**)(char *, uint64_t))(v114 + 8);
  v54(v52, v53);
  v54(v50, v53);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v55 = v117;
  swift_getAtKeyPath();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v56 = v120;
  swift_getAtKeyPath();
  swift_release();
  v57 = v119;
  (*(void (**)(char *, uint64_t))(v118 + 56))(v56, v119);
  v58 = *(void (**)(char *, uint64_t))(v121 + 8);
  v58(v56, v57);
  v58(v55, v57);
  swift_retain();
  v59 = v125;
  swift_getAtKeyPath();
  swift_release();
  swift_retain();
  v60 = v128;
  swift_getAtKeyPath();
  swift_release();
  v61 = v127;
  (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 56))(v60, v127);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v62 = *(void (**)(char *, uint64_t))(v129 + 8);
  v63 = v116;
  v62(v60, v61);
  v62(v59, v61);
  v64 = 1;
  LODWORD(v62) = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v115 - 8) + 48))(v142, 1);
  (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v63, v148, v146);
  if ((_DWORD)v62 == 1)
    v64 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v96 - 8) + 48))(v63, 1) != 1;
  v145 = *(void (**)(char *, uint64_t))(v143 + 8);
  v145(v63, v146);
  v65 = v131;
  v66 = v123;
  v67 = v132;
  (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v123, v150, v132);
  if (v64)
  {
    v68 = v66;
    v69 = 1;
  }
  else
  {
    v70 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v97 - 8) + 48))(v66, 1) == 1;
    v68 = v66;
    v69 = !v70;
  }
  v71 = v138;
  v72 = v137;
  v73 = v134;
  v74 = v133;
  v75 = v136;
  v76 = v130;
  v144 = *(void (**)(char *, uint64_t))(v65 + 8);
  v144(v68, v67);
  v77 = v73;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v76, v149, v73);
  v78 = (v69 & 1) != 0 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v98 - 8) + 48))(v76, 1) != 1;
  v79 = *(void (**)(char *, uint64_t))(v75 + 8);
  v79(v76, v77);
  v80 = v71;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v74, v147, v71);
  if (v78 || (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v99 - 8) + 48))(v74, 1) != 1)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v71);
    v87 = v124;
    v88 = v146;
    v151 = v124;
    v152 = v146;
    v153 = v67;
    v154 = v77;
    v89 = v77;
    v155 = v71;
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v91 = v135;
    v92 = v135 + TupleTypeMetadata[12];
    v93 = v135 + TupleTypeMetadata[16];
    v94 = v135 + TupleTypeMetadata[20];
    v145 = (void (*)(char *, uint64_t))(v135 + TupleTypeMetadata[24]);
    (*(void (**)(uint64_t, char *, uint64_t))(v122 + 32))(v135, v142, v87);
    (*(void (**)(uint64_t, char *, uint64_t))(v143 + 32))(v92, v148, v88);
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v93, v150, v67);
    (*(void (**)(uint64_t, char *, uint64_t))(v136 + 32))(v94, v149, v89);
    (*(void (**)(void (*)(char *, uint64_t), char *, uint64_t))(v137 + 32))(v145, v147, v138);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)TupleTypeMetadata - 1) + 56))(v91, 0, 1, TupleTypeMetadata);
  }
  else
  {
    v81 = *(void (**)(char *, uint64_t))(v72 + 8);
    v81(v74, v71);
    v81(v147, v71);
    v82 = v77;
    v79(v149, v77);
    v144(v150, v67);
    v83 = v146;
    v145(v148, v146);
    v84 = v124;
    (*(void (**)(char *, uint64_t))(v122 + 8))(v142, v124);
    v151 = v84;
    v152 = v83;
    v153 = v67;
    v154 = v82;
    v155 = v80;
    v85 = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v135, 1, 1, v85);
  }
}

uint64_t CRStruct_5.apply(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *TupleTypeMetadata;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  void (*v47)(uint64_t *, _QWORD);
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  void (**v51)(char *, char *, uint64_t);
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(uint64_t *, _QWORD);
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  void (**v66)(char *, uint64_t);
  char *v67;
  int v68;
  char *v69;
  void (**v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  void (*v76)(uint64_t *, _QWORD);
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  uint64_t v82;
  int *v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  void (*v94)(uint64_t *, _QWORD);
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  void (*v107)(uint64_t *, _QWORD);
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t AssociatedConformanceWitness;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  void (**v140)(char *, char *, uint64_t);
  void (**v141)(char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(char *, uint64_t, int *);
  void (*v155)(char *, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v160 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v137 = AssociatedTypeWitness;
  v117 = swift_getAssociatedTypeWitness();
  v6 = sub_1BE1B2EE8();
  v153 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v135 = (char *)&v112 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v133 = swift_getAssociatedConformanceWitness();
  v134 = v8;
  v116 = swift_getAssociatedTypeWitness();
  v9 = sub_1BE1B2EE8();
  v152 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v132 = (char *)&v112 - v10;
  v11 = swift_getAssociatedTypeWitness();
  v127 = swift_getAssociatedConformanceWitness();
  v128 = v11;
  v115 = swift_getAssociatedTypeWitness();
  v12 = sub_1BE1B2EE8();
  v141 = *(void (***)(char *, uint64_t))(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v126 = (char *)&v112 - v13;
  v14 = swift_getAssociatedTypeWitness();
  v122 = swift_getAssociatedConformanceWitness();
  v123 = v14;
  v114 = swift_getAssociatedTypeWitness();
  v15 = sub_1BE1B2EE8();
  v16 = *(void (**)(char *, uint64_t))(v15 - 8);
  v17 = v15;
  v151 = v15;
  v139 = v16;
  MEMORY[0x1E0C80A78](v15);
  v121 = (char *)&v112 - v18;
  v19 = swift_getAssociatedTypeWitness();
  v119 = swift_getAssociatedConformanceWitness();
  v120 = v19;
  v20 = swift_getAssociatedTypeWitness();
  v161 = sub_1BE1B2EE8();
  v162 = v17;
  v163 = v12;
  v164 = v9;
  v21 = v12;
  v146 = v9;
  v147 = v6;
  v165 = v6;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v23 = sub_1BE1B2EE8();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v131 = (char *)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v125 = (char *)&v112 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v124 = (char *)&v112 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v112 - v32;
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v112 - v34;
  v113 = (char *)v20;
  v145 = sub_1BE1B2EE8();
  v140 = *(void (***)(char *, char *, uint64_t))(v145 - 8);
  MEMORY[0x1E0C80A78](v145);
  v37 = (char *)&v112 - v36;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 96))(&v161, a2, v4);
  v38 = v162;
  v39 = v163;
  v156 = v166;
  v157 = v165;
  v150 = v167;
  v149 = v168;
  v143 = v169;
  v148 = v170;
  v130 = v171;
  v129 = v172;
  swift_bridgeObjectRetain();
  v158 = v39;
  swift_retain();
  v159 = v38;
  swift_bridgeObjectRelease();
  v155 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v155(v35, v160, v23);
  v154 = *(uint64_t (**)(char *, uint64_t, int *))(*((_QWORD *)TupleTypeMetadata - 1) + 48);
  v40 = v154(v35, 1, TupleTypeMetadata);
  v144 = v21;
  v41 = v152;
  v42 = v151;
  v142 = v24;
  if (v40 == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v35, v23);
    (*(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)v113 - 1) + 56))(v37, 1, 1);
    v43 = v145;
  }
  else
  {
    v113 = &v35[TupleTypeMetadata[12]];
    v112 = &v35[TupleTypeMetadata[16]];
    v44 = &v35[TupleTypeMetadata[20]];
    v45 = &v35[TupleTypeMetadata[24]];
    v46 = v35;
    v43 = v145;
    v140[4](v37, v46, v145);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v45, v147);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v146);
    v141[1](v112, v21);
    (*((void (**)(char *, uint64_t))v139 + 1))(v113, v42);
  }
  v47 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v48 = v119;
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 64);
  v50 = swift_checkMetadataState();
  v49(v37, v50, v48);
  v51 = (void (**)(char *, char *, uint64_t))v140[1];
  ((void (*)(char *, uint64_t))v51)(v37, v43);
  v47(&v161, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  v155(v33, v160, v23);
  v52 = v154(v33, 1, TupleTypeMetadata);
  v140 = v51;
  v138 = v23;
  if (v52 == 1)
  {
    (*(void (**)(char *, uint64_t))(v142 + 8))(v33, v23);
    v53 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v121, 1, 1);
    v54 = v151;
    v55 = v23;
    v56 = v139;
  }
  else
  {
    v57 = &v33[TupleTypeMetadata[16]];
    v58 = &v33[TupleTypeMetadata[20]];
    v59 = &v33[TupleTypeMetadata[24]];
    v56 = v139;
    v60 = v121;
    v54 = v151;
    (*((void (**)(char *, char *, uint64_t))v139 + 4))(v121, &v33[TupleTypeMetadata[12]], v151);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v59, v147);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v58, v146);
    v141[1](v57, v144);
    v61 = v43;
    v53 = v60;
    v55 = v138;
    ((void (*)(char *, uint64_t))v51)(v33, v61);
  }
  v62 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v63 = v122;
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 64);
  v65 = swift_checkMetadataState();
  v64(v53, v65, v63);
  v66 = (void (**)(char *, uint64_t))*((_QWORD *)v56 + 1);
  ((void (*)(char *, uint64_t))v66)(v53, v54);
  v62(&v161, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v67 = v124;
  v155(v124, v160, v55);
  v68 = v154(v67, 1, TupleTypeMetadata);
  v118 = TupleTypeMetadata;
  if (v68 == 1)
  {
    (*(void (**)(char *, uint64_t))(v142 + 8))(v67, v55);
    v69 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v115 - 8) + 56))(v126, 1, 1);
    v70 = v141;
    v71 = v144;
  }
  else
  {
    v72 = v54;
    v73 = &v67[TupleTypeMetadata[12]];
    v74 = &v67[TupleTypeMetadata[20]];
    v75 = &v67[TupleTypeMetadata[24]];
    v70 = v141;
    v69 = v126;
    v71 = v144;
    ((void (*)(char *, char *, uint64_t))v141[4])(v126, &v67[TupleTypeMetadata[16]], v144);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v75, v147);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v74, v146);
    ((void (*)(char *, uint64_t))v66)(v73, v72);
    ((void (*)(char *, uint64_t))v140)(v67, v145);
  }
  v141 = v66;
  v76 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v77 = v127;
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 64);
  v79 = swift_checkMetadataState();
  v78(v69, v79, v77);
  v80 = v70[1];
  v80(v69, v71);
  v76(&v161, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v81 = v125;
  v82 = v138;
  v155(v125, v160, v138);
  v83 = v118;
  v84 = v154(v81, 1, v118);
  v139 = v80;
  if (v84 == 1)
  {
    (*(void (**)(char *, uint64_t))(v142 + 8))(v81, v82);
    v85 = v132;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v132, 1, 1);
    v86 = v146;
    v87 = v152;
    v88 = v82;
    v89 = v83;
  }
  else
  {
    v90 = v71;
    v128 = (uint64_t)&v81[v83[12]];
    v91 = &v81[v83[16]];
    v92 = &v81[v83[20]];
    v89 = v83;
    v93 = &v81[v83[24]];
    v87 = v152;
    v85 = v132;
    v86 = v146;
    (*(void (**)(char *, char *, uint64_t))(v152 + 32))(v132, v92, v146);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v93, v147);
    v80(v91, v90);
    v88 = v82;
    ((void (*)(uint64_t, uint64_t))v141)(v128, v151);
    ((void (*)(char *, uint64_t))v140)(v81, v145);
  }
  v94 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v95 = v133;
  v96 = *(void (**)(char *, uint64_t, uint64_t))(v133 + 64);
  v97 = swift_checkMetadataState();
  v96(v85, v97, v95);
  v98 = *(void (**)(char *, uint64_t))(v87 + 8);
  v98(v85, v86);
  v94(&v161, 0);
  swift_release();
  swift_retain();
  v99 = v131;
  v155(v131, v160, v88);
  if (v154(v99, 1, v89) == 1)
  {
    (*(void (**)(char *, uint64_t))(v142 + 8))(v99, v88);
    v100 = v135;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v135, 1, 1);
    v101 = v147;
    v102 = v153;
  }
  else
  {
    v103 = &v99[v89[12]];
    v104 = &v99[v89[16]];
    v105 = &v99[v89[20]];
    v106 = &v99[v89[24]];
    v102 = v153;
    v100 = v135;
    v101 = v147;
    (*(void (**)(char *, char *, uint64_t))(v153 + 32))(v135, v106, v147);
    v98(v105, v86);
    v139(v104, v144);
    ((void (*)(char *, uint64_t))v141)(v103, v151);
    ((void (*)(char *, uint64_t))v140)(v99, v145);
  }
  v107 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  v108 = AssociatedConformanceWitness;
  v109 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
  v110 = swift_checkMetadataState();
  v109(v100, v110, v108);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v101);
  v107(&v161, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_5.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[15];

  v50 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v45 = (char *)&v32 - v5;
  v43 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v41 = (char *)&v32 - v6;
  v38 = swift_getAssociatedTypeWitness();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v37 = (char *)&v32 - v7;
  v35 = swift_getAssociatedTypeWitness();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v33 = (char *)&v32 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - v11;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 96))(v55, a2, v4);
  v13 = v55[2];
  v53 = v55[5];
  v54 = v55[4];
  v48 = v55[7];
  v49 = v55[8];
  v51 = v55[10];
  v52 = v55[11];
  v42 = v55[13];
  v40 = v55[14];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = v50;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 40))(v50, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v16 = v33;
  swift_getAtKeyPath();
  swift_release();
  v17 = v35;
  v18 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 + 16) + 40))(v15, v17);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v17);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v19 = v13;
  swift_release();
  swift_bridgeObjectRelease();
  v20 = v37;
  swift_getAtKeyPath();
  swift_release();
  v21 = v38;
  v22 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 + 16) + 40))(v15, v21);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v21);
  swift_bridgeObjectRetain();
  v34 = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v23 = v41;
  swift_getAtKeyPath();
  swift_release();
  v24 = v43;
  v25 = swift_getAssociatedConformanceWitness();
  v26 = v50;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 + 16) + 40))(v50, v24);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v23, v24);
  swift_retain();
  v27 = v45;
  swift_getAtKeyPath();
  swift_release();
  v28 = AssociatedTypeWitness;
  v29 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 + 16) + 40))(v26, v28);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v27, v28);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 24))(a2);
  sub_1BDDB1100(v26, v30);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall CRStruct_5.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedConformanceWitness;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t AssociatedTypeWitness;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _QWORD v77[15];

  v3 = v2;
  v4 = v0;
  v5 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v51 = (char *)&v51 - v6;
  v56 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v54 = (char *)&v51 - v7;
  v59 = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v57 = (char *)&v51 - v8;
  v62 = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(v62 - 8);
  v9 = MEMORY[0x1E0C80A78](v62);
  v60 = (char *)&v51 - v10;
  v63 = *(_QWORD *)(v4 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v73 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v74 = (char *)&v51 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v75 = (char *)&v51 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v51 - v17;
  v19 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v51 - v21;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 96))(v77, v4, v5);
  v23 = v77[1];
  v24 = v77[2];
  v70 = v77[4];
  v76 = v77[5];
  v69 = v77[7];
  v68 = v77[8];
  v67 = v77[10];
  v66 = v77[11];
  v65 = v77[13];
  v64 = v77[14];
  swift_bridgeObjectRetain();
  swift_retain();
  v72 = v23;
  swift_bridgeObjectRelease();
  swift_getAtKeyPath();
  v71 = v24;
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 48))(v19);
  v26 = *(void (**)(char *, uint64_t))(v20 + 8);
  v27 = v63;
  v26(v22, v19);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v28(v18, v3, v4);
  if ((v23 & 1) != 0)
  {
    v29 = *(void (**)(char *, uint64_t))(v27 + 8);
    v29(v18, v4);
    v30 = v75;
    v28(v75, v3, v4);
    v31 = v73;
    v32 = v74;
    v33 = v30;
LABEL_5:
    v29(v33, v4);
    v28(v32, v3, v4);
LABEL_6:
    v29(v32, v4);
    v28(v31, v3, v4);
    goto LABEL_7;
  }
  v34 = v60;
  swift_getAtKeyPath();
  v35 = v62;
  v36 = swift_getAssociatedConformanceWitness();
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 16) + 48))(v35);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v35);
  v29 = *(void (**)(char *, uint64_t))(v27 + 8);
  v29(v18, v4);
  v28(v75, v3, v4);
  if ((v37 & 1) != 0)
  {
    v31 = v73;
    v32 = v74;
    v33 = v75;
    goto LABEL_5;
  }
  v40 = v57;
  v41 = v75;
  swift_getAtKeyPath();
  v42 = v59;
  v43 = swift_getAssociatedConformanceWitness();
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 + 16) + 48))(v42);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v42);
  v29(v41, v4);
  v32 = v74;
  v28(v74, v3, v4);
  v31 = v73;
  if ((v44 & 1) != 0)
    goto LABEL_6;
  v45 = v54;
  swift_getAtKeyPath();
  v46 = v56;
  v47 = swift_getAssociatedConformanceWitness();
  LODWORD(v75) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v47 + 16) + 48))(v46);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v46);
  v29(v74, v4);
  v28(v31, v3, v4);
  if ((v75 & 1) == 0)
  {
    v48 = v51;
    swift_getAtKeyPath();
    v49 = AssociatedTypeWitness;
    v50 = swift_getAssociatedConformanceWitness();
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v50 + 16) + 48))(v49);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v49);
    v29(v31, v4);
    return v38 & 1;
  }
LABEL_7:
  v29(v31, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v38 = 1;
  return v38 & 1;
}

uint64_t CRStruct_5.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t *, _QWORD);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t *, _QWORD);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t *, _QWORD);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t *, _QWORD);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t *, _QWORD);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v26;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)(a3 + 8) + 96))(&v26, a2, *(_QWORD *)(a3 + 8));
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  v4 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 56);
  v7 = swift_checkMetadataState();
  v6(a1, v7, v5);
  v4(&v26, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  v8 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
  v11 = swift_checkMetadataState();
  v10(a1, v11, v9);
  v8(&v26, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v12 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 56);
  v15 = swift_checkMetadataState();
  v14(a1, v15, v13);
  v12(&v26, 0);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v16 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 56);
  v19 = swift_checkMetadataState();
  v18(a1, v19, v17);
  v16(&v26, 0);
  swift_release();
  swift_retain();
  v20 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath();
  swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 16);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 56);
  v23 = swift_checkMetadataState();
  v22(a1, v23, v21);
  v20(&v26, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release_n();
}

