ValueMetadata *type metadata accessor for CRCounter()
{
  return &type metadata for CRCounter;
}

uint64_t sub_1BDD839E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  unsigned int v14;
  uint64_t inited;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_1BE1B1CDC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B1DF0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 448))(a1);
  v11 = (void *)*MEMORY[0x1E0C999A8];
  sub_1BE1B1DCC();
  v12 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v13 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_fileExistsAtPath_, v13);

  if (!v14)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF870);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BE1B61B0;
  *(_QWORD *)(inited + 32) = v11;
  v16 = v11;
  sub_1BDD83CBC(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  sub_1BE1B1D54();
  swift_bridgeObjectRelease();
  v18 = sub_1BE1B1CB8();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!v18)
    return 0;
  objc_opt_self();
  result = swift_dynamicCastObjCClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

uint64_t sub_1BDD83CBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  sub_1BDD8422C(&qword_1ED6EF858, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BE1B5D44);
  result = sub_1BE1B2B7C();
  v7 = result;
  if (v2)
  {
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_1BDD841DC(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1BDD8426C(a1, &qword_1ED6F3C68);
}

uint64_t sub_1BDD83D70(_QWORD *a1, void *a2, uint64_t *a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  void *v28;
  id v29;
  uint64_t v32;

  v5 = v4;
  v8 = *v4;
  sub_1BE1B27C8();
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BE1B2834();
  v9 = sub_1BE1B371C();
  swift_bridgeObjectRelease();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v32 = *v5;
    *v5 = 0x8000000000000000;
    v26 = a2;
    sub_1BDD83FA0((uint64_t)v26, v11, isUniquelyReferenced_nonNull_native, a3, a4);
    *v5 = v32;
    swift_bridgeObjectRelease();
    *a1 = v26;
    return 1;
  }
  v12 = sub_1BE1B27C8();
  v14 = v13;
  if (v12 == sub_1BE1B27C8() && v14 == v15)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v17 = sub_1BE1B34AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      v18 = ~v10;
      do
      {
        v11 = (v11 + 1) & v18;
        if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
          goto LABEL_15;
        v19 = sub_1BE1B27C8();
        v21 = v20;
        if (v19 == sub_1BE1B27C8() && v21 == v22)
          goto LABEL_16;
        v24 = sub_1BE1B34AC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v24 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  v28 = *(void **)(*(_QWORD *)(*v5 + 48) + 8 * v11);
  *a1 = v28;
  v29 = v28;
  return 0;
}

uint64_t sub_1BDD83FA0(uint64_t result, unint64_t a2, char a3, uint64_t *a4, void (*a5)(_QWORD))
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;

  v7 = v5;
  v9 = result;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_22;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BDE6C050(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      result = (uint64_t)sub_1BDE7058C(a4);
LABEL_22:
      v29 = *v7;
      *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v29 + 48) + 8 * a2) = v9;
      v30 = *(_QWORD *)(v29 + 16);
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (!v31)
      {
        *(_QWORD *)(v29 + 16) = v32;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_1BDE71DC8(v12, a4);
  }
  v13 = *v5;
  sub_1BE1B27C8();
  sub_1BE1B36F8();
  sub_1BE1B2834();
  v14 = sub_1BE1B371C();
  result = swift_bridgeObjectRelease();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v16 = sub_1BE1B27C8();
  v18 = v17;
  if (v16 == sub_1BE1B27C8() && v18 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  v21 = sub_1BE1B34AC();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    v22 = ~v15;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v23 = sub_1BE1B27C8();
      v25 = v24;
      if (v23 == sub_1BE1B27C8() && v25 == v26)
        goto LABEL_25;
      v28 = sub_1BE1B34AC();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    while ((v28 & 1) == 0);
  }
LABEL_26:
  a5(0);
  result = sub_1BE1B3674();
  __break(1u);
  return result;
}

uint64_t sub_1BDD841DC(_QWORD *a1, void *a2)
{
  return sub_1BDD83D70(a1, a2, &qword_1EF52CF38, type metadata accessor for URLResourceKey);
}

uint64_t sub_1BDD841F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1BE1B1DF0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_1BDD8422C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1C3B7DF54](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BDD8426C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1BDD842B0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for CRVersion()
{
  return &type metadata for CRVersion;
}

_OWORD *sub_1BDD842CC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_1BDD84328()
{
  uint64_t v0;

  sub_1BE1B27C8();
  sub_1BE1B36F8();
  sub_1BE1B2834();
  v0 = sub_1BE1B371C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t destroy for CRKeyPath(uint64_t a1)
{
  return sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1BDD843A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1BDD843C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1BDD843E8()
{
  uint64_t v0;

  return sub_1BDD843F0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1BDD843F0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1BDD84410()
{
  return sub_1BDD84418();
}

uint64_t sub_1BDD84418()
{
  swift_retain();
  sub_1BDD84450();
  return swift_release();
}

void sub_1BDD84450()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 128) + 16)
      || *(_BYTE *)(v0 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated) == 1)
    {
      swift_retain();
      sub_1BDD8A318(0, v0, v0);
    }
  }
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1BDD8465C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDD84668()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Anonymous(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Anonymous);
}

uint64_t sub_1BDD84680()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B20F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CRVersion(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BDD8473C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  BOOL v31;
  char *v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v4 = sub_1BE1B206C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v37 = (char *)&v36 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v36 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v36 - v14;
  v16 = type metadata accessor for IndexSetBoundaryIterator();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = v5;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19(v15, v2, v4);
  v20 = a1;
  v19(v13, a1, v4);
  sub_1BDDC0B48((uint64_t)v15, (uint64_t)v13, (uint64_t)v18);
  v21 = sub_1BDD849C4();
  v22 = 0;
  if ((v23 & 1) != 0)
  {
LABEL_18:
    sub_1BDDCC648((uint64_t)v18);
    return v22;
  }
  v24 = v21;
  v22 = 0;
  v25 = 0;
  v38 = 0;
  while (1)
  {
    v27 = sub_1BE1B2024();
    if ((v25 & 1) == 0)
    {
      v32 = v37;
      v19(v37, v20, v4);
      if ((v27 & 1) != 0)
      {
        v33 = sub_1BE1B2024();
        v34 = v32;
        v25 = v33;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v4);
        v35 = v38;
        if ((v25 & 1) != 0)
          v35 = v24;
        v38 = v35;
        goto LABEL_4;
      }
      (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v4);
      goto LABEL_12;
    }
    v19(v8, v20, v4);
    if ((v27 & 1) == 0)
      break;
    v28 = sub_1BE1B2024();
    result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
    if ((v28 & 1) == 0)
      goto LABEL_10;
    v25 = 1;
LABEL_4:
    v24 = sub_1BDD849C4();
    if ((v26 & 1) != 0)
      goto LABEL_18;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v4);
LABEL_10:
  v30 = v24 - v38;
  if (!__OFSUB__(v24, v38))
  {
    v31 = __OFADD__(v22, v30);
    v22 += v30;
    if (v31)
      goto LABEL_20;
LABEL_12:
    v25 = 0;
    goto LABEL_4;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1BDD849C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  BOOL *v14;
  char v15;
  _QWORD *v16;
  uint64_t *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  _QWORD *v27;
  void (*v28)(_QWORD *, _QWORD);
  __int128 *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD *);
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  char v40;
  void (*v41)(_QWORD *, _QWORD);
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  void (*v47)(_QWORD *, _QWORD);
  _QWORD *v48;
  char *v49;
  BOOL v50;
  __int128 v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  BOOL *v58;
  char *v59;
  uint64_t v60;
  _QWORD v61[4];

  v1 = v0;
  v2 = sub_1BE1B203C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for IndexSetBoundaryIterator();
  v7 = v6;
  v8 = v1 + v6[6];
  if (*(_BYTE *)(v8 + 16) != 1)
  {
    v11 = (uint64_t *)(v8 + 8);
    v12 = *(_BYTE *)(v1 + v6[8]);
    if (!v12)
      v11 = (uint64_t *)(v1 + v6[6]);
    v13 = *v11;
    v9 = v1 + v6[7];
    v14 = (BOOL *)(v9 + 16);
    v15 = *(_BYTE *)(v9 + 16);
    v16 = (_QWORD *)(v9 + 8);
    v59 = v5;
    v60 = v3;
    if ((v15 & 1) != 0)
    {
      v10 = 0x7FFFFFFFFFFFFFFFLL;
      if ((v12 & 1) == 0)
      {
        if (v13 != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_33:
          v18 = (_BYTE *)(v1 + v7[8]);
          v10 = v13;
          goto LABEL_34;
        }
LABEL_23:
        v34 = v7[9];
        if (*(_BYTE *)(v1 + v34) == 1)
        {
          v57 = v16;
          v58 = v14;
          v35 = v1 + v7[5];
          v54 = (_QWORD *)(v35 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58) + 36));
          v36 = (_QWORD *)*v54;
          sub_1BDD84E80();
          sub_1BE1B2C90();
          v55 = (_QWORD *)v61[0];
          v56 = v36;
          if (v36 == (_QWORD *)v61[0])
          {
            v37 = 0;
            v38 = 0;
          }
          else
          {
            v47 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
            v53 = (_QWORD *)*v48;
            *(_QWORD *)&v52 = v48[1];
            v47(v61, 0);
            v49 = v59;
            (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v35, v2);
            sub_1BE1B2C9C();
            (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v2);
            v38 = v52;
            v37 = v53;
          }
          v50 = v56 == v55;
          *(_QWORD *)v9 = v37;
          *v57 = v38;
          *v58 = v50;
          v40 = *(_BYTE *)(v1 + v34) ^ 1;
        }
        else
        {
          v40 = 1;
        }
        *(_BYTE *)(v1 + v34) = v40 & 1;
        v13 = v10;
        goto LABEL_33;
      }
      goto LABEL_18;
    }
LABEL_11:
    v17 = (uint64_t *)(v9 + 8);
    v18 = (_BYTE *)(v1 + v6[9]);
    if (!*v18)
      v17 = (uint64_t *)v9;
    v10 = *v17;
    if (*v17 < v13)
    {
      if (!*v18)
      {
        v39 = 1;
LABEL_35:
        *v18 = v39 & 1;
        return v10;
      }
      v57 = v16;
      v58 = v14;
      v19 = v1 + v6[5];
      v20 = *(_QWORD **)(v19 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58) + 36));
      sub_1BDD84E80();
      sub_1BE1B2C90();
      v21 = (_QWORD *)v61[0];
      if (v20 == (_QWORD *)v61[0])
      {
        v22 = 0;
        v23 = 0;
      }
      else
      {
        v41 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
        v43 = (_QWORD *)*v42;
        v54 = (_QWORD *)v42[1];
        v55 = v43;
        v41(v61, 0);
        v56 = v20;
        v45 = v59;
        v44 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v19, v2);
        sub_1BE1B2C9C();
        v46 = *(void (**)(char *, uint64_t))(v44 + 8);
        v20 = v56;
        v46(v45, v2);
        v23 = v54;
        v22 = v55;
      }
      *(_QWORD *)v9 = v22;
      *v57 = v23;
      *v58 = v20 == v21;
LABEL_34:
      v39 = *v18 ^ 1;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v1 + v6[8]) != 1)
    {
LABEL_21:
      v33 = v13 == v10;
      v10 = v13;
      if (!v33)
        goto LABEL_33;
      goto LABEL_23;
    }
LABEL_18:
    v57 = v16;
    v58 = v14;
    v55 = (_QWORD *)(v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58) + 36));
    v24 = (_QWORD *)*v55;
    sub_1BDD84E80();
    v56 = (_QWORD *)v2;
    sub_1BE1B2C90();
    v25 = (_QWORD *)v61[0];
    v26 = 0uLL;
    if (v24 != (_QWORD *)v61[0])
    {
      v27 = v56;
      v53 = (_QWORD *)v61[0];
      v28 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
      v52 = *v29;
      v28(v61, 0);
      v54 = v24;
      v30 = v59;
      v31 = v60;
      (*(void (**)(char *, uint64_t, _QWORD *))(v60 + 16))(v59, v1, v27);
      sub_1BE1B2C9C();
      v32 = *(void (**)(char *, _QWORD *))(v31 + 8);
      v24 = v54;
      v32(v30, v27);
      v26 = v52;
      v25 = v53;
    }
    *(_OWORD *)v8 = v26;
    *(_BYTE *)(v8 + 16) = v24 == v25;
    v2 = (uint64_t)v56;
    v16 = v57;
    v14 = v58;
    goto LABEL_21;
  }
  v9 = v1 + v6[7];
  if ((*(_BYTE *)(v9 + 16) & 1) == 0)
  {
    v59 = v5;
    v60 = v3;
    v14 = (BOOL *)(v9 + 16);
    v16 = (_QWORD *)(v9 + 8);
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_11;
  }
  return 0;
}

uint64_t type metadata accessor for IndexSetBoundaryIterator()
{
  uint64_t result;

  result = qword_1ED6EE908;
  if (!qword_1ED6EE908)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BDD84E80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F23D8;
  if (!qword_1ED6F23D8)
  {
    v1 = sub_1BE1B203C();
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB1378], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F23D8);
  }
  return result;
}

uint64_t destroy for CRVersion()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1BDD84EF4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1BDD84F28(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_1BDD85034@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  _QWORD *v19;
  uint64_t result;

  *(_BYTE *)(v15 + v16) = 0;
  if (a1)
  {
    v17 = (void *)((v15 + v14 + 16) & v10);
    if (v11 < 0x7FFFFFFE)
    {
      v19 = (_QWORD *)(((unint64_t)v17 + v13) & 0xFFFFFFFFFFFFFFF8);
      if (a1 > 0x7FFFFFFE)
      {
        *v19 = 0;
        *(_DWORD *)v19 = a1 - 0x7FFFFFFF;
      }
      else
      {
        *v19 = a1;
      }
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v18 = a2;
      else
        v18 = 4;
      bzero(v17, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_1BDD85144()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1BDD85154()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1BDD8515C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void type metadata accessor for CRDictionary_v1()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t destroy for PartiallyOrderedReferenceMap.Iterator()
{
  return sub_1BDE27FD0();
}

uint64_t sub_1BDD8518C()
{
  return sub_1BDD96A3C(&OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf, &qword_1ED6F2DF0);
}

ValueMetadata *type metadata accessor for CRKeyPath()
{
  return &type metadata for CRKeyPath;
}

uint64_t sub_1BDD851B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  int v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, _QWORD *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  void *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 aBlock;
  uint64_t (*v111)(uint64_t);
  void *v112;
  uint64_t (*v113)();
  char *v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;

  v108 = a1;
  v109 = a4;
  v6 = sub_1BE1B248C();
  v103 = *(_QWORD *)(v6 - 8);
  v104 = v6;
  MEMORY[0x1E0C80A78](v6);
  v102 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B24BC();
  v100 = *(_QWORD *)(v8 - 8);
  v101 = v8;
  MEMORY[0x1E0C80A78](v8);
  v99 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  v107 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(v107 + 16);
  v98 = v10;
  v13 = type metadata accessor for Capsule(255, v10, v11, v12);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v93 = v13;
  v14 = sub_1BE1B242C();
  v90 = sub_1BE1B2EE8();
  v89 = *(_QWORD *)(v90 - 8);
  v15 = MEMORY[0x1E0C80A78](v90);
  v17 = (char *)&v86 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = MEMORY[0x1E0C80A78](v15);
  v88 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v92 = (char *)&v86 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v91 = (char *)&v86 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v106 = (char *)&v86 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v86 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)&v86 - v31;
  v33 = *(_QWORD *)(v14 - 8);
  v34 = MEMORY[0x1E0C80A78](v30);
  v36 = (char *)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v34);
  v105 = (char *)&v86 - v38;
  MEMORY[0x1E0C80A78](v37);
  v97 = (char *)&v86 - v39;
  result = swift_weakLoadStrong();
  if (result)
  {
    v41 = result;
    v95 = v19;
    v96 = v18;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v42(v32, v108, a3);
    v42(v29, (uint64_t)v32, a3);
    swift_retain();
    v43 = swift_dynamicCast();
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
    v45 = v14;
    v94 = v42;
    v46 = v33;
    if (v43)
    {
      v44(v17, 0, 1, v14);
      v47 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      v47(v36, v17, v14);
      v48 = v105;
      v47(v105, v36, v14);
      v50 = v108;
      v51 = v32;
      v52 = v46;
    }
    else
    {
      v87 = v33;
      v44(v17, 1, 1, v14);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v17, v90);
      v90 = v14;
      v53 = (uint64_t *)v105;
      sub_1BE1B23CC();
      sub_1BE1B2450();
      v42(v106, (uint64_t)v32, a3);
      *v53 = sub_1BE1B245C();
      v42(v91, (uint64_t)v32, a3);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF500);
      v54 = v41;
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_1BDD85B8C(&v115, (uint64_t)&aBlock);
        sub_1BDD85B8C(&aBlock, (uint64_t)&v115);
        v55 = swift_allocObject();
        sub_1BDD85B8C(&v115, v55 + 16);
        v56 = sub_1BDEE1D50;
      }
      else
      {
        v117 = 0;
        v115 = 0u;
        v116 = 0u;
        sub_1BDD86E30((uint64_t)&v115, (uint64_t *)&unk_1EF52D8C8);
        swift_getDynamicType();
        v57 = sub_1BE1B37AC();
        v59 = v58;
        v55 = swift_allocObject();
        *(_QWORD *)(v55 + 16) = v57;
        *(_QWORD *)(v55 + 24) = v59;
        v42 = v94;
        v56 = sub_1BDEE1C48;
      }
      v60 = v96;
      v48 = v105;
      v61 = v106;
      *((_QWORD *)v105 + 1) = v56;
      v48[2] = v55;
      v42(v61, (uint64_t)v32, a3);
      v62 = (*(unsigned __int8 *)(v60 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v63 = (_QWORD *)swift_allocObject();
      v63[2] = v93;
      v63[3] = a3;
      v63[4] = v109;
      v64 = (char *)v63 + v62;
      v51 = v32;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v64, v61, a3);
      v48[3] = sub_1BDEE1CA8;
      v48[4] = v63;
      v42(v92, (uint64_t)v32, a3);
      __swift_instantiateConcreteTypeFromMangledName(qword_1ED6EF510);
      if (swift_dynamicCast())
      {
        sub_1BDD85B8C(&v115, (uint64_t)&aBlock);
        sub_1BDD85B8C(&aBlock, (uint64_t)&v115);
        v65 = swift_allocObject();
        sub_1BDD85B8C(&v115, v65 + 16);
        v48[5] = sub_1BDEE1D48;
        v48[6] = v65;
        v41 = v54;
      }
      else
      {
        v117 = 0;
        v115 = 0u;
        v116 = 0u;
        sub_1BDD86E30((uint64_t)&v115, (uint64_t *)&unk_1EF52D8D8);
        v42(v88, (uint64_t)v32, a3);
        v41 = v54;
        if (swift_dynamicCast())
        {
          sub_1BDD85B8C(&v115, (uint64_t)&aBlock);
          sub_1BDD85B8C(&aBlock, (uint64_t)&v115);
          v66 = swift_allocObject();
          sub_1BDD85B8C(&v115, v66 + 16);
          v48 = v105;
          *((_QWORD *)v105 + 5) = sub_1BDEE1D40;
          v48[6] = v66;
        }
        else
        {
          v117 = 0;
          v115 = 0u;
          v116 = 0u;
          sub_1BDD86E30((uint64_t)&v115, (uint64_t *)&unk_1EF52D8C8);
          swift_getDynamicType();
          v67 = sub_1BE1B37AC();
          v69 = v68;
          v70 = swift_allocObject();
          *(_QWORD *)(v70 + 16) = v67;
          *(_QWORD *)(v70 + 24) = v69;
          v48 = v105;
          *((_QWORD *)v105 + 5) = sub_1BDEE1D14;
          v48[6] = v70;
        }
      }
      v45 = v90;
      v52 = v87;
      v50 = v108;
    }
    v71 = v98;
    v72 = type metadata accessor for CRSyncSubscription(0, v98, v107, v49);
    v73 = *(void (**)(char *, _QWORD *, uint64_t))(v52 + 32);
    v74 = (uint64_t)v97;
    v73(v97, v48, v45);
    v75 = v96;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v51, a3);
    swift_allocObject();
    v76 = sub_1BDDCEEA8(v41, v74);
    swift_release();
    *(_QWORD *)&v115 = v76;
    swift_beginAccess();
    sub_1BE1B2A5C();
    swift_retain();
    sub_1BE1B2A20();
    swift_endAccess();
    v112 = (void *)v72;
    v113 = (uint64_t (*)())MEMORY[0x1C3B7DF54](&unk_1BE1C8830, v72);
    *(_QWORD *)&aBlock = v76;
    swift_retain();
    v77 = v109;
    sub_1BE1B23E4();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    v108 = *(_QWORD *)(v41 + 32);
    v78 = v41;
    v79 = v106;
    v94(v106, v50, a3);
    v80 = (*(unsigned __int8 *)(v75 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    v81 = (char *)swift_allocObject();
    *((_QWORD *)v81 + 2) = v71;
    *((_QWORD *)v81 + 3) = a3;
    *((_QWORD *)v81 + 4) = v107;
    *((_QWORD *)v81 + 5) = v77;
    *((_QWORD *)v81 + 6) = v78;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v81[v80], v79, a3);
    v113 = sub_1BDDCE9D0;
    v114 = v81;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v111 = sub_1BDDBE6A4;
    v112 = &block_descriptor_126;
    v82 = _Block_copy(&aBlock);
    swift_retain();
    v83 = v99;
    sub_1BE1B24A4();
    *(_QWORD *)&v115 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
    v84 = v102;
    v85 = v104;
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v83, v84, v82);
    _Block_release(v82);
    swift_release();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v84, v85);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v83, v101);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDD85B8C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

ValueMetadata *type metadata accessor for AssetActor.Item()
{
  return &type metadata for AssetActor.Item;
}

uint64_t sub_1BDD85BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRDTBoxHelper(0, v9, v10, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  v12 = sub_1BDD85C5C((uint64_t)v8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v12;
  return result;
}

uint64_t *sub_1BDD85C5C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = (uint64_t *)swift_allocObject();
  v3 = sub_1BDD85CA8(a1, v2);
  swift_release();
  return v3;
}

uint64_t *sub_1BDD85CA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v13)(uint64_t, char *, uint64_t);
  uint64_t v15;

  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 264);
  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v15 - v8;
  v10 = (uint64_t)a2 + *(_QWORD *)(v4 + 280);
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, a1, v5);
  v12((uint64_t)v9, 0, 1, v5);
  swift_beginAccess();
  v13 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 40);
  swift_retain();
  v13(v10, v9, v6);
  swift_endAccess();
  return a2;
}

uint64_t type metadata accessor for CRDTBoxHelper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDTBoxHelper);
}

uint64_t sub_1BDD85DC4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDD85DD0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;

  sub_1BE1B20E4();
  v8 = *(int *)(a1 + 20);
  if (*a2 != -1)
    swift_once();
  *(_QWORD *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t sub_1BDD85E38()
{
  return sub_1BDD85E4C();
}

uint64_t sub_1BDD85E4C()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_1BE1B2144();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
      sub_1BE1B218C();
  }
  return result;
}

uint64_t CREncoder.CRDTContainer.__deallocating_deinit()
{
  return sub_1BDD8EB18(&OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt, type metadata accessor for Proto_CRDT);
}

uint64_t Capsule<>.root.getter(uint64_t a1, uint64_t a2)
{
  return sub_1BDD9C868(a1, a2, (void (*)(uint64_t))Capsule.Ref<>.root.getter);
}

{
  return sub_1BDD9C868(a1, a2, (void (*)(uint64_t))Capsule.Ref<>.root.getter);
}

uint64_t Capsule.Ref.__deallocating_deinit()
{
  return sub_1BDD93094((void (*)(void))Capsule.Ref.deinit);
}

uint64_t type metadata accessor for Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Run);
}

uint64_t sub_1BDD85EF0(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, int *);
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  uint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t i;
  uint64_t v111;
  uint64_t *v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t, int *);
  unint64_t v143;
  uint64_t v144;
  int *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int64_t v149;
  unint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int *v155;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v6 = MEMORY[0x1E0C80A78](v5);
  v119 = (uint64_t)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v124 = (uint64_t)&v116 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (unint64_t)&v116 - v11;
  MEMORY[0x1E0C80A78](v10);
  v129 = (uint64_t)&v116 - v13;
  v14 = type metadata accessor for FinalizedTimestamp(0);
  v126 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v118 = (uint64_t)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (uint64_t *)((char *)&v116 - v18);
  v20 = MEMORY[0x1E0C80A78](v17);
  v122 = (uint64_t)&v116 - v21;
  MEMORY[0x1E0C80A78](v20);
  v128 = (uint64_t)&v116 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (unint64_t)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v24);
  v125 = (uint64_t)&v116 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v134 = (uint64_t)&v116 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v141 = (uint64_t)&v116 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v137 = (uint64_t)&v116 - v34;
  MEMORY[0x1E0C80A78](v33);
  v147 = (uint64_t)&v116 - v35;
  v36 = (int *)type metadata accessor for RetainedMapRun(0);
  v144 = *((_QWORD *)v36 - 1);
  v37 = MEMORY[0x1E0C80A78](v36);
  v123 = (uint64_t)&v116 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v132 = (unint64_t)&v116 - v40;
  MEMORY[0x1E0C80A78](v39);
  v143 = (unint64_t)&v116 - v41;
  v42 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v152 = *(_QWORD *)(v42 - 8);
  v153 = v42;
  v43 = MEMORY[0x1E0C80A78](v42);
  v135 = (uint64_t)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v136 = (uint64_t)&v116 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v139 = (uint64_t *)((char *)&v116 - v48);
  v49 = MEMORY[0x1E0C80A78](v47);
  v131 = (unint64_t)&v116 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v140 = (uint64_t)&v116 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v154 = (unint64_t)&v116 - v54;
  MEMORY[0x1E0C80A78](v53);
  v56 = (uint64_t)&v116 - v55;
  if (__OFSUB__(a1, 1))
    goto LABEL_95;
  v57 = a2 + 1;
  if (__OFADD__(a2, 1))
    goto LABEL_96;
  v120 = v19;
  v133 = v14;
  v121 = v12;
  v145 = v36;
  v127 = v26;
  v12 = (a1 - 1) & ~((a1 - 1) >> 63);
  v58 = v12 + 1;
  v36 = v155;
  a2 = *(_QWORD *)v155;
  v19 = *(uint64_t **)(*(_QWORD *)v155 + 16);
  if ((uint64_t)v19 < v57)
    v57 = *(_QWORD *)(*(_QWORD *)v155 + 16);
  v149 = v57;
  if ((uint64_t)v58 < v57)
  {
    v19 = &qword_1ED6F2520;
    v130 = xmmword_1BE1BC930;
    v138 = (uint64_t)&v116 - v55;
    while (1)
    {
      v60 = *(_QWORD *)v36;
      v26 = *(_QWORD *)(*(_QWORD *)v36 + 16);
      if (v12 >= v26)
      {
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v2 = v19;
      v36 = (int *)((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
      v19 = (uint64_t *)((char *)v36 + v60);
      v61 = *(_QWORD *)(v152 + 72);
      a2 = v61 * v12;
      sub_1BDD86DEC((uint64_t)v36 + v60 + v61 * v12, v56, qword_1ED6F25C0);
      if (v58 >= v26)
        goto LABEL_82;
      v150 = v61 * v12;
      v151 = v36;
      v62 = v61 * v58;
      a2 = v154;
      sub_1BDD86DEC((uint64_t)v19 + v61 * v58, v154, qword_1ED6F25C0);
      v63 = *(_QWORD *)(v56 + 8);
      if (v63 != *(_QWORD *)a2)
      {
        sub_1BDD86E30(a2, qword_1ED6F25C0);
        sub_1BDD86E30(v56, qword_1ED6F25C0);
        v59 = v58;
        v36 = v155;
        v19 = v2;
        goto LABEL_8;
      }
      v148 = v12;
      v146 = v62;
      v64 = v56 + *(int *)(v153 + 36);
      v65 = v147;
      v19 = v2;
      sub_1BDD86DEC(v64, v147, v2);
      v36 = v145;
      v12 = *(_QWORD *)(v144 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, int *))v12)(v65, 1, v145) == 1)
        goto LABEL_15;
      v66 = a2;
      a2 = v143;
      sub_1BDDA2E8C(v147, v143, type metadata accessor for RetainedMapRun);
      v67 = v66 + *(int *)(v153 + 36);
      v65 = v137;
      sub_1BDD86DEC(v67, v137, v2);
      if (((unsigned int (*)(uint64_t, uint64_t, int *))v12)(v65, 1, v36) == 1)
      {
        sub_1BDD9C3E0(a2, type metadata accessor for RetainedMapRun);
        a2 = v154;
        v19 = v2;
LABEL_15:
        sub_1BDD86E30(v65, v19);
        v68 = v141;
        sub_1BDD86DEC(v64, v141, v19);
        v69 = ((uint64_t (*)(uint64_t, uint64_t, int *))v12)(v68, 1, v36);
        sub_1BDD86E30(v68, v19);
        v70 = v140;
        sub_1BDD86DEC(a2, v140, qword_1ED6F25C0);
        v71 = v36;
        v36 = v155;
        if (v69 != 1)
        {
          sub_1BDD86E30(v70, qword_1ED6F25C0);
          sub_1BDD86E30(a2, qword_1ED6F25C0);
          v56 = v138;
          sub_1BDD86E30(v138, qword_1ED6F25C0);
          v59 = v58;
          goto LABEL_8;
        }
        v72 = v70 + *(int *)(v153 + 36);
        v73 = v134;
        sub_1BDDA2EF0(v72, v134, v19);
        v142 = (uint64_t (*)(uint64_t, uint64_t, int *))v12;
        v74 = ((unsigned int (*)(uint64_t, uint64_t, int *))v12)(v73, 1, v71) == 1;
        sub_1BDD86E30(v73, v19);
        v56 = v138;
        v12 = v148;
        goto LABEL_34;
      }
      v75 = v65;
      v26 = v132;
      v19 = (uint64_t *)type metadata accessor for RetainedMapRun;
      sub_1BDDA2E8C(v75, v132, type metadata accessor for RetainedMapRun);
      v76 = v63 - *(_QWORD *)v56;
      if (__OFSUB__(v63, *(_QWORD *)v56))
        goto LABEL_89;
      v142 = (uint64_t (*)(uint64_t, uint64_t, int *))v12;
      v77 = v143;
      if (*(_QWORD *)(v143 + v36[5]) == *(_QWORD *)(v26 + v36[5]))
      {
        v78 = v129;
        sub_1BDD86DEC(v143, v129, (uint64_t *)&unk_1ED6F2DC0);
        v12 = *(_QWORD *)(v126 + 48);
        v79 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v78, 1, v133);
        v80 = v78;
        a2 = v154;
        v36 = v155;
        if (v79 != 1)
        {
          v19 = (uint64_t *)type metadata accessor for FinalizedTimestamp;
          sub_1BDDA2E8C(v129, v128, type metadata accessor for FinalizedTimestamp);
          v81 = v121;
          sub_1BDD86DEC(v26, v121, (uint64_t *)&unk_1ED6F2DC0);
          v117 = v12;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v12)(v81, 1, v133) != 1)
          {
            v88 = v122;
            sub_1BDDA2E8C(v81, v122, type metadata accessor for FinalizedTimestamp);
            v89 = *(int *)(v133 + 20);
            v90 = *(_QWORD *)(v128 + v89);
            v91 = v90 + v76;
            if (__OFADD__(v90, v76))
              goto LABEL_102;
            v92 = *(_QWORD *)(v88 + v89);
            sub_1BDD9C318(v128, (uint64_t)v120, type metadata accessor for FinalizedTimestamp);
            v93 = v88;
            v94 = v118;
            sub_1BDD9C318(v93, v118, type metadata accessor for FinalizedTimestamp);
            v12 = v148;
            if (v91 == v92)
            {
              v95 = (uint64_t)v120;
              v74 = sub_1BE1B1F10();
              v96 = v94;
              v36 = v155;
            }
            else
            {
              v74 = 0;
              v96 = v94;
              v36 = v155;
              v95 = (uint64_t)v120;
            }
            sub_1BDD9C3E0(v96, type metadata accessor for FinalizedTimestamp);
            sub_1BDD9C3E0(v95, type metadata accessor for FinalizedTimestamp);
            sub_1BDD9C3E0(v122, type metadata accessor for FinalizedTimestamp);
            sub_1BDD9C3E0(v128, type metadata accessor for FinalizedTimestamp);
            goto LABEL_33;
          }
          sub_1BDD9C3E0(v128, type metadata accessor for FinalizedTimestamp);
          v80 = v81;
          v77 = v143;
          v12 = v117;
        }
        sub_1BDD86E30(v80, (uint64_t *)&unk_1ED6F2DC0);
        v82 = v77;
        v83 = v124;
        sub_1BDD86DEC(v82, v124, (uint64_t *)&unk_1ED6F2DC0);
        v84 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v83, 1, v133);
        sub_1BDD86E30(v83, (uint64_t *)&unk_1ED6F2DC0);
        v85 = v26;
        v86 = v123;
        sub_1BDD9C318(v85, v123, type metadata accessor for RetainedMapRun);
        if (v84 == 1)
        {
          v87 = v119;
          sub_1BDDA2EF0(v86, v119, (uint64_t *)&unk_1ED6F2DC0);
          v74 = ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v12)(v87, 1, v133) == 1;
          sub_1BDD86E30(v87, (uint64_t *)&unk_1ED6F2DC0);
        }
        else
        {
          sub_1BDD9C3E0(v86, type metadata accessor for RetainedMapRun);
          v74 = 0;
        }
        v26 = v132;
        v12 = v148;
      }
      else
      {
        v74 = 0;
        a2 = v154;
        v36 = v155;
        v12 = v148;
      }
LABEL_33:
      sub_1BDD9C3E0(v26, type metadata accessor for RetainedMapRun);
      sub_1BDD9C3E0(v143, type metadata accessor for RetainedMapRun);
LABEL_34:
      v26 = (unint64_t)qword_1ED6F25C0;
      sub_1BDD86E30(a2, qword_1ED6F25C0);
      sub_1BDD86E30(v56, qword_1ED6F25C0);
      v59 = v58;
      v19 = v2;
      if ((v74 & 1) != 0)
      {
        v97 = *(_QWORD *)v36;
        if (v58 >= *(_QWORD *)(*(_QWORD *)v36 + 16))
          goto LABEL_85;
        a2 = (unint64_t)v151;
        v26 = v131;
        sub_1BDD86DEC((uint64_t)v151 + v97 + v146, v131, qword_1ED6F25C0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v36 = v97;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v97 = sub_1BDFCEA00(v97);
          *(_QWORD *)v36 = v97;
        }
        v36 = v145;
        if (v12 >= *(_QWORD *)(v97 + 16))
          goto LABEL_86;
        v2 = (uint64_t *)(v97 + a2 + v150);
        v99 = *(int *)(v153 + 36);
        v100 = v142;
        if (v142((uint64_t)v2 + v99, 1, v145))
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          v101 = v26 + v99;
          v102 = v125;
          sub_1BDD86DEC(v101, v125, v19);
          result = v100(v102, 1, v36);
          if ((_DWORD)result == 1)
          {
            __break(1u);
            return result;
          }
          swift_bridgeObjectRetain();
          sub_1BDD86E30(v102, v19);
        }
        v36 = v155;
        v12 = v148;
        v104 = *(_QWORD *)(v26 + 8);
        if (v104 < *v2)
          goto LABEL_87;
        v2[1] = v104;
        sub_1BDD86E30(v26, qword_1ED6F25C0);
        swift_bridgeObjectRelease();
        v105 = *(_QWORD *)v36;
        if (v58 >= *(_QWORD *)(*(_QWORD *)v36 + 16))
          goto LABEL_88;
        *(_OWORD *)(v105 + a2 + v146) = v130;
        *(_QWORD *)v36 = v105;
        v59 = v12;
      }
LABEL_8:
      ++v58;
      v12 = v59;
      if (v149 == v58)
      {
        a2 = *(_QWORD *)v36;
        v19 = *(uint64_t **)(*(_QWORD *)v36 + 16);
        break;
      }
    }
  }
  if (v19)
  {
    v2 = (uint64_t *)((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
    v12 = *(_QWORD *)(v152 + 72);
    swift_bridgeObjectRetain();
    v26 = 0;
    v106 = v2;
    v107 = v139;
    while (1)
    {
      sub_1BDD86DEC((uint64_t)v106 + a2, (uint64_t)v107, qword_1ED6F25C0);
      v56 = *v107;
      sub_1BDD86E30((uint64_t)v107, qword_1ED6F25C0);
      if (v56 < 0)
        break;
      ++v26;
      v106 = (uint64_t *)((char *)v106 + v12);
      if (v19 == (uint64_t *)v26)
      {
        swift_bridgeObjectRelease();
        v36 = v155;
        v26 = *(_QWORD *)(*(_QWORD *)v155 + 16);
        a2 = v26;
        goto LABEL_57;
      }
    }
    swift_bridgeObjectRelease();
    a2 = v26 + 1;
    if (__OFADD__(v26, 1))
      goto LABEL_101;
    v56 = *(_QWORD *)v155;
    if (a2 != *(_QWORD *)(*(_QWORD *)v155 + 16))
    {
      v19 = (uint64_t *)((char *)v106 + v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_66;
      goto LABEL_103;
    }
    v36 = v155;
LABEL_56:
    if ((uint64_t)a2 < (uint64_t)v26)
      goto LABEL_97;
  }
  else
  {
    v26 = 0;
    a2 = 0;
  }
LABEL_57:
  sub_1BDF11034(v26, a2);
  v108 = *(_QWORD *)(*(_QWORD *)v36 + 16);
  if (v108)
  {
    v109 = v127;
    sub_1BDD86DEC(*(_QWORD *)v36+ ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80))+ *(_QWORD *)(v152 + 72) * (v108 - 1)+ *(int *)(v153 + 36), v127, &qword_1ED6F2520);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v144 + 48))(v109, 1, v145) != 1)
      return sub_1BDD86E30(v109, &qword_1ED6F2520);
  }
  else
  {
    v109 = v127;
    (*(void (**)(unint64_t, uint64_t, uint64_t, int *))(v144 + 56))(v127, 1, 1, v145);
  }
  sub_1BDD86E30(v109, &qword_1ED6F2520);
  v26 = *(_QWORD *)v36;
  if (!*(_QWORD *)(*(_QWORD *)v36 + 16))
    goto LABEL_98;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_99;
  for (i = *(_QWORD *)(v26 + 16); !i; i = *(_QWORD *)(v26 + 16))
  {
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    v56 = sub_1BDFCEA00(v56);
LABEL_66:
    v36 = v155;
    *(_QWORD *)v155 = v56;
    while (a2 < *(_QWORD *)(v56 + 16))
    {
      v113 = v139;
      sub_1BDD86DEC((uint64_t)v19 + v56, (uint64_t)v139, qword_1ED6F25C0);
      v56 = *v113;
      sub_1BDD86E30((uint64_t)v113, qword_1ED6F25C0);
      if ((v56 & 0x8000000000000000) == 0)
      {
        if (a2 != v26)
        {
          if ((v26 & 0x8000000000000000) != 0)
            goto LABEL_90;
          v56 = *(_QWORD *)v36;
          v114 = *(_QWORD *)(*(_QWORD *)v36 + 16);
          if (v26 >= v114)
            goto LABEL_91;
          sub_1BDD86DEC((uint64_t)v2 + v56 + v26 * v12, v136, qword_1ED6F25C0);
          if (a2 >= v114)
            goto LABEL_92;
          sub_1BDD86DEC((uint64_t)v19 + v56, v135, qword_1ED6F25C0);
          v115 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v155 = v56;
          if ((v115 & 1) == 0)
          {
            v56 = sub_1BDFCEA00(v56);
            *(_QWORD *)v155 = v56;
          }
          if (v26 >= *(_QWORD *)(v56 + 16))
            goto LABEL_93;
          sub_1BDDA1AF4(v135, (uint64_t)v2 + v56 + v26 * v12, qword_1ED6F25C0);
          v36 = v155;
          if (a2 >= *(_QWORD *)(*(_QWORD *)v155 + 16))
            goto LABEL_94;
          sub_1BDDA1AF4(v136, (uint64_t)v19 + *(_QWORD *)v155, qword_1ED6F25C0);
        }
        if (__OFADD__(v26++, 1))
          goto LABEL_84;
      }
      ++a2;
      v56 = *(_QWORD *)v36;
      v19 = (uint64_t *)((char *)v19 + v12);
      if (a2 == *(_QWORD *)(*(_QWORD *)v36 + 16))
        goto LABEL_56;
    }
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    v26 = sub_1BDFCEA00(v26);
  }
  v111 = i - 1;
  result = sub_1BDD86E30(v26+ ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80))+ *(_QWORD *)(v152 + 72) * (i - 1), qword_1ED6F25C0);
  *(_QWORD *)(v26 + 16) = v111;
  *(_QWORD *)v36 = v26;
  return result;
}

uint64_t sub_1BDD86DEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1BDD86E30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1BDD86E6C()
{
  unint64_t v0;

  sub_1BDD86EE0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_1BDD86EE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6F2528)
  {
    type metadata accessor for FinalizedTimestamp(255);
    v0 = sub_1BE1B2EE8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6F2528);
  }
}

uint64_t sub_1BDD86F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1BE1B248C();
  v3 = *(_QWORD *)(v2 - 8);
  v27 = v2;
  v28 = v3;
  MEMORY[0x1E0C80A78](v2);
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1BE1B2E28();
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B2E04();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v8);
  v10 = sub_1BE1B24BC();
  v24 = *(_QWORD *)(v10 - 8);
  v25 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v0 + 16) = 1;
  sub_1BDD88A30();
  sub_1BE1B24A4();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C(qword_1ED6F4480, v9, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  sub_1BDD87364((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460);
  sub_1BE1B2F78();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF8D0], v23);
  *(_QWORD *)(v0 + 24) = sub_1BE1B2E58();
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_defaultCenter);
  swift_retain();
  v15 = (void *)sub_1BE1B27A4();
  objc_msgSend(v14, sel_addObserver_selector_name_object_, v1, sel_didEnterBackground, v15, 0);

  swift_release();
  v16 = objc_msgSend(v13, sel_defaultCenter);
  swift_retain();
  v17 = (void *)sub_1BE1B27A4();
  objc_msgSend(v16, sel_addObserver_selector_name_object_, v1, sel_willEnterForeground, v17, 0);

  swift_release();
  v18 = (void *)sub_1BE1B2E34();
  aBlock[4] = sub_1BDDCC8F8;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_8;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_1BE1B24A4();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  v20 = v26;
  v21 = v27;
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v12, v20, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v21);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return v1;
}

uint64_t sub_1BDD87364(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BDD873A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1BDD873BC(v1, a1);
}

uint64_t sub_1BDD873BC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 16);
  return result;
}

uint64_t sub_1BDD873C8()
{
  return sub_1BDD873DC();
}

uint64_t sub_1BDD873DC()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1BE1B21C8();
      }
      else if (result == 1)
      {
        sub_1BE1B2240();
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDD8747C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B20F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDD874E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1BDD87500(v1, a1);
}

uint64_t sub_1BDD87500@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a2 = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t sub_1BDD87554()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDD87588@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  return sub_1BE1B20E4();
}

uint64_t sub_1BDD875B0()
{
  return sub_1BDD875C4();
}

uint64_t sub_1BDD875C4()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1BE1B21A4();
      }
      else if (result == 1)
      {
        type metadata accessor for Proto_Value(0);
        sub_1BDD8422C(&qword_1ED6F2730, type metadata accessor for Proto_Value, (uint64_t)&unk_1BE1C66FC);
        sub_1BE1B224C();
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDD876D0(uint64_t a1)
{
  return sub_1BDE27EC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1BDD877F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1BDD86E30(a2, &qword_1ED6F3C50);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

void CRContext.__allocating_init(for:encryptionDelegate:temporaryDirectory:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDD89828(a1, a2, a3);
}

uint64_t CRCustomFileSyncManager.disableReadingInBackground.setter(char a1)
{
  return sub_1BDD8906C(a1);
}

uint64_t sub_1BDD87898(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = swift_retain();
  a3(v4);
  return swift_release();
}

uint64_t sub_1BDD878C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v5 = v2;
  v6 = sub_1BE1B248C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B24BC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(_QWORD *)(v5 + 32);
  aBlock[4] = a1;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = a2;
  v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v17[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v14, v10, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_1BDD87A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  char v37;
  __int128 v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;

  v3 = v2;
  v50 = a2;
  v48 = a1;
  v47 = sub_1BE1B1DF0();
  v41 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v49 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B2E28();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_1BE1B2E04();
  MEMORY[0x1E0C80A78](v43);
  v42 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B1F58();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 40) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 48) = sub_1BDDBF9AC(v14);
  *(_BYTE *)(v2 + 96) = 0;
  sub_1BE1B1F4C();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3190);
  v15 = swift_allocObject();
  v39 = xmmword_1BE1B61C0;
  *(_OWORD *)(v15 + 16) = xmmword_1BE1B61C0;
  v16 = sub_1BE1B1F40();
  v17 = MEMORY[0x1E0DEDE70];
  v18 = MEMORY[0x1E0DEDEC8];
  *(_QWORD *)(v15 + 56) = MEMORY[0x1E0DEDE70];
  *(_QWORD *)(v15 + 64) = v18;
  *(_BYTE *)(v15 + 32) = v16;
  v19 = sub_1BE1B1F40();
  *(_QWORD *)(v15 + 96) = v17;
  *(_QWORD *)(v15 + 104) = v18;
  *(_BYTE *)(v15 + 72) = BYTE1(v19);
  v20 = sub_1BE1B27EC();
  v22 = v21;
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v13, v10);
  *(_QWORD *)(v2 + 104) = v20;
  *(_QWORD *)(v2 + 112) = v22;
  *(_QWORD *)(v2 + 16) = sub_1BDD8808C(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for AssetActor(0);
  v24 = swift_allocObject();
  swift_bridgeObjectRetain();
  sub_1BDD89518(v20, v22);
  *(_QWORD *)(v3 + 24) = v24;
  sub_1BDD88A30();
  v51 = 0;
  v52 = 0xE000000000000000;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  v51 = 0xD00000000000001ELL;
  v52 = 0x80000001BE1D08C0;
  sub_1BE1B1F4C();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = v39;
  v26 = sub_1BE1B1F40();
  *(_QWORD *)(v25 + 56) = v17;
  *(_QWORD *)(v25 + 64) = v18;
  *(_BYTE *)(v25 + 32) = v26;
  v27 = sub_1BE1B1F40();
  *(_QWORD *)(v25 + 96) = v17;
  *(_QWORD *)(v25 + 104) = v18;
  v28 = v41;
  *(_BYTE *)(v25 + 72) = BYTE1(v27);
  sub_1BE1B27EC();
  v23(v13, v10);
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B24A4();
  v51 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C(qword_1ED6F4480, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  sub_1BDD87364((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460);
  v30 = v47;
  v29 = v48;
  sub_1BE1B2F78();
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, *MEMORY[0x1E0DEF8D0], v46);
  *(_QWORD *)(v3 + 32) = sub_1BE1B2E58();
  sub_1BDD86DEC(v50, v3 + 56, qword_1ED6F3DD0);
  v31 = v49;
  sub_1BE1B1DA8();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v3 + OBJC_IVAR____TtC9Coherence14CRAssetManager_temporaryDirectory, v31, v30);
  v32 = (void *)objc_opt_self();
  v33 = objc_msgSend(v32, sel_defaultCenter);
  v34 = qword_1ED6F39A8;
  swift_retain();
  if (v34 != -1)
    swift_once();
  objc_msgSend(v33, sel_addObserver_selector_name_object_, v3, sel_didEnterBackground, qword_1ED6F8B98, 0);

  swift_release();
  v35 = objc_msgSend(v32, sel_defaultCenter);
  v36 = qword_1ED6F3A00;
  swift_retain();
  if (v36 != -1)
    swift_once();
  objc_msgSend(v35, sel_addObserver_selector_name_object_, v3, sel_willEnterForeground, qword_1ED6F8BA0, 0);

  swift_release();
  if (qword_1ED6F39E8 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  v37 = v51;
  sub_1BDD86E30(v50, qword_1ED6F3DD0);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
  *(_BYTE *)(v3 + 96) = v37;
  return v3;
}

unint64_t sub_1BDD8808C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F3080);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B708);
  v6 = sub_1BE1B3260();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1BDD86DEC(v12, (uint64_t)v5, qword_1ED6F3080);
    result = sub_1BDD901B8((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1BE1B1DF0();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1BDD88220(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  _BYTE *v9;
  sqlite3_int64 v10;
  sqlite3_int64 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  sqlite3_int64 v17;

  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sqlite3_step(*(sqlite3_stmt **)(v1 + 104)) != 100)
  {
    sub_1BE1B1F4C();
    v15 = type metadata accessor for CRReplicaDatabase.Replica(0);
    *(_QWORD *)(a1 + *(int *)(v15 + 20)) = 0;
    *(_QWORD *)(a1 + *(int *)(v15 + 24)) = 0;
    *(_BYTE *)(v1 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated) = 1;
    goto LABEL_6;
  }
  v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(v1 + 104), 0);
  v9 = sqlite3_column_blob(*(sqlite3_stmt **)(v1 + 104), 0);
  v17 = sqlite3_column_int64(*(sqlite3_stmt **)(v1 + 104), 1);
  v10 = sqlite3_column_int64(*(sqlite3_stmt **)(v1 + 104), 2);
  if (!v9)
  {
    __break(1u);
    return;
  }
  v11 = v10;
  v12 = sub_1BDDD6E84(v9, v8);
  sub_1BDD92AA8(v12, v13);
  if (!v2)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
    v14 = type metadata accessor for CRReplicaDatabase.Replica(0);
    *(_QWORD *)(a1 + *(int *)(v14 + 20)) = v17;
    *(_QWORD *)(a1 + *(int *)(v14 + 24)) = v11;
LABEL_6:
    sqlite3_reset(*(sqlite3_stmt **)(v1 + 104));
  }
}

uint64_t type metadata accessor for CRReplicaDatabase.Replica(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3C88);
}

uint64_t sub_1BDD88394(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C98);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD86DEC(a1, (uint64_t)v8, &qword_1ED6F3C70);
  v9 = sub_1BE1B1DF0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F3C70);
    v11 = 0xED00003A79726F6DLL;
    v12 = 0x656D3A3A656C6966;
  }
  else
  {
    v12 = sub_1BE1B1DE4();
    v11 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  type metadata accessor for CRReplicaDatabase(0);
  swift_allocObject();
  v14 = sub_1BDD886A8(v12, v11, 0, 0, 0, 0, 0);
  if (v1)
  {
    sub_1BDD86E30(a1, &qword_1ED6F3C70);
  }
  else
  {
    swift_retain();
    sub_1BDD88AC4();
    sub_1BDD88220((uint64_t)v5);
    sub_1BDD86E30(a1, &qword_1ED6F3C70);
    swift_release();
    v15 = type metadata accessor for CRReplicaDatabase.Replica(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 0, 1, v15);
    v16 = v14 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
    swift_beginAccess();
    sub_1BDD88660((uint64_t)v5, v16);
    swift_endAccess();
  }
  return v14;
}

uint64_t sub_1BDD88618(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for CRReplicaDatabase(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3CA8);
}

uint64_t sub_1BDD88660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDD886A8(uint64_t a1, unint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD aBlock[8];

  v42 = a7;
  v41 = a6;
  v39 = a4;
  v40 = a5;
  v38 = a3;
  v10 = sub_1BE1B248C();
  v11 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  v35 = v11;
  MEMORY[0x1E0C80A78](v10);
  v33 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BE1B24BC();
  v36 = *(_QWORD *)(v13 - 8);
  v37 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BE1B2498();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v7 + 104) = 0u;
  v20 = MEMORY[0x1E0DEE9E0];
  v21 = MEMORY[0x1E0DEE9E8];
  *(_OWORD *)(v7 + 88) = 0u;
  *(_QWORD *)(v7 + 120) = v20;
  *(_QWORD *)(v7 + 128) = v21;
  v22 = v7 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
  v23 = type metadata accessor for CRReplicaDatabase.Replica(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(_BYTE *)(v7 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated) = 0;
  swift_bridgeObjectRetain();
  v24 = v43;
  v25 = sub_1BDD89258(a1, a2, v38, v39, v40, v41, v42);
  if (v24 || (v43 = v15, a1 == 0x656D3A3A656C6966) && a2 == 0xED00003A79726F6DLL || (sub_1BE1B34AC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1BDD88A30();
    v42 = v25;
    (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF540], v16);
    swift_retain();
    v27 = (void *)sub_1BE1B2E64();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = a1;
    *(_QWORD *)(v28 + 24) = a2;
    aBlock[4] = sub_1BDDBE6E0;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDDBE6A4;
    aBlock[3] = &block_descriptor_11;
    v29 = _Block_copy(aBlock);
    v30 = v43;
    sub_1BE1B24A4();
    aBlock[7] = MEMORY[0x1E0DEE9D8];
    sub_1BDD8A2D0();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD88A78();
    v32 = v33;
    v31 = v34;
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v30, v32, v29);
    v25 = v42;
    swift_release();
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v31);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v37);
    swift_release();
  }
  return v25;
}

unint64_t sub_1BDD88A30()
{
  unint64_t result;

  result = qword_1ED6F48D0;
  if (!qword_1ED6F48D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6F48D0);
  }
  return result;
}

uint64_t sub_1BDD88A6C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

unint64_t sub_1BDD88A78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F3BF8;
  if (!qword_1ED6F3BF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F3BF0);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F3BF8);
  }
  return result;
}

void sub_1BDD88AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  sqlite3_int64 v9;
  sqlite3_int64 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE __dst[14];
  unsigned __int8 v34;
  uint64_t v35;

  v2 = v0;
  v35 = *MEMORY[0x1E0C80C00];
  v3 = sub_1BE1B1F58();
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)(v0 + 120);
  if (sqlite3_step(*(sqlite3_stmt **)(v0 + 88)) == 100)
  {
    v29 = xmmword_1BE1B5DE0;
    do
    {
      v7 = sqlite3_column_bytes(*(sqlite3_stmt **)(v2 + 88), 0);
      v8 = sqlite3_column_blob(*(sqlite3_stmt **)(v2 + 88), 0);
      v9 = sqlite3_column_int64(*(sqlite3_stmt **)(v2 + 88), 1);
      if (!v8)
        goto LABEL_29;
      v10 = v9;
      if ((_DWORD)v7)
      {
        if ((int)v7 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          v34 = v7;
          memcpy(__dst, v8, (int)v7);
          v12 = *(_QWORD *)__dst;
          v13 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v34 << 48);
        }
        else
        {
          sub_1BE1B1CAC();
          swift_allocObject();
          if ((_DWORD)v7 == 0x7FFFFFFF)
          {
            v11 = sub_1BE1B1C64();
            sub_1BE1B1E2C();
            v12 = swift_allocObject();
            *(_OWORD *)(v12 + 16) = v29;
            v13 = v11 | 0x8000000000000000;
          }
          else
          {
            v14 = sub_1BE1B1C64();
            v12 = v7 << 32;
            v13 = v14 | 0x4000000000000000;
          }
        }
      }
      else
      {
        v12 = 0;
        v13 = 0xC000000000000000;
      }
      sub_1BDD92AA8(v12, v13);
      if (v1)
        return;
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v32 = (_QWORD *)*v6;
      v16 = v32;
      *v6 = 0x8000000000000000;
      v18 = sub_1BDDAE974((uint64_t)v5);
      v19 = v16[2];
      v20 = (v17 & 1) == 0;
      v21 = v19 + v20;
      if (__OFADD__(v19, v20))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      v22 = v17;
      if (v16[3] >= v21)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v25 = v32;
          if ((v17 & 1) != 0)
            goto LABEL_3;
        }
        else
        {
          sub_1BDE63B5C();
          v25 = v32;
          if ((v22 & 1) != 0)
            goto LABEL_3;
        }
      }
      else
      {
        sub_1BDDC5730(v21, isUniquelyReferenced_nonNull_native);
        v23 = sub_1BDDAE974((uint64_t)v5);
        if ((v22 & 1) != (v24 & 1))
        {
          sub_1BE1B3680();
          __break(1u);
          return;
        }
        v18 = v23;
        v25 = v32;
        if ((v22 & 1) != 0)
        {
LABEL_3:
          *(_QWORD *)(v25[7] + 8 * v18) = v10;
          goto LABEL_4;
        }
      }
      v25[(v18 >> 6) + 8] |= 1 << v18;
      (*(void (**)(unint64_t, char *, uint64_t))(v30 + 16))(v25[6] + *(_QWORD *)(v30 + 72) * v18, v5, v31);
      *(_QWORD *)(v25[7] + 8 * v18) = v10;
      v26 = v25[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_28;
      v25[2] = v28;
LABEL_4:
      *(_QWORD *)(v2 + 120) = v25;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v31);
      swift_endAccess();
    }
    while (sqlite3_step(*(sqlite3_stmt **)(v2 + 88)) == 100);
  }
  sqlite3_reset(*(sqlite3_stmt **)(v2 + 88));
  swift_beginAccess();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3908);
  sub_1BE1B25D0();
  swift_endAccess();
}

uint64_t sub_1BDD88E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1BE1B248C();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v14 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BE1B24BC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = *(_QWORD *)(v1 + 32);
  v10 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1BDDBE800;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_12;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v15 = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, v3, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return swift_release();
}

uint64_t sub_1BDD8906C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1BE1B248C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B24BC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(_QWORD *)(v2 + 32);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v2;
  *(_BYTE *)(v13 + 24) = a1;
  aBlock[4] = sub_1BDDBE6D0;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = &block_descriptor_77;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v16[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, v5, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1BDD89258(uint64_t a1, unint64_t a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  int v14;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  char value;
  uint64_t v22[2];

  v9 = v7;
  v22[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 40) = 0;
  *(_WORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 66) = 1;
  *(_WORD *)(v7 + 68) = 0;
  *(_BYTE *)(v7 + 70) = 1;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 80) = -1;
  *(_QWORD *)(v7 + 16) = a1;
  *(_BYTE *)(v7 + 41) = a3;
  *(_BYTE *)(v7 + 42) = a4;
  *(_QWORD *)(v7 + 48) = a7;
  *(_QWORD *)(v7 + 56) = a6;
  swift_bridgeObjectRetain();
  sub_1BDD8A8B8();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else if ((a5 & 1) != 0
         && (value = -1,
             v13 = sub_1BE1B2828(),
             v14 = setxattr((const char *)(v13 + 32), "com.apple.runningboard.can-suspend-locked", &value, 1uLL, 0, 0),
             swift_release(),
             v14 < 0))
  {
    if (qword_1ED6EF918 != -1)
      swift_once();
    v16 = sub_1BE1B23C0();
    __swift_project_value_buffer(v16, (uint64_t)qword_1ED6F8AD0);
    swift_bridgeObjectRetain();
    v17 = sub_1BE1B23A8();
    v18 = sub_1BE1B2DD4();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22[0] = v20;
      *(_DWORD *)v19 = 67109378;
      sub_1BE1B2F0C();
      *(_WORD *)(v19 + 8) = 2080;
      swift_bridgeObjectRetain();
      sub_1BDDC1468(a1, a2, v22);
      sub_1BE1B2F0C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BDD82000, v17, v18, "%d: Could not set file lock exception attribute at %s", (uint8_t *)v19, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1C3B7E068](v20, -1, -1);
      MEMORY[0x1C3B7E068](v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t type metadata accessor for AssetActor(uint64_t a1)
{
  return sub_1BDD88618(a1, qword_1ED6F3BC0);
}

uint64_t sub_1BDD89518(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v5);
  v33 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C30);
  v7 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C58);
  v10 = *(_QWORD *)(v32 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](v32);
  v31 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v31 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C50);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v31 - v19;
  swift_defaultActor_initialize();
  v2[15] = a1;
  v2[16] = a2;
  v2[14] = sub_1BE126298(MEMORY[0x1E0DEE9D8]);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  v35 = v20;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DF07B8], v34);
  sub_1BE1B2B28();
  sub_1BDD86DEC((uint64_t)v20, (uint64_t)v18, &qword_1ED6F3C50);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v18, 1, v21);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))((uint64_t)v2 + OBJC_IVAR____TtC9Coherence10AssetActor__streamContinuation, v18, v21);
    v24 = sub_1BE1B2ABC();
    v25 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v33, 1, 1, v24);
    v27 = v31;
    v26 = v32;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v14, v32);
    v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v29 + v28, v27, v26);
    v30 = sub_1BE193A0C(v25, (uint64_t)&unk_1EF530410, v29);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v26);
    *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9Coherence10AssetActor__task) = v30;
    sub_1BDD86E30((uint64_t)v20, &qword_1ED6F3C50);
    return (uint64_t)v2;
  }
  return result;
}

void sub_1BDD89828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  os_unfair_lock_s *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  objc_class *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  objc_super v54;
  objc_super v55;
  _OWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  v58 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  v6 = MEMORY[0x1E0C80A78](v5);
  v51 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v48 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v48 - v11;
  v13 = sub_1BE1B1DF0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v49 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v50 = (char *)&v48 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v48 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v48 - v22;
  v53 = a3;
  sub_1BDD86DEC(a3, (uint64_t)v12, &qword_1ED6F3C70);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25 = a1;
  v24(v21, a1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1BDD89D88((uint64_t)v23);
    v26 = *(char **)(v14 + 8);
    ((void (*)(char *, uint64_t))v26)(v21, v13);
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3C70);
  }
  else
  {
    v26 = *(char **)(v14 + 8);
    ((void (*)(char *, uint64_t))v26)(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v12, v13);
  }
  v27 = v58;
  if (!*(_QWORD *)(v58 + 24))
  {
    v37 = (uint64_t)v51;
    v24(v51, v25, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v37, 0, 1, v13);
    v38 = v52;
    v39 = sub_1BDD88394(v37);
    if (!v38)
    {
      v51 = (char *)v39;
      v52 = v26;
      v40 = (uint64_t)v49;
      v24(v49, (uint64_t)v23, v13);
      if (qword_1ED6EFF78 != -1)
        swift_once();
      v41 = (uint64_t *)(qword_1ED6F2500 + 16);
      v42 = (os_unfair_lock_s *)(qword_1ED6F2500 + 24);
      swift_retain();
      os_unfair_lock_lock(v42);
      sub_1BDD8A154(v41, v40, (uint64_t)v23, (uint64_t *)v56);
      v43 = v23;
      os_unfair_lock_unlock(v42);
      v44 = *(_QWORD *)&v56[0];
      swift_release();
      v45 = v52;
      ((void (*)(uint64_t, uint64_t))v52)(v40, v13);
      v46 = (objc_class *)type metadata accessor for CRContext();
      memset(v56, 0, sizeof(v56));
      v57 = 0;
      v47 = (char *)objc_allocWithZone(v46);
      *(_QWORD *)&v47[OBJC_IVAR___CRContext_assetManager] = v44;
      sub_1BDD86DEC((uint64_t)v56, (uint64_t)&v47[OBJC_IVAR___CRContext_encryptionDelegate], qword_1ED6F3DD0);
      *(_QWORD *)&v47[OBJC_IVAR___CRContext_crdtDatabase] = v51;
      v55.receiver = v47;
      v55.super_class = v46;
      objc_msgSendSuper2(&v55, sel_init);
      sub_1BDD86E30((uint64_t)v56, qword_1ED6F3DD0);
      sub_1BDD86E30(v53, &qword_1ED6F3C70);
      ((void (*)(uint64_t, uint64_t))v45)(v25, v13);
      ((void (*)(char *, uint64_t))v45)(v43, v13);
      v36 = v58;
      goto LABEL_12;
    }
LABEL_8:
    sub_1BDD86E30(v53, &qword_1ED6F3C70);
    ((void (*)(uint64_t, uint64_t))v26)(v25, v13);
    ((void (*)(char *, uint64_t))v26)(v23, v13);
    sub_1BDD86E30(v27, qword_1ED6F3DD0);
    return;
  }
  v24(v10, v25, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  v28 = v52;
  v29 = sub_1BDD88394((uint64_t)v10);
  if (v28)
    goto LABEL_8;
  v30 = v29;
  v31 = (uint64_t)v50;
  v24(v50, (uint64_t)v23, v13);
  sub_1BDD86DEC(v27, (uint64_t)v56, qword_1ED6F3DD0);
  type metadata accessor for CRAssetManager(0);
  swift_allocObject();
  v52 = v23;
  v32 = sub_1BDD87A88(v31, (uint64_t)v56);
  sub_1BDD86DEC(v27, (uint64_t)v56, qword_1ED6F3DD0);
  v33 = (objc_class *)type metadata accessor for CRContext();
  v34 = v26;
  v35 = (char *)objc_allocWithZone(v33);
  *(_QWORD *)&v35[OBJC_IVAR___CRContext_assetManager] = v32;
  sub_1BDD86DEC((uint64_t)v56, (uint64_t)&v35[OBJC_IVAR___CRContext_encryptionDelegate], qword_1ED6F3DD0);
  *(_QWORD *)&v35[OBJC_IVAR___CRContext_crdtDatabase] = v30;
  v54.receiver = v35;
  v54.super_class = v33;
  objc_msgSendSuper2(&v54, sel_init);
  sub_1BDD86E30((uint64_t)v56, qword_1ED6F3DD0);
  sub_1BDD86E30(v53, &qword_1ED6F3C70);
  ((void (*)(uint64_t, uint64_t))v34)(v25, v13);
  ((void (*)(char *, uint64_t))v34)(v52, v13);
  v36 = v58;
LABEL_12:
  sub_1BDD86E30(v36, qword_1ED6F3DD0);
}

uint64_t type metadata accessor for CRContext()
{
  return objc_opt_self();
}

uint64_t sub_1BDD89D88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void *v17;
  unsigned int v18;
  NSString *v19;
  char *v21;
  id v22;
  void *v23;
  unsigned int v24;
  char *v25;
  id v26;
  void *v27;
  unsigned int v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  id v37[2];

  v37[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = sub_1BE1B1DF0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)&v34 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v34 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v34 - v13;
  if (qword_1ED6F3708 != -1)
    swift_once();
  if (byte_1ED6EFBA0 == 1)
  {
    v35 = v9;
    v36 = v6;
    v34 = a1;
    sub_1BE1B1DC0();
    v15 = (void *)objc_opt_self();
    while (1)
    {
      v16 = objc_msgSend(v15, sel_defaultManager);
      sub_1BE1B1DE4();
      v17 = (void *)sub_1BE1B27A4();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v16, sel_isWritableFileAtPath_, v17);

      if (!v18)
        break;
      sub_1BE1B1DC0();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v14, v12, v2);
    }
    v21 = v35;
    sub_1BE1B1DA8();
    v22 = objc_msgSend(v15, sel_defaultManager);
    sub_1BE1B1DE4();
    v23 = (void *)sub_1BE1B27A4();
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v22, sel_isWritableFileAtPath_, v23);

    if (v24)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v14, v21, v2);
    }
    v25 = v36;
    sub_1BE1B1D9C();
    v26 = objc_msgSend(v15, sel_defaultManager);
    v27 = (void *)sub_1BE1B1D90();
    v37[0] = 0;
    v28 = objc_msgSend(v26, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v27, 1, 0, v37);

    if (v28)
    {
      v29 = v37[0];
    }
    else
    {
      v30 = v37[0];
      v31 = (void *)sub_1BE1B1D3C();

      swift_willThrow();
    }
    v32 = v34;
    v33 = *(void (**)(char *, uint64_t))(v3 + 8);
    v33(v21, v2);
    v33(v14, v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(v32, v25, v2);
  }
  else
  {
    v19 = NSTemporaryDirectory();
    sub_1BE1B27C8();

    sub_1BE1B1D60();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BDD8A154@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  void (*v17)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t *v21;

  v8 = sub_1BE1B1DF0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v13 = sub_1BDD901B8(a2), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    result = swift_retain();
  }
  else
  {
    v21 = a4;
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v17(v11, a3, v8);
    type metadata accessor for CRAssetManager(0);
    memset(v19, 0, sizeof(v19));
    v20 = 0;
    v15 = swift_allocObject();
    sub_1BDD87A88((uint64_t)v11, (uint64_t)v19);
    v17(v11, a2, v8);
    a4 = v21;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v19[0] = *a1;
    *a1 = 0x8000000000000000;
    sub_1BDDC4D94(v15, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
    *a1 = *(_QWORD *)&v19[0];
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a4 = v15;
  return result;
}

unint64_t sub_1BDD8A2D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F39E0;
  if (!qword_1ED6F39E0)
  {
    v1 = sub_1BE1B248C();
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F39E0);
  }
  return result;
}

const char *sub_1BDD8A318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3 *v9;
  sqlite3_snapshot *v10;
  const char *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  sqlite3_stmt *v20;
  sqlite3_stmt *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  sqlite3_stmt *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (v3)
    return (const char *)swift_release();
  v8 = v7;
  if (sqlite3_step(v7) != 101)
  {
    result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
    if (!result)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v16 = sub_1BE1B2864();
    v18 = v17;
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v19 = v16;
    *(_QWORD *)(v19 + 8) = v18;
    *(_BYTE *)(v19 + 16) = 2;
    swift_willThrow();
    v20 = v8;
LABEL_9:
    sqlite3_finalize(v20);
    return (const char *)swift_release();
  }
  sqlite3_finalize(v8);
  if (a1)
  {
    v9 = *(sqlite3 **)(a2 + 32);
    v10 = *(sqlite3_snapshot **)(a1 + 16);
    swift_retain();
    if (sqlite3_snapshot_open(v9, "main", v10))
    {
      result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
      if (result)
      {
        v12 = sub_1BE1B2864();
        v14 = v13;
        sub_1BDDFC134();
        swift_allocError();
        *(_QWORD *)v15 = v12;
        *(_QWORD *)(v15 + 8) = v14;
        *(_BYTE *)(v15 + 16) = 4;
        swift_willThrow();
        swift_release();
        return (const char *)swift_release();
      }
      goto LABEL_20;
    }
    swift_release();
  }
  sub_1BDDCF48C(a3);
  v21 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (sqlite3_step(v21) == 101)
  {
    v20 = v21;
    goto LABEL_9;
  }
  result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
  if (result)
  {
    v22 = sub_1BE1B2864();
    v24 = v23;
    sub_1BDDFC134();
    v25 = (void *)swift_allocError();
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v24;
    *(_BYTE *)(v26 + 16) = 2;
    swift_willThrow();
    sqlite3_finalize(v21);
    v27 = (sqlite3_stmt *)sub_1BDD8AF9C();
    if (sqlite3_step(v27) == 101)
    {
      sqlite3_finalize(v27);
      swift_willThrow();
      return (const char *)swift_release();
    }
    result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
    if (result)
    {
      v28 = sub_1BE1B2864();
      v30 = v29;
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v31 = v28;
      *(_QWORD *)(v31 + 8) = v30;
      *(_BYTE *)(v31 + 16) = 2;
      swift_willThrow();
      sqlite3_finalize(v27);

      return (const char *)swift_release();
    }
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

const char *sub_1BDD8A604()
{
  uint64_t v0;
  uint64_t v1;
  const char *result;
  sqlite3_stmt *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = sub_1BDD8AF9C();
  if (!v1)
  {
    v3 = (sqlite3_stmt *)result;
    do
      v4 = sqlite3_step(v3);
    while (v4 == 100);
    if (v4 != 101)
    {
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      strcpy((char *)v7, "App ID setup: ");
      HIBYTE(v7[1]) = -18;
      result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1BE1B2864();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      v5 = v7[1];
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v6 = v7[0];
      *(_QWORD *)(v6 + 8) = v5;
      *(_BYTE *)(v6 + 16) = 0;
      swift_willThrow();
    }
    return (const char *)sqlite3_finalize(v3);
  }
  return result;
}

char *sub_1BDD8A728()
{
  uint64_t v0;
  uint64_t v1;
  char *result;
  sqlite3_stmt *v3;
  sqlite3_stmt *v4;
  int v5;
  uint64_t v6;

  result = (char *)sqlite3_db_readonly(*(sqlite3 **)(v0 + 32), "main");
  if (!(_DWORD)result)
  {
    result = (char *)sub_1BDD8AF9C();
    if (!v1)
    {
      v3 = (sqlite3_stmt *)result;
      sqlite3_step((sqlite3_stmt *)result);
      if (sqlite3_column_int(v3, 0) != 2)
      {
        v4 = (sqlite3_stmt *)sub_1BDD8AF9C();
        do
          v5 = sqlite3_step(v4);
        while (v5 == 100);
        if (v5 != 101)
        {
          sub_1BE1B305C();
          swift_bridgeObjectRelease();
          result = (char *)sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
          if (!result)
          {
            __break(1u);
            return result;
          }
          sub_1BE1B2864();
          sub_1BE1B284C();
          swift_bridgeObjectRelease();
          sub_1BE1B284C();
          sub_1BDDFC134();
          swift_allocError();
          *(_QWORD *)v6 = 0xD000000000000013;
          *(_QWORD *)(v6 + 8) = 0x80000001BE1CD040;
          *(_BYTE *)(v6 + 16) = 0;
          swift_willThrow();
        }
        sqlite3_finalize(v4);
      }
      return (char *)sqlite3_finalize(v3);
    }
  }
  return result;
}

sqlite3 *sub_1BDD8A8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void (*v16)(char *, uint64_t);
  void *v17;
  unsigned int v18;
  id v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  sqlite3 *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  sqlite3 *ppDb[2];

  ppDb[1] = *(sqlite3 **)MEMORY[0x1E0C80C00];
  v1 = sub_1BE1B1DF0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v38 - v6;
  v40 = v0;
  v9 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v43 = v9;
  v44 = v8;
  ppDb[0] = 0;
  v10 = v9 == 0x656D3A3A656C6966 && v8 == 0xED00003A79726F6DLL;
  if (v10 || (sub_1BE1B34AC() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v11 = 0;
  }
  else
  {
    v12 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v13 = objc_msgSend(v12, sel_defaultManager);
    v14 = (void *)sub_1BE1B27A4();
    v11 = objc_msgSend(v13, sel_fileExistsAtPath_, v14);

  }
  if ((sub_1BE1B287C() & 1) != 0)
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    sub_1BE1B1D6C();
    sub_1BE1B1DC0();
    v16 = *(void (**)(char *, uint64_t))(v2 + 8);
    v16(v5, v1);
    v17 = (void *)sub_1BE1B1D90();
    v16(v7, v1);
    v41 = 0;
    v18 = objc_msgSend(v15, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v17, 1, 0, &v41);

    v19 = (id)v41;
    if (!v18)
    {
      v32 = v19;
      swift_bridgeObjectRelease();
      sub_1BE1B1D3C();

      return (sqlite3 *)swift_willThrow();
    }
    v41 = 0x3A656C6966;
    v42 = 0xE500000000000000;
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    v43 = v41;
    v44 = v42;
  }
  v20 = v40;
  v21 = *(unsigned __int8 *)(v40 + 42);
  if (v21 == 1)
  {
    sub_1BE1B284C();
    v22 = 32833;
  }
  else
  {
    v22 = 32838;
  }
  v23 = sub_1BE1B2828();
  swift_bridgeObjectRelease();
  v24 = sqlite3_open_v2((const char *)(v23 + 32), ppDb, v22, 0);
  result = (sqlite3 *)swift_release();
  if (v24)
  {
    *(_BYTE *)(v20 + 40) = 1;
    if (sqlite3_errmsg(ppDb[0]))
    {
      v26 = sub_1BE1B2864();
      v28 = v27;
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v29 = v26;
      *(_QWORD *)(v29 + 8) = v28;
    }
    else
    {
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v29 = 0xD000000000000026;
      *(_QWORD *)(v29 + 8) = 0x80000001BE1CD060;
    }
    *(_BYTE *)(v29 + 16) = 0;
    swift_willThrow();
    result = ppDb[0];
    if (ppDb[0])
      return (sqlite3 *)sqlite3_close(ppDb[0]);
    return result;
  }
  *(sqlite3 **)(v20 + 32) = ppDb[0];
  *(_BYTE *)(v20 + 40) = 0;
  if (*(_BYTE *)(v20 + 41) == 1)
  {
    v30 = v39;
    result = (sqlite3 *)sub_1BDDF3A54();
    if (v30)
      return result;
    result = (sqlite3 *)sub_1BDDF3B6C();
    v31 = 0;
  }
  else
  {
    v31 = v39;
  }
  if ((v21 & 1) == 0)
  {
    result = (sqlite3 *)sub_1BDD8A728();
    if (v31)
      return result;
    result = (sqlite3 *)sub_1BDD8A604();
    v31 = 0;
  }
  v33 = *(_QWORD *)(v20 + 48);
  if (v33 || *(_QWORD *)(v20 + 56))
  {
    if (v11)
    {
      result = (sqlite3 *)sub_1BDDF3634(*(_QWORD *)(v20 + 56), v33);
      if (v31)
        return result;
      goto LABEL_46;
    }
    if ((v21 & 1) == 0)
    {
      v34 = *(_QWORD *)(v20 + 56);
      if (v34)
      {
        if (*(_QWORD *)(v34 + 16))
        {
          v35 = 0;
          LODWORD(v34) = *(unsigned __int16 *)(v34 + 32);
          goto LABEL_40;
        }
        LODWORD(v34) = 0;
      }
      v35 = 1;
LABEL_40:
      if (v33)
      {
        v36 = *(_QWORD *)(v33 + 16);
        if (v36)
        {
          v37 = 0;
          LODWORD(v36) = *(unsigned __int16 *)(v33 + 32);
          goto LABEL_45;
        }
      }
      else
      {
        LODWORD(v36) = 0;
      }
      v37 = 1;
LABEL_45:
      result = (sqlite3 *)sub_1BDDF3870(v34 | (v35 << 16), v36 | (v37 << 16));
      if (v31)
        return result;
    }
  }
LABEL_46:
  result = (sqlite3 *)(*(uint64_t (**)(sqlite3 *))(*(_QWORD *)v20 + 368))(result);
  if (!v31)
    return (sqlite3 *)(*(uint64_t (**)(sqlite3 *))(*(_QWORD *)v20 + 376))(result);
  return result;
}

sqlite3_stmt *sub_1BDD8ADF4()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3_stmt *result;
  sqlite3_stmt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (!v1)
  {
    v3 = result;
    if (sqlite3_step(result) == 101)
    {
      sqlite3_finalize(v3);
      v3 = (sqlite3_stmt *)sub_1BDD8AF9C();
      if (sqlite3_step(v3) == 101)
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      if (sqlite3_errmsg(*(sqlite3 **)(v0 + 32)))
      {
LABEL_7:
        v4 = sub_1BE1B2864();
        v6 = v5;
        sub_1BDDFC134();
        swift_allocError();
        *(_QWORD *)v7 = v4;
        *(_QWORD *)(v7 + 8) = v6;
        *(_BYTE *)(v7 + 16) = 2;
        swift_willThrow();
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      }
      __break(1u);
    }
    result = (sqlite3_stmt *)sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
    if (!result)
    {
      __break(1u);
      return result;
    }
    goto LABEL_7;
  }
  return result;
}

const char *sub_1BDD8AEF8()
{
  _QWORD *v0;
  uint64_t v1;
  const char *result;

  result = sub_1BDD8AF9C();
  if (!v1)
  {
    v0[11] = result;
    v0[12] = sub_1BDD8AF9C();
    v0[13] = sub_1BDD8AF9C();
    result = sub_1BDD8AF9C();
    v0[14] = result;
  }
  return result;
}

const char *sub_1BDD8AF9C()
{
  uint64_t v0;
  sqlite3 *v1;
  uint64_t v2;
  const char *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  sqlite3_stmt *v8[2];

  v8[1] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v1 = *(sqlite3 **)(v0 + 32);
  v2 = sub_1BE1B2828();
  LODWORD(v1) = sqlite3_prepare_v2(v1, (const char *)(v2 + 32), -1, v8, 0);
  swift_release();
  if (!(_DWORD)v1)
    return (const char *)v8[0];
  result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
  if (result)
  {
    v4 = sub_1BE1B2864();
    v6 = v5;
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v7 = v4;
    *(_QWORD *)(v7 + 8) = v6;
    *(_BYTE *)(v7 + 16) = 1;
    return (const char *)swift_willThrow();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDD8B088(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  type metadata accessor for CRDecodeContext.DecodingReference(0, a4, a5, a4);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v8;
  swift_beginAccess();
  sub_1BDDB6CA4(v7, v8);
  sub_1BDDB6CA4(v7, v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = v5[2];
  v5[2] = 0x8000000000000000;
  sub_1BDD8CE44(v9, v7, v8, isUniquelyReferenced_nonNull_native);
  v5[2] = v12;
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v7, v8);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t))(*v5 + 168))(a3);
}

void sub_1BDD8B18C(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = a1[1];
  v12 = *a1;
  v13 = v3;
  v14 = a1[2];
  v4 = *a2;
  v5 = a2[1];
  v6 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1BDDB6CA4(v4, v5);
  sub_1BDDD0098((uint64_t)&v12);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *(_QWORD *)(v2 + v6);
  *(_QWORD *)(v2 + v6) = 0x8000000000000000;
  sub_1BDD8CFA4(&v12, v4, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + v6) = v10;
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v4, v5);
  v8 = v13;
  if (*(_QWORD *)(*((_QWORD *)&v13 + 1) + 16))
  {
    sub_1BDDB6CA4(v4, v5);
    sub_1BDDBC6BC(&v10, v4, v5);
    sub_1BDDB796C(v10, v11);
  }
  v10 = v4;
  v11 = v5;
  v9 = v8;
  sub_1BDDBB074(&v10, (uint64_t *)&v9);
}

uint64_t sub_1BDD8B29C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[2];
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t aBlock;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v70;

  v1 = *v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v2);
  v59 = (char *)v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BE1B248C();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4);
  v56 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BE1B24BC();
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  MEMORY[0x1E0C80A78](v6);
  v53 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B2498();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 80);
  v62 = *(_QWORD *)(v1 + 88);
  v63 = v12;
  v14 = type metadata accessor for Capsule(255, v12, *(_QWORD *)(v62 + 16), v13);
  v15 = sub_1BE1B2EE8();
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v48 - v17;
  v19 = *(_QWORD *)(v14 - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v52 = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v61 = (char *)v48 - v23;
  v24 = v0[6];
  if (v24)
  {
    v25 = v0[5];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v26 = swift_allocObject();
    v50 = v9;
    v27 = (_QWORD *)v26;
    *(_OWORD *)(v26 + 16) = xmmword_1BE1B61B0;
    aBlock = v25;
    v66 = v24;
    swift_bridgeObjectRetain();
    sub_1BE1B284C();
    v28 = aBlock;
    v29 = v66;
    v27[7] = MEMORY[0x1E0DEA968];
    v27[4] = v28;
    v27[5] = v29;
    sub_1BE1B36D4();
    v9 = v50;
    v22 = swift_bridgeObjectRelease();
    v1 = *v0;
  }
  (*(void (**)(uint64_t))(v1 + 248))(v22);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v32 = v61;
    v31(v61, v18, v14);
    swift_beginAccess();
    v51 = v0;
    v33 = v0[13];
    sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6F48D0);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF540], v8);
    swift_bridgeObjectRetain();
    v48[0] = sub_1BE1B2E64();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v49 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v34 = v52;
    v49(v52, v32, v14);
    v35 = *(unsigned __int8 *)(v19 + 80);
    v48[1] = v35 | 7;
    v36 = (char *)swift_allocObject();
    v50 = v19;
    v37 = v62;
    *((_QWORD *)v36 + 2) = v63;
    *((_QWORD *)v36 + 3) = v37;
    *((_QWORD *)v36 + 4) = v33;
    v31(&v36[(v35 + 40) & ~v35], v34, v14);
    v69 = sub_1BDDCEB58;
    v70 = v36;
    aBlock = MEMORY[0x1E0C809B0];
    v66 = 1107296256;
    v67 = sub_1BDDBE6A4;
    v68 = &block_descriptor_32_1;
    v38 = _Block_copy(&aBlock);
    v39 = v53;
    sub_1BE1B24A4();
    v64 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
    v40 = v56;
    v41 = v58;
    sub_1BE1B2F78();
    v42 = (void *)v48[0];
    MEMORY[0x1C3B7CD30](0, v39, v40, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v55);
    swift_release();
    v43 = sub_1BE1B2ABC();
    v44 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v59, 1, 1, v43);
    v45 = v61;
    v49(v34, v61, v14);
    v46 = (char *)swift_allocObject();
    *((_QWORD *)v46 + 2) = 0;
    *((_QWORD *)v46 + 3) = 0;
    v47 = v62;
    *((_QWORD *)v46 + 4) = v63;
    *((_QWORD *)v46 + 5) = v47;
    *((_QWORD *)v46 + 6) = v51;
    v31(&v46[(v35 + 56) & ~v35], v34, v14);
    swift_retain();
    sub_1BE193A0C(v44, (uint64_t)&unk_1EF531930, (uint64_t)v46);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v45, v14);
  }
  return result;
}

uint64_t sub_1BDD8B850@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t (*v33)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  uint64_t (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v60 = a6;
  v64 = a5;
  v65 = a7;
  v61 = a3;
  v62 = (char *)a4;
  v67 = a2;
  v66 = type metadata accessor for FinalizedTimestampRange(0);
  MEMORY[0x1E0C80A78](v66);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v58 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v57 - v13;
  v15 = type metadata accessor for FinalizedTimestamp(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v63 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v59 = (uint64_t)&v57 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for RetainedMapRun(0);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0) + 36);
  v68 = a1;
  sub_1BDD86DEC((uint64_t)a1 + v27, (uint64_t)v22, &qword_1ED6F2520);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_1BDD86E30((uint64_t)v22, &qword_1ED6F2520);
    if ((v60 & 1) == 0)
    {
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v9, 1, 1, v15);
      v53 = v68[1];
      if (!__OFSUB__(v53, *v68))
      {
        *(_QWORD *)&v9[*(int *)(v66 + 20)] = v53 - *v68;
        sub_1BDDC72F8((uint64_t)v9);
        sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for FinalizedTimestampRange);
        v52 = 1;
        v39 = v65;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v39, v52, 1, v23);
      }
      goto LABEL_28;
    }
    v28 = sub_1BE1B1F58();
    v29 = (uint64_t)v63;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v63, v61, v28);
    v31 = v64;
    v32 = v68;
    if (__OFADD__(v62, *v64))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v29 + *(int *)(v15 + 20)) = &v62[*v64];
      sub_1BDD9C318(v29, (uint64_t)v9, type metadata accessor for FinalizedTimestamp);
      v33 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
      result = v33(v9, 0, 1, v15);
      v34 = v32[1];
      if (!__OFSUB__(v34, *v32))
      {
        *(_QWORD *)&v9[*(int *)(v66 + 20)] = v34 - *v32;
        sub_1BDDC72F8((uint64_t)v9);
        result = sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for FinalizedTimestampRange);
        v35 = v32[1];
        v36 = v35 - *v32;
        if (!__OFSUB__(v35, *v32))
        {
          v37 = __OFADD__(*v31, v36);
          v38 = *v31 + v36;
          if (!v37)
          {
            *v31 = v38;
            v39 = v65;
            sub_1BDDA2E8C(v29, v65, type metadata accessor for FinalizedTimestamp);
            v40 = 1;
            v33((char *)v39, 0, 1, v15);
LABEL_14:
            v52 = 0;
            *(_QWORD *)(v39 + *(int *)(v23 + 20)) = v40;
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v39, v52, 1, v23);
          }
          goto LABEL_23;
        }
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
  sub_1BDDA2E8C((uint64_t)v22, (uint64_t)v26, type metadata accessor for RetainedMapRun);
  sub_1BDD86DEC((uint64_t)v26, (uint64_t)v14, (uint64_t *)&unk_1ED6F2DC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_1BDD86E30((uint64_t)v14, (uint64_t *)&unk_1ED6F2DC0);
    v41 = sub_1BE1B1F58();
    v42 = (uint64_t)v63;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v63, v61, v41);
    v43 = v64;
    v44 = &v62[*v64];
    v45 = v68;
    if (!__OFADD__(v62, *v64))
    {
      v62 = v26;
      *(_QWORD *)(v42 + *(int *)(v15 + 20)) = v44;
      sub_1BDD9C318(v42, (uint64_t)v9, type metadata accessor for FinalizedTimestamp);
      v46 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
      result = v46(v9, 0, 1, v15);
      v47 = v45[1];
      if (!__OFSUB__(v47, *v45))
      {
        *(_QWORD *)&v9[*(int *)(v66 + 20)] = v47 - *v45;
        sub_1BDDC72F8((uint64_t)v9);
        result = sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for FinalizedTimestampRange);
        v48 = v45[1];
        v49 = v48 - *v45;
        if (!__OFSUB__(v48, *v45))
        {
          v37 = __OFADD__(*v43, v49);
          v50 = *v43 + v49;
          if (!v37)
          {
            *v43 = v50;
            v51 = v58;
            sub_1BDDA2E8C(v42, v58, type metadata accessor for FinalizedTimestamp);
            v46((char *)v51, 0, 1, v15);
            v40 = *(_QWORD *)&v62[*(int *)(v23 + 20)];
            sub_1BDD9C3E0((uint64_t)v62, type metadata accessor for RetainedMapRun);
            v39 = v65;
            sub_1BDDA2EF0(v51, v65, (uint64_t *)&unk_1ED6F2DC0);
            goto LABEL_14;
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v54 = v59;
  sub_1BDDA2E8C((uint64_t)v14, v59, type metadata accessor for FinalizedTimestamp);
  sub_1BDD9C318(v54, (uint64_t)v9, type metadata accessor for FinalizedTimestamp);
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v9, 0, 1, v15);
  v55 = v68[1];
  if (!__OFSUB__(v55, *v68))
  {
    *(_QWORD *)&v9[*(int *)(v66 + 20)] = v55 - *v68;
    sub_1BDDC72F8((uint64_t)v9);
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for FinalizedTimestampRange);
    sub_1BDD9C3E0(v54, type metadata accessor for FinalizedTimestamp);
    v56 = (uint64_t)v26;
    v39 = v65;
    sub_1BDDA2E8C(v56, v65, type metadata accessor for RetainedMapRun);
    v52 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v39, v52, 1, v23);
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for FinalizedTimestamp()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDD8BE10(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD v40[2];

  v3 = v2;
  v5 = type metadata accessor for Replica();
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26B0);
  v39 = a2;
  v9 = sub_1BE1B3254();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v36 = v2;
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v12 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v8 + 64);
    v15 = (unint64_t)(v11 + 63) >> 6;
    v16 = v9 + 64;
    result = swift_retain();
    v18 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v18 << 6);
      }
      else
      {
        if (__OFADD__(v18++, 1))
          goto LABEL_39;
        if (v18 >= v15)
        {
LABEL_32:
          swift_release();
          v3 = v36;
          if ((v39 & 1) != 0)
          {
            v34 = 1 << *(_BYTE *)(v8 + 32);
            if (v34 >= 64)
              bzero((void *)(v8 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v12 = -1 << v34;
            *(_QWORD *)(v8 + 16) = 0;
          }
          break;
        }
        v23 = v12[v18];
        if (!v23)
        {
          v24 = v18 + 1;
          if (v18 + 1 >= v15)
            goto LABEL_32;
          v23 = v12[v24];
          if (!v23)
          {
            while (1)
            {
              v18 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v18 >= v15)
                goto LABEL_32;
              v23 = v12[v18];
              ++v24;
              if (v23)
                goto LABEL_19;
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v18;
        }
LABEL_19:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      v25 = *(_QWORD *)(v37 + 72);
      v26 = *(_QWORD *)(v8 + 48) + v25 * v21;
      if ((v39 & 1) != 0)
      {
        sub_1BDDA2E8C(v26, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDDB4F58((_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v21), v40);
      }
      else
      {
        sub_1BDD9C318(v26, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v21), v40);
      }
      sub_1BE1B36F8();
      sub_1BE1B1F28();
      sub_1BE1B3704();
      result = sub_1BE1B371C();
      v27 = -1 << *(_BYTE *)(v10 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v16 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v16 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v16 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      sub_1BDDA2E8C((uint64_t)v7, *(_QWORD *)(v10 + 48) + v25 * v19, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      result = (uint64_t)sub_1BDDB4F58(v40, (_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v19));
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t static CRDictionary.Index.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1BDD8C19C(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DE9EF8]) & 1;
}

uint64_t sub_1BDD8C19C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = *a1;
  v12 = a1[1];
  v13 = *((unsigned __int8 *)a1 + 16);
  v14 = *a2;
  v15 = a2[1];
  v16 = *((unsigned __int8 *)a2 + 16);
  v17 = type metadata accessor for CRDictionaryElement(0, a4, a7, a4);
  return a9(v11, v12, v13, v14, v15, v16, a3, v17, a6);
}

Swift::Bool __swiftcall CRStruct_2.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedConformanceWitness;
  char v16;
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];

  v3 = v2;
  v4 = v0;
  v5 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26 = AssociatedTypeWitness;
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v24 = (char *)&v23 - v8;
  v27 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v23 - v13;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 48))(v31, v4, v5);
  v29 = v31[4];
  v30 = v31[1];
  v28 = v31[5];
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 48))(v11);
  v17 = v27;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v10, v3, v4);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v4);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v18 = 1;
  }
  else
  {
    v19 = v24;
    swift_getAtKeyPath();
    v20 = v26;
    v21 = swift_getAssociatedConformanceWitness();
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v21 + 16) + 48))(v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v20);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v4);
  }
  return v18 & 1;
}

Swift::Bool __swiftcall CRDictionary_v1.needToFinalizeTimestamps()()
{
  type metadata accessor for CRDictionary();
}

BOOL sub_1BDD8C4EC()
{
  return CRDictionary.needToFinalizeTimestamps()();
}

Swift::Bool __swiftcall CRDictionary.needToFinalizeTimestamps()()
{
  return sub_1BDD8C52C() & 1;
}

uint64_t sub_1BDD8C52C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 16))
  {
    v1 = 1;
  }
  else
  {
    v2 = swift_beginAccess();
    MEMORY[0x1E0C80A78](v2);
    v3 = sub_1BE1B2624();
    swift_bridgeObjectRetain();
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DE9F98], v3);
    v1 = sub_1BE1B290C();
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

uint64_t CRStruct_2.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[8];

  v4 = v3;
  v29[7] = a1;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v22 = (char *)&v19 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - v10;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 48))(v29, a2, v6);
  v12 = v29[0];
  v13 = v29[1];
  v20 = v29[3];
  v28 = v29[4];
  v26 = v29[5];
  swift_retain();
  v21 = v4;
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = v27;
  sub_1BDDA7E18((uint64_t)v11, v12, v13, v9, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  if (v15)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v16 = v25;
  }
  else
  {
    v27 = v13;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
    swift_retain();
    v11 = v22;
    swift_getAtKeyPath();
    swift_release();
    v9 = v24;
    v17 = swift_getAssociatedConformanceWitness();
    sub_1BDDA7E18((uint64_t)v11, v20, v28, v9, *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v16 = v23;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v11, v9);
}

uint64_t sub_1BDD8C8A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE v18[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Proto_Constants(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v18[-v11];
  sub_1BDDC90C0((uint64_t)v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F3290);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v12, type metadata accessor for Proto_Constants);
    sub_1BDD9C318((uint64_t)v12, (uint64_t)v10, type metadata accessor for Proto_Constants);
    sub_1BDD8CA94((uint64_t)v10);
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Constants);
  }
  result = swift_beginAccess();
  v14 = *(_QWORD *)(v1 + 48);
  if (v14)
  {
    v15 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Document._StorageClass(0);
      swift_allocObject();
      v16 = swift_retain();
      *(_QWORD *)(a1 + v15) = sub_1BDDA0F18(v16);
      swift_release();
    }
    v17 = (_QWORD *)(*(_QWORD *)(a1 + v15)
                   + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
    swift_beginAccess();
    *v17 = v14;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1BDD8CA94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v10 = swift_retain();
    *(_QWORD *)(v1 + v9) = sub_1BDDA0F18(v10);
    swift_release();
  }
  v11 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto_Constants);
  v12 = type metadata accessor for Proto_Constants(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1ED6F3290);
  v13 = v11 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v13, &qword_1ED6F3290);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1BDD8CC18(uint64_t a1, void (*a2)(_QWORD), _QWORD *a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  a2(0);
  v8 = swift_allocObject();
  v9 = v8 + *a3;
  v10 = a4(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *a5 = v8;
  return result;
}

uint64_t sub_1BDD8CC8C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Proto_CRDT(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Proto_Value(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Proto_Reference(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1BDD8CD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto_Document, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDDA7368);
}

void sub_1BDD8CD4C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BDD92F18(319, &qword_1ED6F37D0, (void (*)(uint64_t))type metadata accessor for Proto_Document.OneOf_Root);
  if (v0 <= 0x3F)
  {
    sub_1BDD92F18(319, &qword_1ED6F37B0, (void (*)(uint64_t))type metadata accessor for Proto_Version);
    if (v1 <= 0x3F)
    {
      sub_1BDD92F18(319, &qword_1ED6F3848, (void (*)(uint64_t))type metadata accessor for Proto_Constants);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1BDD8CE44(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1BDDB7F0C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1BDE64110();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return sub_1BDDB6CA4(a2, a3);
    }
    goto LABEL_14;
  }
  sub_1BDDC5428(v15, a4 & 1);
  v21 = sub_1BDDB7F0C(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDD8CFA4(__int128 *a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1BDDB7F0C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1BDDB7F70();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1BE1563C4((uint64_t)a1, v18[7] + 48 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = (_OWORD *)(v18[7] + 48 * v12);
    v24 = *a1;
    v25 = a1[2];
    v23[1] = a1[1];
    v23[2] = v25;
    *v23 = v24;
    v26 = v18[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return sub_1BDDB6CA4(a2, a3);
    }
    goto LABEL_14;
  }
  sub_1BDDC50C4(v15, a4 & 1);
  v20 = sub_1BDDB7F0C(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_1BE1563C4((uint64_t)a1, v18[7] + 48 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDD8D114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *, _QWORD);
  _QWORD *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v22;
  int64_t v23;
  _QWORD v24[4];

  v2 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 28));
  v22 = v2 + 56;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 56);
  v23 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v23)
      return swift_release();
    v11 = *(_QWORD *)(v22 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v23)
        return swift_release();
      v11 = *(_QWORD *)(v22 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v23)
          return swift_release();
        v11 = *(_QWORD *)(v22 + 8 * v7);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    v13 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    sub_1BDDB6CA4(*v13, v15);
    sub_1BDDB6CA4(v14, v15);
    result = (uint64_t)sub_1BDDB7CCC(v24, v14, v15);
    v17 = (void (*)(_QWORD *, _QWORD))result;
    if (v16[2])
    {
      v18 = v16;
      if (!*v16)
        goto LABEL_30;
      v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)*v16 + 144);
      v20 = swift_retain();
      LOBYTE(v19) = v19(v20);
      swift_release();
      if ((v19 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          *v18 = (*(uint64_t (**)(void))(*(_QWORD *)*v18 + 160))();
          swift_release();
        }
        (*(void (**)(uint64_t))(*(_QWORD *)*v18 + 152))(a1);
      }
    }
    v17(v24, 0);
    sub_1BDDB796C(v14, v15);
    result = sub_1BDDB796C(v14, v15);
  }
  v12 = v10 + 3;
  if (v12 >= v23)
    return swift_release();
  v11 = *(_QWORD *)(v22 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v23)
      return swift_release();
    v11 = *(_QWORD *)(v22 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t *sub_1BDD8D380(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = a1[1];
  v7 = a2[1];
  v8 = v7 & 0x3000000000000000;
  if ((v6 & 0x3000000000000000) != 0)
  {
    if (!v8)
    {
      v9 = *a2;
      sub_1BDDB6CA4(*a2, a2[1]);
      *a1 = v9;
      a1[1] = v7;
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    sub_1BDDB796C(*a1, v6);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_7;
  }
  v21 = *a2;
  sub_1BDDB6CA4(*a2, a2[1]);
  v22 = *a1;
  v23 = a1[1];
  *a1 = v21;
  a1[1] = v7;
  sub_1BDDB796C(v22, v23);
LABEL_7:
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)(((unint64_t)a1 + v12 + 16) & ~v12);
  v14 = (void *)(((unint64_t)a2 + v12 + 16) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v16 = v15(v13, 1, v10);
  v17 = v15(v14, 1, v10);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      goto LABEL_16;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v13, v14, v10);
      goto LABEL_16;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v18 = *(_QWORD *)(v11 + 64);
  else
    v18 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v18);
LABEL_16:
  if (*(_DWORD *)(v11 + 84))
    v19 = *(_QWORD *)(v11 + 64);
  else
    v19 = *(_QWORD *)(v11 + 64) + 1;
  *(_QWORD *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + v19 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1BDD8D52C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t i;
  uint64_t (*v31)(_OWORD *, _QWORD);
  _QWORD *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _OWORD v42[2];

  v40 = (int *)type metadata accessor for PartiallyOrderedReferenceMap();
  v41 = v3;
  v35 = (uint64_t *)(v3 + v40[7]);
  v33 = *v35 + 56;
  v4 = 1 << *(_BYTE *)(*v35 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(*v35 + 56);
  v34 = (unint64_t)(v4 + 63) >> 6;
  v39 = *v35;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_23;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return result;
    }
    if (v11 >= v34)
      goto LABEL_30;
    v12 = *(_QWORD *)(v33 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v34)
        goto LABEL_30;
      v12 = *(_QWORD *)(v33 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v34)
          goto LABEL_30;
        v12 = *(_QWORD *)(v33 + 8 * v8);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_23:
    v14 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * v10);
    v16 = *v14;
    v15 = v14[1];
    v17 = (uint64_t *)(v41 + v40[5]);
    sub_1BDDB6CA4(*v14, v15);
    v18 = sub_1BDDB7CCC(v42, v16, v15);
    if (*(_QWORD *)(v19 + 16))
      sub_1BDDB2D90(a1, a2 & 1, a3);
    ((void (*)(_OWORD *, _QWORD))v18)(v42, 0);
    v20 = *v17;
    if (!*(_QWORD *)(*v17 + 16))
      goto LABEL_5;
    sub_1BDDB6CA4(v16, v15);
    v21 = sub_1BDDB7F0C(v16, v15);
    if ((v22 & 1) == 0)
    {
      sub_1BDDB796C(v16, v15);
LABEL_5:
      sub_1BDDBA2EC(v42);
      sub_1BDD9CC0C(*(uint64_t *)&v42[0], *((unint64_t *)&v42[0] + 1));
      goto LABEL_6;
    }
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 48 * v21);
    v24 = *v23;
    v25 = v23[1];
    v27 = v23[2];
    v26 = v23[3];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v16, v15);
    if (!v27)
      goto LABEL_5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDBA008(v24, v25, v27);
    v28 = *(_QWORD *)(v26 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v28)
      goto LABEL_5;
LABEL_6:
    result = sub_1BDDB796C(v16, v15);
  }
  v13 = v11 + 3;
  if (v13 < v34)
  {
    v12 = *(_QWORD *)(v33 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        v8 = v13 + 1;
        if (__OFADD__(v13, 1))
          goto LABEL_37;
        if (v8 >= v34)
          goto LABEL_30;
        v12 = *(_QWORD *)(v33 + 8 * v8);
        ++v13;
        if (v12)
          goto LABEL_22;
      }
    }
    v8 = v13;
    goto LABEL_22;
  }
LABEL_30:
  result = swift_release();
  v29 = *(_QWORD *)(*(_QWORD *)(v41 + v40[6]) + 16);
  if (v29)
  {
    for (i = 0; i != v29; ++i)
    {
      v31 = (uint64_t (*)(_OWORD *, _QWORD))sub_1BDDC7234((uint64_t)v42, i);
      if (*v32)
        sub_1BDDB2D90(a1, a2 & 1, a3);
      result = v31(v42, 0);
    }
  }
  return result;
}

void sub_1BDD8D890()
{
  sub_1BDD8D8A4();
}

void sub_1BDD8D8A4()
{
  __asm { BR              X10 }
}

uint64_t sub_1BDD8D8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_1BE1B22E8(), !v2))
  {
    if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16) || (result = sub_1BE1B230C(), !v2))
    {
      type metadata accessor for Proto_Constants(0);
      return sub_1BE1B20D8();
    }
  }
  return result;
}

uint64_t sub_1BDD8D9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t result;
  _QWORD v25[2];
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = sub_1BE1B1F58();
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v25 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v25 - v15;
  v29 = a1;
  v17 = a1 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  swift_beginAccess();
  sub_1BDDBE65C(v17, (uint64_t)v16);
  v18 = type metadata accessor for Replica();
  v19 = *(_QWORD *)(v18 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v26(v16, 1, v18) != 1)
  {
    v11 = v16;
    return sub_1BDD8DC7C((uint64_t)v11, a2);
  }
  v25[0] = a2;
  v25[1] = v2;
  sub_1BDDACC1C((uint64_t)v16);
  v20 = v29 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(v7, v20, v28);
  if (qword_1ED6F43A0 != -1)
    v21 = swift_once();
  MEMORY[0x1E0C80A78](v21);
  v25[-2] = v7;
  v23 = v22;
  sub_1BE1B2E40();

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
  swift_beginAccess();
  sub_1BDDACC5C((uint64_t)v14, v17);
  swift_endAccess();
  *(_QWORD *)(v29 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  sub_1BDDBE65C(v17, (uint64_t)v11);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v26)(v11, 1, v18);
  if ((_DWORD)result != 1)
  {
    a2 = v25[0];
    return sub_1BDD8DC7C((uint64_t)v11, a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDD8DC70()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDD8DC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Replica();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1BDD8DCC0(_QWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1BDDB3EC0(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
        return sub_1BE156400(a1, (_QWORD *)(v19[7] + 16 * v13));
      goto LABEL_11;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1BDE63924();
      goto LABEL_7;
    }
    sub_1BDD8BE10(v16, a3 & 1);
    v21 = sub_1BDDB3EC0(a2);
    if ((v17 & 1) == (v22 & 1))
    {
      v13 = v21;
      v19 = *v4;
      if ((v17 & 1) != 0)
        return sub_1BE156400(a1, (_QWORD *)(v19[7] + 16 * v13));
LABEL_11:
      sub_1BDD9C318(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      return sub_1BDDC4DA8(v13, (uint64_t)v10, a1, v19);
    }
  }
  result = (_QWORD *)sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDD8DE30(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  _QWORD *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  v21 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v21);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BE1B206C();
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Timestamp(0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v1;
  v22 = v11;
  *v3 = 0x8000000000000000;
  v13 = sub_1BDDB3EC0(a1);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  v2 = v12;
  if (*(_QWORD *)(v11 + 24) >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_10:
    sub_1BDDB4348();
    v11 = v22;
    goto LABEL_6;
  }
  sub_1BDDB46CC(v16, isUniquelyReferenced_nonNull_native);
  v11 = v22;
  v17 = sub_1BDDB3EC0(a1);
  if ((v2 & 1) != (v18 & 1))
  {
    result = sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v13 = v17;
LABEL_6:
  *v3 = v11;
  swift_bridgeObjectRelease();
  v19 = (_QWORD *)*v3;
  swift_bridgeObjectRetain();
  if ((v2 & 1) == 0)
  {
    sub_1BE1B2060();
    sub_1BDD9C318(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDDB4614(v13, (uint64_t)v6, (uint64_t)v9, v19);
  }
  swift_bridgeObjectRelease();
  return sub_1BE1B1FF4();
}

uint64_t sub_1BDD8DFFC(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  int64_t v37;

  v3 = v2;
  v6 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B206C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v2;
  if (*(_QWORD *)(v16 + 16) && (v17 = sub_1BDDB3EC0(a1), (v18 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v15, *(_QWORD *)(v16 + 56) + *(_QWORD *)(v10 + 72) * v17, v9);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, v19, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9))
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F3C78);
    v20 = a2;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F3C78);
    v21 = sub_1BDEE94F4();
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((v23 & 1) != 0)
      v20 = a2;
    else
      v20 = v21;
    if (v20 > a2)
    {
      __break(1u);
      goto LABEL_20;
    }
  }
  v36 = v20;
  v37 = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = (_QWORD *)*v3;
  v25 = v35;
  *v3 = 0x8000000000000000;
  a2 = sub_1BDDB3EC0(a1);
  v27 = v25[2];
  v28 = (v26 & 1) == 0;
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  LOBYTE(v9) = v26;
  if (v25[3] >= v29)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_16;
LABEL_21:
    sub_1BDDB4348();
    v25 = v35;
    goto LABEL_16;
  }
  sub_1BDDB46CC(v29, isUniquelyReferenced_nonNull_native);
  v25 = v35;
  v30 = sub_1BDDB3EC0(a1);
  if ((v9 & 1) != (v31 & 1))
  {
    result = sub_1BE1B3680();
    __break(1u);
    return result;
  }
  a2 = v30;
LABEL_16:
  *v3 = v25;
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)*v3;
  swift_bridgeObjectRetain();
  if ((v9 & 1) == 0)
  {
    sub_1BE1B2060();
    sub_1BDD9C318(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDDB4614(a2, (uint64_t)v8, (uint64_t)v12, v32);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2658);
  sub_1BDDA9D60((unint64_t *)&unk_1ED6F2660, &qword_1ED6F2658, MEMORY[0x1E0DEA4E8]);
  return sub_1BE1B1FE8();
}

uint64_t CRStruct_1.hasDelta(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  char v19;
  void (*v20)(char *, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v35 = a1;
  v38 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v37 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v36 = (char *)&v34 - v7;
  v9 = *(_QWORD *)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v34 - v15;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(a2, v9);
  v39 = v17;
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, AssociatedTypeWitness);
  v21 = v16;
  v22 = AssociatedTypeWitness;
  v24 = v37;
  v23 = v38;
  v25 = v36;
  v20(v21, v22);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v26(v25, v3, a2);
  v26(v24, v35, a2);
  if ((v19 & 1) != 0)
  {
    swift_release();
    v27 = 1;
  }
  else
  {
    v28 = *(_QWORD *)(v9 + 8);
    v29 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 24);
    v30 = v29(a2, v28);
    v31 = v29(a2, v28);
    v27 = sub_1BDDB1F18(v31, v30);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v32 = *(void (**)(char *, uint64_t))(v23 + 8);
  v32(v24, a2);
  v32(v25, a2);
  return v27 & 1;
}

uint64_t sub_1BDD8E57C(_BYTE *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a4;
  v6 = v5;
  v37 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v35 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v35 - v18;
  LOBYTE(a1) = *a1;
  v20 = (char *)&v35 + *(int *)(v17 + 64) - v18;
  *v19 = (char)a1;
  *((_WORD *)v19 + 1) = a2;
  sub_1BDDA2E8C(a3, (uint64_t)v20, type metadata accessor for Proto_Document);
  v21 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v21;
  v22 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v6 + 32) = v21;
  *(_QWORD *)(v6 + 40) = v22;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  v23 = v6 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v24 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v6 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v26 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = (uint64_t)&v16[*(int *)(v10 + 64)];
  *v16 = (char)a1;
  *((_WORD *)v16 + 1) = a2;
  sub_1BDD9C318((uint64_t)v20, v27, type metadata accessor for Proto_Document);
  *(_BYTE *)(v6 + 49) = (_BYTE)a1;
  v28 = v35;
  sub_1BDD9C3E0(v27, type metadata accessor for Proto_Document);
  if (v28)
  {
    *(_QWORD *)(v6 + 16) = v28;
    swift_retain();
    v29 = v36;
  }
  else
  {
    *(_QWORD *)(v6 + 16) = 0;
    swift_release();
    v30 = (uint64_t)&v13[*(int *)(v10 + 64)];
    *v13 = *v19;
    *((_WORD *)v13 + 1) = *((_WORD *)v19 + 1);
    sub_1BDD9C318((uint64_t)v20, v30, type metadata accessor for Proto_Document);
    type metadata accessor for CRProtoDecodeContext();
    swift_allocObject();
    swift_retain();
    v31 = v37;
    swift_retain();
    v32 = v36;
    v33 = sub_1BE1161AC(v30, v6, v31);
    v29 = v32;
    if (v32)
    {
      swift_release();
      goto LABEL_8;
    }
    *(_QWORD *)(v6 + 16) = v33;
  }
  swift_release();
  sub_1BDDB51D0((uint64_t)v20);
  swift_release();
  if (v29)
    swift_release();
LABEL_8:
  swift_release();
  sub_1BDD86E30((uint64_t)v19, qword_1ED6F29D8);
  return v6;
}

uint64_t sub_1BDD8E83C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Reference._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  v1 = v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v2 = type metadata accessor for Proto_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  v4 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  v6 = type metadata accessor for Proto_KeyPath(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  qword_1ED6EFD68 = v0;
  return result;
}

uint64_t sub_1BDD8E910(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7 = sub_1BE1B20F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v6 = type metadata accessor for Proto_Reference(0);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = sub_1BE1B20F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = type metadata accessor for Proto_Value(0);
  }
  else
  {
    v8 = sub_1BE1B20F0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v6 = type metadata accessor for Proto_CRDT(0);
  }
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)(a2 + *(int *)(v6 + 20));
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1BDD8EA00()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FinalizedTimestamp(319);
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1BDD8EA90()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FinalizedTimestamp(319);
  if (v1 <= 0x3F)
  {
    result = sub_1BE1B1F58();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1BDD8EB18(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  swift_release();
  sub_1BDD9C3E0(v2 + *a1, a2);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDD8EB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  type metadata accessor for Proto_Set._StorageClass(0);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  v1 = v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v2 = type metadata accessor for Proto_Version(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v4 = v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  v5 = type metadata accessor for Proto_Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions) = MEMORY[0x1E0DEE9D8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion, 1, 1, v2);
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed) = v6;
  qword_1ED6F2800 = v0;
  return result;
}

uint64_t sub_1BDD8EC4C()
{
  return sub_1BDD8EC60();
}

uint64_t sub_1BDD8EC60()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for Proto_CRDT(0);
        sub_1BDD8422C(&qword_1ED6F2E30, type metadata accessor for Proto_CRDT, (uint64_t)&unk_1BE1C6594);
        sub_1BE1B224C();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      result = sub_1BE1B2144();
    }
    sub_1BE1B21EC();
    goto LABEL_11;
  }
  return result;
}

void (*sub_1BDD8ED7C(_QWORD *a1, uint64_t *a2))(_QWORD *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = malloc(0x50uLL);
  *a1 = v5;
  v7 = *a2;
  v6 = a2[1];
  v5[4] = v2;
  v5[5] = v7;
  v5[6] = v6;
  v8 = type metadata accessor for PartiallyOrderedReferenceMap();
  v5[7] = v8;
  *((_DWORD *)v5 + 18) = *(_DWORD *)(v8 + 20);
  sub_1BDDB6CA4(v7, v6);
  v5[8] = sub_1BDDB7CCC(v5, v7, v6);
  return sub_1BDDB9D6C;
}

uint64_t sub_1BDD8EE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, char);
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  char *v41;
  char *v42;
  __int128 v43;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Replica();
  v7 = MEMORY[0x1E0C80A78](v38);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for Timestamp(0);
  result = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BDDD5814((uint64_t)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Timestamp);
    v16 = qword_1ED6F3700;
    swift_retain();
    if (v16 != -1)
      goto LABEL_32;
    while (1)
    {
      sub_1BE1B2E40();
      swift_release();
      sub_1BDD9C318((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v17 = (__int128 *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
      swift_beginAccess();
      v43 = *v17;
      sub_1BDDC8D68((uint64_t)v9, (uint64_t)v6);
      swift_endAccess();
      v18 = sub_1BE1B206C();
      v19 = *(_QWORD *)(v18 - 8);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18);
      if ((_DWORD)result == 1)
        break;
      v37 = sub_1BE1B1FAC();
      v21 = v20;
      result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v18);
      if ((v21 & 1) != 0)
        goto LABEL_34;
      sub_1BDD9C3E0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v22 = v39 + 56;
      v23 = 1 << *(_BYTE *)(v39 + 32);
      v24 = -1;
      if (v23 < 64)
        v24 = ~(-1 << v23);
      v25 = v24 & *(_QWORD *)(v39 + 56);
      v2 += OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
      v26 = (unint64_t)(v23 + 63) >> 6;
      swift_bridgeObjectRetain();
      v27 = 0;
      while (v25)
      {
        while (1)
        {
          v28 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          v29 = v28 | (v27 << 6);
LABEL_25:
          v33 = *(_QWORD *)(v39 + 48) + 16 * v29;
          v6 = *(char **)v33;
          v9 = *(char **)(v33 + 8);
          swift_beginAccess();
          v41 = v6;
          v42 = v9;
          sub_1BDDB6CA4((uint64_t)v6, (unint64_t)v9);
          sub_1BDDB6CA4((uint64_t)v6, (unint64_t)v9);
          v34 = sub_1BDD8ED7C(v40, (uint64_t *)&v41);
          if (!*(_QWORD *)(v35 + 16))
            break;
          sub_1BDD8DFFC((uint64_t)v11, v37);
          v34(v40, 0);
          swift_endAccess();
          sub_1BDDB796C((uint64_t)v6, (unint64_t)v9);
          sub_1BDDB796C((uint64_t)v41, (unint64_t)v42);
          if (!v25)
            goto LABEL_11;
        }
        v34(v40, 0);
        sub_1BDDB796C((uint64_t)v41, (unint64_t)v42);
        swift_endAccess();
        sub_1BDDB796C((uint64_t)v6, (unint64_t)v9);
      }
LABEL_11:
      v30 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
      }
      else
      {
        if (v30 >= v26)
          goto LABEL_28;
        v31 = *(_QWORD *)(v22 + 8 * v30);
        ++v27;
        if (v31)
          goto LABEL_24;
        v27 = v30 + 1;
        if (v30 + 1 >= v26)
          goto LABEL_28;
        v31 = *(_QWORD *)(v22 + 8 * v27);
        if (v31)
          goto LABEL_24;
        v27 = v30 + 2;
        if (v30 + 2 >= v26)
          goto LABEL_28;
        v31 = *(_QWORD *)(v22 + 8 * v27);
        if (v31)
          goto LABEL_24;
        v32 = v30 + 3;
        if (v32 >= v26)
        {
LABEL_28:
          swift_release();
          return sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        }
        v31 = *(_QWORD *)(v22 + 8 * v32);
        if (v31)
        {
          v27 = v32;
LABEL_24:
          v25 = (v31 - 1) & v31;
          v29 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_25;
        }
        while (1)
        {
          v27 = v32 + 1;
          if (__OFADD__(v32, 1))
            break;
          if (v27 >= v26)
            goto LABEL_28;
          v31 = *(_QWORD *)(v22 + 8 * v27);
          ++v32;
          if (v31)
            goto LABEL_24;
        }
      }
      __break(1u);
LABEL_32:
      swift_once();
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDD8F258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  char *v39;
  uint64_t result;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)();
  unint64_t *v60;
  unint64_t *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t *, _QWORD);
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  char v104;
  char v105;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)();
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v4 = type metadata accessor for RetainedMapRun(0);
  v142 = *(_QWORD *)(v4 - 8);
  v143 = v4;
  MEMORY[0x1E0C80A78](v4);
  v136 = (uint64_t)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v111 = (uint64_t)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v108 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v13 = MEMORY[0x1E0C80A78](v12);
  v110 = (uint64_t)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v139 = (char *)&v108 - v16;
  MEMORY[0x1E0C80A78](v15);
  v141 = (uint64_t)&v108 - v17;
  v18 = sub_1BE1B203C();
  v134 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v133 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v114);
  v132 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1BE1B206C();
  v128 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Replica();
  v116 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v123 = (uint64_t)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v126 = (uint64_t)&v108 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v29 = MEMORY[0x1E0C80A78](v28);
  v127 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v119 = (uint64_t)&v108 - v31;
  v32 = *(_QWORD *)(a1 + 64);
  v112 = a1 + 64;
  v33 = 1 << *(_BYTE *)(a1 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & v32;
  v125 = a2 + 16;
  v36 = (unint64_t)(v33 + 63) >> 6;
  v37 = (uint64_t *)(a2 + 32);
  v38 = v35;
  v124 = v37;
  v113 = v36;
  v109 = v36 - 1;
  v115 = a1;
  v39 = v23;
  result = swift_bridgeObjectRetain();
  v120 = 0;
  v122 = v23;
  v138 = v11;
  v129 = v18;
  v118 = v21;
  if (!v38)
    goto LABEL_6;
LABEL_4:
  v121 = (v38 - 1) & v38;
  v41 = __clz(__rbit64(v38)) | (v120 << 6);
  v42 = (uint64_t)v127;
LABEL_5:
  v43 = v115;
  sub_1BDD9C318(*(_QWORD *)(v115 + 48) + *(_QWORD *)(v116 + 72) * v41, v42, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v44 = v128;
  v45 = *(_QWORD *)(v43 + 56) + *(_QWORD *)(v128 + 72) * v41;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  v47 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
  v42 = (uint64_t)v127;
  v47(&v127[*(int *)(v46 + 48)], v45, v21);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v42, 0, 1, v46);
  v39 = v122;
  while (1)
  {
    v52 = v42;
    v53 = v119;
    sub_1BDDA2EF0(v52, v119, &qword_1ED6F3CC0);
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v53, 1, v54) == 1)
      return swift_release();
    v55 = v53 + *(int *)(v54 + 48);
    v56 = v53;
    v57 = v126;
    sub_1BDDA2E8C(v56, v126, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(char *, uint64_t, uint64_t))(v128 + 32))(v39, v55, v21);
    v58 = v123;
    sub_1BDD9C318(v57, v123, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    v59 = sub_1BDD9A058(&v146, v58);
    if (!*v60)
    {
      ((void (*)(uint64_t *, _QWORD))v59)(&v146, 0);
      goto LABEL_32;
    }
    v61 = v60;
    v117 = v59;
    v62 = v133;
    sub_1BE1B2054();
    v63 = (uint64_t)v132;
    sub_1BE1B2030();
    v131 = *(void (**)(char *, uint64_t))(v134 + 8);
    v131(v62, v18);
    v64 = (_QWORD *)(v63 + *(int *)(v114 + 36));
    v65 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
    v66 = *v64;
    sub_1BE1B2C90();
    if (v66 != v144)
      break;
LABEL_30:
    sub_1BDD86E30(v63, &qword_1ED6EFF58);
    ((void (*)(uint64_t *, _QWORD))v117)(&v146, 0);
LABEL_32:
    swift_endAccess();
    sub_1BDD9C3E0(v123, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    v67 = *v124;
    if (!*(_QWORD *)(*v124 + 16) || (v68 = sub_1BDDB3EC0(v126), (v69 & 1) == 0))
    {
      v144 = 0;
      v145 = 0;
      v21 = v118;
      v39 = v122;
LABEL_40:
      sub_1BDD86E30((uint64_t)&v144, qword_1ED6F23F0);
      swift_endAccess();
      goto LABEL_41;
    }
    sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v67 + 56) + 16 * v68), &v144);
    v21 = v118;
    v39 = v122;
    if (!v144)
      goto LABEL_40;
    sub_1BDDB4ED4(&v144, &v147);
    sub_1BDD86E30((uint64_t)&v144, qword_1ED6F23F0);
    swift_endAccess();
    v70 = *(_QWORD *)(v147 + 16);
    if (!v70)
    {
      sub_1BDDB4E78((uint64_t)&v147);
LABEL_63:
      v101 = v18;
      swift_beginAccess();
      v102 = v124;
      swift_bridgeObjectRetain();
      v103 = sub_1BDDB3EC0(v126);
      v105 = v104;
      swift_bridgeObjectRelease();
      if ((v105 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v107 = *v102;
        v144 = *v102;
        *v102 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1BDE63924();
          v107 = v144;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v107 + 48) + *(_QWORD *)(v116 + 72) * v103, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDDB4F58((_QWORD *)(*(_QWORD *)(v107 + 56) + 16 * v103), &v147);
        sub_1BDEF0D00(v103, v107);
        *v102 = v107;
        swift_bridgeObjectRelease();
        sub_1BDDB4F58(&v147, &v144);
        v18 = v101;
      }
      else
      {
        v144 = 0;
        v145 = 0;
        v18 = v101;
      }
      swift_endAccess();
      sub_1BDD86E30((uint64_t)&v144, qword_1ED6F23F0);
      v39 = v122;
      v21 = v118;
      (*(void (**)(char *, uint64_t))(v128 + 8))(v122, v118);
      v74 = v126;
      goto LABEL_42;
    }
    if (v70 == 1)
    {
      v71 = v111;
      sub_1BDD86DEC(v147 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v111, qword_1ED6F25C0);
      v72 = v110;
      sub_1BDDA2EF0(v71 + *(int *)(v6 + 36), v110, &qword_1ED6F2520);
      LODWORD(v71) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v72, 1, v143);
      v73 = v72;
      v39 = v122;
      sub_1BDD86E30(v73, &qword_1ED6F2520);
      sub_1BDDB4E78((uint64_t)&v147);
      if ((_DWORD)v71 == 1)
        goto LABEL_63;
    }
    else
    {
      sub_1BDDB4E78((uint64_t)&v147);
    }
LABEL_41:
    (*(void (**)(char *, uint64_t))(v128 + 8))(v39, v21);
    v74 = v126;
LABEL_42:
    result = sub_1BDD9C3E0(v74, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v38 = v121;
    if (v121)
      goto LABEL_4;
LABEL_6:
    v48 = v120 + 1;
    v42 = (uint64_t)v127;
    if (__OFADD__(v120, 1))
      goto LABEL_76;
    if (v48 < v113)
    {
      v49 = *(_QWORD *)(v112 + 8 * v48);
      if (v49)
        goto LABEL_9;
      v50 = v120 + 2;
      ++v120;
      if (v48 + 1 < v113)
      {
        v49 = *(_QWORD *)(v112 + 8 * v50);
        if (v49)
          goto LABEL_12;
        v120 = v48 + 1;
        if (v48 + 2 < v113)
        {
          v49 = *(_QWORD *)(v112 + 8 * (v48 + 2));
          if (v49)
          {
            v48 += 2;
            goto LABEL_9;
          }
          v120 = v48 + 2;
          if (v48 + 3 < v113)
          {
            v49 = *(_QWORD *)(v112 + 8 * (v48 + 3));
            if (v49)
            {
              v48 += 3;
LABEL_9:
              v121 = (v49 - 1) & v49;
              v41 = __clz(__rbit64(v49)) + (v48 << 6);
              v120 = v48;
              goto LABEL_5;
            }
            v50 = v48 + 4;
            v120 = v48 + 3;
            if (v48 + 4 < v113)
            {
              v49 = *(_QWORD *)(v112 + 8 * v50);
              if (v49)
              {
LABEL_12:
                v48 = v50;
                goto LABEL_9;
              }
              while (1)
              {
                v48 = v50 + 1;
                if (__OFADD__(v50, 1))
                  break;
                if (v48 >= v113)
                {
                  v120 = v109;
                  goto LABEL_26;
                }
                v49 = *(_QWORD *)(v112 + 8 * v48);
                ++v50;
                if (v49)
                  goto LABEL_9;
              }
LABEL_77:
              __break(1u);
              return result;
            }
          }
        }
      }
    }
LABEL_26:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v42, 1, 1, v51);
    v121 = 0;
  }
  v130 = v65;
  while (1)
  {
    v76 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
    v77 = v18;
    v79 = *v78;
    v80 = v78[1];
    v76(&v144, 0);
    v81 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v133, v63, v77);
    sub_1BE1B2C9C();
    v131(v81, v77);
    v82 = v79;
    v83 = (uint64_t)v138;
    v84 = (uint64_t)v139;
    result = sub_1BDDC0538(v82, v80);
    v86 = v85;
    v135 = result;
    if (result != v85)
      break;
LABEL_45:
    sub_1BDD85EF0(v135, v86);
    v75 = *v64;
    v63 = (uint64_t)v132;
    v18 = v129;
    sub_1BE1B2C90();
    if (v75 == v144)
      goto LABEL_30;
  }
  if (v85 < v135)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v87 = v135;
  v137 = v85;
  if (v135 >= v85)
    goto LABEL_75;
  while ((v87 & 0x8000000000000000) == 0)
  {
    v88 = *v61;
    if (v87 >= *(_QWORD *)(*v61 + 16))
      goto LABEL_71;
    v89 = v61;
    v90 = v64;
    v140 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v91 = *(_QWORD *)(v7 + 72) * v87;
    sub_1BDD86DEC(v88 + v140 + v91, v83, qword_1ED6F25C0);
    sub_1BDD86DEC(v83 + *(int *)(v6 + 36), v84, &qword_1ED6F2520);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v84, 1, v143) == 1)
    {
      sub_1BDD86E30(v84, &qword_1ED6F2520);
    }
    else
    {
      v92 = v7;
      v93 = v6;
      v94 = v143;
      v95 = v136;
      sub_1BDDA2E8C(v84, v136, type metadata accessor for RetainedMapRun);
      v96 = *(_QWORD *)(v95 + *(int *)(v94 + 20));
      v97 = v96 - 1;
      if (v96 > 1)
      {
        v98 = v141;
        sub_1BDD86DEC(v95, v141, (uint64_t *)&unk_1ED6F2DC0);
        *(_QWORD *)(v98 + *(int *)(v94 + 20)) = v97;
        sub_1BDD9C3E0(v95, type metadata accessor for RetainedMapRun);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v142 + 56))(v98, 0, 1, v94);
        v6 = v93;
        v7 = v92;
        v86 = v137;
        v83 = (uint64_t)v138;
        goto LABEL_57;
      }
      sub_1BDD9C3E0(v95, type metadata accessor for RetainedMapRun);
      v7 = v92;
      v86 = v137;
      v83 = (uint64_t)v138;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v141, 1, 1, v143);
LABEL_57:
    v64 = v90;
    sub_1BDD86E30(v83, qword_1ED6F25C0);
    v61 = v89;
    v99 = *v89;
    v100 = swift_isUniquelyReferenced_nonNull_native();
    *v89 = v99;
    if ((v100 & 1) == 0)
    {
      v99 = sub_1BDFCEA00(v99);
      *v89 = v99;
    }
    if (v87 >= *(_QWORD *)(v99 + 16))
      goto LABEL_72;
    ++v87;
    sub_1BDDD1A10(v141, v99 + v140 + *(int *)(v6 + 36) + v91);
    v84 = (uint64_t)v139;
    if (v86 == v87)
      goto LABEL_45;
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return swift_release();
}

uint64_t sub_1BDD9004C(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void))
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  void (*v27)(void);
  uint64_t v28;

  v27 = a5;
  v28 = a1;
  v7 = (_QWORD **)v5;
  v10 = sub_1BE1B1DF0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_1BDD901B8(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_release();
      *(_QWORD *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v27();
  v25 = sub_1BDD901B8(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    result = sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v16 = v25;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1BDDC4E48(v16, (uint64_t)v13, v28, v22);
}

unint64_t sub_1BDD901B8(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_1BE1B1DF0();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  v3 = sub_1BE1B26D8();
  return sub_1BDDAEA0C(a1, v3, v2, &qword_1ED6EF200, MEMORY[0x1E0CB0028]);
}

uint64_t sub_1BDD90250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9027C(a1, a2, a3, type metadata accessor for Proto_RLE, &qword_1ED6F27C8, (uint64_t)&unk_1BE1C5E8C);
}

uint64_t sub_1BDD9027C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  char v11;

  result = sub_1BE1B2144();
  if (!v6)
  {
    while ((v11 & 1) == 0)
    {
      if (result == 2)
      {
        a4(0);
        sub_1BDD8422C(a5, a4, a6);
        sub_1BE1B224C();
      }
      else if (result == 1)
      {
        sub_1BE1B21EC();
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDD90384(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_1BDD9C3E0(result, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    v2 = (char *)&loc_1BDD903E0 + 4 * byte_1BE1C3A68[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1BDD906B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  type metadata accessor for Proto_Document._StorageClass(0);
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  v2 = type metadata accessor for Proto_Document.OneOf_Root(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references) = MEMORY[0x1E0DEE9D8];
  v4 = v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v5 = type metadata accessor for Proto_Version(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v7 = v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  v8 = type metadata accessor for Proto_Constants(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets) = v3;
  v9 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
  *v9 = sub_1BE1B20CC();
  v9[1] = v10;
  *(_QWORD *)(v0
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences) = v3;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion, 1, 1, v5);
  qword_1ED6F37F0 = v0;
  return result;
}

uint64_t sub_1BDD907EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7, uint64_t a8, _BYTE *a9, _BYTE *a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  void (*v91)(uint64_t *, _QWORD);
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  unint64_t *v98;
  uint64_t (*v99)();
  int64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t (*v122)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  _BYTE *v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t (*v134)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  int64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t (*v164)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t (*v174)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  _BYTE *v201;
  uint64_t v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  uint64_t v208;
  uint64_t (*v209)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  _BYTE v230[12];
  int v231;
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(_BYTE *, uint64_t);
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  _BYTE *v246;
  _BYTE *v247;
  uint64_t v248;
  _BYTE *v249;
  uint64_t v250;
  _BYTE *v251;
  _BYTE *v252;
  _BYTE *v253;
  _BYTE *v254;
  _BYTE *v255;
  uint64_t v256;
  _BYTE *v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _BYTE *v265;
  uint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t *v269;
  _BYTE *v270;
  _QWORD *v271;
  _BYTE *v272;
  _BYTE *v273;
  _BYTE *v274;
  _BYTE *v275;
  _BYTE *v276;
  uint64_t v277;
  _QWORD *v278;
  _BYTE *v279;
  uint64_t (*v280)();
  _BYTE *v281;
  unint64_t *v282;
  _BYTE *v283;
  _BYTE *v284;
  _BYTE *v285;
  int64_t v286;
  _BYTE *v287;
  _QWORD *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD v301[2];
  unint64_t v302;

  v234 = a4;
  v277 = a3;
  v291 = type metadata accessor for FinalizedTimestampRange(0);
  v256 = *(_QWORD *)(v291 - 8);
  v15 = MEMORY[0x1E0C80A78](v291);
  v252 = &v230[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = MEMORY[0x1E0C80A78](v15);
  v267 = &v230[-v18];
  MEMORY[0x1E0C80A78](v17);
  v20 = &v230[-v19];
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v272 = &v230[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = MEMORY[0x1E0C80A78](v22);
  v249 = &v230[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v279 = &v230[-v27];
  v28 = MEMORY[0x1E0C80A78](v26);
  v255 = &v230[-v29];
  v30 = MEMORY[0x1E0C80A78](v28);
  v273 = &v230[-v31];
  MEMORY[0x1E0C80A78](v30);
  v251 = &v230[-v32];
  v296 = type metadata accessor for FinalizedTimestamp(0);
  v290 = *(_QWORD *)(v296 - 8);
  v33 = MEMORY[0x1E0C80A78](v296);
  v276 = &v230[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = MEMORY[0x1E0C80A78](v33);
  v37 = &v230[-v36];
  v38 = MEMORY[0x1E0C80A78](v35);
  v281 = &v230[-v39];
  v40 = MEMORY[0x1E0C80A78](v38);
  v292 = &v230[-v41];
  MEMORY[0x1E0C80A78](v40);
  v247 = &v230[-v42];
  v294 = type metadata accessor for RetainedMapRun(0);
  v293 = *(_QWORD *)(v294 - 8);
  v43 = MEMORY[0x1E0C80A78](v294);
  v274 = &v230[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v45 = MEMORY[0x1E0C80A78](v43);
  v284 = &v230[-v46];
  MEMORY[0x1E0C80A78](v45);
  v257 = &v230[-v47];
  v295 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v289 = *(_QWORD *)(v295 - 8);
  v48 = MEMORY[0x1E0C80A78](v295);
  v288 = &v230[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v50 = MEMORY[0x1E0C80A78](v48);
  v52 = &v230[-v51];
  v53 = MEMORY[0x1E0C80A78](v50);
  v253 = &v230[-v54];
  MEMORY[0x1E0C80A78](v53);
  v271 = &v230[-v55];
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  v57 = MEMORY[0x1E0C80A78](v56);
  v275 = &v230[-((v58 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = MEMORY[0x1E0C80A78](v57);
  v287 = &v230[-v60];
  v61 = MEMORY[0x1E0C80A78](v59);
  v285 = &v230[-v62];
  v63 = MEMORY[0x1E0C80A78](v61);
  v283 = &v230[-v64];
  v65 = MEMORY[0x1E0C80A78](v63);
  v235 = &v230[-v66];
  v67 = MEMORY[0x1E0C80A78](v65);
  v258 = &v230[-v68];
  MEMORY[0x1E0C80A78](v67);
  v270 = &v230[-v69];
  v70 = type metadata accessor for Replica();
  v71 = MEMORY[0x1E0C80A78](v70);
  v232 = &v230[-((v72 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v71);
  v246 = &v230[-v73];
  v243 = sub_1BE1B203C();
  v245 = *(_QWORD *)(v243 - 8);
  MEMORY[0x1E0C80A78](v243);
  v244 = &v230[-((v74 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  result = MEMORY[0x1E0C80A78](v75);
  if (*(_QWORD *)(a1 + *(int *)(v70 + 20)))
  {
    v78 = a1;
    v286 = result;
    v242 = &v230[-((v77 + 15) & 0xFFFFFFFFFFFFFFF0)];
    swift_beginAccess();
    v79 = *a5;
    if (*(_QWORD *)(*a5 + 16) && (v80 = sub_1BDDB3EC0(v78), (v81 & 1) != 0))
    {
      sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v79 + 56) + 16 * v80), v301);
    }
    else
    {
      v301[0] = 0;
      v301[1] = 0;
    }
    sub_1BDDA2EF0((uint64_t)v301, (uint64_t)&v300, qword_1ED6F23F0);
    if (v300)
    {
      sub_1BDDB4F58(&v300, &v302);
    }
    else
    {
      v298 = MEMORY[0x1E0DEE9D8];
      swift_weakInit();
      swift_weakAssign();
      sub_1BDDB4F58(&v298, &v302);
      sub_1BDD86E30((uint64_t)&v300, qword_1ED6F23F0);
    }
    swift_endAccess();
    result = sub_1BDDCF248(v78);
    if ((a7 & 1) == 0 && result <= a6)
    {
      result = a6 + 1;
      if (__OFADD__(a6, 1))
      {
LABEL_189:
        __break(1u);
        return result;
      }
    }
    v259 = result;
    v241 = v78;
    v265 = v37;
    v82 = a8;
    v83 = v244;
    sub_1BE1B2054();
    v84 = v242;
    sub_1BE1B2030();
    v85 = v243;
    v240 = *(void (**)(_BYTE *, uint64_t))(v245 + 8);
    v240(v83, v243);
    v86 = (uint64_t *)&v84[*(int *)(v286 + 36)];
    v239 = a8 + 16;
    v233 = a9;
    swift_beginAccess();
    v254 = a10;
    swift_beginAccess();
    v87 = (uint64_t)v84;
    v88 = sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
    v89 = v86;
    v231 = 0;
    v238 = v82 + 32;
    v269 = a5;
    v278 = v52;
    v237 = v86;
    v236 = v88;
    while (1)
    {
      v90 = *v89;
      sub_1BE1B2C90();
      if (v90 == v299)
        goto LABEL_131;
      v91 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
      v92 = v85;
      v95 = *v93;
      v94 = v93[1];
      v91(&v299, 0);
      v96 = v244;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v245 + 16))(v244, v87, v92);
      sub_1BE1B2C9C();
      v240(v96, v92);
      v97 = v246;
      sub_1BDD9C318(v241, (uint64_t)v246, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      swift_beginAccess();
      v99 = sub_1BDD9A058(&v299, (uint64_t)v97);
      if (*v98)
      {
        v297 = MEMORY[0x1E0DEE9D8];
        v282 = v98;
        result = sub_1BDDC0538(v95, v94);
        v250 = v95;
        v280 = v99;
        v268 = result;
        if (result != v100)
        {
          v101 = v288;
          if (v100 < result)
          {
LABEL_185:
            __break(1u);
            goto LABEL_186;
          }
          if (result >= v100)
          {
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
            goto LABEL_189;
          }
          v264 = 0;
          v190 = result;
          v191 = v282;
          v286 = v100;
          while (1)
          {
            if ((v190 & 0x8000000000000000) != 0)
              goto LABEL_154;
            if (v190 >= *(_QWORD *)(*v191 + 16))
              break;
            v192 = (*(unsigned __int8 *)(v289 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v289 + 80);
            v193 = *(_QWORD *)(v289 + 72) * v190;
            v194 = v271;
            sub_1BDD86DEC(*v191 + v192 + v193, (uint64_t)v271, qword_1ED6F25C0);
            v195 = v258;
            sub_1BDD86DEC((uint64_t)v194 + *(int *)(v295 + 36), (uint64_t)v258, &qword_1ED6F2520);
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v293 + 48))(v195, 1, v294) == 1)
            {
              sub_1BDD86E30((uint64_t)v195, &qword_1ED6F2520);
              result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v290 + 56))(v20, 1, 1, v296);
              v196 = v194[1];
              if (__OFSUB__(v196, *v194))
                goto LABEL_167;
              *(_QWORD *)&v20[*(int *)(v291 + 20)] = v196 - *v194;
              sub_1BDDC72F8((uint64_t)v20);
              sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
              v197 = 1;
              v198 = v294;
              v199 = v270;
              v52 = v278;
            }
            else
            {
              v200 = (uint64_t)v195;
              v201 = v257;
              sub_1BDDA2E8C(v200, (uint64_t)v257, type metadata accessor for RetainedMapRun);
              v202 = (uint64_t)v201;
              v203 = v251;
              sub_1BDD86DEC(v202, (uint64_t)v251, (uint64_t *)&unk_1ED6F2DC0);
              v204 = v290;
              v205 = v296;
              if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v290 + 48))(v203, 1, v296) == 1)
              {
                sub_1BDD86E30((uint64_t)v203, (uint64_t *)&unk_1ED6F2DC0);
                v206 = sub_1BE1B1F58();
                v207 = v292;
                result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v206 - 8) + 16))(v292, v277, v206);
                v52 = v278;
                if (__OFADD__(v259, v264))
                  goto LABEL_172;
                v208 = v296;
                *(_QWORD *)&v207[*(int *)(v296 + 20)] = v259 + v264;
                sub_1BDD9C318((uint64_t)v207, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                v209 = *(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v204 + 56);
                result = v209(v20, 0, 1, v208);
                v210 = v271;
                v211 = v271[1];
                if (__OFSUB__(v211, *v271))
                  goto LABEL_174;
                *(_QWORD *)&v20[*(int *)(v291 + 20)] = v211 - *v271;
                sub_1BDDC72F8((uint64_t)v20);
                result = sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                v212 = v210[1];
                v213 = v212 - *v210;
                if (__OFSUB__(v212, *v210))
                  goto LABEL_175;
                v126 = __OFADD__(v264, v213);
                v264 += v213;
                if (v126)
                  goto LABEL_176;
                v214 = v273;
                sub_1BDDA2E8C((uint64_t)v292, (uint64_t)v273, type metadata accessor for FinalizedTimestamp);
                v209(v214, 0, 1, v296);
                v215 = v294;
                v216 = *(_QWORD *)&v257[*(int *)(v294 + 20)];
                sub_1BDD9C3E0((uint64_t)v257, type metadata accessor for RetainedMapRun);
                v217 = (uint64_t)v214;
                v194 = v271;
                v218 = v270;
                sub_1BDDA2EF0(v217, (uint64_t)v270, (uint64_t *)&unk_1ED6F2DC0);
                v198 = v215;
                v197 = 0;
                *(_QWORD *)&v218[*(int *)(v215 + 20)] = v216;
                v199 = v218;
                v101 = v288;
              }
              else
              {
                v219 = (uint64_t)v203;
                v220 = v247;
                sub_1BDDA2E8C(v219, (uint64_t)v247, type metadata accessor for FinalizedTimestamp);
                sub_1BDD9C318((uint64_t)v220, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                result = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v204 + 56))(v20, 0, 1, v205);
                v221 = v271[1];
                v52 = v278;
                if (__OFSUB__(v221, *v271))
                  goto LABEL_173;
                *(_QWORD *)&v20[*(int *)(v291 + 20)] = v221 - *v271;
                sub_1BDDC72F8((uint64_t)v20);
                sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                v194 = v271;
                sub_1BDD9C3E0((uint64_t)v220, type metadata accessor for FinalizedTimestamp);
                v199 = v270;
                sub_1BDDA2E8C((uint64_t)v257, (uint64_t)v270, type metadata accessor for RetainedMapRun);
                v197 = 0;
                v198 = v294;
              }
              v191 = v282;
            }
            (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v293 + 56))(v199, v197, 1, v198);
            sub_1BDD86E30((uint64_t)v194, qword_1ED6F25C0);
            v222 = *v191;
            result = swift_isUniquelyReferenced_nonNull_native();
            *v191 = v222;
            if ((result & 1) == 0)
            {
              result = sub_1BDFCEA00(v222);
              v222 = result;
              *v191 = result;
            }
            if (v190 >= *(_QWORD *)(v222 + 16))
              goto LABEL_156;
            ++v190;
            result = sub_1BDDD1A10((uint64_t)v270, v222 + v192 + *(int *)(v295 + 36) + v193);
            v100 = v286;
            if (v286 == v190)
              goto LABEL_17;
          }
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
          goto LABEL_168;
        }
        v264 = 0;
        v101 = v288;
LABEL_17:
        sub_1BDD85EF0(v268, v100);
        v102 = v297;
        ((void (*)(uint64_t *, _QWORD))v280)(&v299, 0);
        swift_endAccess();
        sub_1BDD9C3E0((uint64_t)v246, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        if (v264 > 0)
          *v233 = 1;
        v103 = (uint64_t)v252;
        v262 = *(_QWORD *)(v102 + 16);
        if (v262)
        {
          v263 = v102 + ((*(unsigned __int8 *)(v256 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v256 + 80));
          swift_bridgeObjectRetain();
          result = swift_beginAccess();
          v104 = 0;
          v105 = v250;
          v261 = v102;
          do
          {
            if (v104 >= *(_QWORD *)(v102 + 16))
              goto LABEL_157;
            v268 = v105;
            v260 = *(_QWORD *)(v256 + 72);
            v266 = v104;
            v106 = v267;
            sub_1BDD9C318(v263 + v260 * v104, (uint64_t)v267, type metadata accessor for FinalizedTimestampRange);
            v107 = v255;
            sub_1BDD86DEC((uint64_t)v106, (uint64_t)v255, (uint64_t *)&unk_1ED6F2DC0);
            v282 = *(unint64_t **)(v290 + 48);
            if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v282)(v107, 1, v296) == 1)
            {
              sub_1BDD86E30((uint64_t)v107, (uint64_t *)&unk_1ED6F2DC0);
            }
            else
            {
              v108 = (uint64_t)v107;
              v109 = v281;
              sub_1BDDA2E8C(v108, (uint64_t)v281, type metadata accessor for FinalizedTimestamp);
              v110 = *(_QWORD *)&v106[*(int *)(v291 + 20)];
              result = v268;
              v111 = v268 + v110;
              if (__OFADD__(v268, v110))
                goto LABEL_170;
              if (v111 < v268)
                goto LABEL_171;
              v280 = *(uint64_t (**)())&v109[*(int *)(v296 + 20)];
              v299 = MEMORY[0x1E0DEE9D8];
              result = sub_1BDDC0538(v268, v111);
              if (result != v112)
              {
                if (v112 >= result)
                {
                  if (result >= v112)
                  {
LABEL_182:
                    __break(1u);
LABEL_183:
                    __break(1u);
LABEL_184:
                    __break(1u);
                    goto LABEL_185;
                  }
                  v113 = 0;
                  v248 = result;
                  v114 = result;
                  v115 = (uint64_t)v279;
                  v286 = v112;
                  while (2)
                  {
                    if ((v114 & 0x8000000000000000) != 0)
                    {
                      __break(1u);
LABEL_136:
                      __break(1u);
LABEL_137:
                      __break(1u);
LABEL_138:
                      __break(1u);
LABEL_139:
                      __break(1u);
LABEL_140:
                      __break(1u);
LABEL_141:
                      __break(1u);
LABEL_142:
                      __break(1u);
LABEL_143:
                      __break(1u);
LABEL_144:
                      __break(1u);
LABEL_145:
                      __break(1u);
LABEL_146:
                      __break(1u);
LABEL_147:
                      __break(1u);
LABEL_148:
                      __break(1u);
LABEL_149:
                      __break(1u);
LABEL_150:
                      __break(1u);
LABEL_151:
                      __break(1u);
LABEL_152:
                      __break(1u);
LABEL_153:
                      __break(1u);
LABEL_154:
                      __break(1u);
                      goto LABEL_155;
                    }
                    if (v114 >= *(_QWORD *)(v302 + 16))
                      goto LABEL_136;
                    v116 = (*(unsigned __int8 *)(v289 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v289 + 80);
                    v117 = *(_QWORD *)(v289 + 72) * v114;
                    sub_1BDD86DEC(v302 + v116 + v117, (uint64_t)v52, qword_1ED6F25C0);
                    v118 = v285;
                    sub_1BDD86DEC((uint64_t)v52 + *(int *)(v295 + 36), (uint64_t)v285, &qword_1ED6F2520);
                    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v293 + 48))(v118, 1, v294) == 1)
                    {
                      sub_1BDD86E30((uint64_t)v118, &qword_1ED6F2520);
                      v119 = sub_1BE1B1F58();
                      v120 = v292;
                      result = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v119 - 8) + 16))(v292, v281, v119);
                      if (__OFADD__(v280, v113))
                        goto LABEL_141;
                      v121 = v296;
                      *(_QWORD *)&v120[*(int *)(v296 + 20)] = (char *)v280 + v113;
                      sub_1BDD9C318((uint64_t)v120, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                      v122 = *(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v290 + 56);
                      result = v122(v20, 0, 1, v121);
                      v123 = v52[1];
                      if (__OFSUB__(v123, *v52))
                        goto LABEL_142;
                      *(_QWORD *)&v20[*(int *)(v291 + 20)] = v123 - *v52;
                      sub_1BDDC72F8((uint64_t)v20);
                      result = sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                      v124 = v52[1];
                      v125 = v124 - *v52;
                      if (__OFSUB__(v124, *v52))
                        goto LABEL_143;
                      v126 = __OFADD__(v113, v125);
                      v113 += v125;
                      if (v126)
                        goto LABEL_144;
                      v127 = v283;
                      sub_1BDDA2E8C((uint64_t)v292, (uint64_t)v283, type metadata accessor for FinalizedTimestamp);
                      v122(v127, 0, 1, v296);
                      *(_QWORD *)&v127[*(int *)(v294 + 20)] = 1;
LABEL_44:
                      v115 = (uint64_t)v279;
                    }
                    else
                    {
                      v128 = (uint64_t)v118;
                      v129 = v284;
                      sub_1BDDA2E8C(v128, (uint64_t)v284, type metadata accessor for RetainedMapRun);
                      sub_1BDD86DEC((uint64_t)v129, v115, (uint64_t *)&unk_1ED6F2DC0);
                      v130 = v296;
                      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v282)(v115, 1, v296) == 1)
                      {
                        sub_1BDD86E30(v115, (uint64_t *)&unk_1ED6F2DC0);
                        v131 = sub_1BE1B1F58();
                        v132 = v292;
                        result = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(v292, v281, v131);
                        if (__OFADD__(v280, v113))
                          goto LABEL_149;
                        v133 = v296;
                        *(_QWORD *)&v132[*(int *)(v296 + 20)] = (char *)v280 + v113;
                        sub_1BDD9C318((uint64_t)v132, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                        v134 = *(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v290 + 56);
                        result = v134(v20, 0, 1, v133);
                        v135 = v52[1];
                        if (__OFSUB__(v135, *v52))
                          goto LABEL_151;
                        *(_QWORD *)&v20[*(int *)(v291 + 20)] = v135 - *v52;
                        sub_1BDDC72F8((uint64_t)v20);
                        result = sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                        v136 = v52[1];
                        v137 = v136 - *v52;
                        if (__OFSUB__(v136, *v52))
                          goto LABEL_152;
                        v126 = __OFADD__(v113, v137);
                        v113 += v137;
                        if (v126)
                          goto LABEL_153;
                        v138 = v273;
                        sub_1BDDA2E8C((uint64_t)v292, (uint64_t)v273, type metadata accessor for FinalizedTimestamp);
                        v134(v138, 0, 1, v296);
                        v139 = v294;
                        v140 = *(_QWORD *)&v284[*(int *)(v294 + 20)];
                        sub_1BDD9C3E0((uint64_t)v284, type metadata accessor for RetainedMapRun);
                        v141 = (uint64_t)v138;
                        v127 = v283;
                        sub_1BDDA2EF0(v141, (uint64_t)v283, (uint64_t *)&unk_1ED6F2DC0);
                        *(_QWORD *)&v127[*(int *)(v139 + 20)] = v140;
                        goto LABEL_44;
                      }
                      v142 = (uint64_t)v265;
                      sub_1BDDA2E8C(v115, (uint64_t)v265, type metadata accessor for FinalizedTimestamp);
                      sub_1BDD9C318(v142, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                      result = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v20, 0, 1, v130);
                      v143 = v52[1];
                      if (__OFSUB__(v143, *v52))
                        goto LABEL_150;
                      *(_QWORD *)&v20[*(int *)(v291 + 20)] = v143 - *v52;
                      sub_1BDDC72F8((uint64_t)v20);
                      sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                      sub_1BDD9C3E0(v142, type metadata accessor for FinalizedTimestamp);
                      v127 = v283;
                      sub_1BDDA2E8C((uint64_t)v284, (uint64_t)v283, type metadata accessor for RetainedMapRun);
                    }
                    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v293 + 56))(v127, 0, 1);
                    sub_1BDD86E30((uint64_t)v52, qword_1ED6F25C0);
                    v144 = v302;
                    result = swift_isUniquelyReferenced_nonNull_native();
                    v302 = v144;
                    if ((result & 1) == 0)
                    {
                      result = sub_1BDFCEA00(v144);
                      v144 = result;
                      v302 = result;
                    }
                    if (v114 >= *(_QWORD *)(v144 + 16))
                      goto LABEL_137;
                    ++v114;
                    result = sub_1BDDD1A10((uint64_t)v127, v144 + v116 + *(int *)(v295 + 36) + v117);
                    v112 = v286;
                    v101 = v288;
                    if (v286 == v114)
                    {
                      v109 = v281;
                      result = v248;
                      goto LABEL_52;
                    }
                    continue;
                  }
                }
LABEL_181:
                __break(1u);
                goto LABEL_182;
              }
LABEL_52:
              sub_1BDD85EF0(result, v112);
              swift_bridgeObjectRelease();
              sub_1BDD9C3E0((uint64_t)v109, type metadata accessor for FinalizedTimestamp);
              *v254 = 1;
              v103 = (uint64_t)v252;
            }
            v145 = *(_QWORD *)&v267[*(int *)(v291 + 20)];
            result = sub_1BDD9C3E0((uint64_t)v267, type metadata accessor for FinalizedTimestampRange);
            v105 = v268 + v145;
            if (__OFADD__(v268, v145))
              goto LABEL_163;
            v104 = v266 + 1;
            v102 = v261;
          }
          while (v266 + 1 != v262);
          swift_bridgeObjectRelease();
          result = swift_beginAccess();
          v146 = 0;
          v147 = v250;
          v148 = v264;
          while (v146 < *(_QWORD *)(v102 + 16))
          {
            v268 = v146;
            sub_1BDD9C318(v263 + v146 * v260, v103, type metadata accessor for FinalizedTimestampRange);
            v149 = v249;
            sub_1BDD86DEC(v103, (uint64_t)v249, (uint64_t *)&unk_1ED6F2DC0);
            v150 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v282)(v149, 1, v296);
            result = sub_1BDD86E30((uint64_t)v149, (uint64_t *)&unk_1ED6F2DC0);
            if (v150 == 1)
            {
              v151 = *(_QWORD *)(v103 + *(int *)(v291 + 20));
              v152 = v147 + v151;
              if (__OFADD__(v147, v151))
                goto LABEL_177;
              if (v152 < v147)
                goto LABEL_178;
              v280 = (uint64_t (*)())(v259 + v148);
              if (__OFADD__(v259, v148))
                goto LABEL_179;
              v264 = v148;
              v299 = MEMORY[0x1E0DEE9D8];
              v250 = v147;
              result = sub_1BDDC0538(v147, v152);
              if (result != v153)
              {
                v155 = (uint64_t)v276;
                if (v153 < result)
                  goto LABEL_183;
                if (result < v153)
                {
                  v154 = 0;
                  v266 = result;
                  v156 = result;
                  v157 = (uint64_t)v272;
                  v286 = v153;
                  while ((v156 & 0x8000000000000000) == 0)
                  {
                    if (v156 >= *(_QWORD *)(v302 + 16))
                      goto LABEL_139;
                    v158 = (*(unsigned __int8 *)(v289 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v289 + 80);
                    v159 = *(_QWORD *)(v289 + 72) * v156;
                    sub_1BDD86DEC(v302 + v158 + v159, (uint64_t)v101, qword_1ED6F25C0);
                    v160 = v275;
                    sub_1BDD86DEC((uint64_t)v101 + *(int *)(v295 + 36), (uint64_t)v275, &qword_1ED6F2520);
                    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v293 + 48))(v160, 1, v294) == 1)
                    {
                      sub_1BDD86E30((uint64_t)v160, &qword_1ED6F2520);
                      v161 = sub_1BE1B1F58();
                      v162 = v292;
                      result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 16))(v292, v277, v161);
                      if (__OFADD__(v280, v154))
                        goto LABEL_145;
                      v163 = v296;
                      *(_QWORD *)&v162[*(int *)(v296 + 20)] = (char *)v280 + v154;
                      sub_1BDD9C318((uint64_t)v162, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                      v164 = *(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v290 + 56);
                      result = v164(v20, 0, 1, v163);
                      v165 = v101[1];
                      if (__OFSUB__(v165, *v101))
                        goto LABEL_146;
                      *(_QWORD *)&v20[*(int *)(v291 + 20)] = v165 - *v101;
                      sub_1BDDC72F8((uint64_t)v20);
                      result = sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                      v166 = v101[1];
                      v167 = v166 - *v101;
                      if (__OFSUB__(v166, *v101))
                        goto LABEL_147;
                      v126 = __OFADD__(v154, v167);
                      v154 += v167;
                      if (v126)
                        goto LABEL_148;
                      v168 = v287;
                      sub_1BDDA2E8C((uint64_t)v292, (uint64_t)v287, type metadata accessor for FinalizedTimestamp);
                      v164(v168, 0, 1, v296);
                      *(_QWORD *)&v168[*(int *)(v294 + 20)] = 1;
                      v157 = (uint64_t)v272;
                      v52 = v278;
                    }
                    else
                    {
                      v169 = v274;
                      sub_1BDDA2E8C((uint64_t)v160, (uint64_t)v274, type metadata accessor for RetainedMapRun);
                      sub_1BDD86DEC((uint64_t)v169, v157, (uint64_t *)&unk_1ED6F2DC0);
                      v170 = v296;
                      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v282)(v157, 1, v296) == 1)
                      {
                        sub_1BDD86E30(v157, (uint64_t *)&unk_1ED6F2DC0);
                        v171 = sub_1BE1B1F58();
                        v172 = v292;
                        result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 16))(v292, v277, v171);
                        v101 = v288;
                        v52 = v278;
                        if (__OFADD__(v280, v154))
                          goto LABEL_158;
                        v173 = v296;
                        *(_QWORD *)&v172[*(int *)(v296 + 20)] = (char *)v280 + v154;
                        sub_1BDD9C318((uint64_t)v172, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                        v174 = *(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v290 + 56);
                        result = v174(v20, 0, 1, v173);
                        v175 = v101[1];
                        if (__OFSUB__(v175, *v101))
                          goto LABEL_160;
                        *(_QWORD *)&v20[*(int *)(v291 + 20)] = v175 - *v101;
                        sub_1BDDC72F8((uint64_t)v20);
                        result = sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                        v176 = v101[1];
                        v177 = v176 - *v101;
                        if (__OFSUB__(v176, *v101))
                          goto LABEL_161;
                        v126 = __OFADD__(v154, v177);
                        v154 += v177;
                        if (v126)
                          goto LABEL_162;
                        v178 = v273;
                        sub_1BDDA2E8C((uint64_t)v292, (uint64_t)v273, type metadata accessor for FinalizedTimestamp);
                        v174(v178, 0, 1, v296);
                        v179 = v294;
                        v180 = *(_QWORD *)&v274[*(int *)(v294 + 20)];
                        sub_1BDD9C3E0((uint64_t)v274, type metadata accessor for RetainedMapRun);
                        v181 = (uint64_t)v178;
                        v168 = v287;
                        sub_1BDDA2EF0(v181, (uint64_t)v287, (uint64_t *)&unk_1ED6F2DC0);
                        *(_QWORD *)&v168[*(int *)(v179 + 20)] = v180;
                        v157 = (uint64_t)v272;
                      }
                      else
                      {
                        sub_1BDDA2E8C(v157, v155, type metadata accessor for FinalizedTimestamp);
                        sub_1BDD9C318(v155, (uint64_t)v20, type metadata accessor for FinalizedTimestamp);
                        result = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v20, 0, 1, v170);
                        v182 = v288[1];
                        v52 = v278;
                        if (__OFSUB__(v182, *v288))
                          goto LABEL_159;
                        *(_QWORD *)&v20[*(int *)(v291 + 20)] = v182 - *v288;
                        sub_1BDDC72F8((uint64_t)v20);
                        sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for FinalizedTimestampRange);
                        v101 = v288;
                        sub_1BDD9C3E0(v155, type metadata accessor for FinalizedTimestamp);
                        v168 = v287;
                        sub_1BDDA2E8C((uint64_t)v274, (uint64_t)v287, type metadata accessor for RetainedMapRun);
                      }
                    }
                    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v293 + 56))(v168, 0, 1);
                    sub_1BDD86E30((uint64_t)v101, qword_1ED6F25C0);
                    v183 = v302;
                    result = swift_isUniquelyReferenced_nonNull_native();
                    v302 = v183;
                    if ((result & 1) == 0)
                    {
                      result = sub_1BDFCEA00(v183);
                      v183 = result;
                      v302 = result;
                    }
                    if (v156 >= *(_QWORD *)(v183 + 16))
                      goto LABEL_140;
                    ++v156;
                    result = sub_1BDDD1A10((uint64_t)v287, v183 + v158 + *(int *)(v295 + 36) + v159);
                    v153 = v286;
                    v155 = (uint64_t)v276;
                    if (v286 == v156)
                    {
                      result = v266;
                      goto LABEL_87;
                    }
                  }
                  goto LABEL_138;
                }
                goto LABEL_184;
              }
              v154 = 0;
LABEL_87:
              sub_1BDD85EF0(result, v153);
              result = swift_bridgeObjectRelease();
              v148 = v264 + v154;
              if (__OFADD__(v264, v154))
                goto LABEL_180;
              *v254 = 1;
              v103 = (uint64_t)v252;
              v147 = v250;
            }
            v184 = *(_QWORD *)(v103 + *(int *)(v291 + 20));
            result = sub_1BDD9C3E0(v103, type metadata accessor for FinalizedTimestampRange);
            v126 = __OFADD__(v147, v184);
            v147 += v184;
            if (v126)
              goto LABEL_169;
            v146 = v268 + 1;
            v102 = v261;
            if (v268 + 1 == v262)
            {
              swift_bridgeObjectRelease();
              goto LABEL_127;
            }
          }
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
          goto LABEL_181;
        }
        swift_bridgeObjectRelease();
        v148 = v264;
      }
      else
      {
        ((void (*)(uint64_t *, _QWORD))v99)(&v299, 0);
        swift_endAccess();
        sub_1BDD9C3E0((uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v299 = MEMORY[0x1E0DEE9D8];
        v298 = 0;
        result = sub_1BDDC0538(v95, v94);
        v186 = result;
        v187 = v185;
        v188 = (uint64_t)v235;
        if (result == v185)
        {
          v189 = 0;
        }
        else
        {
          if (v185 < result)
            goto LABEL_187;
          v223 = result;
          if (result >= v185)
            goto LABEL_188;
          do
          {
            if ((v223 & 0x8000000000000000) != 0)
              goto LABEL_164;
            if (v223 >= *(_QWORD *)(v302 + 16))
              goto LABEL_165;
            v224 = (*(unsigned __int8 *)(v289 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v289 + 80);
            v225 = *(_QWORD *)(v289 + 72) * v223;
            v226 = v253;
            sub_1BDD86DEC(v302 + v224 + v225, (uint64_t)v253, qword_1ED6F25C0);
            sub_1BDD8B850(v226, (uint64_t)&v299, v277, v259, &v298, 1, v188);
            sub_1BDD86E30((uint64_t)v226, qword_1ED6F25C0);
            v227 = v302;
            result = swift_isUniquelyReferenced_nonNull_native();
            v302 = v227;
            if ((result & 1) == 0)
            {
              result = sub_1BDFCEA00(v227);
              v227 = result;
              v302 = result;
            }
            if (v223 >= *(_QWORD *)(v227 + 16))
              goto LABEL_166;
            ++v223;
            result = sub_1BDDD1A10(v188, v227 + v224 + *(int *)(v295 + 36) + v225);
          }
          while (v187 != v223);
          v189 = v298;
        }
        sub_1BDD85EF0(v186, v187);
        swift_bridgeObjectRelease();
        *v254 = 1;
        v148 = v189;
      }
LABEL_127:
      v85 = v243;
      v87 = (uint64_t)v242;
      v89 = v237;
      if (v148 >= 1)
      {
        v231 = 1;
        v126 = __OFADD__(v259, v148);
        v259 += v148;
        if (v126)
          break;
      }
    }
    __break(1u);
LABEL_131:
    sub_1BDD86E30(v87, &qword_1ED6EFF58);
    v228 = v241;
    v229 = v232;
    sub_1BDD9C318(v241, (uint64_t)v232, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDDB4ED4(&v302, &v298);
    swift_beginAccess();
    sub_1BDDC8264(&v298, (uint64_t)v229);
    swift_endAccess();
    if ((v231 & 1) != 0)
      sub_1BDDCF0E0(v228, v259);
    return sub_1BDDB4E78((uint64_t)&v302);
  }
  return result;
}

void sub_1BDD928C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1BE1B1F58();
  MEMORY[0x1E0C80A78](v3);
  __asm { BR              X10 }
}

unint64_t sub_1BDD92944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = (uint64_t)BYTE6(v1) >> 4;
  v6 = sub_1BDDAEBE8(0, v5, 0, MEMORY[0x1E0DEE9D8]);
  if ((unint64_t)BYTE6(v1) + 15 >= 0x1F)
  {
    for (i = 0; ; i += 16)
    {
      if (!v5)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        __break(1u);
        JUMPOUT(0x1BDD92AA0);
      }
      if (i == 0x7FFFFFFFFFFFFFF0)
        goto LABEL_14;
      if (i + 16 <= i)
        goto LABEL_15;
      v8 = sub_1BE1B1E5C();
      sub_1BDD92AA8(v8, v9);
      if (v0)
        break;
      v11 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      if (v11 >= v10 >> 1)
        v6 = sub_1BDDAEBE8(v10 > 1, v11 + 1, 1, v6);
      *(_QWORD *)(v6 + 16) = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, _QWORD))(v3 + 32))(v6+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v11, v2, *(_QWORD *)(v4 - 88));
      if (!--v5)
        return v6;
    }
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_1BDD92AA8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDD92AF0()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (BYTE6(v1) != 16)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v5 = xmmword_1BE1BB990;
    *(_BYTE *)(v5 + 16) = 0;
    swift_willThrow();
    return sub_1BDDB796C(v3, v1);
  }
  if (!v0)
  {
LABEL_13:
    sub_1BE1B1F34();
    return sub_1BDDB796C(v3, v1);
  }
  *(_QWORD *)(v4 - 72) = v2;
  if (v0 == 1)
  {
    if ((int)v3 <= v3 >> 32)
    {
      if (!sub_1BE1B1C70())
      {
LABEL_18:
        sub_1BE1B1C88();
        __break(1u);
        goto LABEL_19;
      }
      if (!__OFSUB__((int)v3, sub_1BE1B1C94()))
      {
        sub_1BE1B1C88();
        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(v3 + 16);
  swift_retain();
  swift_retain();
  if (sub_1BE1B1C70())
  {
    if (!__OFSUB__(v6, sub_1BE1B1C94()))
    {
      sub_1BE1B1C88();
      swift_release();
      swift_release();
      goto LABEL_13;
    }
    goto LABEL_16;
  }
LABEL_19:
  result = sub_1BE1B1C88();
  __break(1u);
  return result;
}

void sub_1BDD92D6C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BDD92F18(319, &qword_1ED6F37B0, (void (*)(uint64_t))type metadata accessor for Proto_Version);
  if (v0 <= 0x3F)
  {
    sub_1BDD92F18(319, &qword_1ED6F2EB0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_1BDD92E30()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BDD92F18(319, &qword_1ED6F37B0, (void (*)(uint64_t))type metadata accessor for Proto_Version);
  if (v0 <= 0x3F)
  {
    sub_1BDD92F18(319, &qword_1ED6F3730, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
    if (v1 <= 0x3F)
    {
      sub_1BDD92F18(319, qword_1ED6EFCE0, (void (*)(uint64_t))type metadata accessor for Proto_KeyPath);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

void sub_1BDD92F18(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BE1B2EE8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BDD92F64()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  result = type metadata accessor for Proto_Register(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Proto_Set(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Proto_Struct(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Proto_Sequence(319);
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for Proto_OrderedSet(319);
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for Proto_Counter(319);
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for Proto_CustomCRDT(319);
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1BDD93070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto_Reference, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDDA5A34);
}

uint64_t sub_1BDD93094(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t Capsule.Ref.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1BDD9CC0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t sub_1BDD93124(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v48 = a5;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = -v6;
  v41 = a1;
  v42 = a1 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v43 = v7;
  v44 = 0;
  v45 = v10 & v8;
  v46 = a2;
  v47 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BDD933A0(&v34);
  v11 = v37;
  if (v37)
  {
    while (1)
    {
      v14 = v34;
      v15 = v35;
      v16 = v36;
      v31 = v38;
      v32 = v39;
      v33 = v40;
      v17 = (_QWORD *)*v48;
      v19 = sub_1BDDB7F0C(v34, *((uint64_t *)&v34 + 1));
      v20 = v17[2];
      v21 = (v18 & 1) == 0;
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
        break;
      v23 = v18;
      if (v17[3] >= v22)
      {
        if ((a4 & 1) == 0)
          sub_1BDDB7F70();
      }
      else
      {
        sub_1BDDC50C4(v22, a4 & 1);
        v24 = sub_1BDDB7F0C(v14, *((uint64_t *)&v14 + 1));
        if ((v23 & 1) != (v25 & 1))
          goto LABEL_19;
        v19 = v24;
      }
      v26 = (_QWORD *)*v48;
      if ((v23 & 1) != 0)
      {
        sub_1BDDB796C(v14, *((unint64_t *)&v14 + 1));
        v13 = (_QWORD *)(v26[7] + 48 * v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        *v13 = v15;
        v13[1] = v16;
        v13[2] = v11;
        v13[3] = v31;
        v13[4] = v32;
        v13[5] = v33;
      }
      else
      {
        v26[(v19 >> 6) + 8] |= 1 << v19;
        *(_OWORD *)(v26[6] + 16 * v19) = v14;
        v27 = (_QWORD *)(v26[7] + 48 * v19);
        *v27 = v15;
        v27[1] = v16;
        v27[2] = v11;
        v27[3] = v31;
        v27[4] = v32;
        v27[5] = v33;
        v28 = v26[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (v29)
          goto LABEL_18;
        v26[2] = v30;
      }
      sub_1BDD933A0(&v34);
      v11 = v37;
      a4 = 1;
      if (!v37)
        goto LABEL_5;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    result = sub_1BE1B3680();
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1BDE27FD0();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDD933A0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *);
  __int128 v17;
  uint64_t result;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *v1;
  v4 = v1[3];
  v3 = v1[4];
  v5 = v4;
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    v8 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v7);
    v10 = v8[1];
    v11 = *(_QWORD *)(v2 + 56) + 48 * v7;
    v12 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
    v14 = *(_QWORD *)(v11 + 32);
    v15 = *(_QWORD *)(v11 + 40);
    v16 = (void (*)(_QWORD *))v1[5];
    v25[0] = *v8;
    v9 = v25[0];
    v25[1] = v10;
    v17 = *(_OWORD *)v11;
    v1[3] = v5;
    v1[4] = v6;
    v26 = v17;
    v27 = v12;
    v28 = v13;
    v29 = v14;
    v30 = v15;
    sub_1BDDB6CA4(v9, v10);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v25);
    sub_1BDDB796C(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v19 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      v21 = v1[1];
      v22 = *(_QWORD *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_7:
        v6 = (v22 - 1) & v22;
        v7 = __clz(__rbit64(v22)) + (v19 << 6);
        v5 = v19;
        goto LABEL_3;
      }
      v23 = v4 + 2;
      v5 = v4 + 1;
      if (v4 + 2 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_10:
          v19 = v23;
          goto LABEL_7;
        }
        v5 = v4 + 2;
        if (v4 + 3 < v20)
        {
          v22 = *(_QWORD *)(v21 + 8 * (v4 + 3));
          if (v22)
          {
            v19 = v4 + 3;
            goto LABEL_7;
          }
          v23 = v4 + 4;
          v5 = v4 + 3;
          if (v4 + 4 < v20)
          {
            v22 = *(_QWORD *)(v21 + 8 * v23);
            if (v22)
              goto LABEL_10;
            v19 = v4 + 5;
            v5 = v4 + 4;
            if (v4 + 5 < v20)
            {
              v22 = *(_QWORD *)(v21 + 8 * v19);
              if (v22)
                goto LABEL_7;
              v5 = v20 - 1;
              v24 = v4 + 6;
              while (v20 != v24)
              {
                v22 = *(_QWORD *)(v21 + 8 * v24++);
                if (v22)
                {
                  v19 = v24 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v5;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
  }
  return result;
}

void sub_1BDD935D0(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  sub_1BDD9C3E0((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  free(v2);
  free(v1);
}

void sub_1BDD93618(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  sub_1BDD9C3E0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void sub_1BDD93678(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  sub_1BDD936BC(*a1, *(_BYTE *)(*a1 + 40), *(uint64_t **)(*a1 + 24), *(_QWORD *)(*a1 + 32), *(_QWORD *)(*a1 + 16));
  sub_1BDD86E30((uint64_t)v1, qword_1ED6F23F0);
  free(v1);
}

_QWORD *sub_1BDD936BC(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *result;
  _QWORD v15[2];
  _QWORD v16[2];

  v10 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD86DEC(a1, (uint64_t)v15, qword_1ED6F23F0);
  if (v15[0])
  {
    sub_1BDDB4F58(v15, v16);
    v13 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_1BDDB4F58(v16, (_QWORD *)(v13[7] + 16 * a4));
    }
    else
    {
      sub_1BDD9C318(a5, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDB4F58(v16, v15);
      return sub_1BDDC4DA8(a4, (uint64_t)v12, v15, v13);
    }
  }
  else
  {
    result = (_QWORD *)sub_1BDD86E30((uint64_t)v15, qword_1ED6F23F0);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy();
      return (_QWORD *)sub_1BDEF0D00(a4, *a3);
    }
  }
  return result;
}

BOOL sub_1BDD93800(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *), unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];
  uint64_t v32[3];
  uint64_t v33;

  v7 = v6;
  v8 = v5;
  v33 = a5;
  v29 = a2;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[1] = OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState;
  v15 = qword_1ED6F3700;
  swift_retain();
  if (v15 != -1)
    swift_once();
  sub_1BE1B2E40();
  v30 = v12;
  v16 = v7;
  swift_release();
  v17 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  v18 = *(_QWORD *)(v17 + 8);
  swift_bridgeObjectRetain();
  sub_1BDD86E30((uint64_t)v14, &qword_1ED6F43C0);
  v19 = sub_1BDDBB468(a1, a3, a4, v33);
  if (v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v19;
    swift_beginAccess();
    v22 = swift_bridgeObjectRetain();
    sub_1BDDBC54C(v22);
    swift_endAccess();
    v33 = v21;
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    v23 = *(_QWORD *)(v17 + 8);
    swift_bridgeObjectRetain();
    sub_1BDD86E30((uint64_t)v14, &qword_1ED6F43C0);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v32[0] = MEMORY[0x1E0DEE9E0];
    v32[1] = v18;
    v31[0] = MEMORY[0x1E0DEE9E0];
    v31[1] = v23;
    swift_retain();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    sub_1BDDAC84C(v32, v31, (uint64_t)v14, v29);
    swift_release();
    sub_1BDD86E30((uint64_t)v14, &qword_1ED6F43C0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v24 = sub_1BDDC8800(MEMORY[0x1E0DEE9D8]);
    v25 = (unint64_t *)(v8 + OBJC_IVAR____TtC9Coherence10CapsuleRef_caches);
    swift_beginAccess();
    *v25 = v24;
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v33 + 16);
    swift_bridgeObjectRelease();
    return v26 != 0;
  }
  return v20;
}

uint64_t sub_1BDD93B58(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = a1[1];
  v8 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v9 = *(_QWORD *)&v5[*(int *)(v3 + 20)];
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_1BDDC7A88(v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v33 = MEMORY[0x1E0DEE9D8];
  sub_1BDD93E38(0, 0, 0);
  v12 = v33;
  v24 = v9;
  v25 = v11;
  v26 = xmmword_1BE1B9200;
  v27 = 0u;
  v28 = 0u;
  v29 = v6;
  v30 = v7;
  v31 = 0;
  v32 = 0;
  swift_bridgeObjectRetain();
  v20[0] = v11;
  swift_bridgeObjectRetain();
  sub_1BDDC71C8(0xF000000000000007);
  v20[2] = v6;
  swift_bridgeObjectRetain();
  v20[1] = v7;
  swift_bridgeObjectRetain();
  sub_1BDD93FBC(&v21);
  if (v23)
  {
    v13 = v22;
    do
    {
      v14 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v33 = v12;
      v16 = *(_QWORD *)(v12 + 16);
      v15 = *(_QWORD *)(v12 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1BDD93E38(v15 > 1, v16 + 1, 1);
        v12 = v33;
      }
      *(_QWORD *)(v12 + 16) = v16 + 1;
      v17 = v12 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v14;
      *(_QWORD *)(v17 + 40) = v13;
      sub_1BDD93FBC(&v21);
      v13 = v22;
    }
    while (v23);
  }
  v18 = *((_QWORD *)&v26 + 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD946A4(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD946A4(0xF000000000000007);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1BDD93E38(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BDD93E54(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BDD93E54(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF508);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

void sub_1BDD93FBC(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  _OWORD *v72;

  v2 = v1;
  v72 = v1 + 4;
  while (1)
  {
    while (1)
    {
      v7 = v2[6];
      v8 = v2[7];
      v9 = v2[3];
      v10 = v2[4];
      if ((~v9 & 0xF000000000000007) == 0)
        goto LABEL_8;
      if (v8)
      {
        v38 = (v8 - 1) & v8;
        v39 = __clz(__rbit64(v8)) | (v7 << 6);
        goto LABEL_40;
      }
      v24 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_68;
      v25 = (unint64_t)(v2[5] + 64) >> 6;
      v26 = v2[6];
      if (v24 >= v25)
        goto LABEL_33;
      v27 = *(_QWORD *)(v10 + 8 * v24);
      if (v27)
        break;
      v26 = v7 + 1;
      if (v7 + 2 >= v25)
        goto LABEL_33;
      v27 = *(_QWORD *)(v10 + 8 * (v7 + 2));
      if (v27)
      {
        v24 = v7 + 2;
        break;
      }
      v26 = v7 + 2;
      if (v7 + 3 >= v25)
        goto LABEL_33;
      v27 = *(_QWORD *)(v10 + 8 * (v7 + 3));
      if (v27)
      {
        v24 = v7 + 3;
        break;
      }
      v24 = v7 + 4;
      v26 = v7 + 3;
      if (v7 + 4 < v25)
      {
        v27 = *(_QWORD *)(v10 + 8 * v24);
        if (!v27)
        {
          v26 = v25 - 1;
          v28 = v7 + 5;
          while (v25 != v28)
          {
            v27 = *(_QWORD *)(v10 + 8 * v28++);
            if (v27)
            {
              v24 = v28 - 1;
              goto LABEL_51;
            }
          }
          goto LABEL_33;
        }
        break;
      }
LABEL_33:
      v2[6] = v26;
      v2[7] = 0;
LABEL_8:
      sub_1BDD946A4(v9);
      v2[3] = 0xF000000000000007;
      *v72 = 0u;
      v72[1] = 0u;
      v12 = v2[1];
      v11 = v2[2];
      v13 = *(_QWORD *)(v12 + 16);
      if (v11 == v13)
        goto LABEL_59;
      if (v11 >= v13)
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      v14 = (_QWORD *)(v12 + 24 * v11);
      v16 = v14[4];
      v15 = v14[5];
      v17 = v14[6];
      v2[2] = v11 + 1;
      if (v16)
      {
        v18 = v2[11];
        v19 = __OFADD__(v18, 1);
        v20 = v18 + 1;
        if (v19)
          goto LABEL_67;
        v2[11] = v20;
        v21 = *((unsigned __int8 *)v2 + 80);
        v22 = v2[8];
        v23 = v2[9];
        sub_1BDDC8E74(v16);
        swift_bridgeObjectRetain();
        sub_1BDDC8E74(v16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v21 == 1)
        {
          if ((sub_1BDDB04C0(v15, v23) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BDDC8EA0(v16);
          }
          else
          {
            v34 = sub_1BDDB04C0(v16, v22);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BDDC8EA0(v16);
            if ((v34 & 1) == 0)
              goto LABEL_58;
          }
          v35 = -1 << *(_BYTE *)(v17 + 32);
          v36 = *(_QWORD *)(v17 + 56);
          swift_bridgeObjectRetain();
          sub_1BDDC8EA0(v16);
          swift_bridgeObjectRelease();
          if (-v35 < 64)
            v37 = ~(-1 << -(char)v35);
          else
            v37 = -1;
          v2[3] = v17;
          v2[4] = v17 + 56;
          v2[5] = ~v35;
          v2[6] = 0;
          v2[7] = v37 & v36;
        }
        else
        {
          v55 = sub_1BDD946B8(v15, v23);
          if ((~v55 & 0x101) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BDDC8EA0(v16);
            LOBYTE(v3) = 1;
            goto LABEL_3;
          }
          v56 = v55 | sub_1BDD946B8(v16, v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1BDDC8EA0(v16);
          if ((v56 & 1) == 0)
          {
LABEL_58:
            sub_1BDDC8EA0(v16);
            swift_bridgeObjectRelease();
LABEL_59:
            if (v2[11] >= 101)
            {
              if (qword_1EF52B8F0 == -1)
                goto LABEL_61;
              goto LABEL_70;
            }
            goto LABEL_64;
          }
          v3 = (v56 >> 8) & 1;
LABEL_3:
          v4 = -1 << *(_BYTE *)(v17 + 32);
          v5 = *(_QWORD *)(v17 + 56);
          swift_bridgeObjectRetain();
          sub_1BDDC8EA0(v16);
          swift_bridgeObjectRelease();
          v2[3] = v17;
          v2[4] = v17 + 56;
          if (-v4 < 64)
            v6 = ~(-1 << -(char)v4);
          else
            v6 = -1;
          v2[5] = ~v4;
          v2[6] = 0;
          v2[7] = v6 & v5;
          *((_BYTE *)v2 + 80) = v3 ^ 1;
        }
      }
      else
      {
        v29 = -1 << *(_BYTE *)(v17 + 32);
        v30 = ~v29;
        v31 = *(_QWORD *)(v17 + 56);
        v32 = -v29;
        if (v32 < 64)
          v33 = ~(-1 << v32);
        else
          v33 = -1;
        v2[3] = v17;
        v2[4] = v17 + 56;
        v2[5] = v30;
        v2[6] = 0;
        v2[7] = v33 & v31;
        swift_bridgeObjectRetain();
      }
    }
LABEL_51:
    v38 = (v27 - 1) & v27;
    v39 = __clz(__rbit64(v27)) + (v24 << 6);
    v7 = v24;
LABEL_40:
    v40 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v39);
    v42 = *v40;
    v41 = v40[1];
    v2[6] = v7;
    v2[7] = v38;
    if ((v2[10] & 1) != 0)
    {
      sub_1BDDB6CA4(v42, v41);
      goto LABEL_55;
    }
    v43 = v2[11];
    v19 = __OFADD__(v43, 1);
    v44 = v43 + 1;
    if (v19)
      goto LABEL_66;
    v2[11] = v44;
    v45 = v2[8];
    v46 = v2[9];
    v47 = *v2;
    v48 = *(_QWORD *)(*v2 + 16);
    sub_1BDDB6CA4(v42, v41);
    if (!v48)
      break;
    sub_1BDDB6CA4(v42, v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49 = sub_1BDDB7F0C(v42, v41);
    if ((v50 & 1) == 0)
      goto LABEL_72;
    v51 = *(_QWORD *)(v47 + 56) + 48 * v49;
    v52 = *(_QWORD *)(v51 + 16);
    v53 = *(_QWORD *)(v51 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v42, v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if ((sub_1BDDB04C0(v53, v46) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_55:
      v57 = *v2;
      if (*(_QWORD *)(*v2 + 16))
      {
        sub_1BDDB6CA4(v42, v41);
        v58 = sub_1BDDB7F0C(v42, v41);
        if ((v59 & 1) != 0)
        {
          v60 = (uint64_t *)(*(_QWORD *)(v57 + 56) + 48 * v58);
          v61 = *v60;
          v62 = v60[1];
          v63 = v60[2];
          v64 = v60[3];
          v65 = v60[4];
          v66 = v60[5];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1BDDB796C(v42, v41);
          *a1 = v42;
          a1[1] = v41;
          a1[2] = v61;
          a1[3] = v62;
          a1[4] = v63;
          a1[5] = v64;
          a1[6] = v65;
          a1[7] = v66;
          return;
        }
        goto LABEL_73;
      }
LABEL_69:
      __break(1u);
LABEL_70:
      swift_once();
LABEL_61:
      v67 = sub_1BE1B23C0();
      __swift_project_value_buffer(v67, (uint64_t)qword_1EF549068);
      v68 = sub_1BE1B23A8();
      v69 = sub_1BE1B2DD4();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v70 = 134217984;
        sub_1BE1B2F0C();
        _os_log_impl(&dword_1BDD82000, v68, v69, "Excessive since comparisons: %ld", v70, 0xCu);
        MEMORY[0x1C3B7E068](v70, -1, -1);
      }

LABEL_64:
      *((_OWORD *)a1 + 2) = 0u;
      *((_OWORD *)a1 + 3) = 0u;
      *(_OWORD *)a1 = 0u;
      *((_OWORD *)a1 + 1) = 0u;
      return;
    }
    v54 = sub_1BDDB04C0(v52, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v54 & 1) != 0)
      goto LABEL_55;
    sub_1BDDB796C(v42, v41);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __break(1u);
LABEL_72:
  sub_1BDDB796C(v42, v41);
  __break(1u);
LABEL_73:
  sub_1BDDB796C(v42, v41);
  __break(1u);
}

uint64_t sub_1BDD946A4(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1BDE27FD0();
  return result;
}

uint64_t *sub_1BDD946B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  int v28;
  unint64_t v29;
  uint64_t *result;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  _BOOL4 v68;
  unint64_t v69;

  v65 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Replica();
  v60 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B206C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v66 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v54 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v54 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v62 = (uint64_t)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v54 - v21;
  v23 = *(_QWORD *)(a1 + 64);
  v58 = a1 + 64;
  v24 = 1 << *(_BYTE *)(a1 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v69 = v25 & v23;
  v26 = (unint64_t)(v24 + 63) >> 6;
  v55 = v26 - 1;
  swift_bridgeObjectRetain();
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v59 = v26;
  v61 = a1;
  v56 = a1 + 104;
  v57 = v26 - 5;
  result = &qword_1ED6F3CB8;
  v64 = v22;
LABEL_4:
  v63 = v28;
  while (1)
  {
    v68 = v27;
    if (v69)
    {
      v32 = __clz(__rbit64(v69));
      v69 &= v69 - 1;
      v67 = v29;
      v33 = v32 | (v29 << 6);
      goto LABEL_9;
    }
    v38 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v38 >= v59)
    {
      v40 = v29;
LABEL_15:
      v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      v42 = v62;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v62, 1, 1, v41);
      v69 = 0;
      v67 = v40;
      v35 = v42;
      goto LABEL_16;
    }
    v39 = *(_QWORD *)(v58 + 8 * v38);
    if (!v39)
    {
      v40 = v29 + 1;
      if ((uint64_t)(v29 + 2) >= v59)
        goto LABEL_15;
      v39 = *(_QWORD *)(v58 + 8 * (v29 + 2));
      if (v39)
      {
        v38 = v29 + 2;
      }
      else
      {
        v40 = v29 + 2;
        if ((uint64_t)(v29 + 3) >= v59)
          goto LABEL_15;
        v39 = *(_QWORD *)(v58 + 8 * (v29 + 3));
        if (v39)
        {
          v38 = v29 + 3;
        }
        else
        {
          v38 = v29 + 4;
          v40 = v29 + 3;
          if ((uint64_t)(v29 + 4) >= v59)
            goto LABEL_15;
          v39 = *(_QWORD *)(v58 + 8 * v38);
          if (!v39)
          {
            while (v57 != v29)
            {
              v39 = *(_QWORD *)(v56 + 8 * v29++);
              if (v39)
              {
                v38 = v29 + 4;
                goto LABEL_13;
              }
            }
            v40 = v55;
            goto LABEL_15;
          }
        }
      }
    }
LABEL_13:
    v69 = (v39 - 1) & v39;
    v33 = __clz(__rbit64(v39)) + (v38 << 6);
    v67 = v38;
LABEL_9:
    v34 = v61;
    v35 = v62;
    sub_1BDD9C318(*(_QWORD *)(v61 + 48) + *(_QWORD *)(v60 + 72) * v33, v62, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v36 = *(_QWORD *)(v34 + 56) + *(_QWORD *)(v10 + 72) * v33;
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16))(v35 + *(int *)(v37 + 48), v36, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v35, 0, 1, v37);
    v22 = v64;
LABEL_16:
    sub_1BDDA2EF0(v35, (uint64_t)v22, &qword_1ED6F3CC0);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v22, 1, v43) == 1)
    {
      swift_release();
      if (v68)
      {
        v52 = v63;
        goto LABEL_46;
      }
      v53 = 0;
      v52 = v63;
      return (uint64_t *)(v53 | v52 & 1u);
    }
    v44 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v44(v17, &v22[*(int *)(v43 + 48)], v9);
    sub_1BDDA2E8C((uint64_t)v22, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (*(_QWORD *)(v65 + 16) && (v45 = sub_1BDDB3EC0((uint64_t)v8), (v46 & 1) != 0))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v5, *(_QWORD *)(v65 + 56) + *(_QWORD *)(v10 + 72) * v45, v9);
      v47 = 0;
    }
    else
    {
      v47 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, v47, 1, v9);
    sub_1BDD9C3E0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      sub_1BDD86E30((uint64_t)v5, &qword_1ED6F3C78);
      v27 = 0;
      v28 = 1;
      result = &qword_1ED6F3CB8;
      v29 = v67;
      if (!v68)
        goto LABEL_4;
LABEL_43:
      swift_release();
      v52 = 1;
LABEL_46:
      v53 = 256;
      return (uint64_t *)(v53 | v52 & 1u);
    }
    v44(v15, v5, v9);
    v48 = sub_1BDD8473C((uint64_t)v17);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v66, v17, v9);
    if ((v63 & 1) != 0)
    {
      v31 = *(void (**)(char *, uint64_t))(v10 + 8);
      v31(v66, v9);
      v31(v15, v9);
      v31(v17, v9);
      result = &qword_1ED6F3CB8;
    }
    else
    {
      v49 = v66;
      v50 = sub_1BE1B1FB8();
      v51 = *(void (**)(char *, uint64_t))(v10 + 8);
      v51(v49, v9);
      v51(v15, v9);
      v51(v17, v9);
      v22 = v64;
      result = &qword_1ED6F3CB8;
      if (v48 < v50)
      {
        v27 = 0;
        v28 = 1;
        v29 = v67;
        if (v68 || v48 > 0)
          goto LABEL_43;
        goto LABEL_4;
      }
    }
    v27 = 1;
    v29 = v67;
    if (!v68)
    {
      v27 = v48 > 0;
      v28 = (v48 < 1) & v63;
      if (v48 >= 1 && ((v63 ^ 1) & 1) == 0)
        goto LABEL_43;
      goto LABEL_4;
    }
  }
  __break(1u);
  return result;
}

void sub_1BDD94CFC()
{
  CRDictionary_v1.makeIterator()();
}

uint64_t sub_1BDD94D08()
{
  return swift_release();
}

void CRDictionary_v1.makeIterator()()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDD94D4C()
{
  _QWORD *v0;

  return CRDictionary.makeIterator()(v0);
}

uint64_t CRDictionary.makeIterator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  v5 = -1;
  v6 = *(_QWORD *)(v4 + 64);
  v7 = -1 << *(_BYTE *)(v4 + 32);
  if (-v7 < 64)
    v5 = ~(-1 << -(char)v7);
  *a1 = v4;
  a1[1] = v4 + 64;
  a1[2] = ~v7;
  a1[3] = 0;
  a1[4] = v5 & v6;
  return swift_bridgeObjectRetain();
}

void sub_1BDD94DE4()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDD94E24()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t sub_1BDD94E44@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;

  swift_beginAccess();
  v6 = a1[2];
  v8 = type metadata accessor for CRDictionaryElement(0, a1[3], a1[6], v7);
  v9 = a1[5];
  v10 = swift_bridgeObjectRetain();
  v11 = a2(v10, v6, v8, v9);
  v13 = v12;
  LOBYTE(v6) = v14;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v6 & 1;
  return result;
}

uint64_t CRDictionary.endIndex.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD94E44(a1, MEMORY[0x1E0DEA018], a2);
}

uint64_t CRDictionary.startIndex.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD94E44(a1, MEMORY[0x1E0DE9E30], a2);
}

uint64_t sub_1BDD94F04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char v91;
  void (*v92)(char *, uint64_t);
  void (*v93)(uint64_t *, _QWORD);
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t Strong;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  BOOL v174;
  uint8_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  void (*v185)(uint64_t, char *, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t (*v188)();
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  int64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  int64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  void (*v218)(char *, uint64_t, uint64_t);
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  int64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD v253[3];

  v229 = a2;
  v253[2] = *MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C98);
  v9 = MEMORY[0x1E0C80A78](v8);
  v227 = (uint64_t)&v193 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v210 = (uint64_t)&v193 - v11;
  v233 = sub_1BE1B1F58();
  v232 = *(_QWORD *)(v233 - 8);
  v12 = MEMORY[0x1E0C80A78](v233);
  v226 = (char *)&v193 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v225 = (char *)&v193 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v209 = (char *)&v193 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v208 = (char *)&v193 - v19;
  MEMORY[0x1E0C80A78](v18);
  v198 = (char *)&v193 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  MEMORY[0x1E0C80A78](v21);
  v204 = (char *)&v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v211 = *(_QWORD *)(v203 - 8);
  MEMORY[0x1E0C80A78](v203);
  v201 = (int64_t *)((char *)&v193 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFCA0);
  v25 = MEMORY[0x1E0C80A78](v24);
  v202 = (uint64_t)&v193 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v212 = (uint64_t)&v193 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v29 = MEMORY[0x1E0C80A78](v28);
  v200 = (uint64_t)&v193 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v193 - v31;
  v236 = type metadata accessor for FinalizedTimestamp(0);
  v243 = *(_QWORD *)(v236 - 8);
  v33 = MEMORY[0x1E0C80A78](v236);
  v196 = (uint64_t)&v193 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v195 = (uint64_t)&v193 - v35;
  v220 = sub_1BE1B1F64();
  v224 = *(_QWORD *)(v220 - 8);
  v36 = MEMORY[0x1E0C80A78](v220);
  v222 = (char *)&v193 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v221 = (char *)&v193 - v38;
  v197 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26A8);
  MEMORY[0x1E0C80A78](v197);
  v206 = (char *)&v193 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1BE1B206C();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = MEMORY[0x1E0C80A78](v40);
  v44 = (char *)&v193 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v42);
  v219 = (char *)&v193 - v46;
  MEMORY[0x1E0C80A78](v45);
  v228 = (char *)&v193 - v47;
  v239 = type metadata accessor for Replica();
  v235 = *(_QWORD *)(v239 - 8);
  v48 = MEMORY[0x1E0C80A78](v239);
  v242 = (uint64_t)&v193 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0C80A78](v48);
  v241 = (uint64_t)&v193 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v213 = (char *)&v193 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v245 = (uint64_t)&v193 - v55;
  MEMORY[0x1E0C80A78](v54);
  v57 = (char *)&v193 - v56;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v59 = MEMORY[0x1E0C80A78](v58);
  v61 = (char *)&v193 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = MEMORY[0x1E0C80A78](v59);
  v234 = (uint64_t)&v193 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v199 = (char *)&v193 - v65;
  MEMORY[0x1E0C80A78](v64);
  v249 = 0;
  v248 = 0;
  v247 = MEMORY[0x1E0DEE9E0];
  v238 = v4;
  v230 = a4;
  v240 = a1;
  v237 = v61;
  v231 = v44;
  if ((a3 & 1) == 0)
  {
    v223 = (uint64_t)&v193 - v66;
    v194 = a3;
    v68 = *(_QWORD *)(a1 + 64);
    v205 = a1 + 64;
    v69 = 1 << *(_BYTE *)(a1 + 32);
    v70 = -1;
    if (v69 < 64)
      v70 = ~(-1 << v69);
    v71 = v70 & v68;
    v215 = v67 + 16;
    v214 = (unint64_t)(v69 + 63) >> 6;
    v193 = v214 - 1;
    swift_bridgeObjectRetain();
    v244 = 0;
    v216 = v32;
LABEL_5:
    v72 = (uint64_t)v199;
    if (!v71)
      goto LABEL_8;
LABEL_6:
    v246 = (v71 - 1) & v71;
    v73 = __clz(__rbit64(v71)) | (v244 << 6);
LABEL_7:
    sub_1BDD9C318(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v235 + 72) * v73, v72, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v74 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v41 + 72) * v73;
    v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v41 + 16))(v72 + *(int *)(v75 + 48), v74, v40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v72, 0, 1, v75);
    v61 = v237;
    while (1)
    {
      v80 = v223;
      sub_1BDDA2EF0(v72, v223, &qword_1ED6F3CC0);
      v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v80, 1, v81);
      v83 = v228;
      if (v82 == 1)
        break;
      v84 = v80 + *(int *)(v81 + 48);
      sub_1BDDA2E8C(v80, (uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v83, v84, v40);
      if (*(_QWORD *)&v57[*(int *)(v239 + 20)])
      {
        v217 = v57;
        v85 = (uint64_t)v206;
        sub_1BE1B1F94();
        v86 = v85 + *(int *)(v197 + 36);
        v218 = *(void (**)(char *, uint64_t, uint64_t))(v224 + 16);
        while (1)
        {
          v88 = v221;
          v89 = v220;
          v218(v221, v86, v220);
          sub_1BDD8422C(qword_1ED6EF220, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
          v90 = v222;
          sub_1BE1B2C90();
          sub_1BDD8422C(&qword_1ED6EF208, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
          v91 = sub_1BE1B2798();
          v92 = *(void (**)(char *, uint64_t))(v224 + 8);
          v92(v90, v89);
          v92(v88, v89);
          if ((v91 & 1) != 0)
          {
            sub_1BDD86E30(v85, &qword_1ED6F26A8);
            (*(void (**)(char *, uint64_t))(v41 + 8))(v228, v40);
            v57 = v217;
            sub_1BDD9C3E0((uint64_t)v217, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
            a4 = v230;
            a1 = v240;
            v61 = v237;
            v44 = v231;
            v71 = v246;
            goto LABEL_5;
          }
          v93 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
          v95 = *v94;
          v93(&v250, 0);
          v96 = v219;
          (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v219, v85, v40);
          sub_1BE1B2C9C();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v96, v40);
          swift_beginAccess();
          v97 = *(_QWORD *)(v238 + 32);
          v98 = v243;
          if (!*(_QWORD *)(v97 + 16) || (v99 = sub_1BDDB3EC0((uint64_t)v217), (v100 & 1) == 0))
          {
            v252 = 0;
            v253[0] = 0;
LABEL_35:
            sub_1BDD86E30((uint64_t)&v252, qword_1ED6F23F0);
            swift_endAccess();
            v87 = (uint64_t)v216;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v216, 1, 1, v236);
            goto LABEL_36;
          }
          sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v97 + 56) + 16 * v99), &v252);
          if (!v252)
            goto LABEL_35;
          sub_1BDDB4ED4(&v252, &v251);
          sub_1BDD86E30((uint64_t)&v252, qword_1ED6F23F0);
          swift_endAccess();
          v101 = *(_QWORD *)(v251 + 16);
          if (v101)
          {
            v102 = v251
                 + ((*(unsigned __int8 *)(v211 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80));
            v103 = *(_QWORD *)(v211 + 72);
            if (v95 >= *(_QWORD *)(v102 + v103 * (v101 - 1) + 8))
            {
              v105 = v95;
              v106 = 1;
            }
            else
            {
              v104 = sub_1BDDC0A40(v95, 0, v251);
              if (v104 >= v101)
                goto LABEL_118;
              v105 = v95;
              sub_1BDD86DEC(v102 + v104 * v103, v212, qword_1ED6F25C0);
              v106 = 0;
            }
            v107 = v203;
          }
          else
          {
            v105 = v95;
            v106 = 1;
            v107 = v203;
          }
          v108 = v211;
          v109 = v212;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v211 + 56))(v212, v106, 1, v107);
          v110 = v202;
          sub_1BDD86DEC(v109, v202, &qword_1ED6EFCA0);
          v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v110, 1, v107);
          v112 = (uint64_t)v204;
          if (v111 == 1)
          {
            sub_1BDD86E30(v109, &qword_1ED6EFCA0);
            sub_1BDD86E30(v110, &qword_1ED6EFCA0);
            v87 = (uint64_t)v216;
            v113 = v243;
          }
          else
          {
            v114 = v110;
            v115 = v201;
            sub_1BDDA2EF0(v114, (uint64_t)v201, qword_1ED6F25C0);
            sub_1BDD86DEC((uint64_t)v115 + *(int *)(v107 + 36), v112, &qword_1ED6F2520);
            v116 = type metadata accessor for RetainedMapRun(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 48))(v112, 1, v116) == 1)
            {
              sub_1BDD86E30(v112, &qword_1ED6F2520);
              v113 = v243;
              v117 = v200;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v243 + 56))(v200, 1, 1, v236);
              v118 = v212;
              v87 = (uint64_t)v216;
            }
            else
            {
              v117 = v200;
              sub_1BDD86DEC(v112, v200, (uint64_t *)&unk_1ED6F2DC0);
              sub_1BDD9C3E0(v112, type metadata accessor for RetainedMapRun);
              v113 = v243;
              v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v243 + 48))(v117, 1, v236);
              v118 = v212;
              v87 = (uint64_t)v216;
              if (v119 != 1)
              {
                v124 = v196;
                sub_1BDDA2E8C(v117, v196, type metadata accessor for FinalizedTimestamp);
                (*(void (**)(char *, uint64_t, uint64_t))(v232 + 16))(v198, v124, v233);
                v125 = v124;
                v126 = *(_QWORD *)(v124 + *(int *)(v236 + 20));
                v127 = v126 + v105;
                if (__OFADD__(v126, v105))
                  goto LABEL_120;
                v128 = v201;
                v129 = *v201;
                sub_1BDD9C3E0(v125, type metadata accessor for FinalizedTimestamp);
                sub_1BDD86E30((uint64_t)v128, qword_1ED6F25C0);
                sub_1BDD86E30(v118, &qword_1ED6EFCA0);
                v130 = __OFSUB__(v127, v129);
                v131 = v127 - v129;
                if (v130)
                  goto LABEL_121;
                v87 = (uint64_t)v216;
                (*(void (**)(char *, char *, uint64_t))(v232 + 32))(v216, v198, v233);
                v132 = v236;
                *(_QWORD *)(v87 + *(int *)(v236 + 20)) = v131;
                v120 = v132;
                v113 = v243;
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v243 + 56))(v87, 0, 1, v132);
                goto LABEL_55;
              }
            }
            sub_1BDD86E30((uint64_t)v201, qword_1ED6F25C0);
            sub_1BDD86E30(v118, &qword_1ED6EFCA0);
            sub_1BDD86E30(v117, (uint64_t *)&unk_1ED6F2DC0);
          }
          v120 = v236;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v113 + 56))(v87, 1, 1, v236);
LABEL_55:
          sub_1BDDB4E78((uint64_t)&v251);
          v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v87, 1, v120);
          v85 = (uint64_t)v206;
          if (v121 == 1)
          {
LABEL_36:
            sub_1BDD86E30(v87, (uint64_t *)&unk_1ED6F2DC0);
          }
          else
          {
            v122 = v195;
            sub_1BDDA2E8C(v87, v195, type metadata accessor for FinalizedTimestamp);
            v123 = v229;
            if (*(_QWORD *)(v122 + *(int *)(v120 + 20)) > v229)
              v123 = *(_QWORD *)(v122 + *(int *)(v120 + 20));
            v229 = v123;
            sub_1BDD9C3E0(v122, type metadata accessor for FinalizedTimestamp);
          }
        }
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v83, v40);
      sub_1BDD9C3E0((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      a1 = v240;
      v71 = v246;
      if (v246)
        goto LABEL_6;
LABEL_8:
      v76 = v244 + 1;
      if (__OFADD__(v244, 1))
        goto LABEL_117;
      if (v76 < v214)
      {
        v77 = *(_QWORD *)(v205 + 8 * v76);
        if (v77)
          goto LABEL_11;
        v78 = v244 + 2;
        ++v244;
        if (v76 + 1 < v214)
        {
          v77 = *(_QWORD *)(v205 + 8 * v78);
          if (v77)
            goto LABEL_14;
          v244 = v76 + 1;
          if (v76 + 2 < v214)
          {
            v77 = *(_QWORD *)(v205 + 8 * (v76 + 2));
            if (v77)
            {
              v76 += 2;
              goto LABEL_11;
            }
            v244 = v76 + 2;
            if (v76 + 3 < v214)
            {
              v77 = *(_QWORD *)(v205 + 8 * (v76 + 3));
              if (!v77)
              {
                v78 = v76 + 4;
                v244 = v76 + 3;
                if (v76 + 4 < v214)
                {
                  v77 = *(_QWORD *)(v205 + 8 * v78);
                  if (v77)
                  {
LABEL_14:
                    v76 = v78;
                    goto LABEL_11;
                  }
                  while (1)
                  {
                    v76 = v78 + 1;
                    if (__OFADD__(v78, 1))
                      goto LABEL_124;
                    if (v76 >= v214)
                      break;
                    v77 = *(_QWORD *)(v205 + 8 * v76);
                    ++v78;
                    if (v77)
                      goto LABEL_11;
                  }
                  v244 = v193;
                }
                goto LABEL_28;
              }
              v76 += 3;
LABEL_11:
              v246 = (v77 - 1) & v77;
              v73 = __clz(__rbit64(v77)) + (v76 << 6);
              v244 = v76;
              goto LABEL_7;
            }
          }
        }
      }
LABEL_28:
      v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v72, 1, 1, v79);
      v246 = 0;
    }
    a1 = v240;
    swift_release();
    v67 = v238;
    LOBYTE(a3) = v194;
  }
  LODWORD(v228) = a3 & 1;
  v133 = *(_QWORD *)(a1 + 64);
  v223 = a1 + 64;
  v134 = 1 << *(_BYTE *)(a1 + 32);
  v135 = -1;
  if (v134 < 64)
    v135 = ~(-1 << v134);
  v136 = v135 & v133;
  v244 = v67 + 16;
  v246 = OBJC_IVAR___CRContext_crdtDatabase;
  v243 = v67 + 32;
  v222 = (char *)v253;
  v224 = (unint64_t)(v134 + 63) >> 6;
  v221 = (char *)(v224 - 1);
  swift_bridgeObjectRetain();
  v236 = 0;
  v137 = v245;
  v207 = v41;
  while (1)
  {
    if (v136)
    {
      v143 = __clz(__rbit64(v136));
      v136 &= v136 - 1;
      v144 = v143 | (v236 << 6);
LABEL_72:
      sub_1BDD9C318(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v235 + 72) * v144, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v145 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v41 + 72) * v144;
      v146 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
      (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(&v61[*(int *)(v146 + 48)], v145, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 56))(v61, 0, 1, v146);
      a4 = v230;
      goto LABEL_94;
    }
    v147 = v236 + 1;
    if (__OFADD__(v236, 1))
    {
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    if (v147 < v224)
    {
      v148 = *(_QWORD *)(v223 + 8 * v147);
      if (v148)
        goto LABEL_76;
      v149 = v236 + 2;
      ++v236;
      if (v147 + 1 < v224)
      {
        v148 = *(_QWORD *)(v223 + 8 * v149);
        if (v148)
          goto LABEL_79;
        v236 = v147 + 1;
        if (v147 + 2 < v224)
        {
          v148 = *(_QWORD *)(v223 + 8 * (v147 + 2));
          if (v148)
          {
            v147 += 2;
            goto LABEL_76;
          }
          v236 = v147 + 2;
          if (v147 + 3 < v224)
          {
            v148 = *(_QWORD *)(v223 + 8 * (v147 + 3));
            if (v148)
            {
              v147 += 3;
              goto LABEL_76;
            }
            v149 = v147 + 4;
            v236 = v147 + 3;
            if (v147 + 4 < v224)
            {
              v148 = *(_QWORD *)(v223 + 8 * v149);
              if (v148)
              {
LABEL_79:
                v147 = v149;
LABEL_76:
                v136 = (v148 - 1) & v148;
                v144 = __clz(__rbit64(v148)) + (v147 << 6);
                v236 = v147;
                goto LABEL_72;
              }
              while (1)
              {
                v147 = v149 + 1;
                if (__OFADD__(v149, 1))
                  goto LABEL_123;
                if (v147 >= v224)
                  break;
                v148 = *(_QWORD *)(v223 + 8 * v147);
                ++v149;
                if (v148)
                  goto LABEL_76;
              }
              v236 = (uint64_t)v221;
            }
          }
        }
      }
    }
    v150 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v61, 1, 1, v150);
    v136 = 0;
LABEL_94:
    v151 = (uint64_t)v61;
    v152 = v234;
    sub_1BDDA2EF0(v151, v234, &qword_1ED6F3CC0);
    v153 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 48))(v152, 1, v153) == 1)
      break;
    v154 = v152 + *(int *)(v153 + 48);
    sub_1BDDA2E8C(v152, v137, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v44, v154, v40);
    swift_beginAccess();
    v155 = *(_QWORD *)v243;
    if (!*(_QWORD *)(*(_QWORD *)v243 + 16) || (v156 = sub_1BDDB3EC0(v137), (v157 & 1) == 0))
    {
      v252 = 0;
      v253[0] = 0;
LABEL_107:
      sub_1BDD86E30((uint64_t)&v252, qword_1ED6F23F0);
      swift_endAccess();
      v159 = v246;
      goto LABEL_108;
    }
    sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(v155 + 56) + 16 * v156), &v252);
    if (!v252)
      goto LABEL_107;
    Strong = swift_weakLoadStrong();
    sub_1BDD86E30((uint64_t)&v252, qword_1ED6F23F0);
    swift_endAccess();
    v159 = v246;
    if (Strong)
    {
      v160 = Strong + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
      swift_beginAccess();
      v161 = v160;
      v162 = v210;
      sub_1BDD86DEC(v161, v210, &qword_1ED6F3C98);
      v163 = type metadata accessor for CRReplicaDatabase.Replica(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 48))(v162, 1, v163) == 1)
        goto LABEL_125;
      v164 = v232;
      v165 = v209;
      v166 = v233;
      (*(void (**)(char *, uint64_t, uint64_t))(v232 + 16))(v209, v162, v233);
      sub_1BDD9C3E0(v162, type metadata accessor for CRReplicaDatabase.Replica);
      v167 = v245;
      sub_1BE1B1F40();
      sub_1BE1B1F40();
      v168 = v208;
      sub_1BE1B1F34();
      (*(void (**)(char *, uint64_t))(v164 + 8))(v165, v166);
      v169 = (uint64_t)v213;
      v170 = v166;
      v137 = v167;
      (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v213, v168, v170);
      *(_QWORD *)(v169 + *(int *)(v239 + 20)) = 0;
      v44 = v231;
      sub_1BDD907EC(v167, (uint64_t)v231, v169, Strong, &v247, v229, (char)v228, v238, &v248, &v249);
      a4 = v230;
      if (Strong == *(_QWORD *)(v230 + v246))
      {
        swift_release();
        v142 = v169;
        a1 = v240;
        v41 = v207;
        v61 = v237;
      }
      else
      {
        sub_1BDD84450();
        v61 = v237;
        if (qword_1EF52BD08 != -1)
          swift_once();
        v171 = sub_1BE1B23C0();
        __swift_project_value_buffer(v171, (uint64_t)qword_1EF52C5F8);
        v172 = sub_1BE1B23A8();
        v173 = sub_1BE1B2DEC();
        v174 = os_log_type_enabled(v172, v173);
        v41 = v207;
        if (v174)
        {
          v175 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v175 = 0;
          _os_log_impl(&dword_1BDD82000, v172, v173, "Using multiple contexts with the same CRDT. This will be inefficient.", v175, 2u);
          MEMORY[0x1C3B7E068](v175, -1, -1);
        }
        swift_release();

        v142 = (uint64_t)v213;
        a4 = v230;
        a1 = v240;
      }
      goto LABEL_69;
    }
LABEL_108:
    v176 = *(_QWORD *)(a4 + v159) + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
    swift_beginAccess();
    v177 = v176;
    v178 = v227;
    sub_1BDD86DEC(v177, v227, &qword_1ED6F3C98);
    v179 = type metadata accessor for CRReplicaDatabase.Replica(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 48))(v178, 1, v179) == 1)
      goto LABEL_122;
    v180 = v232;
    v181 = v226;
    v182 = v233;
    (*(void (**)(char *, uint64_t, uint64_t))(v232 + 16))(v226, v178, v233);
    sub_1BDD9C3E0(v178, type metadata accessor for CRReplicaDatabase.Replica);
    v183 = v225;
    v184 = v245;
    sub_1BDDD6AB4();
    (*(void (**)(char *, uint64_t))(v180 + 8))(v181, v182);
    v185 = *(void (**)(uint64_t, char *, uint64_t))(v180 + 32);
    v186 = v241;
    v185(v241, v183, v182);
    *(_QWORD *)(v186 + *(int *)(v239 + 20)) = 0;
    v187 = v242;
    sub_1BDD9C318(v184, v242, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    swift_beginAccess();
    v188 = sub_1BDD9A058(&v250, v187);
    a1 = v240;
    if (*v189)
    {
      v138 = v246;
      swift_weakAssign();
      ((void (*)(uint64_t *, _QWORD))v188)(&v250, 0);
      v44 = v231;
    }
    else
    {
      ((void (*)(uint64_t *, _QWORD))v188)(&v250, 0);
      v44 = v231;
      v138 = v246;
    }
    swift_endAccess();
    sub_1BDD9C3E0(v242, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v139 = *(_QWORD *)(a4 + v138);
    swift_retain();
    v140 = v245;
    v141 = v241;
    sub_1BDD907EC(v245, (uint64_t)v44, v241, v139, &v247, v229, (char)v228, v238, &v248, &v249);
    swift_release();
    v142 = v141;
    v137 = v140;
    v61 = v237;
LABEL_69:
    sub_1BDD9C3E0(v142, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v40);
    sub_1BDD9C3E0(v137, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  swift_release();
  swift_beginAccess();
  v190 = (_QWORD *)v244;
  if ((v248 & 1) != 0)
  {
    swift_beginAccess();
    if (!__OFADD__(*v190, 1))
    {
      ++*v190;
      goto LABEL_115;
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
  }
LABEL_115:
  swift_beginAccess();
  v191 = *v190;
  swift_beginAccess();
  swift_beginAccess();
  return v191;
}

uint64_t sub_1BDD96A3C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;

  sub_1BDD86E30(v2 + *a1, a2);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDD96A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_BYTE *, _QWORD);
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  char v32;
  uint64_t v33;
  void (*v34)(_BYTE *, _QWORD);
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[32];

  v5 = v4;
  v42 = a1;
  v6 = (_QWORD *)*v4;
  v7 = v6[10];
  v37 = *(_QWORD *)(v6[11] + 16);
  v38 = v7;
  v8 = type metadata accessor for Capsule(255, v7, v37, a4);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v37 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v37 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v37 - v19;
  v39 = (uint64_t (*)(_BYTE *))v6[33];
  v21 = (uint64_t (*)(_BYTE *, _QWORD))v39(v43);
  v41 = *(_QWORD *)(v8 - 8);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  if (!v22(v23, 1, v8))
    Capsule.finalizeTimestamps(_:)(v5[9], v8);
  v24 = v21(v43, 0);
  v25 = *(void (**)(uint64_t))(*v5 + 248);
  v25(v24);
  v26 = v22((uint64_t)v20, 1, v8);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v20, v9);
  if (v26 == 1)
  {
    v29 = v41;
    v28 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v18, v42, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v18, 0, 1, v8);
    (*(void (**)(char *))(*v5 + 256))(v18);
    v30 = v40;
LABEL_9:
    v33 = sub_1BDD8B29C();
    goto LABEL_10;
  }
  v25(v27);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v15, 1, v8);
  v29 = v41;
  v28 = v42;
  if ((_DWORD)result == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v32 = Capsule.hasDelta(from:)((uint64_t)v15, v8);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v8);
  v30 = v40;
  if ((v32 & 1) == 0)
  {
LABEL_10:
    v25(v33);
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v30, 1, v8);
    if ((_DWORD)result != 1)
    {
      v36 = Capsule.hasDelta(from:)(v28, v8);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v8);
      return v36 & 1;
    }
    __break(1u);
    goto LABEL_13;
  }
  v34 = (void (*)(_BYTE *, _QWORD))v39(v43);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v22)(v35, 1, v8);
  if ((_DWORD)result != 1)
  {
    Capsule.merge<A>(_:)(v28, v8, v38, v37);
    v34(v43, 0);
    goto LABEL_9;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1BDD96D44(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2)
  {
    if (((((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  v15 = (a1 + v9 + 16) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v17 = *(_QWORD *)((v10 + v15) & 0xFFFFFFFFFFFFF8);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    if ((v17 + 1) >= 2)
      return v17;
    else
      return 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
}

uint64_t Capsule.hasDelta(from:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(int *)(a2 + 40);
  if (*(_QWORD *)(v2 + v3))
  {
    result = *(_QWORD *)(result + v3);
    if (result)
      return sub_1BDD97004(result) & 1;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDD96EDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 648);
  swift_beginAccess();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v6);
  v7 = sub_1BE1B2EE8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v3, v7);
}

uint64_t type metadata accessor for Capsule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Capsule);
}

uint64_t (*sub_1BDD96FC0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1BDD97004(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;

  if ((sub_1BDD972BC(v1) & 1) != 0)
  {
    if (qword_1ED6F4510 != -1)
      swift_once();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    swift_beginAccess();
    v4 = *v3;
    v5 = v3[1];
    v19 = *v3;
    v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    swift_beginAccess();
    v17 = *v6;
    v18 = v6[1];
    v7 = *(_QWORD *)(v18 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v7)
      sub_1BDDB2D90(v20, v21, v22);
    v8 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8)
    {
      sub_1BDDB2D90(v20, v21, v22);
      swift_bridgeObjectRelease();
      v4 = v19;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if ((sub_1BDDB04C0(v5, v18) & 1) != 0)
      v15 = 1;
    else
      v15 = sub_1BDDB04C0(v4, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v10 = *v9;
  v11 = v9[1];
  v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((sub_1BDDB04C0(v11, v14) & 1) == 0)
  {
    v15 = sub_1BDDB04C0(v10, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    return v15 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = 1;
  return v15 & 1;
}

uint64_t sub_1BDD972BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
  if (v4)
  {
    v5 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16)
      && *(_QWORD *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) < *(_QWORD *)(a1
                                                                                               + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration))
    {
      return 1;
    }
  }
  v7 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v7 + 8) + 16))
    return 0;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration);
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration);
  if (v4)
    return v8 != v9;
  else
    return v9 < v8;
}

uint64_t *CRCustomFileSyncManager.__allocating_init(_:sync:at:version:)(void *a1, char *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  char *v33;
  char v34;

  v31 = a1;
  v7 = *(_QWORD *)(v4 + 80);
  v32 = *(_QWORD *)(v7 - 8);
  v33 = a2;
  MEMORY[0x1E0C80A78](a1);
  v30 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B1DF0();
  v28 = *(_QWORD *)(v9 - 8);
  v10 = v28;
  v29 = v9;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v15);
  v16 = sub_1BE1B2EE8();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v28 - v18;
  LOBYTE(a4) = *a4;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))((char *)&v28 - v18, v33, v16);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v21 = v29;
  v20(v12, a3, v29);
  v34 = (char)a4;
  type metadata accessor for CRBinaryFileSync(0, AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  v23 = (uint64_t)v30;
  swift_dynamicCast();
  v24 = v31;
  v25 = sub_1BDDCC808(v31, (uint64_t)v19, (uint64_t)v12, v23);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v23, v7);
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v19, v16);

  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a3, v21);
  v26(v33, v16);
  return v25;
}

uint64_t sub_1BDD975F4@<X0>(char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  int *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;

  v102 = a4;
  v103 = a5;
  v100 = a3;
  v86 = a8;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v12);
  v88 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = (int *)type metadata accessor for PartiallyOrderedReferenceMap();
  v14 = MEMORY[0x1E0C80A78](v93);
  v97 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v91 = (uint64_t)&v82 - v16;
  v92 = sub_1BE1B1F58();
  v89 = *(_QWORD *)(v92 - 8);
  v17 = MEMORY[0x1E0C80A78](v92);
  v87 = (uint64_t)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v90 = (char *)&v82 - v20;
  MEMORY[0x1E0C80A78](v19);
  v96 = (uint64_t)&v82 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v82 - v26;
  v95 = a7;
  v29 = type metadata accessor for Capsule(0, a6, *(_QWORD *)(a7 + 16), v28);
  v99 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v31 = (uint64_t *)((char *)&v82 - v30);
  v32 = *a1;
  v33 = (uint64_t)&v27[*(int *)(v22 + 64)];
  *v27 = v32;
  *((_WORD *)v27 + 1) = a2;
  sub_1BDDA2E8C(v100, v33, type metadata accessor for Proto_Document);
  *(_OWORD *)v31 = xmmword_1BE1B6B20;
  v34 = (char *)v31 + *(int *)(v29 + 36);
  v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56);
  v94 = a6;
  v35(v34, 1, 1, a6);
  v100 = v29;
  v36 = *(int *)(v29 + 40);
  v98 = v31;
  *(uint64_t *)((char *)v31 + v36) = 0;
  v37 = (uint64_t)&v25[*(int *)(v22 + 64)];
  *v25 = v32;
  *((_WORD *)v25 + 1) = a2;
  v39 = v102;
  v38 = v103;
  sub_1BDD9C318(v33, v37, type metadata accessor for Proto_Document);
  v108 = v32;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  swift_retain();
  v40 = (uint64_t)v101;
  v41 = sub_1BDD8E57C(&v108, a2, v37, v39, v38);
  if (v40)
  {
    swift_release();
    swift_release();
    sub_1BDD86E30((uint64_t)v27, qword_1ED6F29D8);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v99 + 8))(v98, v100);
  }
  else
  {
    v42 = v93;
    v85 = v36;
    v44 = v96;
    v43 = v97;
    v101 = v27;
    v45 = v41;
    v46 = sub_1BDDB5B50((uint64_t)&v104, (uint64_t)&v106, v96, v94, v33, 0, v94, v95);
    v47 = v99;
    v48 = v46;
    v94 = v104;
    v95 = v45;
    v84 = v105;
    v49 = v106;
    v50 = v107;
    v83 = v106;
    v82 = v107;
    v51 = v91;
    sub_1BE1B1F4C();
    *(_QWORD *)(v51 + v42[5]) = sub_1BDDC8934(MEMORY[0x1E0DEE9D8]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26C0);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_1BE1B61B0;
    *(_QWORD *)(v52 + 32) = 0;
    *(_QWORD *)(v52 + 40) = 0;
    v53 = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)(v52 + 48) = MEMORY[0x1E0DEE9E8];
    *(_QWORD *)(v51 + v42[6]) = v52;
    *(_QWORD *)(v51 + v42[7]) = v53;
    v104 = v49;
    v105 = v50;
    sub_1BDDCC228(v48, &v104);
    swift_bridgeObjectRelease();
    sub_1BDD9C318(v51, v43, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v54 = v89;
    v93 = *(int **)(v89 + 16);
    v55 = v92;
    ((void (*)(char *, uint64_t, uint64_t))v93)(v90, v44, v92);
    v56 = v87;
    sub_1BDDCB1B4(v87);
    type metadata accessor for ReplicaState();
    v57 = swift_allocObject();
    v58 = v57 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
    v59 = type metadata accessor for Replica();
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
    v60(v58, 1, 1, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v57 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v56, v55);
    *(_QWORD *)(v57 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
    *(_QWORD *)(v57 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
    v61 = (uint64_t)v88;
    v60((uint64_t)v88, 1, 1, v59);
    swift_beginAccess();
    sub_1BDDACC5C(v61, v58);
    swift_endAccess();
    type metadata accessor for CapsuleRef();
    v62 = swift_allocObject();
    v63 = OBJC_IVAR____TtC9Coherence10CapsuleRef_caches;
    v64 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v62 + v63) = sub_1BDDC8800(MEMORY[0x1E0DEE9D8]);
    v65 = (uint64_t *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    v66 = v82;
    *v65 = v83;
    v65[1] = v66;
    v67 = v90;
    ((void (*)(uint64_t, char *, uint64_t))v93)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID, v90, v55);
    *(_QWORD *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState) = v57;
    v68 = v97;
    sub_1BDD9C318(v97, v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    *(_QWORD *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets) = sub_1BDDB6CE8(v64);
    v69 = *(int **)(v54 + 8);
    v70 = v84;
    v93 = v69;
    ((void (*)(char *, uint64_t))v69)(v67, v55);
    sub_1BDD9C3E0(v68, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    *(_QWORD *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated) = MEMORY[0x1E0DEE9E8];
    v71 = OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration;
    *(_QWORD *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = 0;
    v72 = v98;
    v73 = v85;
    swift_release();
    *(uint64_t *)((char *)v72 + v73) = v62;
    v74 = *v72;
    v75 = v72[1];
    v76 = v94;
    *v72 = v94;
    v72[1] = v70;
    sub_1BDDB6CA4(v76, v70);
    sub_1BDD9CC0C(v74, v75);
    v104 = v76;
    v105 = v70;
    sub_1BDDB6CA4(v76, v70);
    swift_retain();
    sub_1BDD99718(&v104);
    v97 = v71;
    sub_1BDDB796C(v76, v70);
    swift_release();
    v78 = qword_1ED6F4510;
    swift_retain();
    v79 = v70;
    v80 = v100;
    if (v78 != -1)
      swift_once();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1BDDB796C(v76, v79);
    v81 = v104;
    sub_1BDD9C3E0(v91, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    ((void (*)(uint64_t, uint64_t))v93)(v96, v92);
    sub_1BDD86E30((uint64_t)v101, qword_1ED6F29D8);
    *(_QWORD *)(v62 + v97) = v81;
    swift_release();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v47 + 16))(v86, v72, v80);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v47 + 8))(v72, v80);
  }
}

_QWORD *sub_1BDD97E5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_1BDDB6CA4(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1BE1B20F0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t Capsule<>.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47[3];
  uint64_t v48[2];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v43 = a4;
  v44 = a1;
  v46 = *(_QWORD *)(a3 - 8);
  v9 = v46;
  MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1BE1B1F58();
  v14 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  v41 = a2[1];
  v42 = v17;
  *(_OWORD *)a5 = xmmword_1BE1B6B20;
  v19 = type metadata accessor for Capsule(0, a3, *(_QWORD *)(a4 + 16), v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a5 + *(int *)(v19 + 36), 1, 1, a3);
  v20 = *(int *)(v19 + 40);
  *(_QWORD *)(a5 + v20) = 0;
  sub_1BDDCB1B4((uint64_t)v16);
  type metadata accessor for ReplicaState();
  v21 = swift_allocObject();
  v22 = v21 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v23 = type metadata accessor for Replica();
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v21 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v16, v40);
  *(_QWORD *)(v21 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v21 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v24((uint64_t)v13, 1, 1, v23);
  swift_beginAccess();
  v25 = v22;
  v26 = v44;
  sub_1BDDACC5C((uint64_t)v13, v25);
  swift_endAccess();
  v27 = sub_1BDE75D50(v21);
  swift_release();
  *(_QWORD *)(a5 + v20) = v27;
  sub_1BDD9CC0C(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
  v28 = v41;
  *(_QWORD *)a5 = v42;
  *(_QWORD *)(a5 + 8) = v28;
  v29 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v26, a3);
  swift_retain();
  sub_1BDD85BB4(v29, a3, (uint64_t **)&v49);
  v30 = v49;
  v31 = MEMORY[0x1E0DEE9D8];
  v32 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v33 = sub_1BDDB6CE8(v31);
  sub_1BDDB6E0C(v31);
  sub_1BDDB6CE8(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = MEMORY[0x1E0DEE9E0];
  result = swift_bridgeObjectRelease_n();
  *(_QWORD *)&v49 = v30;
  *((_QWORD *)&v49 + 1) = 1;
  v50 = v34;
  v51 = v34;
  v52 = v32;
  v53 = v33;
  v36 = *(_QWORD *)(a5 + 8);
  if (v36 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v37 = *(_QWORD *)a5;
    sub_1BDDB6CA4(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
    v48[0] = v37;
    v48[1] = v36;
    swift_beginAccess();
    sub_1BDD8B18C(&v49, v48);
    swift_endAccess();
    swift_release();
    sub_1BDDB796C(v37, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_release();
    v38 = *(_QWORD *)(a5 + 8);
    if (v38 >> 60 != 15)
    {
      v39 = *(_QWORD *)a5;
      sub_1BDDB6CA4(*(_QWORD *)a5, *(_QWORD *)(a5 + 8));
      swift_beginAccess();
      swift_retain();
      sub_1BDDBC6BC(v47, v39, v38);
      swift_endAccess();
      swift_release();
      sub_1BDDB796C(v47[0], v47[1]);
      swift_retain();
      sub_1BDDB639C(1, 1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v26, a3);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDD98310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    type metadata accessor for Proto_Value._StorageClass(0);
    v13 = swift_allocObject();
    v25 = v4;
    v14 = v13;
    v24 = a1;
    v15 = a2;
    v16 = a3;
    v17 = v13 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    v18 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v12 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v19, (uint64_t)v10, &qword_1ED6F26F0);
    swift_beginAccess();
    v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1BDDA1AF4((uint64_t)v10, v20, &qword_1ED6F26F0);
    swift_endAccess();
    *(_QWORD *)(v3 + v11) = v14;
    swift_release();
  }
  v21 = swift_retain();
  sub_1BDD9CEEC(v21, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1BDD984B8()
{
  uint64_t v0;

  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root, &qword_1ED6F37C8);
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, &qword_1ED6F37A8);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants, &qword_1ED6F3290);
  swift_bridgeObjectRelease();
  sub_1BDDB796C(*(_QWORD *)(v0+ OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid), *(_QWORD *)(v0+ OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid+ 8));
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion, &qword_1ED6F37A8);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDD98584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  _QWORD *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[6];
  _QWORD *v71;

  v3 = v2;
  v4 = (uint64_t *)(v1 + 16);
  v64 = (uint64_t *)(v1 + 24);
  result = swift_beginAccess();
  v60 = (uint64_t *)(v1 + 16);
  while (1)
  {
    v10 = (_QWORD *)*v4;
    v11 = *(_QWORD *)(*v4 + 64);
    v12 = *(_BYTE *)(*v4 + 32);
    v13 = 1 << v12;
    if (v11)
    {
      v14 = 0;
      goto LABEL_21;
    }
    v15 = v12 & 0x3F;
    if (v15 < 7)
      return result;
    v11 = v10[9];
    if (v11)
    {
      v14 = 1;
      goto LABEL_21;
    }
    if (v15 < 8)
      return result;
    v11 = v10[10];
    if (v11)
    {
      v14 = 2;
      goto LABEL_21;
    }
    v11 = v10[11];
    if (!v11)
      break;
    v14 = 3;
LABEL_21:
    v19 = __clz(__rbit64(v11));
    v20 = v19 + (v14 << 6);
    if (v20 == v13)
      return result;
    if (v20 < 0 || v20 >= v13)
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      result = sub_1BE1B3680();
      __break(1u);
      return result;
    }
    if (((*(_QWORD *)(*v4 + 64 + (((unint64_t)v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_49;
    v21 = (uint64_t *)(v10[6] + 16 * v20);
    v22 = *v21;
    v23 = v21[1];
    v24 = *(_QWORD **)(v10[7] + 8 * v20);
    swift_retain_n();
    sub_1BDDB6CA4(v22, v23);
    sub_1BDDB796C(v22, v23);
    swift_release();
    v25 = v24[2];
    v26 = v24[3];
    swift_beginAccess();
    sub_1BDDB6CA4(v25, v26);
    swift_bridgeObjectRetain();
    v27 = sub_1BDDB7F0C(v25, v26);
    v29 = v28;
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v31 = *v4;
      v71 = (_QWORD *)*v4;
      *v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDE64110();
        v31 = (uint64_t)v71;
      }
      sub_1BDDB796C(*(_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * v27), *(_QWORD *)(*(_QWORD *)(v31 + 48) + 16 * v27 + 8));
      sub_1BDDC4EE0(v27, v31);
      *v4 = v31;
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v25, v26);
    }
    else
    {
      sub_1BDDB796C(v25, v26);
    }
    swift_endAccess();
    swift_release();
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*v24 + 96))(v70, v62, a1);
    if (v3)
      return swift_release();
    v7 = v70[0];
    v32 = v70[1];
    v33 = v70[2];
    v34 = v70[3];
    v35 = v70[4];
    v69 = v70[5];
    v37 = v24[2];
    v36 = v24[3];
    swift_beginAccess();
    v66 = v7;
    v67 = v33;
    v65 = v32;
    v68 = v34;
    if (v33)
    {
      sub_1BDDB6CA4(v37, v36);
      sub_1BDDBA160(v7, v32, v33);
      v38 = swift_isUniquelyReferenced_nonNull_native();
      v71 = (_QWORD *)*v64;
      v39 = v71;
      *v64 = 0x8000000000000000;
      v63 = v36;
      v41 = sub_1BDDB7F0C(v37, v36);
      v42 = v39[2];
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
        goto LABEL_50;
      v45 = v40;
      if (v39[3] >= v44)
      {
        v46 = v37;
        if ((v38 & 1) == 0)
          sub_1BDDB7F70();
      }
      else
      {
        sub_1BDDC50C4(v44, v38);
        v46 = v37;
        v47 = sub_1BDDB7F0C(v37, v63);
        if ((v45 & 1) != (v48 & 1))
          goto LABEL_52;
        v41 = v47;
      }
      v54 = v71;
      if ((v45 & 1) != 0)
      {
        v6 = (uint64_t *)(v71[7] + 48 * v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v8 = v65;
        v7 = v66;
        *v6 = v66;
        v6[1] = v65;
        v9 = v67;
        v6[2] = v67;
        v6[3] = v68;
        v6[4] = v35;
        v6[5] = v69;
      }
      else
      {
        v71[(v41 >> 6) + 8] |= 1 << v41;
        v55 = (uint64_t *)(v54[6] + 16 * v41);
        *v55 = v46;
        v55[1] = v63;
        v56 = (uint64_t *)(v54[7] + 48 * v41);
        v8 = v65;
        v7 = v66;
        *v56 = v66;
        v56[1] = v65;
        v9 = v67;
        v56[2] = v67;
        v56[3] = v68;
        v56[4] = v35;
        v56[5] = v69;
        v57 = v54[2];
        v58 = __OFADD__(v57, 1);
        v59 = v57 + 1;
        if (v58)
          goto LABEL_51;
        v54[2] = v59;
        sub_1BDDB6CA4(v46, v63);
      }
      *v64 = (uint64_t)v54;
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v46, v63);
      v3 = 0;
      v4 = v60;
    }
    else
    {
      sub_1BDDB6CA4(v37, v36);
      swift_bridgeObjectRetain();
      v49 = sub_1BDDB7F0C(v37, v36);
      v51 = v50;
      swift_bridgeObjectRelease();
      if ((v51 & 1) != 0)
      {
        v52 = swift_isUniquelyReferenced_nonNull_native();
        v53 = *v64;
        v71 = (_QWORD *)*v64;
        *v64 = 0x8000000000000000;
        v3 = 0;
        v4 = v60;
        if ((v52 & 1) == 0)
        {
          sub_1BDDB7F70();
          v53 = (uint64_t)v71;
        }
        sub_1BDDB796C(*(_QWORD *)(*(_QWORD *)(v53 + 48) + 16 * v49), *(_QWORD *)(*(_QWORD *)(v53 + 48) + 16 * v49 + 8));
        sub_1BDEF1804(v49, v53);
        *v64 = v53;
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v37, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v7 = v66;
        v9 = 0;
        v8 = v65;
      }
      else
      {
        sub_1BDDB796C(v37, v36);
        v9 = 0;
        v8 = v65;
        v3 = 0;
        v4 = v60;
      }
    }
    swift_endAccess();
    sub_1BDDBA008(v7, v8, v9);
    result = swift_release();
  }
  v16 = 0;
  v17 = (unint64_t)(v13 + 63) >> 6;
  if (v17 <= 4)
    v17 = 4;
  v18 = v17 - 4;
  while (v18 != v16)
  {
    v11 = v10[v16++ + 12];
    if (v11)
    {
      v14 = v16 + 3;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t sub_1BDD98B8C(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  char v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v60 = a2;
  v61 = a1;
  v10 = type metadata accessor for PartiallyOrderedReferenceMap();
  v11 = MEMORY[0x1E0C80A78](v10);
  v62 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v63 = (char *)&v58 - v13;
  v15 = *a3;
  v14 = a3[1];
  v65 = *a4;
  v17 = *a5;
  v16 = a5[1];
  v18 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v64 = v10;
  v19 = *(int *)(v10 + 20);
  sub_1BDDB6CA4(v15, v14);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v66[0] = *(_QWORD *)(v18 + v19);
  v21 = v66[0];
  *(_QWORD *)(v18 + v19) = 0x8000000000000000;
  sub_1BDDB6CA4(v15, v14);
  v23 = sub_1BDDB7F0C(v15, v14);
  v24 = *(_QWORD *)(v21 + 16);
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
  {
    __break(1u);
    goto LABEL_27;
  }
  v6 = v22;
  if (*(_QWORD *)(v21 + 24) >= v26)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_8;
      goto LABEL_28;
    }
LABEL_27:
    sub_1BDDB7F70();
    if ((v6 & 1) != 0)
      goto LABEL_8;
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_1BDDC50C4(v26, isUniquelyReferenced_nonNull_native);
  v27 = sub_1BDDB7F0C(v15, v14);
  if ((v6 & 1) == (v28 & 1))
  {
    v23 = v27;
    if ((v6 & 1) == 0)
      goto LABEL_28;
LABEL_8:
    v29 = (__int128 *)(*(_QWORD *)(v66[0] + 56) + 48 * v23);
    v30 = v29[1];
    v67 = *v29;
    v68 = v30;
    v69 = v29[2];
    v31 = v67;
    if (!(_QWORD)v67)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v65 != (_QWORD)v67)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v32 = (*(uint64_t (**)(void))(*(_QWORD *)v31 + 160))();
        v59 = v16;
        v33 = v17;
        v34 = v32;
        *(_QWORD *)&v67 = v32;
        swift_release();
        v31 = v34;
        v17 = v33;
        v16 = v59;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 96))(v65);
    }
    sub_1BDDAF714(v16);
    sub_1BDDAF714(v17);
    sub_1BDDBA064((uint64_t *)&v67, 1, v66, v23, v15, v14);
    sub_1BDDBA008(v67, *((uint64_t *)&v67 + 1), v68);
    sub_1BDDB796C(v15, v14);
    *(_QWORD *)(v18 + v19) = v66[0];
    *(_QWORD *)&v67 = v15;
    *((_QWORD *)&v67 + 1) = v14;
    sub_1BDDBA1B8((uint64_t)&v67, 0);
    v35 = *(_QWORD *)(v18 + v19);
    if (*(_QWORD *)(v35 + 16))
    {
      sub_1BDDB6CA4(v15, v14);
      v36 = sub_1BDDB7F0C(v15, v14);
      if ((v37 & 1) != 0)
      {
        v38 = (uint64_t *)(*(_QWORD *)(v35 + 56) + 48 * v36);
        v39 = *v38;
        v40 = v38[1];
        v41 = v38[2];
        v42 = v38[3];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v15, v14);
        if (v41)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1BDDBA008(v39, v40, v41);
          *(_QWORD *)&v67 = v15;
          *((_QWORD *)&v67 + 1) = v14;
          v66[0] = v41;
          v66[1] = v42;
          sub_1BDDBB074((uint64_t *)&v67, v66);
          v43 = *(_QWORD *)(v42 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v43)
          {
            v44 = v64;
            sub_1BDDB6CA4(v15, v14);
            sub_1BDDBC6BC((uint64_t *)&v67, v15, v14);
            sub_1BDDB796C(v67, *((unint64_t *)&v67 + 1));
LABEL_20:
            isUniquelyReferenced_nonNull_native = (uint64_t)v63;
            swift_endAccess();
            sub_1BDDB796C(v15, v14);
            sub_1BDD9C318(v18, isUniquelyReferenced_nonNull_native, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
            v45 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + *(int *)(v44 + 20));
            if (!*(_QWORD *)(v45 + 16))
            {
LABEL_31:
              sub_1BDD9C3E0(isUniquelyReferenced_nonNull_native, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
              __break(1u);
              goto LABEL_32;
            }
            sub_1BDDB6CA4(v15, v14);
            v46 = sub_1BDDB7F0C(v15, v14);
            if ((v47 & 1) != 0)
            {
              v48 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 48 * v46);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1BDDB796C(v15, v14);
              sub_1BDD9C3E0(isUniquelyReferenced_nonNull_native, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v48)
              {
                *v61 = v48;
                v49 = v18;
                v18 = v62;
                sub_1BDD9C318(v49, v62, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
                v50 = *(_QWORD *)(v18 + *(int *)(v44 + 20));
                if (!*(_QWORD *)(v50 + 16))
                {
LABEL_34:
                  sub_1BDD9C3E0(v18, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
                  __break(1u);
                  goto LABEL_35;
                }
                sub_1BDDB6CA4(v15, v14);
                v51 = sub_1BDDB7F0C(v15, v14);
                if ((v52 & 1) != 0)
                {
                  v53 = *(_QWORD *)(v50 + 56) + 48 * v51;
                  v54 = *(_QWORD *)(v53 + 16);
                  v55 = *(_QWORD *)(v53 + 24);
                  swift_retain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_1BDDB796C(v15, v14);
                  sub_1BDD9C3E0(v18, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  result = swift_release();
                  v57 = v60;
                  *v60 = v54;
                  v57[1] = v55;
                  return result;
                }
LABEL_33:
                sub_1BDDB796C(v15, v14);
                goto LABEL_34;
              }
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
LABEL_30:
            sub_1BDDB796C(v15, v14);
            goto LABEL_31;
          }
        }
      }
      else
      {
        sub_1BDDB796C(v15, v14);
      }
    }
    v44 = v64;
    sub_1BDDBA2EC(&v67);
    sub_1BDD9CC0C(v67, *((unint64_t *)&v67 + 1));
    goto LABEL_20;
  }
LABEL_35:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDD99168(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v5 = type metadata accessor for PartiallyOrderedReferenceMap();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v34 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  v15 = *a1;
  v14 = a1[1];
  v16 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v39 = v15;
  v40 = v14;
  sub_1BDDB6CA4(v15, v14);
  result = (uint64_t)sub_1BDDB7C54(&v37, &v39);
  if (!*(_QWORD *)(v18 + 16))
  {
    ((void (*)(__int128 *, _QWORD))result)(&v37, 0);
    sub_1BDDB796C(v39, v40);
    swift_endAccess();
LABEL_5:
    sub_1BDD9C318(v16, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v22 = *(_QWORD *)&v11[*(int *)(v5 + 20)];
    if (*(_QWORD *)(v22 + 16))
    {
      sub_1BDDB6CA4(v15, v14);
      v23 = sub_1BDDB7F0C(v15, v14);
      if ((v24 & 1) != 0)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 48 * v23 + 8);
        v35 = v8;
        v36 = v5;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v15, v14);
        sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_bridgeObjectRelease();
        v8 = v35;
        v5 = v36;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        if ((v34 & 0x8000000000000000) == 0)
          goto LABEL_11;
        __break(1u);
      }
      sub_1BDDB796C(v15, v14);
    }
    sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_11:
    sub_1BDD9C318(v16, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v25 = *(_QWORD *)&v13[*(int *)(v5 + 20)];
    if (*(_QWORD *)(v25 + 16))
    {
      sub_1BDDB6CA4(v15, v14);
      v26 = sub_1BDDB7F0C(v15, v14);
      if ((v27 & 1) != 0)
      {
        v35 = v8;
        v36 = v5;
        v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 48 * v26 + 8);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v15, v14);
        sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        if (!v28)
        {
          v29 = (uint64_t)v35;
          sub_1BDD9C318(v16, (uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          v30 = *(_QWORD *)(v29 + *(int *)(v36 + 20));
          if (*(_QWORD *)(v30 + 16))
          {
            sub_1BDDB6CA4(v15, v14);
            v31 = sub_1BDDB7F0C(v15, v14);
            if ((v32 & 1) != 0)
            {
              v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 48 * v31 + 32);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1BDDB796C(v15, v14);
              sub_1BDD9C3E0(v29, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
LABEL_23:
              swift_beginAccess();
              sub_1BDEF0954(v15, v14, &v37);
              sub_1BDDBA008(v37, *((uint64_t *)&v37 + 1), v38);
              sub_1BDDBA2EC(&v37);
              sub_1BDD9CC0C(v37, *((unint64_t *)&v37 + 1));
              *(_QWORD *)&v37 = v15;
              *((_QWORD *)&v37 + 1) = v14;
              sub_1BDDBA1B8((uint64_t)&v37, 1);
              swift_endAccess();
              return v33;
            }
            sub_1BDDB796C(v15, v14);
          }
          sub_1BDD9C3E0(v29, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          v33 = 0;
          goto LABEL_23;
        }
        return 2;
      }
      sub_1BDDB796C(v15, v14);
    }
    sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    return 2;
  }
  v19 = *(_QWORD *)(v18 + 8);
  v20 = __OFADD__(v19, a2);
  v21 = v19 + a2;
  if (!v20)
  {
    *(_QWORD *)(v18 + 8) = v21;
    ((void (*)(__int128 *, _QWORD))result)(&v37, 0);
    swift_endAccess();
    sub_1BDDB796C(v39, v40);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDD99620()
{
  uint64_t v0;

  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, &qword_1ED6F37A8);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, &qword_1ED6F3850);
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion, &qword_1ED6F37A8);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDD996B0()
{
  uint64_t v0;

  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, &qword_1ED6F37A8);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt, &qword_1ED6F3728);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath, &qword_1ED6F3790);
  return swift_deallocClassInstance();
}

void (*sub_1BDD99718(uint64_t *a1))(uint64_t *, _QWORD)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*result)(uint64_t *, _QWORD);
  void (*v35)(uint64_t *);
  uint64_t v36;
  void (*v37)(_QWORD *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD *);
  uint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  _BYTE v72[16];
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _UNKNOWN **v91;
  unint64_t v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _UNKNOWN **v102;

  v3 = type metadata accessor for PartiallyOrderedReferenceMap();
  v4 = MEMORY[0x1E0C80A78](v3);
  v77 = &v72[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v7 = &v72[-v6];
  v75 = *a1;
  v74 = a1[1];
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v10 = sub_1BDDB6CE8(v8);
  v100 = v9;
  v101 = v10;
  v73 = v1;
  v11 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v79 = v11;
  sub_1BDD9C318(v11, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v76 = v3;
  v12 = *(_QWORD *)&v7[*(int *)(v3 + 20)];
  v13 = -1 << *(_BYTE *)(v12 + 32);
  v14 = ~v13;
  v15 = -v13;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & *(_QWORD *)(v12 + 64);
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v95 = v12;
  v96 = v12 + 64;
  v97 = v14;
  v98 = 0;
  v99 = v17;
  sub_1BDDA7144((uint64_t)&v87);
  v18 = v91;
  if (v91)
  {
    v19 = v87;
    v20 = v88;
    v21 = v89;
    v22 = v92;
    v23 = v93;
    v24 = v94;
    v25 = type metadata accessor for RetainVisitor();
    do
    {
      v80 = v24;
      v81 = v23;
      v82 = v22;
      v102 = v18;
      v31 = swift_allocObject();
      v32 = MEMORY[0x1E0DEE9D8];
      v33 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
      result = (void (*)(uint64_t *, _QWORD))sub_1BDDB6CE8(v32);
      *(_QWORD *)(v31 + 16) = v33;
      *(_QWORD *)(v31 + 24) = result;
      if (!v21)
        goto LABEL_53;
      v90 = v25;
      v91 = &off_1E7755DD0;
      v87 = v31;
      v35 = *(void (**)(uint64_t *))(*(_QWORD *)v21 + 120);
      swift_retain();
      swift_retain();
      v35(&v87);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
      swift_release();
      swift_beginAccess();
      v83 = v19;
      v84 = v20;
      sub_1BDDB6CA4(v19, v20);
      v37 = sub_1BDDB7C54(&v87, &v83);
      if (*(_QWORD *)(v36 + 16))
      {
        v26 = v36;
        swift_beginAccess();
        v27 = *(_QWORD *)(v31 + 16);
        v28 = *(_QWORD *)(v31 + 24);
        v78 = v20;
        *(_QWORD *)(v26 + 32) = v27;
        *(_QWORD *)(v26 + 40) = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ((void (*)(uint64_t *, _QWORD))v37)(&v87, 0);
        swift_endAccess();
        swift_bridgeObjectRelease();
        v20 = v78;
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v83, v84);
      }
      else
      {
        ((void (*)(uint64_t *, _QWORD))v37)(&v87, 0);
        sub_1BDDB796C(v83, v84);
        swift_endAccess();
      }
      swift_beginAccess();
      v29 = *(_QWORD *)(v31 + 16);
      v30 = *(_QWORD *)(v31 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB99FC(v29, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v19, v20);
      sub_1BDDA7144((uint64_t)&v87);
      v19 = v87;
      v20 = v88;
      v21 = v89;
      v18 = v91;
      v22 = v92;
      v23 = v93;
      v24 = v94;
    }
    while (v91);
    v9 = v100;
  }
  sub_1BDE27FD0();
  v38 = *(_QWORD *)(v9 + 64);
  v80 = v9 + 64;
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 < 64)
    v40 = ~(-1 << v39);
  else
    v40 = -1;
  v41 = v40 & v38;
  v81 = (unint64_t)(v39 + 63) >> 6;
  result = (void (*)(uint64_t *, _QWORD))swift_bridgeObjectRetain();
  v42 = 0;
  while (1)
  {
    if (v41)
    {
      v45 = __clz(__rbit64(v41));
      v46 = (v41 - 1) & v41;
      v47 = v45 | (v42 << 6);
      goto LABEL_34;
    }
    v48 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v48 >= v81)
    {
      swift_release();
      v50 = v75;
      goto LABEL_44;
    }
    v49 = *(_QWORD *)(v80 + 8 * v48);
    ++v42;
    v50 = v75;
    if (!v49)
    {
      v42 = v48 + 1;
      if (v48 + 1 >= v81)
        goto LABEL_43;
      v49 = *(_QWORD *)(v80 + 8 * v42);
      if (!v49)
      {
        v42 = v48 + 2;
        if (v48 + 2 >= v81)
          goto LABEL_43;
        v49 = *(_QWORD *)(v80 + 8 * v42);
        if (!v49)
          break;
      }
    }
LABEL_33:
    v46 = (v49 - 1) & v49;
    v47 = __clz(__rbit64(v49)) + (v42 << 6);
LABEL_34:
    v52 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v47);
    v54 = *v52;
    v53 = v52[1];
    v55 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v47);
    v56 = v77;
    sub_1BDD9C318(v79, (uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v57 = *(_QWORD *)&v56[*(int *)(v76 + 20)];
    v58 = *(_QWORD *)(v57 + 16);
    sub_1BDDB6CA4(v54, v53);
    if (!v58)
      goto LABEL_40;
    sub_1BDDB6CA4(v54, v53);
    sub_1BDDB6CA4(v54, v53);
    v59 = sub_1BDDB7F0C(v54, v53);
    if ((v60 & 1) == 0)
    {
      sub_1BDDB796C(v54, v53);
      sub_1BDDB796C(v54, v53);
LABEL_40:
      sub_1BDD9C3E0((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_41:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v64 = 0xD000000000000013;
      *(_QWORD *)(v64 + 8) = 0x80000001BE1CE600;
      *(_BYTE *)(v64 + 16) = 0;
      swift_willThrow();
      sub_1BDDB796C(v54, v53);
      return (void (*)(uint64_t *, _QWORD))swift_release();
    }
    v82 = v46;
    v102 = (_UNKNOWN **)v42;
    v61 = *(_QWORD *)(*(_QWORD *)(v57 + 56) + 48 * v59);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v54, v53);
    sub_1BDDB796C(v54, v53);
    sub_1BDD9C3E0((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v61)
      goto LABEL_41;
    swift_release();
    swift_beginAccess();
    v85 = v54;
    v86 = v53;
    sub_1BDDB6CA4(v54, v53);
    v63 = sub_1BDDB7C54(&v87, &v85);
    if (*(_QWORD *)(v62 + 16))
    {
      *(_QWORD *)(v62 + 8) = v55;
      ((void (*)(uint64_t *, _QWORD))v63)(&v87, 0);
      swift_endAccess();
      sub_1BDDB796C(v54, v53);
      v43 = v85;
      v44 = v86;
    }
    else
    {
      ((void (*)(uint64_t *, _QWORD))v63)(&v87, 0);
      sub_1BDDB796C(v85, v86);
      swift_endAccess();
      v43 = v54;
      v44 = v53;
    }
    result = (void (*)(uint64_t *, _QWORD))sub_1BDDB796C(v43, v44);
    v42 = (int64_t)v102;
    v41 = v82;
  }
  v51 = v48 + 3;
  if (v51 < v81)
  {
    v49 = *(_QWORD *)(v80 + 8 * v51);
    if (!v49)
    {
      while (1)
      {
        v42 = v51 + 1;
        if (__OFADD__(v51, 1))
          goto LABEL_51;
        if (v42 >= v81)
          goto LABEL_43;
        v49 = *(_QWORD *)(v80 + 8 * v42);
        ++v51;
        if (v49)
          goto LABEL_33;
      }
    }
    v42 = v51;
    goto LABEL_33;
  }
LABEL_43:
  swift_release();
LABEL_44:
  v65 = v101;
  swift_bridgeObjectRelease();
  v66 = (unint64_t *)(v73 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  swift_beginAccess();
  *v66 = v65;
  result = (void (*)(uint64_t *, _QWORD))swift_bridgeObjectRelease();
  v67 = v74;
  if (v74 >> 60 == 15)
    return result;
  swift_beginAccess();
  v83 = v50;
  v84 = v67;
  sub_1BDDB6CA4(v50, v67);
  sub_1BDDB6CA4(v50, v67);
  result = (void (*)(uint64_t *, _QWORD))sub_1BDDB7C54(&v87, &v83);
  if (!*(_QWORD *)(v68 + 16))
  {
    result(&v87, 0);
    sub_1BDDB796C(v83, v84);
    swift_endAccess();
    return (void (*)(uint64_t *, _QWORD))sub_1BDD9CC0C(v50, v67);
  }
  v69 = *(_QWORD *)(v68 + 8);
  v70 = __OFADD__(v69, 1);
  v71 = v69 + 1;
  if (!v70)
  {
    *(_QWORD *)(v68 + 8) = v71;
    result(&v87, 0);
    swift_endAccess();
    sub_1BDD9CC0C(v50, v67);
    return (void (*)(uint64_t *, _QWORD))sub_1BDDB796C(v83, v84);
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t (*sub_1BDD9A058(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = malloc(0x30uLL);
  *a1 = v4;
  v5 = type metadata accessor for Replica();
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_1BDD9C318(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v4[5] = sub_1BDD9A0E4(v4, (uint64_t)v6);
  return sub_1BDDC8330;
}

void (*sub_1BDD9A0E4(_QWORD *a1, uint64_t a2))(uint64_t)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  char isUniquelyReferenced_nonNull_native;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v5 = type metadata accessor for Replica();
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v4[8] = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BDD9C318(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v4[9] = sub_1BDD9A2BC(v4);
  v4[10] = sub_1BDD9A19C(v4 + 4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  return sub_1BDD937F8;
}

void (*sub_1BDD9A19C(_QWORD *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void (*result)(uint64_t *);

  v4 = v3;
  v8 = malloc(0x30uLL);
  *a1 = v8;
  v8[2] = a2;
  v8[3] = v4;
  v9 = *v4;
  v11 = sub_1BDDB3EC0(a2);
  *((_BYTE *)v8 + 40) = v10 & 1;
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    v15 = v10;
    v16 = *(_QWORD *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        sub_1BDDB4F58((_QWORD *)(*(_QWORD *)(*v4 + 56) + 16 * v11), v8);
        return sub_1BDD93678;
      }
LABEL_11:
      *v8 = 0;
      v8[1] = 0;
      return sub_1BDD93678;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1BDE63924();
      goto LABEL_7;
    }
    sub_1BDD8BE10(v14, a3 & 1);
    v17 = sub_1BDDB3EC0(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      v11 = v17;
      v8[4] = v17;
      if ((v15 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  type metadata accessor for Replica();
  result = (void (*)(uint64_t *))sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t (*sub_1BDD9A2BC(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1BDD937FC;
}

uint64_t CRStruct_2.merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(_QWORD *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  char *v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *, _QWORD);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26 = AssociatedTypeWitness;
  v27 = v6;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v24 = (char *)&v23 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v23 - v10;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 48))(v30, a2, v4);
  v12 = v30[2];
  v28 = v30[4];
  v29 = v30[1];
  swift_retain();
  swift_getAtKeyPath();
  v25 = v12;
  v13 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v13(v30, 0);
  swift_release();
  swift_retain();
  v15 = v24;
  swift_getAtKeyPath();
  v16 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath();
  v17 = v26;
  v18 = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 + 8) + 8))(v15, v17);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v17);
  v16(v30, 0);
  swift_release();
  v19 = *(_QWORD *)(v4 + 8);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(a2, v19);
  v21 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v19 + 40))(v30, a2, v19);
  sub_1BDDC8334(v20);
  swift_bridgeObjectRelease();
  v21(v30, 0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 64))(a2, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

void CRDictionary_v1.merge(_:)()
{
  type metadata accessor for CRDictionary();
}

void sub_1BDD9A5C8()
{
  sub_1BDD9A640();
}

uint64_t sub_1BDD9A5D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v6 = v2;
  v3 = MEMORY[0x1C3B7DF54](&unk_1BE1BD5B8, v0);
  v4 = (_QWORD *)sub_1BDD9A6B0((uint64_t)&v6, v0, v3);
  v6 = *v1;
  sub_1BDDAF70C();
  swift_retain();
  sub_1BDDAAC9C(v4);
  swift_release();
  return swift_release();
}

void sub_1BDD9A640()
{
  type metadata accessor for CRDictionaryRef();
}

uint64_t sub_1BDD9A674()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;

  result = sub_1BE1B3470();
  if ((result & 1) == 0)
  {
    v2 = sub_1BDDAA594();
    result = swift_release();
    *v0 = v2;
  }
  return result;
}

uint64_t sub_1BDD9A6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 48);
  v6 = *(_QWORD *)(v5(a2, a3) + 48);
  swift_release();
  v7 = *(_QWORD *)(v5(a2, a3) + 48);
  swift_release();
  if (v6 == v7)
    return v5(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  v5(a2, a3);
  v9 = sub_1BE0CF4FC(v10, v11, v12);
  swift_release();
  v5(a2, a3);
  sub_1BE0D27B0(v10, v11, v12, 0);
  swift_bridgeObjectRelease();
  swift_release();
  return (uint64_t)v9;
}

uint64_t sub_1BDD9A83C()
{
  sub_1BDDAF70C();
  return swift_retain();
}

uint64_t sub_1BDD9A850()
{
  return sub_1BDD9A864();
}

uint64_t sub_1BDD9A864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for Proto_Value(0),
        sub_1BDD8422C(&qword_1ED6F2730, type metadata accessor for Proto_Value, (uint64_t)&unk_1BE1C66FC),
        result = sub_1BE1B2354(),
        !v1))
  {
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_1BDD9A9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;

  v164 = a4;
  v166 = a3;
  v165 = type metadata accessor for Proto_Reference(0);
  v154 = *(_QWORD *)(v165 - 8);
  v6 = MEMORY[0x1E0C80A78](v165);
  v132 = (uint64_t)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v130 = (uint64_t)&v123 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F32A8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v138 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v157 = (uint64_t)&v123 - v12;
  v162 = type metadata accessor for Proto_Value(0);
  v156 = *(_QWORD *)(v162 - 8);
  v13 = MEMORY[0x1E0C80A78](v162);
  v134 = (uint64_t)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v131 = (uint64_t)&v123 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v17 = MEMORY[0x1E0C80A78](v16);
  v150 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v151 = (uint64_t)&v123 - v19;
  v158 = type metadata accessor for Proto_CRDT(0);
  v155 = *(_QWORD *)(v158 - 8);
  v20 = MEMORY[0x1E0C80A78](v158);
  v133 = (uint64_t)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v129 = (uint64_t)&v123 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  v24 = MEMORY[0x1E0C80A78](v23);
  v141 = (uint64_t)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v140 = (uint64_t)&v123 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v152 = (uint64_t)&v123 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v153 = (uint64_t)&v123 - v31;
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v123 - v32;
  v163 = type metadata accessor for Proto_Document.OneOf_Root(0);
  v161 = *(_QWORD *)(v163 - 8);
  v34 = MEMORY[0x1E0C80A78](v163);
  v137 = (uint64_t)&v123 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v123 - v37;
  v39 = MEMORY[0x1E0C80A78](v36);
  v135 = (uint64_t)&v123 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v136 = (uint64_t)&v123 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v123 - v44;
  MEMORY[0x1E0C80A78](v43);
  v47 = (char *)&v123 - v46;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v49 = MEMORY[0x1E0C80A78](v48);
  v51 = (char *)&v123 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v49);
  v139 = (char *)&v123 - v52;
  v148 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  v147 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences;
  v146 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid;
  v145 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets;
  v144 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  v143 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v142 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references;
  v53 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  v160 = a2;
  v54 = (uint64_t)v159;
  result = sub_1BE1B2144();
  if (!v54)
  {
    v128 = v51;
    v126 = v47;
    v125 = v45;
    v127 = v38;
    v159 = v33;
    v148 += a1;
    v147 += a1;
    v146 += a1;
    v145 += a1;
    v144 += a1;
    v143 += a1;
    v142 += a1;
    v57 = v165;
    v58 = v160;
    v59 = v53;
    v60 = v162;
    v149 = v59;
    while ((v56 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v155 + 56);
          v66 = (uint64_t)v139;
          v65(v139, 1, 1, v158);
          v67 = v59;
          v68 = v163;
          v69 = (uint64_t)v159;
          sub_1BDD86DEC(v67, (uint64_t)v159, &qword_1ED6F37C8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v69, 1, v68) == 1)
          {
            sub_1BDD86E30(v69, &qword_1ED6F37C8);
            v70 = v160;
            v71 = (uint64_t)v128;
          }
          else
          {
            v84 = (uint64_t)v126;
            sub_1BDDA2E8C(v69, (uint64_t)v126, type metadata accessor for Proto_Document.OneOf_Root);
            sub_1BE1B2150();
            v85 = v84;
            v86 = (uint64_t)v125;
            sub_1BDDA2E8C(v85, (uint64_t)v125, type metadata accessor for Proto_Document.OneOf_Root);
            if (swift_getEnumCaseMultiPayload())
            {
              sub_1BDD9C3E0(v86, type metadata accessor for Proto_Document.OneOf_Root);
            }
            else
            {
              sub_1BDD86E30(v66, &qword_1ED6F3728);
              v115 = v86;
              v116 = v129;
              sub_1BDDA2E8C(v115, v129, type metadata accessor for Proto_CRDT);
              sub_1BDDA2E8C(v116, v66, type metadata accessor for Proto_CRDT);
              v65((char *)v66, 0, 1, v158);
            }
            v71 = (uint64_t)v128;
            v70 = v160;
          }
          sub_1BDD8422C(&qword_1ED6F2E30, type metadata accessor for Proto_CRDT, (uint64_t)&unk_1BE1C6594);
          v117 = v158;
          v103 = v70;
          sub_1BE1B2258();
          sub_1BDDA2EF0(v66, v71, &qword_1ED6F3728);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v71, 1, v117) == 1)
          {
            sub_1BDD86E30(v71, &qword_1ED6F3728);
            v59 = v149;
            goto LABEL_41;
          }
          v118 = v133;
          sub_1BDDA2E8C(v71, v133, type metadata accessor for Proto_CRDT);
          v119 = v118;
          v64 = v160;
          v120 = v163;
          v121 = v152;
          v122 = v153;
          sub_1BDDA2E8C(v119, v153, type metadata accessor for Proto_CRDT);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(v122, 0, 1, v120);
          sub_1BDDA2EF0(v122, v121, &qword_1ED6F37C8);
          v59 = v149;
          swift_beginAccess();
          v57 = v165;
          sub_1BDDA1AF4(v121, v59, &qword_1ED6F37C8);
          swift_endAccess();
          v60 = v162;
          goto LABEL_8;
        case 2:
          v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v156 + 56);
          v73 = v151;
          v72(v151, 1, 1, v60);
          v74 = v140;
          v75 = v161;
          sub_1BDD86DEC(v59, v140, &qword_1ED6F37C8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v74, 1, v163) == 1)
          {
            sub_1BDD86E30(v74, &qword_1ED6F37C8);
            v76 = v73;
            v77 = (uint64_t)v150;
          }
          else
          {
            v87 = v74;
            v88 = v150;
            v89 = v73;
            v90 = v136;
            sub_1BDDA2E8C(v87, v136, type metadata accessor for Proto_Document.OneOf_Root);
            sub_1BE1B2150();
            v91 = v135;
            sub_1BDDA2E8C(v90, v135, type metadata accessor for Proto_Document.OneOf_Root);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              sub_1BDD86E30(v89, &qword_1ED6F3770);
              v92 = v91;
              v93 = v58;
              v94 = v72;
              v95 = v131;
              sub_1BDDA2E8C(v92, v131, type metadata accessor for Proto_Value);
              v76 = v151;
              v96 = v150;
              sub_1BDDA2E8C(v95, v151, type metadata accessor for Proto_Value);
              v94(v76, 0, 1, v162);
              v77 = (uint64_t)v96;
              goto LABEL_29;
            }
            sub_1BDD9C3E0(v91, type metadata accessor for Proto_Document.OneOf_Root);
            v76 = v89;
            v77 = (uint64_t)v88;
          }
          v93 = v58;
LABEL_29:
          sub_1BDD8422C(&qword_1ED6F2730, type metadata accessor for Proto_Value, (uint64_t)&unk_1BE1C66FC);
          v102 = v162;
          v103 = v93;
          sub_1BE1B2258();
          sub_1BDDA2EF0(v76, v77, &qword_1ED6F3770);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v77, 1, v102) == 1)
          {
            sub_1BDD86E30(v77, &qword_1ED6F3770);
            v59 = v149;
          }
          else
          {
            v104 = v134;
            sub_1BDDA2E8C(v77, v134, type metadata accessor for Proto_Value);
            v105 = v104;
            v106 = v163;
            v107 = v153;
            sub_1BDDA2E8C(v105, v153, type metadata accessor for Proto_Value);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(v107, 0, 1, v106);
            v108 = v152;
            sub_1BDDA2EF0(v107, v152, &qword_1ED6F37C8);
            v59 = v149;
            swift_beginAccess();
            sub_1BDDA1AF4(v108, v59, &qword_1ED6F37C8);
            swift_endAccess();
          }
LABEL_41:
          v60 = v162;
          v64 = v103;
          v57 = v165;
LABEL_8:
          v58 = v64;
          result = sub_1BE1B2144();
          break;
        case 3:
          v78 = v161;
          v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56);
          v79(v157, 1, 1, v57);
          v80 = v141;
          sub_1BDD86DEC(v59, v141, &qword_1ED6F37C8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v80, 1, v163) == 1)
          {
            sub_1BDD86E30(v80, &qword_1ED6F37C8);
            v81 = v157;
            v82 = (uint64_t)v138;
            v83 = v165;
          }
          else
          {
            v124 = v79;
            v97 = (uint64_t)v127;
            sub_1BDDA2E8C(v80, (uint64_t)v127, type metadata accessor for Proto_Document.OneOf_Root);
            sub_1BE1B2150();
            v98 = v97;
            v99 = v137;
            sub_1BDDA2E8C(v98, v137, type metadata accessor for Proto_Document.OneOf_Root);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              v100 = v157;
              sub_1BDD86E30(v157, &qword_1ED6F32A8);
              v101 = v130;
              sub_1BDDA2E8C(v137, v130, type metadata accessor for Proto_Reference);
              sub_1BDDA2E8C(v101, v100, type metadata accessor for Proto_Reference);
              v83 = v165;
              v124(v100, 0, 1, v165);
              v78 = v161;
              v82 = (uint64_t)v138;
              v81 = v100;
            }
            else
            {
              sub_1BDD9C3E0(v99, type metadata accessor for Proto_Document.OneOf_Root);
              v81 = v157;
              v83 = v165;
              v82 = (uint64_t)v138;
              v78 = v161;
            }
          }
          sub_1BDD8422C(&qword_1ED6EFDA8, type metadata accessor for Proto_Reference, (uint64_t)&unk_1BE1C534C);
          sub_1BE1B2258();
          v109 = v81;
          v110 = v78;
          v111 = v163;
          sub_1BDDA2EF0(v109, v82, &qword_1ED6F32A8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v82, 1, v83) == 1)
          {
            sub_1BDD86E30(v82, &qword_1ED6F32A8);
            v57 = v165;
            v60 = v162;
            v59 = v149;
          }
          else
          {
            v112 = v132;
            sub_1BDDA2E8C(v82, v132, type metadata accessor for Proto_Reference);
            v113 = v153;
            sub_1BDDA2E8C(v112, v153, type metadata accessor for Proto_Reference);
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v110 + 56))(v113, 0, 1, v111);
            v114 = v152;
            sub_1BDDA2EF0(v113, v152, &qword_1ED6F37C8);
            v59 = v149;
            swift_beginAccess();
            sub_1BDDA1AF4(v114, v59, &qword_1ED6F37C8);
            swift_endAccess();
            v57 = v165;
            v60 = v162;
          }
          v64 = v160;
          goto LABEL_8;
        case 4:
        case 9:
          swift_beginAccess();
          sub_1BDD8422C(&qword_1ED6EFDA8, type metadata accessor for Proto_Reference, (uint64_t)&unk_1BE1C534C);
          v57 = v165;
          sub_1BE1B224C();
          swift_endAccess();
          goto LABEL_7;
        case 5:
        case 10:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          v61 = &qword_1ED6F27B8;
          v62 = type metadata accessor for Proto_Version;
          v63 = &unk_1BE1C5D24;
          goto LABEL_5;
        case 6:
          swift_beginAccess();
          type metadata accessor for Proto_Constants(0);
          v61 = &qword_1ED6F3830;
          v62 = type metadata accessor for Proto_Constants;
          v63 = &unk_1BE1C62C4;
LABEL_5:
          sub_1BDD8422C(v61, v62, (uint64_t)v63);
          sub_1BE1B2258();
          goto LABEL_6;
        case 7:
          swift_beginAccess();
          type metadata accessor for Proto_Asset(0);
          sub_1BDD8422C(&qword_1EF52B378, type metadata accessor for Proto_Asset, (uint64_t)&unk_1BE1C5BBC);
          sub_1BE1B224C();
          goto LABEL_6;
        case 8:
          swift_beginAccess();
          sub_1BE1B21A4();
LABEL_6:
          swift_endAccess();
          v57 = v165;
          goto LABEL_7;
        default:
LABEL_7:
          v64 = v58;
          goto LABEL_8;
      }
    }
  }
  return result;
}

void CRDictionary_v1.init()()
{
  CRDictionary.init()();
}

void sub_1BDD9BB28()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

void CRDictionary.init()()
{
  type metadata accessor for CRDictionaryRef();
}

_QWORD *sub_1BDD9BB6C()
{
  _QWORD *v0;
  _QWORD *result;

  swift_allocObject();
  result = sub_1BDD9BBA0();
  *v0 = result;
  return result;
}

void type metadata accessor for CRDictionaryRef()
{
  JUMPOUT(0x1C3B7DED0);
}

_QWORD *sub_1BDD9BBA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + qword_1ED6F8B40;
  swift_retain();
  sub_1BE1B1F4C();
  v2 = v0 + qword_1ED6F8B38;
  v3 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v2, v1, v3);
  *(_QWORD *)(v2 + *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20)) = 0;
  swift_release();
  return sub_1BDDAB4B0();
}

uint64_t sub_1BDD9BC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto_Set, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDDA5F3C);
}

uint64_t sub_1BDD9BC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BE139220(a1, a2, a3, type metadata accessor for Proto_RLE, &qword_1ED6F27C8, (uint64_t)&unk_1BE1C5E8C, (void (*)(_QWORD))type metadata accessor for Proto_Version);
}

uint64_t sub_1BDD9BC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9BC8C(a1, a2, a3);
}

uint64_t sub_1BDD9BC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v12 = *(_QWORD *)(v3 + v11);
    type metadata accessor for Proto_CRDT._StorageClass(0);
    v13 = swift_allocObject();
    v25 = v4;
    v14 = v13;
    v24 = a1;
    v15 = a2;
    v16 = a3;
    v17 = v13 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    v18 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    v19 = v12 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v19, (uint64_t)v10, &qword_1ED6F2DF0);
    swift_beginAccess();
    v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1BDDA1AF4((uint64_t)v10, v20, &qword_1ED6F2DF0);
    swift_endAccess();
    *(_QWORD *)(v3 + v11) = v14;
    swift_release();
  }
  v21 = swift_retain();
  sub_1BDDA2F34(v21, a1, a2, a3);
  return swift_release();
}

uint64_t type metadata accessor for Proto_CRDT._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2E20);
}

double sub_1BDD9BE48@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  double result;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  _OWORD *v60;

  v55 = a4;
  v56 = a5;
  v53 = a3;
  v54 = a1;
  v60 = a6;
  v52 = *(_QWORD *)(a4 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v51 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v50 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF840);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F29C8);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (uint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v50 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v50 - v22;
  v24 = *a2;
  v25 = a2[1];
  swift_beginAccess();
  v26 = *(_QWORD *)(v6 + 40);
  if (!*(_QWORD *)(v26 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_7:
    sub_1BDD86E30((uint64_t)v13, &qword_1ED6EF840);
    result = 0.0;
    v31 = v60;
    *v60 = 0u;
    v31[1] = 0u;
    v31[2] = 0u;
    return result;
  }
  sub_1BDDB6CA4(v24, v25);
  swift_bridgeObjectRetain();
  v27 = sub_1BDDB7F0C(v24, v25);
  if ((v28 & 1) != 0)
  {
    sub_1BDD86DEC(*(_QWORD *)(v26 + 56) + *(_QWORD *)(v15 + 72) * v27, (uint64_t)v13, &qword_1ED6F29C8);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v29, 1, v14);
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v24, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    goto LABEL_7;
  v32 = *(int *)(v14 + 48);
  v33 = (uint64_t)&v23[v32];
  v34 = (uint64_t)&v13[v32];
  sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v23, type metadata accessor for Proto_Version);
  sub_1BDDA2E8C(v34, v33, type metadata accessor for Proto_CRDT);
  v35 = (uint64_t)&v21[*(int *)(v14 + 48)];
  sub_1BDD9C318((uint64_t)v23, (uint64_t)v21, type metadata accessor for Proto_Version);
  sub_1BDD9C318(v33, v35, type metadata accessor for Proto_CRDT);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  v36 = v53;
  swift_retain();
  v37 = sub_1BDDA1B44(v35, v36);
  swift_release();
  sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for Proto_Version);
  v38 = *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 8);
  v40 = swift_retain();
  v41 = v58;
  v42 = v55;
  v39(v40, v55, v38);
  if (v41)
  {
    sub_1BDD86E30((uint64_t)v23, &qword_1ED6F29C8);
    swift_release();
  }
  else
  {
    v43 = (uint64_t)v18 + *(int *)(v14 + 48);
    sub_1BDD9C318((uint64_t)v23, (uint64_t)v18, type metadata accessor for Proto_Version);
    sub_1BDD9C318(v33, v43, type metadata accessor for Proto_CRDT);
    swift_retain();
    sub_1BDDA9DA0(v18, v37, &v59);
    sub_1BDD9C3E0(v43, type metadata accessor for Proto_CRDT);
    v58 = v59;
    v44 = (uint64_t)v51;
    v45 = v52;
    v46 = v57;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v57, v42);
    sub_1BDD85BB4(v44, v42, (uint64_t **)&v59);
    v56 = v59;
    v47 = MEMORY[0x1E0DEE9D8];
    v54 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v48 = sub_1BDDB6CE8(v47);
    sub_1BDDB6E0C(v47);
    sub_1BDDB6CE8(v47);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v42);
    sub_1BDD86E30((uint64_t)v23, &qword_1ED6F29C8);
    v49 = v60;
    *(_QWORD *)v60 = v56;
    *((_QWORD *)v49 + 1) = 0;
    result = *(double *)&v58;
    v49[1] = v58;
    *((_QWORD *)v49 + 4) = v54;
    *((_QWORD *)v49 + 5) = v48;
  }
  return result;
}

uint64_t sub_1BDD9C318(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_QWORD *sub_1BDD9C35C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1BE1B20F0();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_1BDD9C3E0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1BDD9C41C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F29C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDD9C464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD *, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t inited;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, uint64_t, uint64_t);

  v27 = a4;
  v24 = a5;
  v25 = a3;
  v7 = type metadata accessor for Proto_CRDT(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v16, &qword_1ED6F3728);
  LODWORD(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7);
  sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3728);
  if ((_DWORD)v7 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v18 = 0xD000000000000014;
    *(_QWORD *)(v18 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v18 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    swift_retain();
    sub_1BDDA0528((uint64_t)v11);
    v21 = v26;
    sub_1BDD9C688((uint64_t)v11, a1, a2, v25, v27, (uint64_t)v13);
    result = swift_release();
    if (!v21)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v24, v13, a2);
  }
  return result;
}

uint64_t sub_1BDD9C688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(_QWORD *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(_QWORD *, uint64_t, uint64_t);

  v21 = a5;
  v20 = a4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v12, &qword_1ED6F2DF0);
  v17 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v12, 1, v17) == 1)
  {
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6F2DF0);
LABEL_6:
    v18 = MEMORY[0x1E0DEE9D8];
    *v15 = MEMORY[0x1E0DEE9D8];
    v15[1] = v18;
    v15[2] = v18;
    sub_1BE1B20E4();
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_6;
  }
  sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v15, type metadata accessor for Proto_Struct);
LABEL_7:
  sub_1BDDB2108((uint64_t)v15, a2, a3, v20, v21, a6);
  return sub_1BDD9C3E0(a1, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDD9C868(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  sub_1BDD9C8AC(a1);
  a3(a2);
  return swift_release();
}

uint64_t sub_1BDD9C8AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];

  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_1BE1B2EE8();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v14 - v5;
  v7 = *v1;
  v8 = v1[1];
  v14[0] = *v1;
  v14[1] = v8;
  result = (*(uint64_t (**)(char *, char *))(v9 + 16))((char *)v14 - v5, (char *)v1 + *(int *)(a1 + 36));
  v12 = *(uint64_t *)((char *)v1 + *(int *)(a1 + 40));
  if (v12)
  {
    type metadata accessor for Capsule.Ref(0, v3, *(_QWORD *)(a1 + 24), v11);
    sub_1BDD9C9A0(v7, v8);
    v13 = swift_allocObject();
    swift_retain();
    sub_1BDD9CC20(v14, (uint64_t)v6, v12);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDD9C9A0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1BDDB6CA4(a1, a2);
  return a1;
}

uint64_t type metadata accessor for Capsule.Ref(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Capsule.Ref);
}

uint64_t Capsule.Ref<>.root.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v16[4];

  v1 = *v0;
  v2 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v5 = v0[3];
  if (v5 >> 60 == 15)
    goto LABEL_9;
  v6 = v0[2];
  v7 = *(uint64_t *)((char *)v0 + *(_QWORD *)(v1 + 112)) + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v7, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v8 = *(_QWORD *)&v4[*(int *)(v2 + 20)];
  v9 = *(_QWORD *)(v8 + 16);
  sub_1BDDB6CA4(v6, v5);
  if (v9)
  {
    sub_1BDDB6CA4(v6, v5);
    v10 = sub_1BDDB7F0C(v6, v5);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 48 * v10);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDD9CC0C(v6, v5);
      sub_1BDD9C3E0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = swift_bridgeObjectRelease();
      if (v12)
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v12 + 88))(v16, v13);
        sub_1BDD9CC0C(v6, v5);
        swift_release();
        return swift_dynamicCast();
      }
      goto LABEL_8;
    }
    sub_1BDD9CC0C(v6, v5);
  }
  sub_1BDD9C3E0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  result = sub_1BE1B3200();
  __break(1u);
  return result;
}

uint64_t sub_1BDD9CC0C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1BDDB796C(a1, a2);
  return a1;
}

uint64_t *sub_1BDD9CC20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *v3;
  v7 = *a1;
  v8 = a1[1];
  *((_OWORD *)v3 + 1) = xmmword_1BE1B6B20;
  v9 = (uint64_t)v3 + *(_QWORD *)(v6 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 56))(v9, 1, 1, *(_QWORD *)(v6 + 80));
  v10 = v3[2];
  v11 = v3[3];
  v3[2] = v7;
  v3[3] = v8;
  sub_1BDD9CC0C(v10, v11);
  swift_beginAccess();
  v12 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v9, a2, v12);
  swift_endAccess();
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 112)) = a3;
  return v3;
}

uint64_t sub_1BDD9CCF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - v7;
  v9 = (uint64_t)v1 + *(_QWORD *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    a1[3] = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v8, v4);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1BDD9CE20()
{
  return sub_1BDD9CE34();
}

uint64_t sub_1BDD9CE34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_1BE1B2348(), !v1))
  {
    if (!v0[1] || (result = sub_1BE1B2300(), !v1))
    {
      type metadata accessor for Proto_Timestamp(0);
      return sub_1BE1B20D8();
    }
  }
  return result;
}

uint64_t sub_1BDD9CEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t result;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  void (*v162)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v187;
  uint64_t v188;
  void (*v189)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int EnumCaseMultiPayload;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  _QWORD *v297;
  uint64_t v298;
  __int128 v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;

  v380 = a4;
  v387 = a3;
  v385 = a2;
  v363 = type metadata accessor for Proto_CustomCRValue(0);
  v372 = *(_QWORD *)(v363 - 8);
  v5 = MEMORY[0x1E0C80A78](v363);
  v318 = (uint64_t)&v299 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v310 = (uint64_t)&v299 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2798);
  v9 = MEMORY[0x1E0C80A78](v8);
  v342 = (uint64_t)&v299 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v376 = (uint64_t)&v299 - v11;
  v375 = type metadata accessor for Proto_Asset(0);
  v370 = *(_QWORD *)(v375 - 8);
  v12 = MEMORY[0x1E0C80A78](v375);
  v317 = (uint64_t)&v299 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v309 = (uint64_t)&v299 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v344 = (uint64_t)&v299 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v345 = (char *)&v299 - v18;
  v360 = type metadata accessor for Proto_TaggedValue(0);
  v371 = *(_QWORD *)(v360 - 8);
  v19 = MEMORY[0x1E0C80A78](v360);
  v316 = (uint64_t)&v299 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v308 = (uint64_t)&v299 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2770);
  v23 = MEMORY[0x1E0C80A78](v22);
  v343 = (uint64_t)&v299 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v364 = (uint64_t)&v299 - v25;
  v373 = type metadata accessor for Proto_RepeatedValue(0);
  v365 = *(_QWORD *)(v373 - 8);
  v26 = MEMORY[0x1E0C80A78](v373);
  v311 = (uint64_t)&v299 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v307 = (uint64_t)&v299 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F27B0);
  v30 = MEMORY[0x1E0C80A78](v29);
  v341 = (uint64_t)&v299 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v362 = (uint64_t)&v299 - v32;
  v359 = type metadata accessor for Proto_Timestamp(0);
  v369 = *(_QWORD *)(v359 - 8);
  v33 = MEMORY[0x1E0C80A78](v359);
  v315 = (uint64_t)&v299 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v336 = (char *)&v299 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v37 = MEMORY[0x1E0C80A78](v36);
  v340 = (uint64_t)&v299 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v355 = (char *)&v299 - v39;
  v358 = type metadata accessor for Proto_Optional(0);
  v368 = *(_QWORD *)(v358 - 8);
  v40 = MEMORY[0x1E0C80A78](v358);
  v314 = (uint64_t)&v299 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v335 = (char *)&v299 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2748);
  v44 = MEMORY[0x1E0C80A78](v43);
  v339 = (uint64_t)&v299 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44);
  v354 = (char *)&v299 - v46;
  v357 = type metadata accessor for Proto_Reference(0);
  v367 = *(_QWORD *)(v357 - 8);
  v47 = MEMORY[0x1E0C80A78](v357);
  v313 = (uint64_t)&v299 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47);
  v306 = (uint64_t)&v299 - v49;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F32A8);
  v51 = MEMORY[0x1E0C80A78](v50);
  v338 = (uint64_t)&v299 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51);
  v361 = (uint64_t)&v299 - v53;
  v356 = type metadata accessor for Proto_Version(0);
  v366 = *(_QWORD *)(v356 - 8);
  v54 = MEMORY[0x1E0C80A78](v356);
  v312 = (uint64_t)&v299 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54);
  v334 = (char *)&v299 - v56;
  v57 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v383 = *(_QWORD *)(v57 - 8);
  v384 = v57;
  v58 = MEMORY[0x1E0C80A78](v57);
  v326 = (uint64_t)&v299 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = MEMORY[0x1E0C80A78](v58);
  v333 = (uint64_t)&v299 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v325 = (uint64_t)&v299 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v378 = (char *)&v299 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v324 = (uint64_t)&v299 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v332 = (uint64_t)&v299 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v323 = (uint64_t)&v299 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v331 = (uint64_t)&v299 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v322 = (uint64_t)&v299 - v75;
  v76 = MEMORY[0x1E0C80A78](v74);
  v330 = (uint64_t)&v299 - v77;
  v78 = MEMORY[0x1E0C80A78](v76);
  v321 = (uint64_t)&v299 - v79;
  v80 = MEMORY[0x1E0C80A78](v78);
  v329 = (uint64_t)&v299 - v81;
  v82 = MEMORY[0x1E0C80A78](v80);
  v320 = (uint64_t)&v299 - v83;
  v84 = MEMORY[0x1E0C80A78](v82);
  v328 = (uint64_t)&v299 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v319 = (uint64_t)&v299 - v87;
  MEMORY[0x1E0C80A78](v86);
  v327 = (uint64_t)&v299 - v88;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v90 = MEMORY[0x1E0C80A78](v89);
  v337 = (uint64_t)&v299 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v90);
  v374 = (uint64_t)&v299 - v92;
  v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v94 = MEMORY[0x1E0C80A78](v93);
  v381 = (char *)&v299 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = MEMORY[0x1E0C80A78](v94);
  v353 = (uint64_t)&v299 - v97;
  v98 = MEMORY[0x1E0C80A78](v96);
  v352 = (uint64_t)&v299 - v99;
  v100 = MEMORY[0x1E0C80A78](v98);
  v351 = (uint64_t)&v299 - v101;
  v102 = MEMORY[0x1E0C80A78](v100);
  v350 = (uint64_t)&v299 - v103;
  v104 = MEMORY[0x1E0C80A78](v102);
  v349 = (uint64_t)&v299 - v105;
  v106 = MEMORY[0x1E0C80A78](v104);
  v348 = (uint64_t)&v299 - v107;
  v108 = MEMORY[0x1E0C80A78](v106);
  v110 = (char *)&v299 - v109;
  v111 = MEMORY[0x1E0C80A78](v108);
  v347 = (uint64_t)&v299 - v112;
  v113 = MEMORY[0x1E0C80A78](v111);
  v115 = (char *)&v299 - v114;
  v116 = MEMORY[0x1E0C80A78](v113);
  v118 = (char *)&v299 - v117;
  v119 = MEMORY[0x1E0C80A78](v116);
  v121 = (char *)&v299 - v120;
  v122 = MEMORY[0x1E0C80A78](v119);
  v124 = (char *)&v299 - v123;
  v125 = MEMORY[0x1E0C80A78](v122);
  v127 = (char *)&v299 - v126;
  v128 = MEMORY[0x1E0C80A78](v125);
  v379 = (uint64_t)&v299 - v129;
  v130 = MEMORY[0x1E0C80A78](v128);
  v132 = (char *)&v299 - v131;
  MEMORY[0x1E0C80A78](v130);
  v346 = (uint64_t)&v299 - v133;
  v134 = a1 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v135 = v382;
  result = sub_1BE1B2144();
  if (!v135)
  {
    v382 = v134;
    v377 = v132;
    v300 = v127;
    v301 = v124;
    v302 = v121;
    v303 = v118;
    v304 = v115;
    v305 = v110;
    v299 = xmmword_1BE1B6B20;
    v138 = v380;
    v139 = (uint64_t)v381;
    v140 = (uint64_t)v378;
    v141 = v363;
    while ((v137 & 1) == 0)
    {
      v144 = v141;
      switch(result)
      {
        case 1:
          v145 = v346;
          sub_1BDD86DEC(v382, v346, &qword_1ED6F26F0);
          v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v145, 1, v384);
          sub_1BDD86E30(v145, &qword_1ED6F26F0);
          if (v146 != 1)
            sub_1BE1B2150();
          *(_QWORD *)&v386 = 0;
          BYTE8(v386) = 1;
          sub_1BE1B2234();
          v139 = (uint64_t)v381;
          v147 = v379;
          if ((BYTE8(v386) & 1) == 0)
          {
            v148 = v140;
            v149 = v377;
            *v377 = v386;
            v150 = v384;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 2:
          v151 = (uint64_t)v300;
          sub_1BDD86DEC(v382, (uint64_t)v300, &qword_1ED6F26F0);
          v152 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v151, 1, v384);
          sub_1BDD86E30(v151, &qword_1ED6F26F0);
          if (v152 != 1)
            sub_1BE1B2150();
          *(_QWORD *)&v386 = 0;
          BYTE8(v386) = 1;
          sub_1BE1B21F8();
          v139 = (uint64_t)v381;
          v147 = v379;
          if ((BYTE8(v386) & 1) == 0)
          {
            v148 = v140;
            v149 = v377;
            *v377 = v386;
            v150 = v384;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 3:
          v153 = (uint64_t)v301;
          sub_1BDD86DEC(v382, (uint64_t)v301, &qword_1ED6F26F0);
          v154 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v153, 1, v384);
          sub_1BDD86E30(v153, &qword_1ED6F26F0);
          if (v154 != 1)
            sub_1BE1B2150();
          *(_QWORD *)&v386 = 0;
          BYTE8(v386) = 1;
          sub_1BE1B2234();
          v139 = (uint64_t)v381;
          v147 = v379;
          if ((BYTE8(v386) & 1) == 0)
          {
            v148 = v140;
            v149 = v377;
            *v377 = v386;
            v150 = v384;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 4:
          v155 = (uint64_t)v302;
          sub_1BDD86DEC(v382, (uint64_t)v302, &qword_1ED6F26F0);
          v156 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v155, 1, v384);
          sub_1BDD86E30(v155, &qword_1ED6F26F0);
          if (v156 != 1)
            sub_1BE1B2150();
          v386 = v299;
          sub_1BE1B2198();
          v139 = (uint64_t)v381;
          v157 = *((_QWORD *)&v386 + 1);
          v147 = v379;
          if (*((_QWORD *)&v386 + 1) >> 60 != 15)
          {
            v148 = v140;
            v149 = v377;
            *v377 = v386;
            v149[1] = v157;
            v150 = v384;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 5:
          v158 = (uint64_t)v303;
          sub_1BDD86DEC(v382, (uint64_t)v303, &qword_1ED6F26F0);
          v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v158, 1, v384);
          sub_1BDD86E30(v158, &qword_1ED6F26F0);
          if (v159 != 1)
            sub_1BE1B2150();
          *(_QWORD *)&v386 = 0;
          BYTE8(v386) = 1;
          sub_1BE1B2204();
          v139 = (uint64_t)v381;
          v147 = v379;
          if ((BYTE8(v386) & 1) == 0)
          {
            v148 = v140;
            v149 = v377;
            *v377 = v386;
            v150 = v384;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 6:
          v160 = (uint64_t)v304;
          sub_1BDD86DEC(v382, (uint64_t)v304, &qword_1ED6F26F0);
          v161 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v160, 1, v384);
          sub_1BDD86E30(v160, &qword_1ED6F26F0);
          if (v161 != 1)
            sub_1BE1B2150();
          *(_QWORD *)&v386 = 0;
          BYTE8(v386) = 1;
          sub_1BE1B2234();
          v139 = (uint64_t)v381;
          v147 = v379;
          if ((BYTE8(v386) & 1) == 0)
          {
            v148 = v140;
            v149 = v377;
            *v377 = v386;
            v150 = v384;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 7:
          v162 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v366 + 56);
          v163 = v356;
          v162(v374, 1, 1, v356);
          v164 = v347;
          sub_1BDD86DEC(v382, v347, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v164, 1, v384) == 1)
          {
            sub_1BDD86E30(v164, &qword_1ED6F26F0);
          }
          else
          {
            v194 = v327;
            sub_1BDDA2E8C(v164, v327, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v195 = (uint64_t)v334;
            v196 = v194;
            v197 = v319;
            sub_1BDDA2E8C(v196, v319, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              v198 = v374;
              sub_1BDD86E30(v374, &qword_1ED6F37A8);
              sub_1BDDA2E8C(v197, v195, type metadata accessor for Proto_Version);
              sub_1BDDA2E8C(v195, v198, type metadata accessor for Proto_Version);
              v163 = v356;
              v162(v198, 0, 1, v356);
              goto LABEL_71;
            }
            sub_1BDD9C3E0(v197, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            v163 = v356;
          }
          v198 = v374;
LABEL_71:
          sub_1BDD8422C(&qword_1ED6F27B8, type metadata accessor for Proto_Version, (uint64_t)&unk_1BE1C5D24);
          v234 = v198;
          v235 = v163;
          sub_1BE1B2258();
          v236 = v337;
          sub_1BDDA2EF0(v234, v337, &qword_1ED6F37A8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v366 + 48))(v236, 1, v235) == 1)
          {
            sub_1BDD86E30(v236, &qword_1ED6F37A8);
          }
          else
          {
            v237 = v236;
            v238 = v312;
            sub_1BDDA2E8C(v237, v312, type metadata accessor for Proto_Version);
            v239 = v377;
            sub_1BDDA2E8C(v238, (uint64_t)v377, type metadata accessor for Proto_Version);
            v240 = v384;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v239, 0, 1, v240);
            v241 = v379;
            sub_1BDDA2EF0((uint64_t)v239, v379, &qword_1ED6F26F0);
            v242 = v382;
            swift_beginAccess();
            sub_1BDDA1AF4(v241, v242, &qword_1ED6F26F0);
            swift_endAccess();
          }
          v139 = (uint64_t)v381;
          v140 = (uint64_t)v378;
          goto LABEL_6;
        case 8:
          v165 = v138;
          v166 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v367 + 56);
          v167 = v361;
          v168 = v357;
          v166(v361, 1, 1, v357);
          v169 = (uint64_t)v305;
          sub_1BDD86DEC(v382, (uint64_t)v305, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v169, 1, v384) == 1)
          {
            sub_1BDD86E30(v169, &qword_1ED6F26F0);
            v138 = v165;
          }
          else
          {
            v199 = v328;
            sub_1BDDA2E8C(v169, v328, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            v138 = v165;
            sub_1BE1B2150();
            v200 = v199;
            v201 = v320;
            sub_1BDDA2E8C(v200, v320, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            v167 = v361;
            if (EnumCaseMultiPayload == 7)
            {
              sub_1BDD86E30(v361, &qword_1ED6F32A8);
              v203 = v201;
              v204 = v306;
              sub_1BDDA2E8C(v203, v306, type metadata accessor for Proto_Reference);
              sub_1BDDA2E8C(v204, v167, type metadata accessor for Proto_Reference);
              v168 = v357;
              v166(v167, 0, 1, v357);
            }
            else
            {
              sub_1BDD9C3E0(v201, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              v168 = v357;
            }
          }
          sub_1BDD8422C(&qword_1ED6EFDA8, type metadata accessor for Proto_Reference, (uint64_t)&unk_1BE1C534C);
          v243 = v167;
          sub_1BE1B2258();
          v139 = (uint64_t)v381;
          v141 = v144;
          v244 = v338;
          sub_1BDDA2EF0(v243, v338, &qword_1ED6F32A8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v367 + 48))(v244, 1, v168) == 1)
          {
            sub_1BDD86E30(v244, &qword_1ED6F32A8);
          }
          else
          {
            v245 = v313;
            sub_1BDDA2E8C(v244, v313, type metadata accessor for Proto_Reference);
            v246 = v377;
            sub_1BDDA2E8C(v245, (uint64_t)v377, type metadata accessor for Proto_Reference);
            v247 = v384;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v246, 0, 1, v247);
            v248 = v379;
            sub_1BDDA2EF0((uint64_t)v246, v379, &qword_1ED6F26F0);
            v249 = v382;
            swift_beginAccess();
            sub_1BDDA1AF4(v248, v249, &qword_1ED6F26F0);
            swift_endAccess();
          }
          v140 = (uint64_t)v378;
          goto LABEL_6;
        case 9:
          v170 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v368 + 56);
          v171 = (uint64_t)v354;
          v172 = v358;
          v170(v354, 1, 1, v358);
          v173 = v348;
          sub_1BDD86DEC(v382, v348, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v173, 1, v384) == 1)
          {
            sub_1BDD86E30(v173, &qword_1ED6F26F0);
          }
          else
          {
            v205 = v173;
            v206 = v329;
            sub_1BDDA2E8C(v205, v329, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v207 = (uint64_t)v335;
            v208 = v206;
            v209 = v321;
            sub_1BDDA2E8C(v208, v321, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 8)
            {
              sub_1BDD86E30(v171, &qword_1ED6F2748);
              sub_1BDDA2E8C(v209, v207, type metadata accessor for Proto_Optional);
              sub_1BDDA2E8C(v207, v171, type metadata accessor for Proto_Optional);
              v172 = v358;
              v170((char *)v171, 0, 1, v358);
            }
            else
            {
              sub_1BDD9C3E0(v209, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              v172 = v358;
            }
          }
          sub_1BDD8422C(&qword_1ED6EEA60, type metadata accessor for Proto_Optional, (uint64_t)&unk_1BE1C51BC);
          v250 = v172;
          sub_1BE1B2258();
          v139 = (uint64_t)v381;
          v251 = v339;
          sub_1BDDA2EF0(v171, v339, &qword_1ED6F2748);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v368 + 48))(v251, 1, v250) == 1)
          {
            sub_1BDD86E30(v251, &qword_1ED6F2748);
          }
          else
          {
            v252 = v251;
            v253 = v314;
            sub_1BDDA2E8C(v252, v314, type metadata accessor for Proto_Optional);
            v254 = v253;
            v255 = v377;
            sub_1BDDA2E8C(v254, (uint64_t)v377, type metadata accessor for Proto_Optional);
            v256 = v384;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v255, 0, 1, v256);
            v257 = v379;
            sub_1BDDA2EF0((uint64_t)v255, v379, &qword_1ED6F26F0);
            v258 = v382;
            swift_beginAccess();
            sub_1BDDA1AF4(v257, v258, &qword_1ED6F26F0);
            swift_endAccess();
          }
          v140 = (uint64_t)v378;
          goto LABEL_6;
        case 10:
          v174 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v369 + 56);
          v175 = (uint64_t)v355;
          v176 = v359;
          v174(v355, 1, 1, v359);
          v177 = v349;
          sub_1BDD86DEC(v382, v349, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v177, 1, v384) == 1)
          {
            sub_1BDD86E30(v177, &qword_1ED6F26F0);
          }
          else
          {
            v210 = v177;
            v211 = v330;
            sub_1BDDA2E8C(v210, v330, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v212 = (uint64_t)v336;
            v213 = v211;
            v214 = v322;
            sub_1BDDA2E8C(v213, v322, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 9)
            {
              sub_1BDD86E30(v175, &qword_1ED6F3850);
              sub_1BDDA2E8C(v214, v212, type metadata accessor for Proto_Timestamp);
              sub_1BDDA2E8C(v212, v175, type metadata accessor for Proto_Timestamp);
              v176 = v359;
              v174((char *)v175, 0, 1, v359);
            }
            else
            {
              sub_1BDD9C3E0(v214, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              v176 = v359;
            }
          }
          sub_1BDD8422C(&qword_1ED6F2EA0, type metadata accessor for Proto_Timestamp, (uint64_t)&unk_1BE1C5FF4);
          v259 = v176;
          sub_1BE1B2258();
          v139 = (uint64_t)v381;
          v260 = v340;
          sub_1BDDA2EF0(v175, v340, &qword_1ED6F3850);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v369 + 48))(v260, 1, v259) == 1)
          {
            sub_1BDD86E30(v260, &qword_1ED6F3850);
          }
          else
          {
            v261 = v260;
            v262 = v315;
            sub_1BDDA2E8C(v261, v315, type metadata accessor for Proto_Timestamp);
            v263 = v140;
            v264 = v377;
            sub_1BDDA2E8C(v262, (uint64_t)v377, type metadata accessor for Proto_Timestamp);
            v265 = v384;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v264, 0, 1, v265);
            v266 = (uint64_t)v264;
            v140 = v263;
            v267 = v379;
            sub_1BDDA2EF0(v266, v379, &qword_1ED6F26F0);
            v268 = v382;
            swift_beginAccess();
            sub_1BDDA1AF4(v267, v268, &qword_1ED6F26F0);
            swift_endAccess();
          }
          v138 = v380;
          goto LABEL_6;
        case 11:
          v178 = v138;
          v179 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v365 + 56);
          v180 = v362;
          v179(v362, 1, 1, v373);
          v181 = v350;
          sub_1BDD86DEC(v382, v350, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v181, 1, v384) == 1)
          {
            sub_1BDD86E30(v181, &qword_1ED6F26F0);
          }
          else
          {
            v215 = v181;
            v216 = v331;
            sub_1BDDA2E8C(v215, v331, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v217 = v216;
            v218 = v323;
            sub_1BDDA2E8C(v217, v323, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            v219 = swift_getEnumCaseMultiPayload();
            v180 = v362;
            if (v219 == 10)
            {
              sub_1BDD86E30(v362, &qword_1ED6F27B0);
              v220 = v307;
              sub_1BDDA2E8C(v218, v307, type metadata accessor for Proto_RepeatedValue);
              sub_1BDDA2E8C(v220, v180, type metadata accessor for Proto_RepeatedValue);
              v221 = v373;
              v179(v180, 0, 1, v373);
              goto LABEL_92;
            }
            sub_1BDD9C3E0(v218, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          }
          v221 = v373;
LABEL_92:
          sub_1BDD8422C(&qword_1EF52B560, type metadata accessor for Proto_RepeatedValue, (uint64_t)&unk_1BE1C4AB4);
          v269 = v180;
          sub_1BE1B2258();
          v139 = (uint64_t)v381;
          v270 = v341;
          sub_1BDDA2EF0(v269, v341, &qword_1ED6F27B0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v365 + 48))(v270, 1, v221) == 1)
          {
            sub_1BDD86E30(v270, &qword_1ED6F27B0);
          }
          else
          {
            v271 = v270;
            v272 = v311;
            sub_1BDDA2E8C(v271, v311, type metadata accessor for Proto_RepeatedValue);
            v273 = v377;
            sub_1BDDA2E8C(v272, (uint64_t)v377, type metadata accessor for Proto_RepeatedValue);
            v274 = v384;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v273, 0, 1, v274);
            v275 = v379;
            sub_1BDDA2EF0((uint64_t)v273, v379, &qword_1ED6F26F0);
            v276 = v382;
            swift_beginAccess();
            sub_1BDDA1AF4(v275, v276, &qword_1ED6F26F0);
            swift_endAccess();
          }
          v138 = v178;
          v140 = (uint64_t)v378;
LABEL_6:
          result = sub_1BE1B2144();
          break;
        case 12:
          v182 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v371 + 56);
          v183 = v364;
          v184 = v360;
          v182(v364, 1, 1, v360);
          v185 = v351;
          sub_1BDD86DEC(v382, v351, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v185, 1, v384) == 1)
          {
            sub_1BDD86E30(v185, &qword_1ED6F26F0);
          }
          else
          {
            v222 = v332;
            sub_1BDDA2E8C(v185, v332, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v223 = v324;
            sub_1BDDA2E8C(v222, v324, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            v224 = swift_getEnumCaseMultiPayload();
            v183 = v364;
            if (v224 == 11)
            {
              sub_1BDD86E30(v364, &qword_1ED6F2770);
              v225 = v308;
              sub_1BDDA2E8C(v223, v308, type metadata accessor for Proto_TaggedValue);
              v226 = v225;
              v183 = v364;
              sub_1BDDA2E8C(v226, v364, type metadata accessor for Proto_TaggedValue);
              v184 = v360;
              v182(v183, 0, 1, v360);
            }
            else
            {
              sub_1BDD9C3E0(v223, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              v184 = v360;
            }
          }
          sub_1BDD8422C(&qword_1EF52B540, type metadata accessor for Proto_TaggedValue, (uint64_t)&unk_1BE1C5054);
          v277 = v183;
          v138 = v380;
          sub_1BE1B2258();
          v139 = (uint64_t)v381;
          v278 = v144;
          v279 = v343;
          sub_1BDDA2EF0(v277, v343, &qword_1ED6F2770);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v371 + 48))(v279, 1, v184) == 1)
          {
            sub_1BDD86E30(v279, &qword_1ED6F2770);
          }
          else
          {
            v280 = v279;
            v281 = v316;
            sub_1BDDA2E8C(v280, v316, type metadata accessor for Proto_TaggedValue);
            v282 = v377;
            v138 = v380;
            sub_1BDDA2E8C(v281, (uint64_t)v377, type metadata accessor for Proto_TaggedValue);
            v283 = v384;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v282, 0, 1, v283);
            v284 = v379;
            sub_1BDDA2EF0((uint64_t)v282, v379, &qword_1ED6F26F0);
            v285 = v382;
            swift_beginAccess();
            sub_1BDDA1AF4(v284, v285, &qword_1ED6F26F0);
            swift_endAccess();
          }
          v140 = (uint64_t)v378;
          v141 = v278;
          goto LABEL_6;
        case 13:
          v186 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v370 + 56);
          v187 = (uint64_t)v345;
          v186(v345, 1, 1, v375);
          v188 = v352;
          sub_1BDD86DEC(v382, v352, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v188, 1, v384) == 1)
          {
            sub_1BDD86E30(v188, &qword_1ED6F26F0);
          }
          else
          {
            sub_1BDDA2E8C(v188, v140, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v227 = v325;
            sub_1BDDA2E8C(v140, v325, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 12)
            {
              sub_1BDD86E30(v187, &qword_1ED6F26D8);
              v228 = v309;
              sub_1BDDA2E8C(v227, v309, type metadata accessor for Proto_Asset);
              sub_1BDDA2E8C(v228, v187, type metadata accessor for Proto_Asset);
              v186((char *)v187, 0, 1, v375);
            }
            else
            {
              sub_1BDD9C3E0(v227, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            v140 = (uint64_t)v378;
          }
          sub_1BDD8422C(&qword_1EF52B378, type metadata accessor for Proto_Asset, (uint64_t)&unk_1BE1C5BBC);
          sub_1BE1B2258();
          v286 = v187;
          v139 = (uint64_t)v381;
          v141 = v144;
          v287 = v344;
          v288 = &qword_1ED6F26D8;
          sub_1BDDA2EF0(v286, v344, &qword_1ED6F26D8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v370 + 48))(v287, 1, v375) == 1)
            goto LABEL_108;
          v289 = v287;
          v290 = v317;
          sub_1BDDA2E8C(v289, v317, type metadata accessor for Proto_Asset);
          v291 = v140;
          v292 = v377;
          sub_1BDDA2E8C(v290, (uint64_t)v377, type metadata accessor for Proto_Asset);
          v293 = v384;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v292, 0, 1, v293);
          v142 = (uint64_t)v292;
          v140 = v291;
          v147 = v379;
          goto LABEL_5;
        case 14:
          v189 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v372 + 56);
          v189(v376, 1, 1, v141);
          v190 = v353;
          sub_1BDD86DEC(v382, v353, &qword_1ED6F26F0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v190, 1, v384) == 1)
          {
            sub_1BDD86E30(v190, &qword_1ED6F26F0);
          }
          else
          {
            v229 = v333;
            sub_1BDDA2E8C(v190, v333, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v230 = v326;
            sub_1BDDA2E8C(v229, v326, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 13)
            {
              v231 = v376;
              sub_1BDD86E30(v376, &qword_1ED6F2798);
              v232 = v310;
              sub_1BDDA2E8C(v230, v310, type metadata accessor for Proto_CustomCRValue);
              sub_1BDDA2E8C(v232, v231, type metadata accessor for Proto_CustomCRValue);
              v233 = v231;
              v138 = v380;
              v189(v233, 0, 1, v141);
            }
            else
            {
              sub_1BDD9C3E0(v230, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            v140 = (uint64_t)v378;
          }
          sub_1BDD8422C(&qword_1ED6F2778, type metadata accessor for Proto_CustomCRValue, (uint64_t)&unk_1BE1C4EEC);
          sub_1BE1B2258();
          v139 = (uint64_t)v381;
          v287 = v342;
          v288 = &qword_1ED6F2798;
          sub_1BDDA2EF0(v376, v342, &qword_1ED6F2798);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v372 + 48))(v287, 1, v141) == 1)
          {
LABEL_108:
            sub_1BDD86E30(v287, v288);
          }
          else
          {
            v294 = v318;
            sub_1BDDA2E8C(v287, v318, type metadata accessor for Proto_CustomCRValue);
            v295 = v294;
            v297 = v377;
            v296 = v378;
            sub_1BDDA2E8C(v295, (uint64_t)v377, type metadata accessor for Proto_CustomCRValue);
            v298 = v384;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v297, 0, 1, v298);
            v142 = (uint64_t)v297;
            v140 = (uint64_t)v296;
            v147 = v379;
LABEL_5:
            sub_1BDDA2EF0(v142, v147, &qword_1ED6F26F0);
            v143 = v382;
            swift_beginAccess();
            sub_1BDDA1AF4(v147, v143, &qword_1ED6F26F0);
            swift_endAccess();
          }
          goto LABEL_6;
        case 15:
          sub_1BDD86DEC(v382, v139, &qword_1ED6F26F0);
          v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v139, 1, v384);
          v192 = v139;
          v193 = v191;
          sub_1BDD86E30(v192, &qword_1ED6F26F0);
          if (v193 != 1)
            sub_1BE1B2150();
          LODWORD(v386) = 0;
          BYTE4(v386) = 1;
          sub_1BE1B21B0();
          v139 = (uint64_t)v381;
          v147 = v379;
          if ((BYTE4(v386) & 1) != 0)
            goto LABEL_6;
          v148 = v140;
          v149 = v377;
          *(_DWORD *)v377 = v386;
          v150 = v384;
LABEL_4:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v383 + 56))(v149, 0, 1, v150);
          v142 = (uint64_t)v149;
          v140 = v148;
          goto LABEL_5;
        default:
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_1BDD9F848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto_Reference, (void (*)(_QWORD))type metadata accessor for Proto_Reference._StorageClass, sub_1BDDA1424, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDD9FC8C);
}

uint64_t sub_1BDD9F87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto_Set, (void (*)(_QWORD))type metadata accessor for Proto_Set._StorageClass, sub_1BDDA1768, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDD9F990);
}

uint64_t sub_1BDD9F8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    v14 = swift_retain();
    *(_QWORD *)(v7 + v13) = a6(v14);
    swift_release();
  }
  v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t sub_1BDD9F990()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          v7 = v3;
          sub_1BE1B2240();
          goto LABEL_7;
        case 2:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          sub_1BDD8422C(&qword_1ED6F27B8, type metadata accessor for Proto_Version, (uint64_t)&unk_1BE1C5D24);
          goto LABEL_6;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto_Timestamp(0);
          v4 = &qword_1ED6F2EA0;
          v5 = type metadata accessor for Proto_Timestamp;
          v6 = &unk_1BE1C5FF4;
          goto LABEL_5;
        case 4:
          swift_beginAccess();
          type metadata accessor for Proto_Set.Element(0);
          sub_1BDD8422C(&qword_1ED6EF720, type metadata accessor for Proto_Set.Element, (uint64_t)&unk_1BE1C561C);
          v7 = v3;
          sub_1BE1B224C();
          goto LABEL_7;
        case 5:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          v4 = &qword_1ED6F27B8;
          v5 = type metadata accessor for Proto_Version;
          v6 = &unk_1BE1C5D24;
LABEL_5:
          sub_1BDD8422C(v4, v5, (uint64_t)v6);
LABEL_6:
          v7 = v3;
          sub_1BE1B2258();
LABEL_7:
          v3 = v7;
          swift_endAccess();
          break;
        case 6:
          swift_beginAccess();
          type metadata accessor for Proto_Set.Element(0);
          sub_1BDD8422C(&qword_1ED6EF720, type metadata accessor for Proto_Set.Element, (uint64_t)&unk_1BE1C561C);
          sub_1BE1B224C();
          swift_endAccess();
          break;
        default:
          break;
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDD9FC8C()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;

  result = sub_1BE1B2144();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          v7 = v3;
          sub_1BE1B2240();
          goto LABEL_6;
        case 2:
          swift_beginAccess();
          sub_1BE148AB0();
          v7 = v3;
          sub_1BE1B2174();
          goto LABEL_6;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          v4 = &qword_1ED6F27B8;
          v5 = type metadata accessor for Proto_Version;
          v6 = &unk_1BE1C5D24;
          goto LABEL_5;
        case 4:
          swift_beginAccess();
          type metadata accessor for Proto_CRDT(0);
          v4 = &qword_1ED6F2E30;
          v5 = type metadata accessor for Proto_CRDT;
          v6 = &unk_1BE1C6594;
          goto LABEL_5;
        case 5:
          swift_beginAccess();
          type metadata accessor for Proto_KeyPath(0);
          v4 = &qword_1ED6EFCD0;
          v5 = type metadata accessor for Proto_KeyPath;
          v6 = &unk_1BE1C615C;
LABEL_5:
          sub_1BDD8422C(v4, v5, (uint64_t)v6);
          v7 = v3;
          sub_1BE1B2258();
LABEL_6:
          v3 = v7;
          swift_endAccess();
          break;
        default:
          break;
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_2.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t AssociatedTypeWitness;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];
  uint64_t v35;

  v3 = v1;
  v5 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v25 - v6;
  v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 48))(v34, v3, v5);
  v8 = v34[1];
  v9 = v34[4];
  if (!*((_QWORD *)fields._rawValue + 2))
    goto LABEL_12;
  v32 = v34[5];
  v33 = v34[2];
  v10 = v34[0];
  v11 = v34[3];
  swift_bridgeObjectRetain();
  v12 = sub_1BDDB271C(v10, v8);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (*((_QWORD *)fields._rawValue + 2))
      goto LABEL_6;
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  v26 = v11;
  v29 = v9;
  v14 = *(_QWORD *)(*((_QWORD *)fields._rawValue + 7) + 8 * v12);
  swift_retain();
  v28 = v8;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8);
  swift_retain();
  swift_retain();
  v16 = v35;
  v27(v14, v7, v15);
  v35 = v16;
  if (v16)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    return;
  }
  swift_setAtWritableKeyPath();
  swift_release();
  swift_release();
  v9 = v29;
  v11 = v26;
  if (!*((_QWORD *)fields._rawValue + 2))
    goto LABEL_12;
LABEL_6:
  swift_bridgeObjectRetain();
  v17 = sub_1BDDB271C(v11, v9);
  if ((v18 & 1) != 0)
  {
    v19 = *(_QWORD *)(*((_QWORD *)fields._rawValue + 7) + 8 * v17);
    swift_retain();
    swift_bridgeObjectRelease();
    v20 = AssociatedTypeWitness;
    v21 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 8);
    swift_retain();
    v23 = v32;
    swift_retain();
    v24 = v35;
    v22(v19, v20, v21);
    v35 = v24;
    if (v24)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v33 = v23;
      goto LABEL_9;
    }
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release_n();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_1BDDA022C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return CRDictionary_v1.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(uint64_t **)(a2 + 48), *(_QWORD **)(a2 + 56), a3);
}

uint64_t CRDictionary_v1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;

  result = CRDictionary.init(from:)(a1, a2, a3, a4, a5, a6, a7, &v11);
  if (!v8)
    *a8 = v11;
  return result;
}

uint64_t CRDictionary.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a7;
  v24 = a8;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v16, &qword_1ED6F3728);
  v18 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v16, 1, v18);
  sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3728);
  if ((_DWORD)v17 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000014;
    *(_QWORD *)(v19 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v19 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    v22 = v26;
    sub_1BDDA045C(a2, a3, a4, a5, a6, v25, &v27);
    result = swift_release();
    if (!v22)
      *v24 = v27;
  }
  return result;
}

uint64_t type metadata accessor for CRDecoder.CRDTContainer()
{
  return objc_opt_self();
}

uint64_t sub_1BDDA045C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v15 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v17);
  v18 = *(_QWORD *)(v7 + 16);
  swift_retain();
  return sub_1BDDA0840((uint64_t)v17, v18, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1BDDA0528@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v14 = &v25[-v13];
  v15 = *(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    swift_beginAccess();
    sub_1BDD86DEC(v15, (uint64_t)v12, &qword_1ED6F3728);
    v16 = type metadata accessor for Proto_CRDT(0);
    result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v12, 1, v16);
    if ((_DWORD)result != 1)
      return sub_1BDDA2E8C((uint64_t)v12, a1, type metadata accessor for Proto_CRDT);
    goto LABEL_17;
  }
  v18 = *(_QWORD *)(v1 + 24);
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v14, &qword_1ED6F3728);
  v19 = type metadata accessor for Proto_CRDT(0);
  v20 = *(_QWORD *)(v19 - 8);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v14, 1, v19);
  if ((_DWORD)result == 1)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v21 = *(_QWORD *)&v14[*(int *)(v19 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v5, &qword_1ED6F2DF0);
  v22 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v5, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      result = sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v8, type metadata accessor for Proto_Struct);
      goto LABEL_11;
    }
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  v23 = MEMORY[0x1E0DEE9D8];
  *v8 = MEMORY[0x1E0DEE9D8];
  v8[1] = v23;
  v8[2] = v23;
  result = sub_1BE1B20E4();
LABEL_11:
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v24 = v8[1];
  if (v18 >= *(_QWORD *)(v24 + 16))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_1BDD9C318(v24+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v18, a1, type metadata accessor for Proto_CRDT);
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
  return sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Struct);
}

uint64_t sub_1BDDA0840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, _QWORD *a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a6;
  v27 = a4;
  v28 = a5;
  v25 = a9;
  v26 = a3;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v15, &qword_1ED6F2DF0);
  v20 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v15, 1, v20) == 1)
  {
    sub_1BDD86E30((uint64_t)v15, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v18, type metadata accessor for Proto_Set);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v21 = *(int *)(v16 + 20);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(_QWORD *)&v18[v21] = qword_1ED6F2800;
  swift_retain();
LABEL_9:
  v22 = v30;
  sub_1BDDA92A8((uint64_t)v18, a2, 0, 0, v26, v27, v28, v29, (uint64_t)&v31, a7, a8);
  result = sub_1BDD9C3E0(a1, type metadata accessor for Proto_CRDT);
  if (!v22)
    *v25 = v31;
  return result;
}

uint64_t sub_1BDDA0A64()
{
  return sub_1BDDA0A78();
}

uint64_t sub_1BDDA0A78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16) || (result = sub_1BE1B22B8(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for Proto_CRDT(0),
          sub_1BDD8422C(&qword_1ED6F2E30, type metadata accessor for Proto_CRDT, (uint64_t)&unk_1BE1C6594),
          result = sub_1BE1B2354(),
          !v1))
    {
      if (!*(_QWORD *)(v0[2] + 16) || (result = sub_1BE1B22B8(), !v1))
      {
        type metadata accessor for Proto_Struct(0);
        return sub_1BE1B20D8();
      }
    }
  }
  return result;
}

void sub_1BDDA0BA0()
{
  char *v0;

  v0 = (char *)sub_1BDDA0BF0 + 4 * byte_1BE1C3A4A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1BDDA0BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  v3 = type metadata accessor for Proto_Register(0);
  *(_QWORD *)(v0 + *(int *)(v3 + 20)) = *(_QWORD *)(v1 + *(int *)(v3 + 20));
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_1BDDA0F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  MEMORY[0x1E0C80A78](v3);
  v49 = (uint64_t)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v5);
  v47 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  v11 = type metadata accessor for Proto_Document.OneOf_Root(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references) = MEMORY[0x1E0DEE9D8];
  v14 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v44 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v15 = type metadata accessor for Proto_Version(0);
  v16 = *(void (**)(void))(*(_QWORD *)(v15 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v16)(v14, 1, 1, v15);
  v17 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  v45 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  v18 = type metadata accessor for Proto_Constants(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v46 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets) = v13;
  v19 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
  *v19 = sub_1BE1B20CC();
  v19[1] = v20;
  v48 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences) = v13;
  v50 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  v51 = v1;
  v16();
  v21 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v9, &qword_1ED6F37C8);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v9, v10, &qword_1ED6F37C8);
  swift_endAccess();
  v22 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  swift_beginAccess();
  v23 = *v22;
  swift_beginAccess();
  *v12 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  v25 = v47;
  sub_1BDD86DEC(v24, v47, &qword_1ED6F37A8);
  v26 = v44;
  swift_beginAccess();
  sub_1BDDA1AF4(v25, v26, &qword_1ED6F37A8);
  swift_endAccess();
  v27 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  v28 = v49;
  sub_1BDD86DEC(v27, v49, &qword_1ED6F3290);
  v29 = v45;
  swift_beginAccess();
  sub_1BDDA1AF4(v28, v29, &qword_1ED6F3290);
  swift_endAccess();
  v30 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
  swift_beginAccess();
  v31 = *v30;
  v32 = v46;
  swift_beginAccess();
  *v32 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
  swift_beginAccess();
  v35 = *v33;
  v34 = v33[1];
  swift_beginAccess();
  v36 = *v19;
  v37 = v19[1];
  *v19 = v35;
  v19[1] = v34;
  sub_1BDDB6CA4(v35, v34);
  sub_1BDDB796C(v36, v37);
  v38 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences);
  swift_beginAccess();
  v39 = *v38;
  v40 = v48;
  swift_beginAccess();
  *v40 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  swift_beginAccess();
  sub_1BDD86DEC(v41, v25, &qword_1ED6F37A8);
  swift_release();
  v42 = v50;
  swift_beginAccess();
  sub_1BDDA1AF4(v25, v42, &qword_1ED6F37A8);
  swift_endAccess();
  return v51;
}

uint64_t sub_1BDDA1418()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA1424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v4);
  v26 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 32) = 1;
  v12 = v1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v13 = type metadata accessor for Proto_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  v15 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = v1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  v17 = type metadata accessor for Proto_KeyPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  swift_beginAccess();
  v18 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v18;
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(_BYTE *)(a1 + 32);
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v19;
  *(_BYTE *)(v1 + 32) = v20;
  v21 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v11, &qword_1ED6F37A8);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v11, v12, &qword_1ED6F37A8);
  swift_endAccess();
  v22 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v22, (uint64_t)v8, &qword_1ED6F3728);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v8, v14, &qword_1ED6F3728);
  swift_endAccess();
  v23 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  v24 = v26;
  sub_1BDD86DEC(v23, v26, &qword_1ED6F3790);
  swift_release();
  swift_beginAccess();
  sub_1BDDA1AF4(v24, v16, &qword_1ED6F3790);
  swift_endAccess();
  return v2;
}

uint64_t sub_1BDDA1768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  MEMORY[0x1E0C80A78](v4);
  v28 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  v9 = v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  v10 = type metadata accessor for Proto_Version(0);
  v11 = *(void (**)(void))(*(_QWORD *)(v10 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(v9, 1, 1, v10);
  v12 = v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  v13 = type metadata accessor for Proto_Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (_QWORD *)(v1
                 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  v15 = MEMORY[0x1E0DEE9D8];
  *v14 = MEMORY[0x1E0DEE9D8];
  v29 = v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  v11();
  v16 = (_QWORD *)(v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
  *v16 = v15;
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v17;
  v18 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v8, &qword_1ED6F37A8);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v8, v9, &qword_1ED6F37A8);
  swift_endAccess();
  v19 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  v20 = v28;
  sub_1BDD86DEC(v19, v28, &qword_1ED6F3850);
  swift_beginAccess();
  sub_1BDDA1AF4(v20, v12, &qword_1ED6F3850);
  swift_endAccess();
  v21 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  v22 = *v21;
  swift_beginAccess();
  *v14 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v8, &qword_1ED6F37A8);
  v24 = v29;
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v8, v24, &qword_1ED6F37A8);
  swift_endAccess();
  v25 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
  swift_beginAccess();
  v26 = *v25;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *v16 = v26;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1BDDA1AE8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA1AF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1BDDA1B38()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA1B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v8;
  *(_QWORD *)(v2 + 40) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 32) = v8;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  v9 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v10 = type metadata accessor for Proto_CRDT(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v12 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v13 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = *(_QWORD *)(a2 + 40);
  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v2 + 48) = *(_BYTE *)(a2 + 48);
  sub_1BDDA2E8C(a1, (uint64_t)v7, type metadata accessor for Proto_CRDT);
  v11((uint64_t)v7, 0, 1, v10);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v7, v9, &qword_1ED6F3728);
  swift_endAccess();
  *(_BYTE *)(v2 + 49) = *(_BYTE *)(a2 + 49);
  return v2;
}

uint64_t sub_1BDDA1D48()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA1D54@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t (*a3)(uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int isUniquelyReferenced_nonNull_native;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t *);
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t *);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  __int128 v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v8 = v7;
  v133 = a6;
  v132 = a5;
  v137 = a4;
  v143 = a3;
  LODWORD(v183) = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v11);
  v129 = (uint64_t)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v14 = MEMORY[0x1E0C80A78](v13);
  v142 = (uint64_t)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v141 = (uint64_t)&v128 - v16;
  v140 = type metadata accessor for Proto_CRDT(0);
  v139 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140);
  v153 = (uint64_t)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v151 = (uint64_t)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v150 = (uint64_t)&v128 - v21;
  v149 = type metadata accessor for Proto_Version(0);
  v148 = *(_QWORD *)(v149 - 8);
  v22 = MEMORY[0x1E0C80A78](v149);
  v130 = (uint64_t *)((char *)&v128 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v22);
  v155 = (uint64_t *)((char *)&v128 - v24);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v26 = MEMORY[0x1E0C80A78](v25);
  v147 = (uint64_t)&v128 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v146 = (uint64_t)&v128 - v28;
  v156 = type metadata accessor for Proto_KeyPath(0);
  v145 = *(_QWORD *)(v156 - 8);
  v29 = MEMORY[0x1E0C80A78](v156);
  v136 = (uint64_t *)((char *)&v128 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v29);
  v154 = (uint64_t *)((char *)&v128 - v31);
  v144 = type metadata accessor for Proto_Reference(0);
  v138 = *(_QWORD *)(v144 - 8);
  v32 = MEMORY[0x1E0C80A78](v144);
  v134 = (char *)&v128 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v152 = (uint64_t)&v128 - v35;
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v128 - v36;
  v38 = type metadata accessor for PartiallyOrderedReferenceMap();
  v39 = MEMORY[0x1E0C80A78](v38);
  v41 = (char *)&v128 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v128 - v42;
  sub_1BE1B20E4();
  v45 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  v131 = v45;
  *(_QWORD *)(a7 + v45) = qword_1ED6F37F0;
  v135 = a1;
  if ((v183 & 1) != 0)
  {
    swift_retain();
  }
  else
  {
    v128 = a7;
    v164 = MEMORY[0x1E0DEE9D8];
    v46 = type metadata accessor for Capsule(0, v132, *(_QWORD *)(v133 + 16), v44);
    sub_1BDDA7300(v46, (uint64_t)v43);
    v47 = *(_QWORD *)(*(_QWORD *)&v43[*(int *)(v38 + 20)] + 16);
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v48 = v164;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v47 > *(_QWORD *)(v48 + 24) >> 1)
    {
      if (*(_QWORD *)(v48 + 16) <= v47)
        v50 = v47;
      else
        v50 = *(_QWORD *)(v48 + 16);
      v48 = sub_1BDDC5EAC(isUniquelyReferenced_nonNull_native, v50, 0, v48);
    }
    v164 = v48;
    sub_1BDDA7300(v46, (uint64_t)v41);
    v51 = *(_QWORD *)&v41[*(int *)(v38 + 20)];
    v52 = -1 << *(_BYTE *)(v51 + 32);
    v53 = ~v52;
    v54 = -v52;
    if (v54 < 64)
      v55 = ~(-1 << v54);
    else
      v55 = -1;
    v56 = v55 & *(_QWORD *)(v51 + 64);
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v173 = v51;
    v174 = v51 + 64;
    v175 = v53;
    v176 = 0;
    v177 = v56;
    sub_1BDDA7144((uint64_t)&v166);
    v57 = v169;
    if (v169)
    {
      v58 = v166;
      v59 = v167;
      v60 = v168;
      v62 = v170;
      v61 = v171;
      v63 = v172;
      v64 = v143;
      do
      {
        v158 = v60;
        v178 = v60;
        v179 = v57;
        v180 = v62;
        v181 = v61;
        v182 = v63;
        v161 = v63;
        if (v64 && (v166 = v58, v167 = v59, (v64(&v166) & 1) == 0))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          sub_1BDDB796C(v58, v59);
        }
        else
        {
          v159 = v58;
          v160 = v61;
          sub_1BE1B20E4();
          v65 = *(int *)(v144 + 20);
          if (qword_1ED6EFD78 != -1)
            swift_once();
          v183 = v8;
          *(_QWORD *)&v37[v65] = qword_1ED6EFD68;
          v66 = v154;
          *v154 = MEMORY[0x1E0DEE9D8];
          swift_retain();
          v67 = sub_1BE1B20CC();
          v69 = v68;
          sub_1BE1B20E4();
          v70 = v159;
          sub_1BDDB6CA4(v159, v59);
          sub_1BDDB796C(v67, v69);
          v66[1] = v70;
          v66[2] = v59;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_Reference._StorageClass(0);
            swift_allocObject();
            v71 = swift_retain();
            *(_QWORD *)&v37[v65] = sub_1BDDA1424(v71);
            swift_release();
          }
          v72 = *(_QWORD *)&v37[v65];
          v73 = v146;
          sub_1BDDA2E8C((uint64_t)v154, v146, type metadata accessor for Proto_KeyPath);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v73, 0, 1, v156);
          v74 = v73;
          v75 = v147;
          sub_1BDDA2EF0(v74, v147, &qword_1ED6F3790);
          v76 = v72
              + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
          swift_beginAccess();
          swift_retain();
          sub_1BDDA1AF4(v75, v76, &qword_1ED6F3790);
          swift_endAccess();
          swift_release();
          v166 = v57;
          v167 = v62;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1BDDAD780(v157, v155);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_Reference._StorageClass(0);
            swift_allocObject();
            v77 = swift_retain();
            *(_QWORD *)&v37[v65] = sub_1BDDA1424(v77);
            swift_release();
          }
          v78 = *(_QWORD *)&v37[v65];
          v79 = v150;
          sub_1BDDA2E8C((uint64_t)v155, v150, type metadata accessor for Proto_Version);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v148 + 56))(v79, 0, 1, v149);
          v80 = v79;
          v81 = v151;
          sub_1BDDA2EF0(v80, v151, &qword_1ED6F37A8);
          v82 = v78
              + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
          swift_beginAccess();
          swift_retain();
          sub_1BDDA1AF4(v81, v82, &qword_1ED6F37A8);
          swift_endAccess();
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v83 = swift_retain();
          v84 = v183;
          sub_1BDDC97A4(v83, (uint64_t)&v178, v83, v153);
          if (v84)
          {
            sub_1BDDB796C(v159, v59);
            sub_1BDD9C3E0((uint64_t)v37, type metadata accessor for Proto_Reference);
            sub_1BDE27FD0();
            swift_bridgeObjectRelease();
            sub_1BDD9C3E0(v128, type metadata accessor for Proto_Document);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_release();
          }
          v183 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_Reference._StorageClass(0);
            swift_allocObject();
            v85 = swift_retain();
            *(_QWORD *)&v37[v65] = sub_1BDDA1424(v85);
            swift_release();
          }
          v86 = *(_QWORD *)&v37[v65];
          v87 = v141;
          sub_1BDDA2E8C(v153, v141, type metadata accessor for Proto_CRDT);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v139 + 56))(v87, 0, 1, v140);
          v88 = v87;
          v89 = v142;
          sub_1BDDA2EF0(v88, v142, &qword_1ED6F3728);
          v90 = v86
              + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
          swift_beginAccess();
          swift_retain();
          sub_1BDDA1AF4(v89, v90, &qword_1ED6F3728);
          swift_endAccess();
          swift_release();
          sub_1BDD9C318((uint64_t)v37, v152, type metadata accessor for Proto_Reference);
          v91 = v164;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v92 = v183;
          }
          else
          {
            v92 = v183;
            v91 = sub_1BDDC5EAC(0, *(_QWORD *)(v91 + 16) + 1, 1, v91);
          }
          v94 = *(_QWORD *)(v91 + 16);
          v93 = *(_QWORD *)(v91 + 24);
          if (v94 >= v93 >> 1)
            v91 = sub_1BDDC5EAC(v93 > 1, v94 + 1, 1, v91);
          *(_QWORD *)(v91 + 16) = v94 + 1;
          sub_1BDDA2E8C(v152, v91+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(_QWORD *)(v138 + 72) * v94, type metadata accessor for Proto_Reference);
          sub_1BDDB796C(v159, v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v164 = v91;
          sub_1BDD9C3E0((uint64_t)v37, type metadata accessor for Proto_Reference);
          v8 = v92;
          v64 = v143;
        }
        sub_1BDDA7144((uint64_t)&v166);
        v58 = v166;
        v59 = v167;
        v60 = v168;
        v57 = v169;
        v62 = v170;
        v61 = v171;
        v63 = v172;
      }
      while (v169);
    }
    sub_1BDE27FD0();
    swift_beginAccess();
    v95 = swift_bridgeObjectRetain();
    sub_1BDDC7898(v95);
    v96 = v164;
    a7 = v128;
    v97 = v131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Document._StorageClass(0);
      swift_allocObject();
      v98 = swift_retain();
      *(_QWORD *)(a7 + v97) = sub_1BDDA0F18(v98);
      swift_release();
    }
    v99 = (uint64_t *)(*(_QWORD *)(a7 + v97)
                    + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
    swift_beginAccess();
    *v99 = v96;
    swift_bridgeObjectRelease();
  }
  v100 = v134;
  sub_1BE1B20E4();
  v102 = *(int *)(v144 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)&v100[v102] = qword_1ED6EFD68;
  v103 = type metadata accessor for Capsule(0, v132, *(_QWORD *)(v133 + 16), v101);
  Capsule<>.rootID.getter((uint64_t *)&v164);
  v104 = v164;
  v105 = v165;
  v106 = v136;
  *v136 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  v107 = sub_1BE1B20CC();
  v109 = v108;
  sub_1BE1B20E4();
  sub_1BDDB796C(v107, v109);
  v106[1] = v104;
  v106[2] = v105;
  v110 = (uint64_t)v134;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v111 = swift_retain();
    *(_QWORD *)(v110 + v102) = sub_1BDDA1424(v111);
    swift_release();
  }
  v112 = *(_QWORD *)(v110 + v102);
  v113 = v146;
  sub_1BDDA2E8C((uint64_t)v136, v146, type metadata accessor for Proto_KeyPath);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v113, 0, 1, v156);
  v114 = v147;
  sub_1BDDA2EF0(v113, v147, &qword_1ED6F3790);
  v115 = v112 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v114, v115, &qword_1ED6F3790);
  swift_endAccess();
  swift_release();
  v116 = v129;
  sub_1BDD9C318(v110, v129, type metadata accessor for Proto_Reference);
  v117 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v116, 0, 1, v117);
  v118 = v131;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v119 = swift_retain();
    *(_QWORD *)(a7 + v118) = sub_1BDDA0F18(v119);
    swift_release();
  }
  v120 = *(_QWORD *)(a7 + v118)
       + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v116, v120, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  Capsule.version.getter(v103, &v164);
  v162 = v164;
  v163 = v165;
  v121 = v130;
  sub_1BDDAD780(v157, v130);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v122 = swift_retain();
    *(_QWORD *)(a7 + v118) = sub_1BDDA0F18(v122);
    swift_release();
  }
  v123 = *(_QWORD *)(a7 + v118);
  v124 = v150;
  sub_1BDDA2E8C((uint64_t)v121, v150, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v148 + 56))(v124, 0, 1, v149);
  v125 = v151;
  sub_1BDDA2EF0(v124, v151, &qword_1ED6F37A8);
  v126 = v123 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v125, v126, &qword_1ED6F37A8);
  swift_endAccess();
  swift_release();
  sub_1BDD8C8A8(a7);
  return sub_1BDD9C3E0(v110, type metadata accessor for Proto_Reference);
}

uint64_t sub_1BDDA2E8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1BDDA2ED0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Proto_Value(uint64_t a1)
{
  return sub_1BDD88618(a1, qword_1ED6F3758);
}

uint64_t sub_1BDDA2EF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1BDDA2F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  __int16 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t result;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  __int16 *v162;
  void (*v163)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  void (*v182)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  void (*v187)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int16 *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __int16 *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void (*v348)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v349;
  char *v350;
  char *v351;
  __int16 *v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  char *v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;

  v439 = a4;
  v440 = a3;
  v431 = a1;
  v414 = type metadata accessor for Proto_CustomCRDT(0);
  v411 = *(_QWORD *)(v414 - 8);
  v5 = MEMORY[0x1E0C80A78](v414);
  v376 = (uint64_t)&v347 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v366 = (uint64_t)&v347 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2EC8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v397 = (uint64_t)&v347 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v422 = (uint64_t)&v347 - v11;
  v413 = type metadata accessor for Proto_Counter(0);
  v410 = *(_QWORD *)(v413 - 8);
  v12 = MEMORY[0x1E0C80A78](v413);
  v375 = (uint64_t)&v347 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v358 = (uint64_t)&v347 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E68);
  v16 = MEMORY[0x1E0C80A78](v15);
  v396 = (uint64_t)&v347 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v420 = (uint64_t)&v347 - v18;
  v427 = type metadata accessor for Proto_OrderedSet(0);
  v425 = *(_QWORD *)(v427 - 8);
  v19 = MEMORY[0x1E0C80A78](v427);
  v367 = (uint64_t)&v347 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v365 = (uint64_t)&v347 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v374 = (uint64_t)&v347 - v24;
  MEMORY[0x1E0C80A78](v23);
  v364 = (uint64_t)&v347 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2EE0);
  v27 = MEMORY[0x1E0C80A78](v26);
  v395 = (uint64_t)&v347 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v434 = (char *)&v347 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v394 = (uint64_t)&v347 - v32;
  MEMORY[0x1E0C80A78](v31);
  v419 = (uint64_t)&v347 - v33;
  v426 = type metadata accessor for Proto_Sequence(0);
  v424 = *(_QWORD *)(v426 - 8);
  v34 = MEMORY[0x1E0C80A78](v426);
  v373 = (uint64_t)&v347 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v363 = (uint64_t)&v347 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v368 = (uint64_t)&v347 - v39;
  MEMORY[0x1E0C80A78](v38);
  v362 = (uint64_t)&v347 - v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E98);
  v42 = MEMORY[0x1E0C80A78](v41);
  v393 = (uint64_t)&v347 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42);
  v418 = (uint64_t)&v347 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v392 = (uint64_t)&v347 - v47;
  MEMORY[0x1E0C80A78](v46);
  v408 = (uint64_t)&v347 - v48;
  v430 = type metadata accessor for Proto_Struct(0);
  v409 = *(_QWORD *)(v430 - 8);
  v49 = MEMORY[0x1E0C80A78](v430);
  v372 = (uint64_t)&v347 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v49);
  v361 = (uint64_t)&v347 - v51;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E50);
  v53 = MEMORY[0x1E0C80A78](v52);
  v391 = (uint64_t)&v347 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v53);
  v417 = (uint64_t)&v347 - v55;
  v421 = type metadata accessor for Proto_Set(0);
  v423 = *(_QWORD *)(v421 - 8);
  v56 = MEMORY[0x1E0C80A78](v421);
  v371 = (uint64_t)&v347 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = MEMORY[0x1E0C80A78](v56);
  v360 = (uint64_t)&v347 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v370 = (uint64_t)&v347 - v61;
  MEMORY[0x1E0C80A78](v60);
  v359 = (uint64_t)&v347 - v62;
  v63 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2EF8);
  v64 = MEMORY[0x1E0C80A78](v63);
  v390 = (uint64_t)&v347 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = MEMORY[0x1E0C80A78](v64);
  v416 = (uint64_t)&v347 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v389 = (uint64_t)&v347 - v69;
  MEMORY[0x1E0C80A78](v68);
  v432 = (char *)&v347 - v70;
  v415 = type metadata accessor for Proto_Register(0);
  v412 = *(_QWORD *)(v415 - 8);
  v71 = MEMORY[0x1E0C80A78](v415);
  v369 = (uint64_t)&v347 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v71);
  v357 = (uint64_t)&v347 - v73;
  v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v75 = MEMORY[0x1E0C80A78](v74);
  v407 = (uint64_t)&v347 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = MEMORY[0x1E0C80A78](v75);
  v406 = (uint64_t)&v347 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v405 = (uint64_t)&v347 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v404 = (uint64_t)&v347 - v82;
  v83 = MEMORY[0x1E0C80A78](v81);
  v403 = (uint64_t)&v347 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v402 = (uint64_t)&v347 - v86;
  v87 = MEMORY[0x1E0C80A78](v85);
  v401 = (uint64_t)&v347 - v88;
  v89 = MEMORY[0x1E0C80A78](v87);
  v400 = (uint64_t)&v347 - v90;
  v91 = MEMORY[0x1E0C80A78](v89);
  v399 = (uint64_t)&v347 - v92;
  v93 = MEMORY[0x1E0C80A78](v91);
  v429 = (uint64_t)&v347 - v94;
  v95 = MEMORY[0x1E0C80A78](v93);
  v428 = (uint64_t)&v347 - v96;
  MEMORY[0x1E0C80A78](v95);
  v398 = (uint64_t)&v347 - v97;
  v98 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v436 = *(_QWORD *)(v98 - 8);
  v437 = v98;
  v99 = MEMORY[0x1E0C80A78](v98);
  v381 = (uint64_t)&v347 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = MEMORY[0x1E0C80A78](v99);
  v388 = (uint64_t)&v347 - v102;
  v103 = MEMORY[0x1E0C80A78](v101);
  v380 = (uint64_t)&v347 - v104;
  v105 = MEMORY[0x1E0C80A78](v103);
  v387 = (uint64_t)&v347 - v106;
  v107 = MEMORY[0x1E0C80A78](v105);
  v386 = (uint64_t)&v347 - v108;
  v109 = MEMORY[0x1E0C80A78](v107);
  v385 = (uint64_t)&v347 - v110;
  v111 = MEMORY[0x1E0C80A78](v109);
  v379 = (uint64_t)&v347 - v112;
  v113 = MEMORY[0x1E0C80A78](v111);
  v433 = (char *)&v347 - v114;
  v115 = MEMORY[0x1E0C80A78](v113);
  v378 = (uint64_t)&v347 - v116;
  v117 = MEMORY[0x1E0C80A78](v115);
  v384 = (uint64_t)&v347 - v118;
  v119 = MEMORY[0x1E0C80A78](v117);
  v377 = (uint64_t)&v347 - v120;
  v121 = MEMORY[0x1E0C80A78](v119);
  v383 = (uint64_t)&v347 - v122;
  v123 = MEMORY[0x1E0C80A78](v121);
  v382 = (uint64_t)&v347 - v124;
  v125 = MEMORY[0x1E0C80A78](v123);
  v127 = (char *)&v347 - v126;
  v128 = MEMORY[0x1E0C80A78](v125);
  v130 = (char *)&v347 - v129;
  v131 = MEMORY[0x1E0C80A78](v128);
  v133 = (char *)&v347 - v132;
  v134 = MEMORY[0x1E0C80A78](v131);
  v136 = (char *)&v347 - v135;
  v137 = MEMORY[0x1E0C80A78](v134);
  v435 = (uint64_t)&v347 - v138;
  v139 = MEMORY[0x1E0C80A78](v137);
  v141 = (char *)&v347 - v140;
  MEMORY[0x1E0C80A78](v139);
  v143 = (__int16 *)((char *)&v347 - v142);
  v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2E80);
  v145 = MEMORY[0x1E0C80A78](v144);
  v147 = (char *)&v347 - ((v146 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v145);
  v149 = (char *)&v347 - v148;
  v431 += OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v150 = v438;
  result = sub_1BE1B2144();
  if (!v150)
  {
    v355 = v147;
    v356 = v149;
    v352 = v143;
    v349 = v141;
    v350 = v136;
    v353 = v133;
    v351 = v130;
    v354 = v127;
    v438 = a2;
    v154 = (uint64_t)v433;
    v153 = (uint64_t)v434;
    v156 = v430;
    v155 = v431;
    v157 = (uint64_t)v432;
    v158 = v435;
    while (1)
    {
      if ((v152 & 1) != 0)
        return result;
      switch(result)
      {
        case 1:
          v159 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v412 + 56);
          v159(v356, 1, 1, v415);
          v160 = v398;
          sub_1BDD86DEC(v155, v398, &qword_1ED6F2DF0);
          v161 = v436;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v160, 1, v437) == 1)
          {
            sub_1BDD86E30(v160, &qword_1ED6F2DF0);
LABEL_29:
            v192 = (uint64_t)v356;
            goto LABEL_30;
          }
          v190 = (uint64_t)v352;
          sub_1BDDA2E8C(v160, (uint64_t)v352, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          sub_1BE1B2150();
          v191 = (uint64_t)v349;
          sub_1BDDA2E8C(v190, (uint64_t)v349, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          if (swift_getEnumCaseMultiPayload())
          {
            sub_1BDD9C3E0(v191, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            goto LABEL_29;
          }
          v192 = (uint64_t)v356;
          sub_1BDD86E30((uint64_t)v356, &qword_1ED6F2E80);
          v345 = v191;
          v346 = v357;
          sub_1BDDA2E8C(v345, v357, type metadata accessor for Proto_Register);
          sub_1BDDA2E8C(v346, v192, type metadata accessor for Proto_Register);
          v159((char *)v192, 0, 1, v415);
LABEL_30:
          sub_1BDD8422C(&qword_1ED6EF7B0, type metadata accessor for Proto_Register, (uint64_t)&unk_1BE1C5A54);
          v193 = v415;
          sub_1BE1B2258();
          v194 = (uint64_t)v355;
          sub_1BDDA2EF0(v192, (uint64_t)v355, &qword_1ED6F2E80);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v412 + 48))(v194, 1, v193) == 1)
          {
            sub_1BDD86E30(v194, &qword_1ED6F2E80);
            v155 = v431;
          }
          else
          {
            v246 = v194;
            v247 = v369;
            sub_1BDDA2E8C(v246, v369, type metadata accessor for Proto_Register);
            v248 = v247;
            v249 = v428;
            sub_1BDDA2E8C(v248, v428, type metadata accessor for Proto_Register);
            v250 = v437;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v161 + 56))(v249, 0, 1, v250);
            v251 = v249;
            v252 = v429;
            sub_1BDDA2EF0(v251, v429, &qword_1ED6F2DF0);
            v155 = v431;
            swift_beginAccess();
            sub_1BDDA1AF4(v252, v155, &qword_1ED6F2DF0);
            swift_endAccess();
          }
          v153 = (uint64_t)v434;
          v158 = v435;
          v154 = (uint64_t)v433;
          v143 = &jpt_1BDDA3C2C;
LABEL_4:
          result = sub_1BE1B2144();
          break;
        case 2:
          v162 = v143;
          v163 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v423 + 56);
          v163(v157, 1, 1, v421);
          v164 = v399;
          sub_1BDD86DEC(v155, v399, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v164, 1, v437) == 1)
          {
            sub_1BDD86E30(v164, &qword_1ED6F2DF0);
            v143 = v162;
            v154 = (uint64_t)v433;
          }
          else
          {
            v348 = v163;
            v195 = v433;
            v196 = v435;
            sub_1BDDA2E8C(v164, v435, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v197 = (uint64_t)v350;
            sub_1BDDA2E8C(v196, (uint64_t)v350, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              sub_1BDD86E30(v157, qword_1ED6F2EF8);
              v198 = v197;
              v199 = v359;
              sub_1BDDA2E8C(v198, v359, type metadata accessor for Proto_Set);
              sub_1BDDA2E8C(v199, v157, type metadata accessor for Proto_Set);
              v348(v157, 0, 1, v421);
            }
            else
            {
              sub_1BDD9C3E0(v197, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
            v154 = (uint64_t)v195;
            v143 = &jpt_1BDDA3C2C;
            v156 = v430;
          }
          sub_1BDD8422C(&qword_1ED6F2840, type metadata accessor for Proto_Set, (uint64_t)&unk_1BE1C5784);
          v253 = v421;
          sub_1BE1B2258();
          v172 = v155;
          v254 = v389;
          sub_1BDDA2EF0(v157, v389, qword_1ED6F2EF8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v423 + 48))(v254, 1, v253) == 1)
          {
            sub_1BDD86E30(v254, qword_1ED6F2EF8);
            v158 = v435;
            goto LABEL_67;
          }
          v255 = v254;
          v256 = v370;
          sub_1BDDA2E8C(v255, v370, type metadata accessor for Proto_Set);
          v257 = v256;
          v258 = v428;
          sub_1BDDA2E8C(v257, v428, type metadata accessor for Proto_Set);
          v259 = v157;
          v260 = v437;
          swift_storeEnumTagMultiPayload();
          v261 = v260;
          v157 = v259;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v258, 0, 1, v261);
          v262 = v258;
          v263 = v429;
          sub_1BDDA2EF0(v262, v429, &qword_1ED6F2DF0);
          v155 = v172;
          goto LABEL_94;
        case 3:
          v165 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v423 + 56);
          v166 = v421;
          v165(v416, 1, 1, v421);
          v167 = v400;
          sub_1BDD86DEC(v155, v400, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v167, 1, v437) == 1)
          {
            sub_1BDD86E30(v167, &qword_1ED6F2DF0);
          }
          else
          {
            v200 = v143;
            v201 = (uint64_t)v353;
            sub_1BDDA2E8C(v167, (uint64_t)v353, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v202 = (uint64_t)v351;
            sub_1BDDA2E8C(v201, (uint64_t)v351, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              v203 = v416;
              sub_1BDD86E30(v416, qword_1ED6F2EF8);
              v204 = v202;
              v205 = v360;
              sub_1BDDA2E8C(v204, v360, type metadata accessor for Proto_Set);
              sub_1BDDA2E8C(v205, v203, type metadata accessor for Proto_Set);
              v165(v203, 0, 1, v166);
            }
            else
            {
              sub_1BDD9C3E0(v202, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
            v158 = v435;
            v143 = v200;
            v155 = v431;
          }
          sub_1BDD8422C(&qword_1ED6F2840, type metadata accessor for Proto_Set, (uint64_t)&unk_1BE1C5784);
          v264 = v416;
          sub_1BE1B2258();
          v265 = v390;
          sub_1BDDA2EF0(v264, v390, qword_1ED6F2EF8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v423 + 48))(v265, 1, v166) == 1)
          {
            sub_1BDD86E30(v265, qword_1ED6F2EF8);
          }
          else
          {
            v266 = v265;
            v267 = v371;
            v268 = v155;
            v269 = v154;
            v270 = v158;
            sub_1BDDA2E8C(v266, v371, type metadata accessor for Proto_Set);
            v271 = v267;
            v272 = v428;
            sub_1BDDA2E8C(v271, v428, type metadata accessor for Proto_Set);
            v273 = v269;
            v155 = v268;
            v274 = v437;
            swift_storeEnumTagMultiPayload();
            v275 = v274;
            v276 = v273;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v272, 0, 1, v275);
            v277 = v272;
            v278 = v429;
            sub_1BDDA2EF0(v277, v429, &qword_1ED6F2DF0);
            swift_beginAccess();
            v158 = v270;
            v154 = v276;
            sub_1BDDA1AF4(v278, v268, &qword_1ED6F2DF0);
            swift_endAccess();
          }
          v157 = (uint64_t)v432;
          v153 = (uint64_t)v434;
          v156 = v430;
          goto LABEL_4;
        case 4:
          v168 = v158;
          v169 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v409 + 56);
          v169(v417, 1, 1, v156);
          v170 = v401;
          v171 = v436;
          sub_1BDD86DEC(v155, v401, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v170, 1, v437) == 1)
          {
            v172 = v155;
            sub_1BDD86E30(v170, &qword_1ED6F2DF0);
          }
          else
          {
            v206 = (uint64_t)v354;
            sub_1BDDA2E8C(v170, (uint64_t)v354, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v207 = v382;
            sub_1BDDA2E8C(v206, v382, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              v208 = v417;
              sub_1BDD86E30(v417, &qword_1ED6F2E50);
              v209 = v207;
              v210 = v361;
              sub_1BDDA2E8C(v209, v361, type metadata accessor for Proto_Struct);
              sub_1BDDA2E8C(v210, v208, type metadata accessor for Proto_Struct);
              v169(v208, 0, 1, v156);
            }
            else
            {
              sub_1BDD9C3E0(v207, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
            v168 = v435;
            v172 = v431;
          }
          sub_1BDD8422C(&qword_1ED6F2860, type metadata accessor for Proto_Struct, (uint64_t)&unk_1BE1C54B4);
          v279 = v417;
          sub_1BE1B2258();
          v280 = v391;
          sub_1BDDA2EF0(v279, v391, &qword_1ED6F2E50);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v409 + 48))(v280, 1, v156) != 1)
          {
            v281 = v280;
            v282 = v372;
            sub_1BDDA2E8C(v281, v372, type metadata accessor for Proto_Struct);
            v283 = v282;
            v284 = v428;
            sub_1BDDA2E8C(v283, v428, type metadata accessor for Proto_Struct);
            v285 = v437;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v171 + 56))(v284, 0, 1, v285);
            v286 = v284;
            v287 = v429;
            sub_1BDDA2EF0(v286, v429, &qword_1ED6F2DF0);
            swift_beginAccess();
            sub_1BDDA1AF4(v287, v172, &qword_1ED6F2DF0);
            swift_endAccess();
            v143 = &jpt_1BDDA3C2C;
            v155 = v172;
            v157 = (uint64_t)v432;
            v158 = v168;
            goto LABEL_92;
          }
          sub_1BDD86E30(v280, &qword_1ED6F2E50);
          v143 = &jpt_1BDDA3C2C;
          v158 = v168;
          v157 = (uint64_t)v432;
          v154 = (uint64_t)v433;
LABEL_67:
          v155 = v172;
          v153 = (uint64_t)v434;
          goto LABEL_4;
        case 5:
          v173 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v424 + 56);
          v174 = v408;
          v173(v408, 1, 1, v426);
          v175 = v402;
          sub_1BDD86DEC(v155, v402, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v175, 1, v437) == 1)
          {
            sub_1BDD86E30(v175, &qword_1ED6F2DF0);
          }
          else
          {
            v211 = v175;
            v212 = v383;
            sub_1BDDA2E8C(v211, v383, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v213 = v212;
            v214 = v377;
            sub_1BDDA2E8C(v213, v377, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 4)
            {
              v174 = v408;
              sub_1BDD86E30(v408, &qword_1ED6F2E98);
              v215 = v214;
              v216 = v362;
              sub_1BDDA2E8C(v215, v362, type metadata accessor for Proto_Sequence);
              sub_1BDDA2E8C(v216, v174, type metadata accessor for Proto_Sequence);
              v173(v174, 0, 1, v426);
              v157 = (uint64_t)v432;
            }
            else
            {
              sub_1BDD9C3E0(v214, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
              v174 = v408;
            }
          }
          sub_1BDD8422C(&qword_1ED6EF5E8, type metadata accessor for Proto_Sequence, (uint64_t)&unk_1BE1C47E4);
          v288 = v426;
          sub_1BE1B2258();
          v289 = v392;
          sub_1BDDA2EF0(v174, v392, &qword_1ED6F2E98);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v424 + 48))(v289, 1, v288) == 1)
          {
            sub_1BDD86E30(v289, &qword_1ED6F2E98);
          }
          else
          {
            v290 = v368;
            sub_1BDDA2E8C(v289, v368, type metadata accessor for Proto_Sequence);
            v291 = v290;
            v292 = v428;
            sub_1BDDA2E8C(v291, v428, type metadata accessor for Proto_Sequence);
            v293 = v437;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v292, 0, 1, v293);
            v294 = v429;
            sub_1BDDA2EF0(v292, v429, &qword_1ED6F2DF0);
            swift_beginAccess();
            sub_1BDDA1AF4(v294, v155, &qword_1ED6F2DF0);
            swift_endAccess();
          }
          v153 = (uint64_t)v434;
          v158 = v435;
          v156 = v430;
          goto LABEL_4;
        case 6:
          v176 = v153;
          v177 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v424 + 56);
          v177(v418, 1, 1, v426);
          v178 = v403;
          sub_1BDD86DEC(v155, v403, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v178, 1, v437) == 1)
          {
            v179 = v156;
            sub_1BDD86E30(v178, &qword_1ED6F2DF0);
          }
          else
          {
            v217 = v178;
            v218 = v384;
            sub_1BDDA2E8C(v217, v384, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v219 = v218;
            v220 = v378;
            sub_1BDDA2E8C(v219, v378, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            v179 = v156;
            if (swift_getEnumCaseMultiPayload() == 5)
            {
              v221 = v418;
              sub_1BDD86E30(v418, &qword_1ED6F2E98);
              v222 = v220;
              v223 = v363;
              sub_1BDDA2E8C(v222, v363, type metadata accessor for Proto_Sequence);
              sub_1BDDA2E8C(v223, v221, type metadata accessor for Proto_Sequence);
              v177(v221, 0, 1, v426);
            }
            else
            {
              sub_1BDD9C3E0(v220, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
          }
          sub_1BDD8422C(&qword_1ED6EF5E8, type metadata accessor for Proto_Sequence, (uint64_t)&unk_1BE1C47E4);
          v295 = v418;
          v296 = v426;
          sub_1BE1B2258();
          v297 = v393;
          sub_1BDDA2EF0(v295, v393, &qword_1ED6F2E98);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v424 + 48))(v297, 1, v296) == 1)
          {
            sub_1BDD86E30(v297, &qword_1ED6F2E98);
            v156 = v179;
            v154 = (uint64_t)v433;
            v143 = &jpt_1BDDA3C2C;
            v153 = v176;
            v157 = (uint64_t)v432;
            v158 = v435;
            v155 = v431;
            goto LABEL_4;
          }
          v298 = v373;
          sub_1BDDA2E8C(v297, v373, type metadata accessor for Proto_Sequence);
          v299 = v298;
          v300 = v428;
          sub_1BDDA2E8C(v299, v428, type metadata accessor for Proto_Sequence);
          v301 = v437;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v300, 0, 1, v301);
          v302 = v300;
          v303 = v429;
          sub_1BDDA2EF0(v302, v429, &qword_1ED6F2DF0);
          v304 = v431;
          swift_beginAccess();
          sub_1BDDA1AF4(v303, v304, &qword_1ED6F2DF0);
          swift_endAccess();
          v156 = v179;
          v154 = (uint64_t)v433;
          v143 = &jpt_1BDDA3C2C;
          v155 = v304;
          v153 = v176;
          v157 = (uint64_t)v432;
          goto LABEL_101;
        case 7:
          v180 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v425 + 56);
          v180(v419, 1, 1, v427);
          v181 = v404;
          sub_1BDD86DEC(v155, v404, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v181, 1, v437) == 1)
          {
            sub_1BDD86E30(v181, &qword_1ED6F2DF0);
          }
          else
          {
            sub_1BDDA2E8C(v181, v154, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v224 = v379;
            sub_1BDDA2E8C(v154, v379, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              v225 = v419;
              sub_1BDD86E30(v419, &qword_1ED6F2EE0);
              v226 = v224;
              v227 = v364;
              sub_1BDDA2E8C(v226, v364, type metadata accessor for Proto_OrderedSet);
              sub_1BDDA2E8C(v227, v225, type metadata accessor for Proto_OrderedSet);
              v180(v225, 0, 1, v427);
            }
            else
            {
              sub_1BDD9C3E0(v224, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
          }
          v143 = &jpt_1BDDA3C2C;
          sub_1BDD8422C(&qword_1ED6EF648, type metadata accessor for Proto_OrderedSet, (uint64_t)&unk_1BE1C494C);
          v305 = v419;
          v306 = v427;
          sub_1BE1B2258();
          v307 = v394;
          sub_1BDDA2EF0(v305, v394, &qword_1ED6F2EE0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v425 + 48))(v307, 1, v306) == 1)
          {
            sub_1BDD86E30(v307, &qword_1ED6F2EE0);
            v153 = (uint64_t)v434;
            v158 = v435;
            v157 = (uint64_t)v432;
            v154 = (uint64_t)v433;
            v155 = v431;
            goto LABEL_4;
          }
          v308 = v307;
          v309 = v374;
          sub_1BDDA2E8C(v308, v374, type metadata accessor for Proto_OrderedSet);
          v310 = v309;
          v311 = v428;
          sub_1BDDA2E8C(v310, v428, type metadata accessor for Proto_OrderedSet);
          v312 = v437;
          swift_storeEnumTagMultiPayload();
          v154 = (uint64_t)v433;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v311, 0, 1, v312);
          v313 = v311;
          v314 = v429;
          sub_1BDDA2EF0(v313, v429, &qword_1ED6F2DF0);
          v315 = v431;
          swift_beginAccess();
          sub_1BDDA1AF4(v314, v315, &qword_1ED6F2DF0);
          swift_endAccess();
          v155 = v315;
          v153 = (uint64_t)v434;
          goto LABEL_100;
        case 8:
          v182 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v410 + 56);
          v182(v420, 1, 1, v413);
          v183 = v405;
          sub_1BDD86DEC(v155, v405, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v183, 1, v437) == 1)
          {
            sub_1BDD86E30(v183, &qword_1ED6F2DF0);
          }
          else
          {
            v228 = v385;
            sub_1BDDA2E8C(v183, v385, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v229 = v386;
            sub_1BDDA2E8C(v228, v386, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 7)
            {
              v230 = v420;
              sub_1BDD86E30(v420, &qword_1ED6F2E68);
              v231 = v229;
              v232 = v358;
              sub_1BDDA2E8C(v231, v358, type metadata accessor for Proto_Counter);
              sub_1BDDA2E8C(v232, v230, type metadata accessor for Proto_Counter);
              v233 = v413;
              v182(v230, 0, 1, v413);
              goto LABEL_84;
            }
            sub_1BDD9C3E0(v229, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          }
          v233 = v413;
LABEL_84:
          sub_1BDD8422C(&qword_1EF530910, type metadata accessor for Proto_Counter, (uint64_t)&unk_1BE1C58EC);
          v316 = v420;
          sub_1BE1B2258();
          v317 = v396;
          sub_1BDDA2EF0(v316, v396, &qword_1ED6F2E68);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v410 + 48))(v317, 1, v233) == 1)
          {
            sub_1BDD86E30(v317, &qword_1ED6F2E68);
            v154 = (uint64_t)v433;
            v153 = (uint64_t)v434;
            v158 = v435;
            v318 = v431;
          }
          else
          {
            v319 = v317;
            v320 = v375;
            sub_1BDDA2E8C(v319, v375, type metadata accessor for Proto_Counter);
            v321 = v320;
            v322 = v428;
            sub_1BDDA2E8C(v321, v428, type metadata accessor for Proto_Counter);
            v323 = v437;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v322, 0, 1, v323);
            v324 = v429;
            sub_1BDDA2EF0(v322, v429, &qword_1ED6F2DF0);
            v325 = v431;
            swift_beginAccess();
            sub_1BDDA1AF4(v324, v325, &qword_1ED6F2DF0);
            swift_endAccess();
            v318 = v325;
            v154 = (uint64_t)v433;
            v153 = (uint64_t)v434;
            v158 = v435;
          }
          v143 = &jpt_1BDDA3C2C;
          v155 = v318;
          v156 = v430;
          v157 = (uint64_t)v432;
          goto LABEL_4;
        case 9:
          v184 = v155;
          v185 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v425 + 56);
          v185(v153, 1, 1, v427);
          v186 = v406;
          sub_1BDD86DEC(v184, v406, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v186, 1, v437) == 1)
          {
            sub_1BDD86E30(v186, &qword_1ED6F2DF0);
            v155 = v184;
          }
          else
          {
            v234 = v143;
            v235 = v387;
            sub_1BDDA2E8C(v186, v387, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v236 = v380;
            sub_1BDDA2E8C(v235, v380, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 8)
            {
              sub_1BDD86E30(v153, &qword_1ED6F2EE0);
              v237 = v236;
              v238 = v365;
              sub_1BDDA2E8C(v237, v365, type metadata accessor for Proto_OrderedSet);
              sub_1BDDA2E8C(v238, v153, type metadata accessor for Proto_OrderedSet);
              v185(v153, 0, 1, v427);
            }
            else
            {
              sub_1BDD9C3E0(v236, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
            v143 = v234;
            v156 = v430;
            v155 = v431;
            v157 = (uint64_t)v432;
          }
          sub_1BDD8422C(&qword_1ED6EF648, type metadata accessor for Proto_OrderedSet, (uint64_t)&unk_1BE1C494C);
          v326 = v427;
          sub_1BE1B2258();
          v327 = v395;
          sub_1BDDA2EF0(v153, v395, &qword_1ED6F2EE0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v425 + 48))(v327, 1, v326) == 1)
          {
            sub_1BDD86E30(v327, &qword_1ED6F2EE0);
            v158 = v435;
LABEL_92:
            v154 = (uint64_t)v433;
            v153 = (uint64_t)v434;
          }
          else
          {
            v328 = v327;
            v329 = v367;
            sub_1BDDA2E8C(v328, v367, type metadata accessor for Proto_OrderedSet);
            v330 = v329;
            v331 = v428;
            sub_1BDDA2E8C(v330, v428, type metadata accessor for Proto_OrderedSet);
            v172 = v155;
            v332 = v157;
            v333 = v437;
            swift_storeEnumTagMultiPayload();
            v334 = v333;
            v157 = v332;
            v155 = v172;
            v154 = (uint64_t)v433;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v331, 0, 1, v334);
            v335 = v331;
            v263 = v429;
            sub_1BDDA2EF0(v335, v429, &qword_1ED6F2DF0);
LABEL_94:
            swift_beginAccess();
            sub_1BDDA1AF4(v263, v172, &qword_1ED6F2DF0);
            swift_endAccess();
            v153 = (uint64_t)v434;
            v158 = v435;
          }
          goto LABEL_4;
        case 10:
          v187 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v411 + 56);
          v187(v422, 1, 1, v414);
          v188 = v407;
          sub_1BDD86DEC(v155, v407, &qword_1ED6F2DF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v436 + 48))(v188, 1, v437) == 1)
          {
            v189 = (char *)v154;
            sub_1BDD86E30(v188, &qword_1ED6F2DF0);
          }
          else
          {
            v348 = v187;
            v239 = v388;
            sub_1BDDA2E8C(v188, v388, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1BE1B2150();
            v240 = v381;
            sub_1BDDA2E8C(v239, v381, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 9)
            {
              v241 = v422;
              sub_1BDD86E30(v422, &qword_1ED6F2EC8);
              v242 = v240;
              v243 = v366;
              sub_1BDDA2E8C(v242, v366, type metadata accessor for Proto_CustomCRDT);
              sub_1BDDA2E8C(v243, v241, type metadata accessor for Proto_CustomCRDT);
              v244 = v241;
              v143 = &jpt_1BDDA3C2C;
              v245 = v414;
              v348(v244, 0, 1, v414);
              v189 = v433;
              goto LABEL_97;
            }
            v189 = (char *)v154;
            sub_1BDD9C3E0(v240, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          }
          v245 = v414;
          v143 = &jpt_1BDDA3C2C;
LABEL_97:
          sub_1BDD8422C(qword_1EF52B490, type metadata accessor for Proto_CustomCRDT, (uint64_t)&unk_1BE1C4D84);
          sub_1BE1B2258();
          v336 = v397;
          sub_1BDDA2EF0(v422, v397, &qword_1ED6F2EC8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v411 + 48))(v336, 1, v245) == 1)
          {
            sub_1BDD86E30(v336, &qword_1ED6F2EC8);
            v153 = (uint64_t)v434;
            v158 = v435;
            v157 = (uint64_t)v432;
            v154 = (uint64_t)v189;
            v156 = v430;
            v155 = v431;
          }
          else
          {
            v337 = v336;
            v338 = v376;
            sub_1BDDA2E8C(v337, v376, type metadata accessor for Proto_CustomCRDT);
            v339 = v338;
            v340 = v428;
            sub_1BDDA2E8C(v339, v428, type metadata accessor for Proto_CustomCRDT);
            v341 = v437;
            swift_storeEnumTagMultiPayload();
            v154 = (uint64_t)v189;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v436 + 56))(v340, 0, 1, v341);
            v342 = v340;
            v343 = v429;
            sub_1BDDA2EF0(v342, v429, &qword_1ED6F2DF0);
            v344 = v431;
            swift_beginAccess();
            sub_1BDDA1AF4(v343, v344, &qword_1ED6F2DF0);
            swift_endAccess();
            v156 = v430;
            v155 = v344;
            v153 = (uint64_t)v434;
LABEL_100:
            v157 = (uint64_t)v432;
LABEL_101:
            v158 = v435;
          }
          goto LABEL_4;
        default:
          goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t sub_1BDDA5A1C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA5A28()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA5A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v8);
  v37 = (uint64_t)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Proto_KeyPath(0);
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v34 = (uint64_t)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v11);
  v40 = (uint64_t)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Proto_CRDT(0);
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v35 = (uint64_t)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Proto_Version(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 16);
  v44 = a3;
  if (!v21 || (result = sub_1BE1B2348(), !v4))
  {
    swift_beginAccess();
    if (!*(_QWORD *)(a1 + 24)
      || (v23 = *(_BYTE *)(a1 + 32),
          v42 = *(_QWORD *)(a1 + 24),
          v43 = v23,
          sub_1BE148AB0(),
          result = sub_1BE1B22D0(),
          !v4))
    {
      v33[1] = a4;
      v24 = a1
          + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
      swift_beginAccess();
      sub_1BDD86DEC(v24, (uint64_t)v16, &qword_1ED6F37A8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
      {
        sub_1BDD86E30((uint64_t)v16, &qword_1ED6F37A8);
      }
      else
      {
        sub_1BDDA2E8C((uint64_t)v16, (uint64_t)v20, type metadata accessor for Proto_Version);
        sub_1BDD8422C(&qword_1ED6F27B8, type metadata accessor for Proto_Version, (uint64_t)&unk_1BE1C5D24);
        sub_1BE1B2360();
        result = sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for Proto_Version);
        if (v4)
          return result;
      }
      v25 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
      swift_beginAccess();
      v26 = v40;
      sub_1BDD86DEC(v25, v40, &qword_1ED6F3728);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v26, 1, v41) == 1)
      {
        sub_1BDD86E30(v26, &qword_1ED6F3728);
      }
      else
      {
        v27 = v26;
        v28 = v35;
        sub_1BDDA2E8C(v27, v35, type metadata accessor for Proto_CRDT);
        sub_1BDD8422C(&qword_1ED6F2E30, type metadata accessor for Proto_CRDT, (uint64_t)&unk_1BE1C6594);
        sub_1BE1B2360();
        result = sub_1BDD9C3E0(v28, type metadata accessor for Proto_CRDT);
        if (v4)
          return result;
      }
      v29 = a1
          + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
      swift_beginAccess();
      v30 = v37;
      sub_1BDD86DEC(v29, v37, &qword_1ED6F3790);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v30, 1, v38) == 1)
      {
        return sub_1BDD86E30(v30, &qword_1ED6F3790);
      }
      else
      {
        v31 = v30;
        v32 = v34;
        sub_1BDDA2E8C(v31, v34, type metadata accessor for Proto_KeyPath);
        sub_1BDD8422C(&qword_1ED6EFCD0, type metadata accessor for Proto_KeyPath, (uint64_t)&unk_1BE1C615C);
        sub_1BE1B2360();
        return sub_1BDD9C3E0(v32, type metadata accessor for Proto_KeyPath);
      }
    }
  }
  return result;
}

uint64_t sub_1BDDA5F24()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA5F30()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA5F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  MEMORY[0x1E0C80A78](v6);
  v40 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Proto_Timestamp(0);
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v38 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v37 = (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v36 - v12;
  v14 = type metadata accessor for Proto_Version(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v36 = (uint64_t)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v36 - v18;
  swift_beginAccess();
  v43 = a1;
  v20 = *(_QWORD *)(a1 + 16);
  v42 = a3;
  if (v20)
  {
    result = sub_1BE1B2348();
    v22 = v14;
    v23 = v3;
    if (v3)
      return result;
  }
  else
  {
    v22 = v14;
    v23 = v3;
  }
  v24 = v43 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v24, (uint64_t)v13, &qword_1ED6F37A8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v25(v13, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v13, &qword_1ED6F37A8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v19, type metadata accessor for Proto_Version);
    sub_1BDD8422C(&qword_1ED6F27B8, type metadata accessor for Proto_Version, (uint64_t)&unk_1BE1C5D24);
    sub_1BE1B2360();
    result = sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Version);
    if (v23)
      return result;
  }
  v26 = v43 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  v27 = v40;
  sub_1BDD86DEC(v26, v40, &qword_1ED6F3850);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v27, 1, v41) == 1)
  {
    sub_1BDD86E30(v27, &qword_1ED6F3850);
  }
  else
  {
    v28 = v27;
    v29 = v38;
    sub_1BDDA2E8C(v28, v38, type metadata accessor for Proto_Timestamp);
    sub_1BDD8422C(&qword_1ED6F2EA0, type metadata accessor for Proto_Timestamp, (uint64_t)&unk_1BE1C5FF4);
    sub_1BE1B2360();
    result = sub_1BDD9C3E0(v29, type metadata accessor for Proto_Timestamp);
    if (v23)
      return result;
  }
  v30 = v43 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v30 + 16)
    || (type metadata accessor for Proto_Set.Element(0),
        sub_1BDD8422C(&qword_1ED6EF720, type metadata accessor for Proto_Set.Element, (uint64_t)&unk_1BE1C561C),
        swift_bridgeObjectRetain(),
        sub_1BE1B2354(),
        result = swift_bridgeObjectRelease(),
        !v23))
  {
    v31 = v43 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
    swift_beginAccess();
    v32 = v37;
    sub_1BDD86DEC(v31, v37, &qword_1ED6F37A8);
    if (v25((char *)v32, 1, v22) == 1)
    {
      sub_1BDD86E30(v32, &qword_1ED6F37A8);
    }
    else
    {
      v33 = v32;
      v34 = v36;
      sub_1BDDA2E8C(v33, v36, type metadata accessor for Proto_Version);
      sub_1BDD8422C(&qword_1ED6F27B8, type metadata accessor for Proto_Version, (uint64_t)&unk_1BE1C5D24);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v34, type metadata accessor for Proto_Version);
      if (v23)
        return result;
    }
    v35 = v43 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed;
    result = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v35 + 16))
    {
      type metadata accessor for Proto_Set.Element(0);
      sub_1BDD8422C(&qword_1ED6EF720, type metadata accessor for Proto_Set.Element, (uint64_t)&unk_1BE1C561C);
      swift_bridgeObjectRetain();
      sub_1BE1B2354();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1BDDA64D0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for Proto_Timestamp(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F32B0);
}

uint64_t sub_1BDDA64F0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA64FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t type metadata accessor for FinalizedTimestamp(uint64_t a1)
{
  return sub_1BDD88618(a1, qword_1ED6F3918);
}

uint64_t sub_1BDDA6558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t type metadata accessor for Proto_KeyPath(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3780);
}

uint64_t type metadata accessor for Proto_Reference(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3298);
}

uint64_t sub_1BDDA65D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDA65F8(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for Proto_CRDT, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDDA66B4);
}

uint64_t sub_1BDDA65F8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v10;
  uint64_t result;

  a4(0);
  v10 = swift_retain();
  a5(v10, a1, a2, a3);
  result = swift_release();
  if (!v5)
    return sub_1BE1B20D8();
  return result;
}

uint64_t type metadata accessor for Proto_CRDT(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3718);
}

uint64_t type metadata accessor for Proto_Version(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3798);
}

uint64_t sub_1BDDA66B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  _QWORD v23[5];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v26 = type metadata accessor for Proto_CustomCRDT(0);
  MEMORY[0x1E0C80A78](v26);
  v27 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Proto_Counter(0);
  MEMORY[0x1E0C80A78](v24);
  v25 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Proto_OrderedSet(0);
  v7 = MEMORY[0x1E0C80A78](v30);
  v23[4] = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v23[3] = (char *)v23 - v9;
  v29 = type metadata accessor for Proto_Sequence(0);
  v10 = MEMORY[0x1E0C80A78](v29);
  v23[2] = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v23[1] = (char *)v23 - v12;
  v13 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v13);
  v28 = type metadata accessor for Proto_Set(0);
  v14 = MEMORY[0x1E0C80A78](v28);
  MEMORY[0x1E0C80A78](v14);
  v15 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1E0C80A78](v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v18, &qword_1ED6F2DF0);
  v20 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v18, 1, v20);
  if ((_DWORD)result != 1)
  {
    v22 = (char *)&loc_1BDDA69A0 + 4 * byte_1BE1C39B0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata accessor for Proto_Set(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2EE8);
}

uint64_t type metadata accessor for Proto_Struct(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2E40);
}

uint64_t type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2DE0);
}

uint64_t type metadata accessor for Proto_OrderedSet(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2ED0);
}

uint64_t type metadata accessor for Proto_CustomCRDT(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2EB8);
}

uint64_t type metadata accessor for Proto_Sequence(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2E88);
}

uint64_t type metadata accessor for Proto_Register(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2E70);
}

uint64_t type metadata accessor for Proto_Counter(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2E58);
}

uint64_t sub_1BDDA6DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t type metadata accessor for Proto_Constants(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3838);
}

uint64_t sub_1BDDA6E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1BDDA6E88(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v6 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      type metadata accessor for Proto_Register(0);
      goto LABEL_10;
    case 1:
    case 2:
      v3 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for Proto_Set(0);
      goto LABEL_10;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = *(int *)(type metadata accessor for Proto_Struct(0) + 28);
      goto LABEL_8;
    case 4:
    case 5:
      v4 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for Proto_Sequence(0);
      goto LABEL_10;
    case 6:
    case 8:
      v5 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for Proto_OrderedSet(0);
      goto LABEL_10;
    case 7:
      v10 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
      type metadata accessor for Proto_Counter(0);
LABEL_10:
      result = swift_release();
      break;
    case 9:
      swift_bridgeObjectRelease();
      v7 = *(int *)(type metadata accessor for Proto_CustomCRDT(0) + 20);
LABEL_8:
      v8 = a1 + v7;
      v9 = sub_1BE1B20F0();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BDDA7008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1BDDA705C()
{
  return sub_1BDDA7070();
}

uint64_t sub_1BDDA7070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16) || (result = sub_1BE1B22A0(), !v1))
  {
    type metadata accessor for Proto_RLE(0);
    return sub_1BE1B20D8();
  }
  return result;
}

uint64_t type metadata accessor for Proto_RLE(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F27D8);
}

uint64_t type metadata accessor for Proto_Document(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3278);
}

uint64_t sub_1BDDA712C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA7138()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDA7144@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = v4;
  v7 = v1[4];
  if (v7)
  {
    v8 = (v7 - 1) & v7;
    v9 = __clz(__rbit64(v7)) | (v4 << 6);
LABEL_3:
    v10 = *(_QWORD *)(v2 + 56);
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
    v12 = *v11;
    v13 = v11[1];
    *(_QWORD *)a1 = *v11;
    *(_QWORD *)(a1 + 8) = v13;
    v14 = v10 + 48 * v9;
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    v17 = *(_QWORD *)(v14 + 32);
    v18 = *(_QWORD *)(v14 + 40);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v14;
    *(_QWORD *)(a1 + 32) = v15;
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v18;
    sub_1BDDB6CA4(v12, v13);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_21:
    *v1 = v2;
    v1[1] = v3;
    v1[2] = v5;
    v1[3] = v6;
    v1[4] = v8;
    return result;
  }
  v20 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v21 = (unint64_t)(v5 + 64) >> 6;
    if (v20 < v21)
    {
      v22 = *(_QWORD *)(v3 + 8 * v20);
      if (v22)
      {
LABEL_7:
        v8 = (v22 - 1) & v22;
        v9 = __clz(__rbit64(v22)) + (v20 << 6);
        v6 = v20;
        goto LABEL_3;
      }
      v6 = v4 + 1;
      if (v4 + 2 < v21)
      {
        v22 = *(_QWORD *)(v3 + 8 * (v4 + 2));
        if (v22)
        {
          v20 = v4 + 2;
          goto LABEL_7;
        }
        v6 = v4 + 2;
        if (v4 + 3 < v21)
        {
          v22 = *(_QWORD *)(v3 + 8 * (v4 + 3));
          if (v22)
          {
            v20 = v4 + 3;
            goto LABEL_7;
          }
          v20 = v4 + 4;
          v6 = v4 + 3;
          if (v4 + 4 < v21)
          {
            v22 = *(_QWORD *)(v3 + 8 * v20);
            if (v22)
              goto LABEL_7;
            v6 = v21 - 1;
            v23 = v4 + 5;
            while (v21 != v23)
            {
              v22 = *(_QWORD *)(v3 + 8 * v23++);
              if (v22)
              {
                v20 = v23 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
    v8 = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Proto_Reference._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6EFD98);
}

uint64_t sub_1BDDA7300@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + *(int *)(result + 40));
  if (v4)
  {
    v5 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
    swift_beginAccess();
    return sub_1BDD9C318(v5, a2, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDDA7368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = a4;
  v59 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  MEMORY[0x1E0C80A78](v5);
  v52 = (uint64_t)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Proto_Constants(0);
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v49 = (uint64_t)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v48[2] = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v57 = (char *)v48 - v11;
  v55 = type metadata accessor for Proto_Version(0);
  v54 = *(_QWORD *)(v55 - 8);
  v12 = MEMORY[0x1E0C80A78](v55);
  v48[1] = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v50 = (uint64_t)v48 - v14;
  v56 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v56);
  v16 = (char *)v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a1;
  v26 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v26, (uint64_t)v25, &qword_1ED6F37C8);
  v27 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v25, 1, v27) != 1)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        sub_1BDDA2E8C((uint64_t)v25, (uint64_t)v19, type metadata accessor for Proto_Value);
        sub_1BDD8422C(&qword_1ED6F2730, type metadata accessor for Proto_Value, (uint64_t)&unk_1BE1C66FC);
        v35 = v61;
        sub_1BE1B2360();
        v28 = v35;
        v36 = type metadata accessor for Proto_Value;
        v37 = (uint64_t)v19;
        if (!v35)
        {
LABEL_10:
          sub_1BDD9C3E0(v37, v36);
          goto LABEL_3;
        }
      }
      else
      {
        sub_1BDDA2E8C((uint64_t)v25, (uint64_t)v16, type metadata accessor for Proto_Reference);
        sub_1BDD8422C(&qword_1ED6EFDA8, type metadata accessor for Proto_Reference, (uint64_t)&unk_1BE1C534C);
        v43 = v61;
        sub_1BE1B2360();
        v28 = v43;
        v36 = type metadata accessor for Proto_Reference;
        v37 = (uint64_t)v16;
        if (!v43)
          goto LABEL_10;
      }
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v25, (uint64_t)v22, type metadata accessor for Proto_CRDT);
      sub_1BDD8422C(&qword_1ED6F2E30, type metadata accessor for Proto_CRDT, (uint64_t)&unk_1BE1C6594);
      v42 = v61;
      sub_1BE1B2360();
      v28 = v42;
      v36 = type metadata accessor for Proto_CRDT;
      v37 = (uint64_t)v22;
      if (!v42)
        goto LABEL_10;
    }
    return sub_1BDD9C3E0(v37, v36);
  }
  v28 = v61;
LABEL_3:
  v29 = v58;
  v30 = (uint64_t)v57;
  v31 = v58 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)v31 + 16)
    || (sub_1BDD8422C(&qword_1ED6EFDA8, type metadata accessor for Proto_Reference, (uint64_t)&unk_1BE1C534C),
        swift_bridgeObjectRetain(),
        sub_1BE1B2354(),
        result = swift_bridgeObjectRelease(),
        !v28))
  {
    v33 = v29 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    sub_1BDD86DEC(v33, v30, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v30, 1, v55) == 1)
    {
      sub_1BDD86E30(v30, &qword_1ED6F37A8);
    }
    else
    {
      v38 = v30;
      v39 = v50;
      sub_1BDDA2E8C(v38, v50, type metadata accessor for Proto_Version);
      sub_1BDD8422C(&qword_1ED6F27B8, type metadata accessor for Proto_Version, (uint64_t)&unk_1BE1C5D24);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v39, type metadata accessor for Proto_Version);
      if (v28)
        return result;
    }
    v40 = v29
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
    swift_beginAccess();
    v41 = v52;
    sub_1BDD86DEC(v40, v52, &qword_1ED6F3290);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v41, 1, v53) == 1)
    {
      sub_1BDD86E30(v41, &qword_1ED6F3290);
    }
    else
    {
      v44 = v41;
      v45 = v49;
      sub_1BDDA2E8C(v44, v49, type metadata accessor for Proto_Constants);
      sub_1BDD8422C(&qword_1ED6F3830, type metadata accessor for Proto_Constants, (uint64_t)&unk_1BE1C62C4);
      sub_1BE1B2360();
      result = sub_1BDD9C3E0(v45, type metadata accessor for Proto_Constants);
      if (v28)
        return result;
    }
    v46 = v29 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets;
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)v46 + 16)
      || (type metadata accessor for Proto_Asset(0),
          sub_1BDD8422C(&qword_1EF52B378, type metadata accessor for Proto_Asset, (uint64_t)&unk_1BE1C5BBC),
          swift_bridgeObjectRetain(),
          sub_1BE1B2354(),
          result = swift_bridgeObjectRelease(),
          !v28))
    {
      v47 = v29
          + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid;
      swift_beginAccess();
      __asm { BR              X10 }
    }
  }
  return result;
}

uint64_t type metadata accessor for Proto_Document.OneOf_Root(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F37B8);
}

uint64_t sub_1BDDA7D18(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v4 = sub_1BE1B20F0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    type metadata accessor for Proto_Reference(0);
  }
  else if ((_DWORD)result == 1)
  {
    v5 = sub_1BE1B20F0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    type metadata accessor for Proto_Value(0);
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v3 = sub_1BE1B20F0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    type metadata accessor for Proto_CRDT(0);
  }
  return swift_release();
}

uint64_t sub_1BDDA7DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDA7E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v7 = v5;
  v40 = a2;
  v41 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v39);
  v43 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Proto_CRDT(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v42 = (uint64_t)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v37 - v19;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  if ((result & 1) == 0)
    return result;
  v38 = v16;
  MEMORY[0x1E0C80A78](result);
  *(&v37 - 4) = a4;
  *(&v37 - 3) = a5;
  *(&v37 - 2) = a1;
  *(&v37 - 1) = v7;
  result = sub_1BDDA82F8((void (*)(uint64_t))sub_1BDDA8464, (uint64_t)v20);
  if (v6)
    return result;
  v22 = *(_QWORD *)(v7 + 16);
  v23 = sub_1BDDA84A8(v40, v41);
  v24 = v22 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  v25 = *(_QWORD *)(v24 + *(int *)(v15 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v25, (uint64_t)v13, &qword_1ED6F2DF0);
  v26 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v13, 1, v26) == 1)
  {
    sub_1BDD86E30((uint64_t)v13, &qword_1ED6F2DF0);
LABEL_8:
    v29 = MEMORY[0x1E0DEE9D8];
    v28 = v43;
    *v43 = MEMORY[0x1E0DEE9D8];
    v28[1] = v29;
    v28[2] = v29;
    sub_1BE1B20E4();
    goto LABEL_9;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  v27 = (uint64_t)v13;
  v28 = v43;
  sub_1BDDA2E8C(v27, (uint64_t)v43, type metadata accessor for Proto_Struct);
LABEL_9:
  v30 = (_QWORD *)*v28;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v30 = sub_1BDDAEBFC(0, v30[2] + 1, 1, v30);
  v32 = v30[2];
  v31 = v30[3];
  if (v32 >= v31 >> 1)
    v30 = sub_1BDDAEBFC((_QWORD *)(v31 > 1), v32 + 1, 1, v30);
  v30[2] = v32 + 1;
  v30[v32 + 4] = v23;
  *v28 = v30;
  v33 = v42;
  sub_1BDD9C318((uint64_t)v20, v42, type metadata accessor for Proto_CRDT);
  v34 = v28[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v34 = sub_1BDDA82E4(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
  v36 = *(_QWORD *)(v34 + 16);
  v35 = *(_QWORD *)(v34 + 24);
  if (v36 >= v35 >> 1)
    v34 = sub_1BDDA82E4(v35 > 1, v36 + 1, 1, v34);
  *(_QWORD *)(v34 + 16) = v36 + 1;
  sub_1BDDA2E8C(v33, v34+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v36, type metadata accessor for Proto_CRDT);
  v28[1] = v34;
  sub_1BDDBE3B0((uint64_t)v28);
  swift_endAccess();
  return sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDDA81F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t *sub_1BDDA8258(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  sub_1BDDB6CA4(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_1BE1B20F0();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t sub_1BDDA82E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6F2890, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDDA82F8@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v2;
  v8 = *(_QWORD *)(v2 + 80);
  v7 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  swift_retain();
  v9 = swift_release();
  a1(v9);
  if (v3)
  {
LABEL_8:
    swift_release();
    return swift_release();
  }
  if (!*(_QWORD *)(v2 + 80) && !*(_QWORD *)(v2 + 88))
  {
    sub_1BE1B20E4();
    v12 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(a2 + v12) = qword_1ED6F2E08;
    swift_retain();
    goto LABEL_8;
  }
  v10 = sub_1BDDA8D6C();
  *(_QWORD *)(v4 + 80) = v8;
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 + 88) = v7;
  swift_release();
  swift_release();
  v11 = v10 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  sub_1BDD9C318(v11, a2, type metadata accessor for Proto_CRDT);
  return swift_release();
}

uint64_t sub_1BDDA8464()
{
  return sub_1BDDA8478();
}

uint64_t sub_1BDDA8478()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[3] + 16))(*(_QWORD *)(v0[5] + 24), v0[2]);
}

uint64_t sub_1BDDA84A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v3 = v2;
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 56);
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = sub_1BDDB271C(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v9 & 0x8000000000000000) == 0)
        return v9;
      sub_1BE1B31F4();
      __break(1u);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v10 = (_QWORD *)(v3 + 40);
  swift_beginAccess();
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 16);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = 0x8000000000000000;
  sub_1BDDA86D4(v9, a1, a2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 56) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_beginAccess();
  v12 = *(_QWORD **)(v3 + 40);
  swift_bridgeObjectRetain();
  v13 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 40) = v12;
  if ((v13 & 1) == 0)
  {
    v12 = sub_1BDDA8B2C(0, v12[2] + 1, 1, v12);
    *v10 = v12;
  }
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    v12 = sub_1BDDA8B2C((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
    *v10 = v12;
  }
  v12[2] = v15 + 1;
  v16 = &v12[2 * v15];
  v16[4] = a1;
  v16[5] = a2;
  swift_endAccess();
  return v9;
}

uint64_t sub_1BDDA86D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1BDDB271C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1BDE63DB0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1BDDA8824(result, a4 & 1);
  result = sub_1BDDB271C(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDDA8824(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2888);
  v37 = a2;
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_1BE1B36F8();
    sub_1BE1B2834();
    result = sub_1BE1B371C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

_QWORD *sub_1BDDA8B2C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2898);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDDC5EC0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_1BDDA8C38()
{
  CRDictionary_v1.encode(to:)();
}

uint64_t sub_1BDDA8C4C()
{
  return 1;
}

void CRDictionary_v1.encode(to:)()
{
  swift_retain();
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDDA8CA0()
{
  CRDictionary.encode(to:)();
  return swift_release();
}

uint64_t CRDictionary.encode(to:)()
{
  uint64_t v0;
  uint64_t result;

  result = sub_1BDDA8D6C();
  if (!v0)
  {
    swift_retain();
    sub_1BDDA8EA4();
  }
  return result;
}

uint64_t sub_1BDDA8D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 80))
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v1 = 0xD00000000000003DLL;
    *(_QWORD *)(v1 + 8) = 0x80000001BE1CD9D0;
    *(_BYTE *)(v1 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    result = *(_QWORD *)(v0 + 88);
    if (!result)
    {
      type metadata accessor for CREncoder.CRDTContainer(0);
      v3 = swift_allocObject();
      v4 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
      swift_retain();
      sub_1BE1B20E4();
      v5 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
      if (qword_1ED6F2E18 != -1)
      {
        v6 = v5;
        swift_once();
        v5 = v6;
      }
      *(_QWORD *)(v4 + v5) = qword_1ED6F2E08;
      *(_QWORD *)(v3 + 16) = v0;
      *(_QWORD *)(v0 + 88) = v3;
      swift_retain();
      swift_release();
      result = *(_QWORD *)(v0 + 88);
      if (!result)
        __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for CREncoder.CRDTContainer(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2870);
}

void sub_1BDDA8EA4()
{
  uint64_t v0;

  v0 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDDA8F40(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 - 136);
  result = sub_1BDDA8FC0(v3, a1, v2);
  if (!v5)
  {
    v7 = v1 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000(v2, v7, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BDDA8FC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17[2];

  v8 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  sub_1BE1B20E4();
  v12 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1ED6F2E18 != -1)
    swift_once();
  *(_QWORD *)(a3 + v12) = qword_1ED6F2E08;
  v17[1] = v11;
  swift_retain();
  v13 = sub_1BDDA9128();
  v17[0] = 0;
  v14 = sub_1BE1B2A5C();
  v15 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v14);
  sub_1BDDACCA4(v13, a1, v17, a2, v14, v15, (uint64_t)v10);
  if (v4)
  {
    sub_1BDD9C3E0(a3, type metadata accessor for Proto_CRDT);
    return swift_release();
  }
  else
  {
    swift_release();
    return sub_1BDDAF0AC((uint64_t)v10);
  }
}

uint64_t sub_1BDDA9128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  v2 = sub_1BDDAB368(0, &v7);
  v3 = v7;
  v4 = v8;
  if (*(_QWORD *)(v8 + 16) || *(_QWORD *)(v7 + 16))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 288))(v2);
    v1 = v5;
    if (qword_1ED6F4510 != -1)
      v5 = swift_once();
    MEMORY[0x1E0C80A78](v5);
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    sub_1BE0D27B0(v7, v8, v9, 1);
    swift_bridgeObjectRelease();
    v7 = v3;
    v8 = v4;
    swift_retain();
    sub_1BDDAAAEC((uint64_t)&v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1BDDA92A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, _QWORD *a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *TupleTypeMetadata2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;

  v81 = a8;
  v85 = a7;
  v84 = a6;
  v80 = a5;
  v93 = a4;
  v94 = (void (*)(uint64_t))a3;
  v78 = a9;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  MEMORY[0x1E0C80A78](v13);
  v83 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for Proto_Timestamp(0);
  v82 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89);
  v16 = (unint64_t *)((char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for FinalizedTimestamp(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v77 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v86 = (char *)&v75 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Proto_Version(0);
  v90 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91);
  v87 = (uint64_t *)((char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1BE1B1F58();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = (uint64_t *)*(int *)(type metadata accessor for Proto_Set(0) + 20);
  v32 = *(uint64_t *)((char *)v92 + a1);
  swift_beginAccess();
  v95 = a2;
  v33 = *(_QWORD *)(a2 + 24);
  v34 = *(_QWORD *)(v33 + 16);
  if (v34 && (v35 = *(_QWORD *)(v32 + 16), v35 < v34))
  {
    v76 = v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v31, v33+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v35, v28);
    type metadata accessor for ReplicaState();
    v36 = swift_allocObject();
    v79 = a1;
    v37 = v36 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
    v38 = type metadata accessor for Replica();
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
    v39(v37, 1, 1, v38);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v36 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v31, v28);
    *(_QWORD *)(v36 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
    *(_QWORD *)(v36 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
    v39((uint64_t)v27, 1, 1, v38);
    swift_beginAccess();
    v40 = v79;
    sub_1BDDA1AF4((uint64_t)v27, v37, &qword_1ED6F43C0);
    swift_endAccess();
    v41 = *(uint64_t *)((char *)v92 + v40)
        + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    sub_1BDD86DEC(v41, (uint64_t)v23, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v23, 1, v91) == 1)
    {
      v42 = MEMORY[0x1E0DEE9D8];
      v43 = v87;
      *v87 = MEMORY[0x1E0DEE9D8];
      v43[1] = v42;
      sub_1BE1B20E4();
      sub_1BDD86E30((uint64_t)v23, &qword_1ED6F37A8);
    }
    else
    {
      v43 = v87;
      sub_1BDDA2E8C((uint64_t)v23, (uint64_t)v87, type metadata accessor for Proto_Version);
    }
    v46 = v95;
    v47 = v89;
    v48 = v88;
    swift_retain();
    sub_1BDDA9DA0(v43, v46, &v96);
    if (!v48)
    {
      v91 = *((_QWORD *)&v96 + 1);
      v49 = v96;
      v50 = *(uint64_t *)((char *)v92 + v40)
          + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      v51 = v83;
      sub_1BDD86DEC(v50, v83, &qword_1ED6F3850);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v51, 1, v47) == 1)
      {
        v52 = v76;
        *v76 = 0;
        v52[1] = 0;
        sub_1BE1B20E4();
        sub_1BDD86E30(v51, &qword_1ED6F3850);
      }
      else
      {
        v52 = v76;
        sub_1BDDA2E8C(v51, (uint64_t)v76, type metadata accessor for Proto_Timestamp);
      }
      v53 = (uint64_t)v86;
      v54 = v85;
      v55 = v84;
      swift_retain();
      sub_1BDDAA440(v52, v46, v53);
      v89 = v49;
      v90 = v36;
      v57 = (_QWORD *)(*(uint64_t *)((char *)v92 + v40)
                     + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
      swift_beginAccess();
      v92 = &v75;
      *(_QWORD *)&v96 = *v57;
      MEMORY[0x1E0C80A78](v96);
      v88 = &v75 - 10;
      *(&v75 - 8) = v80;
      *(&v75 - 7) = v55;
      v58 = v81;
      *(&v75 - 6) = v54;
      *(&v75 - 5) = v58;
      *(&v75 - 4) = (uint64_t)a10;
      *(&v75 - 3) = (uint64_t)a11;
      v87 = a11;
      *(&v75 - 2) = v46;
      swift_bridgeObjectRetain();
      v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EE998);
      v60 = v55;
      v61 = v59;
      type metadata accessor for CRDictionaryElement(255, v60, (uint64_t)a10, v62);
      TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
      v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
      v65 = sub_1BDDA9D60((unint64_t *)&qword_1ED6EE9A0, &qword_1ED6EE998, MEMORY[0x1E0DEAF50]);
      v66 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF2E2E4, (uint64_t)v88, v61, TupleTypeMetadata2, v64, v65, MEMORY[0x1E0DEDB38], (uint64_t)&v101);
      v67 = swift_bridgeObjectRelease();
      v68 = v94;
      if (v94)
      {
        swift_retain();
        v68(v66);
        v67 = sub_1BDE0D5B8((uint64_t)v68);
      }
      v92 = &v75;
      *(_QWORD *)&v96 = v66;
      MEMORY[0x1E0C80A78](v67);
      v69 = v80;
      v70 = v84;
      *(&v75 - 6) = v80;
      *(&v75 - 5) = v70;
      v71 = v85;
      v72 = v81;
      *(&v75 - 4) = v85;
      *(&v75 - 3) = v72;
      v88 = a10;
      *(&v75 - 2) = (uint64_t)a10;
      v73 = v87;
      *(&v75 - 1) = (uint64_t)v87;
      v74 = sub_1BE1B2A5C();
      MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v74);
      sub_1BE1B2690();
      *(_QWORD *)&v96 = v69;
      *((_QWORD *)&v96 + 1) = v70;
      v97 = v71;
      v98 = v72;
      v99 = v88;
      v100 = v73;
      type metadata accessor for CRDictionaryRef();
    }
    swift_release();
    sub_1BDE0D5B8((uint64_t)v94);
    swift_release();
    v45 = v40;
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v44 = xmmword_1BE1BB990;
    *(_BYTE *)(v44 + 16) = 0;
    swift_willThrow();
    sub_1BDE0D5B8((uint64_t)v94);
    swift_release();
    v45 = a1;
  }
  return sub_1BDD9C3E0(v45, type metadata accessor for Proto_Set);
}

void sub_1BDDA9C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v1 - 272);
  *(_QWORD *)(v1 - 232) = *(_QWORD *)(v1 - 288);
  *(_QWORD *)(v1 - 224) = v2;
  v3 = *(_QWORD *)(v1 - 368);
  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  v4 = *(_QWORD *)(v1 - 72);
  v5 = *(_QWORD *)(v1 - 312);
  v6 = *(_QWORD *)(v1 - 384);
  sub_1BDD9C318(v5, v6, type metadata accessor for FinalizedTimestamp);
  v7 = sub_1BDDACB54(*(_QWORD *)(v1 - 280), (__int128 *)(v1 - 232), v0, v4, v6);
  sub_1BDE0D5B8(*(_QWORD *)(v1 - 248));
  swift_release();
  sub_1BDD9C3E0(v3, type metadata accessor for Proto_Set);
  sub_1BDD9C3E0(v5, type metadata accessor for FinalizedTimestamp);
  **(_QWORD **)(v1 - 376) = v7;
  JUMPOUT(0x1BDDA98B8);
}

uint64_t sub_1BDDA9D60(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3B7DF54](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BDDA9DA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  int isUniquelyReferenced_nonNull_native;
  void (*v48)(char *, uint64_t, uint64_t);
  _QWORD *v49;
  int v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  _QWORD v66[2];
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  _QWORD *v80;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v73 = (char *)v66 - v11;
  v72 = type metadata accessor for Replica();
  v68 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v78 = (uint64_t)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BE1B206C();
  v77 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v71 = (char *)v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v66 - v16;
  *(_QWORD *)&v79 = MEMORY[0x1E0DEE9E0];
  *((_QWORD *)&v79 + 1) = MEMORY[0x1E0DEE9E0];
  v76 = a1;
  v18 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2850);
  sub_1BE1B25D0();
  v70 = *(_QWORD *)(v18 + 16);
  if (v70)
  {
    v66[1] = v3;
    v67 = v10;
    v66[0] = a3;
    v74 = v18 + 32;
    v75 = a2;
    swift_bridgeObjectRetain();
    v19 = 0;
    v20 = v77;
    v69 = v18;
    while (v19 < *(_QWORD *)(v18 + 16))
    {
      v24 = *(_QWORD *)(v74 + 8 * v19);
      sub_1BE1B2060();
      v25 = v76[1];
      if (v19 >= *(_QWORD *)(v25 + 16))
        goto LABEL_48;
      v26 = type metadata accessor for Proto_RLE(0);
      v27 = *(_QWORD *)(v25
                      + ((*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80))
                      + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v19);
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        swift_bridgeObjectRetain();
        v29 = 0;
        v30 = 0;
        while (1)
        {
          v31 = *(_QWORD *)(v27 + 16);
          if (v30 >= v31)
            break;
          v32 = *(_QWORD *)(v27 + 8 * v30 + 32);
          v33 = v29 + v32;
          if (__OFADD__(v29, v32))
            goto LABEL_43;
          v34 = v30 + 1;
          if (v30 + 1 >= v31)
            goto LABEL_44;
          v35 = *(_QWORD *)(v27 + 8 * v30 + 40);
          v29 = v33 + v35;
          if (__OFADD__(v33, v35))
            goto LABEL_45;
          if (v29 < v33)
            goto LABEL_46;
          sub_1BE1B1FDC();
          v30 = v34 + 1;
          if (v34 + 1 >= v28)
          {
            swift_bridgeObjectRelease();
            v20 = v77;
            goto LABEL_17;
          }
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        break;
      }
LABEL_17:
      v36 = *(_QWORD *)(v75 + 24);
      v37 = *(_QWORD *)(v36 + 16);
      if (v37)
        v38 = v24 >= v37;
      else
        v38 = 1;
      if (v38)
      {
        sub_1BDDFCAFC();
        swift_allocError();
        *(_OWORD *)v64 = xmmword_1BE1BB990;
        *(_BYTE *)(v64 + 16) = 0;
        swift_willThrow();
        swift_release();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_1BDD9C3E0((uint64_t)v76, type metadata accessor for Proto_Version);
      }
      v39 = sub_1BE1B1F58();
      v40 = v78;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v78, v36+ ((*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v39 - 8) + 72) * v24, v39);
      v41 = (uint64_t)v73;
      *(_QWORD *)(v40 + *(int *)(v72 + 20)) = 0;
      (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v41, v17, v13);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
      v42(v41, 0, 1, v13);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v41, 1, v13) == 1)
      {
        sub_1BDD86E30(v41, &qword_1ED6F3C78);
        v43 = v79;
        swift_bridgeObjectRetain();
        v44 = sub_1BDDB3EC0(v40);
        v46 = v45;
        swift_bridgeObjectRelease();
        if ((v46 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v80 = (_QWORD *)v43;
          *(_QWORD *)&v79 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_1BDDB4348();
            v43 = (uint64_t)v80;
          }
          sub_1BDD9C3E0(*(_QWORD *)(v43 + 48) + *(_QWORD *)(v68 + 72) * v44, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v22 = (uint64_t)v67;
          (*(void (**)(char *, unint64_t, uint64_t))(v77 + 32))(v67, *(_QWORD *)(v43 + 56) + *(_QWORD *)(v77 + 72) * v44, v13);
          sub_1BDDB4BD4(v44, v43);
          *(_QWORD *)&v79 = v43;
          swift_bridgeObjectRelease();
          v21 = 0;
          v23 = v78;
        }
        else
        {
          v21 = 1;
          v22 = (uint64_t)v67;
          v23 = v78;
        }
        v42(v22, v21, 1, v13);
        sub_1BDD9C3E0(v23, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD86E30(v22, &qword_1ED6F3C78);
        v20 = v77;
      }
      else
      {
        v48 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
        v48(v71, v41, v13);
        v49 = (_QWORD *)v79;
        v50 = swift_isUniquelyReferenced_nonNull_native();
        v80 = v49;
        *(_QWORD *)&v79 = 0x8000000000000000;
        v52 = sub_1BDDB3EC0(v40);
        v53 = v49[2];
        v54 = (v51 & 1) == 0;
        v55 = v53 + v54;
        if (__OFADD__(v53, v54))
          goto LABEL_49;
        v56 = v51;
        if (v49[3] >= v55)
        {
          if ((v50 & 1) == 0)
            sub_1BDDB4348();
          v57 = v78;
        }
        else
        {
          sub_1BDDB46CC(v55, v50);
          v57 = v78;
          v58 = sub_1BDDB3EC0(v78);
          if ((v56 & 1) != (v59 & 1))
            goto LABEL_51;
          v52 = v58;
        }
        v60 = v80;
        if ((v56 & 1) != 0)
        {
          v20 = v77;
          (*(void (**)(unint64_t, char *, uint64_t))(v77 + 40))(v80[7] + *(_QWORD *)(v77 + 72) * v52, v71, v13);
        }
        else
        {
          v80[(v52 >> 6) + 8] |= 1 << v52;
          sub_1BDD9C318(v57, v60[6] + *(_QWORD *)(v68 + 72) * v52, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
          v20 = v77;
          v48((char *)(v60[7] + *(_QWORD *)(v77 + 72) * v52), (uint64_t)v71, v13);
          v61 = v60[2];
          v62 = __OFADD__(v61, 1);
          v63 = v61 + 1;
          if (v62)
            goto LABEL_50;
          v60[2] = v63;
        }
        *(_QWORD *)&v79 = v80;
        swift_bridgeObjectRelease();
        sub_1BDD9C3E0(v57, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      }
      v18 = v69;
      ++v19;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v13);
      if (v19 == v70)
      {
        swift_bridgeObjectRelease();
        swift_release();
        a3 = (_OWORD *)v66[0];
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    result = sub_1BE1B3680();
    __break(1u);
  }
  else
  {
    swift_release();
LABEL_41:
    result = sub_1BDD9C3E0((uint64_t)v76, type metadata accessor for Proto_Version);
    *a3 = v79;
  }
  return result;
}

uint64_t sub_1BDDAA440@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
    v13 = v10 >= v12;
  else
    v13 = 1;
  if (v13)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v14 = xmmword_1BE1BB990;
    *(_BYTE *)(v14 + 16) = 0;
    swift_willThrow();
    swift_release();
    return sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Timestamp);
  }
  else
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v10, v6);
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
    v15 = a1[1];
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Timestamp);
    result = type metadata accessor for FinalizedTimestamp(0);
    *(_QWORD *)(a3 + *(int *)(result + 20)) = v15;
  }
  return result;
}

_QWORD *sub_1BDDAA594()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _QWORD v13[3];
  __int128 v14;
  _QWORD v15[4];

  v1 = v0;
  v2 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BDDAB368(0, v15);
  v13[0] = v15[0];
  v13[1] = v15[1];
  sub_1BDDAC830((uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v5 = qword_1ED6F3700;
  swift_retain();
  if (v5 != -1)
    swift_once();
  type metadata accessor for ReplicaState();
  sub_1BE1B2E40();
  swift_release();
  v6 = v15[0];
  swift_beginAccess();
  v7 = v1[4];
  *(_QWORD *)&v14 = v1[3];
  *((_QWORD *)&v14 + 1) = v7;
  swift_beginAccess();
  v8 = v1[5];
  v9 = v1[6];
  v10 = (uint64_t)v1 + qword_1ED6F8B38;
  swift_beginAccess();
  sub_1BDD9C318(v10, (uint64_t)v4, type metadata accessor for FinalizedTimestamp);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1BDDAAB08(v6, &v14, v8, v9, (uint64_t)v4);
}

uint64_t sub_1BDDAA798()
{
  sub_1BDDAA7B8();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDAA7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1BDDAA81C();
  sub_1BDD9C3E0(v0 + qword_1ED6F8B38, type metadata accessor for FinalizedTimestamp);
  v1 = v0 + qword_1ED6F8B40;
  v2 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1BDDAA81C()
{
  uint64_t v0;
  _QWORD v2[2];
  _QWORD v3[2];

  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BDDAB368(0, v3);
  v2[0] = v3[0];
  v2[1] = v3[1];
  sub_1BDDAAAEC((uint64_t)v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1BDDAA8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v8 = sub_1BE1B248C();
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B24BC();
  v12 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v16 + 16))
  {
    v19[1] = *(_QWORD *)(v4 + 40);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = v4;
    aBlock[4] = a3;
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDDBE6A4;
    aBlock[3] = a4;
    v18 = _Block_copy(aBlock);
    swift_bridgeObjectRetain_n();
    swift_retain();
    sub_1BE1B24A4();
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v15, v10, v18);
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDDAAAEC(uint64_t a1)
{
  return sub_1BDDAA8E8(a1, (uint64_t)&unk_1E775F1F8, (uint64_t)sub_1BDDD1170, (uint64_t)&block_descriptor_2);
}

_QWORD *sub_1BDDAAB08(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  __int128 v13;

  swift_retain();
  sub_1BE1B1F4C();
  sub_1BDD9C318(a5, v5 + qword_1ED6F8B38, type metadata accessor for FinalizedTimestamp);
  swift_release();
  v13 = *a2;
  v11 = sub_1BDDAABC8(a1, &v13, a3, a4);
  sub_1BDD9C3E0(a5, type metadata accessor for FinalizedTimestamp);
  return v11;
}

_QWORD *sub_1BDDAABC8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9E0];
  v4[3] = MEMORY[0x1E0DEE9E0];
  v4[4] = v9;
  v4[5] = sub_1BE1B257C();
  v4[6] = 0;
  v4[2] = a1;
  swift_beginAccess();
  *(_OWORD *)(v4 + 3) = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v4[5] = a3;
  swift_bridgeObjectRelease();
  v4[6] = a4;
  return v4;
}

uint64_t sub_1BDDAAC9C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v2 = v1;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v4 = MEMORY[0x1E0C80A78](v62);
  v63 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v65 = (char *)&v58 - v6;
  v7 = sub_1BE1B1F58();
  v66 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v64 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v67 = (char *)&v58 - v10;
  sub_1BDDAB368(1, &v74);
  v11 = v75;
  v12 = v1[6];
  v13 = a1[6];
  v68 = v75;
  v69 = v1;
  v61 = v74;
  if (v12 == v13)
  {
    v60 = 0;
    swift_retain();
  }
  else
  {
    v70 = a1;
    if (qword_1ED6F4510 != -1)
      swift_once();
    swift_retain();
    sub_1BE1B2E40();
    v60 = 0;
    swift_release();
    v14 = v74;
    v15 = v75;
    v16 = v76;
    a1 = sub_1BE0CF4FC(v74, v75, v76);
    v17 = v15;
    v2 = v69;
    sub_1BE0D27B0(v14, v17, v16, 1);
    swift_bridgeObjectRelease();
    v11 = v68;
  }
  v18 = v2[2] + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  v20 = v66;
  v19 = v67;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v21(v67, v18, v7);
  v70 = a1;
  v22 = a1[2] + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  v23 = v64;
  v59 = v21;
  v21(v64, v22, v7);
  sub_1BDDB2BB0();
  LOBYTE(v22) = sub_1BE1B2798();
  v24 = *(void (**)(char *, uint64_t))(v20 + 8);
  v24(v23, v7);
  v24(v19, v7);
  v25 = v11;
  if ((v22 & 1) != 0)
    goto LABEL_13;
  result = swift_beginAccess();
  v27 = *(_QWORD *)(v2[3] + 16);
  v28 = *(_QWORD *)(v2[4] + 16);
  v29 = v27 + v28;
  if (__OFADD__(v27, v28))
  {
    __break(1u);
    goto LABEL_19;
  }
  v30 = v70;
  result = swift_beginAccess();
  v31 = *(_QWORD *)(v30[3] + 16);
  v32 = *(_QWORD *)(v30[4] + 16);
  v33 = __OFADD__(v31, v32);
  v34 = v31 + v32;
  if (v33)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v25 = v11;
  v35 = v69;
  if (v29 < v34)
    goto LABEL_10;
  if (v29 == v34)
  {
    v45 = v69[2] + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
    swift_beginAccess();
    v46 = v67;
    v47 = v59;
    v59(v67, v45, v7);
    v48 = v70[2] + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
    swift_beginAccess();
    v49 = v64;
    v47(v64, v48, v7);
    LOBYTE(v48) = sub_1BDDB2BF8();
    v24(v49, v7);
    v24(v46, v7);
    if ((v48 & 1) != 0)
    {
LABEL_10:
      v36 = v35[2];
      v37 = v70[2] + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
      swift_beginAccess();
      v38 = v67;
      v59(v67, v37, v7);
      v39 = v36 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
      swift_beginAccess();
      v40 = *(void (**)(uint64_t, char *, uint64_t))(v66 + 40);
      swift_retain();
      v40(v39, v38, v7);
      swift_endAccess();
      swift_release();
      v41 = v69[2];
      v42 = type metadata accessor for Replica();
      v43 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v65, 1, 1, v42);
      v44 = v41 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v43, v44, &qword_1ED6F43C0);
      swift_endAccess();
      swift_release();
    }
  }
LABEL_13:
  v50 = v70;
  swift_beginAccess();
  v51 = v50[5];
  swift_beginAccess();
  v52 = v50[4];
  v72 = v50[3];
  v73 = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDAB6AC(v51, &v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDDAB368(1, &v72);
  v53 = v72;
  v54 = v73;
  if (qword_1ED6F4510 != -1)
    swift_once();
  v72 = v61;
  v73 = v25;
  v71[0] = v53;
  v71[1] = v54;
  v55 = qword_1ED6F3700;
  swift_retain();
  swift_retain();
  v69 = (_QWORD *)v53;
  v67 = (char *)v54;
  if (v55 != -1)
    swift_once();
  v56 = (uint64_t)v65;
  sub_1BE1B2E40();
  swift_release();
  swift_retain();
  v57 = (uint64_t)v63;
  sub_1BE1B2E40();
  swift_release();
  sub_1BDDAC84C(&v72, v71, v56, v57);
  swift_release();
  swift_release();
  sub_1BDD86E30(v57, &qword_1ED6F43C0);
  sub_1BDD86E30(v56, &qword_1ED6F43C0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDAB368@<X0>(char a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v9 = qword_1ED6F3700;
    swift_retain();
    if (v9 != -1)
      swift_once();
    sub_1BE1B2E40();
    swift_release();
  }
  else
  {
    v10 = type metadata accessor for Replica();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  }
  swift_beginAccess();
  v11 = *(_QWORD *)(v3 + 32);
  swift_bridgeObjectRetain();
  result = sub_1BDD86E30((uint64_t)v8, &qword_1ED6F43C0);
  *a2 = MEMORY[0x1E0DEE9E0];
  a2[1] = v11;
  return result;
}

_QWORD *sub_1BDDAB4B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0DEE9E0];
  v0[3] = MEMORY[0x1E0DEE9E0];
  v0[4] = v8;
  v0[5] = sub_1BE1B257C();
  v0[6] = 0;
  sub_1BE1B1F4C();
  type metadata accessor for ReplicaState();
  v9 = swift_allocObject();
  v10 = v9 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v11 = type metadata accessor for Replica();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v7, v4);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v12((uint64_t)v3, 1, 1, v11);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v3, v10, &qword_1ED6F43C0);
  swift_endAccess();
  v0[2] = v9;
  return v0;
}

uint64_t sub_1BDDAB664()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for ReplicaState()
{
  uint64_t result;

  result = qword_1ED6F43A8;
  if (!qword_1ED6F43A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BDDAB6AC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t result;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)();
  void (*v45)(_QWORD *, _QWORD);
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t *v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  char *v58;
  uint64_t (*v59)();
  void (*v60)(_QWORD *, _QWORD);
  uint64_t v61;
  void (*v62)(__int128 *, _QWORD);
  void (*v63)(char *, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(_QWORD *__return_ptr, uint64_t, unint64_t);
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t (*v94)(_QWORD *, uint64_t, unint64_t);
  char *v95;
  void (*v96)(_QWORD *, _QWORD);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  _QWORD *v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[2];
  __int128 v136;
  _QWORD v137[2];
  char v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  unint64_t v143;
  _QWORD v144[5];

  v131 = a1;
  v4 = (_QWORD *)*v2;
  v5 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v5);
  v102 = (uint64_t)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v4[11];
  v121 = sub_1BE1B2EE8();
  v120 = *(_QWORD *)(v121 - 8);
  v8 = MEMORY[0x1E0C80A78](v121);
  v105 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v106 = (char *)&v101 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v130 = (char *)&v101 - v13;
  v14 = *(_QWORD *)(v7 - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v116 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v118 = (char *)&v101 - v18;
  v19 = v4[10];
  v134 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v104 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v108 = (char *)&v101 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v117 = (char *)&v101 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v124 = (char *)&v101 - v27;
  MEMORY[0x1E0C80A78](v26);
  v109 = (char *)&v101 - v28;
  v29 = sub_1BE1B2EE8();
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v132 = (char *)&v101 - v33;
  v112 = *a2;
  v111 = a2[1];
  v138 = 0;
  v129 = v2 + 5;
  swift_beginAccess();
  v128 = v2;
  v34 = v2[5];
  v113 = v4;
  v133 = v4[13];
  if ((v34 & 0xC000000000000001) != 0)
  {
    v35 = sub_1BE1B31C4() | 0x8000000000000000;
    result = swift_bridgeObjectRetain();
    v114 = 0;
    v37 = 0;
    v123 = 0;
    v38 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    result = sub_1BE1B31A0();
    v35 = v139;
    v114 = v140;
    v37 = v141;
    v123 = v142;
    v38 = v143;
  }
  v119 = v128 + 3;
  v107 = v35 & 0x7FFFFFFFFFFFFFFFLL;
  v103 = v37;
  v110 = (unint64_t)(v37 + 64) >> 6;
  v115 = v128 + 4;
  v122 = v14;
  v127 = v32;
  v39 = v130;
  v40 = v124;
  v41 = v109;
  v126 = v35;
  if ((v35 & 0x8000000000000000) == 0)
    goto LABEL_27;
LABEL_9:
  if (!sub_1BE1B31E8())
  {
LABEL_35:
    v64 = v127;
    v65 = v132;
    v132 = *(char **)(v134 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v132)(v65, 1, 1, v19);
    v66 = sub_1BDE27FD0();
    v67 = v129;
    MEMORY[0x1E0C80A78](v66);
    *(&v101 - 6) = v19;
    *(&v101 - 5) = v7;
    v68 = v113;
    v69 = v133;
    *(&v101 - 4) = v113[12];
    *(&v101 - 3) = v69;
    v125 = v68[14];
    *(&v101 - 2) = v125;
    swift_bridgeObjectRetain();
    *v67 = sub_1BE1B2630();
    swift_bridgeObjectRelease();
    if ((v131 & 0xC000000000000001) != 0)
    {
      v70 = sub_1BE1B31C4() | 0x8000000000000000;
      swift_bridgeObjectRetain();
      v124 = 0;
      v71 = 0;
      v130 = 0;
      v72 = 0;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1BE1B31A0();
      v70 = v144[0];
      v124 = (char *)v144[1];
      v71 = (char *)v144[2];
      v130 = (char *)v144[3];
      v72 = v144[4];
    }
    v73 = v106;
    v74 = v122;
    v75 = (uint64_t)v108;
    result = swift_beginAccess();
    v118 = (char *)(v70 & 0x7FFFFFFFFFFFFFFFLL);
    v117 = v71;
    v123 = (unint64_t)(v71 + 64) >> 6;
    v126 = v70;
    if ((v70 & 0x8000000000000000) == 0)
      goto LABEL_42;
LABEL_61:
    if (!sub_1BE1B31E8())
    {
LABEL_77:
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v132)(v64, 1, 1, v19);
      sub_1BDE27FD0();
      swift_beginAccess();
      sub_1BDDAF714(v111);
      sub_1BDDAF714(v112);
      result = swift_endAccess();
      if (v138 == 1)
      {
        v100 = v102;
        sub_1BE0CFF58(v102);
        swift_beginAccess();
        type metadata accessor for Replica();
        sub_1BDDCB81C(v100);
        sub_1BDD9C3E0(v100, type metadata accessor for Timestamp);
        return swift_endAccess();
      }
      return result;
    }
    sub_1BE1B3494();
    swift_unknownObjectRelease();
    while (1)
    {
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v132)(v64, 0, 1, v19);
      (*(void (**)(uint64_t, char *, uint64_t))(v134 + 32))(v75, v64, v19);
      if ((*v129 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1BE1B34A0();
        v82 = sub_1BE1B31D0();
        v70 = v126;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        if (v82)
        {
          swift_bridgeObjectRelease();
LABEL_68:
          result = (*(uint64_t (**)(uint64_t, uint64_t))(v134 + 8))(v75, v19);
LABEL_41:
          v64 = v127;
          if ((v70 & 0x8000000000000000) != 0)
            goto LABEL_61;
          goto LABEL_42;
        }
      }
      else if (*(_QWORD *)(*v129 + 16))
      {
        swift_bridgeObjectRetain();
        sub_1BDE0D1D0(v75, v19, v133);
        v84 = v83;
        swift_bridgeObjectRelease();
        if ((v84 & 1) != 0)
          goto LABEL_68;
      }
      MEMORY[0x1C3B7C58C](v75, v131, v19, v7, v133);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v73, 1, v7) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v75, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v73, v121);
        goto LABEL_41;
      }
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v116, v73, v7);
      v85 = *v119;
      v86 = *v115;
      v87 = v125;
      v88 = *(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(v125 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v88(v137, v7, v87);
      v89 = v137[0];
      if ((sub_1BDDB04C0(v137[1], v86) & 1) != 0)
        break;
      v90 = sub_1BDDB04C0(v89, v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v90 & 1) != 0)
        goto LABEL_73;
      v74 = v122;
      (*(void (**)(char *, uint64_t))(v122 + 8))(v116, v7);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v134 + 8))(v75, v19);
LABEL_75:
      v73 = v106;
      v64 = v127;
      v70 = v126;
      if ((v126 & 0x8000000000000000) != 0)
        goto LABEL_61;
LABEL_42:
      if (v72)
      {
        v76 = __clz(__rbit64(v72));
        v72 &= v72 - 1;
        v77 = v76 | ((_QWORD)v130 << 6);
      }
      else
      {
        v78 = (int64_t)(v130 + 1);
        if (__OFADD__(v130, 1))
          goto LABEL_81;
        if (v78 >= v123)
          goto LABEL_77;
        v79 = *(_QWORD *)&v124[8 * v78];
        v80 = v130 + 1;
        if (!v79)
        {
          v80 = v130 + 2;
          if ((uint64_t)(v130 + 2) >= v123)
            goto LABEL_77;
          v79 = *(_QWORD *)&v124[8 * (_QWORD)v80];
          if (!v79)
          {
            v80 = v130 + 3;
            if ((uint64_t)(v130 + 3) >= v123)
              goto LABEL_77;
            v79 = *(_QWORD *)&v124[8 * (_QWORD)v80];
            if (!v79)
            {
              v80 = v130 + 4;
              if ((uint64_t)(v130 + 4) >= v123)
                goto LABEL_77;
              v79 = *(_QWORD *)&v124[8 * (_QWORD)v80];
              if (!v79)
              {
                v80 = v130 + 5;
                if ((uint64_t)(v130 + 5) >= v123)
                  goto LABEL_77;
                v79 = *(_QWORD *)&v124[8 * (_QWORD)v80];
                if (!v79)
                {
                  v81 = v130 + 6;
                  while ((char *)v123 != v81)
                  {
                    v79 = *(_QWORD *)&v124[8 * (_QWORD)v81++];
                    if (v79)
                    {
                      v80 = v81 - 1;
                      goto LABEL_59;
                    }
                  }
                  goto LABEL_77;
                }
              }
            }
          }
        }
LABEL_59:
        v72 = (v79 - 1) & v79;
        v77 = __clz(__rbit64(v79)) + ((_QWORD)v80 << 6);
        v130 = v80;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v134 + 16))(v64, *(_QWORD *)(v70 + 48) + *(_QWORD *)(v134 + 72) * v77, v19);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_73:
    v91 = *v119;
    v92 = *v115;
    v93 = v125;
    v94 = *(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(v125 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v95 = v116;
    v96 = (void (*)(_QWORD *, _QWORD))v94(v137, v7, v93);
    sub_1BDEE9868(v92);
    sub_1BDEE9868(v91);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v96(v137, 0);
    v97 = v134;
    (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v104, v108, v19);
    v74 = v122;
    v98 = v105;
    (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v105, v95, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v98, 0, 1, v7);
    swift_beginAccess();
    sub_1BE1B2684();
    sub_1BE1B26B4();
    swift_endAccess();
    v99 = v95;
    v75 = (uint64_t)v108;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v99, v7);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 8))(v75, v19);
    goto LABEL_75;
  }
  sub_1BE1B3494();
  swift_unknownObjectRelease();
  v39 = v130;
  v40 = v124;
  v41 = v109;
  while (1)
  {
    v55 = v134;
    v56 = v132;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v134 + 56))(v132, 0, 1, v19);
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v41, v56, v19);
    MEMORY[0x1C3B7C58C](v41, v131, v19, v7, v133);
    v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    if (v57((uint64_t)v39, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v120 + 8))(v39, v121);
      v58 = v117;
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v117, v41, v19);
      v59 = sub_1BE0CF4B8();
      sub_1BE1B2684();
      v60 = (void (*)(_QWORD *, _QWORD))sub_1BE1B269C();
      if (!v57(v61, 1, v7))
      {
        v62 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t))(v113[14] + 40))(&v136, v7);
        sub_1BDEE9868(v111);
        sub_1BDEE9868(v112);
        v62(&v136, 0);
      }
      v60(v137, 0);
      v63 = *(void (**)(char *, uint64_t))(v134 + 8);
      v63(v58, v19);
      ((void (*)(_QWORD *, _QWORD))v59)(v144, 0);
      result = ((uint64_t (*)(char *, uint64_t))v63)(v41, v19);
      v14 = v122;
      v39 = v130;
      v40 = v124;
      v35 = v126;
      if ((v126 & 0x8000000000000000) != 0)
        goto LABEL_9;
    }
    else
    {
      v125 = v38;
      v42 = v118;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v118, v39, v7);
      (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v40, v41, v19);
      v43 = v14;
      v44 = sub_1BE0CF4B8();
      sub_1BE1B2684();
      v45 = (void (*)(_QWORD *, _QWORD))sub_1BE1B269C();
      if (!v57(v46, 1, v7))
      {
        v48 = v119;
        swift_beginAccess();
        v136 = *(_OWORD *)v48;
        v135[0] = v112;
        v135[1] = v111;
        (*(void (**)(char *, __int128 *, _QWORD *, char *, uint64_t))(v113[14] + 48))(v42, &v136, v135, &v138, v7);
      }
      v45(v137, 0);
      v47 = *(void (**)(char *, uint64_t))(v134 + 8);
      v47(v40, v19);
      ((void (*)(_QWORD *, _QWORD))v44)(v144, 0);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v7);
      result = ((uint64_t (*)(char *, uint64_t))v47)(v41, v19);
      v14 = v43;
      v39 = v130;
      v35 = v126;
      v38 = v125;
      if ((v126 & 0x8000000000000000) != 0)
        goto LABEL_9;
    }
LABEL_27:
    if (v38)
    {
      v54 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v53 = v54 | (v123 << 6);
      goto LABEL_29;
    }
    v49 = v123 + 1;
    if (__OFADD__(v123, 1))
      break;
    if (v49 >= v110)
      goto LABEL_35;
    v50 = *(_QWORD *)(v114 + 8 * v49);
    v51 = v123 + 1;
    if (!v50)
    {
      v51 = v123 + 2;
      if (v123 + 2 >= v110)
        goto LABEL_35;
      v50 = *(_QWORD *)(v114 + 8 * v51);
      if (!v50)
      {
        v51 = v123 + 3;
        if (v123 + 3 >= v110)
          goto LABEL_35;
        v50 = *(_QWORD *)(v114 + 8 * v51);
        if (!v50)
        {
          v51 = v123 + 4;
          if (v123 + 4 >= v110)
            goto LABEL_35;
          v50 = *(_QWORD *)(v114 + 8 * v51);
          if (!v50)
          {
            v51 = v123 + 5;
            if (v123 + 5 >= v110)
              goto LABEL_35;
            v50 = *(_QWORD *)(v114 + 8 * v51);
            if (!v50)
            {
              v52 = v123 + 6;
              do
              {
                if (v110 == v52)
                  goto LABEL_35;
                v50 = *(_QWORD *)(v114 + 8 * v52++);
              }
              while (!v50);
              v51 = v52 - 1;
            }
          }
        }
      }
    }
    v38 = (v50 - 1) & v50;
    v53 = __clz(__rbit64(v50)) + (v51 << 6);
    v123 = v51;
LABEL_29:
    (*(void (**)(char *, unint64_t, uint64_t))(v134 + 16))(v132, *(_QWORD *)(v35 + 48) + *(_QWORD *)(v134 + 72) * v53, v19);
  }
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Timestamp(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3E58);
}

uint64_t sub_1BDDAC830(uint64_t a1)
{
  return sub_1BDDAA8E8(a1, (uint64_t)&unk_1E775F270, (uint64_t)sub_1BDE2F3B0, (uint64_t)&block_descriptor_12);
}

uint64_t sub_1BDDAC84C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[6];

  v34 = a3;
  v35 = a4;
  v7 = sub_1BE1B248C();
  v40 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v39 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BE1B24BC();
  v37 = *(_QWORD *)(v9 - 8);
  v38 = v9;
  MEMORY[0x1E0C80A78](v9);
  v36 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v33 - v17;
  v19 = *a1;
  v20 = a1[1];
  v21 = *a2;
  v22 = a2[1];
  if (*(_QWORD *)(v20 + 16) || *(_QWORD *)(v22 + 16))
  {
    v23 = *(_QWORD *)(v4 + 40);
    v33[0] = v7;
    v33[1] = v23;
    v24 = v19;
    sub_1BDD86DEC(v34, (uint64_t)v33 - v17, &qword_1ED6F43C0);
    sub_1BDD86DEC(v35, (uint64_t)v15, &qword_1ED6F43C0);
    v25 = *(unsigned __int8 *)(v12 + 80);
    v26 = (v25 + 56) & ~v25;
    v27 = (v13 + v25 + v26) & ~v25;
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v24;
    v28[3] = v20;
    v28[4] = v21;
    v28[5] = v22;
    v28[6] = v4;
    sub_1BDDA2EF0((uint64_t)v18, (uint64_t)v28 + v26, &qword_1ED6F43C0);
    sub_1BDDA2EF0((uint64_t)v15, (uint64_t)v28 + v27, &qword_1ED6F43C0);
    aBlock[4] = sub_1BDE2F35C;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDDBE6A4;
    aBlock[3] = &block_descriptor_6;
    v29 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v30 = v36;
    sub_1BE1B24A4();
    v41 = MEMORY[0x1E0DEE9D8];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
    sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
    v31 = v39;
    v32 = v33[0];
    sub_1BE1B2F78();
    MEMORY[0x1C3B7CD30](0, v30, v31, v29);
    _Block_release(v29);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v32);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
    return swift_release();
  }
  return result;
}

_QWORD *sub_1BDDACB54(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_allocObject();
  return sub_1BDDAAB08(a1, a2, a3, a4, a5);
}

uint64_t sub_1BDDACBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  v2 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1BDDACC1C(v0 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDACC1C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BDDACC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDACCA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[6];
  _QWORD v124[2];
  uint64_t v125;

  v117 = a6;
  v116 = a4;
  v115 = a3;
  v125 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3850);
  v12 = MEMORY[0x1E0C80A78](v11);
  v106 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v105 = (uint64_t)&v101 - v14;
  v103 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1E0C80A78](v103);
  v102 = (uint64_t)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Proto_Timestamp(0);
  v104 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v107 = (uint64_t *)((char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v114 = sub_1BE1B2EE8();
  v112 = *(_QWORD *)(v114 - 8);
  v17 = MEMORY[0x1E0C80A78](v114);
  v113 = (char *)&v101 - v18;
  v119 = a5;
  v121 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v17);
  v120 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v111 = (uint64_t)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v101 - v23;
  v110 = type metadata accessor for Proto_Version(0);
  v109 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110);
  v26 = (uint64_t *)((char *)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = sub_1BE1B1F58();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = *v7;
  sub_1BE1B20E4();
  v31 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  if (qword_1ED6F2808 != -1)
    swift_once();
  *(_QWORD *)(a7 + v31) = qword_1ED6F2800;
  v122 = a1;
  v32 = *(_QWORD *)(a1 + 16);
  v33 = a7;
  v34 = v32 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v34, v27);
  swift_retain();
  v35 = sub_1BDDAE244((uint64_t)v30);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    v36 = swift_retain();
    *(_QWORD *)(v33 + v31) = sub_1BDDA1768(v36);
    swift_release();
  }
  v37 = *(_QWORD *)(v33 + v31);
  swift_beginAccess();
  *(_QWORD *)(v37 + 16) = v35;
  v38 = v122;
  swift_beginAccess();
  v39 = *(_QWORD *)(v38 + 32);
  v124[0] = *(_QWORD *)(v38 + 24);
  v124[1] = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDAD780(v125, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = v33;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    v41 = swift_retain();
    *(_QWORD *)(v33 + v31) = sub_1BDDA1768(v41);
    swift_release();
  }
  v42 = *(_QWORD *)(v33 + v31);
  sub_1BDDA2E8C((uint64_t)v26, (uint64_t)v24, type metadata accessor for Proto_Version);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v24, 0, 1, v110);
  v43 = v111;
  sub_1BDDA2EF0((uint64_t)v24, v111, &qword_1ED6F37A8);
  v44 = v42 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v43, v44, &qword_1ED6F37A8);
  swift_endAccess();
  swift_release();
  v45 = v112;
  v46 = v113;
  v47 = v114;
  (*(void (**)(char *, uint64_t *, uint64_t))(v112 + 16))(v113, v115, v114);
  v48 = v121;
  v49 = v119;
  v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 48))(v46, 1, v119);
  v51 = v120;
  if (v50 == 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
    v52 = v122;
    v53 = swift_beginAccess();
    v123[3] = *(_QWORD *)(v52 + 40);
    v54 = MEMORY[0x1E0C80A78](v53);
    v55 = v116;
    v57 = v116[2];
    v56 = v116[3];
    *(&v101 - 10) = v57;
    *(&v101 - 9) = v56;
    v58 = v55[4];
    v59 = v55[5];
    *(&v101 - 8) = v49;
    *(&v101 - 7) = v58;
    v60 = v55[6];
    v61 = v55[7];
    *(&v101 - 6) = v59;
    *(&v101 - 5) = v60;
    v62 = v117;
    *(&v101 - 4) = v61;
    *(&v101 - 3) = v62;
    *(&v101 - 2) = v125;
    MEMORY[0x1E0C80A78](v54);
    *(&v101 - 10) = v57;
    *(&v101 - 9) = v63;
    *(&v101 - 8) = v49;
    *(&v101 - 7) = v64;
    *(&v101 - 6) = v59;
    *(&v101 - 5) = v65;
    *(&v101 - 4) = v66;
    *(&v101 - 3) = v67;
    *(&v101 - 2) = (uint64_t)sub_1BDF2E1DC;
    *(&v101 - 1) = v68;
    type metadata accessor for CRDictionaryElement(255, v63, v65, v69);
    v70 = sub_1BE1B2684();
    v71 = (char *)type metadata accessor for Proto_Set.Element(0);
    swift_bridgeObjectRetain();
    v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    v73 = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0E0], v70);
    v74 = v118;
    v75 = sub_1BDF016D0((void (*)(char *, char *))sub_1BDF2E214, (uint64_t)(&v101 - 12), v70, v71, v72, v73, MEMORY[0x1E0DEDB38], (uint64_t)v123);
    swift_bridgeObjectRelease();
    if (v74)
      return sub_1BDD9C3E0(v40, type metadata accessor for Proto_Set);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      v87 = swift_retain();
      *(_QWORD *)(v40 + v31) = sub_1BDDA1768(v87);
      swift_release();
    }
    v88 = (uint64_t *)(*(_QWORD *)(v40 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
    swift_beginAccess();
    *v88 = v75;
    swift_bridgeObjectRelease();
    v89 = v108;
    v86 = v107;
  }
  else
  {
    v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v48 + 32))(v120, v46, v49);
    v115 = &v101;
    MEMORY[0x1E0C80A78](v77);
    v78 = v116[7];
    *(&v101 - 6) = v49;
    *(&v101 - 5) = v78;
    v79 = v117;
    v80 = v125;
    *(&v101 - 4) = v117;
    *(&v101 - 3) = v80;
    *(&v101 - 2) = v122;
    v81 = type metadata accessor for Proto_Set.Element(0);
    v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
    v83 = v118;
    v84 = sub_1BDF02134((void (*)(char *, char *))sub_1BDF2E254, (uint64_t)(&v101 - 8), v49, v81, v82, v79, MEMORY[0x1E0DEDB38], (uint64_t)v124);
    v85 = v51;
    v86 = v107;
    if (v83)
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v85, v49);
      return sub_1BDD9C3E0(v40, type metadata accessor for Proto_Set);
    }
    v89 = v108;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      v90 = swift_retain();
      *(_QWORD *)(v40 + v31) = sub_1BDDA1768(v90);
      swift_release();
    }
    v91 = (uint64_t *)(*(_QWORD *)(v40 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
    swift_beginAccess();
    *v91 = v84;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v49);
  }
  v92 = v101 + qword_1ED6F8B38;
  swift_beginAccess();
  v93 = v102;
  sub_1BDD9C318(v92, v102, type metadata accessor for FinalizedTimestamp);
  sub_1BE1B20E4();
  v94 = sub_1BDDAE244(v93);
  v95 = *(_QWORD *)(v93 + *(int *)(v103 + 20));
  *v86 = v94;
  v86[1] = v95;
  sub_1BDD9C3E0(v93, type metadata accessor for FinalizedTimestamp);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    v96 = swift_retain();
    *(_QWORD *)(v40 + v31) = sub_1BDDA1768(v96);
    swift_release();
  }
  v97 = *(_QWORD *)(v40 + v31);
  v98 = v105;
  sub_1BDDA2E8C((uint64_t)v86, v105, type metadata accessor for Proto_Timestamp);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v104 + 56))(v98, 0, 1, v89);
  v99 = v106;
  sub_1BDDA2EF0(v98, v106, &qword_1ED6F3850);
  v100 = v97 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v99, v100, &qword_1ED6F3850);
  swift_endAccess();
  return swift_release();
}

uint64_t type metadata accessor for Proto_Set._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2820);
}

uint64_t sub_1BDDAD780@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100[5];

  v92 = a1;
  v4 = sub_1BE1B203C();
  v98 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v97 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v91);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Proto_RLE(0);
  v86 = *(_QWORD *)(v90 - 8);
  v8 = MEMORY[0x1E0C80A78](v90);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v99 = (uint64_t *)((char *)&v75 - v11);
  v12 = sub_1BE1B1F58();
  v88 = *(_QWORD *)(v12 - 8);
  v89 = v12;
  MEMORY[0x1E0C80A78](v12);
  v87 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1BE1B206C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v75 - v23;
  if (*(_QWORD *)(v2[1] + 16))
    goto LABEL_52;
  v25 = *v2;
  v26 = MEMORY[0x1E0DEE9D8];
  *a2 = MEMORY[0x1E0DEE9D8];
  a2[1] = v26;
  type metadata accessor for Proto_Version(0);
  v95 = a2;
  sub_1BE1B20E4();
  v27 = *(_QWORD *)(v25 + 64);
  v77 = v25 + 64;
  v28 = 1 << *(_BYTE *)(v25 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v94 = v29 & v27;
  v78 = (unint64_t)(v28 + 63) >> 6;
  v76 = v78 - 1;
  v79 = v25;
  result = swift_bridgeObjectRetain();
  v93 = 0;
  v96 = v7;
  v84 = v14;
  v85 = v10;
  v83 = v15;
  v82 = v17;
  v81 = v21;
  v80 = v24;
  v30 = v94;
  if (!v94)
    goto LABEL_7;
LABEL_5:
  v94 = (v30 - 1) & v30;
  v31 = __clz(__rbit64(v30)) | (v93 << 6);
LABEL_6:
  v32 = v79;
  v33 = *(_QWORD *)(v79 + 48);
  v34 = type metadata accessor for Replica();
  sub_1BDD9C318(v33 + *(_QWORD *)(*(_QWORD *)(v34 - 8) + 72) * v31, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v35 = *(_QWORD *)(v32 + 56) + *(_QWORD *)(v15 + 72) * v31;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(&v21[*(int *)(v36 + 48)], v35, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v21, 0, 1, v36);
  while (1)
  {
    sub_1BDDA2EF0((uint64_t)v21, (uint64_t)v24, &qword_1ED6F3CC0);
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v24, 1, v41) == 1)
      return swift_release();
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, &v24[*(int *)(v41 + 48)], v14);
    v43 = v88;
    v42 = v89;
    v44 = (uint64_t)v24;
    v45 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v44, v89);
    sub_1BDD9C3E0(v44, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v46 = sub_1BDDAE244(v45);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v42);
    v47 = v95;
    v48 = (_QWORD *)*v95;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v48 = sub_1BDDAEBFC(0, v48[2] + 1, 1, v48);
    v50 = v48[2];
    v49 = v48[3];
    if (v50 >= v49 >> 1)
      v48 = sub_1BDDAEBFC((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
    v48[2] = v50 + 1;
    v48[v50 + 4] = v46;
    *v47 = v48;
    *v99 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    v51 = v97;
    sub_1BE1B2054();
    sub_1BE1B2030();
    v52 = *(void (**)(char *, uint64_t))(v98 + 8);
    v52(v51, v4);
    v53 = &v7[*(int *)(v91 + 36)];
    sub_1BDD8422C((unint64_t *)&qword_1ED6F23D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
    v54 = *(_QWORD *)v53;
    sub_1BE1B2C90();
    if (v54 != v100[0])
      break;
LABEL_31:
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6EFF58);
    v55 = (uint64_t)v85;
    sub_1BDD9C318((uint64_t)v99, (uint64_t)v85, type metadata accessor for Proto_RLE);
    v56 = v95[1];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = v83;
    v14 = v84;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v56 = sub_1BDDAEFC4(0, *(_QWORD *)(v56 + 16) + 1, 1, v56);
    v59 = *(_QWORD *)(v56 + 16);
    v58 = *(_QWORD *)(v56 + 24);
    v17 = v82;
    if (v59 >= v58 >> 1)
      v56 = sub_1BDDAEFC4(v58 > 1, v59 + 1, 1, v56);
    *(_QWORD *)(v56 + 16) = v59 + 1;
    sub_1BDDA2E8C(v55, v56+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(_QWORD *)(v86 + 72) * v59, type metadata accessor for Proto_RLE);
    v95[1] = v56;
    sub_1BDD9C3E0((uint64_t)v99, type metadata accessor for Proto_RLE);
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v21 = v81;
    v24 = v80;
    v30 = v94;
    if (v94)
      goto LABEL_5;
LABEL_7:
    v37 = v93 + 1;
    if (__OFADD__(v93, 1))
      goto LABEL_51;
    if (v37 < v78)
    {
      v38 = *(_QWORD *)(v77 + 8 * v37);
      if (v38)
        goto LABEL_10;
      v39 = v93 + 2;
      ++v93;
      if (v37 + 1 < v78)
      {
        v38 = *(_QWORD *)(v77 + 8 * v39);
        if (v38)
          goto LABEL_13;
        v93 = v37 + 1;
        if (v37 + 2 < v78)
        {
          v38 = *(_QWORD *)(v77 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
            goto LABEL_10;
          }
          v39 = v37 + 3;
          v93 = v37 + 2;
          if (v37 + 3 < v78)
          {
            v38 = *(_QWORD *)(v77 + 8 * v39);
            if (!v38)
            {
              while (1)
              {
                v37 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_53;
                if (v37 >= v78)
                {
                  v93 = v76;
                  goto LABEL_24;
                }
                v38 = *(_QWORD *)(v77 + 8 * v37);
                ++v39;
                if (v38)
                  goto LABEL_10;
              }
            }
LABEL_13:
            v37 = v39;
LABEL_10:
            v93 = v37;
            v94 = (v38 - 1) & v38;
            v31 = __clz(__rbit64(v38)) + (v37 << 6);
            goto LABEL_6;
          }
        }
      }
    }
LABEL_24:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v21, 1, 1, v40);
    v94 = 0;
  }
  v60 = 0;
  while (1)
  {
    v61 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2D14();
    v63 = *v62;
    v64 = v62[1];
    v61(v100, 0);
    v65 = v97;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v97, v7, v4);
    sub_1BE1B2C9C();
    result = ((uint64_t (*)(char *, uint64_t))v52)(v65, v4);
    v66 = v63 - v60;
    if (__OFSUB__(v63, v60))
      break;
    v67 = (_QWORD *)*v99;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1BDDAEFB8(0, v67[2] + 1, 1, v67);
      v67 = (_QWORD *)result;
    }
    v69 = v67[2];
    v68 = v67[3];
    v70 = v69 + 1;
    if (v69 >= v68 >> 1)
    {
      result = (uint64_t)sub_1BDDAEFB8((_QWORD *)(v68 > 1), v69 + 1, 1, v67);
      v67 = (_QWORD *)result;
    }
    v67[2] = v70;
    v67[v69 + 4] = v66;
    v71 = v64 - v63;
    if (__OFSUB__(v64, v63))
      goto LABEL_50;
    v72 = v67[3];
    v73 = v69 + 2;
    if (v70 >= v72 >> 1)
      v67 = sub_1BDDAEFB8((_QWORD *)(v72 > 1), v69 + 2, 1, v67);
    v7 = v96;
    v67[2] = v73;
    v67[v70 + 4] = v71;
    *v99 = v67;
    v74 = *(_QWORD *)v53;
    sub_1BE1B2C90();
    v60 = v64;
    if (v74 == v100[0])
      goto LABEL_31;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

_QWORD *sub_1BDDAE054(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDDAE15C(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1BDDAE15C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDDAE244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v2 = v1;
  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v23 - v8;
  swift_beginAccess();
  v10 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    v11 = sub_1BDDAE974(a1);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
      swift_bridgeObjectRelease();
      if ((v13 & 0x8000000000000000) == 0)
        return v13;
      sub_1BE1B31F4();
      __break(1u);
    }
    swift_bridgeObjectRelease();
  }
  v14 = (unint64_t *)(v2 + 24);
  swift_beginAccess();
  v13 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v9, a1, v4);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0x8000000000000000;
  sub_1BDDAEB3C(v13, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 32) = v25;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  swift_endAccess();
  v17 = v24;
  v15(v24, a1, v4);
  swift_beginAccess();
  v18 = *(_QWORD *)(v2 + 24);
  v19 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 24) = v18;
  if ((v19 & 1) == 0)
  {
    v18 = sub_1BDDAEBE8(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
    *v14 = v18;
  }
  v21 = *(_QWORD *)(v18 + 16);
  v20 = *(_QWORD *)(v18 + 24);
  if (v21 >= v20 >> 1)
  {
    v18 = sub_1BDDAEBE8(v20 > 1, v21 + 1, 1, v18);
    *v14 = v18;
  }
  *(_QWORD *)(v18 + 16) = v21 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21, v17, v4);
  swift_endAccess();
  return v13;
}

uint64_t sub_1BDDAE4F0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1BE1B31F4();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1BDDAE6FC(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_1BDDAE6FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDDAE814(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), void (*a5)(void))
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  void (*v24)(void);
  uint64_t v25;

  v24 = a5;
  v25 = a1;
  v7 = (_QWORD **)v5;
  v10 = sub_1BE1B1F58();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_1BDDAE974(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v22[7] + 8 * v16) = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a3 & 1) == 0)
  {
    result = a4();
    goto LABEL_7;
  }
  v24();
  result = sub_1BDDAE974(a2);
  if ((v20 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_1BE1B3680();
    __break(1u);
    return result;
  }
  v16 = result;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1BDDAEB50(v16, (uint64_t)v13, v25, v22);
}

unint64_t sub_1BDDAE974(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  sub_1BE1B1F58();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v3 = sub_1BE1B26D8();
  return sub_1BDDAEA0C(a1, v3, v2, (unint64_t *)&qword_1ED6F2858, MEMORY[0x1E0CB09D0]);
}

unint64_t sub_1BDDAEA0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v6 = v5;
  v19 = a1;
  v20 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      sub_1BDD8422C(v21, v20, v22);
      v17 = sub_1BE1B2798();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_1BDDAEB3C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1BDDAE814(a1, a2, a3, (uint64_t (*)(void))sub_1BDE63DA4, (void (*)(void))sub_1BDDAEFAC);
}

uint64_t sub_1BDDAEB50(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1BE1B1F58();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1BDDAEBE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6F32C8, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

_QWORD *sub_1BDDAEBFC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDDAE054(a1, a2, a3, a4, &qword_1ED6F3868);
}

uint64_t sub_1BDDAEC08(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = sub_1BE1B1F58();
  v44 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v3;
  v9 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = sub_1BE1B3254();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release();
    v37 = v40;
LABEL_42:
    *v37 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  HIDWORD(v39) = a2;
  v19 = 16;
  if ((a2 & 1) != 0)
    v19 = 32;
  v43 = v19;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v23 >= v41)
    {
      swift_release();
      v37 = v40;
      v24 = v42;
      if ((v39 & 0x100000000) != 0)
      {
LABEL_37:
        v38 = 1 << *(_BYTE *)(v9 + 32);
        if (v38 >= 64)
          bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v24 = -1 << v38;
        *(_QWORD *)(v9 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_34;
      v25 = v42[v18];
      if (!v25)
        break;
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + v43))(v8, *(_QWORD *)(v9 + 48) + v27 * v22, v6);
    v28 = v9;
    v29 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v22);
    sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1BE1B26D8();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v44 + 32))(*(_QWORD *)(v11 + 48) + v27 * v20, v8, v6);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v11 + 16);
    v9 = v28;
  }
  v26 = v23 + 2;
  if (v26 >= v41)
  {
LABEL_34:
    swift_release();
    v37 = v40;
    if ((v39 & 0x100000000) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v25 = v42[v26];
  if (v25)
  {
    v18 = v26;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v41)
      goto LABEL_34;
    v25 = v42[v18];
    ++v26;
    if (v25)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1BDDAEFAC(uint64_t a1, int a2)
{
  return sub_1BDDAEC08(a1, a2, &qword_1ED6F2DD8);
}

_QWORD *sub_1BDDAEFB8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDDAE054(a1, a2, a3, a4, &qword_1ED6EFCC8);
}

uint64_t sub_1BDDAEFC4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6EFCC0, type metadata accessor for Proto_RLE);
}

uint64_t type metadata accessor for Proto_Set.Element(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2830);
}

uint64_t type metadata accessor for FinalizedTimestampRange(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6EFC90);
}

uint64_t sub_1BDDAF000(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1BDDAF044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BE1B20F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_1BDDAF0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto_CRDT._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1ED6F2DF0);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1ED6F2DF0);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto_Set);
  v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1ED6F2DF0);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1ED6F2DF0);
  swift_endAccess();
  return swift_release();
}

uint64_t CRStruct_2.hasDelta(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedConformanceWitness;
  char v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];

  v37 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = AssociatedTypeWitness;
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v32 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v31 = (char *)&v31 - v8;
  v9 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v31 - v14;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 48))(v38, a2, v4);
  v35 = v38[1];
  v36 = v38[4];
  swift_retain();
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v13, v9, AssociatedConformanceWitness);
  v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v13, v9);
  v18(v15, v9);
  if ((v17 & 1) != 0)
    goto LABEL_3;
  swift_retain();
  v19 = v31;
  swift_getAtKeyPath();
  v20 = v32;
  swift_getAtKeyPath();
  swift_release();
  v21 = v34;
  v22 = swift_getAssociatedConformanceWitness();
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 72))(v20, v21, v22);
  v24 = *(void (**)(char *, uint64_t))(v33 + 8);
  v24(v20, v21);
  v24(v19, v21);
  if ((v23 & 1) != 0)
  {
LABEL_3:
    swift_release();
    v25 = 1;
  }
  else
  {
    v26 = *(_QWORD *)(v4 + 8);
    v27 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 24);
    v28 = v27(a2, v26);
    v29 = v27(a2, v26);
    v25 = sub_1BDDB1F18(v29, v28);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v25 & 1;
}

void CRDictionary_v1.hasDelta(from:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDDAF5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((CRDictionary.hasDelta(from:)((_QWORD **)(v3 - 96)) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    *(_QWORD *)(v3 - 144) = v2;
    v5 = sub_1BDDAF70C();
    v6 = swift_beginAccess();
    *(_QWORD *)(v3 - 88) = *(_QWORD *)(v5 + 40);
    MEMORY[0x1E0C80A78](v6);
    type metadata accessor for CRDictionaryElement(255, v0, v1, v7);
    v8 = sub_1BE1B2684();
    swift_bridgeObjectRetain();
    MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA0D0], v8);
    v4 = sub_1BE1B290C();
    swift_bridgeObjectRelease();
  }
  return v4 & 1;
}

uint64_t sub_1BDDAF70C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1BDDAF714(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (*v39)();
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t (*v56)();
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  void (*v62)(char *, unint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  char v72;
  char v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  int v78;
  _QWORD *v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  char v97;
  char v98;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  int v104;
  _QWORD *v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  char v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t result;
  uint64_t v119;
  int64_t v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  void (*v129)(char *, unint64_t, uint64_t);
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  int64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  char *v142;
  _QWORD *v143;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v5 = MEMORY[0x1E0C80A78](v4);
  v127 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v132 = (char *)&v119 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v121 = (char *)&v119 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v123 = (char *)&v119 - v12;
  MEMORY[0x1E0C80A78](v11);
  v136 = (char *)&v119 - v13;
  v14 = sub_1BE1B206C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v131 = (char *)&v119 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v122 = (char *)&v119 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v125 = (char *)&v119 - v21;
  MEMORY[0x1E0C80A78](v20);
  v142 = (char *)&v119 - v22;
  v119 = type metadata accessor for Replica();
  v138 = *(_QWORD *)(v119 - 8);
  v23 = MEMORY[0x1E0C80A78](v119);
  v139 = (uint64_t)&v119 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v126 = (uint64_t)&v119 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v119 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v30 = MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v119 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v119 - v33;
  v35 = *(_QWORD *)(a1 + 64);
  v124 = a1 + 64;
  v36 = 1 << *(_BYTE *)(a1 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v128 = (unint64_t)(v36 + 63) >> 6;
  v120 = v128 - 1;
  v130 = a1;
  swift_bridgeObjectRetain();
  v137 = 0;
  v39 = type metadata accessor for Replica;
  v40 = &qword_1ED6F3CB8;
  v134 = v32;
  v135 = v28;
  v141 = v2;
  v133 = v34;
  while (1)
  {
    if (v38)
    {
      v44 = __clz(__rbit64(v38));
      v45 = (v38 - 1) & v38;
      v46 = v44 | (v137 << 6);
LABEL_10:
      v47 = v130;
      sub_1BDD9C318(*(_QWORD *)(v130 + 48) + *(_QWORD *)(v138 + 72) * v46, (uint64_t)v32, (uint64_t (*)(_QWORD))v39);
      v48 = *(_QWORD *)(v47 + 56) + *(_QWORD *)(v15 + 72) * v46;
      v49 = __swift_instantiateConcreteTypeFromMangledName(v40);
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(&v32[*(int *)(v49 + 48)], v48, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v32, 0, 1, v49);
      v2 = v141;
      goto LABEL_29;
    }
    v50 = v137 + 1;
    if (__OFADD__(v137, 1))
      goto LABEL_72;
    if (v50 < v128)
    {
      v51 = *(_QWORD *)(v124 + 8 * v50);
      if (v51)
        goto LABEL_14;
      v52 = v137 + 2;
      ++v137;
      if (v50 + 1 < v128)
      {
        v51 = *(_QWORD *)(v124 + 8 * v52);
        if (v51)
          goto LABEL_17;
        v137 = v50 + 1;
        if (v50 + 2 < v128)
        {
          v51 = *(_QWORD *)(v124 + 8 * (v50 + 2));
          if (v51)
          {
            v50 += 2;
            goto LABEL_14;
          }
          v52 = v50 + 3;
          v137 = v50 + 2;
          if (v50 + 3 < v128)
            break;
        }
      }
    }
LABEL_28:
    v53 = __swift_instantiateConcreteTypeFromMangledName(v40);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v32, 1, 1, v53);
    v45 = 0;
LABEL_29:
    sub_1BDDA2EF0((uint64_t)v32, (uint64_t)v34, &qword_1ED6F3CC0);
    v54 = __swift_instantiateConcreteTypeFromMangledName(v40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v34, 1, v54) == 1)
      return swift_release();
    v140 = v45;
    v55 = &v34[*(int *)(v54 + 48)];
    v56 = v39;
    sub_1BDDA2E8C((uint64_t)v34, (uint64_t)v28, (uint64_t (*)(_QWORD))v39);
    v57 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v57(v142, v55, v14);
    v58 = *v2;
    if (*(_QWORD *)(*v2 + 16) && (v59 = sub_1BDDB3EC0((uint64_t)v28), (v60 & 1) != 0))
    {
      v61 = *(_QWORD *)(v58 + 56);
      v62 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 72);
      v63 = (uint64_t)v136;
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v136, v61 + (_QWORD)v62 * v59, v14);
      v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v64(v63, 0, 1, v14);
      v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      if (v65(v63, 1, v14) != 1)
      {
        v129 = v62;
        v57(v125, (char *)v63, v14);
        v93 = v126;
        sub_1BDD9C318((uint64_t)v28, v126, (uint64_t (*)(_QWORD))v56);
        v94 = (uint64_t)v123;
        sub_1BE1B1FD0();
        v64(v94, 0, 1, v14);
        if (v65(v94, 1, v14) == 1)
        {
          sub_1BDD86E30(v94, &qword_1ED6F3C78);
          v95 = v141;
          swift_bridgeObjectRetain();
          v96 = sub_1BDDB3EC0(v93);
          v98 = v97;
          swift_bridgeObjectRelease();
          if ((v98 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v100 = *v95;
            v143 = (_QWORD *)*v95;
            *v95 = 0x8000000000000000;
            v28 = v135;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_1BDDB4348();
              v100 = (uint64_t)v143;
            }
            sub_1BDD9C3E0(*(_QWORD *)(v100 + 48) + *(_QWORD *)(v138 + 72) * v96, (uint64_t (*)(_QWORD))v56);
            v101 = (uint64_t)v121;
            v57(v121, (char *)(*(_QWORD *)(v100 + 56) + v96 * (_QWORD)v129), v14);
            sub_1BDDB4BD4(v96, v100);
            *v141 = v100;
            swift_bridgeObjectRelease();
            v102 = 0;
          }
          else
          {
            v102 = 1;
            v101 = (uint64_t)v121;
            v28 = v135;
          }
          v64(v101, v102, 1, v14);
          sub_1BDD9C3E0(v126, (uint64_t (*)(_QWORD))v56);
          sub_1BDD86E30(v101, &qword_1ED6F3C78);
          v34 = v133;
          v32 = v134;
          v39 = v56;
          v2 = v141;
        }
        else
        {
          v57(v122, (char *)v94, v14);
          v103 = v141;
          v104 = swift_isUniquelyReferenced_nonNull_native();
          v143 = (_QWORD *)*v103;
          v105 = v143;
          *v103 = 0x8000000000000000;
          v107 = sub_1BDDB3EC0(v93);
          v108 = v105[2];
          v109 = (v106 & 1) == 0;
          v110 = v108 + v109;
          if (__OFADD__(v108, v109))
            goto LABEL_74;
          v111 = v106;
          if (v105[3] >= v110)
          {
            if ((v104 & 1) == 0)
              sub_1BDDB4348();
          }
          else
          {
            sub_1BDDB46CC(v110, v104);
            v112 = sub_1BDDB3EC0(v126);
            if ((v111 & 1) != (v113 & 1))
              goto LABEL_77;
            v107 = v112;
          }
          v2 = v141;
          v114 = v143;
          if ((v111 & 1) != 0)
          {
            (*(void (**)(unint64_t, char *, uint64_t))(v15 + 40))(v143[7] + v107 * (_QWORD)v129, v122, v14);
            v115 = v126;
          }
          else
          {
            v143[(v107 >> 6) + 8] |= 1 << v107;
            v115 = v126;
            sub_1BDD9C318(v126, v114[6] + *(_QWORD *)(v138 + 72) * v107, (uint64_t (*)(_QWORD))v56);
            v57((char *)(v114[7] + v107 * (_QWORD)v129), v122, v14);
            v116 = v114[2];
            v91 = __OFADD__(v116, 1);
            v117 = v116 + 1;
            if (v91)
              goto LABEL_75;
            v114[2] = v117;
          }
          *v2 = (uint64_t)v143;
          swift_bridgeObjectRelease();
          v39 = v56;
          sub_1BDD9C3E0(v115, (uint64_t (*)(_QWORD))v56);
          v32 = v134;
          v28 = v135;
          v34 = v133;
        }
        v43 = *(void (**)(char *, uint64_t))(v15 + 8);
        v43(v125, v14);
        goto LABEL_7;
      }
      v2 = v141;
    }
    else
    {
      v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v63 = (uint64_t)v136;
      v64((uint64_t)v136, 1, 1, v14);
    }
    sub_1BDD86E30(v63, &qword_1ED6F3C78);
    v66 = (uint64_t)v28;
    v67 = v139;
    sub_1BDD9C318(v66, v139, (uint64_t (*)(_QWORD))v56);
    v68 = (uint64_t)v132;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v132, v142, v14);
    v64(v68, 0, 1, v14);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v68, 1, v14) == 1)
    {
      v129 = (void (*)(char *, unint64_t, uint64_t))v57;
      v69 = v40;
      sub_1BDD86E30(v68, &qword_1ED6F3C78);
      swift_bridgeObjectRetain();
      v70 = sub_1BDDB3EC0(v67);
      v71 = v2;
      v73 = v72;
      swift_bridgeObjectRelease();
      if ((v73 & 1) != 0)
      {
        v74 = swift_isUniquelyReferenced_nonNull_native();
        v75 = *v71;
        v143 = (_QWORD *)*v71;
        *v71 = 0x8000000000000000;
        v28 = v135;
        if (!v74)
        {
          sub_1BDDB4348();
          v75 = (uint64_t)v143;
        }
        sub_1BDD9C3E0(*(_QWORD *)(v75 + 48) + *(_QWORD *)(v138 + 72) * v70, (uint64_t (*)(_QWORD))v56);
        v42 = (uint64_t)v127;
        v129(v127, *(_QWORD *)(v75 + 56) + *(_QWORD *)(v15 + 72) * v70, v14);
        sub_1BDDB4BD4(v70, v75);
        *v71 = v75;
        swift_bridgeObjectRelease();
        v41 = 0;
      }
      else
      {
        v41 = 1;
        v42 = (uint64_t)v127;
        v28 = v135;
      }
      v40 = v69;
      v64(v42, v41, 1, v14);
      sub_1BDD9C3E0(v139, (uint64_t (*)(_QWORD))v56);
      sub_1BDD86E30(v42, &qword_1ED6F3C78);
      v34 = v133;
      v32 = v134;
      v39 = v56;
      v2 = v141;
    }
    else
    {
      v57(v131, (char *)v68, v14);
      v76 = swift_isUniquelyReferenced_nonNull_native();
      v77 = v2;
      v78 = v76;
      v143 = (_QWORD *)*v77;
      v79 = v143;
      *v77 = 0x8000000000000000;
      v81 = sub_1BDDB3EC0(v67);
      v82 = v79[2];
      v83 = (v80 & 1) == 0;
      v84 = v82 + v83;
      if (__OFADD__(v82, v83))
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      v85 = v80;
      if (v79[3] >= v84)
      {
        if ((v78 & 1) == 0)
          sub_1BDDB4348();
      }
      else
      {
        sub_1BDDB46CC(v84, v78);
        v86 = sub_1BDDB3EC0(v139);
        if ((v85 & 1) != (v87 & 1))
          goto LABEL_77;
        v81 = v86;
      }
      v2 = v141;
      v88 = v143;
      if ((v85 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v15 + 40))(v143[7] + *(_QWORD *)(v15 + 72) * v81, v131, v14);
        v89 = v139;
      }
      else
      {
        v143[(v81 >> 6) + 8] |= 1 << v81;
        v89 = v139;
        sub_1BDD9C318(v139, v88[6] + *(_QWORD *)(v138 + 72) * v81, (uint64_t (*)(_QWORD))v56);
        v57((char *)(v88[7] + *(_QWORD *)(v15 + 72) * v81), v131, v14);
        v90 = v88[2];
        v91 = __OFADD__(v90, 1);
        v92 = v90 + 1;
        if (v91)
          goto LABEL_73;
        v88[2] = v92;
      }
      *v2 = (uint64_t)v143;
      swift_bridgeObjectRelease();
      v39 = v56;
      sub_1BDD9C3E0(v89, (uint64_t (*)(_QWORD))v56);
      v32 = v134;
      v28 = v135;
      v34 = v133;
    }
    v43 = *(void (**)(char *, uint64_t))(v15 + 8);
LABEL_7:
    v38 = v140;
    v43(v142, v14);
    sub_1BDD9C3E0((uint64_t)v28, (uint64_t (*)(_QWORD))v39);
  }
  v51 = *(_QWORD *)(v124 + 8 * v52);
  if (v51)
  {
LABEL_17:
    v50 = v52;
LABEL_14:
    v45 = (v51 - 1) & v51;
    v46 = __clz(__rbit64(v51)) + (v50 << 6);
    v137 = v50;
    goto LABEL_10;
  }
  while (1)
  {
    v50 = v52 + 1;
    if (__OFADD__(v52, 1))
      break;
    if (v50 >= v128)
    {
      v137 = v120;
      goto LABEL_28;
    }
    v51 = *(_QWORD *)(v124 + 8 * v50);
    ++v52;
    if (v51)
      goto LABEL_14;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t CRDictionary.hasDelta(from:)(_QWORD **a1)
{
  return sub_1BDDB02F0(*a1) & 1;
}

uint64_t sub_1BDDB02F0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (v1[6] == a1[6])
  {
    swift_beginAccess();
    v3 = v1[3];
    v4 = v1[4];
    swift_beginAccess();
    v6 = a1[3];
    v5 = a1[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_1BDDB04C0(v4, v5) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = 1;
    }
    else
    {
      v7 = sub_1BDDB04C0(v3, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_1ED6F4510 != -1)
      swift_once();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    sub_1BE0CF4FC(v10, v11, v12);
    v8 = sub_1BE0CF4FC(v10, v11, v12);
    swift_bridgeObjectRelease();
    v7 = sub_1BDDB02F0(v8);
    swift_release();
    swift_release();
  }
  return v7 & 1;
}

uint64_t sub_1BDDB04C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  MEMORY[0x1E0C80A78](v4);
  v62 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Replica();
  v56 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v61 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BE1B206C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)&v51 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v51 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  v58 = a2;
  if (*(_QWORD *)(a2 + 16) < v19)
    return 1;
  v20 = *(_QWORD *)(a1 + 64);
  v53 = a1 + 64;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v54 = (unint64_t)(v21 + 63) >> 6;
  v55 = a1;
  v52 = v54 - 1;
  result = swift_bridgeObjectRetain();
  v59 = 0;
  v25 = &qword_1ED6F3CB8;
  while (1)
  {
    if (v23)
    {
      v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v27 = v26 | (v59 << 6);
LABEL_7:
      v28 = v55;
      sub_1BDD9C318(*(_QWORD *)(v55 + 48) + *(_QWORD *)(v56 + 72) * v27, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v29 = *(_QWORD *)(v28 + 56) + *(_QWORD *)(v9 + 72) * v27;
      v30 = __swift_instantiateConcreteTypeFromMangledName(v25);
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(&v16[*(int *)(v30 + 48)], v29, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v16, 0, 1, v30);
      goto LABEL_26;
    }
    v31 = v59 + 1;
    if (__OFADD__(v59, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v31 < v54)
    {
      v32 = *(_QWORD *)(v53 + 8 * v31);
      if (v32)
        goto LABEL_11;
      v33 = v59 + 2;
      ++v59;
      if (v31 + 1 < v54)
      {
        v32 = *(_QWORD *)(v53 + 8 * v33);
        if (v32)
          goto LABEL_14;
        v59 = v31 + 1;
        if (v31 + 2 < v54)
        {
          v32 = *(_QWORD *)(v53 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_11;
          }
          v33 = v31 + 3;
          v59 = v31 + 2;
          if (v31 + 3 < v54)
            break;
        }
      }
    }
LABEL_25:
    v34 = __swift_instantiateConcreteTypeFromMangledName(v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v16, 1, 1, v34);
    v23 = 0;
LABEL_26:
    sub_1BDDA2EF0((uint64_t)v16, (uint64_t)v18, &qword_1ED6F3CC0);
    v35 = __swift_instantiateConcreteTypeFromMangledName(v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v18, 1, v35) == 1)
    {
      swift_release();
      return 0;
    }
    v36 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v36(v60, &v18[*(int *)(v35 + 48)], v8);
    sub_1BDDA2E8C((uint64_t)v18, v61, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v37 = v58;
    if (*(_QWORD *)(v58 + 16) && (v38 = (uint64_t)v62, v39 = sub_1BDDB3EC0(v61), (v40 & 1) != 0))
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(v38, *(_QWORD *)(v37 + 56) + *(_QWORD *)(v9 + 72) * v39, v8);
      v41 = 0;
    }
    else
    {
      v41 = 1;
    }
    v42 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v62, v41, 1, v8);
    sub_1BDD9C3E0(v61, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v42, 1, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v60, v8);
      swift_release();
      sub_1BDD86E30((uint64_t)v62, &qword_1ED6F3C78);
      return 1;
    }
    v43 = v25;
    v44 = v57;
    v36(v57, v62, v8);
    v45 = v16;
    v46 = v60;
    v47 = sub_1BE1B2018();
    v48 = *(void (**)(char *, uint64_t))(v9 + 8);
    v49 = v44;
    v25 = v43;
    v48(v49, v8);
    v50 = v46;
    v16 = v45;
    result = ((uint64_t (*)(char *, uint64_t))v48)(v50, v8);
    if ((v47 & 1) == 0)
    {
      swift_release();
      return 1;
    }
  }
  v32 = *(_QWORD *)(v53 + 8 * v33);
  if (v32)
  {
LABEL_14:
    v31 = v33;
LABEL_11:
    v23 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v59 = v31;
    goto LABEL_7;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v54)
    {
      v59 = v52;
      goto LABEL_25;
    }
    v32 = *(_QWORD *)(v53 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_11;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t CRStruct_2.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];

  v17 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v16 - v5;
  v7 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - v8;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 48))(v22, a2, v4);
  v20 = v22[1];
  v18 = v22[4];
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = v17;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 40))(v17, v7);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v7);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  v12 = AssociatedTypeWitness;
  v13 = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 + 16) + 40))(v11, v12);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 24))(a2);
  sub_1BDDB1100(v11, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CRDictionary_v1.visitReferences(_:)()
{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDDB0C38(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return CRDictionary.visitReferences(_:)(v4, a1, a3, a4);
}

void CRDictionary_v1.subscript.getter()
{
  type metadata accessor for CRDictionary();
}

{
  type metadata accessor for CRDictionary();
}

uint64_t sub_1BDDB0C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return CRDictionary.subscript.getter(v4, a4, v5);
}

void type metadata accessor for CRDictionary()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t CRDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1BDDB1770(a1, a2, a3);
}

uint64_t CRDictionary.visitReferences(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t TupleTypeMetadata2;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v59 = a1;
  v6 = a2[3];
  v57 = a2[6];
  v58 = v6;
  v7 = type metadata accessor for CRDictionaryElement(0, v6, v57, a4);
  v67 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v56 = (char *)&v49 - v9;
  v60 = a2;
  v66 = *(_QWORD *)(a2[2] - 8);
  MEMORY[0x1E0C80A78](v8);
  v55 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v11;
  v65 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13 = sub_1BE1B2EE8();
  v61 = *(_QWORD *)(v13 - 8);
  v62 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v49 - v17;
  v19 = *v4;
  swift_beginAccess();
  v20 = *(_QWORD *)(v19 + 40);
  v21 = *(_QWORD *)(v20 + 64);
  v51 = v20 + 64;
  v22 = 1 << *(_BYTE *)(v20 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v52 = (unint64_t)(v22 + 63) >> 6;
  v50 = v52 - 1;
  v53 = v20;
  result = swift_bridgeObjectRetain();
  v26 = 0;
  v54 = v16;
  v27 = v65;
  v28 = v59;
  if (!v24)
    goto LABEL_6;
LABEL_4:
  v29 = __clz(__rbit64(v24));
  v30 = (v24 - 1) & v24;
  v31 = v29 | (v26 << 6);
  v32 = TupleTypeMetadata2;
  while (2)
  {
    v33 = v53;
    (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v16, *(_QWORD *)(v53 + 48) + *(_QWORD *)(v66 + 72) * v31, v64);
    (*(void (**)(char *, unint64_t, uint64_t))(v67 + 16))(&v16[*(int *)(v32 + 48)], *(_QWORD *)(v33 + 56) + *(_QWORD *)(v67 + 72) * v31, v65);
    for (i = 0; ; i = 1)
    {
      while (1)
      {
LABEL_18:
        v38 = *(_QWORD *)(v32 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v16, i, 1, v32);
        (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v18, v16, v62);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v18, 1, v32) == 1)
          return swift_release();
        v39 = &v18[*(int *)(v32 + 48)];
        v68 = v30;
        v40 = v66;
        v41 = v55;
        v42 = v64;
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v55, v18, v64);
        v43 = v18;
        v44 = v67;
        v45 = v56;
        (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v56, v39, v27);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v60[4] + 8) + 40))(v28, v42);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 + 8) + 40))(v28, v58);
        v46 = *(void (**)(char *, uint64_t))(v44 + 8);
        v18 = v43;
        v46(v45, v27);
        v47 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
        v24 = v68;
        v48 = v41;
        v16 = v54;
        result = v47(v48, v42);
        if (v24)
          goto LABEL_4;
LABEL_6:
        v35 = v26 + 1;
        v32 = TupleTypeMetadata2;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        if (v35 < v52)
          break;
LABEL_17:
        v30 = 0;
        i = 1;
      }
      v36 = *(_QWORD *)(v51 + 8 * v35);
      if (v36)
        goto LABEL_9;
      v26 += 2;
      if (v35 + 1 < v52)
        break;
      v30 = 0;
      v26 = v35;
    }
    v36 = *(_QWORD *)(v51 + 8 * v26);
    if (v36)
    {
      ++v35;
LABEL_9:
      v30 = (v36 - 1) & v36;
      v31 = __clz(__rbit64(v36)) + (v35 << 6);
      v26 = v35;
      continue;
    }
    break;
  }
  v37 = v35 + 2;
  if (v35 + 2 >= v52)
    goto LABEL_17;
  v36 = *(_QWORD *)(v51 + 8 * v37);
  if (v36)
  {
    v35 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v35 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v35 >= v52)
    {
      v30 = 0;
      i = 1;
      v26 = v50;
      goto LABEL_18;
    }
    v36 = *(_QWORD *)(v51 + 8 * v35);
    ++v37;
    if (v36)
      goto LABEL_9;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1BDDB1100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t);
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v14 >= v8)
      return swift_release();
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v8)
        return swift_release();
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v8)
          return swift_release();
        v15 = *(_QWORD *)(v4 + 8 * v10);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v7 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    v13 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v12) + 120);
    swift_retain();
    v13(a1);
    result = swift_release();
  }
  v16 = v14 + 3;
  if (v16 >= v8)
    return swift_release();
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      return swift_release();
    v15 = *(_QWORD *)(v4 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t CRDictionary.Iterator.next()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD, _QWORD, _QWORD);
  uint64_t v26;
  int64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(uint64_t, uint64_t);
  int64_t v69;
  int64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  void (*v82)(_QWORD, _QWORD, _QWORD);
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v5 = a1[6];
  v86 = a1[3];
  v87 = a3;
  v6 = type metadata accessor for CRDictionaryElement(0, v86, v5, a2);
  v89 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v73 - v8;
  v10 = a1[2];
  v90 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = sub_1BE1B2EE8();
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v73 - v17;
  v19 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v21 = MEMORY[0x1E0C80A78](v20);
  result = MEMORY[0x1E0C80A78](v21);
  v77 = (char *)&v73 - v23;
  v78 = v24;
  v26 = *v3;
  v25 = (void (*)(_QWORD, _QWORD, _QWORD))v3[1];
  v28 = (char *)v3[2];
  v27 = v3[3];
  v29 = v3[4];
  v85 = v10;
  v75 = result;
  v76 = v30;
  v74 = v31;
  if (v29)
  {
    v80 = (char *)TupleTypeMetadata2;
    v81 = v28;
    v82 = v25;
    v83 = v19;
    v79 = (v29 - 1) & v29;
    v84 = v27;
    v32 = __clz(__rbit64(v29)) | (v27 << 6);
LABEL_3:
    v33 = v90;
    (*(void (**)(char *, unint64_t, uint64_t))(v90 + 16))(v12, *(_QWORD *)(v26 + 48) + *(_QWORD *)(v90 + 72) * v32, v10);
    v34 = v12;
    v35 = v89;
    v36 = *(_QWORD *)(v26 + 56) + *(_QWORD *)(v89 + 72) * v32;
    v37 = v9;
    v38 = v26;
    v39 = v9;
    v40 = v10;
    v41 = v88;
    (*(void (**)(char *, unint64_t, uint64_t))(v89 + 16))(v37, v36, v88);
    v42 = &v18[*((int *)v80 + 12)];
    v43 = v34;
    TupleTypeMetadata2 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v18, v43, v40);
    v44 = v39;
    v26 = v38;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v42, v44, v41);
    v45 = 0;
    v25 = v82;
    v19 = v83;
    v28 = v81;
    v46 = v79;
    goto LABEL_4;
  }
  v69 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
    return result;
  }
  v70 = (unint64_t)(v28 + 64) >> 6;
  if (v69 >= v70)
  {
    v84 = v27;
    v46 = 0;
    v45 = 1;
    goto LABEL_4;
  }
  v71 = *((_QWORD *)v25 + v69);
  if (v71)
  {
LABEL_11:
    v80 = (char *)TupleTypeMetadata2;
    v81 = v28;
    v82 = v25;
    v83 = v19;
    v79 = (v71 - 1) & v71;
    v32 = __clz(__rbit64(v71)) + (v69 << 6);
    v84 = v69;
    goto LABEL_3;
  }
  if (v27 + 2 >= v70)
    goto LABEL_22;
  v71 = *((_QWORD *)v25 + v27 + 2);
  if (v71)
  {
    v69 = v27 + 2;
    goto LABEL_11;
  }
  v69 = v27 + 3;
  if (v27 + 3 < v70)
  {
    v71 = *((_QWORD *)v25 + v69);
    if (v71)
      goto LABEL_11;
    v69 = v70 - 1;
    v72 = v27 + 4;
    while (v70 != v72)
    {
      v71 = *((_QWORD *)v25 + v72++);
      if (v71)
      {
        v69 = v72 - 1;
        goto LABEL_11;
      }
    }
LABEL_22:
    v46 = 0;
    v45 = 1;
    v84 = v69;
    goto LABEL_4;
  }
  v46 = 0;
  v45 = 1;
  v84 = v27 + 2;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v18, v45, 1, TupleTypeMetadata2);
  *v3 = v26;
  v3[1] = (uint64_t)v25;
  v47 = v84;
  v3[2] = (uint64_t)v28;
  v3[3] = v47;
  v3[4] = v46;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v18, v75);
    v48 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v87, 1, 1, v48);
  }
  else
  {
    v49 = *(int *)(TupleTypeMetadata2 + 48);
    v50 = v77;
    v51 = &v77[v49];
    v80 = &v77[v49];
    v52 = &v18[v49];
    v53 = v90;
    v54 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
    v55 = v85;
    v54(v77, v18, v85);
    v82 = *(void (**)(_QWORD, _QWORD, _QWORD))(v89 + 32);
    v56 = v52;
    v57 = v88;
    v82(v51, v56, v88);
    v58 = v86;
    v59 = swift_getTupleTypeMetadata2();
    v60 = v87;
    v81 = &v87[*(int *)(v59 + 48)];
    v61 = v76;
    v62 = (int64_t)&v76[*(int *)(TupleTypeMetadata2 + 48)];
    v83 = v59;
    v84 = v62;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v76, v50, v55);
    v63 = v89;
    v64 = v62;
    v65 = v80;
    (*(void (**)(uint64_t, char *, uint64_t))(v89 + 16))(v64, v80, v57);
    v54(v60, v61, v55);
    v66 = v78;
    v67 = &v78[*(int *)(TupleTypeMetadata2 + 48)];
    v54(v78, v50, v55);
    v82(v67, v65, v57);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v81, &v67[*(int *)(v57 + 36)], v58);
    v68 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v68((uint64_t)v67, v57);
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v60, 0, 1);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v66, v55);
    return ((uint64_t (*)(int64_t, uint64_t))v68)(v84, v57);
  }
}

uint64_t sub_1BDDB1770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 440);
  v8 = type metadata accessor for CRDictionaryElement(255, v7, *(_QWORD *)(*v3 + 464), a2);
  v9 = sub_1BE1B2EE8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - v11;
  swift_beginAccess();
  v13 = v3[5];
  v14 = *(_QWORD *)(v6 + 432);
  v15 = *(_QWORD *)(v6 + 456);
  swift_bridgeObjectRetain();
  MEMORY[0x1C3B7C58C](a1, v13, v14, v8, v15);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v12, 1, v8))
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v16 = *(_QWORD *)(v7 - 8);
    v17 = 1;
  }
  else
  {
    v16 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(a3, &v12[*(int *)(v8 + 36)], v7);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a3, v17, 1, v7);
}

uint64_t sub_1BDDB18D4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 16) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1BDDB1960 + 4 * byte_1BE1C2280[v11]))();
  }
}

uint64_t sub_1BDDB19F0(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  unint64_t v22;
  unint64_t v23;

  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v13 = v6;
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v14 + 8;
  v16 = *(_QWORD *)(v10 + 64) + 7;
  if (v12 < a2)
  {
    if (((((v16 + (v15 & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v17 = 2;
    else
      v17 = a2 - v12 + 1;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    __asm { BR              X4 }
  }
  if (v8 == v12)
  {
    v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    v22 = a1;
    v11 = *(unsigned int *)(v7 + 84);
    v9 = v13;
    return v21(v22, v11, v9);
  }
  v22 = (v15 + a1) & ~v14;
  if ((_DWORD)v11 == v12)
  {
    v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    return v21(v22, v11, v9);
  }
  v23 = *(_QWORD *)((v16 + v22) & 0xFFFFFFFFFFFFF8);
  if (v23 >= 0xFFFFFFFF)
    LODWORD(v23) = -1;
  return (v23 + 1);
}

void sub_1BDDB1B84(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 16) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 16) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1BDDB1C8C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BDDB1D08);
}

void sub_1BDDB1C94(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1BDDB1C9CLL);
  JUMPOUT(0x1BDDB1D08);
}

void sub_1BDDB1CE0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BDDB1D08);
}

void sub_1BDDB1CE8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BDDB1D08);
}

uint64_t sub_1BDDB1CF0@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x1BDDB1D08);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x1BDDB1D04);
    JUMPOUT(0x1BDDB1CFCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 16) & a3);
}

uint64_t type metadata accessor for CRDictionaryElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDictionaryElement);
}

void sub_1BDDB1D2C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;

  v8 = *(_QWORD *)(sub_1BE1B1F58() - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 >= a3)
  {
    v14 = 0u;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64) + 7 + ((((*(_DWORD *)(v8 + 64) + 7) & 0xFFFFFFF8) + (_DWORD)v11 + 8) & ~(_DWORD)v11)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v12 = a3 - v10 + 1;
    else
      v12 = 2;
    if (v12 >= 0x10000)
      v13 = 4;
    else
      v13 = 2;
    if (v12 < 0x100)
      v13 = 1;
    if (v12 >= 2)
      v14 = v13;
    else
      v14 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X0 }
  }
  if (((*(_DWORD *)(v9 + 64) + 7 + ((((*(_DWORD *)(v8 + 64) + 7) & 0xFFFFFFF8) + (_DWORD)v11 + 8) & ~(_DWORD)v11)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v15 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64) + 7 + ((((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & ~v11)) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v15;
  }
  __asm { BR              X10 }
}

void sub_1BDDB1E68()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1BDDB1F00);
}

void sub_1BDDB1E70()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1BDDB1E78);
  JUMPOUT(0x1BDDB1F00);
}

void sub_1BDDB1EC4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BDDB1F00);
}

void sub_1BDDB1ECC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1BDDB1F00);
}

uint64_t sub_1BDDB1ED4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v13 + v15) = 0;
  if (!(_DWORD)v14)
    JUMPOUT(0x1BDDB1F00);
  if ((_DWORD)v7 == v10)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v4 = v13;
    v5 = v14;
    a1 = v7;
    a2 = a3;
  }
  else
  {
    v4 = (v11 + v13) & v12;
    if ((_DWORD)a1 != v10)
      JUMPOUT(0x1BDDB1EE0);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v5 = v14;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t sub_1BDDB1F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_23;
      goto LABEL_21;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8)
      goto LABEL_26;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_26;
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_26;
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_23;
LABEL_21:
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v12);
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v12);
    v18 = *v16;
    v19 = v16[1];
    swift_bridgeObjectRetain();
    swift_retain();
    v20 = sub_1BDDB271C(v18, v19);
    if ((v21 & 1) == 0)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v20);
    swift_retain();
    swift_bridgeObjectRelease();
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 112))(v22);
    swift_release();
    result = swift_release();
    if ((v23 & 1) != 0)
    {
LABEL_23:
      swift_release();
      return 1;
    }
  }
  v15 = v13 + 3;
  if (v15 >= v8)
  {
LABEL_26:
    swift_release();
    return 0;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_26;
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1BDDB2108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(_QWORD *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char isUniquelyReferenced_nonNull_native;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD *, _QWORD);
  uint64_t *v55;
  uint64_t *v56;
  char v57;
  BOOL v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t result;
  _QWORD *v65;
  uint64_t v66;
  void (*v67)(_QWORD *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[5];
  uint64_t v83;

  v67 = a5;
  v7 = v6;
  v79 = a2;
  v12 = type metadata accessor for Proto_CRDT(0);
  v78 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v77 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a4;
  v18 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  (*(void (**)(uint64_t, uint64_t))(v18 + 48))(a3, v18);
  v68 = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v17, a3);
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16);
  v69 = v18;
  v20 = (_QWORD *)v19(a3, v18);
  v80 = a1;
  v21 = *(_QWORD *)a1;
  v76 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v76)
  {
    v23 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_50:
    swift_bridgeObjectRelease();
    v67(v23, a3, v66);
    if (v7)
    {
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(a6, a3);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    return sub_1BDD9C3E0(v80, type metadata accessor for Proto_Struct);
  }
  v70 = a6;
  v71 = a3;
  v72 = v6;
  v75 = v21 + 32;
  swift_bridgeObjectRetain();
  v22 = 0;
  v65 = v20 + 9;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v73 = v21;
  v74 = v20;
  while (1)
  {
    if (v22 >= *(_QWORD *)(v21 + 16))
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v25 = *(_QWORD *)(v80 + 8);
    if (v22 >= *(_QWORD *)(v25 + 16))
      goto LABEL_56;
    v26 = *(_QWORD *)(v75 + 8 * v22);
    v27 = v77;
    sub_1BDDA7DD4(v25+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(_QWORD *)(v78 + 72) * v22, v77);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v28 = v79;
    swift_retain();
    v29 = sub_1BDDA1B44(v27, v28);
    swift_release();
    v30 = *(_QWORD *)(v29 + 32);
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
      v32 = v26 >= v31;
    else
      v32 = 1;
    if (v32)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_OWORD *)v63 = xmmword_1BE1B63E0;
      *(_BYTE *)(v63 + 16) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v71);
      return sub_1BDD9C3E0(v80, type metadata accessor for Proto_Struct);
    }
    v33 = v30 + 16 * v26;
    v34 = *(_QWORD *)(v33 + 32);
    v35 = *(_QWORD *)(v33 + 40);
    v36 = v20[2];
    if (v36)
    {
      v37 = v20[4] == v34 && v20[5] == v35;
      if (v37 || (sub_1BE1B34AC() & 1) != 0)
      {
LABEL_18:
        swift_bridgeObjectRetain();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v82[0] = v23;
        v40 = sub_1BDDB271C(v34, v35);
        v41 = v23[2];
        v42 = (v39 & 1) == 0;
        v43 = v41 + v42;
        if (__OFADD__(v41, v42))
          goto LABEL_57;
        v44 = v39;
        if (v23[3] < v43)
        {
          sub_1BDDB2888(v43, isUniquelyReferenced_nonNull_native);
          v45 = sub_1BDDB271C(v34, v35);
          if ((v44 & 1) != (v46 & 1))
            goto LABEL_60;
          v40 = v45;
          v23 = (_QWORD *)v82[0];
          if ((v44 & 1) == 0)
            goto LABEL_25;
LABEL_3:
          v24 = v23[7];
          swift_release();
          *(_QWORD *)(v24 + 8 * v40) = v29;
LABEL_4:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v23 = (_QWORD *)v82[0];
          if ((v39 & 1) != 0)
            goto LABEL_3;
        }
        else
        {
          sub_1BDE64994();
          v23 = (_QWORD *)v82[0];
          if ((v44 & 1) != 0)
            goto LABEL_3;
        }
LABEL_25:
        v23[(v40 >> 6) + 8] |= 1 << v40;
        v47 = (uint64_t *)(v23[6] + 16 * v40);
        *v47 = v34;
        v47[1] = v35;
        *(_QWORD *)(v23[7] + 8 * v40) = v29;
        v48 = v23[2];
        v49 = __OFADD__(v48, 1);
        v50 = v48 + 1;
        if (v49)
          goto LABEL_58;
        v23[2] = v50;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
      if (v36 != 1)
      {
        v58 = v20[6] == v34 && v20[7] == v35;
        if (v58 || (sub_1BE1B34AC() & 1) != 0)
          goto LABEL_18;
        if (v36 != 2)
          break;
      }
    }
LABEL_28:
    swift_bridgeObjectRetain();
    v51 = swift_retain();
    v52 = v72;
    AnyCRDT.init(from:)(v51, &v83);
    v72 = v52;
    if (v52)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v71);
      return sub_1BDD9C3E0(v80, type metadata accessor for Proto_Struct);
    }
    v53 = v83;
    v54 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t))(v69 + 40))(v82, v71);
    v56 = v55;
    v57 = swift_isUniquelyReferenced_nonNull_native();
    v81 = *v56;
    *v56 = 0x8000000000000000;
    sub_1BE1542E0(v53, v34, v35, v57);
    *v56 = v81;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v54(v82, 0);
    swift_release();
LABEL_5:
    v21 = v73;
    v20 = v74;
    if (++v22 == v76)
    {
      swift_bridgeObjectRelease();
      a3 = v71;
      v7 = v72;
      a6 = v70;
      goto LABEL_50;
    }
  }
  v59 = v65;
  v60 = 2;
  while (1)
  {
    v61 = v60 + 1;
    if (__OFADD__(v60, 1))
      break;
    v62 = *(v59 - 1) == v34 && *v59 == v35;
    if (v62 || (sub_1BE1B34AC() & 1) != 0)
      goto LABEL_18;
    v59 += 2;
    ++v60;
    if (v61 == v36)
      goto LABEL_28;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDDB271C(uint64_t a1, uint64_t a2)
{
  return sub_1BDDB2730(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1BDDB27A8);
}

uint64_t sub_1BDDB2730(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  _BYTE v10[72];

  sub_1BE1B36F8();
  a3(v10, a1, a2);
  v7 = sub_1BE1B371C();
  return a4(a1, a2, v7);
}

unint64_t sub_1BDDB27A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1BE1B34AC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1BE1B34AC() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1BDDB2888(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2880);
  v36 = a2;
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1BE1B36F8();
    sub_1BE1B2834();
    result = sub_1BE1B371C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t type metadata accessor for CRDecoder(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3858);
}

unint64_t sub_1BDDB2BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F2858;
  if (!qword_1ED6F2858)
  {
    v1 = sub_1BE1B1F58();
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB09D0], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F2858);
  }
  return result;
}

uint64_t sub_1BDDB2BF8()
{
  __int16 v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v20 = sub_1BE1B1F40();
  LOWORD(v21) = v0;
  BYTE2(v21) = v1;
  BYTE3(v21) = v2;
  BYTE4(v21) = v3;
  BYTE5(v21) = v4;
  BYTE6(v21) = v5;
  HIBYTE(v21) = v6;
  v18 = sub_1BE1B1F40();
  LOWORD(v19) = v7;
  BYTE2(v19) = v8;
  BYTE3(v19) = v9;
  BYTE4(v19) = v10;
  BYTE5(v19) = v11;
  BYTE6(v19) = v12;
  HIBYTE(v19) = v13;
  v14 = bswap64(v20);
  v15 = bswap64(v18);
  if (v14 == v15 && (v14 = bswap64(v21), v15 = bswap64(v19), v14 == v15))
  {
    v16 = 0;
  }
  else if (v14 < v15)
  {
    v16 = -1;
  }
  else
  {
    v16 = 1;
  }
  return v16 >> 31;
}

uint64_t sub_1BDDB2D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  unint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  char v108;
  unsigned int (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  void (*v121)(unint64_t, char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  char v127;
  uint64_t v128;
  _BOOL8 v129;
  uint64_t v130;
  char v131;
  unint64_t v132;
  char v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  char *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t result;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  int64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  _QWORD *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  void (*v169)(char *, unint64_t, uint64_t);
  unint64_t v170;
  char *v171;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  char *v185;
  unsigned int (*v186)(char *, uint64_t, uint64_t);
  void (*v187)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(char *, char *, uint64_t);
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;

  v4 = v3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C78);
  v7 = MEMORY[0x1E0C80A78](v6);
  v150 = (uint64_t)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v146 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v166 = (uint64_t)&v146 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v174 = (char *)&v146 - v15;
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v146 - v16;
  v18 = sub_1BE1B206C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v156 = (char *)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v165 = (char *)&v146 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v163 = (char *)&v146 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v171 = (char *)&v146 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v177 = (char *)&v146 - v29;
  MEMORY[0x1E0C80A78](v28);
  v167 = (char *)&v146 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  MEMORY[0x1E0C80A78](v31);
  v172 = (char *)&v146 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  MEMORY[0x1E0C80A78](v33);
  v195 = (uint64_t)&v146 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for FinalizedTimestamp(0);
  v194 = *(_QWORD *)(v197 - 8);
  MEMORY[0x1E0C80A78](v197);
  v189 = (uint64_t)&v146 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v152 = *(_QWORD *)(v193 - 8);
  MEMORY[0x1E0C80A78](v193);
  v198 = (uint64_t *)((char *)&v146 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v162 = type metadata accessor for Replica();
  v37 = *(_QWORD *)(v162 - 8);
  v38 = MEMORY[0x1E0C80A78](v162);
  v155 = (uint64_t)&v146 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v38);
  v184 = (uint64_t)&v146 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v182 = (uint64_t)&v146 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v176 = (uint64_t)&v146 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v175 = (uint64_t)&v146 - v47;
  MEMORY[0x1E0C80A78](v46);
  v188 = (uint64_t)&v146 - v48;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v50 = MEMORY[0x1E0C80A78](v49);
  v52 = (char *)&v146 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50);
  v181 = (uint64_t)&v146 - v53;
  v164 = v4;
  v54 = v4[1];
  v192 = v4 + 1;
  v55 = *(_QWORD *)(v54 + 64);
  v153 = v54 + 64;
  v56 = 1 << *(_BYTE *)(v54 + 32);
  v57 = -1;
  if (v56 < 64)
    v57 = ~(-1 << v56);
  v58 = v57 & v55;
  v59 = (unint64_t)(v56 + 63) >> 6;
  v147 = v59 - 1;
  v60 = swift_bridgeObjectRetain();
  v61 = 0;
  v157 = v59;
  v62 = v59 - 5;
  v63 = v58;
  v148 = v62;
  v159 = v60;
  v149 = v60 + 104;
  v185 = v52;
  v151 = a3;
  v161 = v11;
  v160 = v17;
  v173 = v19;
  v158 = v37;
  if (!v58)
    goto LABEL_6;
LABEL_4:
  v179 = (v63 - 1) & v63;
  v180 = v61;
  v64 = __clz(__rbit64(v63)) | (v61 << 6);
LABEL_5:
  v65 = v159;
  sub_1BDD9C318(*(_QWORD *)(v159 + 48) + *(_QWORD *)(v37 + 72) * v64, (uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v66 = *(_QWORD *)(v65 + 56) + *(_QWORD *)(v19 + 72) * v64;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
  (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(&v185[*(int *)(v67 + 48)], v66, v18);
  v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56);
  v69 = v67;
  v52 = v185;
  v68(v185, 0, 1, v69);
  while (1)
  {
    v74 = v181;
    sub_1BDDA2EF0((uint64_t)v52, v181, &qword_1ED6F3CC0);
    v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 48))(v74, 1, v75) == 1)
      return swift_release();
    v178 = *(int *)(v75 + 48);
    v76 = v188;
    sub_1BDDA2E8C(v74, v188, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if (*(_QWORD *)(a3 + 16))
    {
      v77 = sub_1BDDB3EC0(v76);
      if ((v78 & 1) != 0)
        break;
    }
    sub_1BDD9C3E0(v76, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
LABEL_56:
    v93 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
LABEL_57:
    v61 = v180;
    v63 = v179;
    v93(v181 + v178, v18);
    if (v63)
      goto LABEL_4;
LABEL_6:
    v70 = v61 + 1;
    if (__OFADD__(v61, 1))
      goto LABEL_76;
    if (v70 >= v157)
    {
      v72 = v61;
    }
    else
    {
      v71 = *(_QWORD *)(v153 + 8 * v70);
      if (v71)
        goto LABEL_9;
      v72 = v61 + 1;
      if ((uint64_t)(v61 + 2) < v157)
      {
        v71 = *(_QWORD *)(v153 + 8 * (v61 + 2));
        if (v71)
        {
          v70 = v61 + 2;
LABEL_9:
          v179 = (v71 - 1) & v71;
          v64 = __clz(__rbit64(v71)) + (v70 << 6);
          v180 = v70;
          goto LABEL_5;
        }
        v72 = v61 + 2;
        if ((uint64_t)(v61 + 3) < v157)
        {
          v71 = *(_QWORD *)(v153 + 8 * (v61 + 3));
          if (v71)
          {
            v70 = v61 + 3;
            goto LABEL_9;
          }
          v70 = v61 + 4;
          v72 = v61 + 3;
          if ((uint64_t)(v61 + 4) < v157)
          {
            v71 = *(_QWORD *)(v153 + 8 * v70);
            if (v71)
              goto LABEL_9;
            while (v148 != v61)
            {
              v71 = *(_QWORD *)(v149 + 8 * v61++);
              if (v71)
              {
                v70 = v61 + 4;
                goto LABEL_9;
              }
            }
            v72 = v147;
          }
        }
      }
    }
    v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v52, 1, 1, v73);
    v179 = 0;
    v180 = v72;
  }
  sub_1BDDB4ED4((_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v77), &v199);
  sub_1BDDB4F58(&v199, &v200);
  v79 = *(_QWORD *)(v200 + 16);
  if (!v79)
  {
LABEL_55:
    sub_1BDDB4E78((uint64_t)&v200);
    sub_1BDD9C3E0(v76, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v52 = v185;
    goto LABEL_56;
  }
  v80 = v152;
  v81 = v200 + ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
  v154 = v200;
  swift_bridgeObjectRetain();
  v196 = *(_QWORD *)(v80 + 72);
  v82 = v167;
  v83 = (uint64_t)v172;
  while (1)
  {
    v85 = v198;
    sub_1BDD86DEC(v81, (uint64_t)v198, qword_1ED6F25C0);
    sub_1BDD86DEC((uint64_t)v85 + *(int *)(v193 + 36), v83, &qword_1ED6F2520);
    v86 = type metadata accessor for RetainedMapRun(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 48))(v83, 1, v86) != 1)
      break;
    sub_1BDD86E30(v83, &qword_1ED6F2520);
    v84 = v195;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v195, 1, 1, v197);
LABEL_18:
    sub_1BDD86E30((uint64_t)v198, qword_1ED6F25C0);
    sub_1BDD86E30(v84, (uint64_t *)&unk_1ED6F2DC0);
LABEL_19:
    v81 += v196;
    if (!--v79)
    {
      swift_bridgeObjectRelease();
      a3 = v151;
      v37 = v158;
      v76 = v188;
      goto LABEL_55;
    }
  }
  v84 = v195;
  sub_1BDD86DEC(v83, v195, (uint64_t *)&unk_1ED6F2DC0);
  sub_1BDD9C3E0(v83, type metadata accessor for RetainedMapRun);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v84, 1, v197) == 1)
    goto LABEL_18;
  sub_1BDDA2E8C(v84, v189, type metadata accessor for FinalizedTimestamp);
  sub_1BE1B1F70();
  v87 = *v192;
  v88 = v188;
  if (!*(_QWORD *)(*v192 + 16))
    goto LABEL_77;
  v89 = sub_1BDDB3EC0(v188);
  if ((v90 & 1) == 0)
    goto LABEL_77;
  v91 = *(_QWORD *)(v87 + 56) + *(_QWORD *)(v19 + 72) * v89;
  v92 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v190 = *(_QWORD *)(v19 + 72);
  v191 = v92;
  v92(v17, (char *)v91, v18);
  v187 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v187(v17, 0, 1, v18);
  v186 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v186(v17, 1, v18) == 1)
    goto LABEL_78;
  sub_1BE1B1FA0();
  v93 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v93((uint64_t)v17, v18);
  if (sub_1BE1B1FB8() < 1)
    goto LABEL_51;
  v183 = v93;
  v94 = v88;
  v95 = v175;
  sub_1BDD9C318(v94, v175, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v191(v177, v82, v18);
  v96 = v176;
  sub_1BDD9C318(v95, v176, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v97 = v192;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v99 = v182;
  sub_1BDD9C318(v96, v182, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v199 = (_QWORD *)*v97;
  v100 = v199;
  *v97 = 0x8000000000000000;
  v102 = sub_1BDDB3EC0(v99);
  v103 = v100[2];
  v104 = (v101 & 1) == 0;
  v105 = v103 + v104;
  if (!__OFADD__(v103, v104))
  {
    v106 = v101;
    if (v100[3] >= v105)
    {
      v17 = v174;
      v109 = v186;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDDB4348();
        goto LABEL_30;
      }
    }
    else
    {
      sub_1BDDB46CC(v105, isUniquelyReferenced_nonNull_native);
      v107 = sub_1BDDB3EC0(v182);
      v109 = v186;
      if ((v106 & 1) != (v108 & 1))
        goto LABEL_83;
      v102 = v107;
LABEL_30:
      v17 = v174;
    }
    if ((v106 & 1) == 0)
      goto LABEL_81;
    v110 = v199[7];
    v170 = v102;
    v168 = v102 * v190;
    v169 = *(void (**)(char *, unint64_t, uint64_t))(v173 + 32);
    v169(v17, v110 + v102 * v190, v18);
    v187(v17, 0, 1, v18);
    if (v109(v17, 1, v18) == 1)
      goto LABEL_82;
    v111 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v109;
    v112 = v191;
    v191(v163, v17, v18);
    v113 = v177;
    v112(v165, v177, v18);
    sub_1BDD8422C((unint64_t *)&unk_1ED6EF908, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
    v19 = (unint64_t)v171;
    sub_1BE1B2F6C();
    sub_1BE1B2F60();
    v114 = (void (*)(char *, uint64_t))v183;
    v183(v19, v18);
    v114(v113, v18);
    v115 = v166;
    sub_1BDD86DEC((uint64_t)v17, v166, &qword_1ED6F3C78);
    if (v111(v115, 1, v18) == 1)
    {
      sub_1BDD86E30(v115, &qword_1ED6F3C78);
      v116 = (uint64_t)v199;
      v117 = v170;
      v17 = (char *)v162;
      swift_arrayDestroy();
      sub_1BDDB4BD4(v117, v116);
      v118 = v164;
      v82 = v167;
    }
    else
    {
      v119 = v156;
      v120 = v115;
      v121 = (void (*)(unint64_t, char *, uint64_t))v169;
      v169(v156, v120, v18);
      v121(v199[7] + v168, v119, v18);
      v118 = v164;
      v82 = v167;
      v17 = (char *)v162;
    }
    v122 = v184;
    sub_1BDD86E30((uint64_t)v174, &qword_1ED6F3C78);
    sub_1BDD9C3E0(v182, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    *v192 = v199;
    sub_1BDD9C3E0(v176, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    sub_1BDD9C3E0(v175, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v123 = sub_1BE1B1F58();
    v124 = v189;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 16))(v122, v189, v123);
    *(_QWORD *)(v122 + *((int *)v17 + 5)) = 0;
    if (__OFSUB__(*(_QWORD *)(v124 + *(int *)(v197 + 20)), *v198))
      goto LABEL_74;
    sub_1BE1B1FC4();
    v125 = swift_isUniquelyReferenced_nonNull_native();
    v199 = (_QWORD *)*v118;
    v126 = v199;
    *v118 = 0x8000000000000000;
    v19 = sub_1BDDB3EC0(v122);
    v128 = v126[2];
    v129 = (v127 & 1) == 0;
    v130 = v128 + v129;
    if (__OFADD__(v128, v129))
      goto LABEL_75;
    v131 = v127;
    if (v126[3] >= v130)
    {
      if ((v125 & 1) == 0)
      {
        sub_1BDDB4348();
        v126 = v199;
      }
    }
    else
    {
      sub_1BDDB46CC(v130, v125);
      v126 = v199;
      v132 = sub_1BDDB3EC0(v184);
      if ((v131 & 1) != (v133 & 1))
        goto LABEL_84;
      v19 = v132;
    }
    *v118 = v126;
    swift_bridgeObjectRelease();
    v134 = (_QWORD *)*v118;
    swift_bridgeObjectRetain();
    if ((v131 & 1) == 0)
    {
      v135 = (uint64_t)v171;
      sub_1BE1B2060();
      v136 = v155;
      sub_1BDD9C318(v184, v155, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDDB4614(v19, v136, v135, v134);
    }
    swift_bridgeObjectRelease();
    sub_1BE1B2048();
    v137 = *v192;
    if (!*(_QWORD *)(*v192 + 16))
      goto LABEL_79;
    v138 = sub_1BDDB3EC0(v188);
    if ((v139 & 1) == 0)
      goto LABEL_79;
    v140 = v161;
    v191(v161, (char *)(*(_QWORD *)(v137 + 56) + v138 * v190), v18);
    v187(v140, 0, 1, v18);
    v141 = v186(v140, 1, v18);
    v17 = v160;
    v19 = v173;
    v93 = v183;
    if (v141 == 1)
      goto LABEL_80;
    v142 = sub_1BE1B1FB8();
    v93((uint64_t)v140, v18);
    if (!v142)
    {
      swift_bridgeObjectRelease();
      v143 = v150;
      v144 = v188;
      sub_1BDDB4A98(v188, v150);
      sub_1BDD86E30(v143, &qword_1ED6F3C78);
      sub_1BDD9C3E0(v184, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v93((uint64_t)v82, v18);
      sub_1BDD9C3E0(v189, type metadata accessor for FinalizedTimestamp);
      sub_1BDD86E30((uint64_t)v198, qword_1ED6F25C0);
      sub_1BDDB4E78((uint64_t)&v200);
      sub_1BDD9C3E0(v144, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      a3 = v151;
      v37 = v158;
      v52 = v185;
      goto LABEL_57;
    }
    sub_1BDD9C3E0(v184, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
LABEL_51:
    v93((uint64_t)v82, v18);
    sub_1BDD9C3E0(v189, type metadata accessor for FinalizedTimestamp);
    sub_1BDD86E30((uint64_t)v198, qword_1ED6F25C0);
    v83 = (uint64_t)v172;
    goto LABEL_19;
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_78:
  __break(1u);
LABEL_79:
  v187(v161, 1, 1, v18);
LABEL_80:
  __break(1u);
LABEL_81:
  v187(v17, 1, 1, v18);
LABEL_82:
  __break(1u);
LABEL_83:
  sub_1BE1B3680();
  __break(1u);
LABEL_84:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

unint64_t sub_1BDDB3EC0(uint64_t a1)
{
  uint64_t v2;

  sub_1BE1B36F8();
  sub_1BE1B1F28();
  type metadata accessor for Replica();
  sub_1BE1B3704();
  v2 = sub_1BE1B371C();
  return sub_1BDDB3F30(a1, v2);
}

unint64_t sub_1BDDB3F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for Replica();
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v23 - v10;
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v23 - v13;
  v25 = v2 + 64;
  v26 = v2;
  v15 = -1 << *(_BYTE *)(v2 + 32);
  v16 = a2 & ~v15;
  if (((*(_QWORD *)(v2 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v23 = ~v15;
    v24 = *(int *)(v5 + 20);
    v17 = *(_QWORD *)(v12 + 72);
    do
    {
      sub_1BDD9C318(*(_QWORD *)(v26 + 48) + v17 * v16, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v18 = v5;
      v19 = *(_QWORD *)&v14[*(int *)(v5 + 20)];
      v20 = *(_QWORD *)(a1 + v24);
      sub_1BDD9C318((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      sub_1BDD9C318(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      if (v19 == v20)
      {
        v21 = sub_1BE1B1F10();
        sub_1BDD9C3E0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C3E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        if ((v21 & 1) != 0)
          return v16;
      }
      else
      {
        sub_1BDD9C3E0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C3E0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BDD9C3E0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      }
      v16 = (v16 + 1) & v23;
      v5 = v18;
    }
    while (((*(_QWORD *)(v25 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  return v16;
}

uint64_t type metadata accessor for Replica()
{
  uint64_t result;

  result = qword_1ED6F48B8;
  if (!qword_1ED6F48B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for PartiallyOrderedReferenceMap()
{
  uint64_t result;

  result = qword_1ED6F2530;
  if (!qword_1ED6F2530)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BDDB4194(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDB41F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BDDB4278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1BDDB42C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1BE1B20F0();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t type metadata accessor for RetainedMapRun(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2510);
}

void *sub_1BDDB4348()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = sub_1BE1B206C();
  v1 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v35 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Replica();
  v37 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3710);
  v31 = v0;
  v5 = *v0;
  v6 = sub_1BE1B3248();
  v7 = *(_QWORD *)(v5 + 16);
  v39 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v29 = v39;
    v28 = v31;
LABEL_25:
    *v28 = v29;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v39;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v38 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v32 = v5 + 64;
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = (uint64_t)v34;
  v16 = v36;
  for (i = v39;
        ;
        result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(i + 56) + v22, v24, v16))
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v38;
      goto LABEL_9;
    }
    v25 = v11 + 1;
    v20 = v38;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v33)
      goto LABEL_23;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_23;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_22:
    v14 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_9:
    v21 = *(_QWORD *)(v37 + 72) * v19;
    sub_1BDD9C318(*(_QWORD *)(v20 + 48) + v21, v15, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v22 = *(_QWORD *)(v1 + 72) * v19;
    v23 = *(_QWORD *)(v20 + 56) + v22;
    v24 = v35;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v35, v23, v16);
    sub_1BDDA2E8C(v15, *(_QWORD *)(i + 48) + v21, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_23:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v39;
    goto LABEL_25;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_23;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BDDB4614(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for Replica();
  sub_1BDDA2E8C(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  v10 = a4[7];
  v11 = sub_1BE1B206C();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_1BDDB46CC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  void (**v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t (**v46)(unint64_t, char *, uint64_t);
  char *v47;
  uint64_t v48;

  v3 = v2;
  v48 = sub_1BE1B206C();
  v5 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v47 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Replica();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3710);
  v45 = a2;
  v11 = sub_1BE1B3254();
  v12 = v11;
  if (*(_QWORD *)(v10 + 16))
  {
    v39 = v2;
    v13 = 1 << *(_BYTE *)(v10 + 32);
    v14 = *(_QWORD *)(v10 + 64);
    v41 = (_QWORD *)(v10 + 64);
    if (v13 < 64)
      v15 = ~(-1 << v13);
    else
      v15 = -1;
    v16 = v15 & v14;
    v40 = (unint64_t)(v13 + 63) >> 6;
    v42 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v46 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
    v17 = v11 + 64;
    result = swift_retain();
    v19 = 0;
    while (1)
    {
      if (v16)
      {
        v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v22 = v21 | (v19 << 6);
      }
      else
      {
        if (__OFADD__(v19++, 1))
          goto LABEL_39;
        if (v19 >= v40)
        {
LABEL_32:
          swift_release();
          v3 = v39;
          if ((v45 & 1) != 0)
          {
            v38 = 1 << *(_BYTE *)(v10 + 32);
            if (v38 >= 64)
              bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v41 = -1 << v38;
            *(_QWORD *)(v10 + 16) = 0;
          }
          break;
        }
        v24 = v41[v19];
        if (!v24)
        {
          v25 = v19 + 1;
          if (v19 + 1 >= v40)
            goto LABEL_32;
          v24 = v41[v25];
          if (!v24)
          {
            while (1)
            {
              v19 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              if (v19 >= v40)
                goto LABEL_32;
              v24 = v41[v19];
              ++v25;
              if (v24)
                goto LABEL_19;
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v19;
        }
LABEL_19:
        v16 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      v26 = *(_QWORD *)(v43 + 72);
      v27 = *(_QWORD *)(v10 + 48) + v26 * v22;
      if ((v45 & 1) != 0)
      {
        sub_1BDDA2E8C(v27, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v28 = (void (**)(char *, unint64_t, uint64_t))v46;
      }
      else
      {
        sub_1BDD9C318(v27, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v28 = v42;
      }
      v29 = v5;
      v30 = *(_QWORD *)(v5 + 72);
      (*v28)(v47, *(_QWORD *)(v10 + 56) + v30 * v22, v48);
      sub_1BE1B36F8();
      sub_1BE1B1F28();
      sub_1BE1B3704();
      result = sub_1BE1B371C();
      v31 = -1 << *(_BYTE *)(v12 + 32);
      v32 = result & ~v31;
      v33 = v32 >> 6;
      if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v36 = v33 == v35;
          if (v33 == v35)
            v33 = 0;
          v34 |= v36;
          v37 = *(_QWORD *)(v17 + 8 * v33);
        }
        while (v37 == -1);
        v20 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      sub_1BDDA2E8C((uint64_t)v9, *(_QWORD *)(v12 + 48) + v26 * v20, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      result = (*v46)(*(_QWORD *)(v12 + 56) + v30 * v20, v47, v48);
      ++*(_QWORD *)(v12 + 16);
      v5 = v29;
    }
  }
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_1BDDB4A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1BDDB3EC0(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1BDDB4348();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for Replica();
    sub_1BDD9C3E0(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = sub_1BE1B206C();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_1BDDB4BD4(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = sub_1BE1B206C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

unint64_t sub_1BDDB4BD4(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = type metadata accessor for Replica();
  v4 = *(_QWORD *)(v31 - 8);
  result = MEMORY[0x1E0C80A78](v31);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(_QWORD *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    v10 = ~v8;
    v30 = a2 + 64;
    result = sub_1BE1B2F84();
    v11 = v30;
    if ((*(_QWORD *)(v30 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      v12 = (result + 1) & v10;
      v13 = *(_QWORD *)(v4 + 72);
      while (1)
      {
        v14 = v13 * v9;
        sub_1BDD9C318(*(_QWORD *)(a2 + 48) + v13 * v9, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        sub_1BE1B36F8();
        sub_1BE1B1F28();
        sub_1BE1B3704();
        v15 = sub_1BE1B371C();
        result = sub_1BDD9C3E0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
        v16 = v15 & v10;
        if ((uint64_t)a1 >= (uint64_t)v12)
          break;
        if (v16 < v12)
          goto LABEL_11;
LABEL_12:
        if ((uint64_t)(v13 * a1) < v14 || *(_QWORD *)(a2 + 48) + v13 * a1 >= *(_QWORD *)(a2 + 48) + v14 + v13)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v13 * a1 != v14)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(sub_1BE1B206C() - 8) + 72);
        v19 = v18 * a1;
        result = v17 + v18 * a1;
        v20 = v18 * v9;
        v21 = v17 + v18 * v9 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v9;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v9;
LABEL_6:
        v9 = (v9 + 1) & v10;
        v11 = v30;
        if (((*(_QWORD *)(v30 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          goto LABEL_23;
      }
      if (v16 < v12)
        goto LABEL_6;
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v16)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_23:
    v23 = (uint64_t *)(v11 + 8 * (a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(a2 + 64 + 8 * (a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FinalizedTimestamp()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDB4E6C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDB4E78(uint64_t a1)
{
  destroy for RLEMapping();
  return a1;
}

uint64_t destroy for RLEMapping()
{
  swift_bridgeObjectRelease();
  return swift_weakDestroy();
}

_QWORD *sub_1BDDB4ED4(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for RLEMapping(a2, a1);
  return a2;
}

_QWORD *initializeWithCopy for RLEMapping(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  return a1;
}

_QWORD *sub_1BDDB4F58(_QWORD *a1, _QWORD *a2)
{
  initializeWithTake for RLEMapping(a2, a1);
  return a2;
}

_QWORD *initializeWithTake for RLEMapping(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

uint64_t sub_1BDDB4FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v8;
  *(_QWORD *)(v2 + 40) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 32) = v8;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  v9 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v10 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v12 = type metadata accessor for Proto_Value(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = *(_QWORD *)(a2 + 40);
  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v2 + 48) = *(_BYTE *)(a2 + 48);
  sub_1BDDA2E8C(a1, (uint64_t)v7, type metadata accessor for Proto_Value);
  v13((uint64_t)v7, 0, 1, v12);
  swift_beginAccess();
  sub_1BDDA1AF4((uint64_t)v7, v11, &qword_1ED6F3770);
  swift_endAccess();
  *(_BYTE *)(v2 + 49) = *(_BYTE *)(a2 + 49);
  return v2;
}

uint64_t sub_1BDDB51C4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDB51D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  id v48;
  void *v49;
  unsigned __int8 v50;
  id v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  char isUniquelyReferenced_nonNull_native;
  id v68;
  _QWORD v69[2];
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  id v91[2];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C20);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v80 = (char *)v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_1BE1B1F58();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v77 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_1BE1B1DF0();
  v75 = *(_QWORD *)(v76 - 8);
  v4 = MEMORY[0x1E0C80A78](v76);
  v74 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v73 = (char *)v69 - v6;
  v7 = type metadata accessor for Proto_Asset(0);
  v87 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v83 = (_QWORD *)((char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v69 - v13;
  v15 = type metadata accessor for Proto_Constants(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (_QWORD *)((char *)v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v17);
  v21 = (_QWORD *)((char *)v69 - v20);
  v22 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Document(0) + 20));
  v23 = v22 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v14, &qword_1ED6F3290);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v24(v14, 1, v15) == 1)
  {
    *v21 = sub_1BE1B20CC();
    v21[1] = v25;
    v21[2] = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v14, &qword_1ED6F3290);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v14, (uint64_t)v21, type metadata accessor for Proto_Constants);
  }
  v26 = *v21;
  v27 = v21[1];
  sub_1BDDB6CA4(*v21, v27);
  sub_1BDD9C3E0((uint64_t)v21, type metadata accessor for Proto_Constants);
  v28 = v88;
  sub_1BDD928C0(v26, v27);
  v30 = v29;
  result = sub_1BDDB796C(v26, v27);
  if (!v28)
  {
    v84[3] = v30;
    swift_bridgeObjectRelease();
    v32 = v22
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
    swift_beginAccess();
    sub_1BDD86DEC(v32, (uint64_t)v12, &qword_1ED6F3290);
    if (v24(v12, 1, v15) == 1)
    {
      *v19 = sub_1BE1B20CC();
      v19[1] = v33;
      v19[2] = MEMORY[0x1E0DEE9D8];
      sub_1BE1B20E4();
      sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3290);
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v19, type metadata accessor for Proto_Constants);
    }
    v34 = v19[2];
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Constants);
    v35 = v84;
    v84[4] = v34;
    swift_bridgeObjectRelease();
    v36 = (uint64_t *)(v22
                    + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
    swift_beginAccess();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F32C0);
    v72 = v35 + 5;
    sub_1BE1B25D0();
    swift_endAccess();
    result = *v36;
    v37 = *(_QWORD *)(*v36 + 16);
    if (v37)
    {
      v88 = 0;
      v38 = result + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
      v71 = &v92;
      v70 = *(_QWORD *)(v87 + 72);
      v69[1] = result;
      swift_bridgeObjectRetain();
      v39 = v83;
      while (1)
      {
        v87 = v37;
        v86 = v38;
        sub_1BDD9C318(v38, (uint64_t)v39, type metadata accessor for Proto_Asset);
        v40 = v84[2];
        if (!v40)
          __break(1u);
        v41 = v39[1];
        v42 = v39[2];
        v43 = *(_QWORD *)(v40 + 32);
        v45 = v39[3];
        v44 = v39[4];
        type metadata accessor for CRAssetRef();
        v46 = (_QWORD *)swift_allocObject();
        v46[2] = v41;
        v46[3] = v42;
        v85 = v46;
        v46[4] = v43;
        v47 = (void *)objc_opt_self();
        sub_1BDDB6CA4(v41, v42);
        swift_retain();
        sub_1BDDB6CA4(v41, v42);
        swift_retain();
        v48 = objc_msgSend(v47, sel_defaultManager);
        v49 = (void *)sub_1BE1B1D90();
        v91[0] = 0;
        v50 = objc_msgSend(v48, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v49, 1, 0, v91);

        if ((v50 & 1) == 0)
          break;
        v51 = v91[0];
        v52 = v77;
        sub_1BE1B1F4C();
        sub_1BE1B1EF8();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v52, v79);
        v53 = v73;
        sub_1BE1B1DA8();
        swift_bridgeObjectRelease();
        sub_1BDD86DEC(v43 + 56, (uint64_t)&v89, qword_1ED6F3DD0);
        if (v90)
        {
          sub_1BDD85B8C(&v89, (uint64_t)v91);
          v54 = v93;
          v55 = v94;
          __swift_project_boxed_opaque_existential_1(v91, v93);
          v45 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v55 + 8))(v45, v44, v54, v55);
          v44 = v56;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v91);
        }
        else
        {
          sub_1BDD86E30((uint64_t)&v89, qword_1ED6F3DD0);
          sub_1BDDB6CA4(v45, v44);
        }
        v57 = v88;
        sub_1BE1B1E98();
        v88 = v57;
        v58 = v45;
        v59 = v44;
        if (v57)
          goto LABEL_21;
        sub_1BDDB796C(v45, v44);
        v60 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
        v61 = v74;
        v62 = v76;
        v60(v74, v53, v76);
        type metadata accessor for CRFileSnapshot();
        v63 = swift_allocObject();
        v60((char *)(v63 + OBJC_IVAR____TtC9Coherence14CRFileSnapshot_url), v61, v62);
        v64 = (_QWORD *)swift_allocObject();
        v64[2] = v41;
        v64[3] = v42;
        v64[4] = v63;
        v91[0] = &unk_1EF5303C0;
        v91[1] = v64;
        swift_weakInit();
        sub_1BDDB6CA4(v41, v42);
        swift_retain();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
        v65 = v80;
        sub_1BE1B2AEC();
        (*(void (**)(char *, uint64_t))(v81 + 8))(v65, v82);
        swift_release();
        swift_release();
        swift_release();
        v66 = v72;
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v89 = *v66;
        *v66 = 0x8000000000000000;
        sub_1BE153ED8((uint64_t)v85, v41, v42, isUniquelyReferenced_nonNull_native);
        *v66 = v89;
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v41, v42);
        swift_endAccess();
        v39 = v83;
        sub_1BDD9C3E0((uint64_t)v83, type metadata accessor for Proto_Asset);
        v38 = v86 + v70;
        v37 = v87 - 1;
        if (v87 == 1)
          return swift_bridgeObjectRelease();
      }
      v68 = v91[0];
      sub_1BE1B1D3C();

      swift_willThrow();
      v58 = swift_unexpectedError();
      __break(1u);
LABEL_21:
      sub_1BDDB796C(v58, v59);
      result = swift_unexpectedError();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1BDDB5B44()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDB5B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[7];
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v37[5] = a8;
  v37[4] = a7;
  v37[3] = a3;
  v37[2] = a2;
  v37[1] = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v9);
  v43 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Proto_KeyPath(0);
  v39 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v40 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v12);
  v41 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_1BE1B1F58();
  v44 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v37[6] = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Proto_Version(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (_QWORD *)((char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v25);
  v48 = (uint64_t)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a5 + *(int *)(type metadata accessor for Proto_Document(0) + 20));
  v28 = v27 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v28, (uint64_t)v24, &qword_1ED6F37C8);
  v29 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v24, 1, v29) == 1)
  {
    sub_1BDD86E30((uint64_t)v24, &qword_1ED6F37C8);
LABEL_7:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v32 = 0xD000000000000019;
    *(_QWORD *)(v32 + 8) = 0x80000001BE1CD830;
    *(_BYTE *)(v32 + 16) = 0;
    swift_willThrow();
    return v19;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_Document.OneOf_Root);
    goto LABEL_7;
  }
  sub_1BDDA2E8C((uint64_t)v24, v48, type metadata accessor for Proto_Reference);
  v30 = v27 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1BDD86DEC(v30, (uint64_t)v17, &qword_1ED6F37A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v31 = MEMORY[0x1E0DEE9D8];
    *v21 = MEMORY[0x1E0DEE9D8];
    v21[1] = v31;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v17, &qword_1ED6F37A8);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v17, (uint64_t)v21, type metadata accessor for Proto_Version);
  }
  v33 = v46;
  swift_retain();
  v34 = v45;
  sub_1BDDA9DA0(v21, v33, &v47);
  if (!v34)
  {
    v37[0] = *((_QWORD *)&v47 + 1);
    v45 = v47;
    v35 = v27
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid;
    swift_beginAccess();
    __asm { BR              X10 }
  }
  sub_1BDD9C3E0(v48, type metadata accessor for Proto_Reference);
  return v19;
}

uint64_t CRDecoder.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDB639C(int a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  void (*v39)(_QWORD *);
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _BYTE v57[4];
  int v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD v74[5];
  unint64_t v75;
  unint64_t v76;

  v4 = v2;
  v58 = a2;
  v60 = a1;
  v68 = type metadata accessor for PartiallyOrderedReferenceMap();
  v5 = MEMORY[0x1E0C80A78](v68);
  v67 = &v57[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v69 = &v57[-v7];
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v10 = sub_1BDDB6CE8(v8);
  v75 = v9;
  v76 = v10;
  v11 = (uint64_t *)(v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated);
  swift_beginAccess();
  v12 = *v11;
  swift_bridgeObjectRetain();
  sub_1BDDB96EC(v12);
  swift_bridgeObjectRelease();
  v59 = v11;
  v13 = *v11;
  v14 = *(_QWORD *)(*v11 + 56);
  v61 = *v11 + 56;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v64 = v13;
  swift_bridgeObjectRetain();
  v71 = v18;
  swift_beginAccess();
  v19 = 0;
  v62 = (unint64_t)(v15 + 63) >> 6;
  v63 = v4;
  while (1)
  {
    if (v17)
    {
      v66 = (v17 - 1) & v17;
      v20 = __clz(__rbit64(v17)) | (v19 << 6);
      goto LABEL_22;
    }
    v21 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      sub_1BDDB796C(v15, v3);
      sub_1BDDB796C(v15, v3);
LABEL_38:
      result = sub_1BDD9C3E0((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v21 >= v62)
      goto LABEL_32;
    v22 = *(_QWORD *)(v61 + 8 * v21);
    ++v19;
    if (!v22)
    {
      v19 = v21 + 1;
      if (v21 + 1 >= v62)
        goto LABEL_32;
      v22 = *(_QWORD *)(v61 + 8 * v19);
      if (!v22)
      {
        v19 = v21 + 2;
        if (v21 + 2 >= v62)
          goto LABEL_32;
        v22 = *(_QWORD *)(v61 + 8 * v19);
        if (!v22)
          break;
      }
    }
LABEL_21:
    v66 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v19 << 6);
LABEL_22:
    v24 = (uint64_t *)(*(_QWORD *)(v64 + 48) + 16 * v20);
    v15 = *v24;
    v3 = v24[1];
    v25 = type metadata accessor for RetainVisitor();
    v26 = swift_allocObject();
    sub_1BDDB6CA4(v15, v3);
    v27 = MEMORY[0x1E0DEE9D8];
    v28 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v29 = sub_1BDDB6CE8(v27);
    *(_QWORD *)(v26 + 16) = v28;
    v70 = v26;
    *(_QWORD *)(v26 + 24) = v29;
    v30 = v69;
    sub_1BDD9C318(v71, (uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v31 = *(_QWORD *)&v30[*(int *)(v68 + 20)];
    if (!*(_QWORD *)(v31 + 16))
      goto LABEL_38;
    v65 = v19;
    sub_1BDDB6CA4(v15, v3);
    sub_1BDDB6CA4(v15, v3);
    v32 = sub_1BDDB7F0C(v15, v3);
    if ((v33 & 1) == 0)
      goto LABEL_37;
    v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 48 * v32);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v15, v3);
    v35 = v15;
    v36 = v15;
    v15 = v3;
    sub_1BDDB796C(v36, v3);
    sub_1BDD9C3E0((uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (!v34)
      goto LABEL_39;
    v74[3] = v25;
    v74[4] = &off_1E7755DD0;
    v38 = v70;
    v74[0] = v70;
    v39 = *(void (**)(_QWORD *))(*(_QWORD *)v34 + 120);
    swift_retain();
    v39(v74);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    swift_release();
    swift_beginAccess();
    v40 = *(_QWORD *)(v38 + 16);
    v41 = *(_QWORD *)(v38 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB99FC(v40, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42 = v67;
    sub_1BDD9C318(v71, (uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v43 = *(_QWORD *)&v42[*(int *)(v68 + 20)];
    v3 = v65;
    if (*(_QWORD *)(v43 + 16))
    {
      sub_1BDDB6CA4(v35, v15);
      v44 = sub_1BDDB7F0C(v35, v15);
      if ((v45 & 1) != 0)
      {
        v46 = *(_QWORD *)(v43 + 56) + 48 * v44;
        v47 = *(_QWORD *)(v46 + 32);
        v48 = *(_QWORD *)(v46 + 40);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v35, v15);
        sub_1BDD9C3E0((uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1BDDB8E4C(v47, v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      sub_1BDDB796C(v35, v15);
    }
    sub_1BDD9C3E0((uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_30:
    swift_beginAccess();
    v72 = v35;
    v73 = v15;
    sub_1BDDB6CA4(v35, v15);
    v50 = sub_1BDDB7C54(v74, &v72);
    if (*(_QWORD *)(v49 + 16))
    {
      v51 = v49;
      swift_beginAccess();
      v52 = *(_QWORD *)(v70 + 24);
      *(_QWORD *)(v51 + 32) = *(_QWORD *)(v70 + 16);
      *(_QWORD *)(v51 + 40) = v52;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ((void (*)(_QWORD *, _QWORD))v50)(v74, 0);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v35, v15);
      sub_1BDDB796C(v72, v73);
    }
    else
    {
      ((void (*)(_QWORD *, _QWORD))v50)(v74, 0);
      sub_1BDDB796C(v72, v73);
      swift_endAccess();
      sub_1BDDB796C(v35, v15);
      swift_release();
    }
    v17 = v66;
    v19 = v3;
  }
  v23 = v21 + 3;
  if (v23 < v62)
  {
    v22 = *(_QWORD *)(v61 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        v19 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_36;
        if (v19 >= v62)
          goto LABEL_32;
        v22 = *(_QWORD *)(v61 + 8 * v19);
        ++v23;
        if (v22)
          goto LABEL_21;
      }
    }
    v19 = v23;
    goto LABEL_21;
  }
LABEL_32:
  swift_release();
  v53 = v75;
  v54 = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDB817C(v53, v54, v58 & 1);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = v59;
  if ((v60 & 1) != 0)
  {
    v56 = swift_bridgeObjectRetain();
    sub_1BDD8EE00(v56);
    swift_bridgeObjectRelease();
  }
  *v55 = MEMORY[0x1E0DEE9E8];
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDB6B88(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;

  v6 = a2[1];
  if ((v6 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_1BDDB6CA4(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)((v10 + 16 + a1) & ~v10);
  v12 = (const void *)(((unint64_t)a2 + v10 + 16) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
    if (v13)
      v15 = v14;
    else
      v15 = v14 + 1;
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
    v13 = *(_DWORD *)(v9 + 84);
    v14 = *(_QWORD *)(v9 + 64);
  }
  if (v13)
    v16 = v14;
  else
    v16 = v14 + 1;
  *(_QWORD *)(((unint64_t)v11 + v16 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + v16 + 7) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_1BDDB6CA4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_1BDDB6CE8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B710);
  v2 = (_QWORD *)sub_1BE1B3260();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    sub_1BDDB6CA4(v5, v6);
    swift_retain();
    result = sub_1BDE5E12C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BDDB6E0C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED650);
  v2 = (_QWORD *)sub_1BE1B3260();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    sub_1BDDB6CA4(v5, v6);
    result = sub_1BDDB7F0C(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1BDDB6F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_1BDDB796C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BE1B20F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1BDDB6F70(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
    sub_1BDDB796C(*a1, v4);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  return swift_release();
}

uint64_t sub_1BDDB700C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

uint64_t sub_1BDDB796C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void sub_1BDDB79B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDDB7A10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1BDDB7BF4);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_1BDDB7C08(_QWORD *a1)
{
  void *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  sub_1BDDB796C(v3, v2);
  free(v1);
}

void (*sub_1BDDB7C54(_QWORD *a1, uint64_t *a2))(_QWORD *a1)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = malloc(0x38uLL);
  *a1 = v4;
  v6 = *a2;
  v5 = a2[1];
  v4[4] = v6;
  v4[5] = v5;
  type metadata accessor for PartiallyOrderedReferenceMap();
  sub_1BDDB6CA4(v6, v5);
  v4[6] = sub_1BDDB7CCC(v4, v6, v5);
  return sub_1BDDB7C08;
}

uint64_t (*sub_1BDDB7CCC(_QWORD *a1, uint64_t a2, unint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_1BDDB6CA4(a2, a3);
  v6[6] = sub_1BDDB7D3C(v6, a2, a3);
  return sub_1BDDB7C50;
}

uint64_t (*sub_1BDDB7D3C(_QWORD *a1, uint64_t a2, unint64_t a3))()
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x60uLL);
  *a1 = v6;
  v6[8] = a2;
  v6[9] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1BDDB6CA4(a2, a3);
  v6[10] = sub_1BDD9A2BC(v6);
  v6[11] = sub_1BDDB7DD0(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1BDDB9F60;
}

void (*sub_1BDDB7DD0(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x58uLL);
  *a1 = v10;
  v10[7] = a3;
  v10[8] = v5;
  v10[6] = a2;
  v11 = *v5;
  v13 = sub_1BDDB7F0C(a2, a3);
  *((_BYTE *)v10 + 80) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_13;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 < v16 || (a4 & 1) == 0)
  {
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1BDDB7F70();
      goto LABEL_9;
    }
    sub_1BDDC50C4(v16, a4 & 1);
    v19 = sub_1BDDB7F0C(a2, a3);
    if ((v17 & 1) == (v20 & 1))
    {
      v13 = v19;
      goto LABEL_9;
    }
LABEL_13:
    result = (void (*)(uint64_t **))sub_1BE1B3680();
    __break(1u);
    return result;
  }
LABEL_9:
  v10[9] = v13;
  v21 = 0uLL;
  v22 = 0uLL;
  v23 = 0uLL;
  if ((v17 & 1) != 0)
  {
    v24 = (__int128 *)(*(_QWORD *)(*v5 + 56) + 48 * v13);
    v21 = *v24;
    v22 = v24[1];
    v23 = v24[2];
  }
  *(_OWORD *)v10 = v21;
  *((_OWORD *)v10 + 1) = v22;
  *((_OWORD *)v10 + 2) = v23;
  return sub_1BDDB9FC4;
}

uint64_t sub_1BDDB7F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BE1B36F8();
  sub_1BE1B1E8C();
  v4 = sub_1BE1B371C();
  return sub_1BDDB700C(a1, a2, v4);
}

void *sub_1BDDB7F70()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  __int128 v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26B8);
  v2 = *v0;
  v3 = sub_1BE1B3248();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 48 * v15;
    v18 = (__int128 *)(*(_QWORD *)(v2 + 56) + v17);
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v20 = v18[1];
    v26 = v18[2];
    v21 = *v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v19;
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v17);
    *v22 = v21;
    v22[1] = v20;
    v22[2] = v26;
    sub_1BDDB6CA4(v19, *((unint64_t *)&v19 + 1));
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1BDDB817C(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t i;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t result;
  _QWORD *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  _QWORD *v65;
  uint64_t v66[2];
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;

  LODWORD(v69) = a3;
  v6 = sub_1BDDB6CE8(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v67 = v6;
  sub_1BDDB87E8(a2, (uint64_t)sub_1BDF169D8, 0, isUniquelyReferenced_nonNull_native, &v67);
  if (v3)
    goto LABEL_78;
  v8 = v67;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_37:
    v30 = 0;
    v31 = v8 + 64;
    v32 = 1 << *(_BYTE *)(v8 + 32);
    v33 = -1;
    if (v32 < 64)
      v33 = ~(-1 << v32);
    v34 = v33 & *(_QWORD *)(v8 + 64);
    v35 = (unint64_t)(v32 + 63) >> 6;
    v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v59 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v60 = v8 + 64;
    v63 = v8;
    v61 = v35;
    if (!v34)
      goto LABEL_43;
LABEL_40:
    v37 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
    for (i = v37 | (v30 << 6); ; i = __clz(__rbit64(v41)) + (v30 << 6))
    {
      v39 = *(_QWORD *)(v8 + 56);
      v40 = *(_QWORD *)(v39 + 16 * i + 8);
      if (v40)
      {
        v65 = v36;
        v43 = 16 * i;
        v44 = (uint64_t *)(*(_QWORD *)(v8 + 48) + v43);
        v46 = *v44;
        v45 = v44[1];
        v47 = *(_QWORD *)(v39 + v43);
        v48 = *(_QWORD *)(v47 + 16);
        v49 = *(_QWORD *)(v47 + 24);
        swift_beginAccess();
        swift_retain_n();
        v69 = v45;
        sub_1BDDB6CA4(v46, v45);
        sub_1BDDB6CA4(v48, v49);
        v50 = sub_1BDE59098(v48, v49, v47, v40, 0);
        swift_endAccess();
        sub_1BDDB796C(v48, v49);
        swift_release();
        if ((v50 & 1) != 0)
        {
          sub_1BDDB6CA4(v46, v69);
          v36 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v59 = sub_1BDE067B0(0, v59[2] + 1, 1, v59);
          v31 = v60;
          v56 = v59[2];
          v55 = v59[3];
          if (v56 >= v55 >> 1)
            v59 = sub_1BDE067B0((_QWORD *)(v55 > 1), v56 + 1, 1, v59);
          v59[2] = v56 + 1;
          v57 = &v59[2 * v56];
          v53 = v46;
          v54 = v69;
          v57[4] = v46;
          v57[5] = v54;
        }
        else
        {
          swift_retain();
          v36 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v36 = sub_1BDE06BF0(0, v65[2] + 1, 1, v65);
          v31 = v60;
          v52 = v36[2];
          v51 = v36[3];
          if (v52 >= v51 >> 1)
            v36 = sub_1BDE06BF0((_QWORD *)(v51 > 1), v52 + 1, 1, v36);
          v36[2] = v52 + 1;
          v36[v52 + 4] = v47;
          v53 = v46;
          v54 = v69;
        }
        sub_1BDDB796C(v53, v54);
        swift_release();
        v8 = v63;
        v35 = v61;
        if (v34)
          goto LABEL_40;
      }
      else if (v34)
      {
        goto LABEL_40;
      }
LABEL_43:
      v19 = __OFADD__(v30++, 1);
      if (v19)
        goto LABEL_76;
      if (v30 >= v35)
      {
LABEL_73:
        swift_release();
        return (uint64_t)v36;
      }
      v41 = *(_QWORD *)(v31 + 8 * v30);
      if (!v41)
      {
        v42 = v30 + 1;
        if (v30 + 1 >= v35)
          goto LABEL_73;
        v41 = *(_QWORD *)(v31 + 8 * v42);
        if (!v41)
        {
          v42 = v30 + 2;
          if (v30 + 2 >= v35)
            goto LABEL_73;
          v41 = *(_QWORD *)(v31 + 8 * v42);
          if (!v41)
          {
            v42 = v30 + 3;
            if (v30 + 3 >= v35)
              goto LABEL_73;
            v41 = *(_QWORD *)(v31 + 8 * v42);
            if (!v41)
            {
              v42 = v30 + 4;
              if (v30 + 4 >= v35)
                goto LABEL_73;
              v41 = *(_QWORD *)(v31 + 8 * v42);
              if (!v41)
              {
                while (1)
                {
                  v30 = v42 + 1;
                  if (__OFADD__(v42, 1))
                    goto LABEL_77;
                  if (v30 >= v35)
                    goto LABEL_73;
                  v41 = *(_QWORD *)(v31 + 8 * v30);
                  ++v42;
                  if (v41)
                    goto LABEL_55;
                }
              }
            }
          }
        }
        v30 = v42;
      }
LABEL_55:
      v34 = (v41 - 1) & v41;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (2)
  {
    v62 = v8;
    v9 = MEMORY[0x1E0DEE9D8];
    v10 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v11 = sub_1BDDB6CE8(v9);
    swift_bridgeObjectRelease();
    v12 = 0;
    v67 = v10;
    v68 = v11;
    v13 = a1 + 64;
    v14 = 1 << *(_BYTE *)(a1 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & *(_QWORD *)(a1 + 64);
    v64 = (unint64_t)(v14 + 63) >> 6;
    while (1)
    {
      if (v16)
      {
        v17 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v18 = v17 | (v12 << 6);
        goto LABEL_25;
      }
      v19 = __OFADD__(v12++, 1);
      if (v19)
      {
        __break(1u);
        goto LABEL_75;
      }
      if (v12 >= v64)
        goto LABEL_35;
      v20 = *(_QWORD *)(v13 + 8 * v12);
      if (!v20)
        break;
LABEL_24:
      v16 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_25:
      v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v18);
      v23 = *v22;
      v24 = v22[1];
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18);
      if ((v69 & 1) != 0 || v25)
      {
        v66[0] = *v22;
        v66[1] = v24;
        sub_1BDDB6CA4(v23, v24);
        v26 = sub_1BDD99168(v66, v25);
        if ((unint64_t)(v26 - 1) < 2)
        {
          sub_1BDDCCD34(v26);
          goto LABEL_9;
        }
        if (!v26 || v26 == 3)
        {
LABEL_9:
          sub_1BDDB796C(v23, v24);
        }
        else
        {
          sub_1BDDB8E4C(v26, v27);
          sub_1BDDB796C(v23, v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    v21 = v12 + 1;
    if (v12 + 1 >= v64)
      goto LABEL_35;
    v20 = *(_QWORD *)(v13 + 8 * v21);
    if (v20)
      goto LABEL_23;
    v21 = v12 + 2;
    if (v12 + 2 >= v64)
      goto LABEL_35;
    v20 = *(_QWORD *)(v13 + 8 * v21);
    if (v20)
      goto LABEL_23;
    v21 = v12 + 3;
    if (v12 + 3 >= v64)
      goto LABEL_35;
    v20 = *(_QWORD *)(v13 + 8 * v21);
    if (v20)
      goto LABEL_23;
    v21 = v12 + 4;
    if (v12 + 4 >= v64)
    {
LABEL_35:
      swift_release();
      v28 = v68;
      swift_bridgeObjectRetain_n();
      v29 = swift_isUniquelyReferenced_nonNull_native();
      v66[0] = v62;
      sub_1BDDB87E8(v28, (uint64_t)sub_1BDF169D8, 0, v29, v66);
      v8 = v66[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v67;
      if (!*(_QWORD *)(v67 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      continue;
    }
    break;
  }
  v20 = *(_QWORD *)(v13 + 8 * v21);
  if (v20)
  {
LABEL_23:
    v12 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v64)
      goto LABEL_35;
    v20 = *(_QWORD *)(v13 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_24;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1BDDB87E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v38 = a1;
  v39 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v40 = v8;
  v41 = 0;
  v42 = v11 & v9;
  v43 = a2;
  v44 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BDDB8A2C(&v35);
  v12 = v36;
  if (!v36)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1BDE27FD0();
    return swift_release();
  }
  while (1)
  {
    v14 = v35;
    v15 = v37;
    v16 = (_QWORD *)*a5;
    v18 = sub_1BDE5E12C(v35, *((uint64_t *)&v35 + 1));
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((a4 & 1) != 0)
      {
        v25 = (_QWORD *)*a5;
        if ((v17 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        sub_1BDE65630();
        v25 = (_QWORD *)*a5;
        if ((v22 & 1) == 0)
          goto LABEL_17;
      }
    }
    else
    {
      sub_1BDE612E8(v21, a4 & 1);
      v23 = sub_1BDE5E12C(v14, *((uint64_t *)&v14 + 1));
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_22;
      v18 = v23;
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) == 0)
      {
LABEL_17:
        v25[(v18 >> 6) + 8] |= 1 << v18;
        *(_OWORD *)(v25[6] + 16 * v18) = v14;
        v32 = (_QWORD *)(v25[7] + 16 * v18);
        *v32 = v12;
        v32[1] = v15;
        v33 = v25[2];
        v29 = __OFADD__(v33, 1);
        v34 = v33 + 1;
        if (v29)
          goto LABEL_21;
        v25[2] = v34;
        goto LABEL_6;
      }
    }
    v26 = (uint64_t *)(v25[7] + 16 * v18);
    v27 = *v26;
    v28 = v26[1];
    swift_retain();
    swift_release();
    sub_1BDDB796C(v14, *((unint64_t *)&v14 + 1));
    v29 = __OFADD__(v28, v15);
    v30 = v28 + v15;
    if (v29)
      goto LABEL_20;
    v31 = (_QWORD *)(v25[7] + 16 * v18);
    swift_release();
    *v31 = v27;
    v31[1] = v30;
LABEL_6:
    sub_1BDDB8A2C(&v35);
    v12 = v36;
    a4 = 1;
    if (!v36)
      goto LABEL_5;
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDDB8A2C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *);
  uint64_t result;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD v24[4];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = 16 * v8;
    v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v9);
    v15 = *v13;
    v14 = v13[1];
    v1[3] = v6;
    v1[4] = v7;
    v16 = (void (*)(_QWORD *))v1[5];
    v24[0] = v11;
    v24[1] = v12;
    v24[2] = v15;
    v24[3] = v14;
    sub_1BDDB6CA4(v11, v12);
    swift_retain();
    v16(v24);
    sub_1BDDB796C(v11, v12);
    return swift_release();
  }
  v18 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      v20 = v1[1];
      v21 = *(_QWORD *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_7:
        v7 = (v21 - 1) & v21;
        v8 = __clz(__rbit64(v21)) + (v18 << 6);
        v6 = v18;
        goto LABEL_3;
      }
      v22 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_10:
          v18 = v22;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * (v5 + 3));
          if (v21)
          {
            v18 = v5 + 3;
            goto LABEL_7;
          }
          v22 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v19)
          {
            v21 = *(_QWORD *)(v20 + 8 * v22);
            if (v21)
              goto LABEL_10;
            v18 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v19)
            {
              v21 = *(_QWORD *)(v20 + 8 * v18);
              if (v21)
                goto LABEL_7;
              v6 = v19 - 1;
              v23 = v5 + 6;
              while (v19 != v23)
              {
                v21 = *(_QWORD *)(v20 + 8 * v23++);
                if (v21)
                {
                  v18 = v23 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t type metadata accessor for RetainVisitor()
{
  return objc_opt_self();
}

uint64_t sub_1BDDB8BFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - v7;
  v9 = (uint64_t)v1 + *(_QWORD *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 16) + 40))(a1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v4);
  }
  return result;
}

uint64_t CRStruct_1.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  _QWORD v14[2];

  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)v14 - v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, v5);
  v14[1] = v10;
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 40))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 8) + 24))(a2);
  sub_1BDDB1100(a1, v12);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDB8E4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(_QWORD *@<X8>);
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v39;
  int64_t v40;
  _QWORD *v42;

  v3 = v2;
  v39 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v40 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    sub_1BDDB6CA4(*v14, v15);
    sub_1BDDB6CA4(v16, v15);
    sub_1BDE0D5B8((uint64_t)v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = (_QWORD *)*v3;
    v42 = (_QWORD *)*v3;
    *v3 = 0x8000000000000000;
    v21 = sub_1BDDB7F0C(v16, v15);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = v20;
    if (v19[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDE642C4();
        v19 = v42;
      }
    }
    else
    {
      sub_1BDE5F540(v24, isUniquelyReferenced_nonNull_native);
      v19 = v42;
      v26 = sub_1BDDB7F0C(v16, v15);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_41;
      v21 = v26;
    }
    *v3 = v19;
    swift_bridgeObjectRelease();
    v28 = (_QWORD *)*v3;
    if ((v25 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v28[(v21 >> 6) + 8] |= 1 << v21;
      v29 = (uint64_t *)(v28[6] + 16 * v21);
      *v29 = v16;
      v29[1] = v15;
      *(_QWORD *)(v28[7] + 8 * v21) = 0;
      v30 = v28[2];
      v31 = v30 + 1;
      v32 = __OFADD__(v30, 1);
      swift_bridgeObjectRetain();
      if (v32)
        goto LABEL_38;
      v28[2] = v31;
      sub_1BDDB6CA4(v16, v15);
    }
    v33 = v28[7];
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v33 + 8 * v21);
    v35 = __OFSUB__(v34, v17);
    v36 = v34 - v17;
    if (v35)
      goto LABEL_37;
    *(_QWORD *)(v33 + 8 * v21) = v36;
    sub_1BDDB796C(v16, v15);
    sub_1BDDB796C(v16, v15);
    v7 = sub_1BDEE6148;
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_39;
    if (v11 >= v40)
      goto LABEL_35;
    v12 = *(_QWORD *)(v39 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v40)
        goto LABEL_35;
      v12 = *(_QWORD *)(v39 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v40)
          goto LABEL_35;
        v12 = *(_QWORD *)(v39 + 8 * v8);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v40)
  {
LABEL_35:
    swift_release();
    sub_1BDDB9174(a2);
    return sub_1BDE0D5B8((uint64_t)v7);
  }
  v12 = *(_QWORD *)(v39 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v40)
      goto LABEL_35;
    v12 = *(_QWORD *)(v39 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDDB9174(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  int64_t v37;
  char v38;
  uint64_t *v39;
  char v40;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  int64_t v66;
  uint64_t *v67;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;

  v2 = v1;
  v65 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v66 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v67 = v1;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v6 << 6);
      goto LABEL_22;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_58;
    if (v10 >= v66)
      return swift_release();
    v11 = *(_QWORD *)(v65 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v66)
        return swift_release();
      v11 = *(_QWORD *)(v65 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v66)
          return swift_release();
        v11 = *(_QWORD *)(v65 + 8 * v6);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_22:
    v13 = 16 * v9;
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v13);
    v16 = *v14;
    v15 = v14[1];
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(*v2 + 16);
    sub_1BDDB6CA4(*v14, v15);
    swift_retain();
    if (v20 && (sub_1BDE5E12C(v16, v15), (v21 & 1) != 0))
    {
      v22 = v6;
      sub_1BDDB6CA4(v16, v15);
      sub_1BDDB6CA4(v16, v15);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v24 = v2;
      v25 = isUniquelyReferenced_nonNull_native;
      v26 = *v24;
      v69 = *v24;
      *v24 = 0x8000000000000000;
      sub_1BDDB6CA4(v16, v15);
      v28 = sub_1BDE5E12C(v16, v15);
      v29 = *(_QWORD *)(v26 + 16);
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        goto LABEL_59;
      v32 = v27;
      if (*(_QWORD *)(v26 + 24) >= v31)
      {
        if ((v25 & 1) != 0)
        {
          v2 = v67;
          if ((v27 & 1) == 0)
            goto LABEL_60;
        }
        else
        {
          sub_1BDE65630();
          v2 = v67;
          if ((v32 & 1) == 0)
            goto LABEL_60;
        }
      }
      else
      {
        sub_1BDE612E8(v31, v25);
        v33 = sub_1BDE5E12C(v16, v15);
        if ((v32 & 1) != (v34 & 1))
          goto LABEL_64;
        v28 = v33;
        v2 = v67;
        if ((v32 & 1) == 0)
          goto LABEL_60;
      }
      v59 = *(_QWORD *)(v69 + 56);
      v60 = v59 + 16 * v28;
      v62 = *(_QWORD *)(v60 + 8);
      v61 = (_QWORD *)(v60 + 8);
      v63 = v62 - v18;
      if (__OFSUB__(v62, v18))
        goto LABEL_61;
      if (*(_QWORD *)(v59 + 16 * v28))
      {
        *v61 = v63;
      }
      else
      {
        swift_arrayDestroy();
        sub_1BDEF1620(v28, v69);
      }
      v6 = v22;
      sub_1BDDB796C(v16, v15);
      *v2 = v69;
      sub_1BDDB796C(v16, v15);
      sub_1BDDB796C(v16, v15);
      swift_release();
      sub_1BDDB796C(v16, v15);
    }
    else
    {
      v35 = __OFSUB__(0, v18);
      v36 = -v18;
      if (v35)
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if (v19)
      {
        v37 = v6;
        sub_1BDDB6CA4(v16, v15);
        v38 = swift_isUniquelyReferenced_nonNull_native();
        v39 = v2;
        v40 = v38;
        v41 = (_QWORD *)*v39;
        v70 = (_QWORD *)*v39;
        *v39 = 0x8000000000000000;
        v43 = sub_1BDE5E12C(v16, v15);
        v44 = v41[2];
        v45 = (v42 & 1) == 0;
        v46 = v44 + v45;
        if (__OFADD__(v44, v45))
          goto LABEL_57;
        v47 = v42;
        if (v41[3] >= v46)
        {
          if ((v40 & 1) == 0)
            sub_1BDE65630();
        }
        else
        {
          sub_1BDE612E8(v46, v40);
          v48 = sub_1BDE5E12C(v16, v15);
          if ((v47 & 1) != (v49 & 1))
            goto LABEL_64;
          v43 = v48;
        }
        v2 = v67;
        if ((v47 & 1) != 0)
        {
          v7 = (_QWORD *)(v70[7] + 16 * v43);
          swift_release();
          *v7 = v19;
          v7[1] = v36;
        }
        else
        {
          v70[(v43 >> 6) + 8] |= 1 << v43;
          v55 = (uint64_t *)(v70[6] + 16 * v43);
          *v55 = v16;
          v55[1] = v15;
          v56 = (_QWORD *)(v70[7] + 16 * v43);
          *v56 = v19;
          v56[1] = v36;
          v57 = v70[2];
          v35 = __OFADD__(v57, 1);
          v58 = v57 + 1;
          if (v35)
            goto LABEL_62;
          v70[2] = v58;
          sub_1BDDB6CA4(v16, v15);
        }
        *v67 = (uint64_t)v70;
        swift_bridgeObjectRelease();
        sub_1BDDB796C(v16, v15);
        sub_1BDDB796C(v16, v15);
        v6 = v37;
      }
      else
      {
        sub_1BDDB6CA4(v16, v15);
        swift_bridgeObjectRetain();
        v50 = sub_1BDE5E12C(v16, v15);
        v52 = v51;
        swift_bridgeObjectRelease();
        if ((v52 & 1) != 0)
        {
          v53 = swift_isUniquelyReferenced_nonNull_native();
          v54 = *v2;
          v71 = *v2;
          *v2 = 0x8000000000000000;
          if ((v53 & 1) == 0)
          {
            sub_1BDE65630();
            v54 = v71;
          }
          sub_1BDDB796C(*(_QWORD *)(*(_QWORD *)(v54 + 48) + 16 * v50), *(_QWORD *)(*(_QWORD *)(v54 + 48) + 16 * v50 + 8));
          sub_1BDEF1620(v50, v54);
          *v2 = v54;
          swift_bridgeObjectRelease();
          sub_1BDDB796C(v16, v15);
          swift_release();
        }
        else
        {
          sub_1BDDB796C(v16, v15);
        }
        sub_1BDDB796C(v16, v15);
      }
    }
  }
  v12 = v10 + 3;
  if (v12 >= v66)
    return swift_release();
  v11 = *(_QWORD *)(v65 + 8 * v12);
  if (v11)
  {
    v6 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v66)
      return swift_release();
    v11 = *(_QWORD *)(v65 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_63:
  __break(1u);
LABEL_64:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDDB96EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2650);
  sub_1BE1B25D0();
  v32 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v33 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
    }
    else
    {
      v10 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_38;
      if (v10 >= v33)
        return swift_release();
      v11 = *(_QWORD *)(v32 + 8 * v10);
      ++v7;
      if (!v11)
      {
        v7 = v10 + 1;
        if (v10 + 1 >= v33)
          return swift_release();
        v11 = *(_QWORD *)(v32 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 2;
          if (v10 + 2 >= v33)
            return swift_release();
          v11 = *(_QWORD *)(v32 + 8 * v7);
          if (!v11)
          {
            v7 = v10 + 3;
            if (v10 + 3 >= v33)
              return swift_release();
            v11 = *(_QWORD *)(v32 + 8 * v7);
            if (!v11)
            {
              v12 = v10 + 4;
              if (v12 >= v33)
                return swift_release();
              v11 = *(_QWORD *)(v32 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  v7 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_39;
                  if (v7 >= v33)
                    return swift_release();
                  v11 = *(_QWORD *)(v32 + 8 * v7);
                  ++v12;
                  if (v11)
                    goto LABEL_23;
                }
              }
              v7 = v12;
            }
          }
        }
      }
LABEL_23:
      v6 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v7 << 6);
    }
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v14 = *v13;
    v15 = v13[1];
    sub_1BDDB6CA4(*v13, v15);
    sub_1BDDB6CA4(v14, v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = (_QWORD *)*v2;
    v34 = (_QWORD *)*v2;
    *v2 = 0x8000000000000000;
    v19 = sub_1BDDB7F0C(v14, v15);
    v20 = v17[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v17[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v26 = v34;
        if ((v18 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_1BDE642C4();
        v26 = v34;
        if ((v23 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_1BDE5F540(v22, isUniquelyReferenced_nonNull_native);
      v24 = sub_1BDDB7F0C(v14, v15);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_40;
      v19 = v24;
      v26 = v34;
      if ((v23 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v26[7] + 8 * v19) = 0;
        goto LABEL_5;
      }
    }
    v26[(v19 >> 6) + 8] |= 1 << v19;
    v27 = (uint64_t *)(v26[6] + 16 * v19);
    *v27 = v14;
    v27[1] = v15;
    *(_QWORD *)(v26[7] + 8 * v19) = 0;
    v28 = v26[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_37;
    v26[2] = v30;
    sub_1BDDB6CA4(v14, v15);
LABEL_5:
    *v2 = v26;
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v14, v15);
    sub_1BDDB796C(v14, v15);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDDB99FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(_QWORD *@<X8>);
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  uint64_t v40;
  int64_t v41;
  _QWORD *v43;

  v3 = v2;
  v40 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v41 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    sub_1BDDB6CA4(*v14, v15);
    sub_1BDDB6CA4(v16, v15);
    sub_1BDE0D5B8((uint64_t)v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43 = (_QWORD *)*v3;
    v19 = v43;
    *v3 = 0x8000000000000000;
    v21 = sub_1BDDB7F0C(v16, v15);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v25 = v20;
    if (v19[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1BDE642C4();
        v19 = v43;
      }
    }
    else
    {
      sub_1BDE5F540(v24, isUniquelyReferenced_nonNull_native);
      v19 = v43;
      v26 = sub_1BDDB7F0C(v16, v15);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_41;
      v21 = v26;
    }
    *v3 = v19;
    swift_bridgeObjectRelease();
    v28 = (_QWORD *)*v3;
    if ((v25 & 1) != 0)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v28[(v21 >> 6) + 8] |= 1 << v21;
      v29 = (uint64_t *)(v28[6] + 16 * v21);
      *v29 = v16;
      v29[1] = v15;
      *(_QWORD *)(v28[7] + 8 * v21) = 0;
      v30 = v28[2];
      v31 = v30 + 1;
      v32 = __OFADD__(v30, 1);
      swift_bridgeObjectRetain();
      if (v32)
        goto LABEL_38;
      v28[2] = v31;
      sub_1BDDB6CA4(v16, v15);
    }
    v33 = v28[7];
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v33 + 8 * v21);
    v35 = __OFADD__(v34, v17);
    v36 = v34 + v17;
    if (v35)
      goto LABEL_37;
    *(_QWORD *)(v33 + 8 * v21) = v36;
    sub_1BDDB796C(v16, v15);
    sub_1BDDB796C(v16, v15);
    v7 = sub_1BDEE6148;
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_39;
    if (v11 >= v41)
      goto LABEL_35;
    v12 = *(_QWORD *)(v40 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v41)
        goto LABEL_35;
      v12 = *(_QWORD *)(v40 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v41)
          goto LABEL_35;
        v12 = *(_QWORD *)(v40 + 8 * v8);
        if (!v12)
          break;
      }
    }
LABEL_18:
    v6 = (v12 - 1) & v12;
  }
  v13 = v11 + 3;
  if (v13 >= v41)
  {
LABEL_35:
    swift_release();
    swift_bridgeObjectRetain();
    v37 = swift_isUniquelyReferenced_nonNull_native();
    v43 = (_QWORD *)v3[1];
    v3[1] = 0x8000000000000000;
    sub_1BDDB87E8(a2, (uint64_t)sub_1BDF169D8, 0, v37, &v43);
    v3[1] = v43;
    swift_bridgeObjectRelease();
    return sub_1BDE0D5B8((uint64_t)v7);
  }
  v12 = *(_QWORD *)(v40 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v41)
      goto LABEL_35;
    v12 = *(_QWORD *)(v40 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_18;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

void sub_1BDDB9D6C(_QWORD *a1, char a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25[2];
  __int128 v26;

  v3 = *a1;
  v5 = *(_QWORD *)(*a1 + 40);
  v4 = *(_QWORD *)(*a1 + 48);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 64))(*a1, 0);
  sub_1BDDB796C(v5, v4);
  if ((a2 & 1) == 0)
  {
    v6 = *(int *)(v3 + 72);
    v7 = *(_QWORD *)(v3 + 32);
    v26 = *(_OWORD *)(v3 + 40);
    sub_1BDDBA1B8((uint64_t)&v26, 0);
    v8 = *(_QWORD *)(v7 + v6);
    if (*(_QWORD *)(v8 + 16))
    {
      v10 = *(_QWORD *)(v3 + 40);
      v9 = *(_QWORD *)(v3 + 48);
      sub_1BDDB6CA4(v10, v9);
      v11 = sub_1BDDB7F0C(v10, v9);
      v13 = *(_QWORD *)(v3 + 40);
      v12 = *(_QWORD *)(v3 + 48);
      if ((v14 & 1) != 0)
      {
        v15 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 48 * v11);
        v17 = *v15;
        v16 = v15[1];
        v19 = v15[2];
        v18 = v15[3];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v13, v12);
        if (v19)
        {
          v20 = *(_QWORD *)(v3 + 48);
          v21 = *(_QWORD *)(v3 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1BDDBA008(v17, v16, v19);
          v25[0] = v21;
          v25[1] = v20;
          *(_QWORD *)&v26 = v19;
          *((_QWORD *)&v26 + 1) = v18;
          sub_1BDDBB074(v25, (uint64_t *)&v26);
          v22 = *(_QWORD *)(v18 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v23 = *(_QWORD *)(v3 + 40);
          v24 = *(_QWORD *)(v3 + 48);
          if (v22)
          {
            sub_1BDDB6CA4(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
            sub_1BDDBC6BC((uint64_t *)&v26, v23, v24);
            sub_1BDDB796C(v26, *((unint64_t *)&v26 + 1));
            goto LABEL_9;
          }
        }
      }
      else
      {
        sub_1BDDB796C(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
      }
    }
    sub_1BDDBA2EC(&v26);
    sub_1BDD9CC0C(v26, *((unint64_t *)&v26 + 1));
  }
LABEL_9:
  free((void *)v3);
}

void sub_1BDDB9F64(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  unint64_t v3;
  uint64_t v4;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);
  sub_1BDDB796C(v4, v3);
  v2(v1, 0);
  free(v1);
}

uint64_t sub_1BDDB9FB8(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

void sub_1BDDB9FC4(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1BDDBA064(*a1, *((_BYTE *)*a1 + 80), (uint64_t *)(*a1)[8], (*a1)[9], (*a1)[6], (*a1)[7]);
  sub_1BDDBA008(*v1, v1[1], v1[2]);
  free(v1);
}

uint64_t sub_1BDDBA008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDDBA064(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1[5];
  if (v10)
  {
    *(_QWORD *)&v20 = *a1;
    *((_QWORD *)&v20 + 1) = v9;
    *(_QWORD *)&v21 = v10;
    *((_QWORD *)&v21 + 1) = v11;
    *(_QWORD *)&v22 = v12;
    *((_QWORD *)&v22 + 1) = v13;
    v15 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      v16 = (_OWORD *)(v15[7] + 48 * a4);
      v17 = v21;
      *v16 = v20;
      v16[1] = v17;
      v16[2] = v22;
    }
    else
    {
      sub_1BE1551D0(a4, a5, a6, &v20, v15);
      sub_1BDDB6CA4(a5, a6);
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_1BDEF1804(a4, *a3);
  }
  return sub_1BDDBA160(v8, v9, v10);
}

uint64_t sub_1BDDBA160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BDDBA1B8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *i;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;

  result = type metadata accessor for PartiallyOrderedReferenceMap();
  v5 = v2 + *(int *)(result + 24);
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (v7)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_17:
      v6 = sub_1BDDC5B40(v6);
    v8 = 0;
    for (i = v6 + 6; ; i += 3)
    {
      if (v7 == v8)
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      if (v8 >= v6[2])
        goto LABEL_16;
      sub_1BDDBA2EC(&v12);
      v10 = *((_QWORD *)&v12 + 1);
      result = sub_1BDD9CC0C(v12, *((unint64_t *)&v12 + 1));
      if (v10 >> 60 != 15)
        break;
      if (v7 == ++v8)
      {
        *(_QWORD *)v5 = v6;
        return result;
      }
    }
    *(_QWORD *)v5 = v6;
    if ((a2 & 1) != 0)
    {
      v11 = v6[2];
      if (v8 >= v11)
      {
        __break(1u);
      }
      else if (v11 >= 2 && !*(_QWORD *)(*i + 16))
      {
        sub_1BDFCE028(v8, (uint64_t)&v12);
        sub_1BDDC8EA0(v12);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

double sub_1BDDBA2EC@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  double result;

  v2 = *v1;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BE1B1E8C();
  v3 = sub_1BE1B371C() & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 56 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  result = 0.0;
  *a1 = xmmword_1BE1B6B20;
  return result;
}

unint64_t sub_1BDDBACF0(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        sub_1BE1B36F8();
        sub_1BDDB6CA4(v11, v12);
        sub_1BE1B1E8C();
        v13 = sub_1BE1B371C();
        sub_1BDDB796C(v11, v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void *sub_1BDDBAEC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2680);
  v2 = *v0;
  v3 = sub_1BE1B3020();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_1BDDB6CA4(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1BDDBB074(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t inited;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v3 = v2;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  v30 = 0;
  v8 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 24);
  v9 = *(_QWORD **)(v2 + v8);
  v10 = v9[2];
  if (v10)
  {
    v25 = v5;
    v26 = v8;
    v27 = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = 0;
    v3 = 24 * v10;
    while (1)
    {
      if (v10 > v9[2])
      {
        __break(1u);
LABEL_28:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 = v26;
        v3 = v27;
        v5 = v25;
        break;
      }
      v12 = *(_QWORD *)((char *)v9 + v3 + 8);
      if (v12)
      {
        if (__OFADD__(v11++, 1))
        {
          __break(1u);
          goto LABEL_33;
        }
        v5 = *(_QWORD *)((char *)v9 + v3 + 16);
        v30 = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((sub_1BDDB04C0(v7, v5) & 1) != 0)
        {
          sub_1BDDC8EA0(v12);
LABEL_11:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v9[2] == v10)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF508);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1BE1B61B0;
            *(_QWORD *)(inited + 32) = v4;
            *(_QWORD *)(inited + 40) = v25;
            sub_1BDDB6CA4(v4, v25);
            v16 = sub_1BDDBFED0(inited);
            swift_setDeallocating();
            swift_arrayDestroy();
            v17 = *(_QWORD **)(v27 + v26);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v17 = sub_1BDDC5D74(0, v17[2] + 1, 1, v17);
            v19 = v17[2];
            v18 = v17[3];
            if (v19 >= v18 >> 1)
              v17 = sub_1BDDC5D74((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
            v17[2] = v19 + 1;
            v20 = &v17[3 * v19];
            v20[4] = 0;
            v20[5] = 0;
            v20[6] = v16;
            *(_QWORD *)(v27 + v26) = v17;
            goto LABEL_21;
          }
          v8 = v25;
          sub_1BDDB6CA4(v4, v25);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = sub_1BDDC5B40(v9);
          if (v10 < v9[2])
          {
            sub_1BDDBC6BC(&v28, v4, v25);
            sub_1BDDB796C(v28, v29);
            *(_QWORD *)(v27 + v26) = v9;
            goto LABEL_21;
          }
          __break(1u);
LABEL_35:
          v9 = sub_1BDDC5B40(v9);
          if (!v9[2])
            goto LABEL_36;
LABEL_31:
          sub_1BDDBC6BC(&v28, v4, v5);
          sub_1BDDB796C(v28, v29);
          *(_QWORD *)(v3 + v8) = v9;
LABEL_21:
          if (v30 >= 21)
          {
            if (qword_1EF52B8F0 != -1)
LABEL_33:
              swift_once();
            v21 = sub_1BE1B23C0();
            __swift_project_value_buffer(v21, (uint64_t)qword_1EF549068);
            v22 = sub_1BE1B23A8();
            v23 = sub_1BE1B2DD4();
            if (os_log_type_enabled(v22, v23))
            {
              v24 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)v24 = 134217984;
              swift_beginAccess();
              sub_1BE1B2F0C();
              _os_log_impl(&dword_1BDD82000, v22, v23, "Excessive insertion comparisons: %ld", v24, 0xCu);
              MEMORY[0x1C3B7E068](v24, -1, -1);
            }

          }
          return;
        }
        v14 = sub_1BDDB04C0(v6, v12);
        sub_1BDDC8EA0(v12);
        if ((v14 & 1) != 0)
          goto LABEL_11;
      }
      v3 -= 24;
      if (!--v10)
        goto LABEL_28;
    }
  }
  sub_1BDDB6CA4(v4, v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_35;
  if (v9[2])
    goto LABEL_31;
LABEL_36:
  __break(1u);
}

uint64_t sub_1BDDBB468(uint64_t a1, uint64_t (*a2)(uint64_t *), unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t (*v29)(uint64_t *);
  unint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t (*v148)(uint64_t *);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158[3];
  uint64_t v159[3];
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166[10];
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;

  v5 = v4;
  v146 = a4;
  v147 = a3;
  v148 = a2;
  v145 = a1;
  v7 = sub_1BE1B1F58();
  v131 = *(_QWORD *)(v7 - 8);
  v132 = v7;
  MEMORY[0x1E0C80A78](v7);
  v135 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for PartiallyOrderedReferenceMap();
  v9 = MEMORY[0x1E0C80A78](v157);
  v151 = (uint64_t)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v156 = (uint64_t)&v130 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v144 = (uint64_t)&v130 - v14;
  MEMORY[0x1E0C80A78](v13);
  v155 = (uint64_t)&v130 - v15;
  v178 = MEMORY[0x1E0DEE9E8];
  v166[9] = MEMORY[0x1E0DEE9E8];
  v167 = MEMORY[0x1E0DEE9E8];
  v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v17 = *v16;
  v18 = v16[1];
  v19 = (uint64_t *)(v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v20 = *v19;
  v136 = v19;
  v21 = v19[1];
  v133 = v19 + 1;
  v166[0] = v20;
  v166[1] = v21;
  v138 = v17;
  swift_bridgeObjectRetain();
  v139 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = v145;
  v23 = sub_1BDD93B58(v166);
  swift_bridgeObjectRelease();
  v24 = v23;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v23 + 16);
  v152 = v5;
  v140 = v23;
  if (v25)
  {
    v26 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
    v27 = v22 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
    swift_bridgeObjectRetain();
    v154 = v26;
    swift_beginAccess();
    v143 = v27;
    swift_beginAccess();
    v28 = (unint64_t *)(v24 + 40);
    v29 = v148;
    while (1)
    {
      v18 = *(v28 - 1);
      v30 = *v28;
      if (v29)
      {
        v164 = *(v28 - 1);
        v165 = v30;
        sub_1BDDB6CA4(v18, v30);
        sub_1BDE77CA0((uint64_t)v29);
        v31 = v29(&v164);
        sub_1BDE0D5B8((uint64_t)v29);
        if ((v31 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        sub_1BDDB6CA4(*(v28 - 1), *v28);
      }
      sub_1BDDB6CA4(v18, v30);
      v32 = sub_1BDDBC6BC(&v164, v18, v30);
      sub_1BDDB796C(v164, v165);
      if ((v32 & 1) != 0)
      {
        v33 = v155;
        sub_1BDD9C318(v154, v155, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        v34 = *(_QWORD *)(v33 + *(int *)(v157 + 20));
        if (!*(_QWORD *)(v34 + 16))
          goto LABEL_16;
        sub_1BDDB6CA4(v18, v30);
        v35 = sub_1BDDB7F0C(v18, v30);
        if ((v36 & 1) == 0)
        {
          sub_1BDDB796C(v18, v30);
LABEL_16:
          sub_1BDD9C3E0(v155, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          goto LABEL_17;
        }
        v37 = (unint64_t *)(*(_QWORD *)(v34 + 56) + 48 * v35);
        v153 = *v37;
        v38 = v37[2];
        v149 = v37[3];
        v150 = v38;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v18, v30);
        sub_1BDD9C3E0(v155, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_bridgeObjectRelease();
        v39 = v153;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v39)
        {
          sub_1BDDB796C(v18, v30);
          v29 = v148;
          goto LABEL_18;
        }
        v40 = v144;
        sub_1BDD9C318(v143, v144, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        v41 = *(_QWORD *)(v40 + *(int *)(v157 + 20));
        v29 = v148;
        if (*(_QWORD *)(v41 + 16))
        {
          sub_1BDDB6CA4(v18, v30);
          swift_retain();
          v42 = sub_1BDDB7F0C(v18, v30);
          if ((v43 & 1) != 0)
          {
            v44 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 48 * v42);
            v142 = *v44;
            v45 = v44[2];
            v46 = v44[3];
            v47 = v44[4];
            v149 = v44[5];
            swift_retain();
            v150 = v45;
            swift_bridgeObjectRetain();
            v141 = v46;
            swift_bridgeObjectRetain();
            v134 = v47;
            v48 = v142;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1BDDB796C(v18, v30);
            result = sub_1BDD9C3E0(v144, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
            if (!v48)
              goto LABEL_88;
            v50 = swift_retain();
            sub_1BDDCB5A4(v50, v48, &v164);
            swift_release();
            v130 = v164;
            swift_bridgeObjectRetain();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            sub_1BDDB6CA4(v18, v30);
            sub_1BDDBC6BC(&v164, v18, v30);
            sub_1BDDB796C(v164, v165);
            v160 = v18;
            v161 = v30;
            v162 = v130;
            v159[0] = v150;
            v159[1] = v141;
            sub_1BDD98B8C(v158, &v164, &v160, &v162, v159);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            sub_1BDDB796C(v18, v30);
            v29 = v148;
            goto LABEL_18;
          }
          sub_1BDDB796C(v18, v30);
        }
        else
        {
          swift_retain();
        }
        sub_1BDD9C3E0(v144, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_release_n();
      }
LABEL_17:
      sub_1BDDB796C(v18, v30);
LABEL_18:
      v28 += 2;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        v5 = v152;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v51 = v146;
  if (!v146)
  {
LABEL_69:
    v103 = swift_bridgeObjectRetain();
    v104 = v137;
    v105 = sub_1BDDD339C(v103, v145);
    if (v104)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease();
    }
    v107 = v105;
    v108 = v106;
    swift_bridgeObjectRelease();
    sub_1BDDBC54C(v107);
    sub_1BDDBC54C(v108);
    v109 = *v136;
    swift_bridgeObjectRetain();
    v110 = swift_bridgeObjectRetain();
    if ((sub_1BDDB04C0(v110, v139) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v111 = sub_1BDDB04C0(v109, v138);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v111 & 1) == 0)
      {
        v114 = v139;
LABEL_76:
        v116 = v136;
        swift_beginAccess();
        sub_1BDDAF714(v114);
        v117 = v138;
        sub_1BDDAF714(v138);
        swift_endAccess();
        v118 = *v116;
        swift_bridgeObjectRetain();
        v119 = swift_bridgeObjectRetain();
        if ((sub_1BDDBDDBC(v119, v114) & 1) != 0)
        {
          v120 = sub_1BDDBDDBC(v118, v117);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v120 & 1) != 0)
          {
            v121 = v145 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
            swift_beginAccess();
            v123 = v131;
            v122 = v132;
            (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v135, v121, v132);
            v124 = v123;
            v125 = v135;
            v126 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
            swift_beginAccess();
LABEL_81:
            (*(void (**)(uint64_t, char *, uint64_t))(v124 + 24))(v126, v125, v122);
            swift_endAccess();
            (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v122);
            v127 = v178;
            if (*(_QWORD *)(v178 + 16))
            {
              v128 = swift_bridgeObjectRetain();
              sub_1BDD8EE00(v128);
              swift_bridgeObjectRelease();
            }
            sub_1BDDBC54C(v127);
            v129 = v136[1];
            v162 = *v136;
            v163 = v129;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1BDDCC50C(&v162);
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v167;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v125 = v135;
        sub_1BE1B1F4C();
        v126 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
        swift_beginAccess();
        v124 = v131;
        v122 = v132;
        goto LABEL_81;
      }
    }
    v112 = swift_bridgeObjectRetain();
    v113 = sub_1BDDBFED0(v112);
    swift_bridgeObjectRelease();
    v114 = v139;
    v115 = sub_1BDDD44FC(v138, v139, v113, v145);
    swift_bridgeObjectRelease();
    sub_1BDDBC54C(v115);
    goto LABEL_76;
  }
  if ((v146 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1BE1B2FB4();
    type metadata accessor for AnyReference();
    sub_1BDD8422C((unint64_t *)&qword_1EF52CFD8, (uint64_t (*)(uint64_t))type metadata accessor for AnyReference, (uint64_t)&unk_1BE1BCF30);
    sub_1BE1B2BDC();
    v51 = v168;
    v144 = v169;
    v52 = v170;
    v53 = v171;
    v54 = v172;
  }
  else
  {
    v55 = -1 << *(_BYTE *)(v146 + 32);
    v56 = *(_QWORD *)(v146 + 56);
    v144 = v146 + 56;
    v57 = ~v55;
    v58 = -v55;
    if (v58 < 64)
      v59 = ~(-1 << v58);
    else
      v59 = -1;
    v54 = v59 & v56;
    swift_bridgeObjectRetain();
    v52 = v57;
    v53 = 0;
  }
  v134 = v52;
  v142 = v51 & 0x7FFFFFFFFFFFFFFFLL;
  v143 = (unint64_t)(v52 + 64) >> 6;
  v141 = MEMORY[0x1E0DEE9B0] + 8;
  v146 = v51;
  while (v51 < 0)
  {
    v66 = sub_1BE1B3008();
    if (!v66)
    {
      v5 = v152;
LABEL_68:
      sub_1BDE27FD0();
      goto LABEL_69;
    }
    v160 = v66;
    type metadata accessor for AnyReference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v67 = v164;
    swift_unknownObjectRelease();
    v65 = v53;
    v63 = v54;
    v5 = v152;
    if (!v67)
      goto LABEL_68;
LABEL_57:
    v153 = v63;
    v154 = v65;
    v72 = *(_QWORD *)(v67 + 16);
    v71 = *(_QWORD *)(v67 + 24);
    v73 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
    swift_beginAccess();
    v74 = v73;
    v75 = v156;
    sub_1BDD9C318(v74, v156, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v76 = v157;
    v77 = *(_QWORD *)(v75 + *(int *)(v157 + 20));
    if (*(_QWORD *)(v77 + 16))
    {
      sub_1BDDB6CA4(v72, v71);
      sub_1BDDB6CA4(v72, v71);
      v78 = sub_1BDDB7F0C(v72, v71);
      if ((v79 & 1) != 0)
      {
        v60 = (uint64_t *)(*(_QWORD *)(v77 + 56) + 48 * v78);
        v61 = *v60;
        v155 = v60[1];
        v62 = v60[2];
        v18 = v60[4];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1BDDB796C(v72, v71);
        sub_1BDDB796C(v72, v71);
        sub_1BDD9C3E0(v156, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
        sub_1BDDBA008(v61, v155, v62);
        goto LABEL_33;
      }
      sub_1BDDB796C(v72, v71);
      sub_1BDDB796C(v72, v71);
    }
    sub_1BDD9C3E0(v156, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    sub_1BDDBA008(0, 0, 0);
    v80 = *(_QWORD *)(v67 + 16);
    v81 = *(_QWORD *)(v67 + 24);
    sub_1BDDB6CA4(v80, v81);
    sub_1BDDBC6BC(&v164, v80, v81);
    sub_1BDDB796C(v164, v165);
    v18 = *(_QWORD *)(v67 + 16);
    v53 = *(_QWORD *)(v67 + 24);
    v82 = v145 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
    swift_beginAccess();
    v83 = v82;
    v84 = v151;
    sub_1BDD9C318(v83, v151, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v85 = *(_QWORD *)(v84 + *(int *)(v76 + 20));
    if (!*(_QWORD *)(v85 + 16))
      goto LABEL_86;
    sub_1BDDB6CA4(v18, v53);
    v86 = sub_1BDDB7F0C(v18, v53);
    if ((v87 & 1) == 0)
      goto LABEL_85;
    v88 = (uint64_t *)(*(_QWORD *)(v85 + 56) + 48 * v86);
    v89 = *v88;
    v91 = v88[2];
    v90 = v88[3];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v18, v53);
    result = sub_1BDD9C3E0(v151, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    if (!v89)
      goto LABEL_87;
    v92 = swift_retain();
    sub_1BDE59EB4(v92, v89, &v164);
    v149 = v67;
    swift_release();
    v93 = v164;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v94 = MEMORY[0x1E0DEE9D8];
    v95 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
    v155 = v90;
    v96 = v95;
    v97 = sub_1BDDB6CE8(v94);
    sub_1BDDB6E0C(v94);
    sub_1BDDB6CE8(v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v173 = (unint64_t)v93;
    v174 = v91;
    v175 = v155;
    v98 = v96;
    v176 = v96;
    v177 = v97;
    v99 = v152 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
    swift_beginAccess();
    v100 = *(int *)(v157 + 20);
    sub_1BDDB6CA4(v18, v53);
    sub_1BDDB6CA4(v18, v53);
    v150 = v93;
    v101 = v155;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v147 = v98;
    swift_bridgeObjectRetain();
    v148 = (uint64_t (*)(uint64_t *))v97;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v160 = *(_QWORD *)(v99 + v100);
    *(_QWORD *)(v99 + v100) = 0x8000000000000000;
    sub_1BDD8CFA4(&v173, v18, v53, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v99 + v100) = v160;
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v18, v53);
    if (*(_QWORD *)(v101 + 16))
    {
      sub_1BDDB6CA4(v18, v53);
      sub_1BDDBC6BC(&v160, v18, v53);
      sub_1BDDB796C(v160, v161);
    }
    v160 = v18;
    v161 = v53;
    v162 = v91;
    v163 = v101;
    sub_1BDDBB074(&v160, &v162);
    swift_endAccess();
    swift_release();
    sub_1BDDB796C(v18, v53);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
LABEL_33:
    swift_release();
    v54 = v153;
    v53 = v154;
    v51 = v146;
  }
  if (v54)
  {
    v63 = (v54 - 1) & v54;
    v64 = __clz(__rbit64(v54)) | (v53 << 6);
    v65 = v53;
    v5 = v152;
LABEL_56:
    v67 = *(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * v64);
    swift_retain();
    if (!v67)
      goto LABEL_68;
    goto LABEL_57;
  }
  v68 = v53 + 1;
  v5 = v152;
  if (!__OFADD__(v53, 1))
  {
    if (v68 >= v143)
      goto LABEL_68;
    v69 = *(_QWORD *)(v144 + 8 * v68);
    v65 = v53 + 1;
    if (!v69)
    {
      v65 = v53 + 2;
      if (v53 + 2 >= v143)
        goto LABEL_68;
      v69 = *(_QWORD *)(v144 + 8 * v65);
      if (!v69)
      {
        v65 = v53 + 3;
        if (v53 + 3 >= v143)
          goto LABEL_68;
        v69 = *(_QWORD *)(v144 + 8 * v65);
        if (!v69)
        {
          v65 = v53 + 4;
          if (v53 + 4 >= v143)
            goto LABEL_68;
          v69 = *(_QWORD *)(v144 + 8 * v65);
          if (!v69)
          {
            v65 = v53 + 5;
            if (v53 + 5 >= v143)
              goto LABEL_68;
            v69 = *(_QWORD *)(v144 + 8 * v65);
            if (!v69)
            {
              v70 = v53 + 6;
              while (v143 != v70)
              {
                v69 = *(_QWORD *)(v144 + 8 * v70++);
                if (v69)
                {
                  v65 = v70 - 1;
                  goto LABEL_55;
                }
              }
              goto LABEL_68;
            }
          }
        }
      }
    }
LABEL_55:
    v63 = (v69 - 1) & v69;
    v64 = __clz(__rbit64(v69)) + (v65 << 6);
    goto LABEL_56;
  }
  __break(1u);
LABEL_85:
  sub_1BDDB796C(v18, v53);
LABEL_86:
  result = sub_1BDD9C3E0(v151, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t sub_1BDDBC54C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16[2];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    sub_1BDDB6CA4(*v10, v12);
    sub_1BDDBC6BC(v16, v11, v12);
    result = sub_1BDDB796C(v16[0], v16[1]);
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release();
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1BDDBC6BC(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v10;
  uint64_t __s1;

  v6 = *v3;
  sub_1BE1B36F8();
  swift_bridgeObjectRetain();
  sub_1BE1B1E8C();
  v7 = sub_1BE1B371C() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __s1 = *v10;
  *v10 = 0x8000000000000000;
  sub_1BDDB6CA4(a2, a3);
  sub_1BDDBD0B8(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  *v10 = __s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1BDDBD0B8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if ((a4 & 1) != 0)
    {
      sub_1BDE6B558();
    }
    else
    {
      if (v9 > v8)
      {
        result = (uint64_t)sub_1BDDBAEC4();
        goto LABEL_10;
      }
      sub_1BDDBDACC();
    }
    v10 = *v4;
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    a3 = result & ~(-1 << *(_BYTE *)(v10 + 32));
    if (((*(_QWORD *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v11 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v12 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * a3);
  *v12 = v7;
  v12[1] = a2;
  v13 = *(_QWORD *)(v11 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x1BDDBDA20);
  }
  *(_QWORD *)(v11 + 16) = v15;
  return result;
}

uint64_t sub_1BDDBDACC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2680);
  v3 = sub_1BE1B302C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1BE1B36F8();
    sub_1BDDB6CA4(v20, v21);
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t static CRVersion.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if ((sub_1BDDBDDBC(a1[1], a2[1]) & 1) != 0)
    return sub_1BDDBDDBC(v2, v3);
  else
    return 0;
}

uint64_t sub_1BDDBDDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char v47;
  char v48;
  unint64_t v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  int64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  unint64_t v64;

  v4 = sub_1BE1B206C();
  v62 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v59 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v53 - v7;
  v9 = type metadata accessor for Replica();
  v58 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v60 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CC0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v53 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v56 = a1;
  v57 = a2;
  v61 = 0;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v54 = v19;
  v55 = (unint64_t)(v21 + 63) >> 6;
  v53 = v55 - 1;
  v24 = &qword_1ED6F3CB8;
  while (1)
  {
    if (v23)
    {
      v25 = __clz(__rbit64(v23));
      v26 = (v23 - 1) & v23;
      v27 = v25 | (v61 << 6);
LABEL_8:
      v28 = v56;
      sub_1BDD9C318(*(_QWORD *)(v56 + 48) + *(_QWORD *)(v58 + 72) * v27, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
      v29 = *(_QWORD *)(v28 + 56);
      v30 = v62;
      v31 = v29 + *(_QWORD *)(v62 + 72) * v27;
      v32 = __swift_instantiateConcreteTypeFromMangledName(v24);
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(&v14[*(int *)(v32 + 48)], v31, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v14, 0, 1, v32);
      goto LABEL_27;
    }
    v33 = v61 + 1;
    if (__OFADD__(v61, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    v30 = v62;
    if (v33 < v55)
    {
      v34 = *(_QWORD *)(v54 + 8 * v33);
      if (v34)
        goto LABEL_12;
      v35 = v61 + 2;
      ++v61;
      if (v33 + 1 < v55)
      {
        v34 = *(_QWORD *)(v54 + 8 * v35);
        if (v34)
          goto LABEL_15;
        v61 = v33 + 1;
        if (v33 + 2 < v55)
        {
          v34 = *(_QWORD *)(v54 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_12;
          }
          v35 = v33 + 3;
          v61 = v33 + 2;
          if (v33 + 3 < v55)
            break;
        }
      }
    }
LABEL_26:
    v36 = __swift_instantiateConcreteTypeFromMangledName(v24);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v14, 1, 1, v36);
    v26 = 0;
LABEL_27:
    sub_1BDDA2EF0((uint64_t)v14, (uint64_t)v17, &qword_1ED6F3CC0);
    v37 = __swift_instantiateConcreteTypeFromMangledName(v24);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v17, 1, v37);
    v63 = v38 == 1;
    if (v38 == 1)
      return v63;
    v64 = v26;
    v39 = v24;
    v40 = &v17[*(int *)(v37 + 48)];
    v41 = v17;
    v42 = (uint64_t)v17;
    v43 = v60;
    sub_1BDDA2E8C(v42, v60, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v8, v40, v4);
    v44 = v57;
    v45 = v8;
    v46 = sub_1BDDB3EC0(v43);
    v48 = v47;
    sub_1BDD9C3E0(v43, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    if ((v48 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v45, v4);
      return 0;
    }
    v49 = *(_QWORD *)(v44 + 56) + *(_QWORD *)(v30 + 72) * v46;
    v50 = v59;
    (*(void (**)(char *, unint64_t, uint64_t))(v30 + 16))(v59, v49, v4);
    sub_1BDD8422C(&qword_1ED6EF210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13C8]);
    v51 = sub_1BE1B2798();
    v52 = *(void (**)(char *, uint64_t))(v30 + 8);
    v52(v50, v4);
    result = ((uint64_t (*)(char *, uint64_t))v52)(v45, v4);
    v8 = v45;
    v17 = v41;
    v24 = v39;
    v23 = v64;
    if ((v51 & 1) == 0)
      return v63;
  }
  v34 = *(_QWORD *)(v54 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v33 = v35;
LABEL_12:
    v26 = (v34 - 1) & v34;
    v27 = __clz(__rbit64(v34)) + (v33 << 6);
    v61 = v33;
    goto LABEL_8;
  }
  while (1)
  {
    v33 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v33 >= v55)
    {
      v61 = v53;
      goto LABEL_26;
    }
    v34 = *(_QWORD *)(v54 + 8 * v33);
    ++v35;
    if (v34)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1BDDBE25C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v9 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1BDDA8D6C();
  if (!v4)
  {
    v13 = result;
    type metadata accessor for CREncoder.CRDTKeyedContainer();
    inited = swift_initStackObject();
    v17 = a4;
    v15 = inited;
    v16 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(inited + 16) = v13;
    *(_QWORD *)(inited + 24) = a1;
    *v11 = v16;
    v11[1] = v16;
    v11[2] = v16;
    swift_retain();
    swift_retain();
    sub_1BE1B20E4();
    swift_beginAccess();
    sub_1BDDBE3B0((uint64_t)v11);
    v17(v15, a2, a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDDBE3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-v7];
  v9 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v10 = *(_QWORD *)(v1 + v9);
    type metadata accessor for Proto_CRDT._StorageClass(0);
    v11 = swift_allocObject();
    v12 = v11 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = v10 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1ED6F2DF0);
    swift_beginAccess();
    sub_1BDDA1AF4((uint64_t)v8, v12, &qword_1ED6F2DF0);
    swift_endAccess();
    *(_QWORD *)(v1 + v9) = v11;
    swift_release();
  }
  v15 = *(_QWORD *)(v1 + v9);
  sub_1BDDA2E8C(a1, (uint64_t)v8, type metadata accessor for Proto_Struct);
  v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1BDDA2EF0((uint64_t)v8, (uint64_t)v6, &qword_1ED6F2DF0);
  v17 = v15 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v6, v17, &qword_1ED6F2DF0);
  swift_endAccess();
  return swift_release();
}

uint64_t type metadata accessor for CREncoder.CRDTKeyedContainer()
{
  return objc_opt_self();
}

uint64_t sub_1BDDBE5E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDDBE5FC(v1, a1);
}

uint64_t sub_1BDDBE5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  swift_beginAccess();
  return sub_1BDDBE65C(v3, a2);
}

uint64_t sub_1BDDBE65C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDBE6A4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1BDDBE6D0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 89) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1BDDBE6E0()
{
  return sub_1BDDBE6E8();
}

uint64_t sub_1BDDBE6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v0 = sub_1BE1B1DF0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_1BE1B1CDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BE1B1CD0();
  sub_1BE1B1CC4();
  sub_1BE1B1D6C();
  sub_1BE1B1D84();
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BDDBE800()
{
  return sub_1BDDBE808();
}

uint64_t sub_1BDDBE808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  unint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  __int128 v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t *v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  char *v132;
  void *v133;
  char *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  void (*v145)(char *, uint64_t);
  char *v146;
  uint64_t v147;
  char v148;
  id v149;
  uint64_t v150;
  _QWORD v151[8];

  v151[7] = *MEMORY[0x1E0C80C00];
  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C20);
  v139 = *(_QWORD *)(v0 - 8);
  v140 = v0;
  MEMORY[0x1E0C80A78](v0);
  v138 = (char *)&v114 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_1BE1B1DF0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v114 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v124 = (char *)&v114 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v123 = (char *)&v114 - v13;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v114 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2928);
  v17 = MEMORY[0x1E0C80A78](v16);
  v127 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v114 - v19;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v22 = result;
    v125 = v20;
    *(_BYTE *)(result + 96) = 0;
    swift_beginAccess();
    v23 = *(_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v23 + 64);
    v116 = v23 + 64;
    v25 = 1 << *(_BYTE *)(v23 + 32);
    if (v25 < 64)
      v26 = ~(-1 << v25);
    else
      v26 = -1;
    v129 = v26 & v24;
    v126 = (uint64_t *)(v22 + 48);
    v121 = &v148;
    v137 = v4 + 7;
    v136 = v151;
    v118 = (unint64_t)(v25 + 63) >> 6;
    v115 = v118 - 1;
    v122 = v23;
    swift_bridgeObjectRetain();
    v27 = 0;
    v117 = 0;
    v146 = v15;
    *(_QWORD *)&v28 = 136315394;
    v120 = v28;
    v119 = MEMORY[0x1E0DEE9B8] + 8;
    v142 = v22;
    v143 = v3;
    v134 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
      v30 = (uint64_t)v127;
      if (v129)
      {
        v31 = __clz(__rbit64(v129));
        v129 &= v129 - 1;
        v32 = v31 | (v27 << 6);
      }
      else
      {
        v36 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_125;
        if (v36 >= v118)
          goto LABEL_18;
        v37 = *(_QWORD *)(v116 + 8 * v36);
        if (!v37)
        {
          v27 += 2;
          if (v36 + 1 >= v118)
          {
            v27 = v36;
LABEL_18:
            v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DB0);
            v30 = (uint64_t)v127;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v127, 1, 1, v38);
            v129 = 0;
            goto LABEL_19;
          }
          v37 = *(_QWORD *)(v116 + 8 * v27);
          if (v37)
          {
            ++v36;
          }
          else
          {
            if (v36 + 2 >= v118)
              goto LABEL_18;
            v37 = *(_QWORD *)(v116 + 8 * (v36 + 2));
            if (v37)
            {
              v36 += 2;
            }
            else
            {
              v112 = v36 + 3;
              if (v36 + 3 >= v118)
              {
                v27 = v36 + 2;
                goto LABEL_18;
              }
              v37 = *(_QWORD *)(v116 + 8 * v112);
              if (!v37)
              {
                while (1)
                {
                  v36 = v112 + 1;
                  if (__OFADD__(v112, 1))
                    goto LABEL_126;
                  if (v36 >= v118)
                    break;
                  v37 = *(_QWORD *)(v116 + 8 * v36);
                  ++v112;
                  if (v37)
                    goto LABEL_13;
                }
                v27 = v115;
                goto LABEL_18;
              }
              v36 += 3;
            }
          }
        }
LABEL_13:
        v129 = (v37 - 1) & v37;
        v32 = __clz(__rbit64(v37)) + (v36 << 6);
        v27 = v36;
      }
      v33 = v122;
      (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v127, *(_QWORD *)(v122 + 48) + *(_QWORD *)(v3 + 72) * v32, v2);
      v34 = *(_QWORD *)(v33 + 56);
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DB0);
      *(_QWORD *)(v30 + *(int *)(v35 + 48)) = *(_QWORD *)(v34 + 8 * v32);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v30, 0, 1, v35);
      swift_retain();
LABEL_19:
      v39 = (uint64_t)v125;
      sub_1BDDA2EF0(v30, (uint64_t)v125, qword_1ED6F2928);
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DB0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v39, 1, v40) == 1)
      {
        swift_release();
        v113 = sub_1BDDBF9AC(MEMORY[0x1E0DEE9D8]);
        swift_beginAccess();
        *(_QWORD *)(v22 + 48) = v113;
        swift_bridgeObjectRelease();
        return swift_release();
      }
      v135 = *(_QWORD *)(v39 + *(int *)(v40 + 48));
      v41 = v146;
      v141 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
      v141(v146, v39, v2);
      if (qword_1ED6EE518 != -1)
        swift_once();
      v42 = sub_1BE1B23C0();
      __swift_project_value_buffer(v42, (uint64_t)qword_1ED6F8A50);
      v43 = v123;
      v144 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v144(v123, v41, v2);
      swift_retain();
      v44 = sub_1BE1B23A8();
      v45 = sub_1BE1B2DC8();
      v46 = v45;
      v47 = os_log_type_enabled(v44, v45);
      v128 = v27;
      if (v47)
      {
        v48 = v22;
        v49 = swift_slowAlloc();
        v133 = (void *)swift_slowAlloc();
        v149 = v133;
        *(_DWORD *)v49 = v120;
        v145 = (void (*)(char *, uint64_t))(v49 + 4);
        LODWORD(v132) = v46;
        v51 = *(_QWORD *)(v48 + 104);
        v50 = *(_QWORD *)(v48 + 112);
        swift_bridgeObjectRetain();
        v147 = sub_1BDDC1468(v51, v50, (uint64_t *)&v149);
        sub_1BE1B2F0C();
        swift_bridgeObjectRelease();
        v41 = v146;
        swift_release();
        *(_WORD *)(v49 + 12) = 2080;
        sub_1BDD8422C(&qword_1EF52F158, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
        v52 = sub_1BE1B32E4();
        v147 = sub_1BDDC1468(v52, v53, (uint64_t *)&v149);
        sub_1BE1B2F0C();
        swift_bridgeObjectRelease();
        v145 = *(void (**)(char *, uint64_t))(v143 + 8);
        v145(v43, v2);
        _os_log_impl(&dword_1BDD82000, v44, (os_log_type_t)v132, "%s watchDirectory(enterForeground) %s", (uint8_t *)v49, 0x16u);
        v54 = v133;
        swift_arrayDestroy();
        MEMORY[0x1C3B7E068](v54, -1, -1);
        MEMORY[0x1C3B7E068](v49, -1, -1);
      }
      else
      {
        swift_release();
        v145 = *(void (**)(char *, uint64_t))(v3 + 8);
        v145(v43, v2);
      }

      v55 = (uint64_t)v124;
      objc_msgSend((id)objc_opt_self(), sel_addFilePresenter_, *(_QWORD *)(v135 + 16));
      v56 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      sub_1BE1B1DE4();
      v57 = (void *)sub_1BE1B27A4();
      swift_bridgeObjectRelease();
      v149 = 0;
      v58 = objc_msgSend(v56, sel_contentsOfDirectoryAtPath_error_, v57, &v149);

      v59 = v149;
      if (v58)
      {
        v60 = sub_1BE1B2978();
        v61 = v59;

        v130 = (_QWORD *)sub_1BDEFA54C(v60);
        swift_bridgeObjectRelease();
      }
      else
      {
        v62 = v149;
        v63 = sub_1BE1B1D3C();

        swift_willThrow();
        v64 = (void *)v63;
        v41 = v146;

        v130 = 0;
        v117 = 0;
      }
      v144((char *)v55, v41, v2);
      v65 = v126;
      swift_beginAccess();
      v66 = *v65;
      if (*(_QWORD *)(v66 + 16))
      {
        v67 = sub_1BDD901B8(v55);
        v68 = MEMORY[0x1E0DEE9D8];
        if ((v69 & 1) != 0)
        {
          v68 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v67);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        v68 = MEMORY[0x1E0DEE9D8];
      }
      swift_endAccess();
      v145((char *)v55, v2);
      v70 = (_QWORD *)sub_1BDEFA54C(v68);
      swift_bridgeObjectRelease();
      v131 = v70;
      v71 = v130;
      if (v130)
      {
        if (v70[2] <= v130[2] >> 3)
        {
          v149 = v130;
          swift_bridgeObjectRetain();
          sub_1BE111CF4((uint64_t)v70);
          v72 = v149;
        }
        else
        {
          swift_bridgeObjectRetain();
          v72 = (_QWORD *)sub_1BE111E88((uint64_t)v70, (uint64_t)v71);
        }
        v88 = 0;
        v89 = v72[7];
        v132 = (char *)(v72 + 7);
        v90 = 1 << *((_BYTE *)v72 + 32);
        if (v90 < 64)
          v91 = ~(-1 << v90);
        else
          v91 = -1;
        v92 = v91 & v89;
        v133 = (void *)((unint64_t)(v90 + 63) >> 6);
        while (1)
        {
          if (v92)
          {
            v92 &= v92 - 1;
            v6 = v134;
          }
          else
          {
            v85 = __OFADD__(v88++, 1);
            v6 = v134;
            if (v85)
            {
              __break(1u);
LABEL_120:
              __break(1u);
              goto LABEL_121;
            }
            if (v88 >= (uint64_t)v133)
              goto LABEL_80;
            v97 = *(_QWORD *)&v132[8 * v88];
            if (!v97)
            {
              v98 = v88 + 1;
              if (v88 + 1 >= (uint64_t)v133)
                goto LABEL_80;
              v97 = *(_QWORD *)&v132[8 * v98];
              if (!v97)
              {
                v98 = v88 + 2;
                if (v88 + 2 >= (uint64_t)v133)
                  goto LABEL_80;
                v97 = *(_QWORD *)&v132[8 * v98];
                if (!v97)
                {
                  v98 = v88 + 3;
                  if (v88 + 3 >= (uint64_t)v133)
                  {
LABEL_80:
                    swift_release();
                    if (v130[2] <= v131[2] >> 3)
                    {
                      v149 = v131;
                      sub_1BE111CF4((uint64_t)v130);
                      swift_bridgeObjectRelease();
                      v99 = v149;
                    }
                    else
                    {
                      v99 = (_QWORD *)sub_1BE111E88((uint64_t)v130, (uint64_t)v131);
                      swift_bridgeObjectRelease();
                    }
                    v100 = 0;
                    v101 = v99[7];
                    v132 = (char *)(v99 + 7);
                    v102 = 1 << *((_BYTE *)v99 + 32);
                    if (v102 < 64)
                      v103 = ~(-1 << v102);
                    else
                      v103 = -1;
                    v104 = v103 & v101;
                    v133 = (void *)((unint64_t)(v102 + 63) >> 6);
                    while (1)
                    {
                      if (v104)
                      {
                        v104 &= v104 - 1;
                      }
                      else
                      {
                        v85 = __OFADD__(v100++, 1);
                        v22 = v142;
                        if (v85)
                          goto LABEL_120;
                        if (v100 >= (uint64_t)v133)
                          goto LABEL_6;
                        v110 = *(_QWORD *)&v132[8 * v100];
                        if (!v110)
                        {
                          v111 = v100 + 1;
                          if (v100 + 1 >= (uint64_t)v133)
                            goto LABEL_6;
                          v110 = *(_QWORD *)&v132[8 * v111];
                          if (!v110)
                          {
                            v111 = v100 + 2;
                            if (v100 + 2 >= (uint64_t)v133)
                              goto LABEL_6;
                            v110 = *(_QWORD *)&v132[8 * v111];
                            if (!v110)
                            {
                              v111 = v100 + 3;
                              if (v100 + 3 >= (uint64_t)v133)
                                goto LABEL_6;
                              v110 = *(_QWORD *)&v132[8 * v111];
                              if (!v110)
                              {
                                while (1)
                                {
                                  v100 = v111 + 1;
                                  if (__OFADD__(v111, 1))
                                    break;
                                  if (v100 >= (uint64_t)v133)
                                    goto LABEL_6;
                                  v110 = *(_QWORD *)&v132[8 * v100];
                                  ++v111;
                                  if (v110)
                                    goto LABEL_100;
                                }
LABEL_123:
                                __break(1u);
LABEL_124:
                                __break(1u);
LABEL_125:
                                __break(1u);
LABEL_126:
                                __break(1u);
                              }
                            }
                          }
                          v100 = v111;
                        }
LABEL_100:
                        v104 = (v110 - 1) & v110;
                      }
                      swift_bridgeObjectRetain();
                      sub_1BE1B1DA8();
                      swift_bridgeObjectRelease();
                      v144(v6, v9, v2);
                      v105 = (*(unsigned __int8 *)(v143 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
                      v106 = (v105 + v137) & 0xFFFFFFFFFFFFFFF8;
                      v107 = swift_allocObject();
                      v141((char *)(v107 + v105), (uint64_t)v6, v2);
                      v108 = (_QWORD *)(v107 + v106);
                      *v108 = 0;
                      v108[1] = 0;
                      v149 = &unk_1EF5302C0;
                      v150 = v107;
                      swift_weakInit();
                      swift_retain();
                      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
                      v109 = v138;
                      sub_1BE1B2AEC();
                      (*(void (**)(char *, uint64_t))(v139 + 8))(v109, v140);
                      swift_release();
                      v145(v9, v2);
                    }
                  }
                  v97 = *(_QWORD *)&v132[8 * v98];
                  if (!v97)
                  {
                    while (1)
                    {
                      v88 = v98 + 1;
                      if (__OFADD__(v98, 1))
                        break;
                      if (v88 >= (uint64_t)v133)
                        goto LABEL_80;
                      v97 = *(_QWORD *)&v132[8 * v88];
                      ++v98;
                      if (v97)
                        goto LABEL_75;
                    }
LABEL_122:
                    __break(1u);
                    goto LABEL_123;
                  }
                }
              }
              v88 = v98;
            }
LABEL_75:
            v92 = (v97 - 1) & v97;
          }
          swift_bridgeObjectRetain();
          sub_1BE1B1DA8();
          swift_bridgeObjectRelease();
          v144(v6, v9, v2);
          v93 = (*(unsigned __int8 *)(v143 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
          v94 = (v93 + v137) & 0xFFFFFFFFFFFFFFF8;
          v95 = swift_allocObject();
          v141((char *)(v95 + v93), (uint64_t)v6, v2);
          *(_QWORD *)(v95 + v94) = v135;
          v149 = &unk_1EF5302B8;
          v150 = v95;
          swift_weakInit();
          swift_retain_n();
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
          v96 = v138;
          sub_1BE1B2AEC();
          (*(void (**)(char *, uint64_t))(v139 + 8))(v96, v140);
          swift_release();
          swift_release();
          v145(v9, v2);
        }
      }
      v73 = 0;
      v76 = v70[7];
      v75 = v70 + 7;
      v74 = v76;
      v77 = 1 << *((_BYTE *)v75 - 24);
      if (v77 < 64)
        v78 = ~(-1 << v77);
      else
        v78 = -1;
      v79 = v78 & v74;
      v133 = (void *)((unint64_t)(v77 + 63) >> 6);
      while (1)
      {
        if (v79)
        {
          v79 &= v79 - 1;
          goto LABEL_40;
        }
        v85 = __OFADD__(v73++, 1);
        v22 = v142;
        if (v85)
        {
LABEL_121:
          __break(1u);
          goto LABEL_122;
        }
        if (v73 >= (uint64_t)v133)
          goto LABEL_6;
        v86 = v75[v73];
        if (!v86)
          break;
LABEL_52:
        v79 = (v86 - 1) & v86;
LABEL_40:
        swift_bridgeObjectRetain();
        sub_1BE1B1DA8();
        swift_bridgeObjectRelease();
        v144(v6, v9, v2);
        v80 = (*(unsigned __int8 *)(v143 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
        v81 = (v80 + v137) & 0xFFFFFFFFFFFFFFF8;
        v82 = swift_allocObject();
        v141((char *)(v82 + v80), (uint64_t)v6, v2);
        v83 = (_QWORD *)(v82 + v81);
        *v83 = 0;
        v83[1] = 0;
        v149 = &unk_1EF5302A0;
        v150 = v82;
        swift_weakInit();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C38);
        v84 = v138;
        sub_1BE1B2AEC();
        (*(void (**)(char *, uint64_t))(v139 + 8))(v84, v140);
        swift_release();
        v145(v9, v2);
      }
      v87 = v73 + 1;
      if (v73 + 1 >= (uint64_t)v133)
        goto LABEL_6;
      v86 = v75[v87];
      if (v86)
        goto LABEL_51;
      v87 = v73 + 2;
      if (v73 + 2 >= (uint64_t)v133)
        goto LABEL_6;
      v86 = v75[v87];
      if (v86)
        goto LABEL_51;
      v87 = v73 + 3;
      if (v73 + 3 >= (uint64_t)v133)
        goto LABEL_6;
      v86 = v75[v87];
      if (v86)
      {
LABEL_51:
        v73 = v87;
        goto LABEL_52;
      }
      while (1)
      {
        v73 = v87 + 1;
        if (__OFADD__(v87, 1))
          goto LABEL_124;
        if (v73 >= (uint64_t)v133)
          break;
        v86 = v75[v73];
        ++v87;
        if (v86)
          goto LABEL_52;
      }
LABEL_6:
      v29 = v146;
      v27 = v128;
      swift_release();
      swift_release();
      v145(v29, v2);
      v3 = v143;
    }
  }
  return result;
}

unint64_t sub_1BDDBF9AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3910);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B860);
  v6 = sub_1BE1B3260();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1BDD86DEC(v12, (uint64_t)v5, &qword_1ED6F3910);
    result = sub_1BDD901B8((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_1BE1B1DF0();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_1BDDBFB40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);

  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      v7 = *a2;
      v6 = a2[1];
      sub_1BDDB6CA4(v7, v6);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_12;
    case 6u:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = *(int *)(type metadata accessor for Proto_Version(0) + 24);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = sub_1BE1B20F0();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      goto LABEL_12;
    case 7u:
      v14 = sub_1BE1B20F0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v15 = type metadata accessor for Proto_Reference(0);
      *(uint64_t *)((char *)a1 + *(int *)(v15 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v15 + 20));
      swift_retain();
      goto LABEL_12;
    case 8u:
      v16 = sub_1BE1B20F0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
      v17 = type metadata accessor for Proto_Optional(0);
      *(uint64_t *)((char *)a1 + *(int *)(v17 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v17 + 20));
      swift_retain();
      goto LABEL_12;
    case 9u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v18 = *(int *)(type metadata accessor for Proto_Timestamp(0) + 24);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = sub_1BE1B20F0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
      goto LABEL_12;
    case 0xAu:
      *a1 = *a2;
      v22 = *(int *)(type metadata accessor for Proto_RepeatedValue(0) + 20);
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = sub_1BE1B20F0();
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      swift_bridgeObjectRetain();
      v26(v23, v24, v25);
      goto LABEL_12;
    case 0xBu:
      v27 = sub_1BE1B20F0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(a1, a2, v27);
      v28 = type metadata accessor for Proto_TaggedValue(0);
      *(uint64_t *)((char *)a1 + *(int *)(v28 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v28 + 20));
      swift_retain();
      goto LABEL_12;
    case 0xCu:
      v29 = a2[1];
      *a1 = *a2;
      v30 = a2[2];
      sub_1BDDB6CA4(v29, v30);
      a1[1] = v29;
      a1[2] = v30;
      v31 = a2[3];
      v32 = a2[4];
      sub_1BDDB6CA4(v31, v32);
      a1[3] = v31;
      a1[4] = v32;
      v33 = *(int *)(type metadata accessor for Proto_Asset(0) + 28);
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = sub_1BE1B20F0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      goto LABEL_12;
    case 0xDu:
      v37 = a2[1];
      *a1 = *a2;
      a1[1] = v37;
      v38 = *(int *)(type metadata accessor for Proto_CustomCRValue(0) + 24);
      v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      v41 = sub_1BE1B20F0();
      v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(v39, v40, v41);
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_1BDDBFE9C()
{
  uint64_t result;

  result = sub_1BE1B27A4();
  qword_1ED6F8B98 = result;
  return result;
}

uint64_t sub_1BDDBFED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1BDDBFF68();
  result = sub_1BE1B2B7C();
  v8 = result;
  if (v2)
  {
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      sub_1BDDB6CA4(v5, *v4);
      sub_1BDDBC6BC(v7, v5, v6);
      sub_1BDDB796C(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_1BDDBFF68()
{
  unint64_t result;

  result = qword_1ED6EFBB0;
  if (!qword_1ED6EFBB0)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRKeyPath, &type metadata for CRKeyPath);
    atomic_store(result, (unint64_t *)&qword_1ED6EFBB0);
  }
  return result;
}

uint64_t sub_1BDDBFFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1ED6F2808, &qword_1ED6F2800, a2);
}

_QWORD *assignWithCopy for CRVersion(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1BDDC0028()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BDD92F18(319, &qword_1ED6F3730, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
  if (v0 <= 0x3F)
  {
    sub_1BDD92F18(319, &qword_1ED6F3778, (void (*)(uint64_t))type metadata accessor for Proto_Value);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_1BDDC0100(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for Anonymous<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BDDC012C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDDC01AC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1BDDC01B4()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for CRSetRef()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t getEnumTagSinglePayload for Renames(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t Capsule.version.getter@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + *(int *)(result + 40));
  if (v4)
  {
    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    swift_beginAccess();
    v6 = *v5;
    v7 = v5[1];
    *a2 = v6;
    a2[1] = v7;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Capsule.finalizeTimestamps(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  v3 = *(int *)(a2 + 40);
  v4 = *(_QWORD *)(v2 + v3);
  if (!v4)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v5 = v2;
  v6 = result;
  v7 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 8);
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_native();
  if ((_DWORD)result)
  {
    if (*(_QWORD *)(v5 + v3))
    {
      v19[0] = MEMORY[0x1E0DEE9E0];
      v19[1] = v8;
      sub_1BDDD59DC(v19, v6);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)(v5 + v3);
  if (!v9)
    goto LABEL_17;
  if (qword_1ED6F4510 != -1)
    swift_once();
  v10 = v9 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 8);
  v12 = MEMORY[0x1E0DEE9E0];
  v17 = MEMORY[0x1E0DEE9E0];
  v18 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BDDAC830((uint64_t)&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v13 = qword_1ED6F3700;
  swift_retain();
  if (v13 != -1)
    swift_once();
  type metadata accessor for ReplicaState();
  sub_1BE1B2E40();
  swift_release();
  v14 = v17;
  type metadata accessor for CapsuleRef();
  swift_allocObject();
  v15 = swift_retain();
  v16 = sub_1BDDD54B4(v15, v14);
  swift_release();
  *(_QWORD *)(v5 + v3) = v16;
  result = swift_release();
  if (*(_QWORD *)(v5 + v3))
  {
    v17 = v12;
    v18 = v8;
    sub_1BDDD59DC(&v17, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1BDDC0538(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;

  v50 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26A0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v9 = *(char **)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v46 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v47 = (uint64_t)&v44 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v48 = (uint64_t)&v44 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v49 = (char *)&v44 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v44 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (uint64_t *)((char *)&v44 - v22);
  v24 = *(uint64_t **)v2;
  v25 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v51 = (uint64_t *)v2;
  if (!v25)
  {
    v27 = 0;
LABEL_5:
    if (v27 <= a2)
    {
      v45 = v20;
      v29 = (char *)v23 + *(int *)(v21 + 36);
      v30 = type metadata accessor for RetainedMapRun(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
      *v23 = v27;
      v23[1] = a2;
      v3 = a2;
      v24 = *(uint64_t **)v2;
      v2 = (unint64_t)v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_7;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  v26 = *((_QWORD *)v9 + 9);
  v27 = *(uint64_t *)((char *)v24
                   + ((v9[80] + 32) & ~(unint64_t)v9[80])
                   + v26 * (v25 - 1)
                   + 8);
  if (v27 < a2)
    goto LABEL_5;
  LODWORD(v28) = v9[80];
  while (1)
  {
    v33 = sub_1BDDC0A40(v50, 0, (uint64_t)v24);
    if ((v33 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v23 = (uint64_t *)v33;
    if (v33 >= v24[2])
      goto LABEL_30;
    v9 = (char *)((v28 + 32) & ~(unint64_t)v28);
    v34 = v26 * v33;
    v35 = &v9[(_QWORD)v24 + v26 * v33];
    v3 = v50;
    if (*(_QWORD *)v35 < v50)
    {
      v45 = (char *)a2;
      v36 = v48;
      sub_1BDD86DEC((uint64_t)v35, v48, qword_1ED6F25C0);
      sub_1BDF0F518((uint64_t)v20, v49, v3);
      sub_1BDD86E30(v36, qword_1ED6F25C0);
      v2 = (unint64_t)v51;
      v24 = (uint64_t *)*v51;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v2 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v24 = (uint64_t *)sub_1BDFCEA00((unint64_t)v24);
        *(_QWORD *)v2 = v24;
      }
      if ((unint64_t)v23 >= v24[2])
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      sub_1BDF111E0((uint64_t)v20, (uint64_t)&v9[(_QWORD)v24 + v34]);
      if (*(_QWORD *)(*(_QWORD *)v2 + 16) <= (unint64_t)v23)
        goto LABEL_38;
      v23 = (uint64_t *)((char *)v23 + 1);
      v24 = qword_1ED6F25C0;
      v38 = v49;
      sub_1BDD86DEC((uint64_t)v49, (uint64_t)v7, qword_1ED6F25C0);
      sub_1BDF10344((uint64_t)v23, (int64_t)v23, (uint64_t)v7);
      sub_1BDD86E30((uint64_t)v38, qword_1ED6F25C0);
      sub_1BDD86E30((uint64_t)v20, qword_1ED6F25C0);
      a2 = (uint64_t)v45;
    }
    if (__OFSUB__(a2, 1))
      goto LABEL_31;
    v3 = (uint64_t)v51;
    v2 = *v51;
    v39 = sub_1BDDC0A40(a2 - 1, (uint64_t)v23, *v51);
    if ((v39 & 0x8000000000000000) != 0)
      goto LABEL_32;
    v24 = (uint64_t *)v39;
    if (v39 >= *(_QWORD *)(v2 + 16))
      goto LABEL_33;
    v34 = v39 * v26;
    v40 = (uint64_t)&v9[v2 + v39 * v26];
    if (*(_QWORD *)(v40 + 8) > a2)
      break;
    v24 = (uint64_t *)((char *)v24 + 1);
LABEL_27:
    if (v24 >= v23)
      return (uint64_t)v23;
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    v24 = (uint64_t *)sub_1BDDC5D60(0, v24[2] + 1, 1, (unint64_t)v24);
LABEL_7:
    v32 = v24[2];
    v31 = v24[3];
    if (v32 >= v31 >> 1)
      v24 = (uint64_t *)sub_1BDDC5D60(v31 > 1, v32 + 1, 1, (unint64_t)v24);
    v24[2] = v32 + 1;
    v28 = v9[80];
    v26 = *((_QWORD *)v9 + 9);
    sub_1BDDA2EF0((uint64_t)v23, (uint64_t)v24 + ((v28 + 32) & ~v28) + v26 * v32, qword_1ED6F25C0);
    *v51 = (uint64_t)v24;
    v7 = (char *)v2;
    v20 = v45;
    a2 = v3;
  }
  v41 = v48;
  sub_1BDD86DEC(v40, v48, qword_1ED6F25C0);
  sub_1BDF0F518(v47, v46, a2);
  sub_1BDD86E30(v41, qword_1ED6F25C0);
  v2 = *(_QWORD *)v3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v2;
  if ((result & 1) != 0)
    goto LABEL_23;
LABEL_39:
  result = sub_1BDFCEA00(v2);
  v2 = result;
  *(_QWORD *)v3 = result;
LABEL_23:
  if ((unint64_t)v24 < *(_QWORD *)(v2 + 16))
  {
    v43 = v47;
    result = sub_1BDF111E0(v47, (uint64_t)&v9[v2 + v34]);
    if (*(_QWORD *)(*(_QWORD *)v3 + 16) <= (unint64_t)v24)
      goto LABEL_41;
    v24 = (uint64_t *)((char *)v24 + 1);
    v9 = v46;
    sub_1BDD86DEC((uint64_t)v46, (uint64_t)v7, qword_1ED6F25C0);
    v2 = v3;
    sub_1BDF10344((uint64_t)v24, (int64_t)v24, (uint64_t)v7);
    sub_1BDD86E30((uint64_t)v9, qword_1ED6F25C0);
    sub_1BDD86E30(v43, qword_1ED6F25C0);
    goto LABEL_27;
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1BDDC0A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = v6 - 1;
  result = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F25C0);
  v9 = a2 + v6 - 1;
  if (__OFADD__(a2, v6 - 1))
  {
LABEL_19:
    __break(1u);
    return v9;
  }
  else
  {
    while (1)
    {
      v10 = v9 >= 0 ? v9 : v9 + 1;
      if (v9 < -1)
        break;
      v9 = v10 >> 1;
      if (v10 >> 1 >= v6)
        break;
      v11 = (uint64_t *)(a3
                      + ((*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
                      + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * v9);
      v12 = *v11;
      v13 = v11[1];
      if (v12 <= a1 && v13 > a1)
        return v9;
      if (v7 < a2)
        return v7;
      if (v12 > a1)
      {
        v7 = v9 - 1;
        v15 = __OFADD__(a2, v9 - 1);
        v9 = a2 + v9 - 1;
        if (v15)
          goto LABEL_19;
      }
      else
      {
        a2 = v9 + 1;
        v15 = __OFADD__(v9 + 1, v7);
        v9 += 1 + v7;
        if (v15)
          goto LABEL_19;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t destroy for PartiallyOrderedReferenceMap.Before(_QWORD *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDC0B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD);
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD);
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  _QWORD v45[4];

  v6 = sub_1BE1B203C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for IndexSetBoundaryIterator();
  v14 = a3 + v13[6];
  *(_OWORD *)v14 = 0u;
  *(_BYTE *)(v14 + 16) = 1;
  v15 = a3 + v13[7];
  v44 = 0u;
  *(_OWORD *)v15 = 0u;
  v40 = (_QWORD *)v15;
  *(_BYTE *)(v15 + 16) = 1;
  v43 = a1;
  sub_1BE1B2054();
  sub_1BE1B2030();
  v39 = v7;
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, v6);
  sub_1BDDC0E7C((uint64_t)v12, a3);
  v42 = a2;
  sub_1BE1B2054();
  sub_1BE1B2030();
  v38 = v16;
  v16(v9, v6);
  v41 = v13;
  v17 = a3 + v13[5];
  sub_1BDDC0E7C((uint64_t)v12, v17);
  v37 = v10;
  v18 = *(_QWORD *)(a3 + *(int *)(v10 + 36));
  sub_1BDD84E80();
  sub_1BE1B2C90();
  v19 = v45[0];
  if (v18 != v45[0])
  {
    v20 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
    v44 = *v21;
    v20(v45, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v9, a3, v6);
    sub_1BE1B2C9C();
    v38(v9, v6);
  }
  *(_OWORD *)v14 = v44;
  *(_BYTE *)(v14 + 16) = v18 == v19;
  v22 = *(_QWORD *)(v17 + *(int *)(v37 + 36));
  sub_1BE1B2C90();
  v23 = v45[0];
  if (v22 == v45[0])
  {
    v24 = 0;
    v25 = 0;
  }
  else
  {
    v26 = (void (*)(_QWORD *, _QWORD))sub_1BE1B2D14();
    v28 = v27[1];
    *(_QWORD *)&v44 = *v27;
    v26(v45, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v9, v17, v6);
    sub_1BE1B2C9C();
    v29 = v9;
    v25 = v28;
    v30 = v6;
    v24 = v44;
    v38(v29, v30);
  }
  v31 = sub_1BE1B206C();
  v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8);
  v32(v42, v31);
  result = ((uint64_t (*)(uint64_t, uint64_t))v32)(v43, v31);
  v34 = v40;
  v35 = v41;
  *v40 = v24;
  v34[1] = v25;
  *((_BYTE *)v34 + 16) = v22 == v23;
  *(_BYTE *)(a3 + v35[8]) = 0;
  *(_BYTE *)(a3 + v35[9]) = 0;
  return result;
}

uint64_t sub_1BDDC0E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFF58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CRAssetWatchedDirectory()
{
  return objc_opt_self();
}

uint64_t sub_1BDDC0EE4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B20F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDDC0F5C@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
  return sub_1BE1B20E4();
}

uint64_t destroy for CapsuleReference()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDC0FC4@<X0>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return sub_1BE1B20E4();
}

uint64_t sub_1BDDC0FE4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDC0FF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDDC1008(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1BDDC1008@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = qword_1ED6F8BC0 + 1;
  if (__OFADD__(qword_1ED6F8BC0, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    ++qword_1ED6F8BC0;
    v5 = sub_1BE1B1F58();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
    result = type metadata accessor for Replica();
    *(_QWORD *)(a2 + *(int *)(result + 20)) = v3;
  }
  return result;
}

uint64_t sub_1BDDC1088(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary_v1<A, B>);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDDC10B4()
{
  return swift_allocateGenericValueMetadata();
}

void CRDictionary_v1.endIndex.getter()
{
  sub_1BDD94DE4();
}

void CRDictionary_v1.startIndex.getter()
{
  sub_1BDD94DE4();
}

uint64_t type metadata accessor for CRDecodeContext.AnyDecodingReference()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CRAssetManager(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3BD8);
}

uint64_t sub_1BDDC1114@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = sub_1BE1B20CC();
  a1[2] = v2;
  return sub_1BE1B20E4();
}

uint64_t sub_1BDDC1154@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
  a1[2] = v1;
  return sub_1BE1B20E4();
}

uint64_t sub_1BDDC1180(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CRDictionary.Index.== infix(_:_:)(a1, a2, a3[2], a3[3], a5, a3[5], a3[6], a8);
}

uint64_t sub_1BDDC1190()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B20F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for RLEMapping()
{
  return &type metadata for RLEMapping;
}

uint64_t sub_1BDDC1210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1ED6F2E18, &qword_1ED6F2E08, a2);
}

uint64_t sub_1BDDC122C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 56))(a2, v9);
  result = a4(a1, a2, a3);
  if (v4)
    return result;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(a2, v9);
  v11 = result;
  v12 = 0;
  v13 = result + 64;
  v14 = 1 << *(_BYTE *)(result + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(result + 64);
  v26 = (unint64_t)(v14 + 63) >> 6;
  if (!v16)
    goto LABEL_6;
LABEL_5:
  v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v17 | (v12 << 6); ; i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    v22 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * i);
    v23 = *v22;
    v24 = v22[1];
    swift_bridgeObjectRetain();
    v25 = swift_retain();
    sub_1BDFDD458(v25, v23, v24);
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_5;
LABEL_6:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v26)
      return swift_release();
    v20 = *(_QWORD *)(v13 + 8 * v12);
    if (!v20)
      break;
LABEL_16:
    v16 = (v20 - 1) & v20;
  }
  v21 = v12 + 1;
  if (v12 + 1 >= v26)
    return swift_release();
  v20 = *(_QWORD *)(v13 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v12 + 2;
  if (v12 + 2 >= v26)
    return swift_release();
  v20 = *(_QWORD *)(v13 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v12 + 3;
  if (v12 + 3 >= v26)
    return swift_release();
  v20 = *(_QWORD *)(v13 + 8 * v21);
  if (v20)
  {
LABEL_15:
    v12 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v26)
      return swift_release();
    v20 = *(_QWORD *)(v13 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_16;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1BDDC1434(uint64_t a1)
{
  uint64_t v1;

  return sub_1BDD877F0(a1, *(_QWORD *)(v1 + 16));
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1BDDC1468(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1BDDC1574(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1BDDC1538((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1BDDC1538((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_1BDDC1538(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1BDDC1574(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1BE1B2F18();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1BE102614(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1BE1B30D4();
  if (!v8)
  {
    sub_1BE1B31F4();
    __break(1u);
LABEL_17:
    result = sub_1BE1B326C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

BOOL decodeSubstrings(unsigned int a1, unsigned int a2, void *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  id v9;
  uint64_t v10;
  unsigned int v11;
  NSUUID *v12;
  uint64_t i;
  NSUUID *v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int index;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t j;
  NSUUID *v34;
  int v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  _BOOL4 v61;
  unint64_t v64;
  BOOL v66;
  NSUUID *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  _OWORD v73[2];
  int v74;
  TopoReplica v75;
  TopoReplica v76;
  TopoReplica v77;
  unsigned __int8 uu[32];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  memset(v73, 0, sizeof(v73));
  v74 = 1065353216;
  if (a1)
  {
    v10 = 0;
    v66 = 0;
    v11 = a1;
    a1 = 0;
    v70 = v11;
    v64 = v11;
    while (1)
    {
      objc_msgSend(v9, "decodeSubstring:", v10);
      *(_DWORD *)&uu[16] = 0;
      uuid_clear(uu);
      v69 = a1;
      *(_DWORD *)&uu[20] = 0;
      objc_msgSend(v9, "substringCharReplicaWithError:", a7);
      v12 = (NSUUID *)objc_claimAutoreleasedReturnValue();
      if (!v12)
        break;
      TopoReplica::TopoReplica(&v77, v12, 0);
      *(TopoReplica *)uu = v77;
      *(_DWORD *)&uu[20] = objc_msgSend(v9, "substringCharClock");
      v68 = v12;
      *(_DWORD *)&uu[24] = objc_msgSend(v9, "substringLength");
      v71 = objc_msgSend(v9, "substringAddedByCount");
      if (v71 >= 1)
      {
        for (i = 0; i != v71; ++i)
        {
          objc_msgSend(v9, "substringAddedByReplica:withError:", i, a7);
          v14 = (NSUUID *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v9, "substringAddedByCounter:", i);
          v16 = *(_QWORD **)(*a4 + 8 * v10);
          TopoReplica::TopoReplica(&v76, v14, 0);
          v77 = v76;
          v17 = v16[6];
          v18 = v16[5];
          if (v18 >= v17)
          {
            v21 = v16[4];
            v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v21) >> 3);
            v23 = v22 + 1;
            if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
            v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v21) >> 3);
            if (2 * v24 > v23)
              v23 = 2 * v24;
            if (v24 >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v23;
            if (v25)
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)(v16 + 6), v25);
            else
              v26 = 0;
            v27 = &v26[24 * v22];
            *(TopoReplica *)v27 = v77;
            *((_DWORD *)v27 + 5) = v15;
            v29 = (char *)v16[4];
            v28 = (char *)v16[5];
            v30 = v27;
            if (v28 != v29)
            {
              do
              {
                v31 = *(_OWORD *)(v28 - 24);
                *((_QWORD *)v30 - 1) = *((_QWORD *)v28 - 1);
                *(_OWORD *)(v30 - 24) = v31;
                v30 -= 24;
                v28 -= 24;
              }
              while (v28 != v29);
              v28 = (char *)v16[4];
            }
            v20 = v27 + 24;
            v16[4] = v30;
            v16[5] = v27 + 24;
            v16[6] = &v26[24 * v25];
            if (v28)
              operator delete(v28);
          }
          else
          {
            index = v76.index;
            *(_OWORD *)v18 = *(_OWORD *)v76.uuid;
            *(_DWORD *)(v18 + 16) = index;
            *(_DWORD *)(v18 + 20) = v15;
            v20 = (char *)(v18 + 24);
          }
          v16[5] = v20;

        }
      }
      v32 = objc_msgSend(v9, "substringRemovedAddedByCount");
      if (v32 >= 1)
      {
        for (j = 0; j != v32; ++j)
        {
          objc_msgSend(v9, "substringRemovedAddedByReplica:withError:", j, a7);
          v34 = (NSUUID *)objc_claimAutoreleasedReturnValue();
          v35 = objc_msgSend(v9, "substringRemovedAddedByCounter:", j);
          v36 = *(_QWORD **)(*a4 + 8 * v10);
          TopoReplica::TopoReplica(&v75, v34, 0xFFFFFFFF);
          v77 = v75;
          v37 = v36[6];
          v38 = v36[5];
          if (v38 >= v37)
          {
            v41 = v36[4];
            v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v41) >> 3);
            v43 = v42 + 1;
            if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
            v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v41) >> 3);
            if (2 * v44 > v43)
              v43 = 2 * v44;
            if (v44 >= 0x555555555555555)
              v45 = 0xAAAAAAAAAAAAAAALL;
            else
              v45 = v43;
            if (v45)
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)(v36 + 6), v45);
            else
              v46 = 0;
            v47 = &v46[24 * v42];
            *(TopoReplica *)v47 = v77;
            *((_DWORD *)v47 + 5) = v35;
            v49 = (char *)v36[4];
            v48 = (char *)v36[5];
            v50 = v47;
            if (v48 != v49)
            {
              do
              {
                v51 = *(_OWORD *)(v48 - 24);
                *((_QWORD *)v50 - 1) = *((_QWORD *)v48 - 1);
                *(_OWORD *)(v50 - 24) = v51;
                v50 -= 24;
                v48 -= 24;
              }
              while (v48 != v49);
              v48 = (char *)v36[4];
            }
            v40 = v47 + 24;
            v36[4] = v50;
            v36[5] = v47 + 24;
            v36[6] = &v46[24 * v45];
            if (v48)
              operator delete(v48);
          }
          else
          {
            v39 = v75.index;
            *(_OWORD *)v38 = *(_OWORD *)v75.uuid;
            *(_DWORD *)(v38 + 16) = v39;
            *(_DWORD *)(v38 + 20) = v35;
            v40 = (char *)(v38 + 24);
          }
          v36[5] = v40;

        }
      }
      v52 = objc_msgSend(v9, "substringContentOptions");
      v53 = v69;
      v54 = *(_QWORD *)(*a4 + 8 * v10);
      v12 = v68;
      if (v52 == 2)
      {
        *(_DWORD *)(v54 + 84) = -1;
      }
      else
      {
        *(_DWORD *)(v54 + 84) = v69;
        if (v71 > 0 || v52 == 1)
        {
          v53 = *(_DWORD *)&uu[24] + v69;
          if (*(_DWORD *)&uu[24] + v69 > a2)
          {
            v69 += *(_DWORD *)&uu[24];
            NSLog(CFSTR("Corrupt mergeable string, substring max > string max."));
            break;
          }
        }
      }
      v55 = *(_OWORD *)uu;
      *(_OWORD *)(v54 + 12) = *(_OWORD *)&uu[12];
      *(_OWORD *)v54 = v55;
      v56 = objc_msgSend(v9, "substringChildCount");
      if (v56)
      {
        v57 = 0;
        v58 = 0;
        while (1)
        {
          v59 = objc_msgSend(v9, "substringChild:", v57);
          if (v59 >= v70)
            break;
          *(_QWORD *)v77.uuid = 0;
          v60 = *a4;
          *(_QWORD *)v77.uuid = *(_QWORD *)(*a4 + 8 * v59);
          TopoSubstring::addChild(*(TopoSubstring **)(v60 + 8 * v10), *(TopoSubstring **)v77.uuid);
          std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v73, &v77, &v77);
          v58 = ++v57 >= v56;
          if (v56 == v57)
            goto LABEL_51;
        }
        NSLog(CFSTR("Corrupt mergeable string, child substring index > number of substrings."));
      }
      else
      {
LABEL_51:
        v58 = 1;
      }
      if (a5
        && !std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(v73, (_QWORD *)(*a4 + 8 * v10)))
      {
        v58 = v58 & (*a5 == 0);
        *a5 = *(_QWORD *)(*a4 + 8 * v10);
      }
      v69 = v53;
      if (!a6 || v56)
      {
        if ((v58 & 1) == 0)
          break;
      }
      else
      {
        v61 = *a6 == 0;
        *a6 = *(_QWORD *)(*a4 + 8 * v10);
        if ((v61 & v58 & 1) == 0)
          break;
      }

      v66 = ++v10 >= v64;
      a1 = v53;
      if (v10 == v64)
        goto LABEL_62;
    }

    a1 = v69;
  }
  else
  {
LABEL_62:
    v66 = 1;
  }
  if (a1 != a2)
  {
    NSLog(CFSTR("Corrupt mergeable string, length of substrings != attributedString length."));
    v66 = 0;
  }
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)v73);

  return v66;
}

void sub_1BDDC1D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B7DF3C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BE1B20F0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1C3B7DED0](a1, v6, a5);
}

void TopoReplica::TopoReplica(TopoReplica *this, NSUUID *a2, unsigned int a3)
{
  NSUUID *v5;
  NSUUID *v6;

  v5 = a2;
  v6 = v5;
  this->index = a3;
  if (v5)
    -[NSUUID getUUIDBytes:](v5, "getUUIDBytes:", this);
  else
    uuid_clear(this->uuid);

}

void sub_1BDDC1F74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3B7DF48](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

void sub_1BDDC26F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::vector<TopoSubstring *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1BDDC2ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  int v13;
  void *v14;
  void *v15;

  if (v13)

  _Unwind_Resume(a1);
}

void sub_1BDDC2BE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BDDC2F18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void traverseIterative(uint64_t a1, void *a2)
{
  id v3;
  _OWORD v4[2];
  int v5;

  v3 = a2;
  if (a1)
  {
    memset(v4, 0, sizeof(v4));
    v5 = 1065353216;
    traverseIterative(a1, v4, v3);
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)v4);
  }

}

void sub_1BDDC315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1BDDC3234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CRTTMergeableString;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BDDC337C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void traverseUnordered(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t, char *);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;
  _OWORD v10[2];
  __int128 v11;
  _OWORD v12[2];
  int v13;
  uint64_t v14;

  v14 = a1;
  v3 = a2;
  if (a1)
  {
    memset(v12, 0, sizeof(v12));
    v13 = 1065353216;
    v11 = 0u;
    memset(v10, 0, sizeof(v10));
    v9 = 0;
    std::deque<TopoSubstring *>::push_back(v10, &v14);
    std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v12, &v14, &v14);
    while (*((_QWORD *)&v11 + 1))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v10[0] + 1)
                                 + (((unint64_t)(v11 + *((_QWORD *)&v11 + 1) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v11 + *((_QWORD *)&v11 + 1) - 1) & 0x1FF));
      --*((_QWORD *)&v11 + 1);
      std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](v10, 1);
      v3[2](v3, v4, &v9);
      v5 = v4;
      if (v9)
        break;
      while (1)
      {
        v7 = *(char **)(v5 + 56);
        v6 = *(char **)(v5 + 64);
        if (v6 - v7 != 8)
          break;
        v5 = *(_QWORD *)v7;
        if (*(_DWORD *)(*(_QWORD *)v7 + 80) != 1)
          break;
        v3[2](v3, *(_QWORD *)v7, &v9);
        if (v9 || v5 == v4)
          goto LABEL_17;
      }
      while (v7 != v6)
      {
        v8 = 0;
        v8 = *(_QWORD *)v7;
        if (*(_DWORD *)(v8 + 80) > 1u)
        {
          if (!std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(v12, &v8))
          {
            std::deque<TopoSubstring *>::push_back(v10, &v8);
            std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v12, &v8, &v8);
          }
        }
        else
        {
          std::deque<TopoSubstring *>::push_back(v10, &v8);
        }
        v7 += 8;
      }
    }
LABEL_17:
    std::deque<TopoSubstring *>::~deque[abi:ne180100](v10);
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)v12);
  }

}

void sub_1BDDC3534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::deque<TopoSubstring *>::~deque[abi:ne180100]((uint64_t *)va);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va1);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1BDDC37D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void traverseIterative(uint64_t a1, _QWORD *a2, void *a3)
{
  void (**v5)(id, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;
  char *v20;

  v19 = a1;
  v5 = a3;
  if (a1)
  {
    v18 = 0u;
    memset(v17, 0, sizeof(v17));
    std::deque<TopoSubstring *>::push_back(v17, &v19);
    v6 = *((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      while (1)
      {
        v7 = v6 - 1;
        v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v17[0] + 1)
                                   + (((unint64_t)(v18 + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v18 + v7) & 0x1FF));
        *((_QWORD *)&v18 + 1) = v7;
        std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](v17, 1);
        v5[2](v5, v8);
        while (1)
        {
          v10 = *(char **)(v8 + 56);
          v9 = *(char **)(v8 + 64);
          if (v9 - v10 != 8)
            break;
          v11 = *(_QWORD *)v10;
          if (*(_DWORD *)(*(_QWORD *)v10 + 80) != 1)
            break;
          v5[2](v5, *(_QWORD *)v10);
          v8 = v11;
        }
        if (v9 != v10)
          break;
LABEL_18:
        v6 = *((_QWORD *)&v18 + 1);
        if (!*((_QWORD *)&v18 + 1))
          goto LABEL_19;
      }
      v12 = v9 - 8;
      while (1)
      {
        v13 = std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(a2, v12);
        if (v13)
        {
          v14 = *((_DWORD *)v13 + 6) - 1;
          if (*((_DWORD *)v13 + 6) == 1)
            goto LABEL_15;
        }
        else
        {
          v15 = *(_DWORD *)(*(_QWORD *)v12 + 80);
          if (v15 < 2)
          {
LABEL_15:
            std::deque<TopoSubstring *>::push_back(v17, v12);
            goto LABEL_16;
          }
          v20 = v12;
          v13 = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned int>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned int>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)a2, v12, (uint64_t)&std::piecewise_construct, (_QWORD **)&v20);
          v14 = v15 - 1;
        }
        *((_DWORD *)v13 + 6) = v14;
LABEL_16:
        v16 = v12 == *(char **)(v8 + 56);
        v12 -= 8;
        if (v16)
          goto LABEL_18;
      }
    }
LABEL_19:
    std::deque<TopoSubstring *>::~deque[abi:ne180100](v17);
  }

}

void sub_1BDDC3B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::deque<TopoSubstring *>::~deque[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void TopoSubstring::addChild(TopoSubstring *this, TopoSubstring *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 9);
  v4 = (char *)this + 72;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 7);
    v18 = (char *)*((_QWORD *)this + 8);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 7) = v16;
    *((_QWORD *)this + 8) = v8;
    *((_QWORD *)this + 9) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 8) = v8;
  ++*((_DWORD *)a2 + 20);
}

void std::deque<TopoSubstring *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TopoSubstring *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TopoSubstring *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<TopoSubstring **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<TopoSubstring **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<TopoSubstring **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TopoSubstring **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1BDDC40CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<TopoSubstring **>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

uint64_t std::__split_buffer<TopoSubstring **>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_1BDDC4278(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C00);
  v10 = sub_1BDDA9D60(&qword_1ED6F3C08, &qword_1ED6F3C00, MEMORY[0x1E0CB1B08]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1BDDC4328(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

_BYTE *sub_1BDDC4328@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1BDDC439C(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1BDED742C((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1BDED74A4((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1BDDC439C(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BE1B20F0();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t objectdestroyTm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1BDDC45F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  sub_1BDDB6CA4(v3, v2);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BDDC4674@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BE1B3788();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t static CodingKey<>.intCases.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v15[-v10];
  sub_1BE1B3074();
  v16 = a1;
  v17 = a2;
  v18 = a3;
  v19 = a4;
  swift_getAssociatedConformanceWitness();
  v12 = sub_1BE1B28AC();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  v13 = sub_1BDEFA0EC(v12);
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t *sub_1BDDC47E0(unint64_t *result, unint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8[3];

  v3 = (unint64_t)result;
  v4 = a2 - (_QWORD)result;
  if (a2 < (unint64_t)result)
  {
    if ((uint64_t)((uint64_t)result - a2) < 0)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v4 = a2 - (_QWORD)result;
LABEL_5:
    if (!v4)
      return (unint64_t *)MEMORY[0x1E0DEE9D8];
    if (v4 <= 0)
    {
      v5 = (unint64_t *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3868);
      v5 = (unint64_t *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v4;
      v5[3] = 2 * (v7 >> 3);
    }
    result = sub_1BDDC7C0C(v8, v5 + 4, v4, v3, a2);
    if (result == (unint64_t *)v4)
      return v5;
    __break(1u);
    goto LABEL_15;
  }
  if ((uint64_t)(a2 - (_QWORD)result) >= 0)
    goto LABEL_5;
LABEL_16:
  __break(1u);
  return result;
}

uint64_t *sub_1BDDC48BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (uint64_t *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF508);
  v3 = (uint64_t *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1BDDC7D3C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1BDE27FD0();
  if (v6 != v1)
  {
    __break(1u);
    return (uint64_t *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1BDDC49A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1BDDC4D1C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1BE1B3068();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1BE1B31F4();
      __break(1u);
LABEL_10:
      v2 = sub_1BE1B2870();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1BE1B326C();
    __break(1u);
LABEL_14:
    result = sub_1BE1B31F4();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1BDDC4B14(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;

  sub_1BE1B27C8();
  sub_1BE1B36F8();
  sub_1BE1B2834();
  v3 = sub_1BE1B371C();
  swift_bridgeObjectRelease();
  return a2(a1, v3);
}

uint64_t sub_1BDDC4B9C(uint64_t a1)
{
  return sub_1BDDC4B14(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1BDDC4BA8);
}

unint64_t sub_1BDDC4BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1BE1B27C8();
    v8 = v7;
    if (v6 == sub_1BE1B27C8() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1BE1B34AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1BE1B27C8();
          v15 = v14;
          if (v13 == sub_1BE1B27C8() && v15 == v16)
            break;
          v18 = sub_1BE1B34AC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

_QWORD *sub_1BDDC4D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3A08);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1BDDC4D80(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1BDDAE814(a1, a2, a3, (uint64_t (*)(void))sub_1BDE63B5C, (void (*)(void))sub_1BDDC5730);
}

uint64_t sub_1BDDC4D94(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1BDD9004C(a1, a2, a3, (void (*)(void))sub_1BDE66CB0, (void (*)(void))sub_1BDDC5AD4);
}

_QWORD *sub_1BDDC4DA8(unint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for Replica();
  sub_1BDDA2E8C(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  result = sub_1BDDB4F58(a3, (_QWORD *)(a4[7] + 16 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1BDDC4E48(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1BE1B1DF0();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_1BDDC4EE0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1BE1B2F84();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        sub_1BE1B36F8();
        sub_1BDDB6CA4(v10, v11);
        sub_1BE1B1E8C();
        v12 = sub_1BE1B371C();
        result = sub_1BDDB796C(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1BDDC50C4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  __int128 v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26B8);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v34 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v11)
        goto LABEL_33;
      v25 = *(_QWORD *)(v34 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v34 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v25 = *(_QWORD *)(v34 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v14 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    v31 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v22);
    v37 = v32[1];
    v38 = v31;
    v35 = *v32;
    v36 = v32[2];
    if ((a2 & 1) == 0)
    {
      sub_1BDDB6CA4(v31, *((unint64_t *)&v31 + 1));
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v38;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      v19 = v38;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    v20 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 48 * v18);
    *v20 = v35;
    v20[1] = v37;
    v20[2] = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDDC5428(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFDB8);
  v6 = sub_1BE1B3254();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v2;
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v33 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v32;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v33 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    v34 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_1BDDB6CA4(v34, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21 + 8));
      swift_retain();
    }
    sub_1BE1B36F8();
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v34;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v30;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v32;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v31 = 1 << *(_BYTE *)(v5 + 32);
  if (v31 >= 64)
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v31;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BDDC5730(uint64_t a1, int a2)
{
  return sub_1BDDAEC08(a1, a2, &qword_1ED6EFCB0);
}

uint64_t sub_1BDDC573C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v5 = v3;
  v7 = sub_1BE1B1DF0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v44 = a2;
  v12 = sub_1BE1B3254();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v3;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v5 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    result = sub_1BE1B26D8();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

uint64_t sub_1BDDC5AD4(uint64_t a1, int a2)
{
  return sub_1BDDC573C(a1, a2, qword_1ED6F0018);
}

void sub_1BDDC5AE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6EE9B0[0])
  {
    sub_1BE1B203C();
    sub_1BDD84E80();
    v0 = sub_1BE1B3170();
    if (!v1)
      atomic_store(v0, qword_1ED6EE9B0);
  }
}

_QWORD *sub_1BDDC5B40(_QWORD *a1)
{
  return sub_1BDDC5D74(0, a1[2], 0, a1);
}

uint64_t sub_1BDDC5B54(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1BE1B31F4();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1BDDC60A4(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_1BDDC5D60(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDC5B54(a1, a2, a3, a4, &qword_1ED6F26C8, qword_1ED6F25C0);
}

_QWORD *sub_1BDDC5D74(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26C0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BDDC5FB0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDDC5E98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6EFCB8, type metadata accessor for FinalizedTimestampRange);
}

uint64_t sub_1BDDC5EAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6EF850, type metadata accessor for Proto_Reference);
}

uint64_t sub_1BDDC5EC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDDC5FB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDDC60A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDDC61BC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1BDE6C638();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1BDE708DC();
      goto LABEL_14;
    }
    sub_1BDE72350();
  }
  v8 = *v3;
  result = sub_1BE1B36EC();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_1BE1B3674();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1BDDC62DC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v27 = a1;
  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v26 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1BDE6CE18(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &qword_1ED6EFCA8, (unint64_t *)&qword_1ED6F2DB8, MEMORY[0x1E0CB09C8]);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1BDE70DE4((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &qword_1ED6EFCA8);
      goto LABEL_12;
    }
    sub_1BDE72AB4(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &qword_1ED6EFCA8, (unint64_t *)&qword_1ED6F2DB8, MEMORY[0x1E0CB09C8]);
  }
  v13 = *v3;
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v14 = sub_1BE1B26D8();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = ~v15;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v18(v9, *(_QWORD *)(v13 + 48) + v17 * a2, v6);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F2858, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v19 = sub_1BE1B2798();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = v27;
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v21 + 48) + *(_QWORD *)(v7 + 72) * a2, v20, v6);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1BE1B3674();
  __break(1u);
  return result;
}

uint64_t sub_1BDDC6530(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  int64_t v25;

  v21 = (unint64_t *)result;
  v22 = 0;
  v6 = 0;
  v23 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v25 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v25)
      goto LABEL_24;
    v17 = *(_QWORD *)(v23 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= v25)
        goto LABEL_24;
      v17 = *(_QWORD *)(v23 + 8 * v6);
      if (!v17)
      {
        v6 = v16 + 2;
        if (v16 + 2 >= v25)
          goto LABEL_24;
        v17 = *(_QWORD *)(v23 + 8 * v6);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v9 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v24[0] = v13;
    v24[1] = v14;
    sub_1BDDB6CA4(v13, v14);
    v15 = a4(v24);
    result = sub_1BDDB796C(v13, v14);
    if ((v15 & 1) != 0)
    {
      *(unint64_t *)((char *)v21 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_1BDDC68A4(v21, a2, v22, a3);
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v25)
    goto LABEL_24;
  v17 = *(_QWORD *)(v23 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v25)
      goto LABEL_24;
    v17 = *(_QWORD *)(v23 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1BDDC6728(uint64_t isStackAllocationSafe, uint64_t (*a2)(_QWORD *))
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1BDDC6530((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    swift_release();
    if (v2)
      swift_willThrow();
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v8 = sub_1BDDC6530((uint64_t)v9, v6, v4, a2);
    swift_release();
    MEMORY[0x1C3B7E068](v9, -1, -1);
  }
  return v8;
}

uint64_t sub_1BDDC68A4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2680);
  result = sub_1BE1B3044();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    sub_1BE1B36F8();
    sub_1BDDB6CA4(v18, v19);
    sub_1BE1B1E8C();
    result = sub_1BE1B371C();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1BDDC6B3C()
{
  uint64_t result;

  result = sub_1BE1B27A4();
  qword_1ED6F8BA0 = result;
  return result;
}

uint64_t sub_1BDDC6B70()
{
  return sub_1BDD8422C(qword_1ED6EFDD0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1BE1B5BB8);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_1BDD8426C(a1, (unint64_t *)&unk_1ED6EFDC0);
}

unint64_t sub_1BDDC6BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F4480[0];
  if (!qword_1ED6F4480[0])
  {
    v1 = sub_1BE1B2E04();
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, qword_1ED6F4480);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1BDD8426C(a1, (unint64_t *)&unk_1ED6F2670);
}

uint64_t sub_1BDDC6C0C()
{
  return sub_1BDD8422C(&qword_1ED6F3CC8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BE1B5CCC);
}

uint64_t sub_1BDDC6C38(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1BDDC6C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(_QWORD *)(a2 + 40 + 8 * result++);
    if (v6 == a1)
      return result;
  }
  return 0;
}

uint64_t sub_1BDDC6CD4(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  sub_1BDDBFF68();
  result = sub_1BE1B2B7C();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    sub_1BDDB6CA4(*v11, v13);
    sub_1BDDBC6BC(v17, v12, v13);
    result = sub_1BDDB796C(v17[0], v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1BDDC6E74(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1BE1B36EC();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BDDC61BC(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1BDDC6F6C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  sub_1BDD8422C((unint64_t *)&qword_1ED6F2DB8, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = sub_1BE1B26D8();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F2858, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = sub_1BE1B2798();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BDDC62DC((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_1BDDC71C8(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_1BDE77680();
  return result;
}

void sub_1BDDC71DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6F3C48)
  {
    v0 = sub_1BE1B2B04();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6F3C48);
  }
}

uint64_t sub_1BDDC7234(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)*v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v2 = (uint64_t)v4;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)sub_1BDDC5B40(v4);
  v4 = (_QWORD *)result;
  *v2 = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4[2] > a2)
    return (uint64_t)nullsub_1;
LABEL_7:
  __break(1u);
  return result;
}

unint64_t sub_1BDDC72AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F4470;
  if (!qword_1ED6F4470)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED6F4460);
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F4470);
  }
  return result;
}

uint64_t sub_1BDDC72F8(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;

  v3 = type metadata accessor for FinalizedTimestamp(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v56 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v57 = (uint64_t)&v54 - v8;
  MEMORY[0x1E0C80A78](v7);
  v58 = (uint64_t)&v54 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC88);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2DC0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v54 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v54 - v20;
  v59 = type metadata accessor for FinalizedTimestampRange(0);
  v22 = *(_QWORD *)(v59 - 8);
  v23 = MEMORY[0x1E0C80A78](v59);
  v63 = (uint64_t)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v54 - v25;
  v27 = *v1;
  v28 = *(_QWORD *)(*v1 + 16);
  if (!v28)
    goto LABEL_19;
  v62 = v1;
  v55 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v54 = *(_QWORD *)(v22 + 72);
  v29 = (uint64_t)v26;
  sub_1BDD9C318(v27 + v55 + v54 * (v28 - 1), (uint64_t)v26, type metadata accessor for FinalizedTimestampRange);
  v60 = v29;
  sub_1BE19B280((uint64_t)v21);
  v61 = a1;
  sub_1BDD86DEC(a1, (uint64_t)v19, (uint64_t *)&unk_1ED6F2DC0);
  v30 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1BDD86DEC((uint64_t)v21, (uint64_t)v12, (uint64_t *)&unk_1ED6F2DC0);
  sub_1BDD86DEC((uint64_t)v19, v30, (uint64_t *)&unk_1ED6F2DC0);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v31((uint64_t)v12, 1, v3) == 1)
  {
    sub_1BDD86E30((uint64_t)v19, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD86E30((uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
    if (v31(v30, 1, v3) == 1)
    {
      sub_1BDD86E30((uint64_t)v12, (uint64_t *)&unk_1ED6F2DC0);
      a1 = v61;
      v1 = v62;
      goto LABEL_10;
    }
    v32 = &qword_1ED6EFC88;
    a1 = v61;
    v1 = v62;
  }
  else
  {
    sub_1BDD86DEC((uint64_t)v12, (uint64_t)v16, (uint64_t *)&unk_1ED6F2DC0);
    if (v31(v30, 1, v3) == 1)
    {
      v32 = &qword_1ED6EFC88;
    }
    else
    {
      v33 = v58;
      sub_1BDDA2E8C(v30, v58, type metadata accessor for FinalizedTimestamp);
      v34 = *(int *)(v3 + 20);
      v35 = *(_QWORD *)&v16[v34];
      v36 = *(_QWORD *)(v33 + v34);
      v37 = v57;
      sub_1BDD9C318((uint64_t)v16, v57, type metadata accessor for FinalizedTimestamp);
      v38 = v56;
      sub_1BDD9C318(v33, v56, type metadata accessor for FinalizedTimestamp);
      if (v35 == v36)
      {
        v39 = sub_1BE1B1F10();
        sub_1BDD9C3E0(v38, type metadata accessor for FinalizedTimestamp);
        sub_1BDD9C3E0(v37, type metadata accessor for FinalizedTimestamp);
        sub_1BDD9C3E0(v33, type metadata accessor for FinalizedTimestamp);
        sub_1BDD86E30((uint64_t)v19, (uint64_t *)&unk_1ED6F2DC0);
        sub_1BDD86E30((uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
        sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
        sub_1BDD86E30((uint64_t)v12, (uint64_t *)&unk_1ED6F2DC0);
        a1 = v61;
        v1 = v62;
        if ((v39 & 1) != 0)
        {
LABEL_10:
          v40 = *v1;
          v41 = *(_QWORD *)(*v1 + 16);
          v42 = v59;
          v43 = *(_QWORD *)(a1 + *(int *)(v59 + 20));
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
          {
            if (v41)
              goto LABEL_12;
          }
          else
          {
            result = sub_1BDFCEA64(v40);
            v40 = result;
            if (v41)
            {
LABEL_12:
              if (v41 <= *(_QWORD *)(v40 + 16))
              {
                v45 = v40 + v55 + (v41 - 1) * v54;
                v46 = *(int *)(v42 + 20);
                v47 = *(_QWORD *)(v45 + v46);
                v48 = __OFADD__(v47, v43);
                v49 = v47 + v43;
                if (!v48)
                {
                  *(_QWORD *)(v45 + v46) = v49;
                  *v1 = v40;
                  return sub_1BDD9C3E0(v60, type metadata accessor for FinalizedTimestampRange);
                }
                goto LABEL_27;
              }
LABEL_26:
              __break(1u);
LABEL_27:
              __break(1u);
              return result;
            }
          }
          __break(1u);
          goto LABEL_26;
        }
        goto LABEL_18;
      }
      sub_1BDD9C3E0(v38, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v37, type metadata accessor for FinalizedTimestamp);
      sub_1BDD9C3E0(v33, type metadata accessor for FinalizedTimestamp);
      v32 = (uint64_t *)&unk_1ED6F2DC0;
    }
    a1 = v61;
    v1 = v62;
    sub_1BDD86E30((uint64_t)v19, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD86E30((uint64_t)v21, (uint64_t *)&unk_1ED6F2DC0);
    sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for FinalizedTimestamp);
  }
  sub_1BDD86E30((uint64_t)v12, v32);
LABEL_18:
  sub_1BDD9C3E0(v60, type metadata accessor for FinalizedTimestampRange);
LABEL_19:
  v50 = v63;
  sub_1BDD9C318(a1, v63, type metadata accessor for FinalizedTimestampRange);
  v51 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v51 = sub_1BDDC5E98(0, *(_QWORD *)(v51 + 16) + 1, 1, v51);
  v53 = *(_QWORD *)(v51 + 16);
  v52 = *(_QWORD *)(v51 + 24);
  if (v53 >= v52 >> 1)
    v51 = sub_1BDDC5E98(v52 > 1, v53 + 1, 1, v51);
  *(_QWORD *)(v51 + 16) = v53 + 1;
  result = sub_1BDDA2E8C(v50, v51+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v53, type metadata accessor for FinalizedTimestampRange);
  *v1 = v51;
  return result;
}

uint64_t sub_1BDDC7898(uint64_t a1)
{
  return sub_1BDDC78AC(a1, (uint64_t (*)(void))sub_1BDDC5EAC, type metadata accessor for Proto_Reference);
}

uint64_t sub_1BDDC78AC(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDDC7A24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDDC7A88(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = v2 >> 1;
  v5 = v2 - 1;
  v6 = 24 * v2 + 16;
  v7 = 6;
  v20 = v2 >> 1;
  while (1)
  {
    if (v3 == v5)
      goto LABEL_4;
    v8 = v1[2];
    if (v3 >= v8)
      break;
    if (v5 >= v8)
      goto LABEL_13;
    v9 = v1[v7 - 2];
    v10 = v1[v7 - 1];
    v11 = v1[v7];
    v12 = (_QWORD *)((char *)v1 + v6);
    v13 = v1;
    v14 = *(_QWORD *)((char *)v1 + v6 - 8);
    v15 = *v12;
    v16 = v12[1];
    v22 = v9;
    sub_1BDDC8E74(v9);
    v21 = v11;
    v17 = v14;
    v1 = v13;
    swift_bridgeObjectRetain();
    sub_1BDDC8E74(v17);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_1BDDC5B40(v13);
    v18 = &v1[v7];
    sub_1BDDC8EA0(v1[v7 - 2]);
    result = swift_bridgeObjectRelease();
    *(v18 - 2) = v17;
    *(v18 - 1) = v15;
    *v18 = v16;
    if (v5 >= v1[2])
      goto LABEL_14;
    v19 = (_QWORD *)((char *)v1 + v6);
    sub_1BDDC8EA0(*(_QWORD *)((char *)v1 + v6 - 8));
    result = swift_bridgeObjectRelease();
    *(v19 - 1) = v22;
    *v19 = v10;
    v4 = v20;
    v19[1] = v21;
LABEL_4:
    ++v3;
    v7 += 3;
    --v5;
    v6 -= 24;
    if (v4 == v3)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

unint64_t *sub_1BDDC7C0C(unint64_t *result, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  _QWORD *v17;
  unint64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) != 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    v6 = a3 - 1;
    if (a3 == 1)
      goto LABEL_7;
    v7 = a3 - 2;
    if (a3 - 2 >= ~a4 + a5)
      v7 = ~a4 + a5;
    if (v7 < v6)
      v6 = v7;
    v8 = v6 + 1;
    if (v8 > 4)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v9 = v8 - v11 + 1;
      v13 = v5 + v12;
      v10 = &a2[v12];
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_1BE1C0920);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 1;
      v10 = a2;
    }
    v17 = v10 + 1;
    v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5)
        goto LABEL_30;
      ++v9;
      v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9)
        goto LABEL_7;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDDC7D3C(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    *v11 = *v20;
    v11[1] = v22;
    if (v13 == v10)
    {
      sub_1BDDB6CA4(v21, v22);
      goto LABEL_38;
    }
    v11 += 2;
    result = sub_1BDDB6CA4(v21, v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1BDDC7F38(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1BE1B2FB4();
    type metadata accessor for AnyReference();
    sub_1BDF1A8A8();
    result = sub_1BE1B2BDC();
    v1 = v25;
    v24 = v26;
    v3 = v27;
    v4 = v28;
    v5 = v29;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v3 = ~v6;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v5 = v8 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = 0;
  }
  v9 = (unint64_t)(v3 + 64) >> 6;
  v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v10 = v4;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    if (!sub_1BE1B3008())
      goto LABEL_38;
    type metadata accessor for AnyReference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v13 = v30;
    v14 = swift_unknownObjectRelease();
    if (!v30)
      goto LABEL_38;
LABEL_31:
    if (((*(uint64_t (**)(uint64_t))(*v13 + 128))(v14) & 1) != 0)
    {
      v18 = v13[3];
      v22 = v13[2];
      sub_1BDDB6CA4(v22, v18);
      swift_release();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1BDE0667C(0, v23[2] + 1, 1, v23);
        v23 = (_QWORD *)result;
      }
      v20 = v23[2];
      v19 = v23[3];
      if (v20 >= v19 >> 1)
      {
        result = (uint64_t)sub_1BDE0667C((_QWORD *)(v19 > 1), v20 + 1, 1, v23);
        v23 = (_QWORD *)result;
      }
      v23[2] = v20 + 1;
      v21 = &v23[2 * v20];
      v21[4] = v22;
      v21[5] = v18;
    }
    else
    {
      result = swift_release();
    }
  }
  if (v5)
  {
    v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v12 = v11 | (v4 << 6);
LABEL_30:
    v13 = *(_QWORD **)(*(_QWORD *)(v1 + 48) + 8 * v12);
    v14 = swift_retain();
    if (!v13)
      goto LABEL_38;
    goto LABEL_31;
  }
  v15 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v15 >= v9)
      goto LABEL_38;
    v16 = *(_QWORD *)(v24 + 8 * v15);
    ++v4;
    if (!v16)
    {
      v4 = v10 + 2;
      if (v10 + 2 >= v9)
        goto LABEL_38;
      v16 = *(_QWORD *)(v24 + 8 * v4);
      if (!v16)
      {
        v4 = v10 + 3;
        if (v10 + 3 >= v9)
          goto LABEL_38;
        v16 = *(_QWORD *)(v24 + 8 * v4);
        if (!v16)
        {
          v4 = v10 + 4;
          if (v10 + 4 >= v9)
            goto LABEL_38;
          v16 = *(_QWORD *)(v24 + 8 * v4);
          if (!v16)
          {
            v4 = v10 + 5;
            if (v10 + 5 >= v9)
              goto LABEL_38;
            v16 = *(_QWORD *)(v24 + 8 * v4);
            if (!v16)
            {
              v17 = v10 + 6;
              while (v9 != v17)
              {
                v16 = *(_QWORD *)(v24 + 8 * v17++);
                if (v16)
                {
                  v4 = v17 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              sub_1BDE27FD0();
              return (uint64_t)v23;
            }
          }
        }
      }
    }
LABEL_29:
    v5 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v4 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDDC8264(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _QWORD v7[2];

  if (*a1)
  {
    sub_1BDDB4F58(a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    sub_1BDD8DCC0(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;
    swift_bridgeObjectRelease();
    return sub_1BDD9C3E0(a2, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
  }
  else
  {
    sub_1BDD86E30((uint64_t)a1, qword_1ED6F23F0);
    sub_1BDEF0598(a2, v7);
    sub_1BDD9C3E0(a2, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    return sub_1BDD86E30((uint64_t)v7, qword_1ED6F23F0);
  }
}

uint64_t sub_1BDDC8334(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t *v53;
  uint64_t v54;
  int64_t v55;
  int64_t v57;

  v2 = v1;
  v54 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v55 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v53 = v1;
  if (v5)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v11 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_56;
    if (v11 >= v55)
      goto LABEL_54;
    v12 = *(_QWORD *)(v54 + 8 * v11);
    v13 = v6 + 1;
    if (!v12)
    {
      v13 = v6 + 2;
      if (v6 + 2 >= v55)
        goto LABEL_54;
      v12 = *(_QWORD *)(v54 + 8 * v13);
      if (!v12)
      {
        v13 = v6 + 3;
        if (v6 + 3 >= v55)
          goto LABEL_54;
        v12 = *(_QWORD *)(v54 + 8 * v13);
        if (!v12)
        {
          v14 = v6 + 4;
          if (v6 + 4 < v55)
          {
            v12 = *(_QWORD *)(v54 + 8 * v14);
            if (v12)
            {
              v13 = v6 + 4;
              goto LABEL_21;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_60;
              if (v13 >= v55)
                break;
              v12 = *(_QWORD *)(v54 + 8 * v13);
              ++v14;
              if (v12)
                goto LABEL_21;
            }
          }
LABEL_54:
          swift_release();
          result = swift_bridgeObjectRelease();
          *v2 = (uint64_t)v7;
          return result;
        }
      }
    }
LABEL_21:
    v5 = (v12 - 1) & v12;
    v57 = v13;
    for (i = __clz(__rbit64(v12)) + (v13 << 6); ; i = v9 | (v6 << 6))
    {
      v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
      v17 = *v15;
      v16 = v15[1];
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
      v19 = *v2;
      v20 = *(_QWORD *)(*v2 + 16);
      swift_bridgeObjectRetain();
      if (!v20)
      {
        swift_retain();
        goto LABEL_35;
      }
      swift_bridgeObjectRetain();
      swift_retain();
      v21 = sub_1BDDB271C(v17, v16);
      if ((v22 & 1) == 0)
        break;
      v23 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v21);
      swift_retain();
      swift_bridgeObjectRelease();
      v24 = v18;
      if (v23 != v18)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v25 = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 160))();
          swift_release();
          v23 = v25;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 96))(v18);
        v24 = v23;
      }
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v28 = sub_1BDDB271C(v17, v16);
      v29 = v7[2];
      v30 = (v27 & 1) == 0;
      v31 = v29 + v30;
      if (__OFADD__(v29, v30))
        goto LABEL_58;
      v32 = v27;
      if (v7[3] >= v31)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v27 & 1) != 0)
            goto LABEL_46;
        }
        else
        {
          sub_1BDE647E0();
          if ((v32 & 1) != 0)
            goto LABEL_46;
        }
      }
      else
      {
        sub_1BDE5FE78(v31, isUniquelyReferenced_nonNull_native);
        v33 = sub_1BDDB271C(v17, v16);
        if ((v32 & 1) != (v34 & 1))
          goto LABEL_61;
        v28 = v33;
        if ((v32 & 1) != 0)
        {
LABEL_46:
          v48 = v7[7];
          swift_release();
          *(_QWORD *)(v48 + 8 * v28) = v24;
          goto LABEL_52;
        }
      }
      v7[(v28 >> 6) + 8] |= 1 << v28;
      v49 = (uint64_t *)(v7[6] + 16 * v28);
      *v49 = v17;
      v49[1] = v16;
      *(_QWORD *)(v7[7] + 8 * v28) = v24;
      v50 = v7[2];
      v46 = __OFADD__(v50, 1);
      v51 = v50 + 1;
      if (v46)
        goto LABEL_59;
      v7[2] = v51;
      swift_bridgeObjectRetain();
LABEL_52:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v2 = v53;
      v6 = v57;
      if (!v5)
        goto LABEL_8;
LABEL_7:
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v57 = v6;
    }
    swift_bridgeObjectRelease();
LABEL_35:
    swift_retain();
    v35 = swift_isUniquelyReferenced_nonNull_native();
    v37 = sub_1BDDB271C(v17, v16);
    v38 = v7[2];
    v39 = (v36 & 1) == 0;
    v40 = v38 + v39;
    if (!__OFADD__(v38, v39))
    {
      v41 = v36;
      if (v7[3] >= v40)
      {
        if ((v35 & 1) != 0)
        {
          if ((v36 & 1) == 0)
            goto LABEL_42;
        }
        else
        {
          sub_1BDE647E0();
          if ((v41 & 1) == 0)
            goto LABEL_42;
        }
      }
      else
      {
        sub_1BDE5FE78(v40, v35);
        v42 = sub_1BDDB271C(v17, v16);
        if ((v41 & 1) != (v43 & 1))
          goto LABEL_61;
        v37 = v42;
        if ((v41 & 1) == 0)
        {
LABEL_42:
          v7[(v37 >> 6) + 8] |= 1 << v37;
          v44 = (uint64_t *)(v7[6] + 16 * v37);
          *v44 = v17;
          v44[1] = v16;
          *(_QWORD *)(v7[7] + 8 * v37) = v18;
          v45 = v7[2];
          v46 = __OFADD__(v45, 1);
          v47 = v45 + 1;
          if (v46)
            goto LABEL_57;
          v7[2] = v47;
          swift_bridgeObjectRetain();
          goto LABEL_6;
        }
      }
      v8 = v7[7];
      swift_release();
      *(_QWORD *)(v8 + 8 * v37) = v18;
LABEL_6:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v57;
      if (!v5)
        continue;
      goto LABEL_7;
    }
    break;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

unint64_t sub_1BDDC8800(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B718);
  v2 = sub_1BE1B3260();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1BDD86DEC(v6, (uint64_t)&v15, &qword_1EF530748);
    v7 = v15;
    v8 = v16;
    result = sub_1BDDB7F0C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1BDE77688(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BDDC8934(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26B8);
  v2 = (_QWORD *)sub_1BE1B3260();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = a1 + 40;
  while (1)
  {
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(_QWORD *)v4;
    v8 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v16 = *(_OWORD *)(v4 + 40);
    v17 = *(_OWORD *)(v4 + 24);
    sub_1BDDB6CA4(v5, *(_QWORD *)v4);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1BDDB7F0C(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = v2[7] + 48 * result;
    *(_QWORD *)v12 = v8;
    *(_QWORD *)(v12 + 8) = v7;
    *(_OWORD *)(v12 + 16) = v17;
    *(_OWORD *)(v12 + 32) = v16;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 64;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BDDC8AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F43D0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26B0);
  v6 = sub_1BE1B3260();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1BDD86DEC(v12, (uint64_t)v5, qword_1ED6F43D0);
    result = sub_1BDDB3EC0((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for Replica();
    sub_1BDDA2E8C((uint64_t)v5, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    result = (unint64_t)sub_1BDDB4F58(v9, (_QWORD *)(v7[7] + 16 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BDDC8C50()
{
  unint64_t result;

  result = qword_1ED6EFBB8[0];
  if (!qword_1ED6EFBB8[0])
  {
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, qword_1ED6EFBB8);
  }
  return result;
}

uint64_t sub_1BDDC8C94()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Replica();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDDC8D0C()
{
  return sub_1BDD8422C(&qword_1ED6F2848, type metadata accessor for Proto_Set, (uint64_t)&unk_1BE1C56FC);
}

uint64_t sub_1BDDC8D3C()
{
  return sub_1BDD8422C(&qword_1ED6F27D0, type metadata accessor for Proto_RLE, (uint64_t)&unk_1BE1C5E04);
}

uint64_t sub_1BDDC8D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *v2;
  v5 = v2[1];
  if (!*(_QWORD *)(a1 + *(int *)(type metadata accessor for Replica() + 20)))
    v5 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BDDB3EC0(a1);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = *(_QWORD *)(v5 + 56);
      v11 = sub_1BE1B206C();
      v12 = *(_QWORD *)(v11 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a2, v10 + *(_QWORD *)(v12 + 72) * v9, v11);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
    }
    else
    {
      v15 = sub_1BE1B206C();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    v13 = sub_1BE1B206C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
}

uint64_t sub_1BDDC8E74(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BDDC8EA0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BDDC8ECC(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDDC8F10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  if ((v3 & 0xFF000000000000) != 0)
  {
    swift_release();
    sub_1BDDB6CA4(v2, v3);
    result = sub_1BDD9C3E0(v0, type metadata accessor for Proto_KeyPath);
    *v1 = v2;
    v1[1] = v3;
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000016;
    *(_QWORD *)(v5 + 8) = 0x80000001BE1CD380;
    *(_BYTE *)(v5 + 16) = 0;
    swift_willThrow();
    swift_release();
    return sub_1BDD9C3E0(v0, type metadata accessor for Proto_KeyPath);
  }
  return result;
}

unint64_t sub_1BDDC8FE0()
{
  unint64_t result;

  result = qword_1ED6F2648;
  if (!qword_1ED6F2648)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRKeyPath, &type metadata for CRKeyPath);
    atomic_store(result, (unint64_t *)&qword_1ED6F2648);
  }
  return result;
}

uint64_t CREncoder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t CREncoder.__deallocating_deinit()
{
  CREncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CREncoder()
{
  return objc_opt_self();
}

uint64_t sub_1BDDC90C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = sub_1BE1B1F58();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_Constants(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16))
  {
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16))
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  *v13 = sub_1BE1B20CC();
  v13[1] = v15;
  v13[2] = MEMORY[0x1E0DEE9D8];
  sub_1BE1B20E4();
  v16 = *(_QWORD *)(*v14 + 16);
  if (v16 >> 59)
    __break(1u);
  v39 = v11;
  v40 = v13;
  v41 = v10;
  v42 = v1;
  v43 = a1;
  v54 = sub_1BDDD6DF0(16 * v16);
  v55 = v17;
  v18 = *v14;
  v19 = *(_QWORD *)(*v14 + 16);
  v38 = v18;
  if (v19)
  {
    v20 = v18 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v44 = *(_QWORD *)(v4 + 72);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v21(v9, v20, v3);
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v22(v9, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
      v45 = sub_1BE1B1F40();
      v46 = v23;
      v47 = v24;
      v48 = v25;
      v49 = v26;
      v50 = v27;
      v51 = v28;
      v52 = v29;
      v53 = v30;
      sub_1BE1B1F40();
      sub_1BE1B1CAC();
      swift_allocObject();
      sub_1BE1B1C64();
      sub_1BE1B1EA4();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v20 += v44;
      if (!--v19)
        goto LABEL_10;
    }
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
LABEL_10:
    v22(v9, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  v31 = v54;
  v32 = v55;
  v33 = v40;
  sub_1BDDB796C(*v40, v40[1]);
  *v33 = v31;
  v33[1] = v32;
  v34 = v42;
  swift_beginAccess();
  v35 = *(_QWORD *)(v34 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33[2] = v35;
  v36 = v43;
  sub_1BDD9C318((uint64_t)v33, v43, type metadata accessor for Proto_Constants);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v41);
  return sub_1BDD9C3E0((uint64_t)v33, type metadata accessor for Proto_Constants);
}

uint64_t sub_1BDDC94A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  id v27;
  _WORD v28[11];
  unsigned __int8 v29;
  uint64_t aBlock;
  unint64_t v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;

  v7 = v5;
  v36 = *MEMORY[0x1E0C80C00];
  v12 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a5;
  v16 = v7;
  sub_1BDDC99EC(a1, a3, 0, 0, a4, v15, (uint64_t)v14);
  if (!v6)
  {
    memset(&v28[4], 0, 14);
    v29 = 8;
    sub_1BDDD2B90();
    aBlock = *(_QWORD *)&v28[4];
    v31 = *(unsigned int *)&v28[8] | ((unint64_t)LOBYTE(v28[10]) << 32) | ((unint64_t)HIBYTE(v28[10]) << 40) | ((unint64_t)v29 << 48);
    sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
    v18 = sub_1BE1B227C();
    v20 = v19;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v18, v20);
    v16 = aBlock;
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Document);
    v21 = *(void **)(v7 + 16);
    if (qword_1ED6F4510 != -1)
      goto LABEL_7;
    while (1)
    {
      v22 = *(void **)(qword_1ED6F8BE8 + 40);
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = v21;
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = sub_1BDE28224;
      *(_QWORD *)(v24 + 24) = v23;
      v34 = sub_1BDE28190;
      v35 = v24;
      aBlock = MEMORY[0x1E0C809B0];
      v31 = 1107296256;
      v32 = sub_1BDD843A8;
      v33 = &block_descriptor_150;
      v25 = _Block_copy(&aBlock);
      v26 = v22;
      v27 = v21;
      swift_retain();
      swift_release();
      dispatch_sync(v26, v25);

      _Block_release(v25);
      LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v25 & 1) == 0)
        break;
      __break(1u);
LABEL_7:
      swift_once();
    }
  }
  return v16;
}

uint64_t sub_1BDDC97A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  swift_retain();
  result = swift_release();
  if (*(_QWORD *)a2)
  {
    v12 = *(void (**)(uint64_t))(**(_QWORD **)a2 + 176);
    swift_retain();
    v12(a3);
    if (v4)
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 88))
      {
        v13 = sub_1BDDA8D6C();
        *(_QWORD *)(a1 + 80) = v10;
        swift_retain();
        swift_retain();
        swift_release();
        *(_QWORD *)(a1 + 88) = v9;
        swift_release();
        swift_release();
        v14 = v13 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
        swift_beginAccess();
        sub_1BDD9C318(v14, a4, type metadata accessor for Proto_CRDT);
      }
      else
      {
        sub_1BE1B20E4();
        v15 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
        if (qword_1ED6F2E18 != -1)
          swift_once();
        *(_QWORD *)(a4 + v15) = qword_1ED6F2E08;
        swift_retain();
        swift_release();
      }
    }
    swift_release();
    sub_1BDDD0038(a2);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDDC9964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BDDC99E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDC9964(a1, a2, a3, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDDC99EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t (*a3)(uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  id v23;
  _QWORD v24[6];

  swift_beginAccess();
  v7[3] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7[4] = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  result = sub_1BDDA1D54(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    v17 = (void *)v7[2];
    if (qword_1ED6F4510 != -1)
      swift_once();
    v18 = *(void **)(qword_1ED6F8BE8 + 40);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v17;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = sub_1BDE28224;
    *(_QWORD *)(v20 + 24) = v19;
    v24[4] = sub_1BDE28190;
    v24[5] = v20;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 1107296256;
    v24[2] = sub_1BDD843A8;
    v24[3] = &block_descriptor_58;
    v21 = _Block_copy(v24);
    v22 = v18;
    v23 = v17;
    swift_retain();
    swift_release();
    dispatch_sync(v22, v21);

    _Block_release(v21);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v21 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t CRDecoder.CRValueContainer.__deallocating_deinit()
{
  return sub_1BDDCA70C();
}

uint64_t type metadata accessor for CRDecoder.CRValueContainer()
{
  return objc_opt_self();
}

void sub_1BDDC9C24(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);

  v35 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v36 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v3);
  v6 = (uint64_t *)((char *)&v33 - v5);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v33 - v11;
  v13 = type metadata accessor for Proto_Value(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v33 - v18;
  v34 = *(_QWORD *)(v1 + 16);
  v20 = v34 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v12, &qword_1ED6F3770);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v37(v12, 1, v13) == 1)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return;
  }
  sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v19, type metadata accessor for Proto_Value);
  v21 = *(_QWORD *)&v19[*(int *)(v13 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v6, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Value);
  v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v23 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (v23(v6, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v6, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      sub_1BDD92AA8(*v6, v6[1]);
      return;
    }
    sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BDD86DEC(v20, (uint64_t)v10, &qword_1ED6F3770);
  if (v37(v10, 1, v13) == 1)
    goto LABEL_20;
  sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v17, type metadata accessor for Proto_Value);
  v24 = *(_QWORD *)&v17[*(int *)(v13 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v25 = v24;
  v26 = v36;
  sub_1BDD86DEC(v25, (uint64_t)v36, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Value);
  if (v23(v26, 1, v22) == 1)
  {
    sub_1BDD86E30((uint64_t)v26, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      v27 = *(_QWORD *)(v34 + 24);
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v29 = *v26;
        if (v29 < v28)
        {
          v30 = sub_1BE1B1F58();
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v35, v27+ ((*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v29, v30);
          return;
        }
      }
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v31 = 0x2064696C61766E49;
      v32 = 0xED00002E44495555;
      goto LABEL_16;
    }
    sub_1BDD9C3E0((uint64_t)v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v31 = 0xD000000000000016;
  v32 = 0x80000001BE1CD410;
LABEL_16:
  *(_QWORD *)(v31 + 8) = v32;
  *(_BYTE *)(v31 + 16) = 0;
  swift_willThrow();
}

uint64_t sub_1BDDCA078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v2 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v2);
  v3 = sub_1BE1B20C0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(v0 + 16) + 49) == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v7 = 0xD00000000000001FLL;
    *(_QWORD *)(v7 + 8) = 0x80000001BE1CD3F0;
    *(_BYTE *)(v7 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    result = sub_1BDDCA244();
    if (!v1)
    {
      v10 = result;
      v11 = v9;
      v13 = 0;
      memset(v12, 0, sizeof(v12));
      sub_1BDDB6CA4(result, v9);
      sub_1BE1B20FC();
      sub_1BDD8422C((unint64_t *)&qword_1EF5254F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E5C8], MEMORY[0x1E0D3E5B8]);
      sub_1BE1B2270();
      sub_1BE1B2084();
      sub_1BDDB796C(v10, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  return result;
}

uint64_t sub_1BDDCA244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v1);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v11, (uint64_t)v6, &qword_1ED6F3770);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_Value);
    v13 = *(_QWORD *)&v10[*(int *)(v7 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v13, (uint64_t)v3, &qword_1ED6F26F0);
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Value);
    v14 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v3, 1, v14) == 1)
    {
      sub_1BDD86E30((uint64_t)v3, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 3)
        return *(_QWORD *)v3;
      sub_1BDD9C3E0((uint64_t)v3, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v15 = 0xD000000000000016;
    *(_QWORD *)(v15 + 8) = 0x80000001BE1CD970;
    *(_BYTE *)(v15 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDDCA498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  v22 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_Value(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v22 - v15;
  v17 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v10, &qword_1ED6F37C8);
  v18 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v10, 1, v18) == 1)
  {
    sub_1BDD86E30((uint64_t)v10, &qword_1ED6F37C8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v16, type metadata accessor for Proto_Value);
      sub_1BDD9C318((uint64_t)v16, (uint64_t)v14, type metadata accessor for Proto_Value);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v19 = sub_1BDDB4FC0((uint64_t)v14, v5);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8))(v19, v22);
      return sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
    }
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document.OneOf_Root);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v21 = 0xD000000000000017;
  *(_QWORD *)(v21 + 8) = 0x80000001BE1CD950;
  *(_BYTE *)(v21 + 16) = 0;
  return swift_willThrow();
}

uint64_t sub_1BDDCA70C()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t CRCodable.hasEncodedData.getter()
{
  return 1;
}

void sub_1BDDCA744()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6F43C8)
  {
    type metadata accessor for Replica();
    v0 = sub_1BE1B2EE8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6F43C8);
  }
}

uint64_t sub_1BDDCA79C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1F58();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1BDDCA810()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F3BE8;
  if (!qword_1ED6F3BE8)
  {
    v1 = type metadata accessor for Replica();
    result = MEMORY[0x1C3B7DF54](&unk_1BE1C3874, v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F3BE8);
  }
  return result;
}

uint64_t destroy for Renames()
{
  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for Renames(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_1BDDCA8A4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BDDCA8E0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B2EE8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t Capsule<>.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];

  v19 = a4;
  v20 = a3;
  v6 = sub_1BE1B2804();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a2);
  v21[0] = sub_1BDDC4278((uint64_t)&unk_1E775AB70);
  v21[1] = v14;
  sub_1BE1B27F8();
  v15 = sub_1BE1B27D4();
  v17 = v16;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v17 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    sub_1BE1B1EA4();
    sub_1BDD9CC0C(v15, v17);
    Capsule<>.init(_:id:)((uint64_t)v13, v21, a2, v20, v19);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a2);
  }
  return result;
}

uint64_t Capsule<>.rootID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v1[1];
  if (v2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v3 = *v1;
    *a1 = *v1;
    a1[1] = v2;
    return sub_1BDDB6CA4(v3, v2);
  }
  return result;
}

uint64_t Capsule<>.serializedData(_:version:allowedAppFormats:)(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  __int16 (*v28)(uint64_t);
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;

  v47 = a5;
  v50 = a4;
  v45 = (void *)a1;
  v48 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*a2)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v32 = 0xD00000000000002ALL;
    *(_QWORD *)(v32 + 8) = 0x80000001BE1CDAB0;
    *(_BYTE *)(v32 + 16) = 0;
    goto LABEL_30;
  }
  v44 = *a2;
  if (!a3)
  {
    v12 = 0;
LABEL_32:
    v33 = v48;
    v34 = (uint64_t)v46;
    v35 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v46, v49, v50);
    v36 = v45;
    Capsule.finalizeTimestamps(_:)((uint64_t)v45, v35);
    type metadata accessor for CREncoder();
    v37 = swift_allocObject();
    v38 = MEMORY[0x1E0DEE9D8];
    v39 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v37 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v37 + 40) = v38;
    *(_QWORD *)(v37 + 48) = v38;
    *(_QWORD *)(v37 + 56) = v39;
    *(_QWORD *)(v37 + 64) = v38;
    *(_QWORD *)(v37 + 80) = 0;
    *(_QWORD *)(v37 + 88) = 0;
    *(_QWORD *)(v37 + 16) = v36;
    *(_QWORD *)(v37 + 24) = v38;
    *(_BYTE *)(v37 + 72) = v44;
    v40 = *(_QWORD *)(v35 + 16);
    v41 = v36;
    v8 = sub_1BDDC94A4(v34, v12, 0, v40, v47);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
    swift_release();
    return v8;
  }
  v43 = a3;
  sub_1BDDA7300(v50, (uint64_t)v10);
  v11 = *(_QWORD *)&v10[*(int *)(v8 + 20)];
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v12 = 0;
  v13 = 0;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = *(_QWORD *)(v11 + 64);
  v51 = v11 + 64;
  v17 = v15 & v16;
  v52 = (unint64_t)(v14 + 63) >> 6;
  v53 = v11;
  if ((v15 & v16) == 0)
    goto LABEL_7;
LABEL_6:
  v54 = (v17 - 1) & v17;
  v55 = v13;
  v18 = __clz(__rbit64(v17)) | (v13 << 6);
  result = v53;
  while (1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(result + 56) + 48 * v18);
    if (!v24)
      goto LABEL_36;
    v8 = v12;
    v25 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v18);
    v26 = *v25;
    v27 = v25[1];
    v28 = *(__int16 (**)(uint64_t))(*(_QWORD *)v24 + 200);
    sub_1BDDB6CA4(*v25, v27);
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = swift_bridgeObjectRetain();
    v30 = v28(v29);
    sub_1BDDB796C(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    if ((int)v30 <= (__int16)v12)
      v12 = (__int16)v12;
    else
      v12 = v30;
    v13 = v55;
    v17 = v54;
    if (v54)
      goto LABEL_6;
LABEL_7:
    v20 = v13 + 1;
    result = v53;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return result;
    }
    if (v20 >= v52)
      goto LABEL_27;
    v21 = *(_QWORD *)(v51 + 8 * v20);
    v22 = v13 + 1;
    if (!v21)
    {
      v22 = v13 + 2;
      if (v13 + 2 >= v52)
        goto LABEL_27;
      v21 = *(_QWORD *)(v51 + 8 * v22);
      if (!v21)
      {
        v22 = v13 + 3;
        if (v13 + 3 >= v52)
          goto LABEL_27;
        v21 = *(_QWORD *)(v51 + 8 * v22);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v54 = (v21 - 1) & v21;
    v55 = v22;
    v18 = __clz(__rbit64(v21)) + (v22 << 6);
  }
  v23 = v13 + 4;
  if (v13 + 4 < v52)
  {
    v21 = *(_QWORD *)(v51 + 8 * v23);
    if (!v21)
    {
      while (1)
      {
        v22 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_35;
        if (v22 >= v52)
          goto LABEL_27;
        v21 = *(_QWORD *)(v51 + 8 * v22);
        ++v23;
        if (v21)
          goto LABEL_20;
      }
    }
    v22 = v13 + 4;
    goto LABEL_20;
  }
LABEL_27:
  swift_release();
  if (sub_1BE170238(v12, v43))
    goto LABEL_32;
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v31 = (unsigned __int16)v12;
  *(_QWORD *)(v31 + 8) = 0;
  *(_BYTE *)(v31 + 16) = 1;
LABEL_30:
  swift_willThrow();
  return v8;
}

uint64_t Capsule<>.init(serializedData:allowedAppFormats:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BOOL8 v21;
  __int16 v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v35 = a4;
  v36 = a5;
  v34 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v31 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v31 - v18;
  v20 = (char *)&v31 + *(int *)(v17 + 64) - v18;
  sub_1BDDD1368((uint64_t)&v31 - v18, (uint64_t)v20, a1, a2);
  if (v6)
  {
    sub_1BDDB796C(a1, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v32 = a1;
    v33 = a2;
    *((_WORD *)v19 + 1) = v21;
    if (a3 && (v23 = v21, v24 = sub_1BE170238(v21, a3), swift_bridgeObjectRelease(), LOWORD(v21) = v23, !v24))
    {
      v29 = (uint64_t)&v16[*(int *)(v10 + 64)];
      *v16 = *v19;
      *((_WORD *)v16 + 1) = v23;
      sub_1BDD9C318((uint64_t)v20, v29, type metadata accessor for Proto_Document);
      sub_1BDD9C3E0(v29, type metadata accessor for Proto_Document);
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v30 = v23;
      *(_QWORD *)(v30 + 8) = 0;
      *(_BYTE *)(v30 + 16) = 1;
      swift_willThrow();
    }
    else
    {
      v25 = (uint64_t)&v13[*(int *)(v10 + 64)];
      v26 = *v19;
      *v13 = *v19;
      *((_WORD *)v13 + 1) = v21;
      v27 = v21;
      sub_1BDD9C318((uint64_t)v20, v25, type metadata accessor for Proto_Document);
      v37 = v26;
      if (qword_1ED6F3C80 != -1)
        swift_once();
      v28 = qword_1ED6F8BA8;
      swift_retain();
      sub_1BDD975F4(&v37, v27, v25, 0, v28, v35, v36, v34);
    }
    sub_1BDDB796C(v32, v33);
    return sub_1BDD86E30((uint64_t)v19, qword_1ED6F29D8);
  }
}

uint64_t sub_1BDDCB1B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1EEC();
  v5 = sub_1BE1B1F58();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  __break(1u);
  return result;
}

uint64_t Capsule.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  BOOL v11;

  v6 = *(int *)(a2 + 40);
  v7 = *(_QWORD *)(v4 + v6);
  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Capsule(0, a3, a4, a4) + 40));
  if (!v7)
    goto LABEL_9;
  if (v8)
    v9 = v7 == v8;
  else
    v9 = 0;
  if (v9)
    return 0;
  result = sub_1BDDCB3C0(a2);
  v4 = *(_QWORD *)(v4 + v6);
  if (v4)
  {
    if (v8)
    {
LABEL_11:
      v11 = sub_1BDDD5BB8(v8, 0, 0, 0);
      sub_1BDDB639C(0, 0);
      return v11;
    }
    __break(1u);
LABEL_9:
    if (v8)
    {
      result = sub_1BDDCB3C0(a2);
      if (*(_QWORD *)(v4 + v6))
        goto LABEL_11;
      goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1BDDCB338()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B2EE8();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BDDCB3C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v2 = v1;
  v3 = *(int *)(a1 + 40);
  result = swift_isUniquelyReferenced_native();
  if ((result & 1) == 0)
  {
    v5 = *(_QWORD *)(v1 + v3);
    if (v5)
    {
      if (qword_1ED6F4510 != -1)
        swift_once();
      v6 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
      swift_beginAccess();
      v7 = *(_QWORD *)(v6 + 8);
      v12[0] = MEMORY[0x1E0DEE9E0];
      v12[1] = v7;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1BDDAC830((uint64_t)v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v8 = qword_1ED6F3700;
      swift_retain();
      if (v8 != -1)
        swift_once();
      type metadata accessor for ReplicaState();
      sub_1BE1B2E40();
      swift_release();
      v9 = v12[0];
      type metadata accessor for CapsuleRef();
      swift_allocObject();
      v10 = swift_retain();
      v11 = sub_1BDDD54B4(v10, v9);
      swift_release();
      *(_QWORD *)(v2 + v3) = v11;
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t CRValue.init(serializedData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1BDDCB820(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t))sub_1BDDCA498, a5);
}

uint64_t type metadata accessor for CRDTBox()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for CRAsset()
{
  return &type metadata for CRAsset;
}

uint64_t sub_1BDDCB5A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    *a3 = a2;
    return swift_retain();
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v5 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v14);
    sub_1BDD86E30((uint64_t)v14, qword_1ED6F3DD0);
    type metadata accessor for CREncoder();
    v6 = swift_allocObject();
    v7 = MEMORY[0x1E0DEE9D8];
    v8 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v6 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v6 + 40) = v7;
    *(_QWORD *)(v6 + 48) = v7;
    *(_QWORD *)(v6 + 56) = v8;
    *(_QWORD *)(v6 + 64) = v7;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v7;
    *(_BYTE *)(v6 + 72) = 2;
    v9 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 176);
    v10 = v5;
    v9(v6);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    v11 = swift_retain();
    v12 = sub_1BDE27BC4(v11);
    swift_release();
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(v12);

    swift_release();
    return swift_release();
  }
}

uint64_t sub_1BDDCB820@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, char *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;
  __int16 v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v40;
  char v41;

  v38 = a4;
  v39 = a5;
  v37 = a6;
  v40 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (unsigned __int8 *)&v31 - v17;
  v19 = (char *)&v31 + *(int *)(v16 + 64) - v17;
  sub_1BDDD1368((uint64_t)&v31 - v17, (uint64_t)v19, a1, a2);
  if (v6)
    return sub_1BDDB796C(a1, a2);
  v34 = 0;
  v35 = a1;
  v33 = v11;
  v36 = v9;
  v22 = v40;
  *((_WORD *)v18 + 1) = v20;
  v23 = (uint64_t)&v15[*(int *)(v12 + 64)];
  v24 = *v18;
  *v15 = *v18;
  *((_WORD *)v15 + 1) = v20;
  v32 = v19;
  v25 = v20;
  sub_1BDD9C318((uint64_t)v19, v23, type metadata accessor for Proto_Document);
  v41 = v24;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v26 = qword_1ED6F8BA8;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v27 = v34;
  sub_1BDD8E57C(&v41, v25, v23, 0, v26);
  v28 = v36;
  v29 = a2;
  if (v27)
  {
    sub_1BDDB796C(v35, a2);
    return sub_1BDD86E30((uint64_t)v18, qword_1ED6F29D8);
  }
  else
  {
    v30 = v33;
    v39(v22, v32, v22, v38);
    swift_release();
    sub_1BDDB796C(v35, v29);
    sub_1BDD86E30((uint64_t)v18, qword_1ED6F29D8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v37, v30, v22);
  }
}

uint64_t dispatch thunk of CRDT.hasDelta(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t sub_1BDDCBA8C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B2EE8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDDCBB04()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1BDDCBB0C()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v2);
  result = sub_1BE1B2EE8();
  if (v4 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v5 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRCustomFileSyncManagerInternals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRCustomFileSyncManagerInternals);
}

uint64_t sub_1BDDCBC14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 648);
  swift_beginAccess();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v6);
  v7 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v3, a1, v7);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
}

uint64_t sub_1BDDCBD04(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v23 = a2;
  v24 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 632);
  v26 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v25 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v6 + 640);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for Capsule(255, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v10);
  v12 = sub_1BE1B2EE8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v23 - v15;
  v17 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v23 - v18;
  sub_1BDD96EDC((uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v11) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v16, v11);
  v22 = v25;
  v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v25, &a1[*(_QWORD *)(*(_QWORD *)a1 + 656)], v4);
  (*(void (**)(char *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v7 + 32))(v19, v23, *((_QWORD *)a1 + 9), v24, v4, v7);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v11);
}

void sub_1BDDCBF04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v3 = v2;
  v6 = sub_1BDD96FC0();
  v8 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for Capsule(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v11);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v8, 1, v12))
    Capsule.finalizeTimestamps(_:)(*(_QWORD *)(v3 + 72), v12);
  v13 = ((uint64_t (*)(uint64_t *, _QWORD))v6)(&v15, 0);
  v14 = (void *)MEMORY[0x1C3B7D810](v13);
  sub_1BDDCBD04((char *)v3, a1, a2);
  objc_autoreleasePoolPop(v14);
}

uint64_t sub_1BDDCC024(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v23 = a2;
  v5 = *(_QWORD **)v2;
  v6 = v5[79];
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v5[80];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v22 = type metadata accessor for Capsule(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 16), v13);
  v14 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v16 = (char *)&v22 - v15;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, &v3[v5[82]], v6);
  v17 = v24;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1, *((_QWORD *)v3 + 9), v23, v6, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!v17)
  {
    LOBYTE(v3) = sub_1BDD96A68((uint64_t)v16, v18, v19, v20);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v22);
  }
  return v3 & 1;
}

uint64_t sub_1BDDCC1B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1F58();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDDCC228(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];

  v3 = v2;
  v25 = a2[1];
  v26 = *a2;
  v27 = type metadata accessor for PartiallyOrderedReferenceMap();
  v5 = *(int *)(v27 + 20);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v28[0] = *(_QWORD *)(v3 + v5);
  *(_QWORD *)(v3 + v5) = 0x8000000000000000;
  sub_1BDD93124(a1, (uint64_t)sub_1BDDC45F8, 0, isUniquelyReferenced_nonNull_native, v28);
  *(_QWORD *)(v3 + v5) = v28[0];
  swift_bridgeObjectRelease();
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v13 << 6);
LABEL_20:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 48 * v15 + 24) + 16))
    {
      v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1BDDB6CA4(*v19, v21);
      sub_1BDDBC6BC(v28, v20, v21);
      result = sub_1BDDB796C(v28[0], v28[1]);
    }
  }
  v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v16 >= v11)
    goto LABEL_22;
  v17 = *(_QWORD *)(v7 + 8 * v16);
  ++v13;
  if (v17)
    goto LABEL_19;
  v13 = v16 + 1;
  if (v16 + 1 >= v11)
    goto LABEL_22;
  v17 = *(_QWORD *)(v7 + 8 * v13);
  if (v17)
    goto LABEL_19;
  v13 = v16 + 2;
  if (v16 + 2 >= v11)
    goto LABEL_22;
  v17 = *(_QWORD *)(v7 + 8 * v13);
  if (v17)
  {
LABEL_19:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_20;
  }
  v18 = v16 + 3;
  if (v18 >= v11)
  {
LABEL_22:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26C0);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1BE1B61B0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = sub_1BDDC6E70(a1);
    *(_QWORD *)(v22 + 32) = v26;
    *(_QWORD *)(v22 + 40) = v25;
    *(_QWORD *)(v22 + 48) = v23;
    v24 = *(int *)(v27 + 24);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + v24) = v22;
    return result;
  }
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      goto LABEL_22;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_24:
  __break(1u);
  return result;
}

_QWORD *sub_1BDDCC49C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for PartiallyOrderedReferenceMap.Before()
{
  return &type metadata for PartiallyOrderedReferenceMap.Before;
}

uint64_t sub_1BDDCC50C(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *a1;
  v4 = a1[1];
  result = type metadata accessor for PartiallyOrderedReferenceMap();
  v6 = *(int *)(result + 24);
  v7 = *(_QWORD **)(v1 + v6);
  v8 = v7[2];
  if (!v8)
  {
    __break(1u);
LABEL_9:
    result = (uint64_t)sub_1BDDC5B40(v7);
    v7 = (_QWORD *)result;
LABEL_5:
    if (v8 > v7[2])
    {
      __break(1u);
    }
    else
    {
      v9 = &v7[3 * v2];
      v10 = v9[4];
      v9[4] = v3;
      v9[5] = v4;
      result = sub_1BDDC8EA0(v10);
      *(_QWORD *)(v1 + v6) = v7;
    }
    return result;
  }
  v2 = v8 - 1;
  if (!v7[3 * v8 + 1] && *(_QWORD *)(v7[3 * v2 + 6] + 16) >= 0x15uLL)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
      goto LABEL_5;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1BDDCC5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = sub_1BE1B203C();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_1BDDCC648(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IndexSetBoundaryIterator();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BDDCC684()
{
  unint64_t v0;

  sub_1BDDC5AE0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_1BDDCC708(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v5 = v4;
  v10 = *v5;
  v11 = sub_1BE1B1DF0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRCustomFileSyncManagerInternals(0, *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  swift_allocObject();
  v16 = sub_1BDF1E1EC(a1, a2, (uint64_t)v14, a4, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a3, v11);
  v5[2] = (uint64_t)v16;
  return v5;
}

uint64_t *sub_1BDDCC808(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return sub_1BDDCC708(a1, a2, a3, a4);
}

uint64_t sub_1BDDCC868()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CRCustomFileSyncManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRCustomFileSyncManager);
}

uint64_t CRCustomFileSyncManager.publisher.getter()
{
  return sub_1BDDCD0F8();
}

uint64_t type metadata accessor for ApplicationStateManager()
{
  return objc_opt_self();
}

uint64_t sub_1BDDCC8F8()
{
  return sub_1BDDCC900();
}

uint64_t sub_1BDDCC900()
{
  NSString *v0;
  Class v1;
  void *ObjCClassFromMetadata;
  uint64_t result;
  id v4;
  id v5;

  v0 = (NSString *)sub_1BE1B27A4();
  v1 = NSClassFromString(v0);

  if (!v1)
    return sub_1BDDCCA44((uint64_t)sub_1BDDCCA10, (uint64_t)&block_descriptor_3);
  swift_getObjCClassMetadata();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  result = (uint64_t)objc_msgSend(ObjCClassFromMetadata, sel_respondsToSelector_, sel_sharedApplication);
  if ((result & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v4 = objc_msgSend(ObjCClassFromMetadata, sel_sharedApplication);
  if (!v4)
    return sub_1BDDCCA44((uint64_t)sub_1BDDCCA10, (uint64_t)&block_descriptor_3);
  v5 = objc_msgSend(v4, sel_applicationState);
  result = swift_unknownObjectRelease();
  if (v5 != (id)2)
    return sub_1BDDCCA44((uint64_t)sub_1BDDCCA10, (uint64_t)&block_descriptor_3);
  return result;
}

uint64_t sub_1BDDCC9D8()
{
  uint64_t result;

  type metadata accessor for ApplicationStateManager();
  swift_allocObject();
  result = sub_1BDD86F34();
  qword_1ED6F8B90 = result;
  return result;
}

void sub_1BDDCCA10()
{
  uint64_t v0;

  sub_1BDDCCC08(v0, 0, &qword_1ED6F3A00, &qword_1ED6F8BA0);
}

uint64_t sub_1BDDCCA44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD v17[2];
  _QWORD aBlock[6];

  v5 = v2;
  v6 = sub_1BE1B248C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BE1B24BC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(_QWORD *)(v5 + 24);
  aBlock[4] = a1;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDBE6A4;
  aBlock[3] = a2;
  v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1BE1B24A4();
  v17[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C((unint64_t *)&qword_1ED6F39E0, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3BF0);
  sub_1BDD87364((unint64_t *)&qword_1ED6F3BF8, &qword_1ED6F3BF0);
  sub_1BE1B2F78();
  MEMORY[0x1C3B7CD30](0, v14, v10, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_1BDDCCC08(uint64_t a1, char a2, _QWORD *a3, _QWORD *a4)
{
  id v6;
  id v7;

  *(_BYTE *)(a1 + 16) = a2;
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v7 = v6;
  if (*a3 != -1)
  {
    swift_once();
    v6 = v7;
  }
  objc_msgSend(v6, sel_postNotificationName_object_, *a4, 0);

}

uint64_t sub_1BDDCCC9C()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDCCCC8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for MissingTypedRefVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MissingTypedRefVisitor);
}

uint64_t sub_1BDDCCD20(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2)
    return sub_1BDDC8EA0(result);
  return result;
}

uint64_t sub_1BDDCCD34(uint64_t result)
{
  if (result != 3)
    return sub_1BDDCCD20(result);
  return result;
}

uint64_t sub_1BDDCCD44()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRProtoDecodeContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Proto_RepeatedValue(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F27A0);
}

uint64_t sub_1BDDCCDB4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDCCDC0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDCCDCC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Proto_CustomCRValue(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BDDCCE08()
{
  return sub_1BDD8747C();
}

uint64_t type metadata accessor for Proto_CustomCRValue(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2788);
}

uint64_t sub_1BDDCCE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9027C(a1, a2, a3, type metadata accessor for Proto_Value, &qword_1ED6F2730, (uint64_t)&unk_1BE1C66FC);
}

uint64_t sub_1BDDCCE60()
{
  return sub_1BDD8422C(&qword_1ED6F2780, type metadata accessor for Proto_CustomCRValue, (uint64_t)&unk_1BE1C4E64);
}

void type metadata accessor for CROrderedDictionary()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDDCCE98()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1DF0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRFileSyncPresenter()
{
  uint64_t result;

  result = qword_1ED6EF4C0;
  if (!qword_1ED6EF4C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BDDCD04C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_1BDDCD054()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for _CRFileSyncManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CRFileSyncManager);
}

void sub_1BDDCD0EC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 88);
}

uint64_t sub_1BDDCD0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_retain();
  swift_weakInit();
  swift_release();
  type metadata accessor for Capsule(0, v1, *(_QWORD *)(v2 + 16), v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26D0);
  v5 = type metadata accessor for _CRFileSyncManager.CRSyncPublisher(0, v1, v2, v4);
  MEMORY[0x1C3B7DF54](&unk_1BE1C88C8, v5);
  return sub_1BE1B2414();
}

uint64_t sub_1BDDCD1A4()
{
  return 0;
}

void sub_1BDDCD1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1BDDCD1B8(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void ***)(v2 + 32));
}

void sub_1BDDCD1B8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, void **a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  void *v30;
  unsigned int v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a5;
  v46 = 0;
  v47 = a4;
  v50 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for Capsule(255, *(_QWORD *)(*a3 + 80), *(_QWORD *)(*(_QWORD *)(*a3 + 88) + 16), a4);
  v8 = sub_1BE1B2EE8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v44 - v10;
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_defaultManager);
  v14 = a1;
  sub_1BE1B1DE4();
  v15 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  LOBYTE(a1) = objc_msgSend(v13, sel_fileExistsAtPath_, v15);

  if ((a1 & 1) != 0)
  {
    v17 = v14;
    v18 = v46;
    v19 = v47;
    goto LABEL_14;
  }
  v20 = a3[6];
  if (v20)
  {
    v21 = (void *)a3[5];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1BE1B61B0;
    v48 = v21;
    v49 = v20;
    swift_bridgeObjectRetain();
    sub_1BE1B284C();
    v23 = v48;
    v24 = v49;
    *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v24;
    sub_1BE1B36D4();
    v16 = swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t))(*a3 + 248))(v16);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v11, 1, v7);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v27 = *a3;
  if (v25 != 1)
  {
    v17 = v14;
    v33 = v46;
    v19 = v47;
    (*(void (**)(uint64_t, uint64_t))(v27 + 496))(v14, v47);
    v18 = v33;
    if (!v33)
      goto LABEL_13;
LABEL_17:
    v42 = *v45;
    *v45 = (void *)v18;

    return;
  }
  v28 = (*(uint64_t (**)(uint64_t))(v27 + 368))(v26);
  v29 = objc_msgSend(v12, sel_defaultManager);
  v17 = v14;
  if ((v28 & 1) == 0)
  {
    sub_1BE1B1DE4();
    v34 = (void *)sub_1BE1B27A4();
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_createFileAtPath_contents_attributes_, v34, 0, 0);

    goto LABEL_12;
  }
  v30 = (void *)sub_1BE1B1D90();
  v48 = 0;
  v31 = objc_msgSend(v29, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v30, 1, 0, &v48);

  if (!v31)
  {
    v43 = v48;
    v18 = sub_1BE1B1D3C();

    swift_willThrow();
    goto LABEL_17;
  }
  v32 = v48;
LABEL_12:
  v18 = v46;
  v19 = v47;
LABEL_13:
  v35 = sub_1BDD839E0(v17);
  v36 = (void *)a3[10];
  a3[10] = v35;

LABEL_14:
  objc_msgSend((id)objc_opt_self(), sel_addFilePresenter_, a3[2]);
  v37 = a3[6];
  if (v37)
  {
    v38 = (void *)a3[5];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_1BE1B61B0;
    v48 = v38;
    v49 = v37;
    swift_bridgeObjectRetain();
    sub_1BE1B284C();
    v40 = v48;
    v41 = v49;
    *(_QWORD *)(v39 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v39 + 32) = v40;
    *(_QWORD *)(v39 + 40) = v41;
    sub_1BE1B36D4();
    swift_bridgeObjectRelease();
  }
  sub_1BDDCE394(v17, v19);
  if (v18)
    goto LABEL_17;
}

void sub_1BDDCD5E4()
{
  uint64_t v0;

  sub_1BDDCD5EC(v0);
}

void sub_1BDDCD5EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  id v29;
  uint64_t v30;
  char *v31;
  id aBlock[6];
  id v33[2];

  v33[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B1DF0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3600]), sel_initWithFilePresenter_, v9);
  v33[0] = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, v9 + OBJC_IVAR____TtC9Coherence19CRFileSyncPresenter_fileURL, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
LABEL_16:
    __break(1u);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  v11 = (void *)sub_1BE1B1D90();
  v31 = v8;
  v12 = sub_1BE1B1D90();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = a1;
  v13[3] = v10;
  v13[4] = v33;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = sub_1BDDCD1AC;
  v14[3] = v13;
  aBlock[4] = sub_1BDDD724C;
  aBlock[5] = v14;
  aBlock[0] = (id)MEMORY[0x1E0C809B0];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1BDDD7274;
  aBlock[3] = &block_descriptor_10_0;
  v15 = _Block_copy(aBlock);
  v30 = a1;
  swift_retain();
  v16 = v10;
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  objc_msgSend(v16, sel_coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor_, v11, 0, v12, 0, aBlock, v15);
  _Block_release(v15);

  v17 = aBlock[0];
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v12 & 1) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v18 = v17;
  if (!v17)
  {
    v18 = v33[0];
    if (!v33[0])
    {
LABEL_13:

      (*(void (**)(char *, uint64_t))(v6 + 8))(v31, v5);
      goto LABEL_14;
    }
    v19 = v33[0];
  }
  v20 = v17;
  v21 = (void *)sub_1BE1B1D30();
  v22 = objc_msgSend(v21, sel_domain);

  v23 = sub_1BE1B27C8();
  v25 = v24;

  if (v23 == sub_1BE1B27C8() && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v27 = sub_1BE1B34AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
LABEL_12:
      sub_1BE192B50(v18);

      goto LABEL_13;
    }
  }
  v28 = (void *)sub_1BE1B1D30();
  v29 = objc_msgSend(v28, sel_code);

  if (v29 != (id)260)
    goto LABEL_12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v31, v5);

LABEL_14:
  swift_release();

}

uint64_t sub_1BDDCD9E4()
{
  return sub_1BDD878C4((uint64_t)sub_1BDDCD5E4, (uint64_t)&block_descriptor_4);
}

uint64_t sub_1BDDCD9F8()
{
  _QWORD *v0;

  return sub_1BDDCDA00(v0);
}

uint64_t sub_1BDDCDA00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t i;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;

  v2 = sub_1BE1B1DF0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[6];
  if (v9)
  {
    v10 = a1[5];
    swift_beginAccess();
    if (*(_QWORD *)(a1[12] + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1BE1B61B0;
      v29 = 0;
      v30 = 0xE000000000000000;
      sub_1BE1B305C();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v29 = v10;
      v30 = v9;
      sub_1BE1B284C();
      sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
      swift_bridgeObjectRetain();
      sub_1BE1B2B70();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = v29;
      v13 = v30;
      *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v11 + 32) = v12;
      *(_QWORD *)(v11 + 40) = v13;
      sub_1BE1B36D4();
      swift_bridgeObjectRelease();
    }
  }
  v28 = a1 + 12;
  swift_beginAccess();
  v14 = a1[12];
  v15 = v14 + 56;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v14 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  if (!v18)
    goto LABEL_8;
LABEL_7:
  v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v22 | (v21 << 6); ; i = __clz(__rbit64(v25)) + (v21 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(_QWORD *)(v14 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
      goto LABEL_26;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_1BE1936E8();
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v18)
      goto LABEL_7;
LABEL_8:
    v24 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v19)
      goto LABEL_25;
    v25 = *(_QWORD *)(v15 + 8 * v24);
    ++v21;
    if (!v25)
    {
      v21 = v24 + 1;
      if (v24 + 1 >= v19)
        goto LABEL_25;
      v25 = *(_QWORD *)(v15 + 8 * v21);
      if (!v25)
      {
        v21 = v24 + 2;
        if (v24 + 2 >= v19)
          goto LABEL_25;
        v25 = *(_QWORD *)(v15 + 8 * v21);
        if (!v25)
          break;
      }
    }
LABEL_21:
    v18 = (v25 - 1) & v25;
  }
  v26 = v24 + 3;
  if (v26 >= v19)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
LABEL_26:
    swift_release();
    *v28 = MEMORY[0x1E0DEE9E8];
    return swift_bridgeObjectRelease();
  }
  v25 = *(_QWORD *)(v15 + 8 * v26);
  if (v25)
  {
    v21 = v26;
    goto LABEL_21;
  }
  while (1)
  {
    v21 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v21 >= v19)
      goto LABEL_25;
    v25 = *(_QWORD *)(v15 + 8 * v21);
    ++v26;
    if (v25)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1BDDCDDAC()
{
  swift_retain();
  sub_1BDDCDDD4();
  return swift_release();
}

uint64_t sub_1BDDCDDD4()
{
  return sub_1BDD878C4((uint64_t)sub_1BDDCD9F8, (uint64_t)&block_descriptor_15);
}

uint64_t sub_1BDDCDDE8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  char v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  char v38;
  id v39;
  id v40;
  void *v41;
  void *v43;
  char v44;
  uint64_t v46;
  id v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v5 = v4;
  v50 = *MEMORY[0x1E0C80C00];
  v9 = v4[5];
  v10 = v4[6];
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1BE1B61B0;
    sub_1BE1B305C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = v9;
    *((_QWORD *)&v48 + 1) = v10;
    sub_1BE1B284C();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    v12 = v48;
    *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
    *(_OWORD *)(v11 + 32) = v12;
    sub_1BE1B36D4();
    swift_bridgeObjectRelease();
  }
  if ((a4 & 1) == 0)
  {
    v13 = (void *)sub_1BDD839E0(a1);
    if (v13)
    {
      v14 = (void *)v4[10];
      if (v14)
      {
        sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6EF860);
        v44 = a3;
        v21 = v9;
        v15 = a4;
        v16 = a1;
        v17 = v13;
        v18 = v14;
        v19 = sub_1BE1B2EC4();
        v43 = v17;

        a1 = v16;
        a4 = v15;
        v20 = v21;
        LOBYTE(v21) = v44;

        if ((v19 & 1) != 0)
        {
          if (v10)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
            v22 = swift_allocObject();
            *(_OWORD *)(v22 + 16) = xmmword_1BE1B61B0;
            sub_1BE1B305C();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v48 = v20;
            *((_QWORD *)&v48 + 1) = v10;
            sub_1BE1B284C();
            sub_1BE1B284C();
            swift_bridgeObjectRelease();
            v23 = v48;
            *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEA968];
            *(_OWORD *)(v22 + 32) = v23;
            sub_1BE1B36D4();
            swift_bridgeObjectRelease();
          }

          return v21 & 1;
        }
      }
    }
    v24 = (void *)v5[10];
    v5[10] = v13;

  }
  if (((*(uint64_t (**)(void))(*v5 + 368))() & 1) != 0)
  {
    v25 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    sub_1BE1B1DE4();
    v21 = sub_1BE1B27A4();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v48 = 0;
    v26 = objc_msgSend(v25, sel_contentsOfDirectoryAtPath_error_, v21, &v48);

    v27 = (void *)v48;
    if (!v26)
    {
      v39 = (id)v48;
      sub_1BE1B1D3C();

      swift_willThrow();
      return v21 & 1;
    }
    v21 = sub_1BE1B2978();
    v28 = v27;

    v29 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRelease();
    if (v29)
      goto LABEL_14;
LABEL_29:
    LOBYTE(v21) = 1;
    return v21 & 1;
  }
  v31 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v32 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v47 = 0;
  v33 = objc_msgSend(v31, sel_attributesOfItemAtPath_error_, v32, &v47);

  v21 = (uint64_t)v47;
  if (!v33)
  {
    v40 = v47;
    v41 = (void *)sub_1BE1B1D3C();

    swift_willThrow();
    goto LABEL_31;
  }
  type metadata accessor for FileAttributeKey(0);
  sub_1BDD8422C(&qword_1ED6EE9A8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1BE1B5D88);
  v34 = sub_1BE1B25AC();
  v35 = (id)v21;

  if (*(_QWORD *)(v34 + 16))
  {
    v36 = (id)*MEMORY[0x1E0CB2AF0];
    v37 = sub_1BDDC4B9C((uint64_t)v36);
    if ((v38 & 1) != 0)
    {
      sub_1BDDC1538(*(_QWORD *)(v34 + 56) + 32 * v37, (uint64_t)&v48);
    }
    else
    {
      v48 = 0u;
      v49 = 0u;
    }

  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v49 + 1))
  {
    sub_1BDD86E30((uint64_t)&v48, qword_1EF52B750);
    goto LABEL_31;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_31:
    LOBYTE(v21) = 1;
    return v21 & 1;
  }
  if (!v47)
    goto LABEL_29;
LABEL_14:
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*v5 + 504))(a1, a2, a4 & 1);
  if (!v46)
    LOBYTE(v21) = v30;
  return v21 & 1;
}

void sub_1BDDCE394(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  id v44;
  unint64_t v45;
  uint64_t v46;

  v4 = v2;
  v43 = (void *)a2;
  v46 = *MEMORY[0x1E0C80C00];
  v6 = sub_1BE1B1DF0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1BE1B1DE4();
  v11 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v10, sel_fileExistsAtPath_, v11);

  if (!v12)
    return;
  v13 = objc_opt_self();
  v14 = (void *)sub_1BE1B1D90();
  v15 = objc_msgSend((id)v13, sel_otherVersionsOfItemAtURL_, v14);

  v16 = v43;
  if (!v15)
  {
LABEL_25:
    sub_1BDDCE860(a1, 0, (uint64_t)v16);
    return;
  }
  v42 = v4;
  v39 = a1;
  sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6EF4F0);
  v17 = sub_1BE1B2978();

  v18 = v17 >> 62;
  if (v17 >> 62)
    goto LABEL_23;
  if (*(uint64_t *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10) < 1)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    a1 = v39;
    goto LABEL_25;
  }
  while (1)
  {
    sub_1BDDCDDE8(v39, (uint64_t)v16, 1, 0);
    if (v3)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if (v18)
      break;
    v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v19)
      goto LABEL_17;
LABEL_9:
    v38 = v13;
    v40 = v19;
    v41 = v17 & 0xC000000000000001;
    v13 = 4;
    while (1)
    {
      v20 = v41 ? (id)MEMORY[0x1C3B7CFAC](v13 - 4, v17) : *(id *)(v17 + 8 * v13);
      v16 = v20;
      v18 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      v21 = objc_msgSend(v20, sel_URL);
      sub_1BE1B1DD8();

      sub_1BDDCDDE8((uint64_t)v9, (uint64_t)v43, 0, 1);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

      ++v13;
      if (v18 == v40)
      {
        swift_bridgeObjectRelease();
        v13 = v38;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    v35 = sub_1BE1B323C();
    swift_bridgeObjectRelease();
    if (v35 < 1)
      goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  v19 = sub_1BE1B323C();
  swift_bridgeObjectRelease();
  if (v19)
    goto LABEL_9;
LABEL_17:
  swift_bridgeObjectRelease();
LABEL_18:
  v22 = v42;
  v23 = v42[6];
  v24 = v39;
  if (v23)
  {
    v25 = (void *)v42[5];
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
    v26 = v13;
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1BE1B61B0;
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v44 = v25;
    v45 = v23;
    sub_1BE1B284C();
    v28 = v44;
    v29 = v45;
    *(_QWORD *)(v27 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 40) = v29;
    sub_1BE1B36D4();
    v13 = v26;
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, void *))(*v22 + 496))(v24, v43);
  v30 = sub_1BDD839E0(v24);
  v31 = (void *)v22[10];
  v22[10] = v30;

  v32 = (void *)sub_1BE1B1D90();
  v44 = 0;
  v33 = objc_msgSend((id)v13, sel_removeOtherVersionsOfItemAtURL_error_, v32, &v44);

  if (v33)
  {
    v34 = v44;
  }
  else
  {
    v36 = v44;
    sub_1BE1B1D3C();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
  }
}

void sub_1BDDCE860(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v5 = v3;
  v8 = sub_1BDDCDDE8(a1, a3, a2, 0);
  if (!v4 && (v8 & 1) != 0)
  {
    v9 = v3[6];
    if (v9)
    {
      v10 = v5[5];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C628);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1BE1B61B0;
      swift_bridgeObjectRetain();
      sub_1BE1B284C();
      *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v11 + 32) = v10;
      *(_QWORD *)(v11 + 40) = v9;
      sub_1BE1B36D4();
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(*v5 + 496))(a1, a3);
    v12 = sub_1BDD839E0(a1);
    v13 = (void *)v5[10];
    v5[10] = v12;

  }
}

uint64_t sub_1BDDCE998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDD851B4(a1, a4, a2, a3);
}

uint64_t sub_1BDDCE9AC()
{
  return MEMORY[0x1E0DEDB38];
}

uint64_t type metadata accessor for _CRFileSyncManager.CRSyncPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _CRFileSyncManager.CRSyncPublisher);
}

uint64_t sub_1BDDCE9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return sub_1BDDCE9F0(*(uint64_t **)(v0 + 48), v0 + ((v2 + 56) & ~v2), v1, *(_QWORD *)(v0 + 40));
}

uint64_t sub_1BDDCE9F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v16[3];
  char v17;

  v16[1] = a4;
  v4 = *a1;
  v5 = type metadata accessor for Capsule(255, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 16), a4);
  v6 = sub_1BE1B2EE8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v16 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  v12 = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)v16 - v13;
  (*(void (**)(uint64_t))(v4 + 248))(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, v5);
  sub_1BE1B2E40();
  if ((v17 & 1) == 0)
    sub_1BE1B23F0();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v5);
}

uint64_t sub_1BDDCEB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v4[2];
  v6 = v4[3];
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Capsule(0, v5, *(_QWORD *)(v6 + 16), a4) - 8) + 80);
  return sub_1BDDCEBAC(v4[4], (uint64_t)v4 + ((v7 + 40) & ~v7), v5, v6);
}

uint64_t sub_1BDDCEBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v5 = type metadata accessor for CRSyncSubscription(0, a3, a4, a4);
  v6 = swift_bridgeObjectRetain();
  if (MEMORY[0x1C3B7C928](v6, v5))
  {
    v7 = 4;
    do
    {
      v8 = v7 - 4;
      v9 = sub_1BE1B29FC();
      sub_1BE1B29A8();
      if ((v9 & 1) != 0)
      {
        swift_retain();
        v10 = v7 - 3;
        if (__OFADD__(v8, 1))
          goto LABEL_9;
      }
      else
      {
        sub_1BE1B30BC();
        v10 = v7 - 3;
        if (__OFADD__(v8, 1))
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      sub_1BE1B2474();
      swift_release();
      ++v7;
    }
    while (v10 != MEMORY[0x1C3B7C928](a1, v5));
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDCECAC()
{
  uint64_t result;

  result = sub_1BDDCECCC();
  byte_1ED6EFBA0 = result & 1;
  return result;
}

uint64_t sub_1BDDCECCC()
{
  id v0;
  id v1;
  char v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1BE1B27C8();

    sub_1BE1B281C();
    swift_bridgeObjectRelease();
  }
  if ((sub_1BE1B287C() & 1) != 0)
    v2 = 1;
  else
    v2 = sub_1BE1B287C();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1BDDCEDD8()
{
  JUMPOUT(0x1C3B7DF54);
}

void sub_1BDDCEDE8()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDDCEDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  type metadata accessor for Capsule(255, *(_QWORD *)(a1 + 80), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16), a4);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  result = sub_1BE1B242C();
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRSyncSubscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRSyncSubscription);
}

uint64_t *sub_1BDDCEEA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  swift_weakInit();
  v5 = (uint64_t)v2 + *(_QWORD *)(*v2 + 96);
  type metadata accessor for Capsule(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(*(_QWORD *)(v4 + 88) + 16), v6);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED6F26D0);
  v7 = sub_1BE1B242C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, a2, v7);
  swift_weakAssign();
  return v2;
}

uint64_t type metadata accessor for Proto_TaggedValue(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2760);
}

void sub_1BDDCEF70()
{
  unint64_t v0;

  sub_1BDDCF014();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1BDDCF008()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_1BDDCF014()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6F3CA0)
  {
    type metadata accessor for CRReplicaDatabase.Replica(255);
    v0 = sub_1BE1B2EE8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6F3CA0);
  }
}

uint64_t sub_1BDDCF068()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1F58();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BDDCF0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v3 = v2;
  v6 = sub_1BE1B1F58();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v17 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v10, a1, v6);
  swift_beginAccess();
  sub_1BDDC6F6C((uint64_t)v12, v10);
  swift_endAccess();
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v12, v6);
  v13(v12, a1, v6);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *(_QWORD *)(v3 + 120);
  *(_QWORD *)(v3 + 120) = 0x8000000000000000;
  sub_1BDDC4D80(a2, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 120) = v17;
  swift_bridgeObjectRelease();
  v14(v12, v6);
  return swift_endAccess();
}

uint64_t sub_1BDDCF248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1BE1B1F58();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_beginAccess();
  v7 = *(_QWORD *)(v1 + 120);
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_1BDDAE974((uint64_t)v6), (v9 & 1) != 0))
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  else
    v10 = 0;
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v10;
}

uint64_t sub_1BDDCF320(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sqlite3_stmt *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  sqlite3_int64 v10;
  uint64_t result;
  uint64_t v12;

  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 96), 1, a1, 16, *(void (__cdecl **)(void *))(a3 + 72));
  v6 = *(sqlite3_stmt **)(a3 + 96);
  swift_beginAccess();
  v7 = *(_QWORD *)(a3 + 120);
  if (!*(_QWORD *)(v7 + 16) || (v8 = sub_1BDDAE974(a4), (v9 & 1) == 0))
  {
    result = swift_endAccess();
    __break(1u);
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_endAccess();
  sqlite3_bind_int64(v6, 2, v10);
  result = sqlite3_step(*(sqlite3_stmt **)(a3 + 96));
  if ((_DWORD)result == 101)
    return result;
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  sub_1BE1B2864();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  sub_1BDDFC134();
  swift_allocError();
  *(_QWORD *)v12 = 0xD000000000000010;
  *(_QWORD *)(v12 + 8) = 0x80000001BE1D0160;
  *(_BYTE *)(v12 + 16) = 2;
  return swift_willThrow();
}

void sub_1BDDCF48C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v28;
  _QWORD v29[5];
  _QWORD *v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t __src;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = sub_1BE1B1F58();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v34 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(v9 + 56);
  v30 = (_QWORD *)(v9 + 56);
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v31 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  v29[3] = v9;
  v29[4] = v4;
  v29[1] = v3;
  v32 = v8;
  if (v13)
  {
    v14 = __clz(__rbit64(v13));
    v15 = (v13 - 1) & v13;
    goto LABEL_15;
  }
  v16 = 1;
  if (v31 <= 1)
    goto LABEL_21;
  v17 = v30[1];
  if (!v17)
  {
    v18 = 2;
    if (v31 > 2)
    {
      v17 = v30[2];
      if (v17)
        goto LABEL_13;
      v18 = 3;
      if (v31 <= 3)
        goto LABEL_21;
      v17 = v30[3];
      if (v17)
      {
LABEL_13:
        v16 = v18;
        goto LABEL_14;
      }
      v18 = 4;
      if (v31 > 4)
      {
        v17 = v30[4];
        if (v17)
          goto LABEL_13;
        while (1)
        {
          v16 = v18 + 1;
          if (__OFADD__(v18, 1))
            __break(1u);
          if (v16 >= v31)
            break;
          v17 = v30[v16];
          ++v18;
          if (v17)
            goto LABEL_14;
        }
      }
    }
LABEL_21:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v8, 1, 1, v3);
    goto LABEL_22;
  }
LABEL_14:
  v15 = (v17 - 1) & v17;
  v14 = __clz(__rbit64(v17)) + (v16 << 6);
LABEL_15:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v8, *(_QWORD *)(v9 + 48) + *(_QWORD *)(v4 + 72) * v14, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) != 1)
  {
    v33 = v15;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v34, v8, v3);
    __src = sub_1BE1B1F40();
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = v24;
    v42 = v25;
    v43 = v26;
    sub_1BE1B1F40();
    sub_1BDDD6E84(&__src, 16);
    __asm { BR              X9 }
  }
LABEL_22:
  swift_release();
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  v28 = OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated;
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated) & 1) != 0)
  {
    sub_1BE101DA8();
    if (!v1)
      *(_BYTE *)(a1 + v28) = 0;
  }
}

uint64_t *sub_1BDDCFA78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;

  v1 = *v0;
  swift_defaultActor_initialize();
  sub_1BE1B1F58();
  v2 = *(_QWORD *)(v1 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule(255, v2, *(_QWORD *)(AssociatedConformanceWitness + 16), v4);
  sub_1BE1B2B04();
  swift_getTupleTypeMetadata2();
  sub_1BE1B29D8();
  sub_1BDDD66DC();
  v0[14] = sub_1BE1B25DC();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t *sub_1BDDCFB58()
{
  uint64_t *v0;

  type metadata accessor for AsyncUpdatesActor(0, v0[10], v0[11], v0[12]);
  swift_allocObject();
  return sub_1BDDCFA78();
}

uint64_t sub_1BDDCFB9C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncUpdatesActor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncUpdatesActor);
}

uint64_t sub_1BDDCFC00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  int64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a1;
  v2 = *(_QWORD *)(*v1 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v5 = type metadata accessor for Capsule(0, v2, *(_QWORD *)(AssociatedConformanceWitness + 16), v4);
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v45 = (char *)&v37 - v6;
  v7 = sub_1BE1B2AC8();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x1E0C80A78](v7);
  v42 = (char *)&v37 - v8;
  v47 = v5;
  v9 = sub_1BE1B2B04();
  v52 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v41 = (char *)&v37 - v10;
  v51 = sub_1BE1B1F58();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = sub_1BE1B2EE8();
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v37 - v16;
  swift_beginAccess();
  v18 = v1[14];
  v19 = *(_QWORD *)(v18 + 64);
  v38 = v18 + 64;
  v20 = 1 << *(_BYTE *)(v18 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v39 = (unint64_t)(v20 + 63) >> 6;
  v40 = v18;
  v37 = v39 - 1;
  result = swift_bridgeObjectRetain();
  v24 = 0;
  v25 = v52;
  v26 = v41;
  if (!v22)
    goto LABEL_6;
LABEL_4:
  v27 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  v28 = v24;
  v29 = v27 | (v24 << 6);
LABEL_5:
  v30 = v40;
  (*(void (**)(char *, unint64_t))(*(_QWORD *)(v51 - 8) + 16))(v15, *(_QWORD *)(v40 + 48) + *(_QWORD *)(*(_QWORD *)(v51 - 8) + 72) * v29);
  (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(&v15[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v30 + 56) + *(_QWORD *)(v52 + 72) * v29, v9);
  for (i = 0; ; i = 1)
  {
    while (1)
    {
LABEL_12:
      v34 = *(_QWORD *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56))(v15, i, 1, TupleTypeMetadata2);
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v17, v15, v50);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v17, 1, TupleTypeMetadata2) == 1)
        return swift_release();
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v26, &v17[*(int *)(TupleTypeMetadata2 + 48)], v9);
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v48, v47);
      v35 = v42;
      sub_1BE1B2AEC();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v44);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v9);
      result = (*(uint64_t (**)(char *))(*(_QWORD *)(v51 - 8) + 8))(v17);
      v24 = v28;
      if (v22)
        goto LABEL_4;
LABEL_6:
      v32 = v24 + 1;
      if (__OFADD__(v24, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v32 >= v39)
      {
        v28 = v24;
        goto LABEL_11;
      }
      v33 = *(_QWORD *)(v38 + 8 * v32);
      if (v33)
        goto LABEL_9;
      v28 = v24 + 2;
      if (v24 + 2 < v39)
        break;
      v22 = 0;
      i = 1;
      v28 = v24 + 1;
    }
    v33 = *(_QWORD *)(v38 + 8 * v28);
    if (v33)
    {
      v32 = v24 + 2;
LABEL_9:
      v22 = (v33 - 1) & v33;
      v29 = __clz(__rbit64(v33)) + (v32 << 6);
      v28 = v32;
      goto LABEL_5;
    }
    v36 = v24 + 3;
    if (v36 < v39)
      break;
LABEL_11:
    v22 = 0;
  }
  v33 = *(_QWORD *)(v38 + 8 * v36);
  if (v33)
  {
    v32 = v36;
    goto LABEL_9;
  }
  while (1)
  {
    v32 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v32 >= v39)
    {
      v22 = 0;
      i = 1;
      v28 = v37;
      goto LABEL_12;
    }
    v33 = *(_QWORD *)(v38 + 8 * v32);
    ++v36;
    if (v33)
      goto LABEL_9;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1BDDD0038(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1BDDD0098(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for CapsuleReference()
{
  return &type metadata for CapsuleReference;
}

_BYTE *sub_1BDDD0108(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRCodableVersion()
{
  return &type metadata for CRCodableVersion;
}

uint64_t sub_1BDDD0120(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_1BDDD0128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1BDDD0160(a1, a2, a3, a5);
}

uint64_t sub_1BDDD0140@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return CRBinaryFileSync.read(from:context:coordinator:)(a1, a2);
}

uint64_t type metadata accessor for CRBinaryFileSync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRBinaryFileSync);
}

uint64_t sub_1BDDD0160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v13 = *v4;
  v7 = *(_QWORD *)(a4 + 24);
  v8 = type metadata accessor for Capsule(0, *(_QWORD *)(a4 + 16), *(_QWORD *)(v7 + 16), a4);
  result = Capsule<>.serializedData(_:version:allowedAppFormats:)(a3, &v13, 0, v8, v7);
  if (!v5)
  {
    v11 = result;
    v12 = v10;
    sub_1BE1B1E98();
    return sub_1BDDB796C(v11, v12);
  }
  return result;
}

uint64_t CRBinaryFileSync.read(from:context:coordinator:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v6;

  result = sub_1BE1B1E08();
  if (!v2)
    return Capsule<>.init(serializedData:allowedAppFormats:)(result, v6, 0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return result;
}

uint64_t sub_1BDDD0248()
{
  return sub_1BDD8747C();
}

uint64_t sub_1BDDD025C()
{
  return sub_1BDD8422C(&qword_1ED6F2EA8, type metadata accessor for Proto_Timestamp, (uint64_t)&unk_1BE1C5F6C);
}

uint64_t sub_1BDDD0288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1ED6EFD78, &qword_1ED6EFD68, a2);
}

uint64_t sub_1BDDD02A4()
{
  return sub_1BDD8422C(&qword_1ED6EFDB0, type metadata accessor for Proto_Reference, (uint64_t)&unk_1BE1C52C4);
}

uint64_t sub_1BDDD02D0()
{
  return sub_1BDD8747C();
}

uint64_t sub_1BDDD02E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_1BE1B20CC();
  a1[1] = v2;
  a1[2] = MEMORY[0x1E0DEE9D8];
  return sub_1BE1B20E4();
}

uint64_t sub_1BDDD0328()
{
  return sub_1BDDD0368();
}

uint64_t sub_1BDDD033C()
{
  return sub_1BDD8422C(&qword_1ED6F3288, type metadata accessor for Proto_Constants, (uint64_t)&unk_1BE1C623C);
}

uint64_t sub_1BDDD0368()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_1BE1B2144();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1BE1B21D4();
      }
      else if (result == 1)
      {
        sub_1BE1B21A4();
      }
      result = sub_1BE1B2144();
    }
  }
  return result;
}

uint64_t sub_1BDDD0408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDDD0518(a1, a2, a3, a4);
}

uint64_t sub_1BDDD0428()
{
  uint64_t v0;

  swift_release();
  sub_1BDDCCDCC(v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDD0460()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Proto_CustomCRValue(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CRStructDecoder()
{
  uint64_t result;

  result = qword_1ED6F0000;
  if (!qword_1ED6F0000)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BDDD0518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for CRStructDecoder.KeyedContainer(0, a2, a3, a4);
  swift_retain();
  MEMORY[0x1C3B7DF54](&unk_1BE1BCAE8, v4);
  return sub_1BE1B32A8();
}

uint64_t sub_1BDDD0590(uint64_t a1)
{
  uint64_t *v1;

  return sub_1BDDD0610(a1, *v1) & 1;
}

uint64_t sub_1BDDD05B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return sub_1BDDD06C4(a1, *v4, *(_QWORD *)(a3 + 16), a2, a4);
}

uint64_t sub_1BDDD05DC()
{
  return sub_1BE1B356C();
}

uint64_t type metadata accessor for CRStructDecoder.KeyedContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRStructDecoder.KeyedContainer);
}

uint64_t sub_1BDDD0610(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;

  v3 = sub_1BE1B3788();
  if ((v4 & 1) != 0)
  {
    v5 = 1;
    return v5 & 1;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = sub_1BDDC7A24(v3, *(_QWORD *)(a2 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value)) ^ 1;
    return v5 & 1;
  }
  result = sub_1BE1B31F4();
  __break(1u);
  return result;
}

uint64_t sub_1BDDD06C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char isUniquelyReferenced_nonNull_native;
  char v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  void (*v89)(char *, uint64_t, uint64_t, uint64_t);
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  _QWORD v92[2];
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _QWORD *v108;

  v104 = a2;
  v99 = a5;
  v98 = sub_1BE1B2EE8();
  v8 = *(_QWORD *)(v98 - 8);
  v9 = MEMORY[0x1E0C80A78](v98);
  v11 = (char *)v92 - v10;
  v102 = a4;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Proto_Value(0);
  v100 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v101 = (uint64_t)v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1BE1B3788();
  if ((v18 & 1) != 0)
  {
    *(_QWORD *)&v105 = 0;
    *((_QWORD *)&v105 + 1) = 0xE000000000000000;
    sub_1BE1B305C();
    sub_1BE1B284C();
    sub_1BE1B3488();
LABEL_16:
    sub_1BE1B284C();
    v35 = v105;
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v36 = v35;
LABEL_17:
    *(_BYTE *)(v36 + 16) = 0;
    return swift_willThrow();
  }
  v19 = v17;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v20 = swift_conformsToProtocol2();
    if (v20)
      v21 = v20;
    else
      v21 = 0;
    if (v20)
      v22 = a1;
    else
      v22 = 0;
    if (v22)
    {
      v96 = v22;
      v97 = v21;
      v23 = v104 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value;
      v24 = sub_1BDDC6C70(v19, *(_QWORD *)(v104 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value));
      if ((v25 & 1) == 0)
      {
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_84;
        v26 = *(_QWORD *)(v23 + 8);
        v27 = v103;
        if (v24 >= *(_QWORD *)(v26 + 16))
          goto LABEL_85;
        v28 = v101;
        sub_1BDDD2EB4(v26+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(_QWORD *)(v100 + 72) * v24, v101);
        v29 = *(_QWORD *)(v104 + 16);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        v30 = sub_1BDDB4FC0(v28, v29);
        swift_release();
        v32 = v96;
        v31 = v97;
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 8);
        *((_QWORD *)&v106 + 1) = v96;
        v107 = v97;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v105);
        v33(v30, v32, v31);
        if (v27)
          return __swift_deallocate_boxed_opaque_existential_0((uint64_t)&v105);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F0010);
        return swift_dynamicCast();
      }
      v48 = v102;
      v49 = swift_conformsToProtocol2();
      if (v49)
        v50 = v49;
      else
        v50 = 0;
      if (!v49)
        v48 = 0;
      if (v48)
      {
        v104 = *(_QWORD *)(v50 + 16);
        *((_QWORD *)&v106 + 1) = v48;
        v107 = v50;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v105);
        ((void (*)(uint64_t, uint64_t))v104)(v48, v50);
      }
      else
      {
        v107 = 0;
        v105 = 0u;
        v106 = 0u;
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF4E0);
      v87 = v102;
      v88 = swift_dynamicCast();
      v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
      if (v88)
      {
        v89(v11, 0, 1, v87);
        v90 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v90(v14, v11, v87);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v90)(v99, v14, v87);
      }
      v89(v11, 1, 1, v87);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v98);
      *(_QWORD *)&v105 = 0;
      *((_QWORD *)&v105 + 1) = 0xE000000000000000;
      sub_1BE1B305C();
      sub_1BE1B284C();
      sub_1BE1B3488();
      goto LABEL_16;
    }
LABEL_28:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_OWORD *)v47 = xmmword_1BE1BCA00;
    *(_BYTE *)(v47 + 16) = 4;
    return swift_willThrow();
  }
  v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6EF0E8);
  if (!swift_dynamicCastMetatype())
    goto LABEL_28;
  v38 = swift_conformsToProtocol2();
  v39 = v38 ? v38 : 0;
  if (!(v38 ? a3 : 0))
    goto LABEL_28;
  v41 = (*(uint64_t (**)(void))(v39 + 8))();
  v42 = v41;
  v43 = (_QWORD *)(v104 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  v44 = *(_QWORD *)(v104 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  v96 = *(_QWORD *)(v44 + 16);
  if (!v96)
  {
    swift_bridgeObjectRelease();
    v91 = MEMORY[0x1E0DEE9E0];
LABEL_78:
    *(_QWORD *)&v105 = v91;
    return swift_dynamicCast();
  }
  v92[1] = v37;
  v97 = v44 + 32;
  v45 = v41 + 56;
  swift_bridgeObjectRetain();
  v46 = 0;
  v98 = MEMORY[0x1E0DEE9E0];
  v93 = v43;
  v94 = v44;
  v95 = v45;
  while (v46 < *(_QWORD *)(v44 + 16))
  {
    v52 = *(_QWORD *)(v97 + 8 * v46);
    if (v52 < 0)
      goto LABEL_81;
    if (*(_QWORD *)(v42 + 16))
    {
      v53 = sub_1BE1B36EC();
      v54 = -1 << *(_BYTE *)(v42 + 32);
      v55 = v53 & ~v54;
      if (((*(_QWORD *)(v45 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) != 0)
      {
        v56 = *(_QWORD *)(v42 + 48);
        if (*(_QWORD *)(v56 + 8 * v55) == v52)
          goto LABEL_39;
        v57 = ~v54;
        while (1)
        {
          v55 = (v55 + 1) & v57;
          if (((*(_QWORD *)(v45 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
            break;
          if (*(_QWORD *)(v56 + 8 * v55) == v52)
            goto LABEL_39;
        }
      }
    }
    v58 = *v43;
    v59 = *(_QWORD *)(*v43 + 16);
    if (!v59)
      goto LABEL_75;
    if (*(_QWORD *)(v58 + 32) == v52)
    {
      v60 = 0;
    }
    else
    {
      if (v59 == 1)
        goto LABEL_75;
      if (*(_QWORD *)(v58 + 40) != v52)
      {
        v61 = 0;
        v62 = v59 - 2;
        v63 = v58 + 48;
        while (v62 != v61)
        {
          v64 = *(_QWORD *)(v63 + 8 * v61++);
          if (v64 == v52)
          {
            v60 = v61 + 1;
            goto LABEL_59;
          }
        }
LABEL_75:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BDDFCAFC();
        swift_allocError();
        *(_QWORD *)v36 = 0xD00000000000001ELL;
        *(_QWORD *)(v36 + 8) = 0x80000001BE1CEF90;
        goto LABEL_17;
      }
      v60 = 1;
    }
LABEL_59:
    v65 = v43[1];
    if (v60 >= *(_QWORD *)(v65 + 16))
      goto LABEL_82;
    v66 = v101;
    sub_1BDDD2EB4(v65+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(_QWORD *)(v100 + 72) * v60, v101);
    v67 = *(_QWORD *)(v104 + 16);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    sub_1BDDB4FC0(v66, v67);
    swift_release();
    v68 = swift_retain();
    v69 = v103;
    AnyCRValue.init(from:)(v68, (uint64_t *)&v105);
    v103 = v69;
    if (v69)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    v70 = v42;
    v71 = v105;
    v72 = v98;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v108 = (_QWORD *)v72;
    v75 = sub_1BDE5E0FC(v52);
    v76 = *(_QWORD *)(v72 + 16);
    v77 = (v74 & 1) == 0;
    v78 = v76 + v77;
    if (__OFADD__(v76, v77))
      goto LABEL_83;
    v79 = v74;
    if (*(_QWORD *)(v72 + 24) >= v78)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1BDE66720();
    }
    else
    {
      sub_1BDE62FB4(v78, isUniquelyReferenced_nonNull_native);
      v80 = sub_1BDE5E0FC(v52);
      if ((v79 & 1) != (v81 & 1))
        goto LABEL_87;
      v75 = v80;
    }
    v82 = v108;
    v98 = (uint64_t)v108;
    if ((v79 & 1) != 0)
    {
      v51 = v108[7];
      swift_release();
      *(_QWORD *)(v51 + 8 * v75) = v71;
    }
    else
    {
      v108[(v75 >> 6) + 8] |= 1 << v75;
      v83 = 8 * v75;
      *(_QWORD *)(v82[6] + v83) = v52;
      *(_QWORD *)(v82[7] + v83) = v71;
      v84 = v82[2];
      v85 = __OFADD__(v84, 1);
      v86 = v84 + 1;
      if (v85)
        goto LABEL_86;
      v82[2] = v86;
    }
    v42 = v70;
    v45 = v95;
    swift_release();
    swift_bridgeObjectRelease();
    v43 = v93;
    v44 = v94;
LABEL_39:
    if (++v46 == v96)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v91 = v98;
      goto LABEL_78;
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CRGlobalContext()
{
  return objc_opt_self();
}

uint64_t sub_1BDDD0F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v10[0] = sub_1BE1B2E28();
  v1 = *(_QWORD *)(v10[0] - 8);
  MEMORY[0x1E0C80A78](v10[0]);
  v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BE1B2E04();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v6);
  v7 = MEMORY[0x1E0DEE9D8];
  v8 = sub_1BDDC8AB0(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = v8;
  sub_1BDD88A30();
  sub_1BE1B24A4();
  v10[1] = v7;
  sub_1BDD8422C(qword_1ED6F4480, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  sub_1BDD87364((unint64_t *)&qword_1ED6F4470, (uint64_t *)&unk_1ED6F4460);
  sub_1BE1B2F78();
  (*(void (**)(char *, _QWORD, _QWORD))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v10[0]);
  *(_QWORD *)(v0 + 40) = sub_1BE1B2E58();
  return v0;
}

uint64_t sub_1BDDD1170()
{
  uint64_t v0;

  return sub_1BDD8F258(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BDDD1178()
{
  uint64_t result;

  type metadata accessor for CRGlobalContext();
  swift_allocObject();
  result = sub_1BDDD0F94();
  qword_1ED6F8BE8 = result;
  return result;
}

uint64_t sub_1BDDD11B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDDD11CC(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1BDDD11CC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_bridgeObjectRetain();
  v6 = sub_1BDD94F04(a1, 0, 1, a2);
  v8 = v7;
  v10 = v9;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = v8 & 1;
  *(_QWORD *)(a3 + 16) = v10;
  return result;
}

void sub_1BDDD124C()
{
  JUMPOUT(0x1C3B7DF54);
}

uint64_t sub_1BDDD125C()
{
  uint64_t v0;

  sub_1BDDB796C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDD1280()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CRDecodeContext.DecodingReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRDecodeContext.DecodingReference);
}

uint64_t sub_1BDDD12C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD);
  _QWORD v10[2];

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  v6 = v2[2];
  v7 = v2[3];
  v10[0] = v6;
  v10[1] = v7;
  v8 = *(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 192);
  sub_1BDDB6CA4(v6, v7);
  v8(v5, v10, a2, v5, *(_QWORD *)(v4 + 120));
  return sub_1BDDB796C(v6, v7);
}

void sub_1BDDD1368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = sub_1BE1B2108();
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for Proto4_Root(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  __asm { BR              X9 }
}

uint64_t sub_1BDDD146C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (BYTE6(v4) >= 8uLL)
  {
    *(_QWORD *)(v5 - 160) = v1;
    *(_QWORD *)(v5 - 152) = v3;
    *(_QWORD *)(v5 - 176) = v0;
    *(_QWORD *)(v5 - 168) = v2;
    if (qword_1ED6F31A0 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 4;
  return swift_willThrow();
}

uint64_t sub_1BDDD1A04()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BDDD1A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDD1A58(uint64_t a1)
{
  uint64_t result;

  result = sub_1BDD8422C(&qword_1ED6F2508, type metadata accessor for RetainedMapRun, (uint64_t)&unk_1BE1C8BF8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Proto_Optional(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2738);
}

uint64_t sub_1BDDD1AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1ED6F3268, &qword_1ED6F37F0, a2);
}

uint64_t sub_1BDDD1AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD9F8B0(a1, a2, a3, type metadata accessor for Proto_Document, (void (*)(_QWORD))type metadata accessor for Proto_Document._StorageClass, sub_1BDDA0F18, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1BDD9A9A0);
}

uint64_t sub_1BDDD1AFC()
{
  return sub_1BDD8422C(&qword_1ED6F3828, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C67DC);
}

uint64_t type metadata accessor for Proto_Document._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3810);
}

uint64_t sub_1BDDD1B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_1BE1B2E28();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BE1B2E04();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v6);
  sub_1BDD88A30();
  sub_1BE1B24A4();
  v8[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDD8422C(qword_1ED6F4480, v5, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  sub_1BDDC72AC();
  sub_1BE1B2F78();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_1BE1B2E58();
  qword_1ED6F8BF0 = result;
  return result;
}

uint64_t sub_1BDDD1CF0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B1DF0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BDDD1DA8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  NSString *v3;
  uint64_t v4;
  uint64_t result;
  _OWORD v6[2];
  uint64_t v7;

  v0 = sub_1BE1B1DF0();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v3 = NSTemporaryDirectory();
  sub_1BE1B27C8();

  sub_1BE1B1D60();
  swift_bridgeObjectRelease();
  type metadata accessor for CRAssetManager(0);
  v4 = swift_allocObject();
  result = sub_1BDD87A88((uint64_t)v2, (uint64_t)v6);
  qword_1ED6F8BA8 = v4;
  return result;
}

uint64_t sub_1BDDD1E78()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F2690);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  qword_1ED6F2500 = result;
  return result;
}

uint64_t sub_1BDDD1EB8()
{
  return sub_1BDD8422C(&qword_1ED6F27C0, type metadata accessor for Proto_Version, (uint64_t)&unk_1BE1C5C9C);
}

uint64_t sub_1BDDD1EE4()
{
  return sub_1BDD8747C();
}

uint64_t sub_1BDDD1EFC()
{
  return sub_1BDD8422C(&qword_1ED6EFCD8, type metadata accessor for Proto_KeyPath, (uint64_t)&unk_1BE1C60D4);
}

uint64_t CRValueStruct.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  const char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t **v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v40 = a2;
  v38 = a3;
  v39 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v5);
  v44 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_Value(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v35 - v15;
  v17 = type metadata accessor for Proto_CustomCRValue(0);
  v18 = MEMORY[0x1E0C80A78](v17);
  v36 = (uint64_t *)((char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18);
  v37 = (uint64_t)&v35 - v20;
  v21 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v21, (uint64_t)v16, &qword_1ED6F3770);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v8) = v22(v16, 1, v7);
  sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3770);
  if ((_DWORD)v8 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v23 = 0xD000000000000017;
    v24 = "Not decoding a CRValue.";
LABEL_11:
    *(_QWORD *)(v23 + 8) = (unint64_t)(v24 - 32) | 0x8000000000000000;
    *(_BYTE *)(v23 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(_QWORD *)(swift_initStackObject() + 16) = a1;
  sub_1BDD86DEC(v21, (uint64_t)v14, &qword_1ED6F3770);
  result = v22(v14, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  sub_1BDDA2E8C((uint64_t)v14, (uint64_t)v10, type metadata accessor for Proto_Value);
  swift_retain();
  swift_release();
  v26 = *(_QWORD *)&v10[*(int *)(v7 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v27 = v44;
  sub_1BDD86DEC(v26, v44, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Value);
  v28 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28) == 1)
  {
    sub_1BDD86E30(v27, &qword_1ED6F26F0);
LABEL_10:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v23 = 0xD00000000000001FLL;
    v24 = "Wrong format for Custom struct.";
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 13)
  {
    sub_1BDD9C3E0(v27, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  v29 = v37;
  sub_1BDDA2E8C(v27, v37, type metadata accessor for Proto_CustomCRValue);
  v30 = v36;
  sub_1BDD9C318(v29, (uint64_t)v36, type metadata accessor for Proto_CustomCRValue);
  v31 = type metadata accessor for CRStructDecoder();
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = a1;
  v33 = (unint64_t **)(v32 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  sub_1BDD9C318((uint64_t)v30, v32 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value, type metadata accessor for Proto_CustomCRValue);
  if (*(_QWORD *)(*v30 + 16))
  {
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v30, type metadata accessor for Proto_CustomCRValue);
  }
  else
  {
    v34 = sub_1BDDC47E0(0, *(_QWORD *)(v30[1] + 16));
    swift_retain();
    sub_1BDD9C3E0((uint64_t)v30, type metadata accessor for Proto_CustomCRValue);
    *v33 = v34;
    swift_bridgeObjectRelease();
  }
  v42 = v31;
  v43 = sub_1BDD8422C((unint64_t *)&qword_1ED6F2758, (uint64_t (*)(uint64_t))type metadata accessor for CRStructDecoder, (uint64_t)&unk_1BE1BCA34);
  v41 = v32;
  sub_1BE1B2B58();
  swift_release();
  return sub_1BDD9C3E0(v29, type metadata accessor for Proto_CustomCRValue);
}

uint64_t dispatch thunk of CRStruct_Base.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_1BDDD23E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 280);
  v2 = sub_1BE1B2EE8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDD243C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BE1B2EE8();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BDDD24AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - v7;
  v9 = (uint64_t)v1 + *(_QWORD *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 16) + 8) + 16))(a1, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_1BDDD25BC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD v18[4];
  _QWORD v19[4];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 264);
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v18 - v8;
  if (v1 != a1)
  {
    v10 = swift_dynamicCastClass();
    if (v10)
    {
      v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 280);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v11, v5);
      v12 = *(_QWORD *)(v4 - 8);
      v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
      if (v13((uint64_t)v9, 1, v4) == 1)
      {
        __break(1u);
      }
      else
      {
        v14 = (uint64_t)v1 + *(_QWORD *)(*v1 + 280);
        swift_beginAccess();
        if (v13(v14, 1, v4) != 1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v3 + 272) + 8);
          v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 8);
          swift_retain();
          v16(v9, v4, v15);
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v4);
        }
      }
      __break(1u);
    }
    v19[0] = 0;
    v19[1] = 0xE000000000000000;
    sub_1BE1B305C();
    swift_bridgeObjectRelease();
    v18[1] = 0xD00000000000001BLL;
    v18[2] = 0x80000001BE1D1F80;
    sub_1BE1B37AC();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    v17 = sub_1BE1B284C();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*a1 + 88))(v19, v17);
    __swift_project_boxed_opaque_existential_1(v19, v19[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    sub_1BE1B37AC();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    result = sub_1BE1B3200();
    __break(1u);
  }
  return result;
}

uint64_t *sub_1BDDD2838()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t *result;
  uint64_t v10;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(v2 + 264);
  v4 = sub_1BE1B2EE8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v10 - v6;
  v8 = (char *)v1 + *(_QWORD *)(v2 + 280);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v7, 1, v3);
  if ((_DWORD)result != 1)
    return sub_1BDD85C5C((uint64_t)v7);
  __break(1u);
  return result;
}

uint64_t sub_1BDDD2908()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 264);
  v3 = sub_1BE1B2EE8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - v5;
  v7 = (uint64_t)v0 + *(_QWORD *)(v1 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v8 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 272) + 16) + 48))(v2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v2);
    return v10 & 1;
  }
  return result;
}

uint64_t sub_1BDDD29FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = sub_1BE1B2E28();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BE1B2E04();
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_1BE1B24BC();
  MEMORY[0x1E0C80A78](v5);
  sub_1BDD88A30();
  sub_1BE1B24A4();
  v7[1] = MEMORY[0x1E0DEE9D8];
  sub_1BDDC6BB0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F4460);
  sub_1BDDC72AC();
  sub_1BE1B2F78();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_1BE1B2E58();
  qword_1ED6F32D0 = result;
  return result;
}

void sub_1BDDD2B90()
{
  if (qword_1ED6F31A0 != -1)
    swift_once();
  __asm { BR              X10 }
}

void sub_1BDDD2CC4()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BE1B1F58();
  if (v0 <= 0x3F)
  {
    sub_1BDDCA744();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_1BDDD2D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDD8D9A4(v1, a1);
}

uint64_t sub_1BDDD2D74()
{
  return sub_1BDDC1190();
}

uint64_t sub_1BDDD2D8C()
{
  return sub_1BDD8422C(&qword_1ED6F2868, type metadata accessor for Proto_Struct, (uint64_t)&unk_1BE1C542C);
}

void type metadata accessor for CRDictionary.Iterator()
{
  JUMPOUT(0x1C3B7DED0);
}

void type metadata accessor for CRDictionary.Index()
{
  JUMPOUT(0x1C3B7DED0);
}

uint64_t sub_1BDDD2DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = sub_1BDDC49A0(1952739939, 0xE400000000000000);
  v1 = sub_1BDDC4278(v0);
  v3 = v2;
  result = swift_release();
  qword_1ED6F8B48 = v1;
  unk_1ED6F8B50 = v3;
  return result;
}

uint64_t type metadata accessor for _CRSQLStore()
{
  return objc_opt_self();
}

uint64_t sub_1BDDD2E44()
{
  uint64_t v0;

  v0 = sub_1BE1B23C0();
  __swift_allocate_value_buffer(v0, qword_1ED6F8AD0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED6F8AD0);
  return sub_1BE1B23B4();
}

uint64_t sub_1BDDD2EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDD2EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDD2F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1BDD85DD0(a1, &qword_1ED6F2718, &qword_1ED6F2708, a2);
}

uint64_t sub_1BDDD2F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDD98310(a1, a2, a3);
}

uint64_t sub_1BDDD2F70()
{
  return sub_1BDD8422C((unint64_t *)&unk_1ED6EFF68, type metadata accessor for Proto_Value, (uint64_t)&unk_1BE1C6674);
}

uint64_t sub_1BDDD2F9C()
{
  return sub_1BDD96A3C(&OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf, &qword_1ED6F26F0);
}

void sub_1BDDD2FB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;

  sub_1BDD92F18(319, a4, a5);
  if (v5 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_1BDDD3024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDDD2FB0(a1, a2, a3, &qword_1ED6F26F8, (void (*)(uint64_t))type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
}

uint64_t type metadata accessor for Proto_Value._StorageClass(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F2720);
}

uint64_t sub_1BDDD304C(uint64_t a1)
{
  return sub_1BDD8CC18(a1, (void (*)(_QWORD))type metadata accessor for Proto_Value._StorageClass, &OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf, type metadata accessor for Proto_Value.OneOf_TaggedOneOf, &qword_1ED6F2708);
}

uint64_t sub_1BDDD3070(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
      return sub_1BDDB796C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for Proto_Version(0);
      goto LABEL_12;
    case 7:
      v4 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for Proto_Reference(0);
      return swift_release();
    case 8:
      v5 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for Proto_Optional(0);
      return swift_release();
    case 9:
      v3 = type metadata accessor for Proto_Timestamp(0);
      goto LABEL_12;
    case 10:
      swift_bridgeObjectRelease();
      v6 = *(int *)(type metadata accessor for Proto_RepeatedValue(0) + 20);
      goto LABEL_13;
    case 11:
      v7 = sub_1BE1B20F0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
      type metadata accessor for Proto_TaggedValue(0);
      return swift_release();
    case 12:
      sub_1BDDB796C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
      sub_1BDDB796C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
      v6 = *(int *)(type metadata accessor for Proto_Asset(0) + 28);
      goto LABEL_13;
    case 13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for Proto_CustomCRValue(0);
LABEL_12:
      v6 = *(int *)(v3 + 24);
LABEL_13:
      v8 = a1 + v6;
      v9 = sub_1BE1B20F0();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BDDD31F0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = type metadata accessor for Proto_Version(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Proto_Reference(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Proto_Optional(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Proto_Timestamp(319);
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for Proto_RepeatedValue(319);
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for Proto_TaggedValue(319);
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for Proto_Asset(319);
              if (v7 <= 0x3F)
              {
                result = type metadata accessor for Proto_CustomCRValue(319);
                if (v8 <= 0x3F)
                {
                  swift_initEnumMetadataMultiPayload();
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Proto_Value.OneOf_TaggedOneOf(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F26E0);
}

uint64_t sub_1BDDD3358()
{
  return sub_1BDDC1190();
}

uint64_t type metadata accessor for Proto_Asset(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3748);
}

uint64_t type metadata accessor for Proto4_Root(uint64_t a1)
{
  return sub_1BDD88618(a1, (uint64_t *)&unk_1ED6F3738);
}

uint64_t sub_1BDDD339C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t *, _QWORD);
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  unint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v81;
  _QWORD *v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  _QWORD *v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  int64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  unint64_t v121;
  uint64_t v122;

  v6 = v3;
  v7 = v2;
  v8 = a1;
  v122 = MEMORY[0x1E0DEE9E8];
  v116 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    v100 = (uint64_t *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    swift_bridgeObjectRetain_n();
    v104 = v2;
    while (1)
    {
      v9 = sub_1BDDD48E4(v8, v7);
      if (v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_68;
      }
      v5 = v9;
      swift_bridgeObjectRelease();
      v106 = v5;
      v108 = v5 & 0xC000000000000001;
      if ((v5 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1BE1B2FB4();
        type metadata accessor for AnyReference();
        sub_1BDD8422C((unint64_t *)&qword_1EF52CFD8, (uint64_t (*)(uint64_t))type metadata accessor for AnyReference, (uint64_t)&unk_1BE1BCF30);
        sub_1BE1B2BDC();
        v5 = v117;
        v98 = v118;
        v10 = v119;
        v11 = v120;
        v12 = v121;
      }
      else
      {
        v13 = -1 << *(_BYTE *)(v5 + 32);
        v98 = v5 + 56;
        v14 = ~v13;
        v15 = -v13;
        if (v15 < 64)
          v16 = ~(-1 << v15);
        else
          v16 = -1;
        v12 = v16 & *(_QWORD *)(v5 + 56);
        swift_bridgeObjectRetain();
        v10 = v14;
        v11 = 0;
      }
      v97 = (unint64_t)(v10 + 64) >> 6;
      while ((v5 & 0x8000000000000000) == 0)
      {
        if (v12)
        {
          v19 = (v12 - 1) & v12;
          v20 = __clz(__rbit64(v12)) | (v11 << 6);
          v21 = v11;
        }
        else
        {
          v21 = v11 + 1;
          if (__OFADD__(v11, 1))
          {
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
            goto LABEL_117;
          }
          if (v21 >= v97)
            goto LABEL_41;
          v23 = *(_QWORD *)(v98 + 8 * v21);
          if (!v23)
          {
            v24 = v11 + 2;
            if (v11 + 2 >= v97)
              goto LABEL_41;
            v23 = *(_QWORD *)(v98 + 8 * v24);
            if (v23)
              goto LABEL_29;
            v24 = v11 + 3;
            if (v11 + 3 >= v97)
              goto LABEL_41;
            v23 = *(_QWORD *)(v98 + 8 * v24);
            if (v23)
              goto LABEL_29;
            v24 = v11 + 4;
            if (v11 + 4 >= v97)
              goto LABEL_41;
            v23 = *(_QWORD *)(v98 + 8 * v24);
            if (v23)
            {
LABEL_29:
              v21 = v24;
            }
            else
            {
              v21 = v11 + 5;
              if (v11 + 5 >= v97)
                goto LABEL_41;
              v23 = *(_QWORD *)(v98 + 8 * v21);
              if (!v23)
              {
                v30 = v11 + 6;
                do
                {
                  if (v97 == v30)
                    goto LABEL_41;
                  v23 = *(_QWORD *)(v98 + 8 * v30++);
                }
                while (!v23);
                v21 = v30 - 1;
              }
            }
          }
          v19 = (v23 - 1) & v23;
          v20 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        v4 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
        swift_retain();
        if (!v4)
          goto LABEL_41;
LABEL_32:
        sub_1BDE5A134(v4, &v110);
        v25 = v110;
        v26 = v111;
        swift_beginAccess();
        v27 = *v100;
        swift_bridgeObjectRetain();
        v28 = swift_bridgeObjectRetain();
        if ((sub_1BDEED578(v28, v26) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_12:
          v17 = *(_QWORD *)(v4 + 16);
          v18 = *(_QWORD *)(v4 + 24);
          sub_1BDDB6CA4(v17, v18);
          sub_1BDDBC6BC(&v110, v17, v18);
          swift_release();
          sub_1BDDB796C(v110, v111);
          goto LABEL_13;
        }
        v29 = sub_1BDEED578(v27, v25);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0)
          goto LABEL_12;
        swift_release();
LABEL_13:
        v11 = v21;
        v12 = v19;
      }
      v22 = sub_1BE1B3008();
      if (v22)
      {
        v112 = (_QWORD *)v22;
        type metadata accessor for AnyReference();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v110;
        swift_unknownObjectRelease();
        v21 = v11;
        v19 = v12;
        if (v4)
          goto LABEL_32;
      }
LABEL_41:
      sub_1BDE27FD0();
      if (!v108)
      {
        v31 = v106;
        v32 = *(_QWORD *)(v106 + 16);
        if (!v32)
          goto LABEL_46;
LABEL_43:
        v115 = MEMORY[0x1E0DEE9D8];
        sub_1BDD93E38(0, v32 & ~(v32 >> 63), 0);
        if (v108)
        {
          v33 = sub_1BE1B2FA8();
          v35 = 1;
        }
        else
        {
          v33 = sub_1BDF1A7E4(v31);
          v35 = v37 & 1;
        }
        v112 = (_QWORD *)v33;
        v113 = v34;
        v114 = v35;
        if ((v32 & 0x8000000000000000) == 0)
        {
          do
          {
            while (1)
            {
              v43 = (uint64_t)v112;
              v4 = v113;
              v5 = v114;
              v44 = sub_1BDF19284((uint64_t)v112, v113, v114, v31);
              v45 = *(_QWORD *)(v44 + 16);
              v46 = *(_QWORD *)(v44 + 24);
              sub_1BDDB6CA4(v45, v46);
              swift_release();
              v47 = v115;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_1BDD93E38(0, *(_QWORD *)(v47 + 16) + 1, 1);
                v47 = v115;
              }
              v49 = *(_QWORD *)(v47 + 16);
              v48 = *(_QWORD *)(v47 + 24);
              if (v49 >= v48 >> 1)
              {
                sub_1BDD93E38(v48 > 1, v49 + 1, 1);
                v47 = v115;
              }
              *(_QWORD *)(v47 + 16) = v49 + 1;
              v50 = v47 + 16 * v49;
              *(_QWORD *)(v50 + 32) = v45;
              *(_QWORD *)(v50 + 40) = v46;
              if (v108)
                break;
              v31 = v106;
              v38 = sub_1BDFCFFA8(v43, v4, v5, v106);
              v40 = v39;
              v42 = v41;
              sub_1BDE27EC8(v43, v4, v5);
              v112 = (_QWORD *)v38;
              v113 = v40;
              v114 = v42 & 1;
              if (!--v32)
                goto LABEL_60;
            }
            v31 = v106;
            if ((v5 & 1) == 0)
              goto LABEL_119;
            if (sub_1BE1B2FC0())
              swift_isUniquelyReferenced_nonNull_native();
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52CFE0);
            v51 = (void (*)(uint64_t *, _QWORD))sub_1BE1B2BA0();
            sub_1BE1B3014();
            v51(&v110, 0);
            --v32;
          }
          while (v32);
LABEL_60:
          sub_1BDE27EC8((uint64_t)v112, v113, v114);
          v36 = v115;
          goto LABEL_61;
        }
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
      v31 = v106;
      v32 = sub_1BE1B2FE4();
      if (v32)
        goto LABEL_43;
LABEL_46:
      v36 = MEMORY[0x1E0DEE9D8];
LABEL_61:
      v8 = sub_1BDDBFED0(v36);
      swift_bridgeObjectRelease();
      v52 = sub_1BDDC7F38(v31);
      v6 = 0;
      swift_bridgeObjectRelease();
      v4 = *(_QWORD *)(v52 + 16);
      if (v4)
      {
        v53 = (unint64_t *)(v52 + 40);
        do
        {
          v54 = *(v53 - 1);
          v55 = *v53;
          sub_1BDDB6CA4(v54, *v53);
          sub_1BDDBC6BC(&v110, v54, v55);
          sub_1BDDB796C(v110, v111);
          v53 += 2;
          --v4;
        }
        while (v4);
      }
      swift_bridgeObjectRelease();
      v7 = v104;
      if (!*(_QWORD *)(v8 + 16))
      {
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_67:
  v56 = swift_bridgeObjectRetain();
  v57 = sub_1BDDD4C8C(v56);
  swift_bridgeObjectRelease();
  if (v6)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v59 = 0;
  v99 = v57 + 56;
  v60 = 1 << *(_BYTE *)(v57 + 32);
  v61 = -1;
  if (v60 < 64)
    v61 = ~(-1 << v60);
  v62 = v61 & *(_QWORD *)(v57 + 56);
  v63 = (_QWORD *)(v7 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  v103 = (uint64_t *)(a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  v105 = (unint64_t)(v60 + 63) >> 6;
  v101 = v57;
  while (1)
  {
    if (v62)
    {
      v65 = __clz(__rbit64(v62));
      v66 = (v62 - 1) & v62;
      v67 = v65 | (v59 << 6);
      goto LABEL_92;
    }
    v68 = v59 + 1;
    if (__OFADD__(v59, 1))
      goto LABEL_116;
    if (v68 >= v105)
    {
LABEL_111:
      swift_release();
      return v122;
    }
    v69 = *(_QWORD *)(v99 + 8 * v68);
    ++v59;
    if (!v69)
    {
      v59 = v68 + 1;
      if (v68 + 1 >= v105)
        goto LABEL_111;
      v69 = *(_QWORD *)(v99 + 8 * v59);
      if (!v69)
      {
        v59 = v68 + 2;
        if (v68 + 2 >= v105)
          goto LABEL_111;
        v69 = *(_QWORD *)(v99 + 8 * v59);
        if (!v69)
        {
          v59 = v68 + 3;
          if (v68 + 3 >= v105)
            goto LABEL_111;
          v69 = *(_QWORD *)(v99 + 8 * v59);
          if (!v69)
            break;
        }
      }
    }
LABEL_91:
    v66 = (v69 - 1) & v69;
    v67 = __clz(__rbit64(v69)) + (v59 << 6);
LABEL_92:
    v71 = *(_QWORD *)(*(_QWORD *)(v57 + 48) + 8 * v67);
    v5 = *(_QWORD *)(v71 + 16);
    v4 = *(_QWORD *)(v71 + 24);
    swift_beginAccess();
    v72 = *v103;
    if (!*(_QWORD *)(*v103 + 16))
      goto LABEL_120;
    v109 = v66;
    sub_1BDDB6CA4(v5, v4);
    swift_retain();
    sub_1BDDB6CA4(v5, v4);
    v73 = sub_1BDDB2730(v5, v4, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
    if ((v74 & 1) == 0)
      goto LABEL_121;
    v75 = *(_QWORD *)(*(_QWORD *)(v72 + 56) + 16 * v73);
    swift_retain();
    sub_1BDDB796C(v5, v4);
    if (!v75)
      goto LABEL_122;
    swift_endAccess();
    sub_1BDDB796C(v5, v4);
    swift_beginAccess();
    v5 = *(_QWORD *)(v75 + 16);
    v4 = *(_QWORD *)(v75 + 24);
    v76 = *v63;
    if (*(_QWORD *)(*v63 + 16))
    {
      swift_retain();
      sub_1BDDB6CA4(v5, v4);
      v77 = sub_1BDDB2730(v5, v4, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
      if ((v78 & 1) != 0)
      {
        v79 = *(_QWORD *)(*(_QWORD *)(v76 + 56) + 16 * v77);
        swift_retain();
        sub_1BDDB796C(v5, v4);
        swift_release();
        swift_release();
        if (v79)
        {
          __break(1u);
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }
      }
      else
      {
        sub_1BDDB796C(v5, v4);
        swift_release();
      }
    }
    v107 = v59;
    swift_retain();
    sub_1BDDB6CA4(v5, v4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v112 = (_QWORD *)*v63;
    v81 = (uint64_t)v112;
    v82 = v63;
    *v63 = 0x8000000000000000;
    v84 = sub_1BDDB2730(v5, v4, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
    v85 = *(_QWORD *)(v81 + 16);
    v86 = (v83 & 1) == 0;
    v87 = v85 + v86;
    if (__OFADD__(v85, v86))
      goto LABEL_113;
    v88 = v83;
    if (*(_QWORD *)(v81 + 24) >= v87)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v91 = v112;
        if ((v83 & 1) != 0)
          goto LABEL_72;
      }
      else
      {
        sub_1BDE65630();
        v91 = v112;
        if ((v88 & 1) != 0)
          goto LABEL_72;
      }
    }
    else
    {
      sub_1BDE612E8(v87, isUniquelyReferenced_nonNull_native);
      v89 = sub_1BDDB2730(v5, v4, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
      if ((v88 & 1) != (v90 & 1))
        goto LABEL_123;
      v84 = v89;
      v91 = v112;
      if ((v88 & 1) != 0)
      {
LABEL_72:
        v64 = (_QWORD *)(v91[7] + 16 * v84);
        swift_release();
        *v64 = v75;
        v64[1] = 0;
        goto LABEL_73;
      }
    }
    v91[(v84 >> 6) + 8] |= 1 << v84;
    v92 = (uint64_t *)(v91[6] + 16 * v84);
    *v92 = v5;
    v92[1] = v4;
    v93 = (_QWORD *)(v91[7] + 16 * v84);
    *v93 = v75;
    v93[1] = 0;
    v94 = v91[2];
    v95 = __OFADD__(v94, 1);
    v96 = v94 + 1;
    if (v95)
      goto LABEL_115;
    v91[2] = v96;
    sub_1BDDB6CA4(v5, v4);
LABEL_73:
    v63 = v82;
    *v82 = v91;
    swift_bridgeObjectRelease();
    sub_1BDDB796C(v5, v4);
    swift_endAccess();
    swift_release();
    swift_release();
    v57 = v101;
    v59 = v107;
    v62 = v109;
  }
  v70 = v68 + 4;
  if (v70 >= v105)
    goto LABEL_111;
  v69 = *(_QWORD *)(v99 + 8 * v70);
  if (v69)
  {
    v59 = v70;
    goto LABEL_91;
  }
  while (1)
  {
    v59 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    if (v59 >= v105)
      goto LABEL_111;
    v69 = *(_QWORD *)(v99 + 8 * v59);
    ++v70;
    if (v69)
      goto LABEL_91;
  }
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  swift_retain();
  sub_1BDDB6CA4(v5, v4);
  __break(1u);
LABEL_121:
  sub_1BDDB796C(v5, v4);
LABEL_122:
  __break(1u);
LABEL_123:
  result = sub_1BE1B3680();
  __break(1u);
  return result;
}

uint64_t sub_1BDDD3F9C(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t (*v65)(uint64_t *);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _UNKNOWN **v70;
  uint64_t v71;
  uint64_t v72;

  v63 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v63);
  v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_bridgeObjectRetain();
  v65 = a2;
  v66 = a3;
  v72 = sub_1BDDC6728(v9, a2);
  v71 = a1;
  v10 = swift_bridgeObjectRetain();
  v11 = sub_1BDDC48BC(v10);
  if (!v11[2])
  {
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v72;
  }
  v58 = v4;
  v12 = v3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  result = swift_beginAccess();
  v14 = 0;
  v15 = v11[2];
  v16 = (uint64_t)v59;
  v60 = v12;
  while (1)
  {
    if (v14 >= v15)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v19 = &v11[2 * v14];
    v21 = v19[4];
    v20 = v19[5];
    sub_1BDD9C318(v12, v16, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v22 = *(_QWORD *)(v16 + *(int *)(v63 + 20));
    v23 = *(_QWORD *)(v22 + 16);
    sub_1BDDB6CA4(v21, v20);
    if (v23)
    {
      v24 = sub_1BDDB7F0C(v21, v20);
      if ((v25 & 1) != 0)
        break;
    }
    sub_1BDD9C3E0(v16, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v17 = v21;
    v18 = v20;
LABEL_4:
    ++v14;
    result = sub_1BDDB796C(v17, v18);
    v15 = v11[2];
    if (v14 >= v15)
      goto LABEL_41;
  }
  v61 = v20;
  v62 = v21;
  v64 = v11;
  v26 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 48 * v24);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0(v16, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v26)
  {
LABEL_40:
    v11 = v64;
    v12 = v60;
    v18 = v61;
    v17 = v62;
    goto LABEL_4;
  }
  v27 = type metadata accessor for RetainVisitor();
  v28 = swift_allocObject();
  v29 = MEMORY[0x1E0DEE9D8];
  v30 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
  v31 = sub_1BDDB6CE8(v29);
  *(_QWORD *)(v28 + 16) = v30;
  *(_QWORD *)(v28 + 24) = v31;
  v69 = v27;
  v70 = &off_1E7755DD0;
  v67 = v28;
  v32 = *(void (**)(uint64_t *))(*(_QWORD *)v26 + 120);
  swift_retain();
  v32(&v67);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  swift_release();
  swift_beginAccess();
  v33 = *(_QWORD *)(v28 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v35 = v33 + 64;
  v34 = *(_QWORD *)(v33 + 64);
  v36 = 1 << *(_BYTE *)(v33 + 32);
  result = swift_bridgeObjectRelease();
  v37 = 0;
  if (v36 < 64)
    v38 = ~(-1 << v36);
  else
    v38 = -1;
  v39 = v38 & v34;
  v40 = (unint64_t)(v36 + 63) >> 6;
  while (v39)
  {
    v43 = __clz(__rbit64(v39));
    v39 &= v39 - 1;
    v44 = v43 | (v37 << 6);
LABEL_33:
    v48 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * v44);
    v50 = *v48;
    v49 = v48[1];
    sub_1BDDB6CA4(*v48, v49);
    sub_1BDDB6CA4(v50, v49);
    v51 = sub_1BDDBC6BC(&v67, v50, v49);
    sub_1BDDB796C(v67, v68);
    if ((v51 & 1) != 0)
    {
      v67 = v50;
      v68 = v49;
      if ((v65(&v67) & 1) != 0)
      {
        sub_1BDDB6CA4(v50, v49);
        sub_1BDDBC6BC(&v67, v50, v49);
        sub_1BDDB796C(v67, v68);
        sub_1BDDB6CA4(v50, v49);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = sub_1BDE0667C(0, v64[2] + 1, 1, v64);
        v53 = v64[2];
        v52 = v64[3];
        v54 = v53 + 1;
        if (v53 >= v52 >> 1)
        {
          v57 = v53 + 1;
          v55 = sub_1BDE0667C((_QWORD *)(v52 > 1), v53 + 1, 1, v64);
          v54 = v57;
          v64 = v55;
        }
        v41 = v64;
        v64[2] = v54;
        v42 = &v41[2 * v53];
        v42[4] = v50;
        v42[5] = v49;
      }
    }
    result = sub_1BDDB796C(v50, v49);
  }
  v45 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v45 >= v40)
    goto LABEL_39;
  v46 = *(_QWORD *)(v35 + 8 * v45);
  ++v37;
  if (v46)
    goto LABEL_32;
  v37 = v45 + 1;
  if (v45 + 1 >= v40)
    goto LABEL_39;
  v46 = *(_QWORD *)(v35 + 8 * v37);
  if (v46)
    goto LABEL_32;
  v37 = v45 + 2;
  if (v45 + 2 >= v40)
    goto LABEL_39;
  v46 = *(_QWORD *)(v35 + 8 * v37);
  if (v46)
    goto LABEL_32;
  v37 = v45 + 3;
  if (v45 + 3 >= v40)
    goto LABEL_39;
  v46 = *(_QWORD *)(v35 + 8 * v37);
  if (v46)
  {
LABEL_32:
    v39 = (v46 - 1) & v46;
    v44 = __clz(__rbit64(v46)) + (v37 << 6);
    goto LABEL_33;
  }
  v47 = v45 + 4;
  if (v47 >= v40)
  {
LABEL_39:
    swift_release();
    v16 = (uint64_t)v59;
    goto LABEL_40;
  }
  v46 = *(_QWORD *)(v35 + 8 * v47);
  if (v46)
  {
    v37 = v47;
    goto LABEL_32;
  }
  while (1)
  {
    v37 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v37 >= v40)
      goto LABEL_39;
    v46 = *(_QWORD *)(v35 + 8 * v37);
    ++v47;
    if (v46)
      goto LABEL_32;
  }
LABEL_44:
  __break(1u);
  return result;
}

BOOL sub_1BDDD44BC(__int128 *a1)
{
  __int128 v2;

  v2 = *a1;
  return (sub_1BDE58E80((uint64_t *)&v2) & 1) == 0;
}

uint64_t sub_1BDDD44FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  char v49[16];
  uint64_t *v50;
  uint64_t v51[2];
  uint64_t v52;
  uint64_t v53;

  v11 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a4;
  v52 = MEMORY[0x1E0DEE9E8];
  v50 = &v53;
  v14 = sub_1BDDD3F9C(a3, (uint64_t (*)(uint64_t *))sub_1BDDD44BC, (uint64_t)v49);
  v40 = v5;
  if (v5)
    return swift_bridgeObjectRelease();
  v16 = v14;
  v17 = *(_QWORD *)(v14 + 56);
  v41 = a1;
  v42 = v14 + 56;
  v18 = 1 << *(_BYTE *)(v14 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v46 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  v21 = 0;
  v43 = (unint64_t)(v18 + 63) >> 6;
  v44 = v16;
  v45 = v11;
  while (1)
  {
    if (v20)
    {
      v47 = (v20 - 1) & v20;
      v48 = v21;
      v24 = __clz(__rbit64(v20)) | (v21 << 6);
      goto LABEL_27;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v25 >= v43)
      goto LABEL_33;
    v26 = *(_QWORD *)(v42 + 8 * v25);
    v27 = v21 + 1;
    if (!v26)
    {
      v27 = v21 + 2;
      if (v21 + 2 >= v43)
        goto LABEL_33;
      v26 = *(_QWORD *)(v42 + 8 * v27);
      if (!v26)
      {
        v27 = v21 + 3;
        if (v21 + 3 >= v43)
          goto LABEL_33;
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          v27 = v21 + 4;
          if (v21 + 4 >= v43)
            goto LABEL_33;
          v26 = *(_QWORD *)(v42 + 8 * v27);
          if (!v26)
            break;
        }
      }
    }
LABEL_26:
    v47 = (v26 - 1) & v26;
    v48 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_27:
    v29 = (unint64_t *)(*(_QWORD *)(v16 + 48) + 16 * v24);
    v20 = *v29;
    v6 = v29[1];
    sub_1BDD9C318(v46, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v30 = *(_QWORD *)&v13[*(int *)(v11 + 20)];
    v31 = *(_QWORD *)(v30 + 16);
    sub_1BDDB6CA4(v20, v6);
    if (!v31)
      goto LABEL_37;
    a1 = (uint64_t)v13;
    sub_1BDDB6CA4(v20, v6);
    v32 = sub_1BDDB7F0C(v20, v6);
    if ((v33 & 1) == 0)
      goto LABEL_36;
    v34 = (uint64_t *)(*(_QWORD *)(v30 + 56) + 48 * v32);
    v35 = *v34;
    v37 = v34[2];
    v36 = v34[3];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDB796C(v20, v6);
    result = sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    if (!v35)
      goto LABEL_38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if ((sub_1BDEED578(v36, a2) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v45;
LABEL_7:
      sub_1BDDBC6BC(v51, v20, v6);
      v22 = v51[0];
      v23 = v51[1];
      goto LABEL_8;
    }
    v38 = sub_1BDEED578(v37, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v45;
    if ((v38 & 1) != 0)
      goto LABEL_7;
    v22 = v20;
    v23 = v6;
LABEL_8:
    sub_1BDDB796C(v22, v23);
    v16 = v44;
    v20 = v47;
    v21 = v48;
  }
  v28 = v21 + 5;
  if (v21 + 5 >= v43)
  {
LABEL_33:
    swift_release();
    return v52;
  }
  v26 = *(_QWORD *)(v42 + 8 * v28);
  if (v26)
  {
    v27 = v21 + 5;
    goto LABEL_26;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v43)
      goto LABEL_33;
    v26 = *(_QWORD *)(v42 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_26;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  sub_1BDDB796C(v20, v6);
  v13 = (char *)a1;
LABEL_37:
  result = sub_1BDD9C3E0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1BDDD48E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void (*v28)(_QWORD *);
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD v38[5];
  uint64_t v39;

  v4 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6ED6E8);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = MEMORY[0x1E0DEE9E8];
  v30[1] = v7 + 16;
  v32 = v7;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = *(_QWORD *)(a1 + 56);
  v36 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v12 = a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_retain();
  swift_bridgeObjectRetain();
  v39 = v12;
  result = swift_beginAccess();
  v14 = 0;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v34 = v4;
  v35 = a1;
  v33 = v6;
  if (v11)
    goto LABEL_6;
LABEL_7:
  v17 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v17 < v37)
    {
      v18 = *(_QWORD *)(v36 + 8 * v17);
      ++v14;
      if (v18)
        goto LABEL_22;
      v14 = v17 + 1;
      if (v17 + 1 >= v37)
        goto LABEL_29;
      v18 = *(_QWORD *)(v36 + 8 * v14);
      if (v18)
        goto LABEL_22;
      v14 = v17 + 2;
      if (v17 + 2 >= v37)
        goto LABEL_29;
      v18 = *(_QWORD *)(v36 + 8 * v14);
      if (v18)
        goto LABEL_22;
      v14 = v17 + 3;
      if (v17 + 3 >= v37)
        goto LABEL_29;
      v18 = *(_QWORD *)(v36 + 8 * v14);
      if (v18)
      {
LABEL_22:
        v11 = (v18 - 1) & v18;
        for (i = __clz(__rbit64(v18)) + (v14 << 6); ; i = v15 | (v14 << 6))
        {
          v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
          v21 = *v20;
          v22 = v20[1];
          sub_1BDD9C318(v39, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
          v23 = *(_QWORD *)&v6[*(int *)(v4 + 20)];
          v24 = *(_QWORD *)(v23 + 16);
          sub_1BDDB6CA4(v21, v22);
          if (v24 && (v25 = sub_1BDDB7F0C(v21, v22), (v26 & 1) != 0))
          {
            v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 48 * v25);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1BDD9C3E0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v27)
            {
              v38[3] = v31;
              v38[4] = &off_1E77592C8;
              v38[0] = v32;
              v28 = *(void (**)(_QWORD *))(*(_QWORD *)v27 + 120);
              swift_retain();
              v28(v38);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
              swift_release();
            }
            result = sub_1BDDB796C(v21, v22);
            v4 = v34;
            a1 = v35;
            v6 = v33;
            if (!v11)
              goto LABEL_7;
          }
          else
          {
            sub_1BDD9C3E0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
            result = sub_1BDDB796C(v21, v22);
            if (!v11)
              goto LABEL_7;
          }
LABEL_6:
          v15 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
        }
      }
      v19 = v17 + 4;
      if (v19 < v37)
      {
        v18 = *(_QWORD *)(v36 + 8 * v19);
        if (v18)
        {
          v14 = v19;
          goto LABEL_22;
        }
        while (1)
        {
          v14 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_31;
          if (v14 >= v37)
            break;
          v18 = *(_QWORD *)(v36 + 8 * v14);
          ++v19;
          if (v18)
            goto LABEL_22;
        }
      }
    }
LABEL_29:
    swift_release();
    swift_beginAccess();
    v29 = *(_QWORD *)(v32 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    return v29;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1BDDD4C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(_QWORD *);
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  _QWORD v68[5];
  uint64_t v69;

  v3 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = MEMORY[0x1E0DEE9E8];
  v6 = *(_QWORD *)(a1 + 56);
  v58 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & v6;
  v10 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  swift_bridgeObjectRetain();
  v61 = v10;
  result = swift_beginAccess();
  v13 = v9;
  v14 = 0;
  v59 = (unint64_t)(v7 + 63) >> 6;
  v56 = a1;
  v57 = v3;
  v60 = v5;
  while (v13)
  {
    v62 = (v13 - 1) & v13;
    v63 = v14;
    v15 = __clz(__rbit64(v13)) | (v14 << 6);
LABEL_25:
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
    v22 = *v20;
    v21 = v20[1];
    sub_1BDD9C318(v61, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    v23 = *(_QWORD *)&v5[*(int *)(v3 + 20)];
    v24 = *(_QWORD *)(v23 + 16);
    sub_1BDDB6CA4(v22, v21);
    if (v24 && (v25 = sub_1BDDB7F0C(v22, v21), (v26 & 1) != 0))
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 48 * v25);
      v67 = v21;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDD9C3E0((uint64_t)v60, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
      swift_bridgeObjectRelease();
      v5 = v60;
      v3 = v57;
      swift_bridgeObjectRelease();
      v21 = v67;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v27)
      {
        v64 = v22;
        v28 = type metadata accessor for RetainVisitor();
        v29 = swift_allocObject();
        v30 = MEMORY[0x1E0DEE9D8];
        v31 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
        v32 = sub_1BDDB6CE8(v30);
        *(_QWORD *)(v29 + 16) = v31;
        *(_QWORD *)(v29 + 24) = v32;
        v68[3] = v28;
        v68[4] = &off_1E7755DD0;
        v68[0] = v29;
        v33 = *(void (**)(_QWORD *))(*(_QWORD *)v27 + 120);
        swift_retain();
        v33(v68);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
        swift_release();
        swift_beginAccess();
        v34 = *(_QWORD *)(v29 + 24);
        swift_bridgeObjectRetain();
        v21 = v67;
        result = swift_release();
        v35 = 0;
        v36 = *(_QWORD *)(v34 + 64);
        v65 = v34 + 64;
        v37 = 1 << *(_BYTE *)(v34 + 32);
        if (v37 < 64)
          v38 = ~(-1 << v37);
        else
          v38 = -1;
        v39 = v38 & v36;
        v66 = (unint64_t)(v37 + 63) >> 6;
        if ((v38 & v36) != 0)
        {
          do
          {
            while (1)
            {
              v40 = __clz(__rbit64(v39));
              v39 &= v39 - 1;
              v41 = v40 | (v35 << 6);
LABEL_52:
              v45 = 16 * v41;
              v46 = (uint64_t *)(*(_QWORD *)(v34 + 48) + v45);
              v47 = *v46;
              v48 = v46[1];
              v49 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + v45);
              swift_beginAccess();
              v50 = *v11;
              v51 = *(_QWORD *)(*v11 + 16);
              sub_1BDDB6CA4(v47, v48);
              swift_retain();
              if (v51)
              {
                v52 = sub_1BDDB2730(v47, v48, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], sub_1BDE5E2BC);
                if ((v53 & 1) != 0)
                {
                  v54 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 16 * v52);
                  swift_retain();
                  if (v54)
                    break;
                }
              }
              swift_endAccess();
              swift_retain();
              sub_1BDE69020(v68, v49);
              sub_1BDDB796C(v47, v48);
              swift_release();
              result = swift_release();
              v21 = v67;
              if (!v39)
                goto LABEL_35;
            }
            swift_endAccess();
            swift_release();
            swift_release();
            result = sub_1BDDB796C(v47, v48);
            v21 = v67;
          }
          while (v39);
        }
LABEL_35:
        v42 = v35 + 1;
        if (__OFADD__(v35, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
          goto LABEL_64;
        }
        if (v42 >= v66)
        {
          swift_release();
          a1 = v56;
          v3 = v57;
          v5 = v60;
          v22 = v64;
        }
        else
        {
          v22 = v64;
          v43 = *(_QWORD *)(v65 + 8 * v42);
          ++v35;
          if (v43)
            goto LABEL_51;
          v35 = v42 + 1;
          if (v42 + 1 >= v66)
            goto LABEL_58;
          v43 = *(_QWORD *)(v65 + 8 * v35);
          if (v43)
            goto LABEL_51;
          v35 = v42 + 2;
          if (v42 + 2 >= v66)
            goto LABEL_58;
          v43 = *(_QWORD *)(v65 + 8 * v35);
          if (v43)
            goto LABEL_51;
          v35 = v42 + 3;
          if (v42 + 3 >= v66)
          {
LABEL_58:
            swift_release();
            a1 = v56;
          }
          else
          {
            v43 = *(_QWORD *)(v65 + 8 * v35);
            if (v43)
              goto LABEL_51;
            v44 = v42 + 4;
            a1 = v56;
            if (v44 < v66)
            {
              v43 = *(_QWORD *)(v65 + 8 * v44);
              if (v43)
              {
                v35 = v44;
LABEL_51:
                v39 = (v43 - 1) & v43;
                v41 = __clz(__rbit64(v43)) + (v35 << 6);
                goto LABEL_52;
              }
              while (1)
              {
                v35 = v44 + 1;
                if (__OFADD__(v44, 1))
                  goto LABEL_63;
                if (v35 >= v66)
                  goto LABEL_58;
                v43 = *(_QWORD *)(v65 + 8 * v35);
                ++v44;
                if (v43)
                  goto LABEL_51;
              }
            }
            swift_release();
          }
          v3 = v57;
          v5 = v60;
        }
      }
    }
    else
    {
      sub_1BDD9C3E0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
    }
    result = sub_1BDDB796C(v22, v21);
    v13 = v62;
    v14 = v63;
  }
  v16 = v14 + 1;
  if (__OFADD__(v14, 1))
    goto LABEL_62;
  if (v16 >= v59)
  {
LABEL_60:
    swift_release();
    return v69;
  }
  v17 = *(_QWORD *)(v58 + 8 * v16);
  v18 = v14 + 1;
  if (v17)
    goto LABEL_24;
  v18 = v14 + 2;
  if (v14 + 2 >= v59)
    goto LABEL_60;
  v17 = *(_QWORD *)(v58 + 8 * v18);
  if (v17)
    goto LABEL_24;
  v18 = v14 + 3;
  if (v14 + 3 >= v59)
    goto LABEL_60;
  v17 = *(_QWORD *)(v58 + 8 * v18);
  if (v17)
    goto LABEL_24;
  v18 = v14 + 4;
  if (v14 + 4 >= v59)
    goto LABEL_60;
  v17 = *(_QWORD *)(v58 + 8 * v18);
  if (v17)
  {
LABEL_24:
    v62 = (v17 - 1) & v17;
    v63 = v18;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
    goto LABEL_25;
  }
  v19 = v14 + 5;
  if (v14 + 5 >= v59)
    goto LABEL_60;
  v17 = *(_QWORD *)(v58 + 8 * v19);
  if (v17)
  {
    v18 = v14 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v59)
      goto LABEL_60;
    v17 = *(_QWORD *)(v58 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_24;
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_1BDDD52EC()
{
  return sub_1BDD8422C(&qword_1ED6F2E38, type metadata accessor for Proto_CRDT, (uint64_t)&unk_1BE1C650C);
}

void sub_1BDDD5318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1BDDD2FB0(a1, a2, a3, &qword_1ED6F2DF8, (void (*)(uint64_t))type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
}

uint64_t sub_1BDDD532C(uint64_t a1)
{
  return sub_1BDD8CC18(a1, (void (*)(_QWORD))type metadata accessor for Proto_CRDT._StorageClass, &OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf, &qword_1ED6F2E08);
}

uint64_t sub_1BDDD5350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = v0;
  if (qword_1ED6F4510 != -1)
    swift_once();
  v2 = v0 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 8);
  v7[0] = MEMORY[0x1E0DEE9E0];
  v7[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1BDDAAAEC((uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1BDD9C3E0(v0 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
  v5 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1BDDD54A8()
{
  return sub_1BDD93094((void (*)(void))sub_1BDDD5350);
}

uint64_t sub_1BDDD54B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v5 = sub_1BE1B1F58();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC9Coherence10CapsuleRef_caches;
  *(_QWORD *)(v2 + v12) = sub_1BDDC8800(MEMORY[0x1E0DEE9D8]);
  v13 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1BDD9C318(v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  sub_1BDDA2E8C((uint64_t)v11, v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(_QWORD))type metadata accessor for PartiallyOrderedReferenceMap);
  v14 = (_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated);
  swift_beginAccess();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated) = *v14;
  v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  v17 = *v15;
  v16 = v15[1];
  v18 = (_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  *v18 = v17;
  v18[1] = v16;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState) = a2;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = *(_QWORD *)(a1
                                                                                        + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration);
  v19 = (_QWORD *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  swift_beginAccess();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets) = *v19;
  v20 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v20, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID, v8, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1BDDD56E0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for PartiallyOrderedReferenceMap();
  if (v1 <= 0x3F)
  {
    result = sub_1BE1B1F58();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CapsuleRef()
{
  uint64_t result;

  result = qword_1ED6F23E0;
  if (!qword_1ED6F23E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BDDD57D8(uint64_t a1)
{
  uint64_t result;

  result = sub_1BDD8422C(qword_1ED6ED660, (uint64_t (*)(uint64_t))type metadata accessor for CapsuleRef, (uint64_t)&unk_1BE1B9224);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1BDDD5814@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];

  v2 = v1;
  v4 = sub_1BE1B1F58();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState;
  v9 = qword_1ED6F3700;
  swift_retain();
  if (v9 != -1)
    swift_once();
  type metadata accessor for Replica();
  sub_1BE1B2E40();
  swift_release();
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + v8) + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter);
  *(_QWORD *)(a1 + *(int *)(type metadata accessor for Timestamp(0) + 20)) = v10;
  swift_beginAccess();
  sub_1BDDCB81C(a1);
  result = swift_endAccess();
  v12 = *(_QWORD *)(v2 + v8);
  v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v12 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = v15;
    sub_1BE1B1F4C();
    v16 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
    swift_beginAccess();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v16, v7, v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t *sub_1BDDD59DC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *result;
  v5 = result[1];
  if (*(_QWORD *)(v5 + 16) || *(_QWORD *)(v4 + 16))
  {
    if (qword_1ED6F4510 != -1)
      result = (uint64_t *)swift_once();
    MEMORY[0x1E0C80A78](result);
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    swift_beginAccess();
    sub_1BDD8D114(a2);
    swift_endAccess();
    if (*(_QWORD *)(v8 + 16))
    {
      swift_beginAccess();
      sub_1BDDB2D90(v6, v7, v8);
      swift_endAccess();
      swift_beginAccess();
      sub_1BDD8D52C(v6, v7, v8);
      swift_endAccess();
      *(_QWORD *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = v6;
    }
    swift_bridgeObjectRelease();
    v6 = v4;
    v7 = v5;
    swift_retain();
    sub_1BDDAAAEC((uint64_t)&v6);
    return (uint64_t *)swift_release();
  }
  return result;
}

BOOL sub_1BDDD5BB8(uint64_t a1, uint64_t (*a2)(uint64_t *), unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t (*v21)(uint64_t *);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1BDD972BC(a1) & 1) != 0)
  {
    v21 = a2;
    v22 = a3;
    v23 = a4;
    if (qword_1ED6F4510 != -1)
      swift_once();
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    v13 = v24;
    v14 = v25;
    v15 = v26;
    v16 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v16 + 8) + 16))
    {
      a1 = sub_1BDE562A4(0);
      sub_1BDE5861C(v13, v14, v15, 0);
    }
    else
    {
      swift_retain();
    }
    v17 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v17 + 8) + 16))
      sub_1BDE5861C(v13, v14, v15, 0);
    swift_bridgeObjectRelease();
    a3 = v22;
    a4 = v23;
    a2 = v21;
  }
  else
  {
    swift_retain();
  }
  v18 = qword_1ED6F3700;
  swift_retain();
  swift_retain();
  if (v18 != -1)
    swift_once();
  sub_1BE1B2E40();
  swift_release();
  v19 = sub_1BDD93800(a1, (uint64_t)v12, a2, a3, a4);
  swift_release();
  sub_1BDD86E30((uint64_t)v12, &qword_1ED6F43C0);
  swift_release();
  return v19;
}

uint64_t static CRStruct_2.fieldKeys.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(a2 + 8) + 48))(&v7);
  v6 = v7;
  v2 = v8;
  v3 = v9;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2898);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BE1B61C0;
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 48) = v2;
  *(_QWORD *)(v4 + 56) = v3;
  swift_release();
  swift_release();
  return v4;
}

uint64_t CRStruct_2.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_2.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_2.encodeFields(to:));
}

uint64_t CRStruct_2.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_2.decode(fields:), a4);
}

uint64_t static CRStruct_1.fieldKeys.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F2898);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BE1B61B0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 32))(a1);
  v7 = v6;
  swift_release();
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  return v4;
}

uint64_t CRStruct_1.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDDBE25C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_1.encode(to:));
}

{
  return sub_1BDDC122C(a1, a2, a3, CRStruct_1.encodeFields(to:));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_1.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v3 = v1;
  v5 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v3, v5);
  v9 = v8;
  if (*((_QWORD *)fields._rawValue + 2))
  {
    v10 = v7;
    swift_bridgeObjectRetain();
    v11 = sub_1BDDB271C(v10, v9);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(*((_QWORD *)fields._rawValue + 7) + 8 * v11);
      swift_retain();
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 8);
      swift_retain();
      swift_retain();
      v15(v13, AssociatedTypeWitness, v14);
      if (v16)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
      }
      else
      {
        swift_setAtWritableKeyPath();
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t CRStruct_1.merge(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_BYTE *, _QWORD);
  _QWORD v16[2];
  _BYTE v17[32];

  v16[0] = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)v16 - v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(a2, v4);
  v16[1] = v9;
  swift_retain();
  swift_getAtKeyPath();
  v10 = (void (*)(_BYTE *, _QWORD))swift_modifyAtWritableKeyPath();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v8, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  v10(v17, 0);
  swift_release();
  v12 = *(_QWORD *)(v4 + 8);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(a2, v12);
  v14 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 40))(v17, a2, v12);
  sub_1BDDC8334(v13);
  swift_bridgeObjectRelease();
  v14(v17, 0);
  (*(void (**)(uint64_t, uint64_t))(v12 + 64))(a2, v12);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CRStruct_1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDD9C464(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))CRStruct_1.decode(fields:), a4);
}

Swift::Bool __swiftcall CRStruct_1.needToFinalizeTimestamps()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;

  v2 = v0;
  v3 = *(_QWORD *)(v1 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 48))(AssociatedTypeWitness);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return v2 & 1;
}

uint64_t CRStruct_1.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  _QWORD v14[2];

  v14[1] = a1;
  v4 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)v14 - v7;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(a2, v4);
  v11 = v10;
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1BDDA7E18((uint64_t)v8, v9, v11, AssociatedTypeWitness, *(_QWORD *)(*(_QWORD *)(AssociatedConformanceWitness + 16) + 8));
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

uint64_t type metadata accessor for CRRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CRRegister);
}

void sub_1BDDD65F0()
{
  unint64_t v0;

  sub_1BDDC71DC();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

ValueMetadata *type metadata accessor for AnyCRValue()
{
  return &type metadata for AnyCRValue;
}

uint64_t sub_1BDDD669C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BE1B203C();
    result = MEMORY[0x1C3B7DF54](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BDDD66DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6F2DB8;
  if (!qword_1ED6F2DB8)
  {
    v1 = sub_1BE1B1F58();
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6F2DB8);
  }
  return result;
}

void UUID.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v3 = v2;
  v27 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1BE1B1F58();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v15, (uint64_t)v10);
  v16 = type metadata accessor for Proto_Value(0);
  LODWORD(v15) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v10, 1, v16);
  sub_1BDD86E30((uint64_t)v10, &qword_1ED6F3770);
  if ((_DWORD)v15 == 1)
  {
    sub_1BDDFCAFC();
    v3 = (void *)swift_allocError();
    *(_QWORD *)v17 = 0xD000000000000017;
    *(_QWORD *)(v17 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v17 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDDC9C24((uint64_t)v14);
    if (!v2)
    {
      swift_release();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v27, v14, v11);
      return;
    }
  }
  v18 = swift_retain();
  CRKeyPath.init(from:)(v18, &v25);
  v19 = v25;
  v20 = v26;
  v23 = v25;
  v24 = v26;
  CRKeyPath.uuid.getter();
  sub_1BDDB796C(v19, v20);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) == 1)
  {
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3CD0);
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v21 = 0xD000000000000016;
    *(_QWORD *)(v21 + 8) = 0x80000001BE1CD410;
    *(_BYTE *)(v21 + 16) = 0;
    swift_willThrow();
    swift_release();

  }
  else
  {
    swift_release();

    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v27, v7, v11);
  }
}

uint64_t sub_1BDDD6A0C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 ^= *a2;
  a1[1] = a2[1] ^ v2;
  return sub_1BE1B1F34();
}

uint64_t sub_1BDDD6AB4()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v26 = sub_1BE1B1F40();
  v27 = v0;
  v28 = v1;
  v29 = v2;
  v30 = v3;
  v31 = v4;
  v32 = v5;
  v33 = v6;
  v34 = v7;
  v17 = sub_1BE1B1F40();
  v18 = v8;
  v19 = v9;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v23 = v13;
  v24 = v14;
  v25 = v15;
  return sub_1BDDD6A0C(&v17, &v26);
}

void sub_1BDDD6C24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UUID.init(from:)(a1, a2);
}

uint64_t Date.init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDDD2EF8(v5, (uint64_t)v4);
  v6 = type metadata accessor for Proto_Value(0);
  LODWORD(v5) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6);
  sub_1BDD86E30((uint64_t)v4, &qword_1ED6F3770);
  if ((_DWORD)v5 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v7 = 0xD000000000000017;
    *(_QWORD *)(v7 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v7 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    sub_1BDDCA078();
  }
  return swift_release();
}

uint64_t sub_1BDDD6D98(uint64_t a1)
{
  return Date.init(from:)(a1);
}

unint64_t sub_1BDDD6DAC()
{
  unint64_t result;

  result = qword_1ED6F2DD0;
  if (!qword_1ED6F2DD0)
  {
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB0310], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ED6F2DD0);
  }
  return result;
}

uint64_t sub_1BDDD6DF0(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_1BE1B1CAC();
      swift_allocObject();
      sub_1BE1B1CA0();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1BE1B1E2C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1BDDD6E84(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_1BDDC439C(__src, &__src[a2]);
  sub_1BE1B1CAC();
  swift_allocObject();
  sub_1BE1B1C64();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_1BE1B1E2C();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void sub_1BDDD6F30(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1BDDD6F7C()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1BDDD6FB0 + dword_1BDE0B264[v0 >> 62]))();
}

uint64_t sub_1BDDD6FC0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1BDDD7178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_1BDDB79B0((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1BDDD724C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BDDD7254(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_1BDDD7254(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1BDDD7274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, char *);
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v2 = sub_1BE1B1DF0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v12 - v7;
  v9 = *(void (**)(char *, char *))(a1 + 32);
  sub_1BE1B1DD8();
  sub_1BE1B1DD8();
  v9(v8, v6);
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  return ((uint64_t (*)(char *, uint64_t))v10)(v8, v2);
}

void sub_1BDDD73AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDD75F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7753758, MEMORY[0x1E0DE42D0]);
}

void sub_1BDDD76A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__emplace_unique_key_args<TopoSubstring const*,std::piecewise_construct_t const&,std::tuple<TopoSubstring const* const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1BDDD79C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BDDD7A84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDD7B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BDDD7C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CRTTMergeableStringIndex;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1BDDD7DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BDDD7F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDD7FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDD81EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BDDD82C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id TopoID::toString(TopoID *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", this);
  objc_msgSend(v3, "CRTTShortDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("%@.%d,%d"), v4, this->replica.index, this->clock);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1BDDD835C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDD8610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDD8868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *removeDirectToSinkEdges(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v1 = result[8];
  v2 = v1 - result[7];
  if ((unint64_t)v2 >= 9)
  {
    v3 = result;
    v4 = 0;
    v5 = v2 >> 3;
    do
    {
      v6 = v3[7] + 8 * v4;
      v7 = *(_DWORD *)(*(_QWORD *)v6 + 80);
      if (v7 < 2)
      {
        ++v4;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)v6 + 80) = v7 - 1;
        v8 = v1 - (v6 + 8);
        if (v1 != v6 + 8)
          result = memmove((void *)v6, (const void *)(v6 + 8), v1 - (v6 + 8));
        v1 = v6 + v8;
        v3[8] = v6 + v8;
        --v5;
      }
    }
    while (v4 < v5);
  }
  return result;
}

uint64_t minimumPermenantID@<X0>(uint64_t result@<X0>, TopoID *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  TopoID *v5;
  TopoID v6;
  TopoID v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a2->replica.index)
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    v4 = *(_QWORD *)(result + 16);
  }
  else if (*(_DWORD *)(result + 16))
  {
    *(_OWORD *)a3 = *(_OWORD *)a2->replica.uuid;
    v4 = *(_QWORD *)&a2->replica.index;
  }
  else
  {
    v7 = *(TopoID *)result;
    v6 = *a2;
    result = TopoID::operator<((uint64_t)&v7, (uint64_t)&v6);
    if ((_DWORD)result)
      v5 = &v7;
    else
      v5 = &v6;
    *(_OWORD *)a3 = *(_OWORD *)v5->replica.uuid;
    v4 = *(_QWORD *)&v5->replica.index;
  }
  *(_QWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t TopoID::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a2 + 20);
  if (v2 < v3)
    return 1;
  if (v2 != v3)
    return 0;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a2 + 16);
  if (v5 == v6)
    return uuid_compare((const unsigned __int8 *)a1, (const unsigned __int8 *)a2) == -1;
  else
    return v5 < v6;
}

void minIdPath(__int128 *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  void (**v4)(id, _OWORD *);
  unsigned int v5;
  unsigned int v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  float v40;
  __n128 *v41;
  __n128 v42;
  void *v43;
  __int128 *v44;
  unint64_t v45;
  __n128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  float v58;
  void *__p;
  char *v60;
  char *v61;
  __int128 v62;
  unsigned int v63;
  unsigned int v64;
  TopoID v65;
  TopoID v66;
  TopoID v67;
  TopoID v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  TopoID v77;
  TopoID v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v79 = *a1;
  v6 = *((_DWORD *)a1 + 4);
  v5 = *((_DWORD *)a1 + 5);
  __p = 0;
  v60 = 0;
  v61 = 0;
  v56 = 0u;
  v57 = 0u;
  v58 = 1.0;
  v8 = (_QWORD *)a1 + 7;
  v7 = (char *)*((_QWORD *)a1 + 7);
  v9 = (char *)*((_QWORD *)a1 + 8);
  if (v9 == v7)
  {
    v10 = 0;
LABEL_68:
    if (v4)
      goto LABEL_69;
    goto LABEL_71;
  }
  v53 = (char **)(a1 + 4);
  v10 = 0;
  while (1)
  {
    if ((unint64_t)(v9 - v7) >= 9)
    {
      v11 = a1;
      v12 = v8;
      removeDirectToSinkEdges(v11);
      v8 = v12;
      v9 = *v53;
      v7 = (char *)*v12;
    }
    v13 = v9 - v7;
    if (v13 == 8)
      break;
    v60 = (char *)__p;
    v14 = v8;
    std::vector<std::pair<minIdPathData,TopoSubstring *>>::reserve(&__p, v13 >> 3);
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::clear(&v56);
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>((uint64_t)&v56, vcvtps_u32_f32((float)(unint64_t)((uint64_t)&(*v53)[-*v14] >> 3) / v58));
    v54 = v14;
    v15 = (char *)*v14;
    v16 = *v53;
    while (v15 != v16)
    {
      *(_QWORD *)&v69 = 0;
      *(_QWORD *)&v69 = *(_QWORD *)v15;
      *(_QWORD *)&v74 = &v69;
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)&v56, &v69, (uint64_t)&std::piecewise_construct, (_QWORD **)&v74)[3] = 1;
      TopoReplica::TopoReplica((TopoReplica *)&v71, 0, 0);
      DWORD1(v72) = 0;
      v17 = v69;
      *((_QWORD *)&v72 + 1) = v69;
      v73 = 0;
      v76 = 0;
      v74 = v71;
      v75 = v72;
      v18 = v60;
      if (v60 >= v61)
      {
        v22 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)__p) >> 4);
        v23 = v22 + 1;
        if (v22 + 1 > 0x555555555555555)
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v61 - (_BYTE *)__p) >> 4) > v23)
          v23 = 0x5555555555555556 * ((v61 - (_BYTE *)__p) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v61 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v24 = 0x555555555555555;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>((uint64_t)&v61, v24);
        else
          v25 = 0;
        v26 = &v25[48 * v22];
        *(_OWORD *)v26 = v74;
        *((_OWORD *)v26 + 1) = v75;
        *((_QWORD *)v26 + 4) = v76;
        *((_QWORD *)v26 + 5) = v17;
        v28 = (char *)__p;
        v27 = v60;
        v29 = v26;
        if (v60 != __p)
        {
          do
          {
            v30 = *((_OWORD *)v27 - 3);
            v31 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v29 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v29 - 1) = v31;
            *((_OWORD *)v29 - 3) = v30;
            v29 -= 48;
            v27 -= 48;
          }
          while (v27 != v28);
          v27 = v28;
        }
        v21 = v26 + 48;
        __p = v29;
        v60 = v26 + 48;
        v61 = &v25[48 * v24];
        if (v27)
          operator delete(v27);
      }
      else
      {
        v19 = v72;
        v20 = v73;
        *(_OWORD *)v60 = v71;
        *((_OWORD *)v18 + 1) = v19;
        *((_QWORD *)v18 + 4) = v20;
        *((_QWORD *)v18 + 5) = v17;
        v21 = v18 + 48;
      }
      v60 = v21;
      v15 += 8;
    }
    do
    {
      while (1)
      {
        v74 = 0u;
        v75 = 0u;
        LODWORD(v76) = 1065353216;
        v32 = (_QWORD *)v57;
        if ((_QWORD)v57)
        {
          do
          {
            v33 = v32[3];
            v55 = v32[2];
            if (v33 >= *(unsigned int *)(v55 + 80))
            {
              minIdPath(&v71);
              if (v60 != __p)
              {
                v34 = 0;
                if ((unint64_t)((v60 - (_BYTE *)__p) / 48) <= 1)
                  v35 = 1;
                else
                  v35 = (v60 - (_BYTE *)__p) / 48;
                do
                {
                  if (*(_QWORD *)((char *)__p + v34 + 24) == v55 && !uuid_is_null((const unsigned __int8 *)__p + v34))
                  {
                    *(_OWORD *)v68.replica.uuid = v71;
                    *(_QWORD *)&v68.replica.index = v72;
                    v67 = *(TopoID *)((char *)__p + v34);
                    minimumPermenantID((uint64_t)&v68, &v67, (uint64_t)&v69);
                    v71 = v69;
                    *(_QWORD *)&v72 = v70;
                  }
                  v34 += 48;
                  --v35;
                }
                while (v35);
                v36 = __p;
                if (v60 != __p)
                {
                  v37 = (v60 - (_BYTE *)__p) / 48;
                  v38 = v55;
                  if (v37 <= 1)
                    v37 = 1;
                  do
                  {
                    if (*((_QWORD *)v36 + 3) == v38)
                    {
                      *v36 = v71;
                      v36[1] = v72;
                      *((_QWORD *)v36 + 4) = v73;
                    }
                    v36 += 3;
                    --v37;
                  }
                  while (v37);
                }
              }
              *(_OWORD *)v66.replica.uuid = v79;
              v66.replica.index = v6;
              v66.clock = v5;
              *(_OWORD *)v65.replica.uuid = v71;
              *(_QWORD *)&v65.replica.index = v72;
              minimumPermenantID((uint64_t)&v66, &v65, (uint64_t)&v69);
              v79 = v69;
              v6 = v70;
              v5 = HIDWORD(v70);
              v33 = v73;
              v55 = *((_QWORD *)&v72 + 1);
            }
            v39 = std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(&v74, &v55);
            if (v39)
            {
              v39[3] += v33;
            }
            else
            {
              *(_QWORD *)&v71 = &v55;
              std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)&v74, &v55, (uint64_t)&std::piecewise_construct, (_QWORD **)&v71)[3] = v33;
            }
            v32 = (_QWORD *)*v32;
          }
          while (v32);
          v40 = *(float *)&v76;
          v41 = (__n128 *)v75;
        }
        else
        {
          v41 = 0;
          v40 = 1.0;
        }
        v58 = v40;
        std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<TopoSubstring *,unsigned long>,void *> *>>(&v56, v41, 0);
        if (!v4)
          break;
        std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&v74);
        if (*((_QWORD *)&v57 + 1) <= 1uLL)
          goto LABEL_64;
      }
      v43 = __p;
      v44 = (__int128 *)v60;
      v45 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)__p) >> 4);
      if (v60 - (_BYTE *)__p < 1)
      {
        v46 = 0;
        v48 = 0;
      }
      else
      {
        v46 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *>>(0xAAAAAAAAAAAAAAABLL * ((v60 - (_BYTE *)__p) >> 4));
        v48 = v47;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((uint64_t)v43, v44, v45, v46, v48, v42);
      if (v46)
        operator delete(v46);
      std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&v74);
    }
    while (*((_QWORD *)&v57 + 1) > 1uLL);
    if (*v53 != (char *)*v54)
    {
      v49 = 0;
      v50 = (uint64_t)&(*v53)[-*v54] >> 3;
      if (v50 <= 1)
        v50 = 1;
      v51 = 40;
      do
      {
        *(_QWORD *)(*v54 + 8 * v49++) = *(_QWORD *)((char *)__p + v51);
        v51 += 48;
      }
      while (v50 != v49);
    }
LABEL_64:
    a1 = *(__int128 **)(v57 + 16);
    v10 = *(_QWORD *)(v57 + 24);
    if (v10 < *((unsigned int *)a1 + 20))
      goto LABEL_68;
LABEL_65:
    v8 = (_QWORD *)a1 + 7;
    v7 = (char *)*((_QWORD *)a1 + 7);
    v9 = (char *)*((_QWORD *)a1 + 8);
    v53 = (char **)(a1 + 4);
    if (v9 == v7)
      goto LABEL_68;
  }
  a1 = *(__int128 **)v7;
  if (*(_DWORD *)(*(_QWORD *)v7 + 80) <= 1u)
  {
    *(_OWORD *)v78.replica.uuid = v79;
    v78.replica.index = v6;
    v78.clock = v5;
    v77 = *(TopoID *)a1;
    minimumPermenantID((uint64_t)&v78, &v77, (uint64_t)&v74);
    v79 = v74;
    v6 = v75;
    v5 = DWORD1(v75);
    goto LABEL_65;
  }
  v10 = 1;
  if (!v4)
    goto LABEL_71;
LABEL_69:
  if (v6)
  {
    v62 = v79;
    v63 = v6;
    v64 = v5;
    v4[2](v4, &v62);
  }
LABEL_71:
  *(_OWORD *)a3 = v79;
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = v5;
  *(_QWORD *)(a3 + 24) = a1;
  *(_QWORD *)(a3 + 32) = v10;
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&v56);
  if (__p)
  {
    v60 = (char *)__p;
    operator delete(__p);
  }

}

void sub_1BDDD912C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&a15);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<std::pair<minIdPathData,TopoSubstring *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 48;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>(v3, a2);
    v7 = &v6[48 * v5];
    v9 = &v6[48 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 3);
        v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

__n128 updateTopoID@<Q0>(const TopoID *a1@<X0>, const TopoIDRange *a2@<X1>, const TopoIDRange *a3@<X2>, TopoID *a4@<X8>)
{
  __n128 result;
  unsigned int clock;
  unsigned int v10;
  unsigned int v11;

  result = *(__n128 *)a1->replica.uuid;
  *a4 = *a1;
  if (a1->replica.index == a2->charID.replica.index && !uuid_compare(a1->replica.uuid, a2->charID.replica.uuid))
  {
    clock = a1->clock;
    v10 = a2->charID.clock;
    if (clock >= v10 && clock < a2->length + v10)
    {
      result = *(__n128 *)a3->charID.replica.uuid;
      *(_OWORD *)a4->replica.uuid = *(_OWORD *)a3->charID.replica.uuid;
      v11 = clock - v10 + a3->charID.clock;
      a4->replica.index = a3->charID.replica.index;
      a4->clock = v11;
    }
  }
  return result;
}

void updateTopoIDRange(unsigned __int8 *uu1, uint64_t a2, __int128 *a3, void **a4)
{
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  __int128 v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char *v55;
  char *v56;
  int v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  char *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  int v81;
  char *v82;
  char *v83;
  __int128 v84;
  int v85;
  char *v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  int v105;
  char *v106;
  __int128 v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  __int128 v112;
  int v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  __int128 v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  int v125;
  unsigned int v126;
  __int128 v127;
  int v128;
  unsigned __int8 uu2[16];
  int v130;
  int v131;
  unsigned __int8 uu1a[16];
  uint64_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)uu1 + 4) == *(_DWORD *)(a2 + 16) && !uuid_compare(uu1, (const unsigned __int8 *)a2))
  {
    *(_OWORD *)uu1a = *(_OWORD *)uu1;
    v17 = *((_DWORD *)uu1 + 6) + *((_DWORD *)uu1 + 5);
    LODWORD(v133) = *((_DWORD *)uu1 + 4);
    HIDWORD(v133) = v17;
    if ((TopoID::operator<=(uu1a, (unsigned __int8 *)a2) & 1) != 0
      || (*(_OWORD *)uu2 = *(_OWORD *)a2,
          v18 = *(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 20),
          v130 = *(_DWORD *)(a2 + 16),
          v131 = v18,
          (TopoID::operator>=(uu1, uu2) & 1) != 0))
    {
      v19 = (char *)a4[2];
      v9 = (char *)a4[1];
      if (v9 < v19)
        goto LABEL_4;
      v20 = 0x6DB6DB6DB6DB6DB7 * ((v9 - (_BYTE *)*a4) >> 2);
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) > 0x924924924924924)
        std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
      v22 = 0x6DB6DB6DB6DB6DB7 * ((v19 - (_BYTE *)*a4) >> 2);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x492492492492492)
        v23 = 0x924924924924924;
      else
        v23 = v21;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v23);
      else
        v24 = 0;
      v25 = &v24[28 * v20];
      v26 = &v24[28 * v23];
      v42 = *(_OWORD *)uu1;
      *(_OWORD *)(v25 + 12) = *(_OWORD *)(uu1 + 12);
      *(_OWORD *)v25 = v42;
      v11 = v25 + 28;
      v43 = (char *)*a4;
      v28 = (char *)a4[1];
      if (v28 != *a4)
      {
        do
        {
          v44 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v44;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v43);
        goto LABEL_28;
      }
    }
    else
    {
      v31 = *((_DWORD *)uu1 + 5);
      v32 = *(_DWORD *)(a2 + 20);
      v33 = v32 - v31;
      if (v32 > v31)
      {
        v34 = *((_DWORD *)uu1 + 6) - v33;
        *(_OWORD *)uu1a = *(_OWORD *)uu1;
        v133 = *((_QWORD *)uu1 + 2);
        v127 = *(_OWORD *)uu1a;
        v128 = *((_DWORD *)uu1 + 4);
        *(_OWORD *)uu2 = *(_OWORD *)a2;
        v35 = *(_DWORD *)(a2 + 24) + v32;
        v130 = *(_DWORD *)(a2 + 16);
        v131 = v35;
        v124 = *(_OWORD *)uu1;
        v125 = *((_DWORD *)uu1 + 4);
        v126 = v34 + v32;
        if ((TopoID::operator<((uint64_t)uu2, (uint64_t)&v124) & 1) != 0)
        {
          v36 = *(_DWORD *)(a2 + 24);
          v37 = v36 + v32;
          v38 = v34 - v36;
          v39 = (char *)a4[2];
          v40 = (char *)a4[1];
          if (v40 >= v39)
          {
            v64 = 0x6DB6DB6DB6DB6DB7 * ((v40 - (_BYTE *)*a4) >> 2);
            v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) > 0x924924924924924)
              std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
            v66 = 0x6DB6DB6DB6DB6DB7 * ((v39 - (_BYTE *)*a4) >> 2);
            if (2 * v66 > v65)
              v65 = 2 * v66;
            if (v66 >= 0x492492492492492)
              v67 = 0x924924924924924;
            else
              v67 = v65;
            if (v67)
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v67);
            else
              v68 = 0;
            v79 = &v68[28 * v64];
            v80 = &v68[28 * v67];
            v81 = v128;
            *(_OWORD *)v79 = v127;
            *((_DWORD *)v79 + 4) = v81;
            *((_DWORD *)v79 + 5) = v37;
            *((_DWORD *)v79 + 6) = v38;
            v41 = v79 + 28;
            v83 = (char *)*a4;
            v82 = (char *)a4[1];
            if (v82 != *a4)
            {
              do
              {
                v84 = *(_OWORD *)(v82 - 28);
                *((_OWORD *)v79 - 1) = *((_OWORD *)v82 - 1);
                *(_OWORD *)(v79 - 28) = v84;
                v79 -= 28;
                v82 -= 28;
              }
              while (v82 != v83);
              v82 = (char *)*a4;
            }
            *a4 = v79;
            a4[1] = v41;
            a4[2] = v80;
            if (v82)
              operator delete(v82);
          }
          else
          {
            *(_OWORD *)v40 = v127;
            *((_DWORD *)v40 + 4) = v128;
            *((_DWORD *)v40 + 5) = v37;
            *((_DWORD *)v40 + 6) = v38;
            v41 = v40 + 28;
          }
          a4[1] = v41;
        }
        else
        {
          v41 = (char *)a4[1];
          v36 = v34;
        }
        v127 = *a3;
        v85 = *((_DWORD *)a3 + 5);
        v128 = *((_DWORD *)a3 + 4);
        v86 = (char *)a4[2];
        if (v41 >= v86)
        {
          v89 = 0x6DB6DB6DB6DB6DB7 * ((v41 - (_BYTE *)*a4) >> 2);
          if ((unint64_t)(v89 + 1) > 0x924924924924924)
            std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
          v90 = 0x6DB6DB6DB6DB6DB7 * ((v86 - (_BYTE *)*a4) >> 2);
          v91 = 2 * v90;
          if (2 * v90 <= v89 + 1)
            v91 = v89 + 1;
          if (v90 >= 0x492492492492492)
            v92 = 0x924924924924924;
          else
            v92 = v91;
          if (v92)
            v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v92);
          else
            v93 = 0;
          v94 = &v93[28 * v89];
          v95 = &v93[28 * v92];
          *((_QWORD *)v94 + 2) = v133;
          *(_OWORD *)v94 = *(_OWORD *)uu1a;
          *((_DWORD *)v94 + 6) = v33;
          v88 = v94 + 28;
          v97 = (char *)*a4;
          v96 = (char *)a4[1];
          if (v96 != *a4)
          {
            do
            {
              v98 = *(_OWORD *)(v96 - 28);
              *((_OWORD *)v94 - 1) = *((_OWORD *)v96 - 1);
              *(_OWORD *)(v94 - 28) = v98;
              v94 -= 28;
              v96 -= 28;
            }
            while (v96 != v97);
            v96 = (char *)*a4;
          }
          *a4 = v94;
          a4[1] = v88;
          a4[2] = v95;
          if (v96)
            operator delete(v96);
        }
        else
        {
          v87 = *(_OWORD *)uu1a;
          *((_QWORD *)v41 + 2) = v133;
          *(_OWORD *)v41 = v87;
          *((_DWORD *)v41 + 6) = v33;
          v88 = v41 + 28;
        }
        a4[1] = v88;
        v99 = (char *)a4[2];
        if (v88 < v99)
        {
          *(_OWORD *)v88 = v127;
          *((_DWORD *)v88 + 4) = v128;
          *((_DWORD *)v88 + 5) = v85;
          *((_DWORD *)v88 + 6) = v36;
          v11 = v88 + 28;
          goto LABEL_31;
        }
        v100 = 0x6DB6DB6DB6DB6DB7 * ((v88 - (_BYTE *)*a4) >> 2);
        if ((unint64_t)(v100 + 1) > 0x924924924924924)
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        v101 = 0x6DB6DB6DB6DB6DB7 * ((v99 - (_BYTE *)*a4) >> 2);
        v102 = 2 * v101;
        if (2 * v101 <= v100 + 1)
          v102 = v100 + 1;
        if (v101 >= 0x492492492492492)
          v103 = 0x924924924924924;
        else
          v103 = v102;
        if (v103)
          v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v103);
        else
          v104 = 0;
        v25 = &v104[28 * v100];
        v26 = &v104[28 * v103];
        v105 = v128;
        *(_OWORD *)v25 = v127;
        *((_DWORD *)v25 + 4) = v105;
        *((_DWORD *)v25 + 5) = v85;
        *((_DWORD *)v25 + 6) = v36;
        v11 = v25 + 28;
        v106 = (char *)*a4;
        v28 = (char *)a4[1];
        if (v28 == *a4)
          goto LABEL_29;
        do
        {
          v107 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v107;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v106);
        goto LABEL_28;
      }
      *(_OWORD *)uu1a = *(_OWORD *)uu1;
      v45 = *((_DWORD *)uu1 + 6);
      LODWORD(v133) = *((_DWORD *)uu1 + 4);
      HIDWORD(v133) = v45 + v31;
      *(_OWORD *)uu2 = *(_OWORD *)a2;
      v46 = *(_DWORD *)(a2 + 24) + v32;
      v130 = *(_DWORD *)(a2 + 16);
      v131 = v46;
      if (TopoID::operator>((uint64_t)uu1a, (uint64_t)uu2))
      {
        v47 = *(_DWORD *)(a2 + 20);
        v48 = *(_DWORD *)(a2 + 24) + v47;
        v50 = *((_DWORD *)uu1 + 4);
        v49 = *((_DWORD *)uu1 + 5);
        v51 = v48 - v49;
        v52 = *((_DWORD *)uu1 + 6);
        *(_OWORD *)uu2 = *(_OWORD *)uu1;
        v130 = v50;
        *(_OWORD *)uu1a = *a3;
        v53 = *((_DWORD *)a3 + 5);
        LODWORD(v133) = *((_DWORD *)a3 + 4);
        v54 = v53 + v49 - v47;
        v55 = (char *)a4[2];
        v56 = (char *)a4[1];
        if (v56 >= v55)
        {
          v69 = 0x6DB6DB6DB6DB6DB7 * ((v56 - (_BYTE *)*a4) >> 2);
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) > 0x924924924924924)
            std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
          v71 = 0x6DB6DB6DB6DB6DB7 * ((v55 - (_BYTE *)*a4) >> 2);
          if (2 * v71 > v70)
            v70 = 2 * v71;
          if (v71 >= 0x492492492492492)
            v72 = 0x924924924924924;
          else
            v72 = v70;
          if (v72)
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v72);
          else
            v73 = 0;
          v108 = &v73[28 * v69];
          v109 = &v73[28 * v72];
          *((_DWORD *)v108 + 4) = v133;
          *(_OWORD *)v108 = *(_OWORD *)uu1a;
          *((_DWORD *)v108 + 5) = v54;
          *((_DWORD *)v108 + 6) = v51;
          v58 = v108 + 28;
          v111 = (char *)*a4;
          v110 = (char *)a4[1];
          if (v110 != *a4)
          {
            do
            {
              v112 = *(_OWORD *)(v110 - 28);
              *((_OWORD *)v108 - 1) = *((_OWORD *)v110 - 1);
              *(_OWORD *)(v108 - 28) = v112;
              v108 -= 28;
              v110 -= 28;
            }
            while (v110 != v111);
            v110 = (char *)*a4;
          }
          *a4 = v108;
          a4[1] = v58;
          a4[2] = v109;
          if (v110)
            operator delete(v110);
        }
        else
        {
          v57 = *((_DWORD *)a3 + 4);
          *(_OWORD *)v56 = *a3;
          *((_DWORD *)v56 + 4) = v57;
          *((_DWORD *)v56 + 5) = v54;
          *((_DWORD *)v56 + 6) = v51;
          v58 = v56 + 28;
        }
        v113 = v52 - v51;
        a4[1] = v58;
        v114 = (char *)a4[2];
        if (v58 < v114)
        {
          *(_OWORD *)v58 = *(_OWORD *)uu2;
          *((_DWORD *)v58 + 4) = v130;
          *((_DWORD *)v58 + 5) = v48;
          *((_DWORD *)v58 + 6) = v113;
          v11 = v58 + 28;
          goto LABEL_31;
        }
        v115 = 0x6DB6DB6DB6DB6DB7 * ((v58 - (_BYTE *)*a4) >> 2);
        if ((unint64_t)(v115 + 1) > 0x924924924924924)
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        v116 = 0x6DB6DB6DB6DB6DB7 * ((v114 - (_BYTE *)*a4) >> 2);
        v117 = 2 * v116;
        if (2 * v116 <= v115 + 1)
          v117 = v115 + 1;
        if (v116 >= 0x492492492492492)
          v118 = 0x924924924924924;
        else
          v118 = v117;
        if (v118)
          v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v118);
        else
          v119 = 0;
        v25 = &v119[28 * v115];
        v26 = &v119[28 * v118];
        *((_DWORD *)v25 + 4) = v130;
        *(_OWORD *)v25 = *(_OWORD *)uu2;
        *((_DWORD *)v25 + 5) = v48;
        *((_DWORD *)v25 + 6) = v113;
        v11 = v25 + 28;
        v122 = (char *)*a4;
        v28 = (char *)a4[1];
        if (v28 == *a4)
          goto LABEL_29;
        do
        {
          v123 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v123;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v122);
        goto LABEL_28;
      }
      *(_OWORD *)uu1a = *a3;
      v59 = *((_DWORD *)a3 + 5);
      LODWORD(v133) = *((_DWORD *)a3 + 4);
      v60 = *((_DWORD *)uu1 + 6);
      v61 = *((_DWORD *)uu1 + 5) - *(_DWORD *)(a2 + 20) + v59;
      v62 = (char *)a4[2];
      v9 = (char *)a4[1];
      if (v9 < v62)
      {
        v63 = *((_DWORD *)a3 + 4);
        *(_OWORD *)v9 = *a3;
        *((_DWORD *)v9 + 4) = v63;
        *((_DWORD *)v9 + 5) = v61;
        *((_DWORD *)v9 + 6) = v60;
        goto LABEL_5;
      }
      v74 = 0x6DB6DB6DB6DB6DB7 * ((v9 - (_BYTE *)*a4) >> 2);
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) > 0x924924924924924)
        std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
      v76 = 0x6DB6DB6DB6DB6DB7 * ((v62 - (_BYTE *)*a4) >> 2);
      if (2 * v76 > v75)
        v75 = 2 * v76;
      if (v76 >= 0x492492492492492)
        v77 = 0x924924924924924;
      else
        v77 = v75;
      if (v77)
        v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v77);
      else
        v78 = 0;
      v25 = &v78[28 * v74];
      v26 = &v78[28 * v77];
      *((_DWORD *)v25 + 4) = v133;
      *(_OWORD *)v25 = *(_OWORD *)uu1a;
      *((_DWORD *)v25 + 5) = v61;
      *((_DWORD *)v25 + 6) = v60;
      v11 = v25 + 28;
      v120 = (char *)*a4;
      v28 = (char *)a4[1];
      if (v28 != *a4)
      {
        do
        {
          v121 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v121;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v120);
        goto LABEL_28;
      }
    }
  }
  else
  {
    v8 = (char *)a4[2];
    v9 = (char *)a4[1];
    if (v9 < v8)
    {
LABEL_4:
      v10 = *(_OWORD *)uu1;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)(uu1 + 12);
      *(_OWORD *)v9 = v10;
LABEL_5:
      v11 = v9 + 28;
      goto LABEL_31;
    }
    v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - (_BYTE *)*a4) >> 2);
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) > 0x924924924924924)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v14 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (_BYTE *)*a4) >> 2);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x492492492492492)
      v15 = 0x924924924924924;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v15);
    else
      v16 = 0;
    v25 = &v16[28 * v12];
    v26 = &v16[28 * v15];
    v27 = *(_OWORD *)uu1;
    *(_OWORD *)(v25 + 12) = *(_OWORD *)(uu1 + 12);
    *(_OWORD *)v25 = v27;
    v11 = v25 + 28;
    v29 = (char *)*a4;
    v28 = (char *)a4[1];
    if (v28 != *a4)
    {
      do
      {
        v30 = *(_OWORD *)(v28 - 28);
        *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
        *(_OWORD *)(v25 - 28) = v30;
        v25 -= 28;
        v28 -= 28;
      }
      while (v28 != v29);
LABEL_28:
      v28 = (char *)*a4;
    }
  }
LABEL_29:
  *a4 = v25;
  a4[1] = v11;
  a4[2] = v26;
  if (v28)
    operator delete(v28);
LABEL_31:
  a4[1] = v11;
}

uint64_t TopoID::operator<=(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  if (*((_DWORD *)uu1 + 5) == *((_DWORD *)uu2 + 5)
    && *((_DWORD *)uu1 + 4) == *((_DWORD *)uu2 + 4)
    && !uuid_compare(uu1, uu2))
  {
    return 1;
  }
  else
  {
    return TopoID::operator<((uint64_t)uu1, (uint64_t)uu2);
  }
}

uint64_t TopoID::operator>=(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  if (*((_DWORD *)uu1 + 5) == *((_DWORD *)uu2 + 5)
    && *((_DWORD *)uu1 + 4) == *((_DWORD *)uu2 + 4)
    && !uuid_compare(uu1, uu2))
  {
    return 1;
  }
  else
  {
    return TopoID::operator>((uint64_t)uu1, (uint64_t)uu2);
  }
}

uint64_t TopoID::operator>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = *(_DWORD *)(a2 + 20);
  if (v2 > v3)
    return 1;
  if (v2 != v3)
    return 0;
  v5 = *(_DWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a2 + 16);
  if (v5 == v6)
    return uuid_compare((const unsigned __int8 *)a1, (const unsigned __int8 *)a2) == 1;
  else
    return v5 > v6;
}

uint64_t __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose_(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(a1 + 48);
}

void TopoSubstring::~TopoSubstring(TopoSubstring *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
}

void sub_1BDDDA558(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BDDDA684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDDA75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BDDDA828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BDDDA8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BDDDAA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDDAF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

BOOL TopoSubstring::isStartNode(TopoSubstring *this)
{
  uuid_t dst;
  int v4;
  unsigned __int8 uu2[16];
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  uuid_copy(dst, UUID_NULL);
  *(_OWORD *)uu2 = *(_OWORD *)dst;
  v7 = 0;
  v8 = 0;
  v6 = v4;
  return TopoIDRange::operator==((unsigned __int8 *)this, uu2);
}

BOOL TopoSubstring::isEndNode(TopoSubstring *this)
{
  uuid_t dst;
  int v4;
  unsigned __int8 uu2[16];
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  uuid_copy(dst, UUID_NULL);
  *(_OWORD *)uu2 = *(_OWORD *)dst;
  v6 = v4;
  v7 = 0xFFFFFFFFLL;
  return TopoIDRange::operator==((unsigned __int8 *)this, uu2);
}

void sub_1BDDDB484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL TopoIDRange::contains(TopoIDRange *this, const TopoID *uu1)
{
  unsigned int clock;
  unsigned int v5;

  if (uu1->replica.index == this->charID.replica.index
    && !uuid_compare(uu1->replica.uuid, this->charID.replica.uuid)
    && (clock = uu1->clock, v5 = this->charID.clock, clock >= v5))
  {
    return clock < this->length + v5;
  }
  else
  {
    return 0;
  }
}

void sub_1BDDDB824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;

  _Unwind_Resume(a1);
}

void sub_1BDDDB9A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDDBA54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDDBC28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

TopoIDRange *TopoIDRange::intersection@<X0>(TopoIDRange *this@<X0>, const TopoIDRange *uu2@<X1>, uint64_t a3@<X8>)
{
  TopoIDRange *v3;
  BOOL v5;
  int length;
  NSRange v8;
  NSRange v9;
  NSRange v10;

  v3 = this;
  if (this->length)
    v5 = uu2->length == 0;
  else
    v5 = 1;
  if (v5
    || this->charID.replica.index != uu2->charID.replica.index
    || (this = (TopoIDRange *)uuid_compare(this->charID.replica.uuid, uu2->charID.replica.uuid), (_DWORD)this))
  {
    length = 0;
    *(_OWORD *)a3 = *(_OWORD *)v3->charID.replica.uuid;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)&v3->charID.replica.index;
  }
  else
  {
    v9.location = v3->charID.clock;
    v9.length = v3->length;
    v10.location = uu2->charID.clock;
    v10.length = uu2->length;
    v8 = NSIntersectionRange(v9, v10);
    length = v8.length;
    this = (TopoIDRange *)v8.location;
    *(_OWORD *)a3 = *(_OWORD *)v3->charID.replica.uuid;
    *(_DWORD *)(a3 + 16) = v3->charID.replica.index;
    *(_DWORD *)(a3 + 20) = v8.location;
  }
  *(_DWORD *)(a3 + 24) = length;
  return this;
}

void sub_1BDDDBD30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDDBE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TopoSubstring::addAddedBy(TopoSubstring *this, const TopoID *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __n128 *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;

  v6 = *((_QWORD *)this + 6);
  v4 = (char *)this + 48;
  v5 = v6;
  v7 = *((_QWORD *)v4 - 1);
  if (v7 >= v6)
  {
    v10 = (void **)(v4 - 16);
    v11 = *((_QWORD *)v4 - 2);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)v4, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    v19 = *(_OWORD *)a2->replica.uuid;
    *((_QWORD *)v17 + 2) = *(_QWORD *)&a2->replica.index;
    *(_OWORD *)v17 = v19;
    v9 = (__n128 *)(v17 + 24);
    v21 = (char *)*((_QWORD *)this + 4);
    v20 = (char *)*((_QWORD *)this + 5);
    if (v20 != v21)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v17 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*v10;
    }
    *((_QWORD *)this + 4) = v17;
    *((_QWORD *)this + 5) = v9;
    *((_QWORD *)this + 6) = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *(_OWORD *)a2->replica.uuid;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)&a2->replica.index;
    *(_OWORD *)v7 = v8;
    v9 = (__n128 *)(v7 + 24);
  }
  v23 = *((_QWORD *)this + 4);
  v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v9 - v23) >> 3));
  *((_QWORD *)this + 5) = v9;
  if (v9 == (__n128 *)v23)
    v25 = 0;
  else
    v25 = v24;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,false>(v23, v9, (uint64_t)&v26, v25, 1);
}

void sub_1BDDDC064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDDC398(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<TopoSubstring *>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<TopoSubstring *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1BDDDC64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BDDDD15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<_NSRange>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1BDDDD32C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDDD570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  TopoSubstring::~TopoSubstring((TopoSubstring *)va);
  _Unwind_Resume(a1);
}

void sub_1BDDDD6DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDDD7C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BDDDD8B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t TopoSubstring::splitAt(TopoSubstring *this, int a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_DWORD *)(v4 + 16) = 0;
  uuid_clear((unsigned __int8 *)v4);
  *(_DWORD *)(v4 + 20) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_DWORD *)(v4 + 80) = 0;
  TopoSubstring::splitAt(this, a2, (TopoSubstring *)v4);
  return v4;
}

void sub_1BDDDD954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B7D750](v1, 0x10A0C409FE6E197);
  _Unwind_Resume(a1);
}

void std::vector<TopoSubstring *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

void sub_1BDDDDAEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDDDC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(v8);
  _Unwind_Resume(a1);
}

BOOL TopoSubstring::isSequentialWith(TopoSubstring *this, const TopoIDRange *a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;

  result = TopoIDRange::isSequentialWith((TopoIDRange *)this, a2);
  if (result)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = *((_QWORD *)this + 5);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3);
    v8 = *(_QWORD *)&a2[1].charID.replica.uuid[4];
    if (v7 == 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&a2[1].charID.replica.uuid[12] - v8) >> 3))
    {
      if (v6 == v5)
        return 1;
      v9 = 0;
      v10 = *((_DWORD *)this + 6);
      if (v7 <= 1)
        v11 = 1;
      else
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3);
      while (*(_DWORD *)(v5 + v9 + 16) == *(_DWORD *)(v8 + v9 + 16))
      {
        if (uuid_compare((const unsigned __int8 *)(v5 + v9), (const unsigned __int8 *)(v8 + v9)))
          break;
        v5 = *((_QWORD *)this + 4);
        v8 = *(_QWORD *)&a2[1].charID.replica.uuid[4];
        if (*(_DWORD *)(v5 + v9 + 20) + v10 != *(_DWORD *)(v8 + v9 + 20))
          break;
        v9 += 24;
        if (!--v11)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

void mergeStringData(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;

  v18 = a1;
  v11 = a5;
  if (*(_QWORD *)(a3 + 40) != *(_QWORD *)(a3 + 32))
  {
    if (a2)
    {
      objc_msgSend(v18, "attributedString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)(a3 + 84) = CRTTBoundedCheckedCastNSUIntegerToUInt32(objc_msgSend(v12, "length"));

      objc_msgSend(v18, "attributedString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v13;
      if (*(_QWORD *)(a4 + 40) == *(_QWORD *)(a4 + 32))
        v15 = 0;
      else
        v15 = *(unsigned int *)(a4 + 24);
      objc_msgSend(v13, "cr_appendStorage:fromRange:", v11, *(unsigned int *)(a4 + 84), v15);
LABEL_14:

      goto LABEL_15;
    }
    if (*(_DWORD *)(a4 + 84) != -1 && ((a6 & 1) != 0 || *(_QWORD *)(a4 + 40) != *(_QWORD *)(a4 + 32)))
    {
      objc_msgSend(v18, "attributedString");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v16;
      if (*(_QWORD *)(a3 + 40) == *(_QWORD *)(a3 + 32))
        v17 = 0;
      else
        v17 = *(unsigned int *)(a3 + 24);
      objc_msgSend(v16, "cr_mergeAttributesInRange:withStorage:fromRange:", *(unsigned int *)(a3 + 84), v17, v11, *(unsigned int *)(a4 + 84), *(unsigned int *)(a4 + 24));
      goto LABEL_14;
    }
  }
LABEL_15:

}

void sub_1BDDDDF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BDDDE1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  void *v15;
  void *v16;

  std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a15);

  _Unwind_Resume(a1);
}

char *std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::operator[](uint64_t **a1, _OWORD *a2)
{
  uint64_t *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t v8;

  v4 = std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__find_equal<TopoIDRange>((uint64_t)a1, &v8, (uint64_t)a2);
  v5 = (_OWORD *)*v4;
  if (!*v4)
  {
    v6 = (uint64_t **)v4;
    v5 = operator new(0x48uLL);
    v5[2] = *a2;
    *(_OWORD *)((char *)v5 + 44) = *(_OWORD *)((char *)a2 + 12);
    *((_QWORD *)v5 + 8) = 0;
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v5);
  }
  return (char *)(v5 + 4);
}

uint64_t compareSubstring(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  char v18;
  uuid_t uu;
  int v21;
  int v22;
  void *v23[2];
  void *__p[2];
  __int128 v25;
  int v26;
  _BYTE v27[28];
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (*(_QWORD *)(a2 + 40) == *(_QWORD *)(a2 + 32))
    goto LABEL_39;
  *(_OWORD *)v27 = *(_OWORD *)a2;
  *(_QWORD *)&v27[16] = *(_QWORD *)(a2 + 16);
  *(_DWORD *)&v27[24] = 1;
  v6 = std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100](a3, (uint64_t)v27);
  v7 = v6;
  if (a3 + 8 == v6)
    goto LABEL_39;
  v8 = TopoIDRange::operator==(*(unsigned __int8 **)(v6 + 64), (unsigned __int8 *)a2);
  v9 = *(_QWORD *)(v7 + 64);
  if (v8)
  {
    if (*(_QWORD *)(v9 + 40) != *(_QWORD *)(v9 + 32))
    {
      if (*(_QWORD *)(a2 + 40) == *(_QWORD *)(a2 + 32))
        v10 = 0;
      else
        v10 = *(unsigned int *)(a2 + 24);
      v11 = (*((uint64_t (**)(id, _QWORD, _QWORD, _QWORD, uint64_t))v5 + 2))(v5, *(unsigned int *)(v9 + 84), *(unsigned int *)(v9 + 24), *(unsigned int *)(a2 + 84), v10);
LABEL_9:
      if ((v11 & 1) == 0)
        goto LABEL_39;
      goto LABEL_23;
    }
    goto LABEL_39;
  }
  if (!TopoIDRange::intersects((TopoIDRange *)v9, (const TopoIDRange *)a2))
    goto LABEL_39;
  v12 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v12 + 20) == *(_DWORD *)(a2 + 20))
  {
    if (*(_DWORD *)(v12 + 24) <= *(_DWORD *)(a2 + 24))
    {
      *(_OWORD *)v27 = *(_OWORD *)a2;
      *(_OWORD *)&v27[12] = *(_OWORD *)(a2 + 12);
      v29 = 0;
      v30 = 0;
      v28 = 0;
      std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v28, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
      v31 = 0;
      v32 = 0;
      v33 = 0;
      std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v31, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
      v34 = *(_QWORD *)(a2 + 80);
      v21 = 0;
      uuid_clear(uu);
      v22 = 0;
      v26 = 0;
      v25 = 0u;
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)__p = 0u;
      TopoSubstring::splitAt((TopoSubstring *)v27, *(_DWORD *)(*(_QWORD *)(v7 + 64) + 24), (TopoSubstring *)uu);
      if ((compareSubstring(v5, uu, a3) & 1) != 0 || (compareSubstring(v5, v27, a3) & 1) != 0)
      {
        TopoSubstring::~TopoSubstring((TopoSubstring *)uu);
        TopoSubstring::~TopoSubstring((TopoSubstring *)v27);
LABEL_23:
        LOBYTE(a3) = 1;
        goto LABEL_40;
      }
      TopoSubstring::~TopoSubstring((TopoSubstring *)uu);
      TopoSubstring::~TopoSubstring((TopoSubstring *)v27);
    }
    else if (*(_QWORD *)(v12 + 40) != *(_QWORD *)(v12 + 32))
    {
      v11 = (*((uint64_t (**)(id, _QWORD))v5 + 2))(v5, *(unsigned int *)(v12 + 84));
      goto LABEL_9;
    }
LABEL_39:
    LOBYTE(a3) = 0;
    goto LABEL_40;
  }
  *(_OWORD *)v27 = *(_OWORD *)a2;
  *(_OWORD *)&v27[12] = *(_OWORD *)(a2 + 12);
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v28, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v31, *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  v34 = *(_QWORD *)(a2 + 80);
  v21 = 0;
  uuid_clear(uu);
  v22 = 0;
  v26 = 0;
  v25 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v23 = 0u;
  v13 = *(_QWORD *)(v7 + 64);
  v14 = *(_DWORD *)(v13 + 20);
  v15 = *(_DWORD *)(a2 + 20);
  if (v14 >= v15)
  {
    TopoSubstring::splitAt((TopoSubstring *)v27, v14 - v15, (TopoSubstring *)uu);
    v17 = compareSubstring(v5, uu, a3);
  }
  else
  {
    v16 = *(_DWORD *)(v13 + 24) + v14;
    if (v16 >= *(_DWORD *)(a2 + 24) + v15)
    {
      if (*(_QWORD *)(v13 + 40) == *(_QWORD *)(v13 + 32))
      {
        v18 = 0;
        LOBYTE(a3) = 0;
        goto LABEL_30;
      }
      v17 = (*((uint64_t (**)(id, _QWORD))v5 + 2))(v5, v15 - v14 + *(_DWORD *)(v13 + 84));
    }
    else
    {
      TopoSubstring::splitAt((TopoSubstring *)v27, v16 - v15, (TopoSubstring *)uu);
      if ((compareSubstring(v5, uu, a3) & 1) != 0)
      {
LABEL_28:
        v18 = 0;
        LOBYTE(a3) = 1;
        goto LABEL_30;
      }
      v17 = compareSubstring(v5, v27, a3);
    }
  }
  if ((v17 & 1) != 0)
    goto LABEL_28;
  v18 = 1;
LABEL_30:
  if (__p[1])
  {
    *(void **)&v25 = __p[1];
    operator delete(__p[1]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if ((v18 & 1) != 0)
    goto LABEL_39;
LABEL_40:

  return a3 & 1;
}

void sub_1BDDDE6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;

  TopoSubstring::~TopoSubstring((TopoSubstring *)&a21);

  _Unwind_Resume(a1);
}

void sub_1BDDDEC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a25, 8);
  std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a32);

  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__18(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(*(_QWORD **)(a1 + 56));
}

void mergeSubstring(void *a1, void *a2, uint64_t a3, uint64_t **a4, void **a5, unsigned int a6)
{
  void (**v10)(id, _QWORD);
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  id v72;
  uuid_t uu;
  int v74;
  int v75;
  void *v76[2];
  void *__p[2];
  __int128 v78;
  int v79;
  _BYTE v80[28];
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v72 = a1;
  v10 = a2;
  *(_OWORD *)v80 = *(_OWORD *)a3;
  *(_QWORD *)&v80[16] = *(_QWORD *)(a3 + 16);
  *(_DWORD *)&v80[24] = 1;
  v11 = std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100]((uint64_t)a4, (uint64_t)v80);
  if (a4 + 1 == (uint64_t **)v11)
  {
LABEL_82:
    v68 = v72;
    v10[2](v10, a3);
    goto LABEL_83;
  }
  while (1)
  {
    if (TopoIDRange::operator==(*(unsigned __int8 **)(v11 + 64), (unsigned __int8 *)a3))
    {
      v68 = v72;
      (*((void (**)(id, _QWORD, uint64_t))v72 + 2))(v72, *(_QWORD *)(v11 + 64), a3);
      goto LABEL_83;
    }
    if (!TopoIDRange::intersects(*(TopoIDRange **)(v11 + 64), (const TopoIDRange *)a3))
      goto LABEL_82;
    v12 = *(_QWORD *)(v11 + 64);
    v13 = *(_DWORD *)(v12 + 20);
    v14 = *(_DWORD *)(a3 + 20);
    if (v13 == v14)
      break;
    if (v13 >= v14)
    {
      *(_OWORD *)v80 = *(_OWORD *)a3;
      *(_OWORD *)&v80[12] = *(_OWORD *)(a3 + 12);
      v82 = 0;
      v83 = 0;
      v81 = 0;
      std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v81, *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
      v84 = 0;
      v85 = 0;
      v86 = 0;
      std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v84, *(const void **)(a3 + 56), *(_QWORD *)(a3 + 64), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3);
      v87 = *(_QWORD *)(a3 + 80);
      if (v80 != (_BYTE *)a3)
        std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)&v84, *(char **)(a3 + 56), *(_QWORD *)(a3 + 64), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3);
      v74 = 0;
      uuid_clear(uu);
      v75 = 0;
      v79 = 0;
      v78 = 0u;
      *(_OWORD *)v76 = 0u;
      *(_OWORD *)__p = 0u;
      v68 = v72;
      TopoSubstring::splitAt((TopoSubstring *)v80, *(_DWORD *)(*(_QWORD *)(v11 + 64) + 20) - *(_DWORD *)(a3 + 20), (TopoSubstring *)uu);
      v69 = a6;
      if (a6)
        goto LABEL_92;
      goto LABEL_93;
    }
    if (a5)
    {
      v22 = operator new();
      v23 = *(_OWORD *)v12;
      *(_OWORD *)(v22 + 12) = *(_OWORD *)(v12 + 12);
      *(_OWORD *)v22 = v23;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>((_QWORD *)(v22 + 32), *(const void **)(v12 + 32), *(_QWORD *)(v12 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 3));
      *(_QWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 64) = 0;
      *(_DWORD *)(v22 + 80) = 0;
      *(_QWORD *)(v22 + 72) = 0;
      *(_DWORD *)(v22 + 84) = *(_DWORD *)(v12 + 84);
      v14 = *(_DWORD *)(a3 + 20);
      v13 = *(_DWORD *)(*(_QWORD *)(v11 + 64) + 20);
      v12 = v22;
    }
    v24 = (_OWORD *)TopoSubstring::splitAt((TopoSubstring *)v12, v14 - v13);
    if (a5)
    {
      v26 = (uint64_t *)a5[1];
      v25 = (unint64_t)a5[2];
      if ((unint64_t)v26 >= v25)
      {
        v33 = ((char *)v26 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_102;
        v34 = v25 - (_QWORD)*a5;
        v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1))
          v35 = v33 + 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a5 + 2), v36);
        else
          v37 = 0;
        v49 = (uint64_t *)&v37[8 * v33];
        *v49 = v12;
        v27 = v49 + 1;
        v51 = (char *)*a5;
        v50 = (char *)a5[1];
        if (v50 != *a5)
        {
          do
          {
            v52 = *((_QWORD *)v50 - 1);
            v50 -= 8;
            *--v49 = v52;
          }
          while (v50 != v51);
          v50 = (char *)*a5;
        }
        *a5 = v49;
        a5[1] = v27;
        a5[2] = &v37[8 * v36];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *v26 = v12;
        v27 = v26 + 1;
      }
      a5[1] = v27;
      v53 = (unint64_t)a5[2];
      if ((unint64_t)v27 >= v53)
      {
        v55 = ((char *)v27 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v55 + 1) >> 61)
LABEL_102:
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        v56 = v53 - (_QWORD)*a5;
        v57 = v56 >> 2;
        if (v56 >> 2 <= (unint64_t)(v55 + 1))
          v57 = v55 + 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a5 + 2), v58);
        else
          v59 = 0;
        v64 = &v59[8 * v55];
        *(_QWORD *)v64 = v24;
        v54 = v64 + 8;
        v66 = (char *)*a5;
        v65 = (char *)a5[1];
        if (v65 != *a5)
        {
          do
          {
            v67 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            *((_QWORD *)v64 - 1) = v67;
            v64 -= 8;
          }
          while (v65 != v66);
          v65 = (char *)*a5;
        }
        *a5 = v64;
        a5[1] = v54;
        a5[2] = &v59[8 * v58];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v27 = v24;
        v54 = v27 + 1;
      }
      a5[1] = v54;
    }
    std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::erase[abi:ne180100](a4, (uint64_t *)v11);
    *(_QWORD *)std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::operator[](a4, (_OWORD *)v12) = v12;
    *(_OWORD *)v80 = *v24;
    *(_OWORD *)&v80[12] = *(_OWORD *)((char *)v24 + 12);
    v81 = v24;
    v11 = (uint64_t)std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::insert[abi:ne180100]<std::pair<TopoIDRange,TopoSubstring *>,void>(a4, (uint64_t)v80);
LABEL_81:
    if (a4 + 1 == (uint64_t **)v11)
      goto LABEL_82;
  }
  v15 = *(_DWORD *)(a3 + 24);
  if (*(_DWORD *)(v12 + 24) > v15)
  {
    if (a5)
    {
      v16 = operator new();
      v17 = *(_OWORD *)v12;
      *(_OWORD *)(v16 + 12) = *(_OWORD *)(v12 + 12);
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>((_QWORD *)(v16 + 32), *(const void **)(v12 + 32), *(_QWORD *)(v12 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32)) >> 3));
      *(_QWORD *)(v16 + 56) = 0;
      *(_QWORD *)(v16 + 64) = 0;
      *(_DWORD *)(v16 + 80) = 0;
      *(_QWORD *)(v16 + 72) = 0;
      *(_DWORD *)(v16 + 84) = *(_DWORD *)(v12 + 84);
      v15 = *(_DWORD *)(a3 + 24);
      v12 = v16;
    }
    v18 = (_OWORD *)TopoSubstring::splitAt((TopoSubstring *)v12, v15);
    if (a5)
    {
      v20 = (uint64_t *)a5[1];
      v19 = (unint64_t)a5[2];
      if ((unint64_t)v20 >= v19)
      {
        v28 = ((char *)v20 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_103;
        v29 = v19 - (_QWORD)*a5;
        v30 = v29 >> 2;
        if (v29 >> 2 <= (unint64_t)(v28 + 1))
          v30 = v28 + 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a5 + 2), v31);
        else
          v32 = 0;
        v38 = (uint64_t *)&v32[8 * v28];
        *v38 = v12;
        v21 = v38 + 1;
        v40 = (char *)*a5;
        v39 = (char *)a5[1];
        if (v39 != *a5)
        {
          do
          {
            v41 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *--v38 = v41;
          }
          while (v39 != v40);
          v39 = (char *)*a5;
        }
        *a5 = v38;
        a5[1] = v21;
        a5[2] = &v32[8 * v31];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v20 = v12;
        v21 = v20 + 1;
      }
      a5[1] = v21;
      v42 = (unint64_t)a5[2];
      if ((unint64_t)v21 >= v42)
      {
        v44 = ((char *)v21 - (_BYTE *)*a5) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
LABEL_103:
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        v45 = v42 - (_QWORD)*a5;
        v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1))
          v46 = v44 + 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a5 + 2), v47);
        else
          v48 = 0;
        v60 = &v48[8 * v44];
        *(_QWORD *)v60 = v18;
        v43 = v60 + 8;
        v62 = (char *)*a5;
        v61 = (char *)a5[1];
        if (v61 != *a5)
        {
          do
          {
            v63 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *((_QWORD *)v60 - 1) = v63;
            v60 -= 8;
          }
          while (v61 != v62);
          v61 = (char *)*a5;
        }
        *a5 = v60;
        a5[1] = v43;
        a5[2] = &v48[8 * v47];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v21 = v18;
        v43 = v21 + 1;
      }
      a5[1] = v43;
    }
    std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::erase[abi:ne180100](a4, (uint64_t *)v11);
    *(_OWORD *)v80 = *(_OWORD *)v12;
    *(_OWORD *)&v80[12] = *(_OWORD *)(v12 + 12);
    v81 = (void *)v12;
    v11 = (uint64_t)std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::insert[abi:ne180100]<std::pair<TopoIDRange,TopoSubstring *>,void>(a4, (uint64_t)v80);
    *(_QWORD *)std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::operator[](a4, v18) = v18;
    goto LABEL_81;
  }
  *(_OWORD *)v80 = *(_OWORD *)a3;
  *(_OWORD *)&v80[12] = *(_OWORD *)(a3 + 12);
  v82 = 0;
  v83 = 0;
  v81 = 0;
  std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v81, *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  v84 = 0;
  v85 = 0;
  v86 = 0;
  std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v84, *(const void **)(a3 + 56), *(_QWORD *)(a3 + 64), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3);
  v87 = *(_QWORD *)(a3 + 80);
  if (v80 != (_BYTE *)a3)
    std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)&v84, *(char **)(a3 + 56), *(_QWORD *)(a3 + 64), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3);
  v74 = 0;
  uuid_clear(uu);
  v75 = 0;
  v79 = 0;
  v78 = 0u;
  *(_OWORD *)v76 = 0u;
  *(_OWORD *)__p = 0u;
  v68 = v72;
  TopoSubstring::splitAt((TopoSubstring *)v80, *(_DWORD *)(*(_QWORD *)(v11 + 64) + 24), (TopoSubstring *)uu);
  v69 = a6;
  if (a6)
  {
LABEL_92:
    mergeSubstring(v68, v10, uu, a4, a5, 1);
    v70 = v80;
    goto LABEL_94;
  }
LABEL_93:
  mergeSubstring(v72, v10, v80, a4, a5, 0);
  v70 = uu;
LABEL_94:
  mergeSubstring(v68, v10, v70, a4, a5, v69);
  if (__p[1])
  {
    *(void **)&v78 = __p[1];
    operator delete(__p[1]);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
LABEL_83:

}

void sub_1BDDDF65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;

  TopoSubstring::~TopoSubstring((TopoSubstring *)&a23);

  _Unwind_Resume(a1);
}

void sub_1BDDDF81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BDDDF8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void mergeAddNewSubstring(void *a1, void *a2, uint64_t a3, uint64_t **a4)
{
  id v7;
  uint64_t v8;
  __int128 **v9;
  __int128 **i;
  __int128 *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = a1;
  v7 = a2;
  v8 = operator new();
  *(_OWORD *)v8 = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 12) = *(_OWORD *)(a3 + 12);
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>((_QWORD *)(v8 + 32), *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::operator[](a4, (_OWORD *)v8) = v8;
  std::vector<TopoSubstring *>::reserve((void **)(v8 + 56), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 3);
  v9 = *(__int128 ***)(a3 + 56);
  for (i = *(__int128 ***)(a3 + 64); v9 != i; ++v9)
  {
    v11 = *v9;
    v18 = **v9;
    v19 = *((_QWORD *)v11 + 2);
    v20 = 1;
    v12 = std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100]((uint64_t)a4, (uint64_t)&v18);
    if (a4 + 1 == (uint64_t **)v12)
      __assert_rtn("mergeAddNewSubstring", "TTMergeableString.mm", 1712, "ourChild != charMap.end()");
    TopoSubstring::addChild((TopoSubstring *)v8, *(TopoSubstring **)(v12 + 64));
  }
  if (*(_QWORD *)(a3 + 40) != *(_QWORD *)(a3 + 32))
  {
    objc_msgSend(v17, "attributedString");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(v8 + 84) = CRTTBoundedCheckedCastNSUIntegerToUInt32(objc_msgSend(v13, "length"));

    objc_msgSend(v17, "attributedString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v14;
    if (*(_QWORD *)(a3 + 40) == *(_QWORD *)(a3 + 32))
      v16 = 0;
    else
      v16 = *(unsigned int *)(a3 + 24);
    objc_msgSend(v14, "cr_appendStorage:fromRange:", v7, *(unsigned int *)(a3 + 84), v16);

  }
}

void sub_1BDDDFAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BDDDFC3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BDDDFFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,_QWORD *a32)
{
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a25, 8);
  std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a32);

  _Unwind_Resume(a1);
}

void sub_1BDDE0148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BDDE01D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDE0400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BDDE060C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v19 = v16;

  _Unwind_Resume(a1);
}

void sub_1BDDE07DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BDDE0C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDE1068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43,char a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;

  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Block_object_dispose((const void *)(v48 - 168), 8);
  _Block_object_dispose((const void *)(v48 - 136), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__25(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void sub_1BDDE12D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDE158C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDE161C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDE1998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  va_list va;

  va_start(va, a12);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(v13);
  _Block_object_dispose((const void *)(v16 - 128), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__35(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(a1 + 48);
}

void sub_1BDDE1F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

id TopoReplica::toString(TopoReplica *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)MEMORY[0x1E0CB3940];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", this);
  objc_msgSend(v3, "CRTTShortDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("%@.%d"), v4, this->index);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1BDDE2084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDE2160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1BDDE22BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BDDE24B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDE25E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDE2850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

void sub_1BDDE2944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDE2A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDE2B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1BDDE2C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BDDE2C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDE2E08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1BDDE2F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BDDE304C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDE3114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::deque<TopoSubstring *>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TopoSubstring **>::~__split_buffer((uint64_t)a1);
}

_QWORD *std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<TopoID>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BDDE32B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TopoID>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

BOOL TopoIDRange::operator==(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  return *((_DWORD *)uu1 + 5) == *((_DWORD *)uu2 + 5)
      && *((_DWORD *)uu1 + 4) == *((_DWORD *)uu2 + 4)
      && !uuid_compare(uu1, uu2)
      && *((_DWORD *)uu1 + 6) == *((_DWORD *)uu2 + 6);
}

char *TopoSubstring::splitAt(TopoSubstring *this, int a2, TopoSubstring *a3)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 *v13;
  _QWORD *v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *result;
  __int128 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 4);
  v7 = *((_DWORD *)this + 5) + a2;
  v8 = *((_DWORD *)this + 6) - a2;
  *((_DWORD *)this + 6) = a2;
  *(_OWORD *)a3 = *(_OWORD *)this;
  *((_DWORD *)a3 + 4) = v6;
  *((_DWORD *)a3 + 5) = v7;
  *((_DWORD *)a3 + 6) = v8;
  v9 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  if (v9)
    v10 = a2;
  else
    v10 = 0;
  *((_DWORD *)a3 + 21) = v10 + *((_DWORD *)this + 21);
  v11 = (_QWORD *)((char *)a3 + 32);
  std::vector<TopoID>::reserve((void **)a3 + 4, 0xAAAAAAAAAAAAAAABLL * (v9 >> 3));
  v12 = (__int128 *)*((_QWORD *)this + 4);
  v13 = (__int128 *)*((_QWORD *)this + 5);
  if (v12 != v13)
  {
    v14 = (_QWORD *)((char *)a3 + 48);
    v15 = (char *)*((_QWORD *)a3 + 5);
    do
    {
      v29 = *v12;
      v16 = *((_DWORD *)v12 + 5);
      v30 = *((_DWORD *)v12 + 4);
      v17 = v16 + a2;
      if ((unint64_t)v15 >= *v14)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v15[-*v11] >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v14 - *v11) >> 3) > v20)
          v20 = 0x5555555555555556 * ((uint64_t)(*v14 - *v11) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *v11) >> 3) >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)a3 + 48, v21);
        else
          v22 = 0;
        v23 = &v22[24 * v19];
        *((_DWORD *)v23 + 4) = v30;
        *(_OWORD *)v23 = v29;
        *((_DWORD *)v23 + 5) = v17;
        v25 = (char *)*((_QWORD *)a3 + 4);
        v24 = (char *)*((_QWORD *)a3 + 5);
        v26 = v23;
        if (v24 != v25)
        {
          do
          {
            v27 = *(_OWORD *)(v24 - 24);
            *((_QWORD *)v26 - 1) = *((_QWORD *)v24 - 1);
            *(_OWORD *)(v26 - 24) = v27;
            v26 -= 24;
            v24 -= 24;
          }
          while (v24 != v25);
          v24 = (char *)*v11;
        }
        v15 = v23 + 24;
        *((_QWORD *)a3 + 4) = v26;
        *((_QWORD *)a3 + 5) = v23 + 24;
        *((_QWORD *)a3 + 6) = &v22[24 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        v18 = *((_DWORD *)v12 + 4);
        *(_OWORD *)v15 = *v12;
        *((_DWORD *)v15 + 4) = v18;
        *((_DWORD *)v15 + 5) = v17;
        v15 += 24;
      }
      *((_QWORD *)a3 + 5) = v15;
      v12 = (__int128 *)((char *)v12 + 24);
    }
    while (v12 != v13);
  }
  if (a3 != this)
    std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)a3 + 56, *((char **)this + 7), *((_QWORD *)this + 8), (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3);
  *(_QWORD *)&v29 = a3;
  result = std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)this + 56, (char *)&v29, (uint64_t)&v29 + 8, 1uLL);
  *((_DWORD *)a3 + 20) = 1;
  return result;
}

void std::vector<TopoID>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL TopoIDRange::isSequentialWith(TopoIDRange *this, const TopoIDRange *a2)
{
  return this->charID.replica.index == a2->charID.replica.index
      && !uuid_compare(this->charID.replica.uuid, a2->charID.replica.uuid)
      && this->length + this->charID.clock == a2->charID.clock;
}

uint64_t std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t *v16;
  TopoID v18;
  TopoID v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    do
    {
      *(_OWORD *)v19.replica.uuid = *(_OWORD *)(v3 + 32);
      v5 = *(_DWORD *)(v3 + 48);
      v6 = *(_DWORD *)(v3 + 52);
      v7 = *(_DWORD *)(v3 + 56);
      *(_OWORD *)v18.replica.uuid = *(_OWORD *)a2;
      v8 = *(_DWORD *)(a2 + 16);
      v9 = *(_DWORD *)(a2 + 20);
      v10 = v7 != 0;
      v11 = v7 - 1;
      if (!v10)
        v11 = 0;
      v12 = v11 + v6;
      v13 = *(_DWORD *)(a2 + 24);
      v19.replica.index = v5;
      v19.clock = v12;
      v14 = v13 - 1;
      if (!v13)
        v14 = 0;
      v18.replica.index = v8;
      v18.clock = v14 + v9;
      v15 = TopoID::lessThanOrderingReplicaFirst(&v19, &v18);
      v16 = (uint64_t *)(v3 + 8);
      if (!v15)
      {
        v16 = (uint64_t *)v3;
        v2 = v3;
      }
      v3 = *v16;
    }
    while (*v16);
  }
  return v2;
}

BOOL TopoIDRange::intersects(TopoIDRange *this, const TopoIDRange *uu1)
{
  unsigned int clock;
  unsigned int v6;

  if (uu1->charID.replica.index != this->charID.replica.index
    || uuid_compare(uu1->charID.replica.uuid, this->charID.replica.uuid))
  {
    return 0;
  }
  clock = this->charID.clock;
  v6 = uu1->charID.clock;
  return v6 < this->length + clock && uu1->length + v6 > clock;
}

BOOL TopoID::lessThanOrderingReplicaFirst(TopoID *this, const TopoID *a2)
{
  unsigned int index;
  unsigned int v3;
  BOOL v4;
  int v7;
  uint64_t v8;

  index = this->replica.index;
  v3 = a2->replica.index;
  v4 = index >= v3;
  if (index != v3)
  {
    v8 = -1;
    if (v4)
      v8 = 1;
    return v8 == -1;
  }
  v7 = uuid_compare(this->replica.uuid, a2->replica.uuid);
  if (v7)
  {
    v8 = v7;
    return v8 == -1;
  }
  return this->clock < a2->clock;
}

_QWORD *std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<TopoSubstring *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BDDE3904(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TopoSubstring *>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::erase[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, a2);
  operator delete(a2);
}

_OWORD *std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::insert[abi:ne180100]<std::pair<TopoIDRange,TopoSubstring *>,void>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t v8;

  v4 = std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__find_equal<TopoIDRange>((uint64_t)a1, &v8, a2);
  v5 = (_OWORD *)*v4;
  if (!*v4)
  {
    v6 = (uint64_t **)v4;
    v5 = operator new(0x48uLL);
    v5[2] = *(_OWORD *)a2;
    *(_OWORD *)((char *)v5 + 44) = *(_OWORD *)(a2 + 12);
    *((_QWORD *)v5 + 8) = *(_QWORD *)(a2 + 32);
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v5);
  }
  return v5;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__find_equal<TopoIDRange>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  TopoID v28;
  TopoID v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        *(_OWORD *)v29.replica.uuid = *(_OWORD *)a3;
        v8 = *(_DWORD *)(a3 + 16);
        v9 = *(_DWORD *)(a3 + 20);
        v10 = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v28.replica.uuid = *((_OWORD *)v7 + 2);
        v11 = *((_DWORD *)v7 + 12);
        v12 = *((_DWORD *)v7 + 13);
        v13 = v10 != 0;
        v14 = v10 - 1;
        if (!v13)
          v14 = 0;
        v15 = v14 + v9;
        v16 = *((_DWORD *)v7 + 14);
        v29.replica.index = v8;
        v29.clock = v15;
        v17 = v16 - 1;
        if (!v16)
          v17 = 0;
        v28.replica.index = v11;
        v28.clock = v17 + v12;
        if (!TopoID::lessThanOrderingReplicaFirst(&v29, &v28))
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_17;
      }
      *(_OWORD *)v29.replica.uuid = *((_OWORD *)v7 + 2);
      v18 = *((_DWORD *)v7 + 12);
      v19 = *((_DWORD *)v7 + 13);
      v20 = *((_DWORD *)v7 + 14);
      *(_OWORD *)v28.replica.uuid = *(_OWORD *)a3;
      v21 = *(_DWORD *)(a3 + 16);
      v22 = *(_DWORD *)(a3 + 20);
      v13 = v20 != 0;
      v23 = v20 - 1;
      if (!v13)
        v23 = 0;
      v24 = v23 + v19;
      v25 = *(_DWORD *)(a3 + 24);
      v29.replica.index = v18;
      v29.clock = v24;
      v26 = v25 - 1;
      if (!v25)
        v26 = 0;
      v28.replica.index = v21;
      v28.clock = v26 + v22;
      if (!TopoID::lessThanOrderingReplicaFirst(&v29, &v28))
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_17:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void mergeAddChildren(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 **v3;
  __int128 **v4;
  uint64_t v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(__int128 ***)(a2 + 56);
  v4 = *(__int128 ***)(a2 + 64);
  if (v3 != v4)
  {
    v7 = a3 + 8;
    do
    {
      v8 = *v3;
      v9 = *(uint64_t **)(a1 + 56);
      v10 = *(uint64_t **)(a1 + 64);
      while (v9 != v10)
      {
        v11 = *v9;
        if (*((_DWORD *)v8 + 5) == *(_DWORD *)(*v9 + 20)
          && *((_DWORD *)v8 + 4) == *(_DWORD *)(v11 + 16)
          && !uuid_compare((const unsigned __int8 *)v8, (const unsigned __int8 *)v11))
        {
          goto LABEL_11;
        }
        ++v9;
      }
      v13 = *v8;
      v14 = *((_QWORD *)v8 + 2);
      v15 = 1;
      v12 = std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100](a3, (uint64_t)&v13);
      if (v7 == v12)
        mergeAddChildren();
      TopoSubstring::addChild((TopoSubstring *)a1, *(TopoSubstring **)(v12 + 64));
LABEL_11:
      ++v3;
    }
    while (v3 != v4);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,false>(unint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;

LABEL_1:
  v9 = (__n128 *)((char *)a2 - 24);
  v10 = (__n128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (unint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (TopoID::operator<((uint64_t)&a2[-2].n128_i64[1], (uint64_t)v10))
        {
          v29 = v10[1].n128_u64[0];
          v27 = *v10;
          v25 = *v9;
          v10[1].n128_u64[0] = a2[-1].n128_u64[1];
          *v10 = v25;
          *v9 = v27;
          a2[-1].n128_u64[1] = v29;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v10, (uint64_t)&v10[1].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v10, (uint64_t)&v10[1].n128_i64[1], (uint64_t)&v10[3], (uint64_t)&a2[-2].n128_i64[1]);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v10, (uint64_t)&v10[1].n128_i64[1], (uint64_t)&v10[3], (uint64_t)&v10[4].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v10, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v10, (uint64_t)a2);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (uint64_t)v10 + 24 * (v14 >> 1);
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v10 + 24 * v15, (uint64_t)v10, (uint64_t)&a2[-2].n128_i64[1]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v10, (uint64_t)v10 + 24 * v15, (uint64_t)&a2[-2].n128_i64[1]);
            v17 = 3 * v15;
            v18 = (uint64_t)&v10[-1] + 24 * v15 - 8;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)&v10[1].n128_i64[1], v18, (uint64_t)&a2[-3]);
            v19 = (uint64_t)&v10[3];
            v20 = (uint64_t)&v10[1].n128_i64[v17 + 1];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v19, v20, (uint64_t)&a2[-5].n128_i64[1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v18, v16, v20);
            v28 = *(_QWORD *)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v16 + 16);
            *(_OWORD *)a1 = v21;
            *(_QWORD *)(v16 + 16) = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((TopoID::operator<(a1 - 24, a1) & 1) == 0)
          {
            v10 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>(a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>((__int128 *)a1, (unint64_t)a2);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((__n128 *)a1, (__n128 *)v22);
          v10 = (__n128 *)(v22 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((__n128 *)(v22 + 24), a2))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,false>(a1, v22, a3, -v12, a5 & 1);
            v10 = (__n128 *)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,TopoID *>((uint64_t)v10, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v32 = *((_QWORD *)a2 - 2);
        v31 = a2 - 1;
        if (*(_QWORD *)v8 < v32)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v31;
          *v31 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        v33 = (__int128 *)(v8 + 16);
        v34 = (__int128 *)(v8 + 32);
        v35 = (__int128 *)(v8 + 48);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v8, (unint64_t *)(v8 + 16), (unint64_t *)(v8 + 32), (_OWORD *)(v8 + 48));
        v37 = *((_QWORD *)a2 - 2);
        v36 = a2 - 1;
        if (*(_QWORD *)(v8 + 48) < v37)
        {
          v38 = *v35;
          *v35 = *v36;
          *v36 = v38;
          if (*(_QWORD *)v34 < *(_QWORD *)v35)
          {
            v39 = *v34;
            *v34 = *v35;
            *v35 = v39;
            if (*(_QWORD *)v33 < *(_QWORD *)v34)
            {
              v40 = *v33;
              *v33 = *v34;
              *v34 = v40;
              if (*(_QWORD *)v8 < *(_QWORD *)(v8 + 16))
              {
                v86 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v33;
                *v33 = v86;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v41 = (__int128 *)(v8 + 16);
          v43 = (__int128 *)v8 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = (unint64_t *)v8;
              do
              {
                v46 = v41;
                v47 = v45[2];
                if (*v45 < v47)
                {
                  v48 = v45[3];
                  v49 = v44;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v49 + 16) = *(_OWORD *)(v8 + v49);
                    if (!v49)
                      break;
                    v50 = *(_QWORD *)(v8 + v49 - 16);
                    v49 -= 16;
                    if (v50 >= v47)
                    {
                      v51 = (_QWORD *)(v8 + v49 + 16);
                      goto LABEL_76;
                    }
                  }
                  v51 = (_QWORD *)v8;
LABEL_76:
                  *v51 = v47;
                  v51[1] = v48;
                }
                v41 = v46 + 1;
                v44 += 16;
                v45 = (unint64_t *)v46;
              }
              while (v46 + 1 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v77 = (uint64_t)v41;
              v78 = *(_QWORD *)(a1 + 16);
              if (*(_QWORD *)a1 < v78)
              {
                v79 = *(_QWORD *)(a1 + 24);
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *(_OWORD *)(v80 - 16);
                  v81 = *(_QWORD *)(v80 - 32);
                  v80 -= 16;
                }
                while (v81 < v78);
                *(_QWORD *)v80 = v78;
                *(_QWORD *)(v80 + 8) = v79;
              }
              v41 = (__int128 *)(v77 + 16);
              a1 = v77;
            }
            while ((__int128 *)(v77 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v52 = (v10 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if (v52 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = (unint64_t *)(v8 + 16 * v55);
                v57 = *v56;
                if (2 * v54 + 2 < (uint64_t)v10 && v56[2] < v57)
                {
                  v57 = v56[2];
                  v56 += 2;
                  v55 = 2 * v54 + 2;
                }
                v58 = (__int128 *)(v8 + 16 * v54);
                v59 = *v58;
                v60 = *(_QWORD *)v58;
                if (*(_QWORD *)v58 >= v57)
                {
                  do
                  {
                    v61 = (__int128 *)v56;
                    *v58 = *(_OWORD *)v56;
                    if (v52 < v55)
                      break;
                    v62 = (2 * v55) | 1;
                    v56 = (unint64_t *)(v8 + 16 * v62);
                    v55 = 2 * v55 + 2;
                    v63 = *v56;
                    if (v55 >= (uint64_t)v10)
                    {
                      v55 = v62;
                    }
                    else if (v56[2] >= v63)
                    {
                      v55 = v62;
                    }
                    else
                    {
                      v63 = v56[2];
                      v56 += 2;
                    }
                    v58 = v61;
                  }
                  while (v60 >= v63);
                  *v61 = v59;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v87 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = &v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && *((_QWORD *)v67 + 2) < *(_QWORD *)v67)
                {
                  ++v67;
                  v68 = v69;
                }
                *v66 = *v67;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if (v67 == --a2)
              {
                *v67 = v87;
              }
              else
              {
                *v67 = *a2;
                *a2 = v87;
                v70 = (uint64_t)v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (__int128 *)(v8 + 16 * v71);
                  v73 = *(_QWORD *)v67;
                  if (*(_QWORD *)v67 < *(_QWORD *)v72)
                  {
                    v74 = *((_QWORD *)v67 + 1);
                    do
                    {
                      v75 = v72;
                      *v67 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (__int128 *)(v8 + 16 * v71);
                      v67 = v75;
                    }
                    while (v73 < *(_QWORD *)v72);
                    *(_QWORD *)v75 = v73;
                    *((_QWORD *)v75 + 1) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)(a1 + 16 * (v10 >> 1)), (unint64_t *)a1, (unint64_t *)a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16 * (v10 >> 1)), (unint64_t *)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)(a1 + 16), v12 - 2, (unint64_t *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v11), (unint64_t *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)v12 - 1, v12, (unint64_t *)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v14 = *(_QWORD *)(a1 + 8);
          if (v13 < *(_QWORD *)(a1 - 16))
            goto LABEL_11;
          if (*((_QWORD *)a2 - 2) >= v13)
          {
            v26 = a1 + 16;
            do
            {
              v8 = v26;
              if (v26 >= (unint64_t)a2)
                break;
              v26 += 16;
            }
            while (*(_QWORD *)v8 >= v13);
          }
          else
          {
            v8 = a1;
            do
            {
              v25 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v25 >= v13);
          }
          v27 = a2;
          if (v8 < (unint64_t)a2)
          {
            v27 = a2;
            do
              v28 = *((_QWORD *)v27-- - 2);
            while (v28 < v13);
          }
          while (v8 < (unint64_t)v27)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v27;
            *v27 = v84;
            do
            {
              v29 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v29 >= v13);
            do
              v30 = *((_QWORD *)v27-- - 2);
            while (v30 < v13);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v14;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
LABEL_11:
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(a1 + v15 + 16);
          v15 += 16;
        }
        while (v13 < v16);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 16)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *((_QWORD *)v18-- - 2);
          }
          while (v13 >= v20);
        }
        else
        {
          do
            v19 = *((_QWORD *)v18-- - 2);
          while (v13 >= v19);
        }
        v8 = a1 + v15;
        if (v17 < (unint64_t)v18)
        {
          v21 = v18;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v21;
            *v21 = v83;
            do
            {
              v22 = *(_QWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v13 < v22);
            do
              v23 = *((_QWORD *)v21-- - 2);
            while (v13 >= v23);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v14;
        if (v17 < (unint64_t)v18)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(a1, (_OWORD *)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(v8, a2))
        {
          if (v24)
            continue;
          goto LABEL_30;
        }
        a2 = (__int128 *)(v8 - 16);
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v3 = result;
    v4 = result + 24;
    if (result + 24 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v6;
        v6 = v4;
        result = TopoID::operator<(v4, v7);
        if ((_DWORD)result)
        {
          v11 = *(_OWORD *)v6;
          v12 = *(_QWORD *)(v6 + 16);
          v8 = v5;
          while (1)
          {
            v9 = v3 + v8;
            *(_OWORD *)(v9 + 24) = *(_OWORD *)(v3 + v8);
            *(_QWORD *)(v9 + 40) = *(_QWORD *)(v3 + v8 + 16);
            if (!v8)
              break;
            v8 -= 24;
            result = TopoID::operator<((uint64_t)&v11, v8 + v3);
            if ((result & 1) == 0)
            {
              v10 = v3 + v8 + 24;
              goto LABEL_10;
            }
          }
          v10 = v3;
LABEL_10:
          *(_OWORD *)v10 = v11;
          *(_QWORD *)(v10 + 16) = v12;
        }
        v4 = v6 + 24;
        v5 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (result != a2)
  {
    v3 = result;
    v4 = result + 24;
    if (result + 24 != a2)
    {
      v5 = result - 24;
      do
      {
        v6 = v3;
        v3 = v4;
        result = TopoID::operator<(v4, v6);
        if ((_DWORD)result)
        {
          v8 = *(_OWORD *)v3;
          v9 = *(_QWORD *)(v3 + 16);
          v7 = v5;
          do
          {
            *(_OWORD *)(v7 + 48) = *(_OWORD *)(v7 + 24);
            *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 40);
            result = TopoID::operator<((uint64_t)&v8, v7);
            v7 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v7 + 48) = v8;
          *(_QWORD *)(v7 + 64) = v9;
        }
        v4 = v3 + 24;
        v5 += 24;
      }
      while (v3 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = TopoID::operator<(a2, a1);
  result = TopoID::operator<(a3, a2);
  if ((v6 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = v13;
    *(_OWORD *)a3 = v12;
    *(_QWORD *)(a3 + 16) = v11;
    if (!TopoID::operator<(a2, a1))
      return 1;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_OWORD *)a1;
    v16 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v16;
    *(_OWORD *)a2 = v15;
    *(_QWORD *)(a2 + 16) = v14;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_OWORD *)a1;
    v19 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v19;
    *(_OWORD *)a2 = v18;
    *(_QWORD *)(a2 + 16) = v17;
    if (!TopoID::operator<(a3, a2))
      return 1;
    v20 = *(_QWORD *)(a2 + 16);
    v21 = *(_OWORD *)a2;
    v22 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = v22;
    *(_OWORD *)a3 = v21;
    *(_QWORD *)(a3 + 16) = v20;
    return 2;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_OWORD *)a1;
  v10 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = v10;
  *(_OWORD *)a3 = v9;
  *(_QWORD *)(a3 + 16) = v8;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a1;
  v15 = *(_QWORD *)(a1 + 16);
  if ((TopoID::operator<((uint64_t)&v14, a2 - 24) & 1) != 0)
  {
    v4 = a1;
    do
      v4 += 24;
    while ((TopoID::operator<((uint64_t)&v14, v4) & 1) == 0);
  }
  else
  {
    v5 = a1 + 24;
    do
    {
      v4 = v5;
      if (v5 >= v2)
        break;
      v6 = TopoID::operator<((uint64_t)&v14, v5);
      v5 = v4 + 24;
    }
    while (!v6);
  }
  if (v4 < v2)
  {
    do
      v2 -= 24;
    while ((TopoID::operator<((uint64_t)&v14, v2) & 1) != 0);
  }
  while (v4 < v2)
  {
    v7 = *(_OWORD *)v4;
    v17 = *(_QWORD *)(v4 + 16);
    v16 = v7;
    v8 = *(_OWORD *)v2;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
    *(_OWORD *)v4 = v8;
    v9 = v16;
    *(_QWORD *)(v2 + 16) = v17;
    *(_OWORD *)v2 = v9;
    do
      v4 += 24;
    while (!TopoID::operator<((uint64_t)&v14, v4));
    do
      v2 -= 24;
    while ((TopoID::operator<((uint64_t)&v14, v2) & 1) != 0);
  }
  v10 = (__int128 *)(v4 - 24);
  if (v4 - 24 != a1)
  {
    v11 = *v10;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 - 8);
    *(_OWORD *)a1 = v11;
  }
  v12 = v14;
  *(_QWORD *)(v4 - 8) = v15;
  *v10 = v12;
  return v4;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>(__int128 *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v4 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v15 = *a1;
  v16 = *((_QWORD *)a1 + 2);
  do
    v4 += 24;
  while ((TopoID::operator<((uint64_t)a1 + v4, (uint64_t)&v15) & 1) != 0);
  v5 = (unint64_t)a1 + v4;
  v6 = (uint64_t)a1 + v4 - 24;
  if (v4 == 24)
  {
    do
    {
      if (v5 >= a2)
        break;
      a2 -= 24;
    }
    while ((TopoID::operator<(a2, (uint64_t)&v15) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!TopoID::operator<(a2, (uint64_t)&v15));
  }
  if (v5 < a2)
  {
    v7 = (unint64_t)a1 + v4;
    v8 = a2;
    do
    {
      v17 = *(_OWORD *)v7;
      v9 = v17;
      v18 = *(_QWORD *)(v7 + 16);
      v10 = v18;
      v11 = *(_QWORD *)(v8 + 16);
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_QWORD *)(v7 + 16) = v11;
      *(_QWORD *)(v8 + 16) = v10;
      *(_OWORD *)v8 = v9;
      do
        v7 += 24;
      while ((TopoID::operator<(v7, (uint64_t)&v15) & 1) != 0);
      do
        v8 -= 24;
      while (!TopoID::operator<(v8, (uint64_t)&v15));
    }
    while (v7 < v8);
    v6 = v7 - 24;
  }
  if ((__int128 *)v6 != a1)
  {
    v12 = *(_OWORD *)v6;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v6 + 16);
    *a1 = v12;
  }
  v13 = v15;
  *(_QWORD *)(v6 + 16) = v16;
  *(_OWORD *)v6 = v13;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if (TopoID::operator<((uint64_t)&a2[-2].n128_i64[1], (uint64_t)a1))
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a1[4].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    default:
      v10 = (uint64_t)&a1[3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3]);
      v11 = (uint64_t)&a1[4].n128_i64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (TopoID::operator<(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = *(_QWORD *)(v11 + 16);
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        if (v14 == -48)
          break;
        v14 -= 24;
        if ((TopoID::operator<((uint64_t)&v17, (uint64_t)(v15 + 24)) & 1) == 0)
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 24 == (_QWORD)a2;
    }
    v10 = v11;
    v12 += 24;
    v11 += 24;
    if ((__n128 *)v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)a1, a2, a3);
  if (TopoID::operator<(a4, a3))
  {
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_QWORD *)(a4 + 16) = v9;
    if (TopoID::operator<(a3, a2))
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(__n128 *)a2;
      v14 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v14;
      *(__n128 *)a3 = v13;
      *(_QWORD *)(a3 + 16) = v12;
      if (TopoID::operator<(a2, (uint64_t)a1))
      {
        v15 = a1[1].n128_u64[0];
        result = *a1;
        v16 = *(_QWORD *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a2, a3, a4);
  if (TopoID::operator<(a5, a4))
  {
    v11 = *(_QWORD *)(a4 + 16);
    v12 = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_QWORD *)(a5 + 16) = v11;
    if (TopoID::operator<(a4, a3))
    {
      v14 = *(_QWORD *)(a3 + 16);
      v15 = *(_OWORD *)a3;
      v16 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(_QWORD *)(a4 + 16) = v14;
      if (TopoID::operator<(a3, a2))
      {
        v17 = *(_QWORD *)(a2 + 16);
        v18 = *(__n128 *)a2;
        v19 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(_QWORD *)(a3 + 16) = v17;
        if (TopoID::operator<(a2, (uint64_t)a1))
        {
          v20 = a1[1].n128_u64[0];
          result = *a1;
          v21 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v24;
  uint64_t v25;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (TopoID::operator<(v14, a1))
        {
          v15 = *(_QWORD *)(v14 + 16);
          v16 = *(_OWORD *)v14;
          v17 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_QWORD *)(v14 + 16) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a4, v9, a1);
        }
        v14 += 24;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = a2 - 24;
      do
      {
        v24 = *(_OWORD *)a1;
        v25 = *(_QWORD *)(a1 + 16);
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a4, v18);
        if (v19 == v20)
        {
          *(_OWORD *)v20 = v24;
          *(_QWORD *)(v20 + 16) = v25;
        }
        else
        {
          v21 = *(_OWORD *)v19;
          *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
          *(_OWORD *)v20 = v21;
          *(_OWORD *)v19 = v24;
          *(_QWORD *)(v19 + 16) = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, v20 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v20 + 24 - a1) >> 3));
        }
        v19 -= 24;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      v9 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
      v10 = a1 + 24 * v9;
      v11 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
      if (v11 < a3 && TopoID::operator<(a1 + 24 * v9, v10 + 24))
      {
        v10 += 24;
        v9 = v11;
      }
      if ((TopoID::operator<(v10, v5) & 1) == 0)
      {
        v17 = *(__n128 *)v5;
        v18 = *(_QWORD *)(v5 + 16);
        do
        {
          v13 = (__n128 *)v10;
          v14 = *(_OWORD *)v10;
          *(_QWORD *)(v5 + 16) = *(_QWORD *)(v10 + 16);
          *(_OWORD *)v5 = v14;
          if (v7 < v9)
            break;
          v15 = (2 * v9) | 1;
          v10 = a1 + 24 * v15;
          v16 = 2 * v9 + 2;
          if (v16 < a3)
          {
            if (TopoID::operator<(a1 + 24 * v15, v10 + 24))
            {
              v10 += 24;
              v15 = v16;
            }
          }
          v5 = (uint64_t)v13;
          v9 = v15;
        }
        while (!TopoID::operator<(v10, (uint64_t)&v17));
        result = v17;
        v13[1].n128_u64[0] = v18;
        *v13 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 24 * v5 + 24;
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3 && TopoID::operator<(a1 + 24 * v5 + 24, a1 + 24 * v5 + 48))
    {
      v8 += 24;
      v9 = v10;
    }
    v11 = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)a1 = v11;
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a4 >= 2)
  {
    v5 = (unint64_t)(a4 - 2) >> 1;
    v6 = a1 + 24 * v5;
    v7 = a2 - 24;
    if (TopoID::operator<(v6, a2 - 24))
    {
      v11 = *(_OWORD *)v7;
      v12 = *(_QWORD *)(v7 + 16);
      do
      {
        v9 = v6;
        v10 = *(_OWORD *)v6;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v7 = v10;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = a1 + 24 * v5;
        v7 = v9;
      }
      while ((TopoID::operator<(v6, (uint64_t)&v11) & 1) != 0);
      result = *(double *)&v11;
      *(_OWORD *)v9 = v11;
      *(_QWORD *)(v9 + 16) = v12;
    }
  }
  return result;
}

char *std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<TopoSubstring *>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1BDDE59C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<TopoSubstring *,unsigned long>,void *> *>>(_QWORD *a1, __n128 *a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v9 = a2[1].n128_u64[1];
      v8[2] = a2[1].n128_u64[0];
      v8[3] = v9;
      v10 = (_QWORD *)*v8;
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(a1, v8);
      a2 = (__n128 *)a2->n128_u64[0];
      v8 = v10;
      if (!v10)
        goto LABEL_9;
    }
    do
    {
      v11 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_multi<std::pair<TopoSubstring * const,unsigned long> const&>(a1, a2 + 1);
      a2 = (__n128 *)a2->n128_u64[0];
    }
  }
}

void sub_1BDDE5A98(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1BDDE5AB8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_multi<std::pair<TopoSubstring * const,unsigned long> const&>(_QWORD *a1, __n128 *a2)
{
  _QWORD *v4;

  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__construct_node<std::pair<TopoSubstring * const,unsigned long> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(a1, v4);
}

void sub_1BDDE6008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__construct_node<std::pair<TopoSubstring * const,unsigned long> const&>@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = a1 + 16;
  v6 = (__n128 *)operator new(0x20uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = *a2;
  v6[1] = *a2;
  *(_BYTE *)(a3 + 16) = 1;
  v8 = v6[1].n128_u64[0];
  v9 = HIDWORD(v8);
  v10 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69
                                                                         * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x2AAAAAAAAAAAAAALL)
    v1 = 0x2AAAAAAAAAAAAAALL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(48 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(uint64_t a1, __int128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 v10;
  __n128 *v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __n128 *v23;
  uint64_t v24;
  __n128 *v25;
  __n128 *v26;
  __n128 v27;
  __n128 v28;
  __int128 v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  unint64_t v40;
  __n128 v41;
  __n128 *v42;
  __n128 *v43;
  __n128 *v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __int128 v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  __n128 *v52;
  __n128 *v53;
  __n128 v54;
  uint64_t v55;
  __n128 *v56;
  __n128 *v57;
  __n128 v58;
  __n128 v60;
  __int128 v61;
  __n128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD v69[2];
  unint64_t v70;
  uint64_t v71;
  __n128 v72;
  __n128 v73;
  unint64_t v74;
  __int128 v75;
  __n128 v76;
  __n128 v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (a3 < 2)
    return a6.n128_f64[0];
  v7 = a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 > 0)
    {
      v13 = a4;
      v14 = a3 >> 1;
      v15 = (__n128 *)(a1 + 48 * (a3 >> 1));
      v16 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, v15, v16, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v7 + 48 * (a3 >> 1), a2, a3 - (a3 >> 1), v13, a5);
        a6.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((__int128 *)v7, (__int128 *)(v7 + 48 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (__int128 *)v13, a5).n128_u64[0];
        return a6.n128_f64[0];
      }
      v41 = std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((__n128 *)a1, v15, v16, a4, a6);
      v42 = &v13[3 * v14];
      a6.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((__n128 *)(v7 + 48 * (a3 >> 1)), (__n128 *)a2, a3 - (a3 >> 1), v42, v41).n128_u64[0];
      v43 = &v13[3 * a3];
      v44 = v42;
      while (1)
      {
        if (v44 == v43)
        {
          if (v13 != v42)
          {
            v55 = 0;
            do
            {
              v56 = &v13[v55];
              v57 = (__n128 *)(v7 + v55 * 16);
              a6 = v13[v55];
              v58 = v13[v55 + 1];
              v57[2].n128_u64[0] = v13[v55 + 2].n128_u64[0];
              *v57 = a6;
              v57[1] = v58;
              v57[2].n128_u64[1] = v13[v55 + 2].n128_u64[1];
              v55 += 3;
            }
            while (&v56[3] != v42);
          }
          return a6.n128_f64[0];
        }
        v45 = *v44;
        v46 = v44[2];
        v79 = v44[1];
        v80 = v46;
        v78 = v45;
        v47 = v13[2];
        v48 = (__int128)*v13;
        v76 = v13[1];
        v77 = v47;
        v75 = v48;
        if (v79.n128_u64[1] == v76.n128_u64[1])
        {
          if ((TopoID::operator<((uint64_t)&v78, (uint64_t)&v75) & 1) == 0)
          {
LABEL_37:
            a6 = *v13;
            v50 = v13[1];
            *(_QWORD *)(v7 + 32) = v13[2].n128_u64[0];
            *(__n128 *)v7 = a6;
            *(__n128 *)(v7 + 16) = v50;
            *(_QWORD *)(v7 + 40) = v13[2].n128_u64[1];
            v13 += 3;
            goto LABEL_38;
          }
        }
        else if (v79.n128_u64[1] >= v76.n128_u64[1])
        {
          goto LABEL_37;
        }
        a6 = *v44;
        v49 = v44[1];
        *(_QWORD *)(v7 + 32) = v44[2].n128_u64[0];
        *(__n128 *)v7 = a6;
        *(__n128 *)(v7 + 16) = v49;
        *(_QWORD *)(v7 + 40) = v44[2].n128_u64[1];
        v44 += 3;
LABEL_38:
        v7 += 48;
        if (v13 == v42)
        {
          if (v44 != v43)
          {
            v51 = 0;
            do
            {
              v52 = &v44[v51];
              v53 = (__n128 *)(v7 + v51 * 16);
              a6 = v44[v51];
              v54 = v44[v51 + 1];
              v53[2].n128_u64[0] = v44[v51 + 2].n128_u64[0];
              *v53 = a6;
              v53[1] = v54;
              v53[2].n128_u64[1] = v44[v51 + 2].n128_u64[1];
              v51 += 3;
            }
            while (&v52[3] != v43);
          }
          return a6.n128_f64[0];
        }
      }
    }
    if ((__int128 *)a1 == a2)
      return a6.n128_f64[0];
    v23 = (__n128 *)(a1 + 48);
    if ((__int128 *)(a1 + 48) == a2)
      return a6.n128_f64[0];
    v24 = 0;
    v25 = (__n128 *)a1;
LABEL_15:
    v26 = v25;
    v25 = v23;
    v27 = *v23;
    v28 = v23[2];
    v79 = v23[1];
    v80 = v28;
    v78 = v27;
    a6 = v26[2];
    v29 = (__int128)*v26;
    v76 = v26[1];
    v77 = a6;
    v75 = v29;
    if (v79.n128_u64[1] == v76.n128_u64[1])
    {
      if ((TopoID::operator<((uint64_t)&v78, (uint64_t)&v75) & 1) == 0)
        goto LABEL_28;
    }
    else if (v79.n128_u64[1] >= v76.n128_u64[1])
    {
      goto LABEL_28;
    }
    v30 = v25[1];
    v72 = *v25;
    v73 = v30;
    v74 = v25[2].n128_u64[0];
    v31 = v26[5].n128_i64[1];
    v32 = *v26;
    v33 = v26[1];
    v25[2].n128_u64[0] = v26[2].n128_u64[0];
    *v25 = v32;
    v25[1] = v33;
    v25[2].n128_u64[1] = v26[2].n128_u64[1];
    if (v26 == (__n128 *)v7)
    {
LABEL_26:
      v26 = (__n128 *)v7;
      goto LABEL_27;
    }
    v34 = v24;
    while (1)
    {
      v35 = v7 + v34;
      v69[0] = v72;
      v69[1] = v73;
      v70 = v74;
      v71 = v31;
      v36 = *(_OWORD *)(v7 + v34 - 16);
      v37 = *(_OWORD *)(v7 + v34 - 48);
      v67 = *(_OWORD *)(v7 + v34 - 32);
      v68 = v36;
      v66 = v37;
      if (v73.n128_u64[1] == *((_QWORD *)&v67 + 1))
      {
        if ((TopoID::operator<((uint64_t)v69, (uint64_t)&v66) & 1) == 0)
        {
          v26 = (__n128 *)(v7 + v34);
LABEL_27:
          a6.n128_u64[0] = v72.n128_u64[0];
          v39 = v73;
          v40 = v74;
          *v26 = v72;
          v26[1] = v39;
          v26[2].n128_u64[0] = v40;
          v26[2].n128_u64[1] = v31;
LABEL_28:
          v23 = v25 + 3;
          v24 += 48;
          if (&v25[3] == (__n128 *)a2)
            return a6.n128_f64[0];
          goto LABEL_15;
        }
      }
      else if (v73.n128_u64[1] >= *((_QWORD *)&v67 + 1))
      {
        goto LABEL_27;
      }
      v26 -= 3;
      v38 = *(_OWORD *)(v35 - 32);
      *(_OWORD *)v35 = *(_OWORD *)(v35 - 48);
      *(_OWORD *)(v35 + 16) = v38;
      *(_QWORD *)(v35 + 32) = *(_QWORD *)(v35 - 16);
      *(_QWORD *)(v7 + v34 + 40) = *(_QWORD *)(v7 + v34 - 8);
      v34 -= 48;
      if (!v34)
        goto LABEL_26;
    }
  }
  v8 = *(a2 - 3);
  v9 = *(a2 - 1);
  v64 = *(a2 - 2);
  v65 = v9;
  v63 = v8;
  a6 = *(__n128 *)(a1 + 32);
  v10 = *(__n128 *)a1;
  v61 = *(_OWORD *)(a1 + 16);
  v62 = a6;
  v60 = v10;
  if (*((_QWORD *)&v64 + 1) == *((_QWORD *)&v61 + 1))
  {
    if ((TopoID::operator<((uint64_t)&v63, (uint64_t)&v60) & 1) == 0)
      return a6.n128_f64[0];
  }
  else if (*((_QWORD *)&v64 + 1) >= *((_QWORD *)&v61 + 1))
  {
    return a6.n128_f64[0];
  }
  v17 = a2 - 3;
  a6 = *(__n128 *)v7;
  v18 = *(_OWORD *)(v7 + 16);
  v19 = *(_QWORD *)(v7 + 32);
  v20 = *((_QWORD *)a2 - 2);
  v21 = *(a2 - 2);
  *(_OWORD *)v7 = *(a2 - 3);
  *(_OWORD *)(v7 + 16) = v21;
  *(_QWORD *)(v7 + 32) = v20;
  *((_QWORD *)v17 + 4) = v19;
  *v17 = (__int128)a6;
  v17[1] = v18;
  v22 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 - 1);
  *((_QWORD *)a2 - 1) = v22;
  return a6.n128_f64[0];
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 v9;
  __n128 *v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 *v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  __n128 v37;
  __n128 *v38;
  __n128 *v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  __n128 *v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  __n128 *v52;
  __n128 v53;
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  __n128 v69;
  __n128 v70;
  __n128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return result;
  v5 = a4;
  v8 = a1;
  if (a3 == 2)
  {
    v10 = a2 - 3;
    v11 = a2[-3];
    v12 = a2[-1];
    v58 = a2[-2];
    v59 = v12;
    v57 = v11;
    v13 = a1[2];
    v14 = *a1;
    v55 = a1[1];
    v56 = v13;
    v54 = v14;
    if (v58.n128_u64[1] == v55.n128_u64[1])
    {
      if ((TopoID::operator<((uint64_t)&v57, (uint64_t)&v54) & 1) != 0)
        goto LABEL_7;
    }
    else if (v58.n128_u64[1] < v55.n128_u64[1])
    {
LABEL_7:
      v15 = *v10;
      v16 = a2[-1];
      v5[1] = a2[-2];
      v5[2] = v16;
      *v5 = v15;
      result = *v8;
      v17 = v8[1];
      v18 = v8[2];
LABEL_42:
      v5[4] = v17;
      v5[5] = v18;
      v5[3] = result;
      return result;
    }
    v49 = *v8;
    v50 = v8[2];
    v5[1] = v8[1];
    v5[2] = v50;
    *v5 = v49;
    result = *v10;
    v17 = a2[-2];
    v18 = a2[-1];
    goto LABEL_42;
  }
  if (a3 == 1)
  {
    result = *a1;
    v9 = a1[2];
    a4[1] = a1[1];
    a4[2] = v9;
    *a4 = result;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v38 = &a1[3 * (a3 >> 1)];
    std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, v38, a3 >> 1, a4, a3 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(&v8[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[3 * (a3 >> 1)], a3 - (a3 >> 1));
    v39 = &v8[3 * (a3 >> 1)];
    while (1)
    {
      if (v39 == a2)
      {
        if (v8 != v38)
        {
          v51 = 0;
          do
          {
            v52 = &v5[v51];
            result = v8[v51];
            v53 = v8[v51 + 2];
            v52[1] = v8[v51 + 1];
            v52[2] = v53;
            *v52 = result;
            v51 += 3;
          }
          while (&v8[v51] != v38);
        }
        return result;
      }
      v40 = *v39;
      v41 = v39[2];
      v70 = v39[1];
      v71 = v41;
      v69 = v40;
      v42 = v8[2];
      v43 = *v8;
      v67 = v8[1];
      v68 = v42;
      v66 = v43;
      if (v70.n128_u64[1] == v67.n128_u64[1])
      {
        if ((TopoID::operator<((uint64_t)&v69, (uint64_t)&v66) & 1) == 0)
        {
LABEL_34:
          result = *v8;
          v45 = v8[2];
          v5[1] = v8[1];
          v5[2] = v45;
          *v5 = result;
          v8 += 3;
          goto LABEL_35;
        }
      }
      else if (v70.n128_u64[1] >= v67.n128_u64[1])
      {
        goto LABEL_34;
      }
      result = *v39;
      v44 = v39[2];
      v5[1] = v39[1];
      v5[2] = v44;
      *v5 = result;
      v39 += 3;
LABEL_35:
      v5 += 3;
      if (v8 == v38)
      {
        if (v39 != a2)
        {
          v46 = 0;
          do
          {
            v47 = &v5[v46];
            result = v39[v46];
            v48 = v39[v46 + 2];
            v47[1] = v39[v46 + 1];
            v47[2] = v48;
            *v47 = result;
            v46 += 3;
          }
          while (&v39[v46] != a2);
        }
        return result;
      }
    }
  }
  if (a1 == a2)
    return result;
  result = *a1;
  v19 = a1[2];
  a4[1] = a1[1];
  a4[2] = v19;
  *a4 = result;
  v20 = a1 + 3;
  if (&a1[3] == a2)
    return result;
  v21 = 0;
  v22 = a4;
  do
  {
    v23 = v20;
    v24 = v22 + 3;
    v25 = v20[2];
    v26 = *v20;
    v70 = v20[1];
    v71 = v25;
    v69 = v26;
    v27 = v22[1];
    v66 = *v22;
    v67 = v27;
    v68 = v22[2];
    if (v70.n128_u64[1] == v27.n128_u64[1])
    {
      if ((TopoID::operator<((uint64_t)&v69, (uint64_t)&v66) & 1) == 0)
      {
LABEL_23:
        result = *v23;
        v36 = v23[2];
        v22[4] = v23[1];
        v22[5] = v36;
        *v24 = result;
        goto LABEL_26;
      }
    }
    else if (v70.n128_u64[1] >= v67.n128_u64[1])
    {
      goto LABEL_23;
    }
    v28 = v22[1];
    *v24 = *v22;
    v22[4] = v28;
    v22[5] = v22[2];
    v29 = v5;
    if (v22 == v5)
      goto LABEL_25;
    v30 = v21;
    while (1)
    {
      v31 = (uint64_t)v5 + v30;
      v32 = v23[2];
      v33 = *v23;
      v64 = v23[1];
      v65 = v32;
      v34 = *(__int128 *)((char *)&v5[-2] + v30);
      v60 = *(__int128 *)((char *)&v5[-3] + v30);
      v61 = v34;
      v62 = *(__int128 *)((char *)&v5[-1] + v30);
      v63 = v33;
      if (v64.n128_u64[1] != *((_QWORD *)&v34 + 1))
      {
        if (v64.n128_u64[1] >= *((_QWORD *)&v61 + 1))
        {
          v29 = v22;
          goto LABEL_25;
        }
        goto LABEL_20;
      }
      if ((TopoID::operator<((uint64_t)&v63, (uint64_t)&v60) & 1) == 0)
        break;
LABEL_20:
      v22 -= 3;
      v35 = *(_OWORD *)(v31 - 32);
      *(_OWORD *)v31 = *(_OWORD *)(v31 - 48);
      *(_OWORD *)(v31 + 16) = v35;
      *(_QWORD *)(v31 + 32) = *(_QWORD *)(v31 - 16);
      *(unint64_t *)((char *)&v5[2].n128_u64[1] + v30) = *(unint64_t *)((char *)&v5->n128_u64[-1] + v30);
      v30 -= 48;
      if (!v30)
      {
        v29 = v5;
        goto LABEL_25;
      }
    }
    v29 = (__n128 *)((char *)v5 + v30);
LABEL_25:
    result = *v23;
    v37 = v23[1];
    v29[2].n128_u64[0] = v23[2].n128_u64[0];
    *v29 = result;
    v29[1] = v37;
    v29[2].n128_u64[1] = v8[5].n128_u64[1];
LABEL_26:
    v20 = v23 + 3;
    v21 += 48;
    v22 = v24;
    v8 = v23;
  }
  while (&v23[3] != a2);
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __n128 v38;
  uint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 *v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __n128 v47;
  __int128 *v48;
  __int128 *v49;
  char v50;
  __int128 v51;
  __int128 *v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  __int128 v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __n128 v62;
  __int128 v63;
  __int128 *v64;
  char v65;
  __int128 v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  __int128 *v73;
  __int128 v74;
  unint64_t v75;
  __int128 *v76;
  __int128 *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v84;
  __int128 v85;
  __n128 v86;
  __n128 v87;
  __int128 v88;
  __int128 v89;
  __n128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v7 = a5;
    while (v7 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (1)
      {
        v13 = (__n128)*a2;
        v14 = a2[2];
        v88 = a2[1];
        v89 = v14;
        v87 = v13;
        result = (__n128)a1[v11 / 0x10 + 2];
        v16 = a1[v11 / 0x10];
        v85 = a1[v11 / 0x10 + 1];
        v86 = result;
        v84 = v16;
        if (*((_QWORD *)&v88 + 1) != *((_QWORD *)&v85 + 1))
        {
          if (*((_QWORD *)&v88 + 1) < *((_QWORD *)&v85 + 1))
            break;
          goto LABEL_11;
        }
        if ((TopoID::operator<((uint64_t)&v87, (uint64_t)&v84) & 1) != 0)
          break;
LABEL_11:
        v11 += 48;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v18 = -v12;
      v19 = &a1[v11 / 0x10];
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          v67 = &a1[v11 / 0x10];
          v68 = a1[v11 / 0x10];
          v69 = a1[v11 / 0x10 + 1];
          *(_QWORD *)&v95 = *(_QWORD *)&a1[v11 / 0x10 + 2];
          v93 = v68;
          v94 = v69;
          result = (__n128)*a2;
          v70 = a2[1];
          *((_QWORD *)v67 + 4) = *((_QWORD *)a2 + 4);
          *v67 = (__int128)result;
          v67[1] = v70;
          *a2 = v93;
          result.n128_u64[0] = v94;
          a2[1] = v94;
          *((_QWORD *)a2 + 4) = v95;
          v71 = *((_QWORD *)&a1[v11 / 0x10 + 2] + 1);
          *((_QWORD *)v67 + 5) = *((_QWORD *)a2 + 5);
          *((_QWORD *)a2 + 5) = v71;
          return result;
        }
        if (v12 > 0)
          v18 = 1 - v12;
        v80 = v18 >> 1;
        v19 = &a1[3 * (v18 >> 1) + v11 / 0x10];
        v21 = a2;
        if (a2 == a3)
        {
LABEL_31:
          v79 = 0xAAAAAAAAAAAAAAABLL * (v21 - a2);
          v22 = (uint64_t)&a1[3 * v80 + v11 / 0x10];
          goto LABEL_33;
        }
        v32 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
        v21 = a2;
        while (2)
        {
          v33 = v32 >> 1;
          v34 = &v21[3 * (v32 >> 1)];
          v35 = *v34;
          v36 = v34[2];
          v94 = v34[1];
          v95 = v36;
          v93 = v35;
          v37 = v19[2];
          v38 = (__n128)*v19;
          v91 = v19[1];
          v92 = v37;
          v90 = v38;
          if (*((_QWORD *)&v94 + 1) == *((_QWORD *)&v91 + 1))
          {
            if ((TopoID::operator<((uint64_t)&v93, (uint64_t)&v90) & 1) != 0)
            {
LABEL_44:
              v21 = v34 + 3;
              v33 = v32 + ~v33;
            }
          }
          else if (*((_QWORD *)&v94 + 1) < *((_QWORD *)&v91 + 1))
          {
            goto LABEL_44;
          }
          v32 = v33;
          if (!v33)
            goto LABEL_31;
          continue;
        }
      }
      if (v7 >= 0)
        v20 = v7;
      else
        v20 = v7 + 1;
      v79 = v20 >> 1;
      v21 = &a2[3 * (v20 >> 1)];
      v22 = (uint64_t)&a1[v11 / 0x10];
      if ((char *)a2 - (char *)a1 != v11)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)a1 - v11) >> 4);
        v19 = &a1[v11 / 0x10];
        while (1)
        {
          v24 = v23 >> 1;
          v25 = &v19[3 * (v23 >> 1)];
          v26 = *v21;
          v27 = v21[2];
          v94 = v21[1];
          v95 = v27;
          v93 = v26;
          v28 = v25[2];
          v29 = (__n128)*v25;
          v91 = v25[1];
          v92 = v28;
          v90 = v29;
          if (*((_QWORD *)&v94 + 1) == *((_QWORD *)&v91 + 1))
            break;
          if (*((_QWORD *)&v94 + 1) >= *((_QWORD *)&v91 + 1))
            goto LABEL_22;
LABEL_23:
          v23 = v24;
          if (!v24)
          {
            v22 = (uint64_t)v19;
            goto LABEL_32;
          }
        }
        if ((TopoID::operator<((uint64_t)&v93, (uint64_t)&v90) & 1) != 0)
          goto LABEL_23;
LABEL_22:
        v19 = v25 + 3;
        v24 = v23 + ~v24;
        goto LABEL_23;
      }
LABEL_32:
      v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)a1 - v11) >> 4);
LABEL_33:
      v30 = v21;
      if (v19 != a2)
      {
        v30 = (__int128 *)v22;
        if (v21 != a2)
          v30 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v22, a2, v21);
      }
      a4 = -(v80 + v12);
      v31 = v7 - v79;
      if (v80 + v79 >= v7 - (v80 + v79) - v12)
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v30, v21, a3, -(v80 + v12), v7 - v79, a6, a7);
        v21 = (__int128 *)v22;
        v31 = v79;
        a4 = v80;
        a3 = v30;
        a1 = (__int128 *)((char *)a1 + v11);
      }
      else
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(&a1[v11 / 0x10], v22, v30, v80, v79, a6, a7);
        a1 = v30;
      }
      v7 = v31;
      a2 = v21;
      if (!v31)
        return result;
    }
    if (a4 > v7)
    {
      if (a3 == a2)
        return result;
      v39 = 0;
      do
      {
        v40 = &a6[v39];
        result = (__n128)a2[v39];
        v41 = a2[v39 + 2];
        v40[1] = a2[v39 + 1];
        v40[2] = v41;
        *v40 = (__int128)result;
        v39 += 3;
      }
      while (&a2[v39] != a3);
      if (!(v39 * 16))
        return result;
      v42 = &a6[v39];
      while (1)
      {
        if (a2 == a1)
        {
          v72 = 0;
          do
          {
            v73 = &a3[v72];
            result = (__n128)v42[v72 - 3];
            v74 = v42[v72 - 2];
            *((_QWORD *)v73 - 2) = *(_QWORD *)&v42[v72 - 1];
            *(v73 - 3) = (__int128)result;
            *(v73 - 2) = v74;
            *((_QWORD *)v73 - 1) = *((_QWORD *)&v42[v72 - 1] + 1);
            v72 -= 3;
          }
          while (&v42[v72] != a6);
          return result;
        }
        v43 = a2 - 3;
        v44 = *(v42 - 3);
        v45 = *(v42 - 1);
        v94 = *(v42 - 2);
        v95 = v45;
        v93 = v44;
        v46 = *(a2 - 1);
        v47 = (__n128)*(a2 - 3);
        v91 = *(a2 - 2);
        v92 = v46;
        v90 = v47;
        if (*((_QWORD *)&v94 + 1) == *((_QWORD *)&v91 + 1))
        {
          v50 = TopoID::operator<((uint64_t)&v93, (uint64_t)&v90);
          v48 = a3;
          if ((v50 & 1) == 0)
          {
LABEL_60:
            v43 = v42 - 3;
            v49 = v42;
            v42 -= 3;
            goto LABEL_61;
          }
        }
        else
        {
          v48 = a3;
          if (*((_QWORD *)&v94 + 1) >= *((_QWORD *)&v91 + 1))
            goto LABEL_60;
        }
        v49 = a2;
        a2 -= 3;
LABEL_61:
        result = (__n128)*v43;
        v51 = v43[1];
        *((_QWORD *)v48 - 2) = *((_QWORD *)v43 + 4);
        *(v48 - 3) = (__int128)result;
        *(v48 - 2) = v51;
        *((_QWORD *)v48 - 1) = *((_QWORD *)v49 - 1);
        a3 = v48 - 3;
        if (v42 == a6)
          return result;
      }
    }
    v52 = a3;
    if (a1 != a2)
    {
      v53 = 0;
      v54 = a6;
      do
      {
        v55 = &a6[v53];
        result = (__n128)a1[v53];
        v56 = a1[v53 + 2];
        v55[1] = a1[v53 + 1];
        v55[2] = v56;
        *v55 = (__int128)result;
        v53 += 3;
      }
      while (&a1[v53] != a2);
      if (v53 * 16)
      {
        v57 = &a6[v53];
        v58 = (uint64_t)&a6[v53 - 3];
        do
        {
          if (a2 == v52)
          {
            v75 = 0;
            do
            {
              v76 = &a1[v75];
              v77 = &v54[v75];
              result = (__n128)v54[v75];
              v78 = v54[v75 + 1];
              *((_QWORD *)v76 + 4) = *(_QWORD *)&v54[v75 + 2];
              *v76 = (__int128)result;
              v76[1] = v78;
              *((_QWORD *)v76 + 5) = *((_QWORD *)&v54[v75 + 2] + 1);
              v75 += 3;
            }
            while ((__int128 *)v58 != v77);
            return result;
          }
          v59 = *a2;
          v60 = a2[2];
          v94 = a2[1];
          v95 = v60;
          v93 = v59;
          v61 = v54[2];
          v62 = (__n128)*v54;
          v91 = v54[1];
          v92 = v61;
          v90 = v62;
          if (*((_QWORD *)&v94 + 1) == *((_QWORD *)&v91 + 1))
          {
            v64 = v54;
            v65 = TopoID::operator<((uint64_t)&v93, (uint64_t)&v90);
            v54 = v64;
            v52 = a3;
            if ((v65 & 1) == 0)
            {
LABEL_73:
              result = (__n128)*v54;
              v66 = v54[1];
              *((_QWORD *)a1 + 4) = *((_QWORD *)v54 + 4);
              *a1 = (__int128)result;
              a1[1] = v66;
              *((_QWORD *)a1 + 5) = *((_QWORD *)v54 + 5);
              v54 += 3;
              goto LABEL_74;
            }
          }
          else if (*((_QWORD *)&v94 + 1) >= *((_QWORD *)&v91 + 1))
          {
            goto LABEL_73;
          }
          result = (__n128)*a2;
          v63 = a2[1];
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          *a1 = (__int128)result;
          a1[1] = v63;
          *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
          a2 += 3;
LABEL_74:
          a1 += 3;
        }
        while (v57 != v54);
      }
    }
  }
  return result;
}

__int128 *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *result;
  __int128 *v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  result = (__int128 *)(a1 + 48);
  v4 = result;
  v5 = a2;
  while (1)
  {
    v6 = *(v4 - 3);
    v7 = *(v4 - 2);
    v8 = *((_QWORD *)v4 - 2);
    v9 = *((_QWORD *)v5 + 4);
    v10 = v5[1];
    *(v4 - 3) = *v5;
    *(v4 - 2) = v10;
    *((_QWORD *)v4 - 2) = v9;
    *((_QWORD *)v5 + 4) = v8;
    *v5 = v6;
    v5[1] = v7;
    v11 = *((_QWORD *)v4 - 1);
    *((_QWORD *)v4 - 1) = *((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = v11;
    v5 += 3;
    if (v5 == a3)
      break;
    if (v4 == a2)
      a2 = v5;
    v4 += 3;
    result += 3;
  }
  if (v4 != a2)
  {
    v12 = a2;
    do
    {
      while (1)
      {
        v18 = *((_QWORD *)v4 + 4);
        v16 = *v4;
        v17 = v4[1];
        v13 = *v12;
        v14 = v12[1];
        *((_QWORD *)v4 + 4) = *((_QWORD *)v12 + 4);
        *v4 = v13;
        v4[1] = v14;
        *((_QWORD *)v12 + 4) = v18;
        *v12 = v16;
        v12[1] = v17;
        v15 = *((_QWORD *)v4 + 5);
        *((_QWORD *)v4 + 5) = *((_QWORD *)v12 + 5);
        *((_QWORD *)v12 + 5) = v15;
        v4 += 3;
        v12 += 3;
        if (v12 == a3)
          break;
        if (v4 == a2)
          a2 = v12;
      }
      v12 = a2;
    }
    while (v4 != a2);
  }
  return result;
}

void std::__split_buffer<TopoSubstring **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned int>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned int>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1BDDE7640(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(28 * a2);
}

uint64_t std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<TopoSubstring *,TopoSubstring *>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,TopoSubstring *>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,TopoSubstring *>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,TopoSubstring *>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1BDDE794C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*(_QWORD *)result >= *a2)
  {
    if (v3 < v4)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*(_QWORD *)result < *a2)
      {
        v7 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v3 >= v4)
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a2 >= *a3)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *result;
      *result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      if (*(_QWORD *)a1 < *((_QWORD *)a2 - 2))
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), a2 - 1);
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 16);
      v18 = (__int128 *)(a1 + 32);
      v19 = (__int128 *)(a1 + 48);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)(a1 + 48));
      v21 = *((_QWORD *)a2 - 2);
      v20 = a2 - 1;
      if (*(_QWORD *)(a1 + 48) < v21)
      {
        v22 = *v19;
        *v19 = *v20;
        *v20 = v22;
        if (*(_QWORD *)v18 < *(_QWORD *)v19)
        {
          v23 = *v18;
          *v18 = *v19;
          *v19 = v23;
          if (*(_QWORD *)v17 < *(_QWORD *)v18)
          {
            v24 = *v17;
            *v17 = *v18;
            *v18 = v24;
            if (*(_QWORD *)a1 < *(_QWORD *)(a1 + 16))
            {
              v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (_QWORD *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (_OWORD *)(a1 + 48);
      if ((_OWORD *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *(_QWORD *)v9;
    if (*v8 < *(_QWORD *)v9)
    {
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v15 >= v13)
        {
          v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      v16 = (_OWORD *)a1;
LABEL_13:
      *v16 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 16;
    if (++v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(a1, a2, a3);
  if (*a3 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a2 < *a3)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_QWORD *)a1 < *a2)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

char *std::vector<TopoSubstring *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(*a1);
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoIDRange,objc_object  {objcproto26CRTTMergeableStringStorage}* {__strong}>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<std::pair<TopoIDRange,objc_object  {objcproto26CRTTMergeableStringStorage}* {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__hash_table<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>>>::__emplace_unique_key_args<TopoID,std::piecewise_construct_t const&,std::tuple<TopoID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = CFHashBytes();
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 9) == *(_DWORD *)(a2 + 20)
            && *((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
            && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v16 = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = **a4;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 6) = 0;
  *((_QWORD *)i + 4) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_40:
    *v24 = i;
    goto LABEL_41;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1BDDE892C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>>>::find<TopoID>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;

  v4 = CFHashBytes();
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t *)*i)
  {
    v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 9) == *(_DWORD *)(a2 + 20)
        && *((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
        && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void sub_1BDDE8AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDE8B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDE8B84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDE8C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDE8D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  a10.super_class = (Class)CRTTMergeableStringUndoEditCommand;
  -[_Unwind_Exception dealloc](&a10, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BDDE8E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BDDE8FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BDDE90B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDE982C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDE9BC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDE9F10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_48c96_ZTSNSt3__14pairI11TopoIDRangeU8__strongPU37objcproto26CRTTMergeableStringStorage11objc_objectEE(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  id result;

  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 48) = v3;
  result = *(id *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

void __destroy_helper_block_ea8_48c96_ZTSNSt3__14pairI11TopoIDRangeU8__strongPU37objcproto26CRTTMergeableStringStorage11objc_objectEE(uint64_t a1)
{

}

void sub_1BDDEA038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BDDEA1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);

  _Unwind_Resume(a1);
}

void sub_1BDDEA3B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::pair<TopoIDRange,objc_object  {objcproto26CRTTMergeableStringStorage}* {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 5;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<TopoIDRange>::__assign_with_size[abi:ne180100]<TopoIDRange*,TopoIDRange*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x924924924924924)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x492492492492492)
      v12 = 0x924924924924924;
    else
      v12 = v11;
    result = std::vector<TopoIDRange>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<TopoIDRange>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x924924924924925)
    std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void sub_1BDDEA7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BDDEA994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::find<TopoReplica>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;

  v4 = CFHashBytes();
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t *)*i)
  {
    v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
        && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::__emplace_unique_key_args<TopoReplica,std::piecewise_construct_t const&,std::tuple<TopoReplica const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = CFHashBytes();
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
            && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v17 = **a4;
  *((_DWORD *)i + 8) = *((_DWORD *)*a4 + 4);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)i + 5) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_39:
    *v25 = i;
    goto LABEL_40;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v24 + 8 * v4) = v16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1BDDEADB0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  id *v3;
  void *__p;
  char v6;

  v2 = *a2;
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6)

    operator delete(v3);
  }
  return v2;
}

void sub_1BDDEB3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BDDEB72C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1BDDEB8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BDDEBBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BDDEBD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BDDEBDD0()
{
  JUMPOUT(0x1BDDEBDC4);
}

void sub_1BDDEC0B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BDDEC3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BDDEC578(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B7D750](v1, 0x10A0C409FE6E197);
  _Unwind_Resume(a1);
}

BOOL TopoIDRange::operator!=(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  return *((_DWORD *)uu1 + 5) != *((_DWORD *)uu2 + 5)
      || *((_DWORD *)uu1 + 4) != *((_DWORD *)uu2 + 4)
      || uuid_compare(uu1, uu2)
      || *((_DWORD *)uu1 + 6) != *((_DWORD *)uu2 + 6);
}

void sub_1BDDEC920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BDDEC9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDED11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BDDED68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;
  void *v27;
  void *v28;

  TopoSubstring::~TopoSubstring((TopoSubstring *)&a21);

  _Unwind_Resume(a1);
}

void sub_1BDDEDAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<TopoID,TopoSubstring *>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,TopoSubstring *>>>::__emplace_unique_key_args<TopoID,std::piecewise_construct_t const&,std::tuple<TopoID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = CFHashBytes();
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 9) == *(_DWORD *)(a2 + 20)
            && *((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
            && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v16 = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = **a4;
  *((_QWORD *)i + 4) = v16;
  *((_QWORD *)i + 5) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_40:
    *v24 = i;
    goto LABEL_41;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1BDDEDF04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<TopoID>::__assign_with_size[abi:ne180100]<TopoID*,TopoID*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<TopoID>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(unsigned __int8 *uu1, unsigned __int8 *a2, unsigned __int8 *uu2)
{
  unsigned __int8 *v3;

  v3 = uu1;
  if (uu1 != a2)
  {
    while (*((_DWORD *)v3 + 5) != *((_DWORD *)uu2 + 5)
         || *((_DWORD *)v3 + 4) != *((_DWORD *)uu2 + 4)
         || uuid_compare(v3, uu2))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void sub_1BDDEE158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDEE1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)CRTTMergeableStringRange;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BDDEE2BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDEE48C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDEE52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDEE604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDEE700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BDDEE7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDEE954(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BDDEE9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BDDEEAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDEEB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BDDEEBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BDDEED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BDDEEDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void TopoReplica::TopoReplica(TopoReplica *this, ObjCReplica *a2)
{
  ObjCReplica *v3;
  void *v4;

  v3 = a2;
  this->index = -[ObjCReplica index](v3, "index");
  -[ObjCReplica uuid](v3, "uuid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "getUUIDBytes:", this);

}

void sub_1BDDEEF84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

ObjCReplica *TopoReplica::objc(TopoReplica *this)
{
  ObjCReplica *v2;
  void *v3;
  ObjCReplica *v4;

  v2 = [ObjCReplica alloc];
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", this);
  v4 = -[ObjCReplica initWithUuid:index:](v2, "initWithUuid:index:", v3, this->index);

  return v4;
}

void sub_1BDDEF00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TopoID::TopoID(TopoID *this, ObjCTimestamp *a2)
{
  ObjCTimestamp *v3;
  ObjCReplica *v4;

  v3 = a2;
  -[ObjCTimestamp replica](v3, "replica");
  v4 = (ObjCReplica *)objc_claimAutoreleasedReturnValue();
  TopoReplica::TopoReplica(&this->replica, v4);

  this->clock = -[ObjCTimestamp counter](v3, "counter");
}

void sub_1BDDEF078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

ObjCTimestamp *TopoID::objc(TopoID *this)
{
  ObjCTimestamp *v2;
  void *v3;
  ObjCTimestamp *v4;

  v2 = [ObjCTimestamp alloc];
  TopoReplica::objc(&this->replica);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[ObjCTimestamp initWithReplica:counter:](v2, "initWithReplica:counter:", v3, this->clock);

  return v4;
}

void sub_1BDDEF0F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void TopoSubstring::removeAddsNotIn(TopoSubstring *this, const TopoSubstring *a2, ObjCVersion *a3)
{
  ObjCVersion *v5;
  TopoID *v6;
  TopoID *v7;
  TopoID *v8;
  void *v9;
  BOOL v10;
  TopoID *v11;
  void *v12;
  BOOL v13;
  __int128 v14;

  v5 = a3;
  v6 = (TopoID *)*((_QWORD *)this + 4);
  v7 = (TopoID *)*((_QWORD *)this + 5);
  v8 = v7;
  if (v6 != v7)
  {
    while (1)
    {
      if (std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), v6->replica.uuid) == *((unsigned __int8 **)a2 + 5))
      {
        TopoID::objc(v6);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = -[ObjCVersion contains:](v5, "contains:", v9);

        if (v10)
          break;
      }
      if (++v6 == v7)
        goto LABEL_13;
    }
  }
  if (v6 != v7)
  {
    v11 = v6 + 1;
    v8 = v6;
    while (v11 != v7)
    {
      if (std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), v11->replica.uuid) != *((unsigned __int8 **)a2 + 5)|| (TopoID::objc(v11), v12 = (void *)objc_claimAutoreleasedReturnValue(), v13 = -[ObjCVersion contains:](v5, "contains:", v12), v12, !v13))
      {
        v14 = *(_OWORD *)v11->replica.uuid;
        *(_QWORD *)&v8->replica.index = *(_QWORD *)&v11->replica.index;
        *(_OWORD *)v8->replica.uuid = v14;
        ++v8;
      }
      ++v11;
    }
  }
LABEL_13:
  if (v8 != *((TopoID **)this + 5))
    *((_QWORD *)this + 5) = v8;

}

void sub_1BDDEF25C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

TopoSubstring *TopoSubstring::removeDeltaAddsNotIn(TopoSubstring *this, const TopoSubstring *a2)
{
  TopoSubstring *v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v6;
  __int128 *v7;
  int v8;
  BOOL v9;
  int v10;
  __int128 v11;
  uuid_t dst;
  int v13;
  unsigned __int8 uu2[16];
  int v15;
  int v16;
  uint64_t v17;

  v2 = this;
  v17 = *MEMORY[0x1E0C80C00];
  v3 = (__int128 *)*((_QWORD *)this + 4);
  v4 = (__int128 *)*((_QWORD *)this + 5);
  if (v3 == v4)
  {
    v6 = *((_QWORD *)this + 4);
  }
  else
  {
    v6 = *((_QWORD *)this + 5);
    v7 = (__int128 *)((char *)v3 + 24);
    while (1)
    {
      v13 = -1;
      uuid_copy(dst, (const unsigned __int8 *)v7 - 24);
      v8 = *((_DWORD *)v7 - 1);
      *(_OWORD *)uu2 = *(_OWORD *)dst;
      v15 = v13;
      v16 = v8;
      this = (TopoSubstring *)std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), uu2);
      if (this != *((TopoSubstring **)a2 + 5))
        break;
      v9 = v7 == v4;
      v7 = (__int128 *)((char *)v7 + 24);
      if (v9)
        goto LABEL_16;
    }
    if ((__int128 *)((char *)v7 - 24) != v4)
    {
      if (v7 == v4)
      {
        v6 = (uint64_t)v7 - 24;
      }
      else
      {
        v6 = (uint64_t)v7 - 24;
        do
        {
          v13 = -1;
          uuid_copy(dst, (const unsigned __int8 *)v7);
          v10 = *((_DWORD *)v7 + 5);
          *(_OWORD *)uu2 = *(_OWORD *)dst;
          v15 = v13;
          v16 = v10;
          this = (TopoSubstring *)std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), uu2);
          if (this == *((TopoSubstring **)a2 + 5))
          {
            v11 = *v7;
            *(_QWORD *)(v6 + 16) = *((_QWORD *)v7 + 2);
            *(_OWORD *)v6 = v11;
            v6 += 24;
          }
          v7 = (__int128 *)((char *)v7 + 24);
        }
        while (v7 != v4);
      }
    }
  }
LABEL_16:
  if (v6 != *((_QWORD *)v2 + 5))
    *((_QWORD *)v2 + 5) = v6;
  return this;
}

void TopoSubstring::addAddsIn(TopoSubstring *this, const TopoSubstring *a2, ObjCVersion *a3)
{
  ObjCVersion *v5;
  __int128 *v6;
  __int128 *i;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  BOOL v15;
  TopoID v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (__int128 *)*((_QWORD *)a2 + 4);
  for (i = (__int128 *)*((_QWORD *)a2 + 5); v6 != i; v6 = (__int128 *)((char *)v6 + 24))
  {
    v8 = *v6;
    *(_QWORD *)&v16.replica.index = *((_QWORD *)v6 + 2);
    *(_OWORD *)v16.replica.uuid = v8;
    if (v16.replica.index != -1)
    {
      v10 = *((_QWORD *)this + 4);
      v9 = *((_QWORD *)this + 5);
      if (v9 != v10)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
        do
        {
          v12 = v10 + 24 * (v11 >> 1);
          v13 = TopoID::operator<(v12, (uint64_t)&v16);
          if (v13)
            v11 += ~(v11 >> 1);
          else
            v11 >>= 1;
          if (v13)
            v10 = v12 + 24;
        }
        while (v11);
        v9 = v10;
        v10 = *((_QWORD *)this + 5);
      }
      if (v10 == v9
        || *(_QWORD *)&v16.replica.index != *(_QWORD *)(v9 + 16)
        || uuid_compare(v16.replica.uuid, (const unsigned __int8 *)v9))
      {
        TopoID::objc(&v16);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = -[ObjCVersion contains:](v5, "contains:", v14, *(_OWORD *)v16.replica.uuid);

        if (!v15)
          std::vector<TopoID>::insert((uint64_t)this + 32, (char *)v9, (unint64_t)&v16);
      }
    }
  }

}

void sub_1BDDEF5C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<TopoID>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v13) >> 3);
    if (2 * v17 > v14)
      v14 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v14;
    v33 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(a1 + 16, v18);
    else
      v19 = 0;
    v22 = &v19[24 * v16];
    __p = v19;
    v30 = v22;
    v31 = v22;
    v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v24 = 1;
        else
          v24 = 2 * v16;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(v8, v24);
        v22 = &v25[24 * (v24 >> 2)];
        __p = v25;
        v30 = v22;
        v32 = &v25[24 * v26];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v22 -= 24 * (v23 >> 1);
        v30 = v22;
      }
    }
    v27 = *(_OWORD *)v3;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v22 = v27;
    v31 = v22 + 24;
    v4 = (char *)std::vector<TopoID>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30)
      v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v21 = *(_OWORD *)a3;
    *((_QWORD *)__src + 2) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 24;
  }
  else
  {
    v9 = __src + 24;
    v10 = v6 - 24;
    v11 = *(_QWORD *)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(__src + 24, __src, v6 - v9);
    if ((unint64_t)v4 <= v3)
      v3 += 24 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_OWORD *)v3;
    *((_QWORD *)v4 + 2) = *(_QWORD *)(v3 + 16);
    *(_OWORD *)v4 = v20;
  }
  return v4;
}

void sub_1BDDEF860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<TopoID>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *(_OWORD *)(v8 - 24);
      v7 = (void *)(v9 - 24);
      *(_QWORD *)(v9 - 8) = *((_QWORD *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t CRContext.assetManager.getter()
{
  return swift_retain();
}

uint64_t CRContext.encryptionDelegate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDD86DEC(v1 + OBJC_IVAR___CRContext_encryptionDelegate, a1, qword_1ED6F3DD0);
}

id CRContext.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CRContext.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t CRContext.__allocating_init(for:encryptionDelegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[40];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_1BE1B1DF0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  sub_1BDD86DEC(a2, (uint64_t)v15, qword_1ED6F3DD0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  sub_1BDD89828((uint64_t)v10, (uint64_t)v15, (uint64_t)v6);
  v12 = v11;
  sub_1BDD86E30(a2, qword_1ED6F3DD0);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v12;
}

void *sub_1BDDEFC20()
{
  void *result;

  result = (void *)sub_1BE1263C4(MEMORY[0x1E0DEE9D8]);
  off_1ED6EE510 = result;
  return result;
}

uint64_t static CRContext.UniqueContextError.== infix(_:_:)()
{
  return 1;
}

uint64_t CRContext.UniqueContextError.hash(into:)()
{
  return sub_1BE1B3704();
}

uint64_t CRContext.UniqueContextError.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t sub_1BDDEFCB0()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t sub_1BDDEFCF0()
{
  return sub_1BE1B3704();
}

uint64_t sub_1BDDEFD14()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

void static CRContext.uniqueContext(for:)(uint64_t a1)
{
  id v1;
  id v2;

  if (qword_1ED6F4510 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  sub_1BE1B2E40();

}

void sub_1BDDEFE30(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED6EF0F8 != -1)
    swift_once();
  swift_beginAccess();
  if (!*((_QWORD *)off_1ED6EE510 + 2) || (sub_1BDD901B8(a1), (v8 & 1) == 0))
  {
    v15 = 0;
    v16 = 1;
    sub_1BDD86E30((uint64_t)&v15, &qword_1ED6EE508);
    swift_endAccess();
LABEL_9:
    v11 = sub_1BE1B1DF0();
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
    v9 = (void *)sub_1BDDF2628(a1, (uint64_t)&v12, (uint64_t)v7);
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3C70);
    sub_1BDD86E30((uint64_t)&v12, qword_1ED6F3DD0);
    if (v2)
      return;
    goto LABEL_10;
  }
  sub_1BDDF32C0();
  v16 = 0;
  v9 = (void *)MEMORY[0x1C3B7E140](&v15);
  sub_1BDD86E30((uint64_t)&v15, &qword_1ED6EE508);
  swift_endAccess();
  if (!v9)
    goto LABEL_9;
  sub_1BDD86DEC((uint64_t)v9 + OBJC_IVAR___CRContext_encryptionDelegate, (uint64_t)&v12, qword_1ED6F3DD0);
  v10 = *((_QWORD *)&v13 + 1);
  sub_1BDD86E30((uint64_t)&v12, qword_1ED6F3DD0);
  if (v10)
  {
    sub_1BDDF3304();
    swift_allocError();
    swift_willThrow();

    return;
  }
LABEL_10:
  *a2 = v9;
}

uint64_t static CRContext.uniqueContext<A>(for:encryptionDelegate:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BE1B1DF0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  static CRContext.uniqueContext<A>(for:encryptionDelegate:temporaryDirectory:)(a1);
  v7 = v6;
  sub_1BDD86E30((uint64_t)v4, &qword_1ED6F3C70);
  return v7;
}

void static CRContext.uniqueContext<A>(for:encryptionDelegate:temporaryDirectory:)(uint64_t a1)
{
  id v1;
  id v2;
  _QWORD v3[2];

  if (qword_1ED6F4510 != -1)
    a1 = swift_once();
  v3[1] = v3;
  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  sub_1BE1B2E40();

}

void sub_1BDDF0238(uint64_t a1@<X1>, char *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char v28;
  void *v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *boxed_opaque_existential_1;
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  void (*v46)(char *, uint64_t);
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t TupleTypeMetadata2;
  char *v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  id v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  uint64_t v71;
  char v72;
  char *v73;

  v58 = a6;
  v66 = a5;
  v67 = a3;
  v73 = a2;
  v65 = a7;
  v10 = sub_1BE1B2EE8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v60 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v64 = (char *)&v54 - v12;
  v13 = *(_QWORD *)(a4 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v57 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v63 = (char *)&v54 - v17;
  v18 = *(_QWORD *)(v10 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v59 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v61 = (char *)&v54 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v54 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v54 - v26;
  if (qword_1ED6EF0F8 != -1)
    swift_once();
  swift_beginAccess();
  if (*((_QWORD *)off_1ED6EE510 + 2) && (sub_1BDD901B8(a1), (v28 & 1) != 0))
  {
    sub_1BDDF32C0();
    v72 = 0;
    v29 = (void *)MEMORY[0x1C3B7E140](&v71);
    sub_1BDD86E30((uint64_t)&v71, &qword_1ED6EE508);
    swift_endAccess();
    if (v29)
    {
      v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
      v31 = v30((uint64_t)v73, 1, a4);
      v67 = v29;
      v32 = (uint64_t)v29 + OBJC_IVAR___CRContext_encryptionDelegate;
      if (v31 == 1)
      {
        sub_1BDD86DEC(v32, (uint64_t)&v68, qword_1ED6F3DD0);
        v33 = *((_QWORD *)&v69 + 1);
        sub_1BDD86E30((uint64_t)&v68, qword_1ED6F3DD0);
        if (!v33)
        {
LABEL_8:
          v34 = (uint64_t)v67;
LABEL_14:
          *v65 = v34;
          return;
        }
        goto LABEL_23;
      }
      sub_1BDD86DEC(v32, (uint64_t)&v68, qword_1ED6F3DD0);
      __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F3DD0);
      v36 = swift_dynamicCast();
      v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
      if ((v36 & 1) != 0)
      {
        v37(v25, 0, 1, a4);
        v38 = v63;
        v55 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v55(v63, v25, a4);
        v39 = v61;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v61, v38, a4);
        v37(v39, 0, 1, a4);
        v40 = *(int *)(TupleTypeMetadata2 + 48);
        v41 = v64;
        v56 = v30;
        v42 = &v64[v40];
        v43 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
        v43(v64, v39, v10);
        v66 = v42;
        v44 = v42;
        v45 = (unsigned int (*)(char *, uint64_t, uint64_t))v56;
        v43(v44, v73, v10);
        if (v45(v41, 1, a4) == 1)
        {
          v46 = *(void (**)(char *, uint64_t))(v18 + 8);
          v46(v39, v10);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v63, a4);
          if (v45(v66, 1, a4) == 1)
          {
            v46(v64, v10);
            v34 = (uint64_t)v67;
            goto LABEL_14;
          }
        }
        else
        {
          v47 = v59;
          v43(v59, v64, v10);
          if (v45(v66, 1, a4) != 1)
          {
            v49 = v57;
            v55(v57, v66, a4);
            v50 = v47;
            v51 = sub_1BE1B2798();
            v52 = *(void (**)(char *, uint64_t))(v13 + 8);
            v52(v49, a4);
            v53 = *(void (**)(char *, uint64_t))(v18 + 8);
            v53(v61, v10);
            v52(v63, a4);
            v52(v50, a4);
            v53(v64, v10);
            if ((v51 & 1) != 0)
              goto LABEL_8;
            goto LABEL_23;
          }
          (*(void (**)(char *, uint64_t))(v18 + 8))(v61, v10);
          v48 = *(void (**)(char *, uint64_t))(v13 + 8);
          v48(v63, a4);
          v48(v47, a4);
        }
        (*(void (**)(char *, uint64_t))(v60 + 8))(v64, TupleTypeMetadata2);
      }
      else
      {
        v37(v25, 1, 1, a4);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v10);
      }
LABEL_23:
      sub_1BDDF3304();
      swift_allocError();
      swift_willThrow();

      return;
    }
  }
  else
  {
    v71 = 0;
    v72 = 1;
    sub_1BDD86E30((uint64_t)&v71, &qword_1ED6EE508);
    swift_endAccess();
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v27, v73, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v27, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v10);
    v70 = 0;
    v68 = 0u;
    v69 = 0u;
  }
  else
  {
    *((_QWORD *)&v69 + 1) = a4;
    v70 = v66;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v68);
    (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v27, a4);
  }
  v34 = sub_1BDDF2628(a1, (uint64_t)&v68, (uint64_t)v67);
  sub_1BDD86E30((uint64_t)&v68, qword_1ED6F3DD0);
  if (!v7)
    goto LABEL_14;
}

uint64_t static CRContext.uniqueContextUnchecked(for:encryptionDelegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD v15[2];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BE1B1DF0();
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  if (qword_1ED6F4510 != -1)
    v11 = swift_once();
  MEMORY[0x1E0C80A78](v11);
  v15[-4] = v2;
  v15[-3] = a1;
  v15[-2] = a2;
  v15[-1] = v9;
  v13 = v12;
  sub_1BE1B2E40();

  if (!v3)
    v4 = v15[1];
  sub_1BDD86E30((uint64_t)v9, &qword_1ED6F3C70);
  return v4;
}

void static CRContext.uniqueContextUnchecked(for:encryptionDelegate:temporaryDirectory:)(uint64_t a1)
{
  id v1;
  id v2;

  if (qword_1ED6F4510 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  sub_1BE1B2E40();

}

uint64_t sub_1BDDF0A48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  if (qword_1ED6EF0F8 != -1)
    swift_once();
  swift_beginAccess();
  if (*((_QWORD *)off_1ED6EE510 + 2) && (sub_1BDD901B8(a1), (v9 & 1) != 0))
  {
    sub_1BDDF32C0();
    v13 = 0;
    v10 = MEMORY[0x1C3B7E140](&v12);
    sub_1BDD86E30((uint64_t)&v12, &qword_1ED6EE508);
    result = swift_endAccess();
    if (v10)
      goto LABEL_10;
  }
  else
  {
    v12 = 0;
    v13 = 1;
    sub_1BDD86E30((uint64_t)&v12, &qword_1ED6EE508);
    swift_endAccess();
  }
  result = sub_1BDDF2628(a1, a2, a3);
  if (v4)
    return result;
  v10 = result;
LABEL_10:
  *a4 = v10;
  return result;
}

uint64_t static CRContext.currentUniqueContextUnchecked(for:)(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v4;

  if (qword_1ED6F4510 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1ED6EE278);
  sub_1BE1B2E40();

  return v4;
}

uint64_t sub_1BDDF0C34@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  if (qword_1ED6EF0F8 != -1)
    swift_once();
  swift_beginAccess();
  if (*((_QWORD *)off_1ED6EE510 + 2) && (sub_1BDD901B8(a1), (v4 & 1) != 0))
  {
    sub_1BDDF32C0();
    v8 = 0;
    v5 = MEMORY[0x1C3B7E140](&v7);
    sub_1BDD86E30((uint64_t)&v7, &qword_1ED6EE508);
    result = swift_endAccess();
  }
  else
  {
    v7 = 0;
    v8 = 1;
    sub_1BDD86E30((uint64_t)&v7, &qword_1ED6EE508);
    result = swift_endAccess();
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

Swift::Void __swiftcall CRContext.close()()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  _QWORD v8[6];

  if (qword_1ED6F4510 != -1)
    swift_once();
  v1 = *(void **)(qword_1ED6F8BE8 + 40);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_1BDDF2338;
  *(_QWORD *)(v3 + 24) = v2;
  v8[4] = sub_1BDD843C8;
  v8[5] = v3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = sub_1BDD843A8;
  v8[3] = &block_descriptor;
  v4 = _Block_copy(v8);
  v5 = v1;
  v6 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v4);

  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_1BDDF0E8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR___CRContext_crdtDatabase;
  swift_retain();
  sub_1BE101BEC();
  swift_release();
  v6 = sub_1BE1B1DF0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  *(_QWORD *)(a1 + v5) = sub_1BDD88394((uint64_t)v4);
  return swift_release();
}

id _s9Coherence9CRContextCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BDDF12AC(uint64_t a1, uint64_t a2)
{
  return sub_1BDDF131C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1BDDF12D0(uint64_t a1, uint64_t a2)
{
  return sub_1BDDF131C(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1BDDF12DC()
{
  sub_1BE1B27C8();
  sub_1BE1B2834();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDF131C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BE1B27C8();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BDDF1358(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1BE1B27B0();
  *a2 = 0;
  return result;
}

uint64_t sub_1BDDF13CC(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1BE1B27BC();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1BDDF1448@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1BE1B27C8();
  v2 = sub_1BE1B27A4();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BDDF1488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1BE1B27C8();
  v2 = v1;
  if (v0 == sub_1BE1B27C8() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1BE1B34AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1BDDF1510()
{
  sub_1BDD8422C((unint64_t *)&qword_1EF52B6D0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BE1B5A58);
  sub_1BDD8422C((unint64_t *)&unk_1EF52C1B8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BE1B59AC);
  return sub_1BE1B3284();
}

uint64_t sub_1BDDF1594@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1BE1B27C8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BDDF15BC()
{
  sub_1BDD8422C(&qword_1ED6EF858, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BE1B5D44);
  sub_1BDD8422C((unint64_t *)&unk_1EF52C200, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BE1B5C98);
  return sub_1BE1B3284();
}

uint64_t sub_1BDDF1640@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BE1B27A4();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BDDF1684()
{
  sub_1BDD8422C(&qword_1ED6EE9A8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1BE1B5D88);
  sub_1BDD8422C((unint64_t *)&unk_1EF52C210, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1BE1B5B84);
  return sub_1BE1B3284();
}

uint64_t sub_1BDDF1708(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = sub_1BDDF1858((_QWORD *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1)
      swift_willThrow();
    else
      return v6;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v2 = sub_1BDDF1858((unint64_t *)v7, v4, v2);
    MEMORY[0x1C3B7E068](v7, -1, -1);
  }
  return v2;
}

uint64_t sub_1BDDF1858(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void (*v24)(char *, uint64_t);
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  BOOL v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char v42[8];

  v31 = a2;
  v32 = a1;
  v38 = __swift_instantiateConcreteTypeFromMangledName(qword_1EF525530);
  v4 = MEMORY[0x1E0C80A78](v38);
  v37 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v36 = (char *)&v31 - v6;
  v7 = sub_1BE1B1DF0();
  v8 = *(_QWORD **)(v7 - 8);
  result = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v39 = a3;
  v13 = *(_QWORD *)(a3 + 64);
  v33 = 0;
  v34 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v35 = (unint64_t)(v14 + 63) >> 6;
  v18 = (uint64_t)v36;
  v17 = v37;
  while (v16)
  {
    v40 = (v16 - 1) & v16;
    v41 = v12;
    v19 = __clz(__rbit64(v16)) | (v12 << 6);
LABEL_5:
    v20 = (void (*)(char *, unint64_t, uint64_t))v8[2];
    v20(v11, *(_QWORD *)(v39 + 48) + v8[9] * v19, v7);
    sub_1BDDF32C0();
    v21 = v38;
    v20((char *)v18, (unint64_t)v11, v7);
    sub_1BDDF32C0();
    v22 = (uint64_t)&v17[*(int *)(v21 + 48)];
    v20(v17, v18, v7);
    sub_1BDDF32C0();
    v23 = (void *)MEMORY[0x1C3B7E140](v22);
    sub_1BDD86E30(v18, qword_1EF525530);
    sub_1BDDF32D0(v22);
    if (v23)
    {

      v29 = (void (*)(char *, uint64_t))v8[1];
      v29(v17, v7);
      sub_1BDDF32D0((uint64_t)v42);
      result = ((uint64_t (*)(char *, uint64_t))v29)(v11, v7);
      *(unint64_t *)((char *)v32 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v30 = __OFADD__(v33++, 1);
      v16 = v40;
      v12 = v41;
      if (v30)
      {
        __break(1u);
        return sub_1BDDF1BA4(v32, v31, v33, v39);
      }
    }
    else
    {
      v24 = (void (*)(char *, uint64_t))v8[1];
      v24(v17, v7);
      sub_1BDDF32D0((uint64_t)v42);
      result = ((uint64_t (*)(char *, uint64_t))v24)(v11, v7);
      v16 = v40;
      v12 = v41;
    }
  }
  v25 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v25 >= v35)
    return sub_1BDDF1BA4(v32, v31, v33, v39);
  v26 = *(_QWORD *)(v34 + 8 * v25);
  v27 = v12 + 1;
  if (v26)
    goto LABEL_21;
  v27 = v12 + 2;
  if (v12 + 2 >= v35)
    return sub_1BDDF1BA4(v32, v31, v33, v39);
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_21;
  v27 = v12 + 3;
  if (v12 + 3 >= v35)
    return sub_1BDDF1BA4(v32, v31, v33, v39);
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
  {
LABEL_21:
    v40 = (v26 - 1) & v26;
    v41 = v27;
    v19 = __clz(__rbit64(v26)) + (v27 << 6);
    goto LABEL_5;
  }
  v28 = v12 + 4;
  if (v12 + 4 >= v35)
    return sub_1BDDF1BA4(v32, v31, v33, v39);
  v26 = *(_QWORD *)(v34 + 8 * v28);
  if (v26)
  {
    v27 = v12 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v35)
      return sub_1BDDF1BA4(v32, v31, v33, v39);
    v26 = *(_QWORD *)(v34 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1BDDF1BA4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v38 = a1;
  v44 = sub_1BE1B1DF0();
  v42 = *(_QWORD *)(v44 - 8);
  v7 = MEMORY[0x1E0C80A78](v44);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v41 = (char *)&v37 - v10;
  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED648);
  result = sub_1BE1B3260();
  v12 = result;
  v37 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *v38;
  v14 = 0;
  v15 = result + 64;
  v39 = a4;
  v40 = v9;
  v16 = v41;
  v17 = v44;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v43 = v14;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v20 >= v37)
        return v12;
      v21 = v38[v20];
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v37)
          return v12;
        v21 = v38[v22];
        if (!v21)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v37)
            return v12;
          v21 = v38[v22];
          if (!v21)
          {
            v23 = v14 + 4;
            if (v14 + 4 >= v37)
              return v12;
            v21 = v38[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v37)
                  return v12;
                v21 = v38[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v21 - 1) & v21;
      v43 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = v42;
    v25 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v16, *(_QWORD *)(a4 + 48) + v25 * v19, v17);
    sub_1BDDF32C0();
    v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27 = v40;
    v26(v40, v16, v17);
    sub_1BDDF32F4();
    sub_1BDD8422C(&qword_1ED6EFF60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    result = sub_1BE1B26D8();
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v15 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v15 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    v26((char *)(*(_QWORD *)(v12 + 48) + v31 * v25), v27, v44);
    result = sub_1BDDF32F4();
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v39;
    v14 = v43;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSString *v15;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  id v19;
  NSString *v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  objc_super v26;
  objc_super v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v4 = sub_1BE1B1DF0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v26 - v12;
  if (*(_QWORD *)(a2 + 24))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))((char *)&v26 - v12, 1, 1, v4);
    v14 = sub_1BDD88394((uint64_t)v13);
    sub_1BDD86DEC(a2, (uint64_t)&v28, qword_1ED6F3DD0);
    v15 = NSTemporaryDirectory();
    sub_1BE1B27C8();

    sub_1BE1B1D60();
    swift_bridgeObjectRelease();
    type metadata accessor for CRAssetManager(0);
    swift_allocObject();
    v16 = sub_1BDD87A88((uint64_t)v7, (uint64_t)&v28);
    sub_1BDD86DEC(a2, (uint64_t)&v28, qword_1ED6F3DD0);
    v17 = (objc_class *)type metadata accessor for CRContext();
    v18 = (char *)objc_allocWithZone(v17);
    *(_QWORD *)&v18[OBJC_IVAR___CRContext_assetManager] = v16;
    sub_1BDD86DEC((uint64_t)&v28, (uint64_t)&v18[OBJC_IVAR___CRContext_encryptionDelegate], qword_1ED6F3DD0);
    *(_QWORD *)&v18[OBJC_IVAR___CRContext_crdtDatabase] = v14;
    v26.receiver = v18;
    v26.super_class = v17;
    v19 = objc_msgSendSuper2(&v26, sel_init);
  }
  else
  {
    if ((a1 & 1) != 0)
    {
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
      v20 = NSTemporaryDirectory();
      sub_1BE1B27C8();

      sub_1BE1B1D60();
      swift_bridgeObjectRelease();
      type metadata accessor for CRAssetManager(0);
      swift_allocObject();
      v21 = sub_1BDD87A88((uint64_t)v7, (uint64_t)&v28);
    }
    else
    {
      if (qword_1ED6F3C80 != -1)
        swift_once();
      v21 = qword_1ED6F8BA8;
      swift_retain();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
    v22 = sub_1BDD88394((uint64_t)v11);
    v23 = (objc_class *)type metadata accessor for CRContext();
    v28 = 0u;
    v29 = 0u;
    v30 = 0;
    v24 = (char *)objc_allocWithZone(v23);
    *(_QWORD *)&v24[OBJC_IVAR___CRContext_assetManager] = v21;
    sub_1BDD86DEC((uint64_t)&v28, (uint64_t)&v24[OBJC_IVAR___CRContext_encryptionDelegate], qword_1ED6F3DD0);
    *(_QWORD *)&v24[OBJC_IVAR___CRContext_crdtDatabase] = v22;
    v27.receiver = v24;
    v27.super_class = v23;
    v19 = objc_msgSendSuper2(&v27, sel_init);
  }
  sub_1BDD86E30((uint64_t)&v28, qword_1ED6F3DD0);
  return v19;
}

void sub_1BDDF22A4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1BDDEFE30(*(_QWORD *)(v1 + 24), a1);
}

void sub_1BDDF22BC(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_1BDDF0238(*(_QWORD *)(v1 + 48), *(char **)(v1 + 56), *(void **)(v1 + 64), *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1BDDF22E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDDF0A48(v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1BDDF22FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1BDDF0C34(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BDDF2314()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BDDF2338()
{
  uint64_t v0;

  return sub_1BDDF0E8C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1BDDF2340()
{
  return swift_deallocObject();
}

unint64_t sub_1BDDF2354()
{
  unint64_t result;

  result = qword_1EF52C130;
  if (!qword_1EF52C130)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRContext.UniqueContextError, &type metadata for CRContext.UniqueContextError);
    atomic_store(result, (unint64_t *)&qword_1EF52C130);
  }
  return result;
}

uint64_t method lookup function for CRContext()
{
  return swift_lookUpClassMethod();
}

uint64_t getEnumTagSinglePayload for CRContext.UniqueContextError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CRContext.UniqueContextError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BDDF2438 + 4 * byte_1BE1B57D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BDDF2458 + 4 * byte_1BE1B57D5[v4]))();
}

_BYTE *sub_1BDDF2438(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BDDF2458(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BDDF2460(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BDDF2468(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BDDF2470(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BDDF2478(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CRContext.UniqueContextError()
{
  return &type metadata for CRContext.UniqueContextError;
}

uint64_t type metadata accessor for CRGlobalContextObjC()
{
  return objc_opt_self();
}

__n128 __swift_memcpy48_1(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1BDDF24C8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BDDF24E8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for sqlite3_snapshot(uint64_t a1)
{
  sub_1BDD8426C(a1, &qword_1EF52C1A0);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1BDD8426C(a1, &qword_1EF52B6E8);
}

uint64_t sub_1BDDF2548(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BDDF2568(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1BDD8426C(a1, &qword_1ED6ED770);
}

uint64_t sub_1BDDF25A4()
{
  return sub_1BDD8422C(&qword_1EF52C1A8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BE1B5970);
}

uint64_t sub_1BDDF25D0()
{
  return sub_1BDD8422C(&qword_1EF52C1B0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BE1B5944);
}

uint64_t sub_1BDDF25FC()
{
  return sub_1BDD8422C((unint64_t *)&unk_1EF52B6D8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BE1B59E0);
}

uint64_t sub_1BDDF2628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _BYTE v24[24];
  _BYTE v25[16];
  _BYTE v26[40];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3C70);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1BE1B1DF0();
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v24[-v14];
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16);
  v17(&v24[-v14], a1, v10);
  sub_1BDD86DEC(a2, (uint64_t)v26, qword_1ED6F3DD0);
  sub_1BDD86DEC(a3, (uint64_t)v9, &qword_1ED6F3C70);
  sub_1BDD89828((uint64_t)v15, (uint64_t)v26, (uint64_t)v9);
  v19 = v18;
  if (!v3)
  {
    v20 = (uint64_t)v13;
    if (qword_1ED6EF0F8 != -1)
      swift_once();
    swift_beginAccess();
    if (*((_QWORD *)off_1ED6EE510 + 2) > 0xAuLL)
    {
      v21 = swift_bridgeObjectRetain();
      v22 = (void *)sub_1BDDF1708(v21);
      swift_bridgeObjectRelease();
      off_1ED6EE510 = v22;
      swift_bridgeObjectRelease();
    }
    v17((_BYTE *)v20, a1, v10);
    swift_unknownObjectWeakInit();
    v25[8] = 0;
    swift_beginAccess();
    sub_1BE1490E8((uint64_t)v25, v20);
    swift_endAccess();
  }
  return v19;
}

id sub_1BDDF2848(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  objc_class *v14;
  char *v15;
  id v16;
  uint64_t v18;
  objc_super v19;

  v2 = sub_1BE1B1F58();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Replica();
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED6F43A0 != -1)
    v7 = swift_once();
  MEMORY[0x1E0C80A78](v7);
  *(&v18 - 2) = a1;
  v11 = v10;
  sub_1BE1B2E40();

  v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v12(v5, v9, v2);
  v13 = *(_QWORD *)&v9[*(int *)(v6 + 20)];
  v14 = (objc_class *)type metadata accessor for ObjCReplica(0);
  v15 = (char *)objc_allocWithZone(v14);
  v12(&v15[OBJC_IVAR___ObjCReplica_uuid], v5, v2);
  *(_QWORD *)&v15[OBJC_IVAR___ObjCReplica_index] = v13;
  v19.receiver = v15;
  v19.super_class = v14;
  v16 = objc_msgSendSuper2(&v19, sel_init);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1BDDF3284((uint64_t)v9);
  return v16;
}

id sub_1BDDF2A04()
{
  char v0;
  uint64_t v1;
  objc_class *v2;
  char *v3;
  char *v4;
  objc_super v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_retain();
  sub_1BE1B2E40();
  swift_release();
  v0 = v8;
  v1 = v9;
  v2 = (objc_class *)type metadata accessor for ObjCRenames();
  v3 = (char *)objc_allocWithZone(v2);
  v4 = &v3[OBJC_IVAR____TtC9Coherence11ObjCRenames_renames];
  *(_QWORD *)v4 = v7;
  v4[8] = v0;
  *((_QWORD *)v4 + 2) = v1;
  v6.receiver = v3;
  v6.super_class = v2;
  return objc_msgSendSuper2(&v6, sel_init);
}

id sub_1BDDF2ADC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  objc_class *v3;
  char *v4;
  char *v5;
  objc_super v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_beginAccess();
  v0 = swift_beginAccess();
  MEMORY[0x1E0C80A78](v0);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BE1B2E40();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v9;
  v2 = v10;
  v3 = (objc_class *)type metadata accessor for ObjCRenames();
  v4 = (char *)objc_allocWithZone(v3);
  v5 = &v4[OBJC_IVAR____TtC9Coherence11ObjCRenames_renames];
  *(_QWORD *)v5 = v8;
  v5[8] = v1;
  *((_QWORD *)v5 + 2) = v2;
  v7.receiver = v4;
  v7.super_class = v3;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t sub_1BDDF2C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25[2];
  uint64_t v26[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v25 - v10 + 16;
  if (qword_1ED6F4510 != -1)
    swift_once();
  v12 = (uint64_t *)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v14 = *v12;
  v13 = v12[1];
  v26[0] = v14;
  v26[1] = v13;
  v15 = (uint64_t *)(a2 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v17 = *v15;
  v16 = v15[1];
  v25[0] = v17;
  v25[1] = v16;
  v18 = a3 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v19 = sub_1BE1B1F58();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v11, v18, v19);
  v20 = *(_QWORD *)(a3 + OBJC_IVAR___ObjCReplica_index);
  v21 = type metadata accessor for Replica();
  *(_QWORD *)&v11[*(int *)(v21 + 20)] = v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v11, 0, 1, v21);
  v22(v9, 1, 1, v21);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDAC84C(v26, v25, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1BDD86E30((uint64_t)v9, &qword_1ED6F43C0);
  sub_1BDD86E30((uint64_t)v11, &qword_1ED6F43C0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDF2EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];
  uint64_t v33[2];

  v31 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F43C0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v27 - v11;
  if (qword_1ED6F4510 != -1)
    swift_once();
  v30 = qword_1ED6F8BE8;
  v13 = (uint64_t *)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v14 = v13[1];
  v28 = *v13;
  v29 = v14;
  v33[0] = v28;
  v33[1] = v14;
  v15 = (uint64_t *)(a2 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  v17 = *v15;
  v16 = v15[1];
  v32[0] = v17;
  v32[1] = v16;
  v18 = a3 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v19 = sub_1BE1B1F58();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v20(v12, v18, v19);
  v21 = *(_QWORD *)(a3 + OBJC_IVAR___ObjCReplica_index);
  v22 = type metadata accessor for Replica();
  *(_QWORD *)&v12[*(int *)(v22 + 20)] = v21;
  v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v12, 0, 1, v22);
  v24 = v31;
  v25 = v31 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v20(v10, v25, v19);
  *(_QWORD *)&v10[*(int *)(v22 + 20)] = *(_QWORD *)(v24 + OBJC_IVAR___ObjCReplica_index);
  v23(v10, 0, 1, v22);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BDDAC84C(v33, v32, (uint64_t)v12, (uint64_t)v10);
  swift_release();
  sub_1BDD86E30((uint64_t)v10, &qword_1ED6F43C0);
  sub_1BDD86E30((uint64_t)v12, &qword_1ED6F43C0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDF3148(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  if (qword_1ED6F4510 != -1)
    swift_once();
  swift_beginAccess();
  swift_retain();
  v3 = swift_bridgeObjectRetain();
  a2(v3);
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  swift_retain();
  v4 = swift_bridgeObjectRetain();
  a2(v4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1BDDF324C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1BDE2EC2C(v1[3], v1[4], v1[5], v1[6], a1);
}

uint64_t sub_1BDDF326C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BDE2ED0C(v1, a1);
}

uint64_t sub_1BDDF3284(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Replica();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BDDF32C0()
{
  return swift_unknownObjectWeakCopyInit();
}

uint64_t sub_1BDDF32D0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1BDDF32F4()
{
  return swift_unknownObjectWeakTakeInit();
}

unint64_t sub_1BDDF3304()
{
  unint64_t result;

  result = qword_1EF52C1C8;
  if (!qword_1EF52C1C8)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRContext.UniqueContextError, &type metadata for CRContext.UniqueContextError);
    atomic_store(result, (unint64_t *)&qword_1EF52C1C8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CRContext.WeakContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for CRContext.WeakContext(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CRContext.WeakContext(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CRContext.WeakContext()
{
  return &type metadata for CRContext.WeakContext;
}

uint64_t sub_1BDDF33E4()
{
  return sub_1BDD8422C(&qword_1EF52C1D8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1BE1B5B48);
}

uint64_t sub_1BDDF3410()
{
  return sub_1BDD8422C(&qword_1EF52C1E0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1BE1B5B1C);
}

uint64_t sub_1BDDF343C()
{
  return sub_1BDD8422C(&qword_1EF52C1E8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BE1B5C5C);
}

uint64_t sub_1BDDF3468()
{
  return sub_1BDD8422C((unint64_t *)&unk_1EF52C1F0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1BE1B5C30);
}

uint64_t sub_1BDDF3494@<X0>(uint64_t *a1@<X8>)
{
  return sub_1BDDF22E0(a1);
}

uint64_t sub_1BDDF34B4()
{
  uint64_t v0;

  sqlite3_snapshot_free(*(sqlite3_snapshot **)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRSQLStoreSnapshot()
{
  return objc_opt_self();
}

uint64_t sub_1BDDF34F8()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 280))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1BDDF3538()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
  {
    *(_BYTE *)(v0 + 40) = 1;
    (*(void (**)(void))(*(_QWORD *)v0 + 384))();
    if (sqlite3_close(*(sqlite3 **)(v0 + 32)))
    {
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      sub_1BE1B32E4();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BE1B3200();
      __break(1u);
    }
  }
}

char *sub_1BDDF3634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  sqlite3_stmt *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  result = (char *)sub_1BDD8AF9C();
  if (!v3)
  {
    v7 = (sqlite3_stmt *)result;
    if (sqlite3_step((sqlite3_stmt *)result) != 100)
      return (char *)sqlite3_finalize(v7);
    result = (char *)sqlite3_column_int(v7, 0);
    v8 = (int)result / 0x7FFF;
    v9 = ((int)result % 0x7FFF);
    if (__OFSUB__((_DWORD)result, 0x7FFF * ((int)result / 0x7FFF)))
    {
      __break(1u);
    }
    else if ((int)result >= -1073741822)
    {
      if ((int)result <= 1073709055)
      {
        *(_WORD *)(v2 + 64) = v8;
        *(_BYTE *)(v2 + 66) = 0;
        if (a1)
        {
          result = (char *)sub_1BE170238(((int)result / 0x7FFF), a1);
          if ((result & 1) == 0)
          {
            sub_1BDDFCAFC();
            swift_allocError();
            *(_QWORD *)v10 = v8;
            v11 = 2;
            goto LABEL_14;
          }
        }
        if (!a2)
          return (char *)sqlite3_finalize(v7);
        if ((int)v9 >= -32768)
        {
          if ((int)v9 < 0x8000)
          {
            if (!sub_1BE170238(v9, a2))
            {
              sub_1BDDFCAFC();
              swift_allocError();
              *(_QWORD *)v10 = (int)v9;
              v11 = 1;
LABEL_14:
              *(_QWORD *)(v10 + 8) = 0;
              *(_BYTE *)(v10 + 16) = v11;
              swift_willThrow();
              return (char *)sqlite3_finalize(v7);
            }
            return (char *)sqlite3_finalize(v7);
          }
LABEL_21:
          __break(1u);
          return result;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1BDDF37C4(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  unsigned __int16 v5;
  __int16 v6;

  v3 = *(__int16 *)(v2 + 64);
  if (*(_BYTE *)(v2 + 66) == 1)
  {
    if ((__int16)result > 0)
      goto LABEL_9;
  }
  else if (v3 < (__int16)result)
  {
    goto LABEL_9;
  }
  v4 = *(_WORD *)(v2 + 68);
  if (*(_BYTE *)(v2 + 70))
    v4 = 0;
  if ((a2 & 0x10000) != 0)
  {
    if ((v4 & 0x80000000) == 0)
      return result;
  }
  else if (v4 >= (__int16)a2)
  {
    return result;
  }
LABEL_9:
  v5 = *(_WORD *)(v2 + 68);
  if (*(_BYTE *)(v2 + 70))
    v5 = 0;
  if ((a2 & 0x10000) != 0)
    v6 = 0;
  else
    v6 = a2;
  if (v6 > (__int16)v5)
    v5 = v6;
  if (*(_BYTE *)(v2 + 66))
    v3 = 0;
  if (v3 <= (__int16)result)
    LOWORD(v3) = result;
  return sub_1BDDF3870((unsigned __int16)v3, v5);
}

uint64_t sub_1BDDF3870(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  sqlite3_stmt *v6;
  uint64_t result;
  uint64_t v8;

  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  sub_1BE1B32E4();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  v6 = (sqlite3_stmt *)sub_1BDD8AF9C();
  result = swift_bridgeObjectRelease();
  if (!v3)
  {
    if (sqlite3_step(v6) == 101)
    {
      *(_WORD *)(v2 + 64) = a1;
      *(_BYTE *)(v2 + 66) = BYTE2(a1) & 1;
      *(_WORD *)(v2 + 68) = a2;
      *(_BYTE *)(v2 + 70) = BYTE2(a2) & 1;
    }
    else
    {
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1BE1B2864();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v8 = 0xD000000000000014;
      *(_QWORD *)(v8 + 8) = 0x80000001BE1CCFA0;
      *(_BYTE *)(v8 + 16) = 0;
      swift_willThrow();
    }
    return sqlite3_finalize(v6);
  }
  return result;
}

const char *sub_1BDDF3A54()
{
  uint64_t v0;
  uint64_t v1;
  const char *result;
  sqlite3_stmt *v3;
  int v4;
  uint64_t v5;

  result = sub_1BDD8AF9C();
  if (!v1)
  {
    v3 = (sqlite3_stmt *)result;
    do
      v4 = sqlite3_step(v3);
    while (v4 == 100);
    if (v4 != 101)
    {
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1BE1B2864();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v5 = 0xD000000000000011;
      *(_QWORD *)(v5 + 8) = 0x80000001BE1CCF60;
      *(_BYTE *)(v5 + 16) = 0;
      swift_willThrow();
    }
    return (const char *)sqlite3_finalize(v3);
  }
  return result;
}

const char *sub_1BDDF3B6C()
{
  uint64_t v0;
  uint64_t v1;
  const char *result;
  sqlite3_stmt *v3;
  int v4;
  uint64_t v5;

  result = sub_1BDD8AF9C();
  if (!v1)
  {
    v3 = (sqlite3_stmt *)result;
    do
      v4 = sqlite3_step(v3);
    while (v4 == 100);
    if (v4 != 101)
    {
      result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1BE1B2864();
      sub_1BE1B284C();
      swift_bridgeObjectRelease();
      sub_1BE1B284C();
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v5 = 0x75746573204C4157;
      *(_QWORD *)(v5 + 8) = 0xEB00000000203A70;
      *(_BYTE *)(v5 + 16) = 0;
      swift_willThrow();
    }
    return (const char *)sqlite3_finalize(v3);
  }
  return result;
}

void sub_1BDDF3C6C()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDDF3CCC()
{
  sub_1BE1B3200();
  __break(1u);
}

void sub_1BDDF3D2C()
{
  sub_1BE1B3200();
  __break(1u);
}

uint64_t sub_1BDDF3D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  uint64_t result;
  sqlite3 *v9;
  sqlite3_snapshot *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_1BE1B284C();
  v6 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (v4)
    return swift_bridgeObjectRelease();
  v7 = v6;
  if (sqlite3_step(v6) != 101)
  {
    result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(v3 + 32));
    if (!result)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return result;
    }
    v15 = sub_1BE1B2864();
    v17 = v16;
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v18 = v15;
    *(_QWORD *)(v18 + 8) = v17;
    *(_BYTE *)(v18 + 16) = 2;
    swift_willThrow();
    sqlite3_finalize(v7);
    return swift_bridgeObjectRelease();
  }
  sqlite3_finalize(v7);
  result = swift_bridgeObjectRelease();
  if (a3)
  {
    v9 = *(sqlite3 **)(v3 + 32);
    v10 = *(sqlite3_snapshot **)(a3 + 16);
    swift_retain();
    if (!sqlite3_snapshot_open(v9, "main", v10))
      return swift_release();
    result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(v3 + 32));
    if (result)
    {
      v11 = sub_1BE1B2864();
      v13 = v12;
      sub_1BDDFC134();
      swift_allocError();
      *(_QWORD *)v14 = v11;
      *(_QWORD *)(v14 + 8) = v13;
      *(_BYTE *)(v14 + 16) = 4;
      swift_willThrow();
      return swift_release();
    }
    goto LABEL_13;
  }
  return result;
}

const char *sub_1BDDF3F14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3 *v11;
  sqlite3_snapshot *v12;
  const char *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  sqlite3_stmt *v22;
  sqlite3_stmt *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  sqlite3_stmt *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (v4)
    goto LABEL_10;
  v10 = v9;
  if (sqlite3_step(v9) != 101)
  {
    result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
    if (!result)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v18 = sub_1BE1B2864();
    v20 = v19;
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v21 = v18;
    *(_QWORD *)(v21 + 8) = v20;
    *(_BYTE *)(v21 + 16) = 2;
    swift_willThrow();
    v22 = v10;
    goto LABEL_9;
  }
  sqlite3_finalize(v10);
  if (a1)
  {
    v11 = *(sqlite3 **)(a2 + 32);
    v12 = *(sqlite3_snapshot **)(a1 + 16);
    swift_retain();
    if (sqlite3_snapshot_open(v11, "main", v12))
    {
      result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
      if (result)
      {
        v14 = sub_1BE1B2864();
        v16 = v15;
        sub_1BDDFC134();
        swift_allocError();
        *(_QWORD *)v17 = v14;
        *(_QWORD *)(v17 + 8) = v16;
        *(_BYTE *)(v17 + 16) = 4;
        swift_willThrow();

        swift_release();
        return (const char *)swift_release();
      }
      goto LABEL_21;
    }
    swift_release();
  }
  sub_1BDFCB36C(a3, (uint64_t)a4);
  v23 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (sqlite3_step(v23) == 101)
  {
    v22 = v23;
LABEL_9:
    sqlite3_finalize(v22);
    goto LABEL_10;
  }
  result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
  if (result)
  {
    v24 = sub_1BE1B2864();
    v26 = v25;
    sub_1BDDFC134();
    v27 = (void *)swift_allocError();
    *(_QWORD *)v28 = v24;
    *(_QWORD *)(v28 + 8) = v26;
    *(_BYTE *)(v28 + 16) = 2;
    swift_willThrow();
    sqlite3_finalize(v23);
    v29 = (sqlite3_stmt *)sub_1BDD8AF9C();
    if (sqlite3_step(v29) != 101)
    {
      result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
      if (result)
      {
        v30 = sub_1BE1B2864();
        v32 = v31;
        sub_1BDDFC134();
        swift_allocError();
        *(_QWORD *)v33 = v30;
        *(_QWORD *)(v33 + 8) = v32;
        *(_BYTE *)(v33 + 16) = 2;
        swift_willThrow();
        sqlite3_finalize(v29);

        return (const char *)swift_release();
      }
      goto LABEL_22;
    }
    sqlite3_finalize(v29);
    swift_willThrow();
LABEL_10:

    return (const char *)swift_release();
  }
LABEL_23:
  __break(1u);
  return result;
}

sqlite3_stmt *sub_1BDDF4220()
{
  uint64_t v0;
  uint64_t v1;
  sqlite3_stmt *result;
  sqlite3_stmt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (!v1)
  {
    v3 = result;
    if (sqlite3_step(result) == 101)
    {
      sqlite3_finalize(v3);
      v3 = (sqlite3_stmt *)sub_1BDD8AF9C();
      if (sqlite3_step(v3) == 101)
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      if (sqlite3_errmsg(*(sqlite3 **)(v0 + 32)))
      {
LABEL_7:
        v4 = sub_1BE1B2864();
        v6 = v5;
        sub_1BDDFC134();
        swift_allocError();
        *(_QWORD *)v7 = v4;
        *(_QWORD *)(v7 + 8) = v6;
        *(_BYTE *)(v7 + 16) = 2;
        swift_willThrow();
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      }
      __break(1u);
    }
    result = (sqlite3_stmt *)sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
    if (!result)
    {
      __break(1u);
      return result;
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1BDDF4324(uint64_t a1, unint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  swift_beginAccess();
  swift_retain();
  sub_1BDDFCB40(a3, v8 + 88);
  swift_endAccess();
  swift_release();
  sub_1BDD89258(a1, a2, a4, a5, a6, a7, a8);
  sub_1BDDFCABC(a3);
  return v8;
}

const char *sub_1BDDF4420()
{
  _QWORD *v0;
  uint64_t v1;
  const char *result;

  result = sub_1BDD8AF9C();
  if (!v1)
  {
    v0[16] = result;
    v0[17] = sub_1BDD8AF9C();
    v0[18] = sub_1BDD8AF9C();
    v0[19] = sub_1BDD8AF9C();
    v0[20] = sub_1BDD8AF9C();
    v0[21] = sub_1BDD8AF9C();
    v0[22] = sub_1BDD8AF9C();
    v0[23] = sub_1BDD8AF9C();
    v0[24] = sub_1BDD8AF9C();
    v0[25] = sub_1BDD8AF9C();
    v0[26] = sub_1BDD8AF9C();
    v0[27] = sub_1BDD8AF9C();
    v0[28] = sub_1BDD8AF9C();
    v0[29] = sub_1BDD8AF9C();
    v0[33] = sub_1BDD8AF9C();
    v0[34] = sub_1BDD8AF9C();
    v0[31] = sub_1BDD8AF9C();
    v0[32] = sub_1BDD8AF9C();
    v0[30] = sub_1BDD8AF9C();
    v0[35] = sub_1BDD8AF9C();
    result = sub_1BDD8AF9C();
    v0[36] = result;
  }
  return result;
}

uint64_t sub_1BDDF46E8()
{
  sqlite3_stmt **v0;

  sqlite3_finalize(v0[16]);
  sqlite3_finalize(v0[17]);
  sqlite3_finalize(v0[18]);
  sqlite3_finalize(v0[19]);
  sqlite3_finalize(v0[21]);
  sqlite3_finalize(v0[20]);
  sqlite3_finalize(v0[22]);
  sqlite3_finalize(v0[23]);
  sqlite3_finalize(v0[24]);
  sqlite3_finalize(v0[25]);
  sqlite3_finalize(v0[26]);
  sqlite3_finalize(v0[27]);
  sqlite3_finalize(v0[28]);
  sqlite3_finalize(v0[29]);
  sqlite3_finalize(v0[30]);
  sqlite3_finalize(v0[31]);
  sqlite3_finalize(v0[32]);
  sqlite3_finalize(v0[33]);
  sqlite3_finalize(v0[34]);
  sqlite3_finalize(v0[35]);
  return sqlite3_finalize(v0[36]);
}

const void *sub_1BDDF479C(const void *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
    v3 = a2 - (_QWORD)result;
  else
    v3 = 0;
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(v2 + 240), 1, result, v3, *(void (__cdecl **)(void *))(v2 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 240)) == 100)
    v4 = sqlite3_column_int(*(sqlite3_stmt **)(v2 + 240), 0);
  else
    v4 = 0;
  sqlite3_reset(*(sqlite3_stmt **)(v2 + 240));
  return (const void *)v4;
}

uint64_t sub_1BDDF4840(uint64_t a1, _QWORD **a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _BYTE __dst[14];
  unsigned __int8 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  while (sqlite3_step(*(sqlite3_stmt **)(a1 + 192)) == 100)
  {
    v7 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 192), 0);
    v8 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 192), 0);
    v9 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 192), 1);
    v10 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 192), 1);
    if (!v8)
      __break(1u);
    v11 = v10;
    if ((_DWORD)v7)
    {
      if ((int)v7 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        v29 = v7;
        memcpy(__dst, v8, (int)v7);
        v13 = *(_QWORD *)__dst;
        v14 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v29 << 48);
        if (v11)
          goto LABEL_14;
      }
      else
      {
        sub_1BE1B1CAC();
        swift_allocObject();
        if ((_DWORD)v7 == 0x7FFFFFFF)
        {
          v12 = sub_1BE1B1C64();
          sub_1BE1B1E2C();
          v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_1BE1B5DE0;
          v14 = v12 | 0x8000000000000000;
          if (v11)
            goto LABEL_14;
        }
        else
        {
          v13 = v7 << 32;
          v14 = sub_1BE1B1C64() | 0x4000000000000000;
          if (v11)
          {
LABEL_14:
            if ((_DWORD)v9)
            {
              if ((int)v9 <= 14)
              {
                memset(__dst, 0, sizeof(__dst));
                v29 = v9;
                memcpy(__dst, v11, (int)v9);
                v16 = *(_QWORD *)__dst;
                v17 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v29 << 48);
              }
              else
              {
                sub_1BE1B1CAC();
                swift_allocObject();
                if ((_DWORD)v9 == 0x7FFFFFFF)
                {
                  v15 = sub_1BE1B1C64();
                  sub_1BE1B1E2C();
                  v16 = swift_allocObject();
                  *(_OWORD *)(v16 + 16) = xmmword_1BE1B5DE0;
                  v17 = v15 | 0x8000000000000000;
                }
                else
                {
                  v16 = v9 << 32;
                  v17 = sub_1BE1B1C64() | 0x4000000000000000;
                }
              }
            }
            else
            {
              v16 = 0;
              v17 = 0xC000000000000000;
            }
            v23 = *a2;
            sub_1BDDB6CA4(v13, v14);
            sub_1BDDB6CA4(v16, v17);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a2 = v23;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v23 = sub_1BDE067B0(0, v23[2] + 1, 1, v23);
              *a2 = v23;
            }
            v26 = v23[2];
            v25 = v23[3];
            if (v26 >= v25 >> 1)
              v23 = sub_1BDE067B0((_QWORD *)(v25 > 1), v26 + 1, 1, v23);
            v23[2] = v26 + 1;
            v4 = &v23[2 * v26];
            v4[4] = v13;
            v4[5] = v14;
            *a2 = v23;
            sub_1BDDB796C(v13, v14);
            sub_1BDDB796C(v16, v17);
            v5 = v16;
            v6 = v17;
            goto LABEL_4;
          }
        }
      }
    }
    else
    {
      v13 = 0;
      v14 = 0xC000000000000000;
      if (v10)
        goto LABEL_14;
    }
    v18 = *a2;
    sub_1BDDB6CA4(v13, v14);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v18;
    if ((v19 & 1) == 0)
    {
      v18 = sub_1BDE067B0(0, v18[2] + 1, 1, v18);
      *a2 = v18;
    }
    v21 = v18[2];
    v20 = v18[3];
    if (v21 >= v20 >> 1)
      v18 = sub_1BDE067B0((_QWORD *)(v20 > 1), v21 + 1, 1, v18);
    v18[2] = v21 + 1;
    v22 = &v18[2 * v21];
    v22[4] = v13;
    v22[5] = v14;
    *a2 = v18;
    v5 = v13;
    v6 = v14;
LABEL_4:
    sub_1BDDB796C(v5, v6);
  }
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 192));
}

uint64_t sub_1BDDF4C2C(void (*a1)(uint64_t, unint64_t, uint64_t, unint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE __dst[14];
  unsigned __int8 v18;
  uint64_t v19;

  v3 = v1;
  v19 = *MEMORY[0x1E0C80C00];
  while (sqlite3_step(*(sqlite3_stmt **)(v3 + 192)) == 100)
  {
    v6 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 192), 0);
    v7 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 192), 0);
    v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 192), 1);
    v9 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 192), 1);
    if (!v7)
      __break(1u);
    v10 = v9;
    if ((_DWORD)v6)
    {
      if ((int)v6 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        v18 = v6;
        memcpy(__dst, v7, (int)v6);
        v12 = *(_QWORD *)__dst;
        v13 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v18 << 48);
        if (!v10)
          goto LABEL_3;
      }
      else
      {
        sub_1BE1B1CAC();
        swift_allocObject();
        if ((_DWORD)v6 == 0x7FFFFFFF)
        {
          v11 = sub_1BE1B1C64();
          sub_1BE1B1E2C();
          v12 = swift_allocObject();
          *(_OWORD *)(v12 + 16) = xmmword_1BE1B5DE0;
          v13 = v11 | 0x8000000000000000;
          if (!v10)
            goto LABEL_3;
        }
        else
        {
          v12 = v6 << 32;
          v13 = sub_1BE1B1C64() | 0x4000000000000000;
          if (!v10)
          {
LABEL_3:
            a1(v12, v13, 0, 0xF000000000000000);
            result = sub_1BDDB796C(v12, v13);
            if (v2)
              return result;
            continue;
          }
        }
      }
    }
    else
    {
      v12 = 0;
      v13 = 0xC000000000000000;
      if (!v9)
        goto LABEL_3;
    }
    if ((_DWORD)v8)
    {
      if ((int)v8 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        v18 = v8;
        memcpy(__dst, v10, (int)v8);
        v15 = *(_QWORD *)__dst;
        v16 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v18 << 48);
      }
      else
      {
        sub_1BE1B1CAC();
        swift_allocObject();
        if ((_DWORD)v8 == 0x7FFFFFFF)
        {
          v14 = sub_1BE1B1C64();
          sub_1BE1B1E2C();
          v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_1BE1B5DE0;
          v16 = v14 | 0x8000000000000000;
        }
        else
        {
          v15 = v8 << 32;
          v16 = sub_1BE1B1C64() | 0x4000000000000000;
        }
      }
    }
    else
    {
      v15 = 0;
      v16 = 0xC000000000000000;
    }
    sub_1BDDB6CA4(v15, v16);
    a1(v12, v13, v15, v16);
    if (v2)
    {
      sub_1BDDB796C(v15, v16);
      sub_1BDDB796C(v15, v16);
      return sub_1BDDB796C(v12, v13);
    }
    sub_1BDDB796C(v12, v13);
    sub_1BDDB796C(v15, v16);
    sub_1BDDB796C(v15, v16);
  }
  return sqlite3_reset(*(sqlite3_stmt **)(v3 + 192));
}

const char *sub_1BDDF4F8C(const char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
    v3 = a2 - (_QWORD)result;
  else
    v3 = 0;
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(v2 + 288), 1, result, v3, *(void (__cdecl **)(void *))(v2 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 288)) == 101)
    return (const char *)sqlite3_reset(*(sqlite3_stmt **)(v2 + 288));
  result = sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
  if (result)
  {
    sub_1BE1B2864();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v4 = 0x203A65766F6D6552;
    *(_QWORD *)(v4 + 8) = 0xE800000000000000;
    *(_BYTE *)(v4 + 16) = 2;
    return (const char *)swift_willThrow();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1BDDF50A0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
    v7 = a2 - (_QWORD)a1;
  else
    v7 = 0;
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_9;
  }
  v2 = v4;
  sqlite3_bind_blob(*(sqlite3_stmt **)(v3 + 264), 1, a1, v7, *(void (__cdecl **)(void *))(v3 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v3 + 264)) != 100
    || (v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 264), 0),
        (v9 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 264), 0)) == 0))
  {
    v5 = 0;
    goto LABEL_12;
  }
  v5 = sub_1BDDD6E84(v9, v8);
  v6 = v10;
  if (qword_1ED6F3C80 != -1)
    goto LABEL_17;
LABEL_9:
  v11 = qword_1ED6F8BA8;
  swift_retain();
  v12 = sub_1BDF16FF4(v5, v6, v11);
  if (v2)
    return v5;
  v5 = v12;
LABEL_12:
  sqlite3_reset(*(sqlite3_stmt **)(v3 + 264));
  return v5;
}

uint64_t sub_1BDDF51C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  id v13;

  type metadata accessor for CREncoder();
  inited = swift_initStackObject();
  v11 = MEMORY[0x1E0DEE9D8];
  v12 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v11;
  *(_QWORD *)(inited + 48) = v11;
  *(_QWORD *)(inited + 56) = v12;
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = a1;
  *(_QWORD *)(inited + 24) = v11;
  *(_BYTE *)(inited + 72) = 1;
  v13 = a1;
  sub_1BDE1BFB4(a4, a5);
  if (!v5)
  {
    swift_setDeallocating();
    CREncoder.deinit();
    swift_deallocClassInstance();
    __asm { BR              X10 }
  }
  swift_setDeallocating();
  CREncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDF580C(uint64_t result, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t v6;
  void (__cdecl *v9)(void *);
  uint64_t v10;
  uint64_t v11;

  if (result)
    v6 = a2 - result;
  else
    v6 = 0;
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v9 = *(void (__cdecl **)(void *))(a3 + 72);
  result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 272), 1, (const void *)result, v6, *(void (__cdecl **)(void *))(a3 + 72));
  if (a4)
    v10 = a5 - (_QWORD)a4;
  else
    v10 = 0;
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_18;
  if (v10 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 272), 2, a4, v10, v9);
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 272)) == 101)
    return sqlite3_reset(*(sqlite3_stmt **)(a3 + 272));
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (!result)
    goto LABEL_20;
  sub_1BE1B2864();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  sub_1BDDFC134();
  swift_allocError();
  *(_QWORD *)v11 = 0xD000000000000018;
  *(_QWORD *)(v11 + 8) = 0x80000001BE1CC870;
  *(_BYTE *)(v11 + 16) = 2;
  return swift_willThrow();
}

void sub_1BDDF599C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  swift_beginAccess();
  sub_1BDDFCA74(v9 + 88, (uint64_t)&v14);
  if (v15)
  {
    sub_1BDD85B8C(&v14, (uint64_t)v16);
    v12 = v17;
    v13 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 8))(a1, a2, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    sub_1BDDFCABC((uint64_t)&v14);
    sub_1BDDB6CA4(a1, a2);
  }
  __asm { BR              X10 }
}

uint64_t sub_1BDDF5AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(v29 - 136) = v28;
  *(_WORD *)(v29 - 128) = v26;
  *(_BYTE *)(v29 - 126) = BYTE2(v26);
  *(_BYTE *)(v29 - 125) = BYTE3(v26);
  *(_BYTE *)(v29 - 124) = BYTE4(v26);
  *(_BYTE *)(v29 - 123) = BYTE5(v26);
  sub_1BDDB6CA4(v23, v25);
  sub_1BDDB6CA4(v24, v27);
  swift_retain();
  sub_1BDDB6CA4(v23, v25);
  sub_1BDDB6CA4(v24, v27);
  v30 = swift_retain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_1BDDF5B88 + *((int *)qword_1BDDF83D0 + (a23 >> 62))))(v30);
}

uint64_t sub_1BDDF5B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  unsigned int v18;
  uint64_t v19;

  sub_1BDDB6CA4(a17, a18);
  swift_retain();
  sub_1BDDB6CA4(a17, a18);
  v19 = swift_retain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_1BDDF5C48 + *((int *)qword_1BDDF8410 + v18)))(v19);
}

uint64_t sub_1BDDF5C58()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_retain_n();
  return ((uint64_t (*)(uint64_t))((char *)&loc_1BDDF5CEC + *((int *)qword_1BDDF8430 + v0)))(v1);
}

uint64_t sub_1BDDF5D00()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v14 = v8;
  v15 = v9;
  v16 = BYTE2(v9);
  v17 = BYTE3(v9);
  v18 = BYTE4(v9);
  v19 = BYTE5(v9);
  sub_1BDDB6CA4(v11, v13);
  sub_1BDDB6CA4(v2, v0);
  sub_1BDDB6CA4(v11, v13);
  sub_1BDDB6CA4(v2, v0);
  sub_1BDDF9EA4((uint64_t)&v14, (uint64_t)&v14 + BYTE6(v9), v12, (void *)(v5 - 136), v1, &v21, v3, v10, &v20, v4);
  swift_release();
  sub_1BDDB796C(v8, v9);
  swift_release();
  sub_1BDDB796C(v7, v0);
  sub_1BDDB796C(v8, v9);
  swift_release();
  sub_1BDDB796C(v7, v0);
  sub_1BDDB796C(v8, v9);
  swift_release();
  sub_1BDDB796C(v11, v13);
  sub_1BDDB796C(v7, v0);
  sub_1BDDB796C(v8, v9);
  swift_release();
  sub_1BDDB796C(v11, v13);
  sub_1BDDB796C(v7, v0);
  sub_1BDDB796C(v8, v9);
  return swift_release();
}

void sub_1BDDF8440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDDF84BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, unint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v23 - 104) = v21;
  *(_WORD *)(v23 - 96) = v22;
  *(_BYTE *)(v23 - 94) = BYTE2(v22);
  *(_BYTE *)(v23 - 93) = BYTE3(v22);
  *(_BYTE *)(v23 - 92) = BYTE4(v22);
  *(_BYTE *)(v23 - 91) = BYTE5(v22);
  sub_1BDDB6CA4(v20, a19);
  swift_retain();
  sub_1BDDB6CA4(v20, a19);
  v24 = swift_retain();
  return ((uint64_t (*)(uint64_t))((char *)&loc_1BDDF8578 + *((int *)qword_1BDDF9500 + (a20 >> 62))))(v24);
}

uint64_t sub_1BDDF8588()
{
  unsigned int v0;
  uint64_t v1;

  v1 = swift_retain_n();
  return ((uint64_t (*)(uint64_t))((char *)&loc_1BDDF8624 + *((int *)qword_1BDDF9520 + v0)))(v1);
}

uint64_t sub_1BDDF8634(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;

  v52 = v43;
  v53 = v49;
  v54 = BYTE2(v49);
  v55 = BYTE3(v49);
  v56 = BYTE4(v49);
  v57 = BYTE5(v49);
  sub_1BDDB6CA4(v48, v50);
  sub_1BDDB6CA4(v48, v50);
  sub_1BDDF9EA4((uint64_t)&v52, (uint64_t)&v52 + BYTE6(v49), v51, v46, v41, (const void *)(v44 - 104), v42, v47, &v58, v40);
  swift_release();
  swift_release();
  sub_1BDDB796C(v48, v50);
  sub_1BDDB796C(v43, v49);
  swift_release();
  sub_1BDDB796C(v48, v50);
  sub_1BDDB796C(v43, v49);
  return swift_release();
}

void sub_1BDDF9530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDDF95A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  uint64_t v18;

  v18 = swift_retain_n();
  return ((uint64_t (*)(uint64_t))((char *)&loc_1BDDF9634 + dword_1BDDF9BCC[a18 >> 62]))(v18);
}

uint64_t sub_1BDDF9644()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v10 = v1;
  v11 = v8;
  v12 = BYTE2(v8);
  v13 = BYTE3(v8);
  v14 = BYTE4(v8);
  v15 = BYTE5(v8);
  sub_1BDDB6CA4(v1, v8);
  sub_1BDDF9EA4((uint64_t)&v10, (uint64_t)&v10 + BYTE6(v8), v9, v3, v6, v2, v7, v0, &v16, v4);
  swift_release();
  sub_1BDDB796C(v1, v8);
  return swift_release();
}

void sub_1BDDF9BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDDF9C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  __int16 v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v18 = v14;
  v19 = v10;
  v20 = BYTE2(v10);
  v21 = BYTE3(v10);
  v22 = BYTE4(v10);
  v23 = BYTE5(v10);
  v15 = v6;
  swift_retain();
  sub_1BDDF9EA4((uint64_t)&v18, (uint64_t)&v18 + BYTE6(v10), v7, a6, v12, v11, v15, v13, v8, v9);
  return swift_release();
}

uint64_t sub_1BDDF9EA4(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  uint64_t v10;
  const void *v16;
  void (__cdecl *v17)(void *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = a5 - (_QWORD)a4;
  if (!a4)
    v10 = 0;
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v16 = (const void *)result;
  v17 = *(void (__cdecl **)(void *))(a3 + 72);
  result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 1, a4, v10, v17);
  if (a6)
    v18 = a7 - (_QWORD)a6;
  else
    v18 = 0;
  if (v18 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_28;
  if (v18 > 0x7FFFFFFF)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 2, a6, v18, v17);
  if (a8 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a8 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  result = sqlite3_bind_int(*(sqlite3_stmt **)(a3 + 280), 3, a8);
  if (a9)
    v19 = a10 - (_QWORD)a9;
  else
    v19 = 0;
  if (v19 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_32;
  if (v19 > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 4, a9, v19, v17);
  if (v16)
    v20 = a2 - (_QWORD)v16;
  else
    v20 = 0;
  if (v20 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_34;
  if (v20 > 0x7FFFFFFF)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 5, v16, v20, v17);
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 280)) == 101)
    return sqlite3_reset(*(sqlite3_stmt **)(a3 + 280));
  result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (result)
  {
    sub_1BE1B2864();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    sub_1BDDFC134();
    swift_allocError();
    *(_QWORD *)v21 = 0x203A747265736E49;
    *(_QWORD *)(v21 + 8) = 0xE800000000000000;
    *(_BYTE *)(v21 + 16) = 2;
    return swift_willThrow();
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1BDDFA0DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  id v16;

  type metadata accessor for CREncoder();
  inited = swift_initStackObject();
  v14 = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v15;
  *(_QWORD *)(inited + 64) = v14;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = a1;
  *(_QWORD *)(inited + 24) = v14;
  *(_BYTE *)(inited + 72) = 1;
  v16 = a1;
  sub_1BDE1BFB4(a6, a7);
  if (!v9)
  {
    swift_setDeallocating();
    CREncoder.deinit();
    swift_deallocClassInstance();
    __asm { BR              X10 }
  }
  swift_setDeallocating();
  CREncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDDFA5C8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (result)
    v6 = a2 - result;
  else
    v6 = 0;
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 208), 1, (const void *)result, v6, *(void (__cdecl **)(void *))(a3 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 208)) != 100)
  {
    v11 = 0;
    v18 = 0;
    v19 = 0;
    v13 = 0xF000000000000000;
    goto LABEL_16;
  }
  v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 208), 0);
  v9 = sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 208), 0);
  v10 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 208), 1);
  result = (uint64_t)sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 208), 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v11 = sub_1BDDD6E84((_BYTE *)result, v10);
  v13 = v12;
  swift_beginAccess();
  sub_1BDDFCA74(a3 + 88, (uint64_t)&v23);
  if (v24)
  {
    v28 = v8;
    sub_1BDD85B8C(&v23, (uint64_t)v25);
    v15 = v26;
    v14 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    v16 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v13, v15, v14);
    if (v4)
    {
      sub_1BDDB796C(v11, v13);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    }
    v21 = v16;
    v22 = v17;
    sub_1BDDB796C(v11, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    v11 = v21;
    v13 = v22;
    LODWORD(v8) = v28;
    if (!v9)
      goto LABEL_15;
  }
  else
  {
    sub_1BDDFCABC((uint64_t)&v23);
    if (!v9)
    {
LABEL_15:
      v18 = 0;
      v19 = 0xC000000000000000;
      goto LABEL_16;
    }
  }
  v18 = sub_1BDDD6E84(v9, (int)v8);
  v19 = v20;
LABEL_16:
  result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 208));
  *a4 = v11;
  a4[1] = v13;
  a4[2] = v18;
  a4[3] = v19;
  return result;
}

uint64_t sub_1BDDFA7C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  int v10;
  _BYTE *v11;
  int v12;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = v0;
  v38 = sub_1BE12667C(MEMORY[0x1E0DEE9D8]);
  v4 = (sqlite3_stmt *)sub_1BDD8AF9C();
  if (!v1)
  {
    v5 = v4;
    if (sqlite3_step(v4) == 100)
      sqlite3_column_int(v5, 0);
    sqlite3_finalize(v5);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B6A0);
    sub_1BE1B25D0();
    v29 = v0 + 88;
    swift_beginAccess();
    v2 = v38;
    while (1)
    {
      if (sqlite3_step(*(sqlite3_stmt **)(v3 + 216)) != 100)
      {
        sqlite3_reset(*(sqlite3_stmt **)(v3 + 216));
        return v2;
      }
      v32 = v2;
      v10 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 216), 0);
      v11 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 216), 0);
      v12 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 216), 1);
      v13 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 216), 1);
      v14 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 216), 2);
      v15 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 216), 2);
      if (v11)
      {
        result = sub_1BDDD6E84(v11, v10);
        if (!v15)
          goto LABEL_19;
      }
      else
      {
        result = 0;
        v17 = 0xC000000000000000;
        if (!v15)
        {
LABEL_19:
          __break(1u);
          return result;
        }
      }
      v30 = result;
      v31 = v17;
      v18 = sub_1BDDD6E84(v15, v14);
      v20 = v19;
      sub_1BDDFCA74(v29, (uint64_t)&v33);
      if (v34)
      {
        v21 = v3;
        v22 = v12;
        sub_1BDD85B8C(&v33, (uint64_t)v35);
        v24 = v36;
        v23 = v37;
        __swift_project_boxed_opaque_existential_1(v35, v36);
        v25 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v23 + 16);
        sub_1BDDB6CA4(v18, v20);
        v26 = v25(v18, v20, v24, v23);
        v28 = v27;
        sub_1BDDB796C(v18, v20);
        sub_1BDDB796C(v18, v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
        v18 = v26;
        v20 = v28;
        v12 = v22;
        v3 = v21;
        if (v13)
        {
LABEL_7:
          v6 = sub_1BDDD6E84(v13, v12);
          v8 = v7;
          goto LABEL_8;
        }
      }
      else
      {
        sub_1BDDFCABC((uint64_t)&v33);
        if (v13)
          goto LABEL_7;
      }
      v6 = 0;
      v8 = 0xC000000000000000;
LABEL_8:
      sub_1BDDB6CA4(v30, v31);
      sub_1BDDB6CA4(v18, v20);
      sub_1BDDB6CA4(v6, v8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v35[0] = v32;
      sub_1BE1545B4(v18, v20, v6, v8, v30, v31, isUniquelyReferenced_nonNull_native);
      v2 = v35[0];
      swift_bridgeObjectRelease();
      sub_1BDDB796C(v30, v31);
      sub_1BDDB796C(v18, v20);
      sub_1BDDB796C(v30, v31);
      sub_1BDDB796C(v6, v8);
    }
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1BDDFAB2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  int v8;
  _BYTE *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  _BYTE *__src;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (result)
    v6 = a2 - result;
  else
    v6 = 0;
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 224), 1, (const void *)result, v6, *(void (__cdecl **)(void *))(a3 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 224)) != 100)
  {
    v38 = v4;
    v12 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v14 = 0xF000000000000000;
LABEL_19:
    result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 224));
    *a4 = v12;
    a4[1] = v14;
    a4[2] = v19;
    a4[3] = v20;
    a4[4] = v21;
    a4[5] = v22;
    a4[6] = v23;
    return result;
  }
  v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 224), 0);
  v9 = sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 224), 0);
  v31 = sqlite3_column_int(*(sqlite3_stmt **)(a3 + 224), 1);
  v10 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 224), 2);
  __src = sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 224), 2);
  v11 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 224), 3);
  result = (uint64_t)sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 224), 3);
  if (result)
  {
    v12 = sub_1BDDD6E84((_BYTE *)result, v11);
    v14 = v13;
    swift_beginAccess();
    sub_1BDDFCA74(a3 + 88, (uint64_t)&v33);
    if (v34)
    {
      v29 = v8;
      v30 = v10;
      sub_1BDD85B8C(&v33, (uint64_t)v35);
      v15 = v36;
      v16 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 16))(v12, v14, v15, v16);
      if (v4)
      {
        sub_1BDDB796C(v12, v14);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      }
      v24 = v17;
      v25 = v18;
      v38 = 0;
      sub_1BDDB796C(v12, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      v12 = v24;
      v14 = v25;
      v8 = v29;
      v10 = v30;
    }
    else
    {
      v38 = v4;
      sub_1BDDFCABC((uint64_t)&v33);
    }
    v21 = v31;
    if (v9)
    {
      v19 = sub_1BDDD6E84(v9, v8);
      v20 = v26;
      v27 = __src;
      if (__src)
      {
LABEL_16:
        v22 = sub_1BDDD6E84(v27, v10);
        v23 = v28;
        goto LABEL_19;
      }
    }
    else
    {
      v19 = 0;
      v20 = 0xC000000000000000;
      v27 = __src;
      if (__src)
        goto LABEL_16;
    }
    v22 = 0;
    v23 = 0xC000000000000000;
    goto LABEL_19;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1BDDFADAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v5;
  BOOL v7;

  if (result)
    v5 = a2 - result;
  else
    v5 = 0;
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v5 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 200), 1, (const void *)result, v5, *(void (__cdecl **)(void *))(a3 + 72));
  v7 = sqlite3_step(*(sqlite3_stmt **)(a3 + 200)) == 100 && sqlite3_column_int(*(sqlite3_stmt **)(a3 + 200), 0) != 0;
  result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 200));
  *a4 = v7;
  return result;
}

uint64_t sub_1BDDFAE54(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  const void *v11;
  void (__cdecl *v12)(void *);
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result)
    v6 = a2 - result;
  else
    v6 = 0;
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = (const void *)result;
  v12 = *(void (__cdecl **)(void *))(a3 + 72);
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 144), 1, (const void *)result, v6, v12);
  result = sqlite3_step(*(sqlite3_stmt **)(a3 + 144));
  if ((_DWORD)result == 100)
  {
    v13 = sqlite3_column_int(*(sqlite3_stmt **)(a3 + 144), 0);
  }
  else
  {
    if (a4 < 1)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v13 = 0;
    *a5 = 0;
  }
  result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 144));
  v14 = __OFADD__(v13, a4);
  v15 = v13 + a4;
  if (v14)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v15)
  {
    if (v15 < 1)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v16 = 0xD000000000000014;
      *(_QWORD *)(v16 + 8) = 0x80000001BE1CC780;
      *(_BYTE *)(v16 + 16) = 0;
      return swift_willThrow();
    }
    result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 168), 1, v11, v6, v12);
    if (!((unint64_t)v15 >> 31))
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(a3 + 168), 2, v15);
      if (sqlite3_step(*(sqlite3_stmt **)(a3 + 168)) == 101)
        return sqlite3_reset(*(sqlite3_stmt **)(a3 + 168));
      sub_1BE1B305C();
      swift_bridgeObjectRelease();
      result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
      if (result)
      {
        sub_1BE1B2864();
        sub_1BE1B284C();
        swift_bridgeObjectRelease();
        sub_1BE1B284C();
        sub_1BDDFC134();
        swift_allocError();
        *(_QWORD *)v17 = 0xD000000000000018;
        *(_QWORD *)(v17 + 8) = 0x80000001BE1CC7A0;
        *(_BYTE *)(v17 + 16) = 2;
        return swift_willThrow();
      }
LABEL_28:
      __break(1u);
      return result;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  result = (uint64_t)sub_1BDDFB0BC((const char *)v11, a2);
  if (!v5)
    *a5 = 1;
  return result;
}

const char *sub_1BDDFB0BC(const char *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if (result)
    v3 = a2 - (_QWORD)result;
  else
    v3 = 0;
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(v2 + 176), 1, result, v3, *(void (__cdecl **)(void *))(v2 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 176)) == 101)
    return (const char *)sqlite3_reset(*(sqlite3_stmt **)(v2 + 176));
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "Delete Asset: ");
  HIBYTE(v6[1]) = -18;
  result = sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
  if (!result)
    goto LABEL_13;
  sub_1BE1B2864();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  v4 = v6[1];
  sub_1BDDFC134();
  swift_allocError();
  *(_QWORD *)v5 = v6[0];
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = 2;
  return (const char *)swift_willThrow();
}

uint64_t sub_1BDDFB200(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = (uint64_t)sub_1BDDF479C(a1, a2);
  if ((v12 & 1) != 0)
  {
    if (a4 < 1)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v13 = *a5;
    *(_OWORD *)a5 = xmmword_1BE1B5DF0;
    sub_1BDDCCD20(v13);
    result = 0;
  }
  v14 = result + a4;
  if (__OFADD__(result, a4))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14)
  {
    if (v14 < 1)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v19 = 0xD000000000000018;
      *(_QWORD *)(v19 + 8) = 0x80000001BE1CC7C0;
      *(_BYTE *)(v19 + 16) = 0;
      return swift_willThrow();
    }
    if (!((unint64_t)v14 >> 31))
    {
      result = sqlite3_bind_int(*(sqlite3_stmt **)(a3 + 248), 1, v14);
      if (a1)
        v15 = a2 - (_QWORD)a1;
      else
        v15 = 0;
      if (v15 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v15 <= 0x7FFFFFFF)
        {
          sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 248), 2, a1, v15, *(void (__cdecl **)(void *))(a3 + 72));
          if (sqlite3_step(*(sqlite3_stmt **)(a3 + 248)) == 101)
            return sqlite3_reset(*(sqlite3_stmt **)(a3 + 248));
          sub_1BE1B305C();
          swift_bridgeObjectRelease();
          result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
          if (result)
          {
            sub_1BE1B2864();
            sub_1BE1B284C();
            swift_bridgeObjectRelease();
            sub_1BE1B284C();
            sub_1BDDFC134();
            swift_allocError();
            *(_QWORD *)v20 = 0xD00000000000001CLL;
            *(_QWORD *)(v20 + 8) = 0x80000001BE1CC7E0;
            *(_BYTE *)(v20 + 16) = 2;
            return swift_willThrow();
          }
LABEL_27:
          __break(1u);
          return result;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  result = sub_1BDDF50A0(a1, a2);
  if (!v5)
  {
    v17 = result;
    v18 = v16;
    sub_1BDDF4F8C((const char *)a1, a2);
    v21 = *a5;
    *a5 = v17;
    a5[1] = v18;
    return sub_1BDDCCD20(v21);
  }
  return result;
}

uint64_t sub_1BDDFB460(void *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  type metadata accessor for CREncoder();
  v14 = *a4;
  inited = swift_initStackObject();
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = v9;
  *(_QWORD *)(inited + 64) = v8;
  *(_QWORD *)(inited + 80) = 0;
  *(_QWORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 16) = a1;
  *(_QWORD *)(inited + 24) = v8;
  *(_BYTE *)(inited + 72) = 1;
  v15 = v14;
  v10 = a1;
  sub_1BDE18E48(&v15);
  if (!v4)
  {
    v13 = v11;
    swift_setDeallocating();
    CREncoder.deinit();
    swift_deallocClassInstance();
    __asm { BR              X10 }
  }
  swift_setDeallocating();
  CREncoder.deinit();
  return swift_deallocClassInstance();
}

void sub_1BDDFBC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDDFBC68()
{
  uint64_t v0;
  void (*v1)(uint64_t *, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v4;
  v8 = v5;
  v9 = BYTE2(v5);
  v10 = BYTE3(v5);
  v11 = BYTE4(v5);
  v12 = BYTE5(v5);
  swift_retain();
  v1(&v7, (char *)&v7 + BYTE6(v5), v0, v3, v2);
  return swift_release();
}

uint64_t sub_1BDDFBE40(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  const void *v8;
  void (__cdecl *v9)(void *);
  uint64_t v10;
  uint64_t v11;

  v5 = a5 - (_QWORD)a4;
  if (!a4)
    v5 = 0;
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v5 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = (const void *)result;
  v9 = *(void (__cdecl **)(void *))(a3 + 72);
  result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 256), 1, a4, v5, v9);
  if (v8)
    v10 = a2 - (_QWORD)v8;
  else
    v10 = 0;
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_17;
  if (v10 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 256), 2, v8, v10, v9);
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 256)) == 101)
    return sqlite3_reset(*(sqlite3_stmt **)(a3 + 256));
  sub_1BE1B305C();
  swift_bridgeObjectRelease();
  result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (!result)
    goto LABEL_19;
  sub_1BE1B2864();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  sub_1BDDFC134();
  swift_allocError();
  *(_QWORD *)v11 = 0xD00000000000001DLL;
  *(_QWORD *)(v11 + 8) = 0x80000001BE1CC760;
  *(_BYTE *)(v11 + 16) = 2;
  return swift_willThrow();
}

uint64_t sub_1BDDFBFD4()
{
  uint64_t v0;

  return sub_1BDDFCABC(v0 + 88);
}

uint64_t sub_1BDDFBFDC()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 40) & 1) == 0
    && (*(_BYTE *)(v0 + 40) = 1, sub_1BDDF46E8(), sqlite3_close(*(sqlite3 **)(v0 + 32))))
  {
    sub_1BE1B305C();
    swift_bridgeObjectRelease();
    sub_1BE1B32E4();
    sub_1BE1B284C();
    swift_bridgeObjectRelease();
    sub_1BE1B284C();
    result = sub_1BE1B3200();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDDFCABC(v0 + 88);
    return v0;
  }
  return result;
}

uint64_t sub_1BDDFC0F4()
{
  sub_1BDDFBFDC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRSQLStore()
{
  return objc_opt_self();
}

unint64_t sub_1BDDFC134()
{
  unint64_t result;

  result = qword_1ED6EF880[0];
  if (!qword_1ED6EF880[0])
  {
    result = MEMORY[0x1C3B7DF54](&unk_1BE1B5F58, &type metadata for SQLiteError);
    atomic_store(result, qword_1ED6EF880);
  }
  return result;
}

uint64_t sub_1BDDFC178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_1BE1B1C70();
  v17 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v17 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v18 = sub_1BE1B1C88();
  if (v18 >= a2 - a1)
    v19 = a2 - a1;
  else
    v19 = v18;
  v20 = v17 + v19;
  if (v17)
    v21 = v20;
  else
    v21 = 0;
  sub_1BDDF8440(v17, v21, a4, a5);
  sub_1BDDB796C(a4, a5);
  sub_1BDDB796C(a6, a7);
  sub_1BDDB796C(a8, a9);
  return swift_release();
}

uint64_t sub_1BDDFC294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_1BE1B1C70();
  v14 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v14 += a1 - result;
  }
  v15 = __OFSUB__(a2, a1);
  v16 = a2 - a1;
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  v17 = sub_1BE1B1C88();
  if (v17 >= v16)
    v18 = v16;
  else
    v18 = v17;
  v19 = v14 + v18;
  if (v14)
    v20 = v19;
  else
    v20 = 0;
  sub_1BDDF9530(v14, v20, a4, a5);
  sub_1BDDB796C(a4, a5);
  sub_1BDDB796C(a6, a7);
  return swift_release();
}

uint64_t sub_1BDDFC3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_1BE1B1C70();
  v10 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v10 += a1 - result;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = sub_1BE1B1C88();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v10 + v14;
  if (v10)
    v16 = v15;
  else
    v16 = 0;
  sub_1BDDF9BDC(v10, v16, a4, a5);
  sub_1BDDB796C(a4, a5);
  return swift_release();
}

uint64_t sub_1BDDFC4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, const void *a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11)
{
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = sub_1BE1B1C70();
  v18 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v18 += a1 - result;
  }
  v19 = __OFSUB__(a2, a1);
  v20 = a2 - a1;
  if (v19)
  {
    __break(1u);
    goto LABEL_13;
  }
  v21 = sub_1BE1B1C88();
  if (v21 >= v20)
    v22 = v20;
  else
    v22 = v21;
  v23 = v18 + v22;
  if (v18)
    v24 = v23;
  else
    v24 = 0;
  sub_1BDDF9EA4(v18, v24, a4, a5, a6, a7, a8, a9, a10, a11);
  return swift_release();
}

uint64_t sub_1BDDFC594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = sub_1BE1B1C70();
  v9 = (char *)result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_17:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_17;
  }
  v12 = sub_1BE1B1C88();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = &v9[v13];
  if (v9)
    v15 = (uint64_t)v14;
  else
    v15 = 0;
  v16 = sub_1BDDF50A0(v9, v15);
  if (!v4)
  {
    v18 = v16;
    if (!v16)
    {
      v19 = MEMORY[0x1E0DEE9D8];
      v18 = sub_1BDDB6E0C(MEMORY[0x1E0DEE9D8]);
      v17 = sub_1BDDB6CE8(v19);
    }
    v20 = *a4;
    *a4 = v18;
    a4[1] = v17;
    sub_1BDDC8EA0(v20);
  }
  return swift_release();
}

uint64_t sub_1BDDFC67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_1BE1B1C70();
  v10 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v10 += a1 - result;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = sub_1BE1B1C88();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v10 + v14;
  if (v10)
    v16 = v15;
  else
    v16 = 0;
  sub_1BDDFBC00(v10, v16, a4, a5);
  sub_1BDDB796C(a4, a5);
  return swift_release();
}

uint64_t sub_1BDDFC758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = sub_1BE1B1C70();
  v13 = result;
  if (result)
  {
    result = sub_1BE1B1C94();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  v14 = __OFSUB__(a2, a1);
  v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = sub_1BE1B1C88();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  v18 = v13 + v17;
  if (v13)
    v19 = v18;
  else
    v19 = 0;
  a7(v13, v19, a4, a5, a6);
  return swift_release();
}

uint64_t sub_1BDDFC828(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE __dst[14];
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  while (sqlite3_step(*(sqlite3_stmt **)(a1 + 184)) == 100)
  {
    v4 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 184), 0);
    v5 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 184), 0);
    if (!v5)
      __break(1u);
    if ((_DWORD)v4)
    {
      if ((int)v4 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        v16 = v4;
        memcpy(__dst, v5, (int)v4);
        v7 = *(_QWORD *)__dst;
        v8 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v16 << 48);
      }
      else
      {
        sub_1BE1B1CAC();
        swift_allocObject();
        if ((_DWORD)v4 == 0x7FFFFFFF)
        {
          v6 = sub_1BE1B1C64();
          sub_1BE1B1E2C();
          v7 = swift_allocObject();
          *(_OWORD *)(v7 + 16) = xmmword_1BE1B5DE0;
          v8 = v6 | 0x8000000000000000;
        }
        else
        {
          v7 = v4 << 32;
          v8 = sub_1BE1B1C64() | 0x4000000000000000;
        }
      }
    }
    else
    {
      v7 = 0;
      v8 = 0xC000000000000000;
    }
    sub_1BE108BC8(v7, v8, __dst);
    v9 = *(_QWORD *)__dst;
    v10 = *a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_1BDE06BF0(0, v10[2] + 1, 1, v10);
      *a2 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
      v10 = sub_1BDE06BF0((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    v10[2] = v13 + 1;
    v10[v13 + 4] = v9;
    *a2 = v10;
    sub_1BDDB796C(v7, v8);
  }
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 184));
}

uint64_t sub_1BDDFCA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F3DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDFCABC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F3DD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1BDDFCAFC()
{
  unint64_t result;

  result = qword_1EF52B390;
  if (!qword_1EF52B390)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRCodingError, &type metadata for CRCodingError);
    atomic_store(result, (unint64_t *)&qword_1EF52B390);
  }
  return result;
}

uint64_t sub_1BDDFCB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F3DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BDDFCB8C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SQLiteError(uint64_t a1)
{
  return sub_1BDDFCBB4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1BDDFCBB4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 4u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s9Coherence11SQLiteErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BDDFCB8C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1BDDFCB8C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1BDDFCBB4(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SQLiteError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1BDDFCBB4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1BDDFCD4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1BDDFCD54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteError()
{
  return &type metadata for SQLiteError;
}

uint64_t sub_1BDDFCD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v17[4];

  v1 = v0;
  v2 = sub_1BE1B1F58();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37A0]), sel_init);
  v7 = sub_1BDDC6C38(0, &qword_1EF52C3E8);
  v17[3] = v7;
  v17[0] = v6;
  sub_1BE1B1F4C();
  if (v7)
  {
    v8 = __swift_project_boxed_opaque_existential_1(v17, v7);
    v9 = *(_QWORD *)(v7 - 8);
    MEMORY[0x1E0C80A78](v8);
    v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    v12 = sub_1BE1B34A0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_allocWithZone((Class)CRTTMergeableString);
  v14 = (void *)sub_1BE1B1F04();
  v15 = objc_msgSend(v13, sel_initWithStorage_uuid_, v12, v14);
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(v1 + 16) = v15;
  return v1;
}

uint64_t *sub_1BDDFCF10(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  objc_class *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v21;
  id v22;
  objc_super v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21 = *v2;
  v5 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDD9C318(a1, (uint64_t)v7, v8);
  v9 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  swift_retain();
  v12 = v10;
  sub_1BE1B20E4();
  v13 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1ED6EF680 != -1)
    swift_once();
  *(_QWORD *)&v11[v13] = qword_1ED6EF678;
  sub_1BDD9C318((uint64_t)v7, (uint64_t)&v12[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(_QWORD *)&v12[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a2;
  swift_retain();
  swift_retain();

  v23.receiver = v12;
  v23.super_class = v9;
  v14 = objc_msgSendSuper2(&v23, sel_init, v21);
  swift_release();
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Sequence);
  v15 = objc_allocWithZone((Class)CRTTMergeableString);
  v22 = 0;
  v16 = objc_msgSend(v15, sel_initWithDecoder_error_, v14, &v22);
  if (v16)
  {
    v17 = (uint64_t)v16;
    v18 = v22;
    swift_release();

    sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
    v2[2] = v17;
  }
  else
  {
    v19 = v22;
    sub_1BE1B1D3C();

    swift_willThrow();
    swift_release();

    sub_1BDD9C3E0(a1, type metadata accessor for Proto_Sequence);
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t sub_1BDDFD174()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t CRString.copy(renamingReferences:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;

  v3 = *(void **)(*(_QWORD *)v1 + 16);
  swift_retain();
  v4 = objc_msgSend(v3, sel_attributedString);
  objc_opt_self();
  swift_dynamicCastObjCClassUnconditional();
  v5 = sub_1BE1B27C8();
  v7 = v6;
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for CRStringRef();
  v8 = swift_allocObject();
  sub_1BDDFCD6C();
  *a1 = v8;
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  CRString.insert(contentsOf:at:)(v9, 0);
  return swift_bridgeObjectRelease();
}

uint64_t CRString.string.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_attributedString);
  objc_opt_self();
  swift_dynamicCastObjCClassUnconditional();
  v2 = sub_1BE1B27C8();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t type metadata accessor for CRStringRef()
{
  return objc_opt_self();
}

void CRString.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for CRStringRef();
  v4 = swift_allocObject();
  sub_1BDDFCD6C();

  *a2 = v4;
}

uint64_t CRString.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CRStringRef();
  v2 = swift_allocObject();
  result = sub_1BDDFCD6C();
  *a1 = v2;
  return result;
}

uint64_t CRString.init(_:string:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  Swift::String v9;
  uint64_t result;

  type metadata accessor for CRStringRef();
  v8 = swift_allocObject();
  sub_1BDDFCD6C();
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  CRString.insert(contentsOf:at:)(v9, 0);

  result = swift_bridgeObjectRelease();
  *a4 = v8;
  return result;
}

uint64_t _s9Coherence8CRStringVyACSScfC_0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  Swift::String v7;

  type metadata accessor for CRStringRef();
  v6 = swift_allocObject();
  sub_1BDDFCD6C();
  *a3 = v6;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  CRString.insert(contentsOf:at:)(v7, 0);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CRString.insert(contentsOf:at:)(Swift::String contentsOf, Swift::Int at)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[7];

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v4 = *v2;
    type metadata accessor for CRStringRef();
    v5 = swift_allocObject();
    v6 = *(void **)(v4 + 16);
    swift_retain();
    objc_msgSend(v6, sel_copy);
    sub_1BE1B2F3C();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
    swift_dynamicCast();
    *(_QWORD *)(v5 + 16) = aBlock[6];
    *v2 = v5;
    swift_release();
  }
  v7 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v8 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithString_, v8);

  v10 = *(id *)(*v2 + 16);
  v11 = objc_msgSend(v9, sel_length);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_1BDDFD6EC;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1BDDFD720;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDFD740;
  aBlock[3] = &block_descriptor_0;
  v14 = _Block_copy(aBlock);
  v15 = v9;
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_insertAtIndex_length_getStorage_, at, v11, v14);

  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

uint64_t sub_1BDDFD6C8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BDDFD6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1BDDFD710()
{
  return swift_deallocObject();
}

uint64_t sub_1BDDFD720()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_1BDDFD740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(_QWORD *__return_ptr, char *, uint64_t, uint64_t);
  void *v12;
  _QWORD v14[4];

  v7 = sub_1BE1B1F58();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(_QWORD *__return_ptr, char *, uint64_t, uint64_t))(a1 + 32);
  sub_1BE1B1F1C();
  v11(v14, v10, a3, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  v12 = (void *)sub_1BE1B34A0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

Swift::Void __swiftcall CRString.append(_:)(Swift::String a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD aBlock[7];

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v2 = *v1;
    type metadata accessor for CRStringRef();
    v3 = swift_allocObject();
    v4 = *(void **)(v2 + 16);
    swift_retain();
    objc_msgSend(v4, sel_copy);
    sub_1BE1B2F3C();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
    swift_dynamicCast();
    *(_QWORD *)(v3 + 16) = aBlock[6];
    *v1 = v3;
    swift_release();
  }
  v5 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v6 = (void *)sub_1BE1B27A4();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_initWithString_, v6);

  v8 = *(id *)(*v1 + 16);
  v9 = objc_msgSend(v8, sel_length);
  v10 = objc_msgSend(v7, sel_length);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v7;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_1BDDFD6EC;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_1BDE084F4;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BDDFD740;
  aBlock[3] = &block_descriptor_13;
  v13 = _Block_copy(aBlock);
  v14 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_insertAtIndex_length_getStorage_, v9, v10, v13);

  _Block_release(v13);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
}

id sub_1BDDFDA84@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v4;

  v4 = *(id *)(v1 + 16);
  a1[3] = sub_1BDDC6C38(0, &qword_1EF52C3E0);
  *a1 = v4;
  return v4;
}

uint64_t sub_1BDDFDAD4()
{
  return swift_deallocObject();
}

void CRString.removeSubrange(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v5 = *v2;
    type metadata accessor for CRStringRef();
    v6 = swift_allocObject();
    v7 = *(void **)(v5 + 16);
    swift_retain();
    objc_msgSend(v7, sel_copy);
    sub_1BE1B2F3C();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
    swift_dynamicCast();
    *(_QWORD *)(v6 + 16) = v11;
    *v2 = v6;
    swift_release();
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    v9 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
      v10 = *(id *)(*v2 + 16);
      objc_msgSend(v10, sel_removeObjectsInRange_, a1, v9);

      return;
    }
  }
  __break(1u);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;

  v3 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if (v3 >= 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v5 = *v2;
      type metadata accessor for CRStringRef();
      v6 = swift_allocObject();
      v7 = *(void **)(v5 + 16);
      swift_retain();
      objc_msgSend(v7, sel_copy);
      sub_1BE1B2F3C();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
      swift_dynamicCast();
      *(_QWORD *)(v6 + 16) = v9;
      *v2 = v6;
      swift_release();
    }
    v8 = *(id *)(*v2 + 16);
    objc_msgSend(v8, sel_removeObjectsInRange_, a1, v3);

  }
}

void CRString.replaceSubrange(_:with:)(Swift::Int at, uint64_t a2, Swift::String contentsOf)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  objc_class *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;

  v4 = a2 - at;
  if (__OFSUB__(a2, at))
  {
    __break(1u);
  }
  else if (v4 < 1)
  {
    if (!v4)
      CRString.insert(contentsOf:at:)(contentsOf, at);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v6 = *v3;
      type metadata accessor for CRStringRef();
      v7 = swift_allocObject();
      v8 = *(void **)(v6 + 16);
      swift_retain();
      objc_msgSend(v8, sel_copy);
      sub_1BE1B2F3C();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
      swift_dynamicCast();
      *(_QWORD *)(v7 + 16) = v15;
      *v3 = v7;
      swift_release();
    }
    v9 = *(void **)(*v3 + 16);
    v10 = (objc_class *)MEMORY[0x1E0CB3940];
    v11 = v9;
    v12 = objc_allocWithZone(v10);
    swift_bridgeObjectRetain();
    v13 = (void *)sub_1BE1B27A4();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v12, sel_initWithString_, v13);

    objc_msgSend(v11, sel_replaceStorageInRange_withStorage_, at, v4, v14);
  }
}

_QWORD *CRString.merge(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = *a1;
  result = *(_QWORD **)v1;
  if (*(_QWORD *)v1 != v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(_QWORD **)v1;
      type metadata accessor for CRStringRef();
      v5 = swift_allocObject();
      v6 = (void *)v4[2];
      swift_retain();
      objc_msgSend(v6, sel_copy);
      sub_1BE1B2F3C();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
      swift_dynamicCast();
      *(_QWORD *)(v5 + 16) = v7;
      *(_QWORD *)v1 = v5;
      swift_release();
    }
    result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_mergeWithString_optimized_, *(_QWORD *)(v2 + 16), 1);
    if (result == (_QWORD *)2)
    {
      *(_QWORD *)v1 = v2;
      swift_retain();
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

id CRString.count.getter()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_attributedString), sel_length);
  swift_unknownObjectRelease();
  return v1;
}

id sub_1BDDFE01C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  id result;

  v2 = *a1;
  v3 = *v1;
  v4 = *(void **)(v3 + 16);
  swift_retain();
  v5 = objc_msgSend(v4, sel_attributedString);
  objc_opt_self();
  swift_dynamicCastObjCClassUnconditional();
  v6 = sub_1BE1B27C8();
  v8 = v7;
  swift_release();
  swift_unknownObjectRelease();
  v9 = *(void **)(v2 + 16);
  swift_retain();
  v10 = objc_msgSend(v9, sel_attributedString);
  objc_opt_self();
  swift_dynamicCastObjCClassUnconditional();
  v11 = sub_1BE1B27C8();
  v13 = v12;
  swift_release();
  swift_unknownObjectRelease();
  if (v6 == v11 && v8 == v13)
  {
    swift_bridgeObjectRelease_n();
    return objc_msgSend(*(id *)(v3 + 16), sel_graphIsEqual_, *(_QWORD *)(v2 + 16));
  }
  v15 = sub_1BE1B34AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v15 & 1) != 0)
    return objc_msgSend(*(id *)(v3 + 16), sel_graphIsEqual_, *(_QWORD *)(v2 + 16));
  return result;
}

unint64_t static CRString.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a1;
  v4[0] = *a2;
  v4[1] = v2;
  return (unint64_t)sub_1BDDFE01C(v4) & 1;
}

Swift::Bool __swiftcall CRString.needToFinalizeTimestamps()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_needToFinalizeTimestamps);
}

id CRString.finalizeTimestamps(_:)(uint64_t a1)
{
  uint64_t *v1;
  id result;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  result = objc_msgSend(*(id *)(*v1 + 16), sel_needToFinalizeTimestamps);
  if ((_DWORD)result)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *v1;
      type metadata accessor for CRStringRef();
      v5 = swift_allocObject();
      v6 = *(void **)(v4 + 16);
      swift_retain();
      objc_msgSend(v6, sel_copy);
      sub_1BE1B2F3C();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
      swift_dynamicCast();
      *(_QWORD *)(v5 + 16) = v7;
      *v1 = v5;
      swift_release();
    }
    return objc_msgSend(*(id *)(*v1 + 16), sel_finalizeTimestamps_, a1);
  }
  return result;
}

uint64_t *CRString.actionUndoingDifference(from:)@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *result;
  v5 = *v2;
  if (v5 == *result)
    goto LABEL_6;
  if (objc_msgSend(*(id *)(v5 + 16), sel_hasDeltaTo_compareElements_, *(_QWORD *)(v4 + 16), 0))
  {
    v7 = v4;
    v8 = v5;
    swift_retain();
    CRString.merge(_:)(&v7);
    v6 = v4;
    v7 = v8;
    CRString.actionUndoingDifference(from:)(&v6);
    return (uint64_t *)swift_release();
  }
  result = (uint64_t *)objc_msgSend(*(id *)(v5 + 16), sel_undoCommandToChangeFrom_unedited_, *(_QWORD *)(v4 + 16), 0);
  if (!result)
LABEL_6:
    *a2 = 0;
  else
    *a2 = result;
  return result;
}

_QWORD *CRString.apply(_:)(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;

  if (*result)
  {
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v2 = *v1;
      type metadata accessor for CRStringRef();
      v3 = swift_allocObject();
      v4 = *(void **)(v2 + 16);
      swift_retain();
      objc_msgSend(v4, sel_copy);
      sub_1BE1B2F3C();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
      swift_dynamicCast();
      *(_QWORD *)(v3 + 16) = v8;
      *v1 = v3;
      swift_release();
    }
    swift_unknownObjectRetain();
    objc_opt_self();
    v5 = swift_dynamicCastObjCClass();
    if (v5)
    {
      v6 = (void *)v5;
      v7 = *(id *)(*v1 + 16);
      objc_msgSend(v6, sel_applyToString_, v7);

    }
    return (_QWORD *)swift_unknownObjectRelease_n();
  }
  return result;
}

id CRString.hasDelta(from:)(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)v1 == *(_QWORD *)a1)
    return 0;
  else
    return objc_msgSend(*(id *)(*(_QWORD *)a1 + 16), sel_hasDeltaTo_compareElements_, *(_QWORD *)(*(_QWORD *)v1 + 16), 0);
}

uint64_t CRString.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = *v3;
  swift_retain();
  swift_retain();
  CRString.finalizeTimestamps(_:)(a1);
  CRString.finalizeTimestamps(_:)(a1);
  v6 = objc_msgSend(objc_allocWithZone((Class)CRTTMergeableStringDelta), sel_initWithDeltasTo_from_compareElements_, *(_QWORD *)(v9 + 16), *(_QWORD *)(v8 + 16), 0);
  swift_release();
  result = swift_release();
  *a3 = v6;
  return result;
}

id sub_1BDDFE5E4(_QWORD *a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_canDeltaMerge_, *a1);
}

Swift::Bool __swiftcall CRString.canMerge(delta:)(Coherence::CRString::Partial *delta)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), sel_canDeltaMerge_, delta->delta.super.isa);
}

Swift::Bool __swiftcall CRString.merge(delta:)(Coherence::CRString::Partial *delta)
{
  uint64_t *v1;
  Class isa;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  isa = delta->delta.super.isa;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v3 = *v1;
    type metadata accessor for CRStringRef();
    v4 = swift_allocObject();
    v5 = *(void **)(v3 + 16);
    swift_retain();
    objc_msgSend(v5, sel_copy);
    sub_1BE1B2F3C();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3900);
    swift_dynamicCast();
    *(_QWORD *)(v4 + 16) = v7;
    *v1 = v4;
    swift_release();
  }
  return objc_msgSend(*(id *)(*v1 + 16), sel_deltaMerge_, isa);
}

unint64_t sub_1BDDFE720(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4[2];

  v2 = *a1;
  v4[0] = *a2;
  v4[1] = v2;
  return (unint64_t)sub_1BDDFE01C(v4) & 1;
}

uint64_t sub_1BDDFE75C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;

  v3 = *(void **)(*(_QWORD *)v1 + 16);
  swift_retain();
  v4 = objc_msgSend(v3, sel_attributedString);
  objc_opt_self();
  swift_dynamicCastObjCClassUnconditional();
  v5 = sub_1BE1B27C8();
  v7 = v6;
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for CRStringRef();
  v8 = swift_allocObject();
  sub_1BDDFCD6C();
  *a1 = v8;
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  CRString.insert(contentsOf:at:)(v9, 0);
  return swift_bridgeObjectRelease();
}

uint64_t *CRString.observableDifference(from:with:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[6];

  v5 = *result;
  v6 = *v3;
  if (*v3 != *result)
  {
    if (objc_msgSend(*(id *)(v6 + 16), sel_hasDeltaTo_compareElements_, *(_QWORD *)(v5 + 16), 0))
    {
      v17 = v5;
      aBlock[0] = v6;
      swift_retain();
      CRString.merge(_:)(&v17);
      v16 = v5;
      v17 = aBlock[0];
      CRString.observableDifference(from:with:)(&v16, a2);
      return (uint64_t *)swift_release();
    }
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9D8];
    v9 = (uint64_t *)(v8 + 16);
    v10 = *(void **)(v5 + 16);
    v11 = *(void **)(v6 + 16);
    aBlock[4] = sub_1BDE06674;
    aBlock[5] = v8;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1BDE038E8;
    aBlock[3] = &block_descriptor_19;
    v12 = _Block_copy(aBlock);
    v13 = v10;
    v14 = v11;
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_deltaTo_edited_unedited_, v14, v12, 0);
    _Block_release(v12);

    swift_beginAccess();
    v15 = *v9;
    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain();
      result = (uint64_t *)swift_release();
      *a3 = v15;
      return result;
    }
    result = (uint64_t *)swift_release();
  }
  *a3 = 0;
  return result;
}

id sub_1BDDFE9E0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_needToFinalizeTimestamps);
}

uint64_t sub_1BDDFEA0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CRString.init(from:)(a1, a2);
}

uint64_t CRString.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t inited;
  _BYTE v13[40];
  uint64_t *v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v8, (uint64_t)v7, &qword_1ED6F3728);
  v9 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v8) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9);
  sub_1BDD86E30((uint64_t)v7, &qword_1ED6F3728);
  if ((_DWORD)v8 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000014;
    *(_QWORD *)(v10 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v10 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = a1;
    *(_QWORD *)(inited + 24) = 0;
    *(_BYTE *)(inited + 32) = 1;
    sub_1BDE12AF4(&v14);
    result = swift_release();
    if (!v2)
      *a2 = v14;
  }
  return result;
}

uint64_t sub_1BDDFEBA8()
{
  return CRString.encode(to:)();
}

uint64_t CRString.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];

  v2 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  result = sub_1BDDA8D6C();
  if (!v1)
  {
    v7 = result;
    v10[1] = v5;
    v8 = *(_QWORD *)(result + 16);
    swift_retain();
    sub_1BDE05ADC(v8, (uint64_t)v4);
    v9 = v7 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDE07910((uint64_t)v4, v9);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  swift_retain();
  v2 = objc_msgSend(v1, sel_attributedString);
  objc_opt_self();
  swift_dynamicCastObjCClassUnconditional();
  sub_1BE1B27C8();
  swift_release();
  swift_unknownObjectRelease();
  sub_1BE1B2858();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BDDFECB0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_isEmptyCRDT) ^ 1;
}

uint64_t CRString.hasEncodedData.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 16), sel_isEmptyCRDT) ^ 1;
}

void sub_1BDDFED00(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void CRString.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CRString.ObservableDifference.Edit.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CRString.ObservableDifference.Edit.changeInLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

BOOL static CRString.ObservableDifference.Edit.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL sub_1BDDFED50(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t CRString.ObservableDifference.edits.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CRString.ObservableDifference.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDDFED98(*a1, *a2);
}

uint64_t sub_1BDDFED98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64x2_t *v4;
  int64x2_t *v5;
  int32x2_t v6;
  uint64_t result;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (int64x2_t *)(a1 + 40);
  v5 = (int64x2_t *)(a2 + 40);
  do
  {
    v6 = vmovn_s64(vceqq_s64(*v4, *v5));
    result = ((v4[-1].i64[1] == v5[-1].i64[1]) & v6.i8[0]) & v6.i8[4];
    v9 = v3-- != 0;
    if ((_DWORD)result != 1)
      break;
    v4 = (int64x2_t *)((char *)v4 + 24);
    v5 = (int64x2_t *)((char *)v5 + 24);
  }
  while (v9);
  return result;
}

uint64_t sub_1BDDFEE20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v49 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C338);
  MEMORY[0x1E0C80A78](v48);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v50 = (uint64_t)&v40 - v13;
  v51 = type metadata accessor for Proto_Value(0);
  v14 = MEMORY[0x1E0C80A78](v51);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v40 - v18;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v20 || a1 == a2)
    return 1;
  v42 = v12;
  v40 = v6;
  v46 = v4;
  v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v47 = *(_QWORD *)(v17 + 72);
  v22 = (uint64_t)v8;
  v23 = v50;
  v43 = a1;
  v44 = a2;
  v41 = v16;
  v45 = (char *)&v40 - v18;
  while (1)
  {
    sub_1BDD9C318(a1 + v21, (uint64_t)v19, type metadata accessor for Proto_Value);
    sub_1BDD9C318(a2 + v21, (uint64_t)v16, type metadata accessor for Proto_Value);
    v24 = *(int *)(v51 + 20);
    v25 = *(_QWORD *)&v19[v24];
    v26 = *(_QWORD *)&v16[v24];
    if (v25 == v26)
      goto LABEL_12;
    v27 = v25 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v27, v23, &qword_1ED6F26F0);
    v28 = v26 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v29 = v22 + *(int *)(v48 + 48);
    sub_1BDD86DEC(v23, v22, &qword_1ED6F26F0);
    sub_1BDD86DEC(v28, v29, &qword_1ED6F26F0);
    v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    v31 = v23;
    v32 = v46;
    if (v30(v22, 1, v46) == 1)
    {
      swift_retain();
      swift_retain();
      sub_1BDD86E30(v31, &qword_1ED6F26F0);
      v33 = v30(v29, 1, v32);
      v19 = v45;
      if (v33 != 1)
        goto LABEL_16;
      sub_1BDD86E30(v22, &qword_1ED6F26F0);
      v23 = v50;
      goto LABEL_11;
    }
    v34 = v22;
    v35 = v22;
    v36 = (uint64_t)v42;
    sub_1BDD86DEC(v34, (uint64_t)v42, &qword_1ED6F26F0);
    if (v30(v29, 1, v32) == 1)
      break;
    v37 = (uint64_t)v40;
    sub_1BDDA2E8C(v29, (uint64_t)v40, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    v38 = sub_1BE12BD00(v36, v37);
    sub_1BDD9C3E0(v37, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    v23 = v50;
    sub_1BDD86E30(v50, &qword_1ED6F26F0);
    sub_1BDD9C3E0(v36, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1BDD86E30(v35, &qword_1ED6F26F0);
    v22 = v35;
    v16 = v41;
    v19 = v45;
    if ((v38 & 1) == 0)
      goto LABEL_17;
LABEL_11:
    swift_release();
    swift_release();
    a1 = v43;
    a2 = v44;
LABEL_12:
    sub_1BE1B20F0();
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    if ((sub_1BE1B2798() & 1) == 0)
      goto LABEL_18;
    sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
    sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Value);
    v21 += v47;
    if (!--v20)
      return 1;
  }
  swift_retain();
  swift_retain();
  sub_1BDD86E30(v50, &qword_1ED6F26F0);
  sub_1BDD9C3E0(v36, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  v22 = v35;
  v16 = v41;
  v19 = v45;
LABEL_16:
  sub_1BDD86E30(v22, &qword_1EF52C338);
LABEL_17:
  swift_release();
  swift_release();
LABEL_18:
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_Value);
  return 0;
}

BOOL sub_1BDDFF2E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1BDDFF350(uint64_t a1, uint64_t a2)
{
  return sub_1BDDFFC8C(a1, a2, type metadata accessor for Proto_CustomCRDT.Sibling, sub_1BE139E90);
}

uint64_t sub_1BDDFF364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_1BDDFFC78(uint64_t a1, uint64_t a2)
{
  return sub_1BDDFFC8C(a1, a2, type metadata accessor for Proto_Selection.Range, (uint64_t (*)(uint64_t, uint64_t))sub_1BE144A0C);
}

uint64_t sub_1BDDFFC8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;

  v22 = a4;
  v23 = a3(0);
  v7 = MEMORY[0x1E0C80A78](v23);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v20 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
      return 1;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v21 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      sub_1BDD9C318(a1 + v14, (uint64_t)v12, a3);
      sub_1BDD9C318(a2 + v14, (uint64_t)v9, a3);
      v15 = *(int *)(v23 + 20);
      v16 = *(_QWORD *)&v12[v15];
      v17 = *(_QWORD *)&v9[v15];
      if (v16 != v17)
      {
        swift_retain();
        swift_retain();
        v18 = v22(v16, v17);
        swift_release();
        swift_release();
        if ((v18 & 1) == 0)
          break;
      }
      sub_1BE1B20F0();
      sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      if ((sub_1BE1B2798() & 1) == 0)
        break;
      sub_1BDD9C3E0((uint64_t)v9, a3);
      sub_1BDD9C3E0((uint64_t)v12, a3);
      v14 += v21;
      if (!--v13)
        return 1;
    }
    sub_1BDD9C3E0((uint64_t)v9, a3);
    sub_1BDD9C3E0((uint64_t)v12, a3);
  }
  return 0;
}

uint64_t sub_1BDDFFE5C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1BE1B34AC(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_1BE1B34AC() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1BDDFFF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v49 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C348);
  MEMORY[0x1E0C80A78](v48);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v50 = (uint64_t)&v40 - v13;
  v51 = type metadata accessor for Proto_CRDT(0);
  v14 = MEMORY[0x1E0C80A78](v51);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v40 - v18;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v20 || a1 == a2)
    return 1;
  v42 = v12;
  v40 = v6;
  v46 = v4;
  v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v47 = *(_QWORD *)(v17 + 72);
  v22 = (uint64_t)v8;
  v23 = v50;
  v43 = a1;
  v44 = a2;
  v41 = v16;
  v45 = (char *)&v40 - v18;
  while (1)
  {
    sub_1BDD9C318(a1 + v21, (uint64_t)v19, type metadata accessor for Proto_CRDT);
    sub_1BDD9C318(a2 + v21, (uint64_t)v16, type metadata accessor for Proto_CRDT);
    v24 = *(int *)(v51 + 20);
    v25 = *(_QWORD *)&v19[v24];
    v26 = *(_QWORD *)&v16[v24];
    if (v25 == v26)
      goto LABEL_12;
    v27 = v25 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v27, v23, &qword_1ED6F2DF0);
    v28 = v26 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v29 = v22 + *(int *)(v48 + 48);
    sub_1BDD86DEC(v23, v22, &qword_1ED6F2DF0);
    sub_1BDD86DEC(v28, v29, &qword_1ED6F2DF0);
    v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    v31 = v23;
    v32 = v46;
    if (v30(v22, 1, v46) == 1)
    {
      swift_retain();
      swift_retain();
      sub_1BDD86E30(v31, &qword_1ED6F2DF0);
      v33 = v30(v29, 1, v32);
      v19 = v45;
      if (v33 != 1)
        goto LABEL_16;
      sub_1BDD86E30(v22, &qword_1ED6F2DF0);
      v23 = v50;
      goto LABEL_11;
    }
    v34 = v22;
    v35 = v22;
    v36 = (uint64_t)v42;
    sub_1BDD86DEC(v34, (uint64_t)v42, &qword_1ED6F2DF0);
    if (v30(v29, 1, v32) == 1)
      break;
    v37 = (uint64_t)v40;
    sub_1BDDA2E8C(v29, (uint64_t)v40, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    v38 = sub_1BE12BD04(v36, v37);
    sub_1BDD9C3E0(v37, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    v23 = v50;
    sub_1BDD86E30(v50, &qword_1ED6F2DF0);
    sub_1BDD9C3E0(v36, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    sub_1BDD86E30(v35, &qword_1ED6F2DF0);
    v22 = v35;
    v16 = v41;
    v19 = v45;
    if ((v38 & 1) == 0)
      goto LABEL_17;
LABEL_11:
    swift_release();
    swift_release();
    a1 = v43;
    a2 = v44;
LABEL_12:
    sub_1BE1B20F0();
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    if ((sub_1BE1B2798() & 1) == 0)
      goto LABEL_18;
    sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_CRDT);
    sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_CRDT);
    v21 += v47;
    if (!--v20)
      return 1;
  }
  swift_retain();
  swift_retain();
  sub_1BDD86E30(v50, &qword_1ED6F2DF0);
  sub_1BDD9C3E0(v36, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  v22 = v35;
  v16 = v41;
  v19 = v45;
LABEL_16:
  sub_1BDD86E30(v22, &qword_1EF52C348);
LABEL_17:
  swift_release();
  swift_release();
LABEL_18:
  sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_CRDT);
  sub_1BDD9C3E0((uint64_t)v19, type metadata accessor for Proto_CRDT);
  return 0;
}

uint64_t sub_1BDE003E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Proto_RLE(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v27 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v19 = 1;
      return v19 & 1;
    }
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v27 = a2 + v13;
    v28 = a1 + v13;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1BDD9C318(v28 + v14 * v12, (uint64_t)v10, type metadata accessor for Proto_RLE);
      sub_1BDD9C318(v27 + v14 * v12, (uint64_t)v7, type metadata accessor for Proto_RLE);
      v15 = *(_QWORD **)v10;
      v16 = *(_QWORD **)v7;
      v17 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      if (v17 != *(_QWORD *)(*(_QWORD *)v7 + 16))
        break;
      if (v17)
        v18 = v15 == v16;
      else
        v18 = 1;
      if (!v18)
      {
        if (v15[4] != v16[4])
          break;
        if (v17 != 1)
        {
          if (v15[5] != v16[5])
            break;
          v20 = v15 + 6;
          v21 = v16 + 6;
          v22 = v17 - 2;
          while (v22)
          {
            v24 = *v20++;
            v23 = v24;
            v25 = *v21++;
            --v22;
            if (v23 != v25)
              goto LABEL_19;
          }
        }
      }
      sub_1BE1B20F0();
      sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v19 = sub_1BE1B2798();
      sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_RLE);
      sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_RLE);
      if ((v19 & 1) != 0 && ++v12 != v11)
        continue;
      return v19 & 1;
    }
LABEL_19:
    sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_RLE);
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_RLE);
  }
  v19 = 0;
  return v19 & 1;
}

uint64_t sub_1BDE0060C(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_Reference, &qword_1EF52C2E8, (uint64_t)&unk_1BE1B7B9C);
}

uint64_t sub_1BDE00628(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_Value, &qword_1EF52C2F0, (uint64_t)&unk_1BE1B8DE4);
}

uint64_t sub_1BDE00644(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v24;
  uint64_t v26;
  unint64_t *v27;

  v10 = a3(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v26 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 == *(_QWORD *)(a2 + 16))
  {
    if (!v17 || a1 == a2)
    {
      v22 = 1;
    }
    else
    {
      v26 = a1;
      v27 = a4;
      v18 = a2;
      v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v20 = *(_QWORD *)(v14 + 72);
      v21 = v17 - 1;
      do
      {
        sub_1BDD9C318(v26 + v19, (uint64_t)v16, a3);
        sub_1BDD9C318(v18 + v19, (uint64_t)v13, a3);
        sub_1BDD8422C(v27, a3, a5);
        v22 = sub_1BE1B2798();
        sub_1BDD9C3E0((uint64_t)v13, a3);
        sub_1BDD9C3E0((uint64_t)v16, a3);
        v24 = v21-- != 0;
        if ((v22 & 1) == 0)
          break;
        v19 += v20;
      }
      while (v24);
    }
  }
  else
  {
    v22 = 0;
  }
  return v22 & 1;
}

uint64_t sub_1BDE007B0(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_Version.Seen, &qword_1EF52C2F8, (uint64_t)&unk_1BE1B8574);
}

uint64_t sub_1BDE007CC(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_Set.Element, &qword_1EF52C300, (uint64_t)&unk_1BE1B7FD4);
}

uint64_t sub_1BDE007E8(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_Struct.Field, &qword_1EF52C308, (uint64_t)&unk_1BE1B7D04);
}

uint64_t sub_1BDE00804(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_CustomCRDT.Sibling, &qword_1EF52C310, (uint64_t)&unk_1BE1B7494);
}

uint64_t sub_1BDE00820(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_CRDT, &qword_1EF52C320, (uint64_t)&unk_1BE1B8C7C);
}

uint64_t sub_1BDE0083C(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_Subsequence, &qword_1EF52C318, (uint64_t)&unk_1BE1B71C4);
}

uint64_t sub_1BDE00858(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_IndexedTimestamp, &qword_1EF52C328, (uint64_t)&unk_1BE1B8844);
}

BOOL sub_1BDE00874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (int *)(a1 + 36);
  v6 = (int *)(a2 + 36);
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1BDE008E8(uint64_t a1, uint64_t a2)
{
  return sub_1BDE00644(a1, a2, type metadata accessor for Proto4_Selection.Range, &qword_1EF52C330, (uint64_t)&unk_1BE1B6ECC);
}

uint64_t sub_1BDE00904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  _QWORD v50[4];
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v65 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C338);
  MEMORY[0x1E0C80A78](v64);
  v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v50 - v13;
  v69 = type metadata accessor for Proto_Value(0);
  v57 = *(_QWORD *)(v69 - 8);
  v15 = MEMORY[0x1E0C80A78](v69);
  v17 = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v61 = (char *)v50 - v18;
  v19 = type metadata accessor for Proto_KeyPath(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (_QWORD *)((char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = MEMORY[0x1E0C80A78](v20);
  v26 = (_QWORD *)((char *)v50 - v25);
  v27 = *(_QWORD *)(a1 + 16);
  if (v27 != *(_QWORD *)(a2 + 16))
    goto LABEL_24;
  if (!v27 || a1 == a2)
  {
    v48 = 1;
    return v48 & 1;
  }
  v50[2] = v23;
  v54 = v12;
  v53 = v6;
  v59 = v4;
  v28 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v52 = a1 + v28;
  v51 = a2 + v28;
  v50[3] = *(_QWORD *)(v24 + 72);
  v29 = (uint64_t)v61;
  v62 = v14;
  v58 = v17;
  v56 = v22;
  v55 = (uint64_t)v50 - v25;
  v50[1] = v27;
  v60 = 0;
  sub_1BDD9C318(a1 + v28, (uint64_t)v26, type metadata accessor for Proto_KeyPath);
  sub_1BDD9C318(v51, (uint64_t)v22, type metadata accessor for Proto_KeyPath);
  v30 = *v22;
  v67 = *v26;
  v31 = *(_QWORD *)(v30 + 16);
  v68 = *(_QWORD *)(v67 + 16);
  if (v68 != v31)
    goto LABEL_23;
  if (!v68 || v67 == v30)
LABEL_18:
    __asm { BR              X10 }
  v32 = 0;
  v33 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  v63 = *(_QWORD *)(v57 + 72);
  v66 = v30;
  while (1)
  {
    sub_1BDD9C318(v67 + v33, v29, type metadata accessor for Proto_Value);
    if (v32 >= *(_QWORD *)(v30 + 16))
    {
      __break(1u);
      JUMPOUT(0x1BDE01734);
    }
    sub_1BDD9C318(v30 + v33, (uint64_t)v17, type metadata accessor for Proto_Value);
    v34 = *(int *)(v69 + 20);
    v35 = *(_QWORD *)&v17[v34];
    v70 = *(_QWORD *)(v29 + v34);
    if (v70 == v35)
      goto LABEL_16;
    v36 = v70 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v36, (uint64_t)v14, &qword_1ED6F26F0);
    v37 = v35 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v38 = (uint64_t)&v8[*(int *)(v64 + 48)];
    sub_1BDD86DEC((uint64_t)v14, (uint64_t)v8, &qword_1ED6F26F0);
    sub_1BDD86DEC(v37, v38, &qword_1ED6F26F0);
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
    v40 = v8;
    v41 = (uint64_t)v8;
    v42 = v59;
    if (v39(v40, 1, v59) != 1)
      break;
    swift_retain();
    swift_retain();
    sub_1BDD86E30((uint64_t)v14, &qword_1ED6F26F0);
    v43 = v39((char *)v38, 1, v42);
    v17 = v58;
    if (v43 != 1)
      goto LABEL_21;
    v8 = (char *)v41;
    sub_1BDD86E30(v41, &qword_1ED6F26F0);
LABEL_15:
    swift_release();
    swift_release();
    v14 = v62;
LABEL_16:
    sub_1BE1B20F0();
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v47 = sub_1BE1B2798();
    sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Value);
    sub_1BDD9C3E0(v29, type metadata accessor for Proto_Value);
    v30 = v66;
    if ((v47 & 1) == 0)
      goto LABEL_23;
    ++v32;
    v33 += v63;
    if (v68 == v32)
      goto LABEL_18;
  }
  v44 = (uint64_t)v54;
  sub_1BDD86DEC(v41, (uint64_t)v54, &qword_1ED6F26F0);
  if (v39((char *)v38, 1, v42) != 1)
  {
    v45 = (uint64_t)v53;
    sub_1BDDA2E8C(v38, (uint64_t)v53, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    v46 = sub_1BE12BD00(v44, v45);
    sub_1BDD9C3E0(v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1BDD86E30((uint64_t)v62, &qword_1ED6F26F0);
    sub_1BDD9C3E0(v44, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1BDD86E30(v41, &qword_1ED6F26F0);
    v8 = (char *)v41;
    v17 = v58;
    v29 = (uint64_t)v61;
    if ((v46 & 1) == 0)
      goto LABEL_22;
    goto LABEL_15;
  }
  swift_retain();
  swift_retain();
  sub_1BDD86E30((uint64_t)v62, &qword_1ED6F26F0);
  sub_1BDD9C3E0(v44, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  v17 = v58;
  v29 = (uint64_t)v61;
LABEL_21:
  sub_1BDD86E30(v41, &qword_1EF52C338);
LABEL_22:
  swift_release();
  swift_release();
  sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Value);
  sub_1BDD9C3E0(v29, type metadata accessor for Proto_Value);
LABEL_23:
  sub_1BDD9C3E0((uint64_t)v56, type metadata accessor for Proto_KeyPath);
  sub_1BDD9C3E0(v55, type metadata accessor for Proto_KeyPath);
LABEL_24:
  v48 = 0;
  return v48 & 1;
}

uint64_t sub_1BDE01804(uint64_t a1, uint64_t a2)
{
  return sub_1BDE029FC(a1, a2, type metadata accessor for Proto_Reference, (uint64_t (*)(uint64_t, uint64_t))sub_1BE136F08);
}

uint64_t sub_1BDE01818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  _QWORD v14[6];
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = type metadata accessor for Proto_Asset(0);
  v4 = MEMORY[0x1E0C80A78](v15);
  v6 = (_QWORD *)((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4);
  v9 = (_QWORD *)((char *)v14 - v8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
  {
LABEL_8:
    v12 = 0;
    return v12 & 1;
  }
  if (v10 && a1 != a2)
  {
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v14[4] = *(_QWORD *)(v7 + 72);
    v14[3] = a2;
    v14[5] = a1;
    v17 = v10 - 1;
    sub_1BDD9C318(a1 + v11, (uint64_t)v14 - v8, type metadata accessor for Proto_Asset);
    v16 = v11;
    sub_1BDD9C318(a2 + v11, (uint64_t)v6, type metadata accessor for Proto_Asset);
    if (*v9 == *v6)
      __asm { BR              X10 }
    sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_Asset);
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_Asset);
    goto LABEL_8;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t sub_1BDE029E8(uint64_t a1, uint64_t a2)
{
  return sub_1BDE029FC(a1, a2, type metadata accessor for Proto_Set.Element, (uint64_t (*)(uint64_t, uint64_t))sub_1BE135C44);
}

uint64_t sub_1BDE029FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  BOOL v22;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v25 = a4;
  v27 = a3(0);
  v7 = MEMORY[0x1E0C80A78](v27);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v24 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v20 = 0;
    return v20 & 1;
  }
  if (v13 && a1 != a2)
  {
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v26 = *(_QWORD *)(v10 + 72);
    v15 = v13 - 1;
    while (1)
    {
      sub_1BDD9C318(a1 + v14, (uint64_t)v12, a3);
      sub_1BDD9C318(a2 + v14, (uint64_t)v9, a3);
      v16 = *(int *)(v27 + 20);
      v17 = *(_QWORD *)&v12[v16];
      v18 = *(_QWORD *)&v9[v16];
      if (v17 != v18)
      {
        swift_retain();
        swift_retain();
        v19 = v25(v17, v18);
        swift_release();
        swift_release();
        if ((v19 & 1) == 0)
          break;
      }
      sub_1BE1B20F0();
      sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v20 = sub_1BE1B2798();
      sub_1BDD9C3E0((uint64_t)v9, a3);
      sub_1BDD9C3E0((uint64_t)v12, a3);
      v22 = v15-- != 0;
      if ((v20 & 1) != 0)
      {
        v14 += v26;
        if (v22)
          continue;
      }
      return v20 & 1;
    }
    sub_1BDD9C3E0((uint64_t)v9, a3);
    sub_1BDD9C3E0((uint64_t)v12, a3);
    goto LABEL_15;
  }
  v20 = 1;
  return v20 & 1;
}

uint64_t sub_1BDE02BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Proto_Timestamp(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v10 = (uint64_t *)((char *)&v18 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v14 = 0;
    return v14 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v19 = *(_QWORD *)(v8 + 72);
    v13 = v11 - 1;
    while (1)
    {
      sub_1BDD9C318(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Timestamp);
      sub_1BDD9C318(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Timestamp);
      if (*v10 != *v7 || v10[1] != v7[1])
        break;
      sub_1BE1B20F0();
      sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
      v14 = sub_1BE1B2798();
      sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Timestamp);
      sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Timestamp);
      v16 = v13-- != 0;
      if ((v14 & 1) != 0)
      {
        v12 += v19;
        if (v16)
          continue;
      }
      return v14 & 1;
    }
    sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Timestamp);
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Timestamp);
    goto LABEL_15;
  }
  v14 = 1;
  return v14 & 1;
}

uint64_t sub_1BDE02DC0(uint64_t a1, uint64_t a2)
{
  return sub_1BDE029FC(a1, a2, type metadata accessor for Proto_Subsequence, (uint64_t (*)(uint64_t, uint64_t))sub_1BE1403F4);
}

uint64_t sub_1BDE02DD4(uint64_t a1, uint64_t a2)
{
  return sub_1BDE029FC(a1, a2, type metadata accessor for Proto_Sequence.AttributeRun, sub_1BE13E6A4);
}

uint64_t sub_1BDE02DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C338);
  MEMORY[0x1E0C80A78](v8);
  v81 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v75 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v80 = (uint64_t)&v67 - v13;
  v87 = type metadata accessor for Proto_Value(0);
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v83 = (uint64_t)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C350);
  MEMORY[0x1E0C80A78](v85);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v18 = MEMORY[0x1E0C80A78](v17);
  v84 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v88 = (uint64_t)&v67 - v20;
  v21 = type metadata accessor for Proto_Sequence.AttributeRun.Attribute(0);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v67 - v26;
  v89 = a1;
  v28 = *(_QWORD *)(a1 + 16);
  if (v28 != *(_QWORD *)(a2 + 16))
    goto LABEL_37;
  if (!v28 || v89 == a2)
  {
    v61 = 1;
    return v61 & 1;
  }
  v68 = v8;
  v67 = v7;
  v69 = v5;
  v70 = v4;
  v29 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v82 = *(_QWORD *)(v25 + 72);
  v30 = v28 - 1;
  v77 = a2;
  v74 = v16;
  v78 = v24;
  v76 = v21;
  v79 = (char *)&v67 - v26;
  while (1)
  {
    sub_1BDD9C318(v89 + v29, (uint64_t)v27, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    sub_1BDD9C318(a2 + v29, (uint64_t)v24, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    v31 = *(int *)(v21 + 20);
    v32 = *(_QWORD *)&v27[v31];
    v33 = *(_QWORD *)&v24[v31];
    if (v32 != v33)
      break;
LABEL_21:
    sub_1BE1B20F0();
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v61 = sub_1BE1B2798();
    sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    v63 = v30-- != 0;
    if ((v61 & 1) != 0)
    {
      v29 += v82;
      if (v63)
        continue;
    }
    return v61 & 1;
  }
  swift_beginAccess();
  v34 = *(_DWORD *)(v32 + 16);
  swift_beginAccess();
  if (v34 != *(_DWORD *)(v33 + 16))
    goto LABEL_36;
  v35 = v32
      + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v36 = v88;
  sub_1BDD86DEC(v35, v88, &qword_1ED6F3770);
  v37 = v33
      + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v38 = (uint64_t)&v16[*(int *)(v85 + 48)];
  sub_1BDD86DEC(v36, (uint64_t)v16, &qword_1ED6F3770);
  sub_1BDD86DEC(v37, v38, &qword_1ED6F3770);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
  v40 = v87;
  if (v39((uint64_t)v16, 1, v87) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1BDD86E30(v36, &qword_1ED6F3770);
    if (v39(v38, 1, v40) != 1)
    {
      v24 = v78;
      v64 = &qword_1EF52C350;
      v27 = v79;
      goto LABEL_34;
    }
    sub_1BDD86E30((uint64_t)v16, &qword_1ED6F3770);
    a2 = v77;
    v24 = v78;
    v27 = v79;
    goto LABEL_20;
  }
  v41 = v84;
  sub_1BDD86DEC((uint64_t)v16, v84, &qword_1ED6F3770);
  if (v39(v38, 1, v40) == 1)
  {
    swift_retain();
    swift_retain();
    v64 = &qword_1EF52C350;
    v65 = v88;
    v24 = v78;
    v27 = v79;
    goto LABEL_33;
  }
  v42 = v38;
  v43 = v83;
  sub_1BDDA2E8C(v42, v83, type metadata accessor for Proto_Value);
  v44 = *(int *)(v40 + 20);
  v45 = *(_QWORD *)(v41 + v44);
  v27 = v79;
  if (v45 == *(_QWORD *)(v43 + v44))
  {
    swift_retain();
    swift_retain();
    v24 = v78;
    goto LABEL_19;
  }
  v46 = v45 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  v47 = *(_QWORD *)(v43 + v44);
  swift_beginAccess();
  v48 = v46;
  v49 = v80;
  sub_1BDD86DEC(v48, v80, &qword_1ED6F26F0);
  v50 = v81;
  v71 = v45;
  v73 = v47;
  v51 = v47 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v52 = v50 + *(int *)(v68 + 48);
  sub_1BDD86DEC(v49, v50, &qword_1ED6F26F0);
  v72 = v52;
  sub_1BDD86DEC(v51, v52, &qword_1ED6F26F0);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  v54 = v70;
  if (v53(v50, 1, v70) == 1)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1BDD86E30(v49, &qword_1ED6F26F0);
    v55 = v53(v72, 1, v54);
    v16 = v74;
    v24 = v78;
    if (v55 != 1)
      goto LABEL_31;
    sub_1BDD86E30(v81, &qword_1ED6F26F0);
    goto LABEL_18;
  }
  sub_1BDD86DEC(v50, v75, &qword_1ED6F26F0);
  if (v53(v72, 1, v54) != 1)
  {
    v56 = (uint64_t)v67;
    sub_1BDDA2E8C(v72, (uint64_t)v67, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v57 = v75;
    LODWORD(v72) = sub_1BE12BD00(v75, v56);
    sub_1BDD9C3E0(v56, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1BDD86E30(v80, &qword_1ED6F26F0);
    sub_1BDD9C3E0(v57, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1BDD86E30(v50, &qword_1ED6F26F0);
    v16 = v74;
    v24 = v78;
    if ((v72 & 1) == 0)
      goto LABEL_32;
LABEL_18:
    swift_release();
    swift_release();
LABEL_19:
    sub_1BE1B20F0();
    sub_1BDD8422C(&qword_1EF52C340, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E998], MEMORY[0x1E0D3E9A8]);
    v58 = v84;
    v59 = v83;
    v60 = sub_1BE1B2798();
    sub_1BDD9C3E0(v59, type metadata accessor for Proto_Value);
    sub_1BDD86E30(v88, &qword_1ED6F3770);
    sub_1BDD9C3E0(v58, type metadata accessor for Proto_Value);
    v16 = v74;
    sub_1BDD86E30((uint64_t)v74, &qword_1ED6F3770);
    a2 = v77;
    if ((v60 & 1) == 0)
      goto LABEL_35;
LABEL_20:
    swift_release();
    swift_release();
    v21 = v76;
    goto LABEL_21;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1BDD86E30(v80, &qword_1ED6F26F0);
  sub_1BDD9C3E0(v75, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  v16 = v74;
  v24 = v78;
LABEL_31:
  sub_1BDD86E30(v81, &qword_1EF52C338);
LABEL_32:
  swift_release();
  swift_release();
  sub_1BDD9C3E0(v83, type metadata accessor for Proto_Value);
  v64 = &qword_1ED6F3770;
  v65 = v88;
LABEL_33:
  sub_1BDD86E30(v65, &qword_1ED6F3770);
  sub_1BDD9C3E0(v84, type metadata accessor for Proto_Value);
LABEL_34:
  sub_1BDD86E30((uint64_t)v16, v64);
LABEL_35:
  swift_release();
  swift_release();
LABEL_36:
  sub_1BDD9C3E0((uint64_t)v24, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
  sub_1BDD9C3E0((uint64_t)v27, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
LABEL_37:
  v61 = 0;
  return v61 & 1;
}

uint64_t sub_1BDE037F4(uint64_t *a1, uint64_t *a2)
{
  return sub_1BDDFED98(*a1, *a2);
}

uint64_t sub_1BDE03800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v9 = (_QWORD *)(a5 + 16);
  swift_beginAccess();
  v10 = *(_QWORD **)(a5 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a5 + 16) = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_1BDE06D1C(0, v10[2] + 1, 1, v10);
    *v9 = v10;
  }
  v13 = v10[2];
  v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    v10 = sub_1BDE06D1C((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
    *v9 = v10;
  }
  v10[2] = v13 + 1;
  v14 = &v10[3 * v13];
  v14[4] = a1;
  v14[5] = a2;
  v14[6] = a3;
  return swift_endAccess();
}

uint64_t sub_1BDE038E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t CRString.Cursor.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  unsigned int v76;
  unint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  int EnumCaseMultiPayload;
  uint64_t v107;
  objc_class *v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t inited;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  unint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  objc_super v137;
  uint64_t v138;

  v118 = a2;
  v123 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1E0C80A78](v123);
  v129 = (unint64_t *)((char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for Timestamp(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v117 = (uint64_t)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v132 = (char *)&v111 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v116 = (uint64_t *)((char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x1E0C80A78](v9);
  v120 = (uint64_t)&v111 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v124 = (uint64_t)&v111 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v126 = (uint64_t)&v111 - v16;
  MEMORY[0x1E0C80A78](v15);
  v134 = (uint64_t)&v111 - v17;
  v136 = type metadata accessor for Proto_CustomCRValue(0);
  v18 = MEMORY[0x1E0C80A78](v136);
  v121 = (char *)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v127 = (char *)&v111 - v21;
  MEMORY[0x1E0C80A78](v20);
  v135 = (char *)&v111 - v22;
  v23 = type metadata accessor for Proto_Value(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v115 = (uint64_t)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v122 = (uint64_t)&v111 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v128 = (char *)&v111 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v133 = (uint64_t)&v111 - v32;
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v111 - v33;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v36 = MEMORY[0x1E0C80A78](v35);
  v119 = (uint64_t)&v111 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v130 = (uint64_t)&v111 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v111 - v41;
  MEMORY[0x1E0C80A78](v40);
  v44 = (char *)&v111 - v43;
  v45 = a1;
  v46 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v46, (uint64_t)v44, &qword_1ED6F3770);
  v131 = v24;
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v24) = v47(v44, 1, v23);
  sub_1BDD86E30((uint64_t)v44, &qword_1ED6F3770);
  if ((_DWORD)v24 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v48 = 0xD000000000000017;
    *(_QWORD *)(v48 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v48 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  v49 = v45;
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v45;
  sub_1BDD86DEC(v46, (uint64_t)v42, &qword_1ED6F3770);
  v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
  result = v47(v42, 1, v23);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  sub_1BDDA2E8C((uint64_t)v42, (uint64_t)v34, type metadata accessor for Proto_Value);
  v51 = v23;
  v52 = *(_QWORD *)&v34[*(int *)(v23 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v53 = v134;
  sub_1BDD86DEC(v52, v134, &qword_1ED6F26F0);
  v54 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48);
  v56 = v55(v53, 1, v54);
  v57 = MEMORY[0x1E0DEE9D8];
  v58 = v135;
  v113 = v49;
  if (v56 == 1)
  {
    v59 = v54;
    swift_retain();
    sub_1BDD86E30(v53, &qword_1ED6F26F0);
  }
  else
  {
    v59 = v54;
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      sub_1BDDA2E8C(v53, (uint64_t)v58, type metadata accessor for Proto_CustomCRValue);
      swift_retain();
      v60 = (_QWORD *)inited;
      goto LABEL_10;
    }
    swift_retain();
    sub_1BDD9C3E0(v53, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v60 = (_QWORD *)inited;
  *v58 = v57;
  v58[1] = v57;
  sub_1BE1B20E4();
LABEL_10:
  v61 = v51;
  sub_1BDD9C3E0((uint64_t)v34, type metadata accessor for Proto_Value);
  v62 = v58[1];
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v58, type metadata accessor for Proto_CustomCRValue);
  v63 = *(_QWORD *)(v62 + 16);
  swift_bridgeObjectRelease();
  v64 = &unk_1ED6F2000;
  if (v63 != 2)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v80 = 0xD00000000000001ALL;
    *(_QWORD *)(v80 + 8) = 0x80000001BE1CD130;
    *(_BYTE *)(v80 + 16) = 0;
    swift_willThrow();
LABEL_27:
    swift_release();
    swift_setDeallocating();
    return swift_release();
  }
  v65 = v59;
  v66 = v60[2] + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v67 = v66;
  v68 = v130;
  sub_1BDD86DEC(v67, v130, &qword_1ED6F3770);
  result = v112(v68, 1, v61);
  if ((_DWORD)result == 1)
    goto LABEL_48;
  v69 = v68;
  v70 = v133;
  sub_1BDDA2E8C(v69, v133, type metadata accessor for Proto_Value);
  v71 = *(_QWORD *)(v70 + *(int *)(v61 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v72 = v71;
  v73 = v126;
  sub_1BDD86DEC(v72, v126, &qword_1ED6F26F0);
  v74 = v59;
  v75 = v55;
  v76 = v55(v73, 1, v74);
  v77 = v129;
  v78 = (uint64_t)v128;
  v79 = v127;
  if (v76 == 1)
  {
    sub_1BDD86E30(v73, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      sub_1BDDA2E8C(v73, (uint64_t)v79, type metadata accessor for Proto_CustomCRValue);
      goto LABEL_19;
    }
    sub_1BDD9C3E0(v73, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  v81 = MEMORY[0x1E0DEE9D8];
  *v79 = MEMORY[0x1E0DEE9D8];
  v79[1] = v81;
  sub_1BE1B20E4();
LABEL_19:
  sub_1BDD9C3E0(v133, type metadata accessor for Proto_Value);
  v82 = v79[1];
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v79, type metadata accessor for Proto_CustomCRValue);
  if (!*(_QWORD *)(v82 + 16))
  {
    __break(1u);
    goto LABEL_45;
  }
  v83 = (*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
  sub_1BDD9C318(v82 + v83, v78, type metadata accessor for Proto_Value);
  swift_bridgeObjectRelease();
  v84 = *(_QWORD *)(v78 + *(int *)(v61 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v85 = v84;
  v86 = v124;
  sub_1BDD86DEC(v85, v124, &qword_1ED6F26F0);
  if (v75(v86, 1, v65) == 1)
  {
    sub_1BDD86E30(v86, &qword_1ED6F26F0);
    v87 = v125;
  }
  else
  {
    v88 = swift_getEnumCaseMultiPayload() == 9;
    v89 = v86;
    v87 = v125;
    if (v88)
    {
      sub_1BDDA2E8C(v89, (uint64_t)v77, type metadata accessor for Proto_Timestamp);
      goto LABEL_26;
    }
    sub_1BDD9C3E0(v89, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v77 = 0;
  v77[1] = 0;
  sub_1BE1B20E4();
LABEL_26:
  sub_1BDD9C3E0(v78, type metadata accessor for Proto_Value);
  v90 = v113;
  swift_retain();
  sub_1BDEFF448(v77, v90, (uint64_t)v132);
  if (v87)
    goto LABEL_27;
  v91 = v60[2] + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v92 = v91;
  v93 = v119;
  sub_1BDD86DEC(v92, v119, &qword_1ED6F3770);
  result = v112(v93, 1, v61);
  if ((_DWORD)result != 1)
  {
    v94 = v93;
    v95 = v122;
    sub_1BDDA2E8C(v94, v122, type metadata accessor for Proto_Value);
    v96 = *(_QWORD *)(v95 + *(int *)(v61 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v97 = v96;
    v98 = v120;
    sub_1BDD86DEC(v97, v120, &qword_1ED6F26F0);
    v99 = v75(v98, 1, v65);
    v60 = v121;
    if (v99 == 1)
    {
      sub_1BDD86E30(v98, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        sub_1BDDA2E8C(v98, (uint64_t)v60, type metadata accessor for Proto_CustomCRValue);
        goto LABEL_36;
      }
      sub_1BDD9C3E0(v98, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v100 = MEMORY[0x1E0DEE9D8];
    *v60 = MEMORY[0x1E0DEE9D8];
    v60[1] = v100;
    sub_1BE1B20E4();
LABEL_36:
    sub_1BDD9C3E0(v122, type metadata accessor for Proto_Value);
    v82 = v60[1];
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0((uint64_t)v60, type metadata accessor for Proto_CustomCRValue);
    if (*(_QWORD *)(v82 + 16) >= 2uLL)
    {
      v101 = v82 + v83 + *(_QWORD *)(v131 + 72);
      v102 = v115;
      sub_1BDD9C318(v101, v115, type metadata accessor for Proto_Value);
      swift_bridgeObjectRelease();
      v103 = *(_QWORD *)(v102 + *(int *)(v61 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v104 = v103;
      v105 = v116;
      sub_1BDD86DEC(v104, (uint64_t)v116, &qword_1ED6F26F0);
      if (v75((uint64_t)v105, 1, v65) == 1)
      {
        sub_1BDD86E30((uint64_t)v105, &qword_1ED6F26F0);
        v82 = 0;
        v61 = v118;
        v64 = v132;
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v61 = v118;
        v64 = v132;
        if (EnumCaseMultiPayload)
        {
          sub_1BDD9C3E0((uint64_t)v105, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          v82 = 0;
        }
        else
        {
          v82 = *v105;
        }
      }
      sub_1BDD9C3E0(v102, type metadata accessor for Proto_Value);
      v107 = v117;
      sub_1BDD9C318((uint64_t)v64, v117, type metadata accessor for Timestamp);
      v108 = (objc_class *)type metadata accessor for ObjCTimestamp(0);
      v109 = objc_allocWithZone(v108);
      sub_1BDD9C318(v107, (uint64_t)v109 + OBJC_IVAR___ObjCTimestamp_timestamp, type metadata accessor for Timestamp);
      v137.receiver = v109;
      v137.super_class = v108;
      v60 = objc_msgSendSuper2(&v137, sel_init);
      sub_1BDD9C3E0(v107, type metadata accessor for Timestamp);
      if (qword_1ED6F4510 == -1)
        goto LABEL_43;
      goto LABEL_46;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    swift_once();
LABEL_43:
    swift_retain();
    sub_1BE1B2E40();
    swift_release();
    v110 = objc_msgSend(objc_allocWithZone((Class)CRTTMergeableStringIndex), sel_initWithTimestamp_affinity_renameGeneration_, v60, v82, v138);
    swift_release();
    swift_release();

    result = sub_1BDD9C3E0((uint64_t)v64, type metadata accessor for Timestamp);
    *(_QWORD *)v61 = v110;
    return result;
  }
LABEL_49:
  __break(1u);
  return result;
}

void CRString.Cursor.encode(to:)(uint64_t a1)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  _QWORD *v51;
  int EnumCaseMultiPayload;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD v73[4];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  uint64_t v87;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v78 = (uint64_t)v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v75 = (uint64_t)v73 - v6;
  v81 = type metadata accessor for Proto_CustomCRValue(0);
  v7 = MEMORY[0x1E0C80A78](v81);
  v80 = (_QWORD *)((char *)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v77 = (_QWORD *)((char *)v73 - v9);
  v10 = type metadata accessor for Replica();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Timestamp(0);
  MEMORY[0x1E0C80A78](v74);
  v14 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Proto_Timestamp(0);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (_QWORD *)((char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)v73 - v19;
  v84 = type metadata accessor for Proto_Value(0);
  v76 = *(_QWORD *)(v84 - 8);
  v21 = MEMORY[0x1E0C80A78](v84);
  v83 = (uint64_t)v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v79 = (char *)v73 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v82 = (uint64_t)v73 - v26;
  MEMORY[0x1E0C80A78](v25);
  v85 = (char *)v73 - v27;
  v28 = *v1;
  objc_opt_self();
  if ((objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_needToFinalizeTimestamps) & 1) != 0)
  {
    v29 = *(_QWORD *)(a1 + 16);
    objc_opt_self();
    v86 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_finalizedInContext_, v29);
    v30 = v86;
    CRString.Cursor.encode(to:)(a1);

    return;
  }
  v31 = v87;
  v32 = sub_1BDE25870();
  if (!v31)
  {
    v73[1] = a1;
    v73[3] = 0;
    v87 = v32;
    swift_retain();
    v33 = v85;
    sub_1BE1B20E4();
    v34 = *(int *)(v84 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v33[v34] = qword_1ED6F2708;
    objc_opt_self();
    v35 = (void *)swift_dynamicCastObjCClassUnconditional();
    swift_retain();
    v36 = v28;
    v37 = objc_msgSend(v35, sel_timestamp);
    type metadata accessor for ObjCTimestamp(0);
    v38 = swift_dynamicCastClassUnconditional();
    sub_1BDD9C318(v38 + OBJC_IVAR___ObjCTimestamp_timestamp, (uint64_t)v14, type metadata accessor for Timestamp);
    v73[2] = v36;

    *v18 = 0;
    v18[1] = 0;
    sub_1BE1B20E4();
    sub_1BDD9C318((uint64_t)v14, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Replica);
    v39 = sub_1BDDAE244((uint64_t)v12);
    v40 = sub_1BE1B1F58();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v12, v40);
    v41 = *(_QWORD *)&v14[*(int *)(v74 + 20)];
    *v18 = v39;
    v18[1] = v41;
    sub_1BDDA2E8C((uint64_t)v18, (uint64_t)v20, type metadata accessor for Proto_Timestamp);
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Timestamp);
    v42 = (uint64_t)v85;
    sub_1BE12851C((uint64_t)v20);
    sub_1BDD9C318(v42, v82, type metadata accessor for Proto_Value);
    v43 = v87 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    v44 = *(int *)(v84 + 20);
    v74 = v43;
    v45 = *(_QWORD *)(v43 + v44)
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v46 = v75;
    sub_1BDD86DEC(v45, v75, &qword_1ED6F26F0);
    v47 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48);
    v49 = v48(v46, 1, v47);
    v50 = MEMORY[0x1E0DEE9D8];
    if (v49 == 1)
    {
      sub_1BDD86E30(v46, &qword_1ED6F26F0);
      v51 = v77;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v51 = v77;
      if (EnumCaseMultiPayload == 13)
      {
        sub_1BDDA2E8C(v46, (uint64_t)v77, type metadata accessor for Proto_CustomCRValue);
        goto LABEL_12;
      }
      sub_1BDD9C3E0(v46, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    *v51 = v50;
    v51[1] = v50;
    sub_1BE1B20E4();
LABEL_12:
    v53 = v51[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v53 = sub_1BDDAE4F0(0, *(_QWORD *)(v53 + 16) + 1, 1, v53, &qword_1ED6EFC70, type metadata accessor for Proto_Value);
    v55 = *(_QWORD *)(v53 + 16);
    v54 = *(_QWORD *)(v53 + 24);
    if (v55 >= v54 >> 1)
      v53 = sub_1BDDAE4F0(v54 > 1, v55 + 1, 1, v53, &qword_1ED6EFC70, type metadata accessor for Proto_Value);
    *(_QWORD *)(v53 + 16) = v55 + 1;
    v56 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    v57 = *(_QWORD *)(v76 + 72);
    sub_1BDDA2E8C(v82, v53 + v56 + v57 * v55, type metadata accessor for Proto_Value);
    v51[1] = v53;
    v58 = v74;
    sub_1BE128730((uint64_t)v51);
    swift_endAccess();
    v59 = (uint64_t)v79;
    sub_1BE1B20E4();
    v60 = v84;
    *(_QWORD *)(v59 + *(int *)(v84 + 20)) = qword_1ED6F2708;
    objc_opt_self();
    v61 = (void *)swift_dynamicCastObjCClassUnconditional();
    swift_retain();
    sub_1BE128944((uint64_t)objc_msgSend(v61, sel_affinity));
    sub_1BDD9C318(v59, v83, type metadata accessor for Proto_Value);
    swift_beginAccess();
    v62 = *(_QWORD *)(v58 + *(int *)(v60 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v63 = v62;
    v64 = v78;
    sub_1BDD86DEC(v63, v78, &qword_1ED6F26F0);
    if (v48(v64, 1, v47) == 1)
    {
      sub_1BDD86E30(v64, &qword_1ED6F26F0);
      v65 = v80;
    }
    else
    {
      v66 = swift_getEnumCaseMultiPayload();
      v65 = v80;
      if (v66 == 13)
      {
        sub_1BDDA2E8C(v64, (uint64_t)v80, type metadata accessor for Proto_CustomCRValue);
LABEL_22:
        v68 = v65[1];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v70 = (uint64_t)v85;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v68 = sub_1BDDAE4F0(0, *(_QWORD *)(v68 + 16) + 1, 1, v68, &qword_1ED6EFC70, type metadata accessor for Proto_Value);
        v72 = *(_QWORD *)(v68 + 16);
        v71 = *(_QWORD *)(v68 + 24);
        if (v72 >= v71 >> 1)
          v68 = sub_1BDDAE4F0(v71 > 1, v72 + 1, 1, v68, &qword_1ED6EFC70, type metadata accessor for Proto_Value);
        *(_QWORD *)(v68 + 16) = v72 + 1;
        sub_1BDDA2E8C(v83, v68 + v56 + v72 * v57, type metadata accessor for Proto_Value);
        v65[1] = v68;
        sub_1BE128730((uint64_t)v65);
        swift_endAccess();
        swift_release();
        sub_1BDD9C3E0(v59, type metadata accessor for Proto_Value);
        sub_1BDD9C3E0(v70, type metadata accessor for Proto_Value);
        return;
      }
      sub_1BDD9C3E0(v64, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v67 = MEMORY[0x1E0DEE9D8];
    *v65 = MEMORY[0x1E0DEE9D8];
    v65[1] = v67;
    sub_1BE1B20E4();
    goto LABEL_22;
  }
}

void CRString.Cursor.finalizeTimestamps(_:)(uint64_t a1)
{
  void **v1;
  void *v3;
  id v4;

  v3 = *v1;
  objc_opt_self();
  v4 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_finalizedInContext_, a1);

  *v1 = v4;
}

Swift::Bool __swiftcall CRString.Cursor.needToFinalizeTimestamps()()
{
  objc_opt_self();
  return objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_needToFinalizeTimestamps);
}

void CRString.Cursor.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static CRString.Cursor.== infix(_:_:)()
{
  sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6EF860);
  return sub_1BE1B2EC4() & 1;
}

uint64_t sub_1BDE050DC()
{
  sub_1BDDC6C38(0, (unint64_t *)&qword_1ED6EF860);
  return sub_1BE1B2EC4() & 1;
}

id sub_1BDE0512C()
{
  id *v0;

  return *v0;
}

uint64_t sub_1BDE05134@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

id sub_1BDE0513C()
{
  objc_opt_self();
  return objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_needToFinalizeTimestamps);
}

void sub_1BDE05188(uint64_t a1)
{
  void **v1;
  void *v3;
  id v4;

  v3 = *v1;
  objc_opt_self();
  v4 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_finalizedInContext_, a1);

  *v1 = v4;
}

uint64_t sub_1BDE051F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CRString.Cursor.init(from:)(a1, a2);
}

void sub_1BDE0520C(uint64_t a1)
{
  CRString.Cursor.encode(to:)(a1);
}

void sub_1BDE05220(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

Coherence::CRString::Cursor __swiftcall CRString.cursor(at:affinity:)(Swift::Int at, Coherence::CRAffinity affinity)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v6;
  Coherence::CRString::Cursor result;
  id v8;

  v6 = v2;
  v8 = *(id *)(*(_QWORD *)v3 + 16);
  sub_1BDE05284(v8, at, affinity, v6);

  return result;
}

id sub_1BDE05284@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  id v9;
  uint64_t v10;
  id result;

  v8 = a3;
  v9 = objc_msgSend(a1, sel_length);
  if (v8)
  {
    if (__OFADD__(v9, 1))
    {
      __break(1u);
    }
    else if ((uint64_t)v9 + 1 > a2)
    {
      v10 = a3 == 2;
LABEL_7:
      result = objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a2, v10);
      *a4 = result;
      return result;
    }
  }
  else if ((uint64_t)v9 > a2)
  {
    v10 = 2;
    goto LABEL_7;
  }
  result = (id)sub_1BE1B3200();
  __break(1u);
  return result;
}

void CRString.cursor(range:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v7;

  v7 = *(id *)(*(_QWORD *)v3 + 16);
  sub_1BDE053CC(v7, a1, a2, a3);

}

id sub_1BDE053CC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  id v9;
  id v10;
  id result;

  if (a2 < 0)
    goto LABEL_11;
  v8 = objc_msgSend(a1, sel_length);
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)v8 + 1 <= a3)
  {
LABEL_11:
    result = (id)sub_1BE1B3200();
    __break(1u);
    return result;
  }
  v9 = objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a3, 0);
  if (__OFSUB__(a3, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v10 = v9;
  if (a3 == a2)
    result = v9;
  else
    result = objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a2, 1);
  *a4 = result;
  a4[1] = v10;
  return result;
}

Swift::Int_optional __swiftcall CRString.index(of:)(Coherence::CRString::Cursor of)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  Swift::Bool v7;
  Swift::Int v8;
  Swift::Int_optional result;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  objc_opt_self();
  v3 = swift_dynamicCastObjCClassUnconditional();
  v4 = v2;
  v5 = objc_msgSend(v4, sel_characterIndexForIndex_, v3);
  v6 = sub_1BE1B1C4C();

  v7 = v5 == (id)v6;
  if (v5 == (id)v6)
    v8 = 0;
  else
    v8 = (Swift::Int)v5;
  result.value = v8;
  result.is_nil = v7;
  return result;
}

void CRString.range(of:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  objc_opt_self();
  v2 = swift_dynamicCastObjCClassUnconditional();
  v3 = v1;
  v4 = objc_msgSend(v3, sel_characterIndexForIndex_, v2);
  objc_opt_self();
  v5 = objc_msgSend(v3, sel_characterIndexForIndex_, swift_dynamicCastObjCClassUnconditional());
  if (v4 == (id)sub_1BE1B1C4C())
  {

  }
  else
  {
    v6 = sub_1BE1B1C4C();

    if (v5 != (id)v6 && (uint64_t)v5 < (uint64_t)v4)
      __break(1u);
  }
}

void CRString.cursor(range:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v9 = *(id *)(*(_QWORD *)v4 + 16);
  if (a3 < 0)
    goto LABEL_11;
  v10 = v9;
  v11 = objc_msgSend(v9, sel_length);
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)v11 + 1 <= a4)
  {
LABEL_11:
    sub_1BE1B3200();
    __break(1u);
    return;
  }
  v12 = objc_msgSend(v10, sel_mergeableIndexForCharacterIndex_affinity_, a4, 0);
  if (__OFSUB__(a4, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = v12;
  if (a4 == a3)
    v14 = v12;
  else
    v14 = objc_msgSend(v10, sel_mergeableIndexForCharacterIndex_affinity_, a3, 1);
  v15 = v14;

  *a1 = v15;
  *a2 = v13;
}

void CRString.range(of:)(id *a1, void **a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v3 = *a2;
  v4 = *v2;
  v5 = *a1;
  v6 = *(void **)(v4 + 16);
  v7 = v3;
  objc_opt_self();
  v8 = swift_dynamicCastObjCClassUnconditional();
  v9 = v6;
  v10 = objc_msgSend(v9, sel_characterIndexForIndex_, v8);
  objc_opt_self();
  v11 = objc_msgSend(v9, sel_characterIndexForIndex_, swift_dynamicCastObjCClassUnconditional());
  if (v10 == (id)sub_1BE1B1C4C())
  {

  }
  else
  {
    v12 = sub_1BE1B1C4C();

    if (v11 != (id)v12 && (uint64_t)v11 < (uint64_t)v10)
      __break(1u);
  }
}

void sub_1BDE058B0(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v7;

  v7 = *(id *)(*(_QWORD *)v3 + 16);
  sub_1BDE05284(v7, a1, a2, a3);

}

void sub_1BDE05908(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v7;

  v7 = *(id *)(*(_QWORD *)v3 + 16);
  sub_1BDE053CC(v7, a1, a2, a3);

}

id sub_1BDE05964()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  objc_opt_self();
  v2 = swift_dynamicCastObjCClassUnconditional();
  v3 = v1;
  v4 = objc_msgSend(v3, sel_characterIndexForIndex_, v2);
  v5 = sub_1BE1B1C4C();

  if (v4 == (id)v5)
    return 0;
  else
    return v4;
}

void sub_1BDE059EC()
{
  CRString.range(of:)();
}

void sub_1BDE05A04(id *a1, void **a2)
{
  CRString.range(of:)(a1, a2);
}

void sub_1BDE05ADC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  unsigned int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  objc_super v23;
  id v24[4];

  v24[3] = *(id *)MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = (objc_class *)type metadata accessor for CRStringEncoder(0);
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
  swift_retain();
  v12 = v10;
  sub_1BE1B20E4();
  v13 = *(int *)(v5 + 20);
  if (qword_1ED6EF5C0 != -1)
    swift_once();
  *(_QWORD *)&v11[v13] = qword_1ED6EF5B0;
  v14 = &v12[OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence];
  swift_retain();
  sub_1BE1B20E4();
  v15 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1ED6EF680 != -1)
    swift_once();
  *(_QWORD *)&v14[v15] = qword_1ED6EF678;
  *(_QWORD *)&v12[OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder] = a1;
  swift_retain();
  swift_retain();

  v23.receiver = v12;
  v23.super_class = v9;
  v16 = objc_msgSendSuper2(&v23, sel_init);
  swift_release();
  v17 = objc_msgSend(*(id *)(v8 + 16), sel_fullyRenamed_, *(_QWORD *)(a1 + 16));
  v24[0] = 0;
  v18 = objc_msgSend(v17, sel_saveToEncoder_error_, v16, v24);

  if (v18)
  {
    v19 = v24[0];
    sub_1BE1B20E4();
    v20 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(a2 + v20) = qword_1ED6F2E08;
    v21 = (uint64_t)v16 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
    swift_beginAccess();
    sub_1BDD9C318(v21, (uint64_t)v7, type metadata accessor for Proto_Sequence);
    swift_retain();
    sub_1BE12894C((uint64_t)v7);
  }
  else
  {
    v22 = v24[0];
    sub_1BE1B1D3C();

    swift_willThrow();
  }

}

uint64_t sub_1BDE05DB0()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(*(_QWORD *)v0 + 16);
  swift_retain();
  v2 = objc_msgSend(v1, sel_attributedString);
  objc_opt_self();
  swift_dynamicCastObjCClassUnconditional();
  sub_1BE1B27C8();
  swift_release();
  swift_unknownObjectRelease();
  sub_1BE1B2858();
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall CRString.Partial.merge(delta:)(Coherence::CRString::Partial *delta)
{
  return 0;
}

Swift::Bool __swiftcall CRString.Partial.canMerge(delta:)(Coherence::CRString::Partial *delta)
{
  return 0;
}

uint64_t CRString.Partial.init(from:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t result;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  objc_super v37;
  uint64_t v38;

  v34 = a2;
  v38 = *MEMORY[0x1E0C80C00];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v35);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_CRDT(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v14, &qword_1ED6F3728);
  LODWORD(v15) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8);
  sub_1BDD86E30((uint64_t)v14, &qword_1ED6F3728);
  if ((_DWORD)v15 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v16 = 0xD000000000000014;
    *(_QWORD *)(v16 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v16 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = a1;
  *(_QWORD *)(inited + 24) = 0;
  *(_BYTE *)(inited + 32) = 1;
  swift_retain();
  sub_1BDDA0528((uint64_t)v11);
  v18 = *(_QWORD *)&v11[*(int *)(v8 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v5, &qword_1ED6F2DF0);
  v19 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v5, 1, v19) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
LABEL_8:
    sub_1BE1B20E4();
    v20 = *(int *)(v35 + 20);
    if (qword_1ED6EF5C0 != -1)
      swift_once();
    *(_QWORD *)&v7[v20] = qword_1ED6EF5B0;
    swift_retain();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v7, type metadata accessor for Proto_Sequence);
LABEL_11:
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_CRDT);
  v21 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  v22 = (char *)objc_allocWithZone(v21);
  v23 = &v22[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  swift_retain();
  v24 = v22;
  sub_1BE1B20E4();
  v25 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1ED6EF680 != -1)
    swift_once();
  *(_QWORD *)&v23[v25] = qword_1ED6EF678;
  sub_1BDD9C318((uint64_t)v7, (uint64_t)&v24[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(_QWORD *)&v24[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a1;
  swift_retain();
  swift_retain();

  v37.receiver = v24;
  v37.super_class = v21;
  v26 = objc_msgSendSuper2(&v37, sel_init);
  swift_release();
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Sequence);
  v27 = objc_allocWithZone((Class)CRTTMergeableStringDelta);
  v36 = 0;
  v28 = v26;
  v29 = objc_msgSend(v27, sel_initWithDecoder_error_, v28, &v36);
  if (v29)
  {
    v30 = v29;
    v31 = v36;
    swift_release();

    swift_setDeallocating();
    result = swift_release();
    *v34 = v30;
    return result;
  }
  v33 = v36;
  sub_1BE1B1D3C();

  swift_willThrow();
  swift_release();

  swift_setDeallocating();
  return swift_release();
}

uint64_t CRString.Partial.encode(to:)(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  unsigned __int8 v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  objc_super v24;
  id v25[4];

  v25[3] = *(id *)MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  result = sub_1BDDA8D6C();
  if (!v2)
  {
    v9 = result;
    v10 = (objc_class *)type metadata accessor for CRStringEncoder(0);
    v11 = (char *)objc_allocWithZone(v10);
    v12 = &v11[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
    v23 = v9;
    swift_retain();
    swift_retain();
    v13 = v11;
    sub_1BE1B20E4();
    v14 = *(int *)(v4 + 20);
    if (qword_1ED6EF5C0 != -1)
      swift_once();
    *(_QWORD *)&v12[v14] = qword_1ED6EF5B0;
    v15 = &v13[OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence];
    swift_retain();
    sub_1BE1B20E4();
    v16 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
    if (qword_1ED6EF680 != -1)
      swift_once();
    *(_QWORD *)&v15[v16] = qword_1ED6EF678;
    *(_QWORD *)&v13[OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder] = a1;
    swift_retain();
    swift_retain();

    v24.receiver = v13;
    v24.super_class = v10;
    v17 = objc_msgSendSuper2(&v24, sel_init);
    swift_release();
    v25[0] = 0;
    v18 = objc_msgSend(v7, sel_saveToEncoder_error_, v17, v25);
    v19 = v25[0];
    if ((v18 & 1) != 0)
    {
      v20 = (uint64_t)v17 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
      swift_beginAccess();
      sub_1BDD9C318(v20, (uint64_t)v6, type metadata accessor for Proto_Sequence);
      swift_beginAccess();
      v21 = v19;
      sub_1BE12894C((uint64_t)v6);
    }
    else
    {
      v22 = v25[0];
      sub_1BE1B1D3C();

      swift_willThrow();
    }

    return swift_release();
  }
  return result;
}

uint64_t sub_1BDE06628@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return CRString.Partial.init(from:)(a1, a2);
}

uint64_t sub_1BDE0663C(uint64_t a1)
{
  return CRString.Partial.encode(to:)(a1);
}

uint64_t sub_1BDE06650()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BDE06674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1BDE03800(a1, a2, a3, a4, v4);
}

_QWORD *sub_1BDE0667C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EF508);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE07644(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE06788(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE06C04(a1, a2, a3, a4, &qword_1EF52C3C0);
}

uint64_t sub_1BDE0679C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDC5B54(a1, a2, a3, a4, &qword_1EF52C3F0, &qword_1EF52C3F8);
}

_QWORD *sub_1BDE067B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C360);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE07734(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE068BC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C358);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE07A84(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE069C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6EFC70, type metadata accessor for Proto_Value);
}

uint64_t sub_1BDE069DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1EF52C3D0, type metadata accessor for Proto_Asset);
}

char *sub_1BDE069F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52B730);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BDE07F60(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1BDE06AE8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6ED658);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE08044(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE06BF0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE06C04(a1, a2, a3, a4, (uint64_t *)&unk_1EF52BCF8);
}

_QWORD *sub_1BDE06C04(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE07824(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE06D1C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3D8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BDE07B74(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE06E40(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C378);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BDE07C60(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE06F60(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDDAE054(a1, a2, a3, a4, qword_1EF5255B8);
}

_QWORD *sub_1BDE06F6C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C388);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE07E78(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE07078(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3C8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE0812C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE07184(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6EE768, type metadata accessor for Proto_Timestamp);
}

char *sub_1BDE07198(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1ED6EE780);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE0821C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE072A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1ED6EE770, type metadata accessor for Proto_Subsequence);
}

uint64_t sub_1BDE072B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1EF52C368, type metadata accessor for Proto_Sequence.AttributeRun);
}

uint64_t sub_1BDE072CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDAE4F0(a1, a2, a3, a4, &qword_1EF52C370, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
}

_QWORD *sub_1BDE072E0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE072F8(a1, a2, a3, a4, &qword_1EF52C3B8);
}

_QWORD *sub_1BDE072EC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1BDE072F8(a1, a2, a3, a4, &qword_1EF52C390);
}

_QWORD *sub_1BDE072F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v14 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE08304(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE07400(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3A8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BDE07D6C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BDE07524(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C398);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BDE083EC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE07630(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BDDC5B54(a1, a2, a3, a4, &qword_1ED6EE778, &qword_1ED6F3CB8);
}

uint64_t sub_1BDE07644(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE07734(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE07824(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE07910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_UNKNOWN **sub_1BDE07954()
{
  return &protocol witness table for CRString.Partial;
}

unint64_t sub_1BDE07960(uint64_t a1)
{
  unint64_t result;

  result = sub_1BDE07984();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1BDE07984()
{
  unint64_t result;

  result = qword_1EF52C2E0;
  if (!qword_1EF52C2E0)
  {
    result = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRString.Cursor, &type metadata for CRString.Cursor);
    atomic_store(result, (unint64_t *)&qword_1EF52C2E0);
  }
  return result;
}

_UNKNOWN **sub_1BDE079C8()
{
  return &protocol witness table for CRString.Cursor;
}

ValueMetadata *type metadata accessor for CRString()
{
  return &type metadata for CRString;
}

ValueMetadata *type metadata accessor for CRString.ObservableDifference()
{
  return &type metadata for CRString.ObservableDifference;
}

uint64_t getEnumTagSinglePayload for CRString.ObservableDifference.Edit(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CRString.ObservableDifference.Edit(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CRString.ObservableDifference.Edit()
{
  return &type metadata for CRString.ObservableDifference.Edit;
}

ValueMetadata *type metadata accessor for CRString.MutatingAction()
{
  return &type metadata for CRString.MutatingAction;
}

ValueMetadata *type metadata accessor for CRString.Cursor()
{
  return &type metadata for CRString.Cursor;
}

ValueMetadata *type metadata accessor for CRString.Partial()
{
  return &type metadata for CRString.Partial;
}

uint64_t sub_1BDE07A84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDE07B74(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE07C60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C380);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE07D6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDE07E78(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDE07F60(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDE08044(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE0812C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDE0821C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

char *sub_1BDE08304(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t sub_1BDE083EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C3A0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BE1B326C();
  __break(1u);
  return result;
}

uint64_t CRKeyPath.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t CRKeyPath.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_1BDDB6CA4(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

void sub_1BDE08544(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1BDE085A8
     + dword_1BDE087DC[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1BDE085B8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_1BDDB6CA4(v1, v0);
  sub_1BDDC4328(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1BDDB796C(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

double static CRKeyPath.unique.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double result;
  __int128 v11;

  v2 = sub_1BE1B1F58();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B1F4C();
  *(_QWORD *)&v11 = sub_1BDDC4278((uint64_t)&unk_1E775B450);
  *((_QWORD *)&v11 + 1) = v6;
  v7 = sub_1BDEE7C7C();
  v9 = v8;
  sub_1BE1B1EA4();
  sub_1BDDB796C(v7, v9);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  result = *(double *)&v11;
  *a1 = v11;
  return result;
}

double CRKeyPath.init(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;

  *(_QWORD *)&v10 = sub_1BDDC4278((uint64_t)&unk_1E775B580);
  *((_QWORD *)&v10 + 1) = v4;
  v5 = sub_1BDEE7C7C();
  v7 = v6;
  sub_1BE1B1EA4();
  sub_1BDDB796C(v5, v7);
  v8 = sub_1BE1B1F58();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  result = *(double *)&v10;
  *a2 = v10;
  return result;
}

uint64_t CRKeyPath.init(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  __int128 v11;

  v2 = sub_1BE1B2804();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = sub_1BDDC4278((uint64_t)&unk_1E775B5A8);
  *((_QWORD *)&v11 + 1) = v6;
  sub_1BE1B27F8();
  v7 = sub_1BE1B27D4();
  v9 = v8;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v9 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    sub_1BE1B1EA4();
    result = sub_1BDD9CC0C(v7, v9);
    *a1 = v11;
  }
  return result;
}

double CRKeyPath.init(_:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  double result;
  __int128 v8;

  *(_QWORD *)&v8 = sub_1BDDC4278((uint64_t)&unk_1E775B558);
  *((_QWORD *)&v8 + 1) = v6;
  sub_1BE1B1EA4();
  sub_1BDDB796C(a1, a2);
  result = *(double *)&v8;
  *a3 = v8;
  return result;
}

double CRKeyPath.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t __dst;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v15 - v10;
  *(_QWORD *)&v25 = sub_1BDDC4278((uint64_t)&unk_1E775B5D0);
  *((_QWORD *)&v25 + 1) = v12;
  __dst = 0;
  sub_1BE1B28F4();
  if (__OFADD__(v23, 1))
    __break(1u);
  v19 = a3;
  sub_1BE1B1E50();
  v16 = v6;
  v17 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_1BE1B2888();
  v18 = a2;
  swift_getAssociatedConformanceWitness();
  sub_1BE1B2F00();
  v13 = v24;
  if (v24 >> 60 != 15)
  {
    v21 = xmmword_1BE1B61B0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3A08);
    *(_OWORD *)(swift_allocObject() + 16) = v21;
    __asm { BR              X10 }
  }
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, AssociatedTypeWitness);
  result = *(double *)&v25;
  *v19 = v25;
  return result;
}

uint64_t sub_1BDE08F80(_QWORD *a1, uint64_t a2)
{
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
    JUMPOUT(0x1BDE08FECLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_1BDE08FA0 + *((int *)qword_1BDE08FF8 + (*(_QWORD *)(a2 + 8) >> 62))))();
}

void CRKeyPath.uuid.getter()
{
  __asm { BR              X9 }
}

void CRKeyPath.components.getter()
{
  __asm { BR              X9 }
}

void static CRKeyPath.== infix(_:_:)(uint64_t *a1)
{
  sub_1BDDD6F30(*a1, a1[1]);
}

uint64_t CRKeyPath.hash(into:)()
{
  return sub_1BE1B1E8C();
}

void sub_1BDE095D4()
{
  uint64_t v1;
  uint64_t v2;

  v1 = sub_1BE1B1F58();
  MEMORY[0x1E0C80A78](v1);
  v2 = sub_1BE1B2804();
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X9 }
}

uint64_t CRKeyPath.description.getter()
{
  sub_1BDE095D4();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return 10278;
}

void CRKeyPath.init(from:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  void *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  int EnumCaseMultiPayload;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int (*v119)(char *, uint64_t, uint64_t);

  v109 = a2;
  v110 = type metadata accessor for Proto_KeyPath(0);
  v107 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110);
  v99 = (char **)((char *)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v5 = MEMORY[0x1E0C80A78](v4);
  v98 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v106 = (uint64_t)&v94 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v100 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v103 = (uint64_t)&v94 - v11;
  v112 = type metadata accessor for Proto_Reference(0);
  v12 = MEMORY[0x1E0C80A78](v112);
  v97 = (uint64_t)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v105 = (uint64_t)&v94 - v14;
  v15 = type metadata accessor for Proto_Value(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v102 = (uint64_t)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v104 = (uint64_t)&v94 - v19;
  v96 = sub_1BE1B1F58();
  v95 = *(_QWORD *)(v96 - 8);
  v20 = MEMORY[0x1E0C80A78](v96);
  v94 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v94 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v25 = MEMORY[0x1E0C80A78](v24);
  v101 = (uint64_t)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v108 = (uint64_t)&v94 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v94 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v94 - v33;
  MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v94 - v35;
  v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v37, (uint64_t)v36, &qword_1ED6F3770);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v114 = v15;
  v119 = v38;
  LODWORD(v16) = v38(v36, 1, v15);
  swift_retain();
  sub_1BDD86E30((uint64_t)v36, &qword_1ED6F3770);
  v113 = a1;
  if ((_DWORD)v16 == 1)
  {
    sub_1BDDFCAFC();
    v39 = (void *)swift_allocError();
    *(_QWORD *)v40 = 0xD000000000000017;
    *(_QWORD *)(v40 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v40 + 16) = 0;
    v111 = v39;
    swift_willThrow();
    swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = a1;
    v41 = v111;
    v42 = sub_1BDDCA244();
    if (!v41)
    {
      v68 = v42;
      v69 = v43;
      swift_release();
      swift_release();
      goto LABEL_38;
    }
    swift_release();
    v111 = v41;
  }
  sub_1BDD86DEC(v37, (uint64_t)v34, &qword_1ED6F3770);
  v44 = v119(v34, 1, v114);
  sub_1BDD86E30((uint64_t)v34, &qword_1ED6F3770);
  if (v44 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(_QWORD *)(swift_initStackObject() + 16) = v113;
    sub_1BDDC9C24((uint64_t)v23);
    v60 = v95;
    v61 = v94;
    v62 = v96;
    (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v94, v23, v96);
    v117 = sub_1BDDC4278((uint64_t)&unk_1E775B428);
    v118 = v63;
    v64 = sub_1BDEE7C7C();
    v66 = v65;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v64, v66);
    v67 = *(void (**)(char *, uint64_t))(v60 + 8);
    v67(v61, v62);

    swift_release();
    v68 = v117;
    v69 = v118;
    v67(v23, v62);
LABEL_38:
    v93 = v109;
    *v109 = v68;
    v93[1] = v69;
    return;
  }
  sub_1BDDFCAFC();
  v45 = (void *)swift_allocError();
  *(_QWORD *)v46 = 0xD000000000000017;
  *(_QWORD *)(v46 + 8) = 0x80000001BE1CD110;
  *(_BYTE *)(v46 + 16) = 0;
  swift_willThrow();
  v96 = 0;
  sub_1BDD86DEC(v37, (uint64_t)v31, &qword_1ED6F3770);
  v47 = v114;
  v48 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v119;
  v49 = v119(v31, 1, v114);
  sub_1BDD86E30((uint64_t)v31, &qword_1ED6F3770);
  if (v49 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v50 = 0xD000000000000017;
    *(_QWORD *)(v50 + 8) = 0x80000001BE1CD110;
    *(_BYTE *)(v50 + 16) = 0;
    swift_willThrow();
    swift_release();
LABEL_22:

    return;
  }
  v51 = v37;
  v52 = v108;
  sub_1BDD86DEC(v51, v108, &qword_1ED6F3770);
  if (v48(v52, 1, v47) == 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  v53 = v104;
  sub_1BDDA2E8C(v52, v104, type metadata accessor for Proto_Value);
  v54 = *(_QWORD *)(v53 + *(int *)(v47 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v55 = v103;
  sub_1BDD86DEC(v54, v103, &qword_1ED6F26F0);
  v56 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48);
  if (v57(v55, 1, v56) == 1)
  {
    swift_retain();
    sub_1BDD86E30(v55, &qword_1ED6F26F0);
    v58 = v105;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v58 = v105;
    if (EnumCaseMultiPayload == 7)
    {
      sub_1BDDA2E8C(v55, v105, type metadata accessor for Proto_Reference);
      goto LABEL_20;
    }
    swift_retain();
    sub_1BDD9C3E0(v55, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v70 = *(int *)(v112 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(v58 + v70) = qword_1ED6EFD68;
LABEL_20:
  swift_retain();
  sub_1BDD9C3E0(v53, type metadata accessor for Proto_Value);
  v71 = *(_QWORD *)(v58 + *(int *)(v112 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  v72 = v106;
  sub_1BDD86DEC(v71, v106, &qword_1ED6F3790);
  v73 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  LODWORD(v71) = v73(v72, 1, v110);
  sub_1BDD86E30(v72, &qword_1ED6F3790);
  sub_1BDD9C3E0(v58, type metadata accessor for Proto_Reference);
  if ((_DWORD)v71 == 1)
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v74 = 0xD00000000000001DLL;
    *(_QWORD *)(v74 + 8) = 0x80000001BE1CD360;
    *(_BYTE *)(v74 + 16) = 0;
    swift_willThrow();
    swift_release_n();
    goto LABEL_22;
  }
  v75 = v113 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  v76 = v75;
  v77 = v101;
  sub_1BDD86DEC(v76, v101, &qword_1ED6F3770);
  if (v119((char *)v77, 1, v47) != 1)
  {
    v78 = v77;
    v79 = v102;
    sub_1BDDA2E8C(v78, v102, type metadata accessor for Proto_Value);
    v80 = *(_QWORD *)(v79 + *(int *)(v47 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v81 = v80;
    v82 = v100;
    sub_1BDD86DEC(v81, v100, &qword_1ED6F26F0);
    if (v57(v82, 1, v56) == 1)
    {
      sub_1BDD86E30(v82, &qword_1ED6F26F0);
      v83 = v110;
      v84 = (uint64_t)v98;
      v85 = v97;
    }
    else
    {
      v86 = swift_getEnumCaseMultiPayload() == 7;
      v87 = v82;
      v83 = v110;
      v84 = (uint64_t)v98;
      v85 = v97;
      if (v86)
      {
        sub_1BDDA2E8C(v87, v97, type metadata accessor for Proto_Reference);
LABEL_32:
        sub_1BDD9C3E0(v102, type metadata accessor for Proto_Value);
        v89 = *(_QWORD *)(v85 + *(int *)(v112 + 20))
            + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
        swift_beginAccess();
        sub_1BDD86DEC(v89, v84, &qword_1ED6F3790);
        if (v73(v84, 1, v83) == 1)
        {
          v90 = v99;
          *v99 = MEMORY[0x1E0DEE9D8];
          v90[1] = sub_1BE1B20CC();
          v90[2] = v91;
          sub_1BE1B20E4();
          sub_1BDD86E30(v84, &qword_1ED6F3790);
        }
        else
        {
          v90 = v99;
          sub_1BDDA2E8C(v84, (uint64_t)v99, type metadata accessor for Proto_KeyPath);
        }
        v92 = v96;
        sub_1BDD9C3E0(v85, type metadata accessor for Proto_Reference);
        sub_1BDDC8ECC((uint64_t)v90);
        if (v92)
        {

          swift_release();
          return;
        }

        swift_release();
        v68 = v115;
        v69 = v116;
        goto LABEL_38;
      }
      sub_1BDD9C3E0(v87, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v88 = *(int *)(v112 + 20);
    if (qword_1ED6EFD78 != -1)
      swift_once();
    *(_QWORD *)(v85 + v88) = qword_1ED6EFD68;
    swift_retain();
    goto LABEL_32;
  }
LABEL_40:
  __break(1u);
}

uint64_t CRKeyPath.encode(to:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = *v0;
  v3 = v0[1];
  result = sub_1BDE25870();
  if (!v1)
  {
    swift_beginAccess();
    swift_retain();
    sub_1BDDB6CA4(v2, v3);
    sub_1BE1297E0(v2, v3);
    return swift_release();
  }
  return result;
}

void CRKeyPath.minEncodingVersion.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CRKeyPath.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B1E8C();
  return sub_1BE1B371C();
}

uint64_t sub_1BDE0A8D8()
{
  sub_1BE1B36F8();
  sub_1BE1B1E8C();
  return sub_1BE1B371C();
}

uint64_t sub_1BDE0A920()
{
  return sub_1BE1B1E8C();
}

uint64_t sub_1BDE0A928()
{
  sub_1BE1B36F8();
  sub_1BE1B1E8C();
  return sub_1BE1B371C();
}

uint64_t sub_1BDE0A96C()
{
  sub_1BDE095D4();
  sub_1BE1B284C();
  swift_bridgeObjectRelease();
  sub_1BE1B284C();
  return 10278;
}

void sub_1BDE0A9D0(uint64_t *a1)
{
  sub_1BDDD6F30(*a1, a1[1]);
}

void sub_1BDE0A9E4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CRKeyPath.init(from:)(a1, a2);
}

uint64_t sub_1BDE0A9F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = *v0;
  v3 = v0[1];
  result = sub_1BDE25870();
  if (!v1)
  {
    swift_beginAccess();
    swift_retain();
    sub_1BDDB6CA4(v2, v3);
    sub_1BE1297E0(v2, v3);
    return swift_release();
  }
  return result;
}

BOOL sub_1BDE0AA98(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  char v3;
  _OWORD v5[2];

  v2 = *a1;
  v5[0] = *a2;
  v5[1] = v2;
  _s9Coherence9CRKeyPathV1loiySbAC_ACtFZ_0((uint64_t)v5);
  return (v3 & 1) == 0;
}

BOOL sub_1BDE0AAD0(__int128 *a1)
{
  char v1;
  __int128 v3;

  v3 = *a1;
  _s9Coherence9CRKeyPathV1loiySbAC_ACtFZ_0((uint64_t)&v3);
  return (v1 & 1) == 0;
}

uint64_t sub_1BDE0AB08(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  char v3;
  _OWORD v5[2];

  v2 = *a1;
  v5[0] = *a2;
  v5[1] = v2;
  _s9Coherence9CRKeyPathV1loiySbAC_ACtFZ_0((uint64_t)v5);
  return v3 & 1;
}

void sub_1BDE0AB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDE0ABA0(int a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t __s2, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  void *v35;
  uint64_t result;
  char v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v38 = v31;
  v39 = v32;
  v40 = BYTE2(v32);
  v41 = BYTE3(v32);
  v42 = BYTE4(v32);
  v43 = BYTE5(v32);
  result = sub_1BDE0AE18((uint64_t)&v38, v35, (uint64_t)&v38 + BYTE6(v32), v34, a6, &v37);
  *v33 = v37;
  return result;
}

uint64_t sub_1BDE0AE18@<X0>(uint64_t __s2@<X0>, void *__s1@<X2>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X5>, char *a6@<X8>)
{
  char v7;
  size_t v9;

  v7 = 0;
  if (__s1 && __s2)
  {
    v9 = a4 - (_QWORD)__s1;
    if (a3 - __s2 < a4 - (uint64_t)__s1)
      v9 = a3 - __s2;
    __s2 = memcmp(__s1, (const void *)__s2, v9);
    if ((__s2 & 0x80000000) != 0)
    {
      v7 = 1;
    }
    else
    {
      if (!(_DWORD)__s2)
        __asm { BR              X11 }
      v7 = 0;
    }
  }
  *a6 = v7;
  return __s2;
}

uint64_t CRKeyPath.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B374C();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    sub_1BDE0B514();
    sub_1BE1B34D0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
    a2[1] = v7;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t CRKeyPath.encode(to:)(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B3770();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_1BDE0B580();
  sub_1BE1B34F4();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_1BDE0B0E8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CRKeyPath.init(from:)(a1, a2);
}

uint64_t sub_1BDE0B0FC(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BE1B3770();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  sub_1BDE0B580();
  sub_1BE1B34F4();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_1BDE0B1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v20;

  v10 = sub_1BE1B1C70();
  if (v10)
  {
    v11 = sub_1BE1B1C94();
    if (__OFSUB__(a1, v11))
    {
LABEL_15:
      __break(1u);
      JUMPOUT(0x1BDE0B254);
    }
    v10 += a1 - v11;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_1BE1B1C88();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v10 + v15;
  if (v10)
    v17 = v16;
  else
    v17 = 0;
  sub_1BDDB79B0(v10, v17, a4, a5);
  if (!v5)
    v18 = v20;
  return v18 & 1;
}

void _s9Coherence9CRKeyPathV1loiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BDE0B2D4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v0;
  v7 = v1;
  v8 = BYTE2(v1);
  v9 = BYTE3(v1);
  v10 = BYTE4(v1);
  v11 = BYTE5(v1);
  sub_1BDDB6CA4(v3, v2);
  sub_1BDE0AB3C((uint64_t)&v6, (uint64_t)&v6 + BYTE6(v1), v3, v2);
  sub_1BDDB796C(v3, v2);
  sub_1BDDB796C(v0, v1);
  return v5 & 1;
}

unint64_t sub_1BDE0B514()
{
  unint64_t result;

  result = qword_1EF52C400;
  if (!qword_1EF52C400)
  {
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EF52C400);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1BDE0B580()
{
  unint64_t result;

  result = qword_1EF52C408[0];
  if (!qword_1EF52C408[0])
  {
    result = MEMORY[0x1C3B7DF54](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, qword_1EF52C408);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CRKeyPath(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_1BDDB6CA4(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithCopy for CRKeyPath(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_1BDDB6CA4(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1BDDB796C(v5, v6);
  return a1;
}

uint64_t *assignWithTake for CRKeyPath(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1BDDB796C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRKeyPath(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CRKeyPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t sub_1BDE0B724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_1BE1B2A20();
}

uint64_t sub_1BDE0B798(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  _QWORD v8[2];
  char v9;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = *v2;
  MEMORY[0x1C3B7DF54](MEMORY[0x1E0DEAF50]);
  result = sub_1BE1B2CFC();
  if ((v9 & 1) == 0)
  {
    sub_1BE1B2A38();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

void sub_1BDE0B86C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = type metadata accessor for TreeNode(255, a3[2], a3[3], a3[4]);
  swift_retain();
  swift_retain();
  MEMORY[0x1C3B7DF54](&unk_1BE1C8294, v3);
  type metadata accessor for CROrderedDictionary();
}

uint64_t sub_1BDE0B904(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  v3 = CROrderedDictionary.index(where:)((uint64_t (*)(char *, char *))sub_1BDE0D550, (uint64_t)&v7, a1);
  v5 = v4;
  swift_release();
  result = swift_release();
  if ((v5 & 1) == 0)
    sub_1BDFB631C(v1, (uint64_t)v3, a1);
  return result;
}

uint64_t sub_1BDE0B970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v2);
  sub_1BE1B2A5C();
  return sub_1BE1B2A20();
}

uint64_t CROrderedTree.moveOrInsert(_:inParent:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE0BA04(a1, a2, a3, 1, a4);
}

uint64_t sub_1BDE0BA04(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD, _QWORD);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t result;
  void (*v47)(char *, uint64_t);
  _DWORD v48[4];
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD, _QWORD);
  _QWORD *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v48[3] = a4;
  v67 = a3;
  v68 = a2;
  v65 = a1;
  v5 = *(_QWORD *)(a5 + 16);
  v55 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v54 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v50 = (char *)v48 - v9;
  MEMORY[0x1E0C80A78](v8);
  v51 = (char *)v48 - v10;
  v13 = v11[3];
  v12 = v11[4];
  v62 = v11;
  v66 = v12;
  v14 = type metadata accessor for TreeNode(0, v5, v13, v12);
  v60 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v53 = (char *)v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v49 = (char *)v48 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v56 = (char *)v48 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v52 = (char *)v48 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)v48 - v23;
  v25 = sub_1BE1B2EE8();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)v48 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)v48 - v31;
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)v48 - v33;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v35((char *)v48 - v33, v68, v25);
  v35(v32, (uint64_t)v34, v25);
  if (v67 < 0)
  {
    v47 = *(void (**)(char *, uint64_t))(v26 + 8);
    v47(v32, v25);
    v47(v34, v25);
    goto LABEL_10;
  }
  v63 = v35;
  v35(v29, (uint64_t)v32, v25);
  v57 = v29;
  v64 = v13;
  sub_1BE17C5BC((uint64_t)v29, v5, v24);
  v36 = v69[2];
  v37 = sub_1BE1B2A5C();
  v38 = MEMORY[0x1C3B7DF54](&unk_1BE1C8254, v14);
  v58 = v37;
  MEMORY[0x1C3B7C58C](&v70, v24, v36, v14, v37, v38);
  v39 = *(void (**)(_QWORD, _QWORD))(v60 + 8);
  v59 = v14;
  v61 = v39;
  v39(v24, v14);
  if (v70)
  {
    v40 = MEMORY[0x1C3B7C8EC](v70, v5);
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v26 + 8);
    v41(v32, v25);
    v41(v34, v25);
  }
  else
  {
    v42 = *(void (**)(char *, uint64_t))(v26 + 8);
    v42(v32, v25);
    v42(v34, v25);
    swift_bridgeObjectRelease();
    v40 = 0;
  }
  v43 = v65;
  if (v40 < v67)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1BDE0C614);
  }
  v44 = v69[3];
  v70 = *v69;
  v71 = *(_OWORD *)(v69 + 1);
  v72 = v44;
  v45 = v62;
  result = sub_1BE0DF4D8(v65, v68, v62);
  if ((result & 1) != 0)
    sub_1BE0DF958(v43, v45);
  return result;
}

uint64_t CROrderedTree.insert(_:inParent:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE0BA04(a1, a2, a3, 0, a4);
}

uint64_t sub_1BDE0C638@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t CROrderedTree.append(_:inParent:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[19];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v8 = a3[2];
  v7 = a3[3];
  v28 = a3[4];
  v29 = v7;
  v34 = type metadata accessor for TreeNode(0, v8, v7, v28);
  v30 = *(_QWORD *)(v34 - 8);
  v9 = MEMORY[0x1E0C80A78](v34);
  v33 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v27[18] = (char *)v27 - v12;
  MEMORY[0x1E0C80A78](v11);
  v27[13] = (char *)v27 - v13;
  v14 = sub_1BE1B2EE8();
  v15 = MEMORY[0x1E0C80A78](v14);
  v27[17] = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v27[15] = (char *)v27 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v20 = MEMORY[0x1E0C80A78](v19);
  v32 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v27[12] = (char *)v27 - v23;
  MEMORY[0x1E0C80A78](v22);
  v27[14] = (char *)v27 - v24;
  v25 = v3[3];
  v35 = *v3;
  v36 = *(_OWORD *)(v3 + 1);
  v37 = v25;
  result = sub_1BE0DF4D8(a1, a2, a3);
  if ((result & 1) != 0)
  {
    v31 = a1;
    v27[7] = a3;
    sub_1BE0DF958(a1, a3);
  }
  return result;
}

uint64_t sub_1BDE0CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v6 = a4;
  v9 = type metadata accessor for TreeNode(255, a4, a5, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))((char *)&v15 - v12, a1, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(&v13[*(int *)(TupleTypeMetadata2 + 48)], a2, v9);
  LOBYTE(v6) = sub_1BE1B2798();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, TupleTypeMetadata2);
  return v6 & 1;
}

uint64_t sub_1BDE0D050()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE0D060()
{
  return sub_1BE1B29D8();
}

uint64_t sub_1BDE0D06C()
{
  return swift_deallocObject();
}

uint64_t CROrderedTree.children(of:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  v4 = a2[2];
  v5 = sub_1BE1B2EE8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - v7;
  v9 = type metadata accessor for TreeNode(0, v4, a2[3], a2[4]);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - v11;
  v13 = *(_QWORD *)(v2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v5);
  sub_1BE17C5BC((uint64_t)v8, v4, v12);
  v14 = sub_1BE1B2A5C();
  v15 = MEMORY[0x1C3B7DF54](&unk_1BE1C8254, v9);
  MEMORY[0x1C3B7C58C](&v18, v12, v13, v9, v14, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  result = v18;
  if (!v18)
    return sub_1BE1B29D8();
  return result;
}

unint64_t sub_1BDE0D1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1BE1B26D8();
  return sub_1BDE0D218(a1, v6, a2, a3);
}

unint64_t sub_1BDE0D218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  _QWORD v18[2];

  v5 = v4;
  v18[0] = a1;
  v18[1] = a4;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = sub_1BE1B2798();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

_UNKNOWN **sub_1BDE0D330()
{
  return &protocol witness table for CROrderedTree<A>.MergeableDelta;
}

uint64_t sub_1BDE0D33C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1BDE0D344()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1BDE0D37C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1BDE0D3D0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *sub_1BDE0D468(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BDE0D4BC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1BDE0D504(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CROrderedTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CROrderedTree);
}

uint64_t sub_1BDE0D550(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1BDE0CF38(a1, a2, v2[5], v2[2], v2[3], v2[4]) & 1;
}

uint64_t sub_1BDE0D570()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE0D580()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE0D590@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t sub_1BDE0D5B8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1BDE0D5C8()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE0D5D8()
{
  return swift_deallocObject();
}

uint64_t sub_1BDE0D5E8(uint64_t a1, uint64_t a2)
{
  return sub_1BDE0D550(a1, a2) & 1;
}

uint64_t sub_1BDE0D608(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v36 = *(_QWORD *)(a1 + 16);
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1BDE227AC(0, v1, 0);
  v2 = v38;
  result = sub_1BDE24994(a1);
  v4 = result;
  v6 = v36;
  v5 = a1;
  v8 = v7;
  v9 = 0;
  v11 = v10 & 1;
  v12 = a1 + 64;
  v13 = v7;
  v14 = a1 + 96;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v5 + 32))
  {
    v16 = (unint64_t)v4 >> 6;
    if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
      goto LABEL_28;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v8)
      goto LABEL_29;
    v17 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v4);
    v19 = *(_QWORD *)(v38 + 16);
    v18 = *(_QWORD *)(v38 + 24);
    if (v19 >= v18 >> 1)
    {
      v34 = v13;
      v35 = v12;
      v33 = v14;
      v32 = v11;
      result = sub_1BDE227AC(v18 > 1, v19 + 1, 1);
      v11 = v32;
      v14 = v33;
      v13 = v34;
      v12 = v35;
      v6 = v36;
      v5 = a1;
    }
    *(_QWORD *)(v38 + 16) = v19 + 1;
    *(_QWORD *)(v38 + 8 * v19 + 32) = v17;
    v15 = 1 << *(_BYTE *)(v5 + 32);
    if (v4 >= v15)
      goto LABEL_30;
    v20 = *(_QWORD *)(v12 + 8 * v16);
    if ((v20 & (1 << v4)) == 0)
      goto LABEL_31;
    if (*(_DWORD *)(v5 + 36) != (_DWORD)v8)
      goto LABEL_32;
    v21 = v20 & (-2 << (v4 & 0x3F));
    if (v21)
    {
      v15 = __clz(__rbit64(v21)) | v4 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = v16 + 1;
      v23 = (unint64_t)(v15 + 63) >> 6;
      if (v16 + 1 < v23)
      {
        v24 = *(_QWORD *)(v12 + 8 * v22);
        if (!v24)
        {
          v22 = v16 + 2;
          if (v16 + 2 >= v23)
            goto LABEL_4;
          v24 = *(_QWORD *)(v12 + 8 * v22);
          if (!v24)
          {
            v22 = v16 + 3;
            if (v16 + 3 >= v23)
              goto LABEL_4;
            v24 = *(_QWORD *)(v12 + 8 * v22);
            if (!v24)
            {
              while (v23 - 4 != v16)
              {
                v24 = *(_QWORD *)(v14 + 8 * v16++);
                if (v24)
                {
                  v25 = v4;
                  v26 = v12;
                  v27 = v13;
                  v28 = v14;
                  result = sub_1BDE27EC8(v25, v8, v11 & 1);
                  v14 = v28;
                  v13 = v27;
                  v12 = v26;
                  v6 = v36;
                  v5 = a1;
                  v22 = v16 + 3;
                  goto LABEL_17;
                }
              }
              v29 = v12;
              v30 = v13;
              v31 = v14;
              result = sub_1BDE27EC8(v4, v8, v11 & 1);
              v14 = v31;
              v13 = v30;
              v12 = v29;
              v6 = v36;
              v5 = a1;
              goto LABEL_4;
            }
          }
        }
LABEL_17:
        v15 = __clz(__rbit64(v24)) + (v22 << 6);
      }
    }
LABEL_4:
    v11 = 0;
    ++v9;
    v8 = v13;
    v4 = v15;
    if (v9 == v6)
      return v2;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1BDE0D8B0(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v26 = MEMORY[0x1E0DEE9D8];
  sub_1BDE227AC(0, v1, 0);
  v2 = v26;
  result = sub_1BE19A380(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v22 = v1;
  v23 = v5;
  v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_26;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = *v12;
    v14 = v12[1];
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v6 + 8);
    sub_1BDDB6CA4(*v12, v14);
    swift_retain();
    sub_1BDDB6CA4(v13, v14);
    swift_retain();
    sub_1BDDB796C(v13, v14);
    swift_release();
    sub_1BDDB796C(v13, v14);
    result = swift_release();
    v16 = *(_QWORD *)(v26 + 16);
    v15 = *(_QWORD *)(v26 + 24);
    if (v16 >= v15 >> 1)
      result = sub_1BDE227AC(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v26 + 16) = v16 + 1;
    *(_QWORD *)(v26 + 8 * v16 + 32) = v25;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_27;
    v8 = a1 + 64;
    v17 = *(_QWORD *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_28;
    v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23)
      goto LABEL_29;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v22;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (unint64_t)(v9 + 63) >> 6;
      v10 = v22;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (!v21)
        {
          v19 = v11 + 2;
          if (v11 + 2 >= v20)
            goto LABEL_4;
          v21 = *(_QWORD *)(v24 + 8 * v19);
          if (!v21)
          {
            while (v20 - 3 != v11)
            {
              v21 = *(_QWORD *)(a1 + 88 + 8 * v11++);
              if (v21)
              {
                v19 = v11 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        v9 = __clz(__rbit64(v21)) + (v19 << 6);
      }
    }
LABEL_4:
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return v2;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t CREncoder.__allocating_init(_:version:)(uint64_t a1, char *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = swift_allocObject();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = MEMORY[0x1E0DEE9E0];
  v7 = *a2;
  *(_QWORD *)(result + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 40) = v5;
  *(_QWORD *)(result + 48) = v5;
  *(_QWORD *)(result + 56) = v6;
  *(_QWORD *)(result + 64) = v5;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = v5;
  *(_BYTE *)(result + 72) = v7;
  return result;
}

uint64_t sub_1BDE0DB8C(void *a1, char *a2)
{
  uint64_t *v2;

  return sub_1BDE0DBB0(a1, *a2, *v2, sub_1BDE191E4);
}

uint64_t sub_1BDE0DBB0(void *a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  type metadata accessor for CREncoder();
  v8 = swift_allocObject();
  v9 = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 48) = v9;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v9;
  *(_BYTE *)(v8 + 72) = a2;
  v11 = a1;
  v12 = a4(a3);
  swift_release();
  return v12;
}

uint64_t CRDT.serializedData(_:version:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE0E7D4(a1, a2, a3, a4, sub_1BDE1B030);
}

uint64_t sub_1BDE0DC78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1BDE0E8D8(a1, a2, (void (*)(uint64_t))CRString.init(from:), a3);
}

char *sub_1BDE0DC94(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  char *v3;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  char v24;

  v5 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v22 - v13;
  v15 = (char *)&v22 + *(int *)(v12 + 64) - v13;
  sub_1BDDD1368((uint64_t)&v22 - v13, (uint64_t)v15, a1, a2);
  if (v3)
  {
    sub_1BDDB796C(a1, a2);
  }
  else
  {
    v17 = v16;
    v23 = a3;
    *((_WORD *)v14 + 1) = v16;
    v18 = (uint64_t)&v11[*(int *)(v8 + 64)];
    v19 = *v14;
    *v11 = *v14;
    *((_WORD *)v11 + 1) = v16;
    sub_1BDD9C318((uint64_t)v15, v18, type metadata accessor for Proto_Document);
    v24 = v19;
    if (qword_1ED6F3C80 != -1)
      swift_once();
    v20 = qword_1ED6F8BA8;
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    sub_1BDD8E57C(&v24, v17, v18, 0, v20);
    v5 = sub_1BDE0EF74((uint64_t)v15, v23);
    swift_release();
    sub_1BDDB796C(a1, a2);
    sub_1BDD86E30((uint64_t)v14, qword_1ED6F29D8);
  }
  return v5;
}

uint64_t CRDT.init(serializedData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1BDDCB820(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t))sub_1BDE0F418, a5);
}

uint64_t sub_1BDE0DEAC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  result = 0;
  while (*(unsigned __int8 *)(a2 + 32 + result) != a1)
  {
    if (v2 == ++result)
      return 0;
  }
  return result;
}

uint64_t sub_1BDE0DEF4(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = a1;
  if (*(unsigned __int16 *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(unsigned __int16 *)(a2 + 34 + 2 * result++);
    if (v6 == v3)
      return result;
  }
  return 0;
}

uint64_t sub_1BDE0DF58(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedTree<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE0DFB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedTree<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

void sub_1BDE0E030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = sub_1BE1B2108();
  MEMORY[0x1E0C80A78](v5);
  __asm { BR              X10 }
}

uint64_t sub_1BDE0E0B4()
{
  _BYTE *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (BYTE6(v1) >= 8uLL)
  {
    if (qword_1ED6F31A0 != -1)
      swift_once();
    __asm { BR              X10 }
  }
  *v0 = 1;
  type metadata accessor for Proto_Document(0);
  *(_QWORD *)(v4 - 96) = 0;
  *(_OWORD *)(v4 - 128) = 0u;
  *(_OWORD *)(v4 - 112) = 0u;
  sub_1BDDB6CA4(v2, v1);
  sub_1BE1B20FC();
  sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
  result = sub_1BE1B2270();
  if (!v3)
    return 0;
  return result;
}

BOOL static CRCodableVersion.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void static CRCodableVersion.latest.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

BOOL static CRCodableVersion.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t CRCodableVersion.hash(into:)()
{
  return sub_1BE1B3704();
}

uint64_t CRCodableVersion.hashValue.getter()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

BOOL sub_1BDE0E384(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BDE0E398()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

uint64_t sub_1BDE0E3DC()
{
  return sub_1BE1B3704();
}

uint64_t sub_1BDE0E404()
{
  sub_1BE1B36F8();
  sub_1BE1B3704();
  return sub_1BE1B371C();
}

BOOL sub_1BDE0E444(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1BDE0E458(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1BDE0E46C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1BDE0E480(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void CRDT.init(_:serializedData:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 24))(a2, a3, a4);

}

uint64_t CRDT.serializedData()(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return CRDT.serializedData(version:)(&v3, a1, a2);
}

uint64_t CRDT.serializedData(version:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[2];
  uint64_t v14;

  v6 = *a1;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v7 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v13);
  sub_1BDD86E30((uint64_t)v13, qword_1ED6F3DD0);
  type metadata accessor for CREncoder();
  v8 = swift_allocObject();
  v9 = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v8 + 40) = v9;
  *(_QWORD *)(v8 + 48) = v9;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v9;
  *(_BYTE *)(v8 + 72) = v6;
  v11 = sub_1BDE1B030(v3, a2, a3);
  swift_release();
  return v11;
}

uint64_t CRDT.serializedData(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE0E6F8(a1, a2, a3, sub_1BDE1B030);
}

void CRValue.init(_:serializedData:)(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  CRValue.init(serializedData:)(a2, a3, a4, a5, a6);

}

uint64_t CRValue.serializedData()(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v4 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v7);
  sub_1BDD86E30((uint64_t)v7, qword_1ED6F3DD0);
  v5 = CRValue.serializedData(_:)(v4, a1, a2);

  return v5;
}

uint64_t CRValue.serializedData(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE0E6F8(a1, a2, a3, sub_1BDE1BD98);
}

uint64_t sub_1BDE0E6F8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  type metadata accessor for CREncoder();
  v9 = swift_allocObject();
  v10 = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v9 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 56) = v11;
  *(_QWORD *)(v9 + 64) = v10;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = v10;
  *(_BYTE *)(v9 + 72) = 1;
  v12 = a1;
  v13 = a4(v4, a2, a3);
  swift_release();
  return v13;
}

uint64_t CRValue.serializedData(_:version:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE0E7D4(a1, a2, a3, a4, sub_1BDE1BD98);
}

uint64_t sub_1BDE0E7D4(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v10 = *a2;
  type metadata accessor for CREncoder();
  v11 = swift_allocObject();
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v11 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v11 + 40) = v12;
  *(_QWORD *)(v11 + 48) = v12;
  *(_QWORD *)(v11 + 56) = v13;
  *(_QWORD *)(v11 + 64) = v12;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v12;
  *(_BYTE *)(v11 + 72) = v10;
  v14 = a1;
  v15 = a5(v5, a3, a4);
  swift_release();
  return v15;
}

void CRDT<>.init(_:serializedData:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 24))(a2, a3, a4);

}

uint64_t sub_1BDE0E8D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int16 v15;
  uint64_t result;
  __int16 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  char v27;

  v24 = a4;
  v25 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v21 - v12;
  v14 = (char *)&v21 + *(int *)(v11 + 64) - v12;
  sub_1BDDD1368((uint64_t)&v21 - v12, (uint64_t)v14, a1, a2);
  if (v4)
    return sub_1BDDB796C(a1, a2);
  v17 = v15;
  v23 = a2;
  *((_WORD *)v13 + 1) = v15;
  v18 = (uint64_t)&v10[*(int *)(v7 + 64)];
  v19 = *v13;
  *v10 = *v13;
  *((_WORD *)v10 + 1) = v15;
  v22 = v14;
  sub_1BDD9C318((uint64_t)v14, v18, type metadata accessor for Proto_Document);
  v27 = v19;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v20 = qword_1ED6F8BA8;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1BDD8E57C(&v27, v17, v18, 0, v20);
  sub_1BDE0F1C4((uint64_t)v22, v25);
  swift_release();
  sub_1BDDB796C(a1, v23);
  result = sub_1BDD86E30((uint64_t)v13, qword_1ED6F29D8);
  *v24 = v26;
  return result;
}

uint64_t CRDT<>.init(serializedData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char *v18;
  __int16 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v33 = a5;
  v34 = a4;
  v35 = a3;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (unsigned __int8 *)&v30 - v16;
  v18 = (char *)&v30 + *(int *)(v15 + 64) - v16;
  sub_1BDDD1368((uint64_t)&v30 - v16, (uint64_t)v18, a1, a2);
  if (v5)
    return sub_1BDDB796C(a1, a2);
  v30 = v10;
  v31 = 0;
  v32 = v8;
  v21 = v35;
  *((_WORD *)v17 + 1) = v19;
  v22 = (uint64_t)&v14[*(int *)(v11 + 64)];
  v23 = *v17;
  *v14 = *v17;
  *((_WORD *)v14 + 1) = v19;
  v24 = v19;
  sub_1BDD9C318((uint64_t)v18, v22, type metadata accessor for Proto_Document);
  v36 = v23;
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v25 = qword_1ED6F8BA8;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v26 = v31;
  sub_1BDD8E57C(&v36, v24, v22, 0, v25);
  v27 = v32;
  if (v26)
  {
    sub_1BDDB796C(a1, a2);
    return sub_1BDD86E30((uint64_t)v17, qword_1ED6F29D8);
  }
  else
  {
    v28 = (uint64_t)v18;
    v29 = v30;
    sub_1BDE0F418(v21, v28, v21, v34);
    swift_release();
    sub_1BDDB796C(a1, a2);
    sub_1BDD86E30((uint64_t)v17, qword_1ED6F29D8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v33, v29, v21);
  }
}

void PartialCRDT.init(_:serializedData:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  PartialCRDT.init(serializedData:)(a2, a3, a4, a5);

}

uint64_t PartialCRDT.init(serializedData:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  sub_1BDDB6CA4(a1, a2);
  if (qword_1ED6F3C80 != -1)
    swift_once();
  v8 = qword_1ED6F8BA8;
  type metadata accessor for CRDecodeContext();
  v9 = (_QWORD *)swift_allocObject();
  v10 = MEMORY[0x1E0DEE9E0];
  v9[2] = MEMORY[0x1E0DEE9E0];
  v9[3] = v10;
  v9[4] = v8;
  type metadata accessor for CRDecoder(0);
  v11 = swift_allocObject();
  swift_retain();
  sub_1BDE11844(a1, a2, (uint64_t)v9);
  if (!v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + 8))(v11, a3);
  return sub_1BDDB796C(a1, a2);
}

void *PartialCRDT.deltaSerializedData(_:version:)(void *result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a2;
  if (*a2)
  {
    v8 = result;
    type metadata accessor for CREncoder();
    v9 = swift_allocObject();
    v10 = MEMORY[0x1E0DEE9D8];
    v11 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v9 + 32) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v9 + 40) = v10;
    *(_QWORD *)(v9 + 48) = v10;
    *(_QWORD *)(v9 + 56) = v11;
    *(_QWORD *)(v9 + 64) = v10;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = v10;
    *(_BYTE *)(v9 + 72) = v5;
    v12 = sub_1BDE1B690(v8, v4, a3, a4);
    swift_release();
    return (void *)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CRDecoder.version.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 49);
}

char *sub_1BDE0EF74(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v4 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_CRDT(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v20 - v13;
  v15 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v8, &qword_1ED6F37C8);
  v16 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v8, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F37C8);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v14, type metadata accessor for Proto_CRDT);
      sub_1BDD9C318((uint64_t)v14, (uint64_t)v12, type metadata accessor for Proto_CRDT);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      v19 = sub_1BDDA1B44((uint64_t)v12, v4);
      swift_release();
      v12 = (char *)a2(v19);
      sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
      return v12;
    }
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Document.OneOf_Root);
  }
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v17 = 0xD000000000000014;
  *(_QWORD *)(v17 + 8) = 0x80000001BE1CD740;
  *(_BYTE *)(v17 + 16) = 0;
  swift_willThrow();
  return v12;
}

uint64_t sub_1BDE0F1C4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v4 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_CRDT(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v20 - v13;
  v15 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v8, &qword_1ED6F37C8);
  v16 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v8, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F37C8);
LABEL_5:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v17 = 0xD000000000000014;
    *(_QWORD *)(v17 + 8) = 0x80000001BE1CD740;
    *(_BYTE *)(v17 + 16) = 0;
    return swift_willThrow();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Document.OneOf_Root);
    goto LABEL_5;
  }
  sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v14, type metadata accessor for Proto_CRDT);
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v12, type metadata accessor for Proto_CRDT);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v19 = sub_1BDDA1B44((uint64_t)v12, v4);
  swift_release();
  a2(v19);
  return sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDE0F418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  v22 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_CRDT(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v22 - v15;
  v17 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1BDD86DEC(v17, (uint64_t)v10, &qword_1ED6F37C8);
  v18 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v10, 1, v18) == 1)
  {
    sub_1BDD86E30((uint64_t)v10, &qword_1ED6F37C8);
LABEL_5:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v19 = 0xD000000000000014;
    *(_QWORD *)(v19 + 8) = 0x80000001BE1CD740;
    *(_BYTE *)(v19 + 16) = 0;
    return swift_willThrow();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document.OneOf_Root);
    goto LABEL_5;
  }
  sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v16, type metadata accessor for Proto_CRDT);
  sub_1BDD9C318((uint64_t)v16, (uint64_t)v14, type metadata accessor for Proto_CRDT);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  v21 = sub_1BDDA1B44((uint64_t)v14, v5);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v21, v22);
  return sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDE0F688@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _OWORD *v27;

  v27 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BDDB51D0(a1);
  if (!v3)
  {
    v26 = v10;
    v18 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
    swift_beginAccess();
    sub_1BDD86DEC(v18, (uint64_t)v13, &qword_1ED6F37C8);
    v19 = type metadata accessor for Proto_Document.OneOf_Root(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v13, 1, v19) == 1)
    {
      sub_1BDD86E30((uint64_t)v13, &qword_1ED6F37C8);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v16, type metadata accessor for Proto_Value);
        goto LABEL_10;
      }
      sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_Document.OneOf_Root);
    }
    sub_1BE1B20E4();
    v20 = *(int *)(v14 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)&v16[v20] = qword_1ED6F2708;
    swift_retain();
LABEL_10:
    v21 = *(_QWORD *)&v16[*(int *)(v14 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v21, (uint64_t)v7, &qword_1ED6F26F0);
    v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v7, 1, v22) == 1)
    {
      sub_1BDD86E30((uint64_t)v7, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        v23 = v26;
        sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v26, type metadata accessor for Proto_Version);
        v24 = v27;
LABEL_16:
        sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_Value);
        swift_retain();
        return sub_1BDDA9DA0(v23, v2, v24);
      }
      sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v23 = v26;
    v24 = v27;
    v25 = MEMORY[0x1E0DEE9D8];
    *v26 = MEMORY[0x1E0DEE9D8];
    v23[1] = v25;
    sub_1BE1B20E4();
    goto LABEL_16;
  }
  return result;
}

double sub_1BDE0F9D8(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  char v42[24];
  char *v43;

  v39 = a1;
  v38 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3CD0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_Version(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v43;
  sub_1BDE0E030((uint64_t)v42, (uint64_t)v18, a3, a4);
  if (!v19)
  {
    v43 = v8;
    v21 = v40;
    sub_1BDDB51D0((uint64_t)v18);
    v22 = (uint64_t)v18;
    v23 = *(int *)(v16 + 20);
    v37 = v22;
    v24 = *(_QWORD *)(v22 + v23)
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    sub_1BDD86DEC(v24, (uint64_t)v11, &qword_1ED6F37A8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      v25 = MEMORY[0x1E0DEE9D8];
      *v15 = MEMORY[0x1E0DEE9D8];
      v15[1] = v25;
      sub_1BE1B20E4();
      sub_1BDD86E30((uint64_t)v11, &qword_1ED6F37A8);
    }
    else
    {
      sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Proto_Version);
    }
    v26 = v37;
    swift_retain();
    sub_1BDDA9DA0(v15, v21, &v41);
    v40 = v41;
    v27 = (uint64_t *)(*(_QWORD *)(v26 + v23)
                    + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
    swift_beginAccess();
    v29 = *v27;
    v28 = v27[1];
    sub_1BDDB6CA4(v29, v28);
    v30 = (uint64_t)v43;
    sub_1BDD92AA8(v29, v28);
    v31 = sub_1BE1B1F58();
    v32 = *(_QWORD *)(v31 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31);
    v35 = v38;
    v34 = v39;
    if (v33 == 1)
    {
      sub_1BE1B1F4C();
      sub_1BDD9C3E0(v37, type metadata accessor for Proto_Document);
      sub_1BDD86E30(v30, &qword_1ED6F3CD0);
    }
    else
    {
      sub_1BDD9C3E0(v37, type metadata accessor for Proto_Document);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v35, v30, v31);
    }
    result = *(double *)&v40;
    *v34 = v40;
  }
  return result;
}

void sub_1BDE0FD6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;

  v15 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v18 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDD1368((uint64_t)&v19, (uint64_t)v17, a1, a2);
  if (!v7)
  {
    sub_1BDE0FE60((uint64_t)v17, a3, a4, a5, a6, a7);
    sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Document);
  }
}

void sub_1BDE0FE60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v95 = a5;
  v94 = a4;
  v104 = a3;
  v93 = a2;
  v84 = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v7);
  v89 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Proto_CRDT(0);
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v86 = (char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1E0C80A78](v92);
  v101 = (char *)v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  MEMORY[0x1E0C80A78](v11);
  v97 = (uint64_t)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Proto_KeyPath(0);
  v103 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v96 = (_QWORD *)((char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v99 = type metadata accessor for Proto_Reference(0);
  v91 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v102 = (uint64_t)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v85 = (char *)v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v90 = (uint64_t)v76 - v19;
  MEMORY[0x1E0C80A78](v18);
  v98 = (uint64_t)v76 - v20;
  v21 = type metadata accessor for Proto_Version(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)v76 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)v76 - v29;
  v31 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)v76 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = MEMORY[0x1E0DEE9E0];
  v34 = v105;
  sub_1BDDB51D0(a1);
  if (v34)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v82 = v22;
  v83 = v30;
  v81 = v28;
  v80 = v25;
  v105 = v21;
  sub_1BDD9C318(a1, (uint64_t)v33, type metadata accessor for Proto_Document);
  type metadata accessor for CRProtoDecodeContext();
  swift_allocObject();
  v35 = v106;
  swift_retain();
  v36 = v104;
  swift_retain();
  v37 = a1;
  *(_QWORD *)(v35 + 16) = sub_1BE1161AC((uint64_t)v33, v35, v36);
  swift_release();
  v38 = *(int *)(v31 + 20);
  v39 = *(_QWORD *)(a1 + v38)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  v40 = v39;
  v41 = v98;
  sub_1BDD86DEC(v40, v98, &qword_1ED6F37A8);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
  v43 = v105;
  if (v42(v41, 1, v105) == 1)
  {
    v44 = MEMORY[0x1E0DEE9D8];
    v45 = v83;
    *v83 = MEMORY[0x1E0DEE9D8];
    v45[1] = v44;
    sub_1BE1B20E4();
    sub_1BDD86E30(v41, &qword_1ED6F37A8);
  }
  else
  {
    v45 = v83;
    sub_1BDDA2E8C(v41, (uint64_t)v83, type metadata accessor for Proto_Version);
  }
  v46 = v103;
  swift_retain();
  sub_1BDDA9DA0(v45, v35, &v109);
  v82 = *((_QWORD *)&v109 + 1);
  v83 = (_QWORD *)v109;
  v47 = *(_QWORD *)(v37 + v38)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  swift_beginAccess();
  v48 = v47;
  v49 = v90;
  sub_1BDD86DEC(v48, v90, &qword_1ED6F37A8);
  v79 = v42;
  if (v42(v49, 1, v43) == 1)
  {
    v50 = MEMORY[0x1E0DEE9D8];
    v51 = v81;
    *v81 = MEMORY[0x1E0DEE9D8];
    v51[1] = v50;
    sub_1BE1B20E4();
    sub_1BDD86E30(v49, &qword_1ED6F37A8);
  }
  else
  {
    v51 = v81;
    sub_1BDDA2E8C(v49, (uint64_t)v81, type metadata accessor for Proto_Version);
  }
  v52 = v91;
  swift_retain();
  sub_1BDDA9DA0(v51, v35, &v108);
  v53 = v100;
  v91 = 0;
  v77 = *((_QWORD *)&v108 + 1);
  v78 = v108;
  v54 = *(_QWORD *)(v37 + v38)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences;
  swift_beginAccess();
  v55 = *(_QWORD *)v54;
  if (*(_QWORD *)(*(_QWORD *)v54 + 16))
  {
    v56 = v55 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    v98 = *(_QWORD *)(v52 + 72);
    v76[1] = v55;
    swift_bridgeObjectRetain();
    v57 = v99;
    v104 = v56;
    v58 = v102;
    sub_1BDD9C318(v56, v102, type metadata accessor for Proto_Reference);
    v59 = *(_QWORD *)(v58 + *(int *)(v57 + 20))
        + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
    swift_beginAccess();
    v60 = v59;
    v61 = v97;
    sub_1BDD86DEC(v60, v97, &qword_1ED6F3790);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v61, 1, v53) == 1)
    {
      v62 = v96;
      *v96 = MEMORY[0x1E0DEE9D8];
      v62[1] = sub_1BE1B20CC();
      v62[2] = v63;
      sub_1BE1B20E4();
      sub_1BDD86E30(v61, &qword_1ED6F3790);
    }
    else
    {
      v62 = v96;
      sub_1BDDA2E8C(v61, (uint64_t)v96, type metadata accessor for Proto_KeyPath);
    }
    __asm { BR              X9 }
  }
  v64 = v106;
  v65 = *(_QWORD *)(v106 + 16);
  v66 = v84;
  if (!v65)
  {
    __break(1u);
    goto LABEL_24;
  }
  v67 = *(void (**)(uint64_t))(*(_QWORD *)v65 + 168);
  swift_retain();
  v68 = v91;
  v67(v64);
  if (v68)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  swift_release();
  if (!*(_QWORD *)(v64 + 16))
  {
LABEL_24:
    __break(1u);
    JUMPOUT(0x1BDE10ED0);
  }
  swift_beginAccess();
  v69 = swift_bridgeObjectRetain();
  v70 = sub_1BDE10EE0(v69, (uint64_t)&v110);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v70 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C4E0);
    v71 = sub_1BE1B3260();
  }
  else
  {
    v71 = MEMORY[0x1E0DEE9E0];
  }
  v107 = v71;
  sub_1BDE24478(v70, 1, &v107);
  v72 = v107;
  v73 = v110;
  v74 = v82;
  *v66 = v83;
  v66[1] = v74;
  v75 = v77;
  v66[2] = v78;
  v66[3] = v75;
  v66[4] = v73;
  v66[5] = v72;
  v66[6] = MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1BDE10EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v30;
  int64_t v31;

  v26 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v4)
    {
      v30 = (v4 - 1) & v4;
      v31 = v6;
      v7 = __clz(__rbit64(v4)) | (v6 << 6);
      goto LABEL_24;
    }
    v8 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v8 >= v27)
      goto LABEL_34;
    v9 = *(_QWORD *)(v26 + 8 * v8);
    v10 = v6 + 1;
    if (!v9)
    {
      v10 = v6 + 2;
      if (v6 + 2 >= v27)
        goto LABEL_34;
      v9 = *(_QWORD *)(v26 + 8 * v10);
      if (!v9)
      {
        v10 = v6 + 3;
        if (v6 + 3 >= v27)
          goto LABEL_34;
        v9 = *(_QWORD *)(v26 + 8 * v10);
        if (!v9)
        {
          v10 = v6 + 4;
          if (v6 + 4 >= v27)
            goto LABEL_34;
          v9 = *(_QWORD *)(v26 + 8 * v10);
          if (!v9)
            break;
        }
      }
    }
LABEL_23:
    v30 = (v9 - 1) & v9;
    v31 = v10;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_24:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 48 * v7);
    v16 = *v15;
    v17 = v15[2];
    v18 = v15[3];
    v19 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    sub_1BDDB6CA4(*v12, v14);
    if (v19)
    {
      sub_1BDDB6CA4(v13, v14);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDB7F0C(v13, v14);
      v21 = v20;
      sub_1BDDB796C(v13, v14);
      if ((v21 & 1) != 0)
      {
        sub_1BDDB796C(v13, v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_release();
        goto LABEL_5;
      }
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    result = sub_1BDDB6CA4(v13, v14);
    if (!v16)
      goto LABEL_37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1BDDB796C(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1BDE06E40(0, v25[2] + 1, 1, v25);
      v25 = (_QWORD *)result;
    }
    v23 = v25[2];
    v22 = v25[3];
    if (v23 >= v22 >> 1)
    {
      result = (uint64_t)sub_1BDE06E40((_QWORD *)(v22 > 1), v23 + 1, 1, v25);
      v25 = (_QWORD *)result;
    }
    v25[2] = v23 + 1;
    v24 = &v25[5 * v23];
    v24[4] = v13;
    v24[5] = v14;
    v24[6] = v17;
    v24[7] = v18;
    v24[8] = v16;
LABEL_5:
    v6 = v31;
    v4 = v30;
  }
  v11 = v6 + 5;
  if (v6 + 5 >= v27)
  {
LABEL_34:
    swift_release();
    return (uint64_t)v25;
  }
  v9 = *(_QWORD *)(v26 + 8 * v11);
  if (v9)
  {
    v10 = v6 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v27)
      goto LABEL_34;
    v9 = *(_QWORD *)(v26 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_23;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1BDE11268()
{
  return sub_1BDE11568((void (*)(uint64_t))type metadata accessor for CRDecoder.CRValueContainer, 0xD000000000000017, 0x80000001BE1CD110);
}

uint64_t sub_1BDE1129C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v4, (uint64_t)v3, &qword_1ED6F3728);
  v5 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  sub_1BDD86E30((uint64_t)v3, &qword_1ED6F3728);
  if ((_DWORD)v4 == 1)
  {
    sub_1BDDFCAFC();
    v6 = swift_allocError();
    *(_QWORD *)v7 = 0xD000000000000014;
    *(_QWORD *)(v7 + 8) = 0x80000001BE1CD0F0;
    *(_BYTE *)(v7 + 16) = 0;
    v8 = v6;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 32) = 1;
    swift_retain();
  }
  return v8;
}

uint64_t sub_1BDE113F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v4, (uint64_t)v3, &qword_1ED6F3728);
  v5 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  sub_1BDD86E30((uint64_t)v3, &qword_1ED6F3728);
  if ((_DWORD)v4 == 1)
  {
    sub_1BDDFCAFC();
    v6 = swift_allocError();
    *(_QWORD *)v7 = 0xD00000000000001ELL;
    *(_QWORD *)(v7 + 8) = 0x80000001BE1CD3A0;
    *(_BYTE *)(v7 + 16) = 0;
    v8 = v6;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTKeyedContainer();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v0;
    swift_retain();
  }
  return v8;
}

uint64_t sub_1BDE11534()
{
  return sub_1BDE11568((void (*)(uint64_t))type metadata accessor for CRDecoder.CRValueKeyedContainer, 0xD000000000000021, 0x80000001BE1CD3C0);
}

uint64_t sub_1BDE11568(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v10, (uint64_t)v9, &qword_1ED6F3770);
  v11 = type metadata accessor for Proto_Value(0);
  LODWORD(v10) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11);
  v12 = sub_1BDD86E30((uint64_t)v9, &qword_1ED6F3770);
  if ((_DWORD)v10 == 1)
  {
    sub_1BDDFCAFC();
    v13 = swift_allocError();
    *(_QWORD *)v14 = a2;
    *(_QWORD *)(v14 + 8) = a3;
    *(_BYTE *)(v14 + 16) = 0;
    v15 = v13;
    swift_willThrow();
  }
  else
  {
    a1(v12);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v3;
    swift_retain();
  }
  return v15;
}

uint64_t sub_1BDE116B0(uint64_t *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = MEMORY[0x1E0DEE9D8];
  v6 = *a2;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v5;
  v7 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 32) = v5;
  *(_QWORD *)(v2 + 40) = v7;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  v8 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v9 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v11 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  sub_1BDD928C0(*a1, a1[1]);
  if (v3)
  {
    type metadata accessor for CRDecoder(0);
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Constants);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDD86E30(v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
    sub_1BDD86E30(v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v2 + 24) = v12;
    swift_bridgeObjectRelease();
    v13 = a1[2];
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0((uint64_t)a1, type metadata accessor for Proto_Constants);
    *(_QWORD *)(v2 + 32) = v13;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v2 + 49) = v6;
  }
  return v2;
}

uint64_t sub_1BDE11844(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int EnumCaseMultiPayload;
  uint64_t v47;
  uint64_t v48;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v56 = a2;
  v55 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v5);
  v53 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v7);
  v54 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(qword_1ED6F29D8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v52 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v50 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v50 - v15;
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v17;
  v18 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 32) = v17;
  *(_QWORD *)(v3 + 40) = v18;
  *(_BYTE *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  v19 = v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v20 = type metadata accessor for Proto_CRDT(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v19, 1, 1, v20);
  v22 = v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v23 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = v9;
  v25 = (uint64_t)&v16[*(int *)(v9 + 64)];
  v26 = v57;
  v27 = v56;
  sub_1BDDD1368((uint64_t)v16, v25, a1, v56);
  v57 = v26;
  if (!v26)
  {
    v50 = v21;
    v51 = a1;
    *((_WORD *)v16 + 1) = v28;
    v29 = v24;
    v30 = (uint64_t)&v14[*(int *)(v24 + 64)];
    v31 = *v16;
    *v14 = *v16;
    *((_WORD *)v14 + 1) = v28;
    sub_1BDD9C318(v25, v30, type metadata accessor for Proto_Document);
    *(_BYTE *)(v3 + 49) = v31;
    sub_1BDD9C3E0(v30, type metadata accessor for Proto_Document);
    v32 = v57;
    sub_1BDDB51D0(v25);
    v57 = v32;
    v33 = (uint64_t)v16;
    if (v32)
    {
      swift_release();
      swift_release();
      sub_1BDDB796C(v51, v56);
      sub_1BDD86E30((uint64_t)v16, qword_1ED6F29D8);
      return v3;
    }
    *(_QWORD *)(v3 + 16) = v55;
    swift_retain();
    swift_release();
    v34 = v52;
    v35 = &v52[*(int *)(v29 + 64)];
    *v52 = *v16;
    *((_WORD *)v34 + 1) = *((_WORD *)v16 + 1);
    sub_1BDD9C318(v25, (uint64_t)v35, type metadata accessor for Proto_Document);
    v36 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
    v52 = v35;
    v37 = *(_QWORD *)&v35[v36]
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
    swift_beginAccess();
    v38 = v37;
    v39 = v53;
    sub_1BDD86DEC(v38, v53, &qword_1ED6F37C8);
    v40 = type metadata accessor for Proto_Document.OneOf_Root(0);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v39, 1, v40);
    v42 = v56;
    if (v41 == 1)
    {
      sub_1BDD86E30(v39, &qword_1ED6F37C8);
      v43 = v51;
      v44 = v54;
      v45 = (_QWORD *)&unk_1ED6F8000;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v44 = v54;
      v45 = &unk_1ED6F8000;
      if (!EnumCaseMultiPayload)
      {
        sub_1BDDA2E8C(v39, v54, type metadata accessor for Proto_CRDT);
        v43 = v51;
LABEL_12:
        swift_release();
        sub_1BDDB796C(v43, v42);
        sub_1BDD86E30(v33, qword_1ED6F29D8);
        sub_1BDD9C3E0((uint64_t)v52, type metadata accessor for Proto_Document);
        v50(v44, 0, 1, v20);
        v48 = v3 + v45[363];
        swift_beginAccess();
        sub_1BDDA1AF4(v44, v48, &qword_1ED6F3728);
        swift_endAccess();
        return v3;
      }
      sub_1BDD9C3E0(v39, type metadata accessor for Proto_Document.OneOf_Root);
      v43 = v51;
    }
    sub_1BE1B20E4();
    v47 = *(int *)(v20 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v44 + v47) = qword_1ED6F2E08;
    swift_retain();
    goto LABEL_12;
  }
  swift_release();
  sub_1BDDB796C(a1, v27);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
  sub_1BDD86E30(v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
  type metadata accessor for CRDecoder(0);
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t sub_1BDE11D48(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE v38[24];

  v36 = a3;
  v37 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v14;
  v15 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 32) = v14;
  *(_QWORD *)(v3 + 40) = v15;
  *(_BYTE *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  v16 = v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v17 = type metadata accessor for Proto_CRDT(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v19 = v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v20 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v34 = a1;
  v21 = v35;
  sub_1BDE0E030((uint64_t)v38, (uint64_t)v13, a1, v37);
  if (!v21)
  {
    v33 = v18;
    v22 = v36;
    *(_BYTE *)(v3 + 49) = v38[0];
    sub_1BDDB51D0((uint64_t)v13);
    v35 = 0;
    *(_QWORD *)(v3 + 16) = v22;
    swift_retain();
    swift_release();
    v23 = *(int *)(v11 + 20);
    v32 = v13;
    v24 = *(_QWORD *)&v13[v23]
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
    swift_beginAccess();
    sub_1BDD86DEC(v24, (uint64_t)v7, &qword_1ED6F37C8);
    v25 = type metadata accessor for Proto_Document.OneOf_Root(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v7, 1, v25) == 1)
    {
      sub_1BDD86E30((uint64_t)v7, &qword_1ED6F37C8);
      v26 = (uint64_t)v10;
      v27 = v17;
    }
    else
    {
      v27 = v17;
      if (!swift_getEnumCaseMultiPayload())
      {
        v26 = (uint64_t)v10;
        sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v10, type metadata accessor for Proto_CRDT);
        v29 = (_QWORD *)&unk_1ED6F8000;
LABEL_10:
        swift_release();
        sub_1BDDB796C(v34, v37);
        sub_1BDD9C3E0((uint64_t)v32, type metadata accessor for Proto_Document);
        v33(v26, 0, 1, v27);
        v30 = v3 + v29[363];
        swift_beginAccess();
        sub_1BDDA1AF4(v26, v30, &qword_1ED6F3728);
        swift_endAccess();
        return v3;
      }
      sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_Document.OneOf_Root);
      v26 = (uint64_t)v10;
    }
    sub_1BE1B20E4();
    v28 = *(int *)(v27 + 20);
    v29 = &unk_1ED6F8000;
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(v26 + v28) = qword_1ED6F2E08;
    swift_retain();
    goto LABEL_10;
  }
  swift_release();
  sub_1BDDB796C(v34, v37);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
  sub_1BDD86E30(v3 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
  type metadata accessor for CRDecoder(0);
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t sub_1BDE12178(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  v6 = MEMORY[0x1E0C80A78](v5);
  v44 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v41 - v8;
  v10 = type metadata accessor for Proto_Constants(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v42 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v41 - v14);
  v16 = MEMORY[0x1E0DEE9D8];
  v43 = *a2;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v16;
  v17 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 32) = v16;
  *(_QWORD *)(v2 + 40) = v17;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  v18 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  v19 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  v21 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = *(int *)(type metadata accessor for Proto_RetainCounts(0) + 20);
  v45 = a1;
  v23 = *(_QWORD *)(a1 + v22)
      + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v9, &qword_1ED6F3290);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v24(v9, 1, v10) == 1)
  {
    *v15 = sub_1BE1B20CC();
    v15[1] = v25;
    v15[2] = v16;
    sub_1BE1B20E4();
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F3290);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v15, type metadata accessor for Proto_Constants);
  }
  v26 = *v15;
  v27 = v15[1];
  sub_1BDDB6CA4(*v15, v27);
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_Constants);
  v28 = v46;
  sub_1BDD928C0(v26, v27);
  if (v28)
  {
    sub_1BDDB796C(v26, v27);
    type metadata accessor for CRDecoder(0);
    sub_1BDD9C3E0(v45, type metadata accessor for Proto_RetainCounts);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BDD86E30(v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
    sub_1BDD86E30(v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v30 = v29;
    sub_1BDDB796C(v26, v27);
    *(_QWORD *)(v2 + 24) = v30;
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v45 + v22);
    v32 = v45;
    v33 = v31
        + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
    swift_beginAccess();
    v34 = v33;
    v35 = v44;
    sub_1BDD86DEC(v34, v44, &qword_1ED6F3290);
    v36 = v24((char *)v35, 1, v10);
    v37 = v42;
    if (v36 == 1)
    {
      *v37 = sub_1BE1B20CC();
      v37[1] = v38;
      v37[2] = MEMORY[0x1E0DEE9D8];
      sub_1BE1B20E4();
      sub_1BDD86E30(v35, &qword_1ED6F3290);
    }
    else
    {
      sub_1BDDA2E8C(v35, (uint64_t)v42, type metadata accessor for Proto_Constants);
    }
    sub_1BDD9C3E0(v32, type metadata accessor for Proto_RetainCounts);
    v39 = v37[2];
    swift_bridgeObjectRetain();
    sub_1BDD9C3E0((uint64_t)v37, type metadata accessor for Proto_Constants);
    *(_QWORD *)(v2 + 32) = v39;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v2 + 49) = v43;
  }
  return v2;
}

uint64_t sub_1BDE12578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v9);
  v10 = *(_QWORD *)(v3 + 16);
  swift_retain();
  return sub_1BDFA224C((uint64_t)v9, v10, a1, a2, a3);
}

uint64_t sub_1BDE12618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v9);
  v10 = *(_QWORD *)(v3 + 16);
  swift_retain();
  return sub_1BDFD0B34((uint64_t)v9, v10, a1, a2, a3);
}

uint64_t sub_1BDE126B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v9);
  v10 = *(_QWORD *)(v3 + 16);
  swift_retain();
  return sub_1BDEFCF20((uint64_t)v9, v10, a1, a2, a3);
}

uint64_t sub_1BDE12760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v9 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v11);
  v12 = *(_QWORD *)(v4 + 16);
  swift_retain();
  return sub_1BE0CD29C((uint64_t)v11, v12, a1, a2, a3, a4);
}

uint64_t sub_1BDE12808@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v15);
  v16 = *(_QWORD *)(v6 + 16);
  swift_retain();
  return sub_1BE1A2548((uint64_t)v15, v16, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BDE128C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v21;
  _QWORD *v22;

  v22 = a3;
  v21 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v15);
  v16 = *(_QWORD *)&v15[*(int *)(v13 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v9, &qword_1ED6F2DF0);
  v17 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v9, 1, v17) == 1)
  {
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v12, type metadata accessor for Proto_OrderedSet);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v18 = *(int *)(v10 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v12[v18] = qword_1ED6EF618;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CRDT);
  v19 = *(_QWORD *)(v4 + 16);
  swift_retain();
  return sub_1BDEE2F04((uint64_t)v12, v19, a1, v21, v22, a4);
}

uint64_t sub_1BDE12AF4@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t **v22;

  v22 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Sequence(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v21 - v10;
  v12 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v14);
  v15 = *(_QWORD *)&v14[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v5, &qword_1ED6F2DF0);
  v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v5, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      sub_1BDDA2E8C((uint64_t)v5, (uint64_t)v11, type metadata accessor for Proto_Sequence);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v17 = *(int *)(v6 + 20);
  if (qword_1ED6EF5C0 != -1)
    swift_once();
  *(_QWORD *)&v11[v17] = qword_1ED6EF5B0;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
  v18 = *(_QWORD *)(v1 + 16);
  sub_1BDD9C318((uint64_t)v11, (uint64_t)v9, type metadata accessor for Proto_Sequence);
  type metadata accessor for CRStringRef();
  swift_allocObject();
  swift_retain();
  v19 = sub_1BDDFCF10((uint64_t)v9, v18);
  result = sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Sequence);
  if (!v2)
    *v22 = v19;
  return result;
}

uint64_t sub_1BDE12D84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v14);
  v15 = *(_QWORD *)&v14[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v8, &qword_1ED6F2DF0);
  v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v8, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v11, type metadata accessor for Proto_Sequence);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v17 = *(int *)(v9 + 20);
  if (qword_1ED6EF5C0 != -1)
    swift_once();
  *(_QWORD *)&v11[v17] = qword_1ED6EF5B0;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
  v18 = *(_QWORD *)(v3 + 16);
  swift_retain();
  return sub_1BE1496A8((uint64_t)v11, v18, a1, v21, a3);
}

uint64_t sub_1BDE12FA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v5);
  v6 = *(_QWORD *)(v1 + 16);
  swift_retain();
  return sub_1BE0FC1E8((uint64_t)v5, v6, a1);
}

uint64_t sub_1BDE13030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v14);
  v15 = *(_QWORD *)&v14[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v15, (uint64_t)v8, &qword_1ED6F2DF0);
  v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v8, 1, v16) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v11, type metadata accessor for Proto_Sequence);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v17 = *(int *)(v9 + 20);
  if (qword_1ED6EF5C0 != -1)
    swift_once();
  *(_QWORD *)&v11[v17] = qword_1ED6EF5B0;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
  v18 = *(_QWORD *)(v3 + 16);
  swift_retain();
  return sub_1BE0C6134((uint64_t)v11, v18, a1, v21, a3);
}

uint64_t sub_1BDE13254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a3;
  v21 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v15);
  v16 = *(_QWORD *)&v15[*(int *)(v13 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v9, &qword_1ED6F2DF0);
  v17 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v9, 1, v17) == 1)
  {
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v12, type metadata accessor for Proto_OrderedSet);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v18 = *(int *)(v10 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v12[v18] = qword_1ED6EF618;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CRDT);
  v19 = *(_QWORD *)(v4 + 16);
  swift_retain();
  return sub_1BE1609D4((uint64_t)v12, v19, a1, v21, v22, a4);
}

uint64_t sub_1BDE13480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;

  v29 = a6;
  v27 = a4;
  v28 = a5;
  v25 = a2;
  v26 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v18);
  v19 = *(_QWORD *)&v18[*(int *)(v16 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v12, &qword_1ED6F2DF0);
  v20 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v12, 1, v20) == 1)
  {
    sub_1BDD86E30((uint64_t)v12, &qword_1ED6F2DF0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      sub_1BDDA2E8C((uint64_t)v12, (uint64_t)v15, type metadata accessor for Proto_OrderedSet);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v21 = *(int *)(v13 + 20);
  if (qword_1ED6EF620 != -1)
    swift_once();
  *(_QWORD *)&v15[v21] = qword_1ED6EF618;
  swift_retain();
LABEL_9:
  sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_CRDT);
  v22 = *(_QWORD *)(v7 + 16);
  swift_retain();
  return sub_1BDFADD64((uint64_t)v15, v22, a1, v25, v26, v27, v28, v29, a7);
}

_QWORD *sub_1BDE136B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Proto_CustomCRDT(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BDDA0528((uint64_t)v9);
  v10 = *(_QWORD *)&v9[*(int *)(v7 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v10, (uint64_t)v3, &qword_1ED6F2DF0);
  v11 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v3, 1, v11) == 1)
  {
    sub_1BDD86E30((uint64_t)v3, &qword_1ED6F2DF0);
LABEL_6:
    *v6 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 9)
  {
    sub_1BDD9C3E0((uint64_t)v3, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_6;
  }
  sub_1BDDA2E8C((uint64_t)v3, (uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
LABEL_7:
  sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_CRDT);
  v12 = *v6;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
  swift_retain();
  v13 = sub_1BDE25148(v12, v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v13;
}

uint64_t CRDecoder.CRDTContainer.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t CRDecoder.CRDTContainer.__deallocating_deinit()
{
  return sub_1BDDCA70C();
}

uint64_t sub_1BDE138F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1BDD86DEC(v9, (uint64_t)v8, &qword_1ED6F3728);
  v10 = type metadata accessor for Proto_CRDT(0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10);
  if ((_DWORD)result != 1)
  {
    v12 = *(_QWORD *)&v8[*(int *)(v10 + 20)]
        + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v12, (uint64_t)v5, &qword_1ED6F2DF0);
    v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13) == 1)
    {
      sub_1BDD86E30((uint64_t)v5, &qword_1ED6F2DF0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        sub_1BDDA2E8C((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_Struct);
        return sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_CRDT);
      }
      sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    v14 = MEMORY[0x1E0DEE9D8];
    *a1 = MEMORY[0x1E0DEE9D8];
    a1[1] = v14;
    a1[2] = v14;
    type metadata accessor for Proto_Struct(0);
    sub_1BE1B20E4();
    return sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_CRDT);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE13AF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BDE138F8(v3);
  v4 = *v3;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v3, type metadata accessor for Proto_Struct);
  swift_retain();
  v5 = sub_1BDE254C4(v4, v0);
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

uint64_t sub_1BDE13BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  char *v36;

  v5 = type metadata accessor for Proto_CRDT(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Struct(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v35 - v13);
  v15 = *(_QWORD *)(v2 + 16);
  v16 = *(_QWORD **)(v15 + 32);
  v17 = v16[2];
  if (!v17)
    return 0;
  v18 = v16[4] == a1 && v16[5] == a2;
  v36 = v8;
  if (!v18 && (sub_1BE1B34AC() & 1) == 0)
  {
    v31 = v16 + 7;
    v32 = 1;
    while (v17 != v32)
    {
      v19 = v32;
      if (*(v31 - 1) != a1 || *v31 != a2)
      {
        v34 = sub_1BE1B34AC();
        v32 = v19 + 1;
        v31 += 2;
        if ((v34 & 1) == 0)
          continue;
      }
      goto LABEL_8;
    }
    return 0;
  }
  v19 = 0;
LABEL_8:
  sub_1BDE138F8(v14);
  v20 = *v14;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Struct);
  v21 = *(_QWORD *)(v20 + 16);
  if (!v21)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (*(_QWORD *)(v20 + 32) != v19)
  {
    v22 = 0;
    v23 = v21 - 1;
    while (v23 != v22)
    {
      v24 = *(_QWORD *)(v20 + 40 + 8 * v22++);
      if (v24 == v19)
        goto LABEL_14;
    }
    goto LABEL_17;
  }
  v22 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  sub_1BDE138F8(v12);
  v25 = v12[1];
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Struct);
  v26 = *(_QWORD *)(v25 + 16);
  swift_bridgeObjectRelease();
  if (v22 >= v26)
    return 0;
  sub_1BDE138F8(v12);
  v27 = v12[1];
  swift_bridgeObjectRetain();
  result = sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Struct);
  if (v22 < *(_QWORD *)(v27 + 16))
  {
    v29 = (uint64_t)v36;
    sub_1BDD9C318(v27+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v22, (uint64_t)v36, type metadata accessor for Proto_CRDT);
    swift_bridgeObjectRelease();
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v30 = sub_1BDDA1B44(v29, v15);
    swift_release();
    return v30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE13E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];

  v2 = v1;
  v4 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Proto_CRDT(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v16 = &v21[-v15];
  swift_retain();
  v17 = sub_1BDE255F8(a1, v2);
  swift_release();
  sub_1BDE138F8(v6);
  sub_1BDE14060(v17, (uint64_t)v9);
  sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_Struct);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1BDD86E30((uint64_t)v9, &qword_1ED6F3728);
    return 0;
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v9, (uint64_t)v16, type metadata accessor for Proto_CRDT);
    sub_1BDD9C318((uint64_t)v16, (uint64_t)v14, type metadata accessor for Proto_CRDT);
    v19 = *(_QWORD *)(v2 + 16);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v18 = sub_1BDDA1B44((uint64_t)v14, v19);
    swift_release();
    sub_1BDD9C3E0((uint64_t)v16, type metadata accessor for Proto_CRDT);
  }
  return v18;
}

uint64_t sub_1BDE14060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Proto_CRDT(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = *v2;
    v17 = *(_QWORD *)(*v2 + 16);
    if (v17)
    {
      v18 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v16 + 32) == v18)
      {
        v19 = 0;
LABEL_8:
        v23 = v2[1];
        if (v19 < *(_QWORD *)(v23 + 16))
        {
          v24 = v23
              + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
              + *(_QWORD *)(v12 + 72) * v19;
          if (v15 == 1)
          {
            sub_1BDD9C318(v24, a2, type metadata accessor for Proto_CRDT);
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
          }
          sub_1BDD9C318(v24, (uint64_t)v14, type metadata accessor for Proto_CRDT);
          v26 = *(_QWORD *)&v14[*(int *)(v11 + 20)]
              + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
          swift_beginAccess();
          sub_1BDD86DEC(v26, (uint64_t)v7, &qword_1ED6F2DF0);
          v27 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v7, 1, v27) == 1)
          {
            sub_1BDD86E30((uint64_t)v7, &qword_1ED6F2DF0);
          }
          else
          {
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v10, type metadata accessor for Proto_Struct);
LABEL_19:
              sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
              v29 = swift_bridgeObjectRetain();
              sub_1BDE14360(v29, a1 + 32, 1, (2 * v15) | 1, a2);
              swift_bridgeObjectRelease();
              return sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Struct);
            }
            sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          }
          v28 = MEMORY[0x1E0DEE9D8];
          *v10 = MEMORY[0x1E0DEE9D8];
          v10[1] = v28;
          v10[2] = v28;
          sub_1BE1B20E4();
          goto LABEL_19;
        }
      }
      else
      {
        v19 = 0;
        v20 = v16 + 40;
        v21 = v17 - 1;
        while (v21 != v19)
        {
          v22 = *(_QWORD *)(v20 + 8 * v19++);
          if (v22 == v18)
            goto LABEL_8;
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, 1, 1, v11);
}

uint64_t sub_1BDE14360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a1;
  v35 = a2;
  v36 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for Proto_CRDT(0);
  v15 = *(_QWORD *)(v14 - 8);
  result = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    if ((uint64_t)(a4 >> 1) <= a3)
    {
      __break(1u);
      goto LABEL_28;
    }
    v20 = *v5;
    v21 = *(_QWORD *)(*v5 + 16);
    if (v21)
    {
      v22 = *(_QWORD *)(v35 + 8 * a3);
      if (*(_QWORD *)(v20 + 32) == v22)
      {
        v23 = 0;
LABEL_9:
        v27 = v5[1];
        if (v23 < *(_QWORD *)(v27 + 16))
        {
          if (!__OFSUB__(v19, a3))
          {
            v28 = v27
                + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
                + *(_QWORD *)(v15 + 72) * v23;
            if (v19 - a3 == 1)
            {
              v29 = v36;
              sub_1BDD9C318(v28, v36, type metadata accessor for Proto_CRDT);
              return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v29, 0, 1, v14);
            }
            sub_1BDD9C318(v28, (uint64_t)v18, type metadata accessor for Proto_CRDT);
            v30 = *(_QWORD *)&v18[*(int *)(v14 + 20)]
                + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            sub_1BDD86DEC(v30, (uint64_t)v10, &qword_1ED6F2DF0);
            v31 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v10, 1, v31) == 1)
            {
              sub_1BDD86E30((uint64_t)v10, &qword_1ED6F2DF0);
            }
            else
            {
              if (swift_getEnumCaseMultiPayload() == 3)
              {
                sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v13, type metadata accessor for Proto_Struct);
LABEL_21:
                result = sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_CRDT);
                if (v19 == a3)
                  goto LABEL_25;
                if (__OFADD__(a3, 1))
                {
LABEL_31:
                  __break(1u);
                  return result;
                }
                if (v19 >= a3 + 1)
                {
                  v19 = a3 + 1;
LABEL_25:
                  if (v19 >= a3)
                  {
                    v33 = swift_unknownObjectRetain();
                    sub_1BDE14360(v33, v35, v19, a4);
                    swift_unknownObjectRelease();
                    return sub_1BDD9C3E0((uint64_t)v13, type metadata accessor for Proto_Struct);
                  }
                  goto LABEL_30;
                }
LABEL_29:
                __break(1u);
LABEL_30:
                __break(1u);
                goto LABEL_31;
              }
              sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
            v32 = MEMORY[0x1E0DEE9D8];
            *v13 = MEMORY[0x1E0DEE9D8];
            v13[1] = v32;
            v13[2] = v32;
            sub_1BE1B20E4();
            goto LABEL_21;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
      }
      else
      {
        v23 = 0;
        v24 = v21 - 1;
        v25 = v20 + 40;
        while (v24 != v23)
        {
          v26 = *(_QWORD *)(v25 + 8 * v23++);
          if (v26 == v22)
            goto LABEL_9;
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v36, 1, 1, v14);
}

uint64_t CRDecoder.CRDTKeyedContainer.__deallocating_deinit()
{
  return sub_1BDDCA70C();
}

uint64_t sub_1BDE146B0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v9, (uint64_t)v8, &qword_1ED6F3770);
  v10 = type metadata accessor for Proto_Value(0);
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v8, 1, v10);
  if ((_DWORD)result != 1)
  {
    v12 = *(_QWORD *)&v8[*(int *)(v10 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v12, (uint64_t)v5, &qword_1ED6F26F0);
    v13 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13) == 1)
    {
      sub_1BDD86E30((uint64_t)v5, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        sub_1BDDA2E8C((uint64_t)v5, (uint64_t)a1, type metadata accessor for Proto_CustomCRValue);
        return sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Value);
      }
      sub_1BDD9C3E0((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v14 = MEMORY[0x1E0DEE9D8];
    *a1 = MEMORY[0x1E0DEE9D8];
    a1[1] = v14;
    type metadata accessor for Proto_CustomCRValue(0);
    sub_1BE1B20E4();
    return sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Value);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE148A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1E0C80A78](v0);
  v2 = (uint64_t *)((char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BDE146B0(v2);
  v3 = *v2;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v2, type metadata accessor for Proto_CustomCRValue);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    result = sub_1BDE228F4(0, v4, 0);
    v6 = 0;
    v7 = v12;
    while (1)
    {
      v8 = *(_QWORD *)(v3 + 8 * v6 + 32);
      if (v8 < 0)
        break;
      v12 = v7;
      v10 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      if (v10 >= v9 >> 1)
      {
        result = sub_1BDE228F4(v9 > 1, v10 + 1, 1);
        v7 = v12;
      }
      ++v6;
      *(_QWORD *)(v7 + 16) = v10 + 1;
      *(_QWORD *)(v7 + 8 * v10 + 32) = v8;
      if (v4 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1BDE149E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v3 = type metadata accessor for Proto_Value(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_CustomCRValue(0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v24 - v11);
  sub_1BDE146B0((uint64_t *)((char *)&v24 - v11));
  v13 = *v12;
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_CustomCRValue);
  if (a1 < 0)
    goto LABEL_15;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_11;
  if (*(_QWORD *)(v13 + 32) != a1)
  {
    v15 = 0;
    v16 = v14 - 1;
    while (v16 != v15)
    {
      v17 = *(_QWORD *)(v13 + 40 + 8 * v15++);
      if (v17 == a1)
        goto LABEL_8;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  v15 = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  sub_1BDE146B0(v10);
  v18 = v10[1];
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_CustomCRValue);
  v19 = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease();
  if (v15 >= v19)
    return 0;
  sub_1BDE146B0(v10);
  v20 = v10[1];
  swift_bridgeObjectRetain();
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_CustomCRValue);
  if (v15 < *(_QWORD *)(v20 + 16))
  {
    sub_1BDD9C318(v20+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v15, (uint64_t)v6, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v1 + 16);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    v22 = sub_1BDDB4FC0((uint64_t)v6, v21);
    swift_release();
    return v22;
  }
  __break(1u);
LABEL_15:
  result = sub_1BE1B31F4();
  __break(1u);
  return result;
}

uint64_t CRDecoder.CRValueKeyedContainer.__deallocating_deinit()
{
  return sub_1BDDCA70C();
}

uint64_t sub_1BDE14C5C()
{
  return sub_1BDE25FD8();
}

uint64_t sub_1BDE14C70()
{
  return sub_1BDE26AEC();
}

uint64_t sub_1BDE14C84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BDE25D14();
  if (!v0)
    swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BDE14CBC()
{
  return sub_1BDDCA244();
}

uint64_t sub_1BDE14CD0()
{
  return sub_1BDE26378();
}

uint64_t sub_1BDE14CE4()
{
  return sub_1BDE26728();
}

uint64_t sub_1BDE14CF8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;

  v25 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_Version(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v24 - v16;
  v18 = *(_QWORD *)(v1 + 16);
  v19 = v18 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v19, (uint64_t)v7, &qword_1ED6F3770);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Value);
    v21 = *(_QWORD *)&v11[*(int *)(v8 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v21, (uint64_t)v4, &qword_1ED6F26F0);
    sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Value);
    v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v4, 1, v22) == 1)
    {
      sub_1BDD86E30((uint64_t)v4, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        sub_1BDDA2E8C((uint64_t)v4, (uint64_t)v17, type metadata accessor for Proto_Version);
        sub_1BDD9C318((uint64_t)v17, (uint64_t)v15, type metadata accessor for Proto_Version);
        swift_retain();
        sub_1BDDA9DA0(v15, v18, v25);
        return sub_1BDD9C3E0((uint64_t)v17, type metadata accessor for Proto_Version);
      }
      sub_1BDD9C3E0((uint64_t)v4, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v23 = 0xD00000000000001BLL;
    *(_QWORD *)(v23 + 8) = 0x80000001BE1CD430;
    *(_BYTE *)(v23 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1BDE14FF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t, unint64_t);
  uint64_t v27;
  _QWORD *v28;

  v28 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_Asset(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v1 + 16);
  v16 = v15 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v7, &qword_1ED6F3770);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Value);
  v18 = *(_QWORD *)&v11[*(int *)(v8 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v4, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Value);
  v19 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v4, 1, v19) != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 12)
    {
      sub_1BDD9C3E0((uint64_t)v4, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      goto LABEL_9;
    }
    result = sub_1BDDA2E8C((uint64_t)v4, (uint64_t)v14, type metadata accessor for Proto_Asset);
    v20 = *(_QWORD *)(v15 + 16);
    if (*(_BYTE *)(v15 + 48) != 1)
    {
      if (v20)
      {
        v24 = *((_QWORD *)v14 + 1);
        v25 = *((_QWORD *)v14 + 2);
        v26 = *(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v20 + 200);
        swift_retain();
        sub_1BDDB6CA4(v24, v25);
        v26(v15, v24, v25);
        sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Asset);
        sub_1BDDB796C(v24, v25);
        return swift_release();
      }
      goto LABEL_15;
    }
    if (v20)
    {
      v21 = *((_QWORD *)v14 + 1);
      v22 = *((_QWORD *)v14 + 2);
      swift_retain();
      sub_1BDDB6CA4(v21, v22);
      sub_1BE108BC8(v21, v22, v28);
      sub_1BDDB796C(v21, v22);
      swift_release();
      return sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Asset);
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  sub_1BDD86E30((uint64_t)v4, &qword_1ED6F26F0);
LABEL_9:
  sub_1BDDFCAFC();
  swift_allocError();
  *(_QWORD *)v23 = 0xD000000000000019;
  *(_QWORD *)(v23 + 8) = 0x80000001BE1CD450;
  *(_BYTE *)(v23 + 16) = 0;
  return swift_willThrow();
}

uint64_t sub_1BDE15374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a1;
  v46 = a2;
  v47 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v8 = MEMORY[0x1E0C80A78](v7);
  v44 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v42 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v42 - v13;
  v15 = type metadata accessor for Proto_Value(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v45 = (uint64_t)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v42 - v19;
  v21 = type metadata accessor for Proto_Optional(0);
  MEMORY[0x1E0C80A78](v21);
  v50 = (uint64_t)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v3 + 16);
  v23 = v43 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v23, (uint64_t)v14, &qword_1ED6F3770);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  result = v24(v14, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  sub_1BDDA2E8C((uint64_t)v14, (uint64_t)v20, type metadata accessor for Proto_Value);
  v26 = *(_QWORD *)&v20[*(int *)(v15 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v26, (uint64_t)v6, &qword_1ED6F26F0);
  sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for Proto_Value);
  v27 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v6, 1, v27) == 1)
  {
    sub_1BDD86E30((uint64_t)v6, &qword_1ED6F26F0);
LABEL_8:
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v34 = 0xD00000000000001ALL;
    *(_QWORD *)(v34 + 8) = 0x80000001BE1CD470;
    *(_BYTE *)(v34 + 16) = 0;
    return swift_willThrow();
  }
  if (swift_getEnumCaseMultiPayload() != 8)
  {
    sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  v28 = v50;
  sub_1BDDA2E8C((uint64_t)v6, v50, type metadata accessor for Proto_Optional);
  v29 = *(int *)(v21 + 20);
  v30 = *(_QWORD *)(v28 + v29)
      + OBJC_IVAR____TtCV9Coherence14Proto_OptionalP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  sub_1BDD86DEC(v30, (uint64_t)v12, &qword_1ED6F3770);
  LODWORD(v30) = v24(v12, 1, v15);
  sub_1BDD86E30((uint64_t)v12, &qword_1ED6F3770);
  if ((_DWORD)v30 == 1)
  {
    sub_1BDD9C3E0(v28, type metadata accessor for Proto_Optional);
    v31 = 1;
    v32 = v48;
    v33 = v47;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v33, v31, 1, v32);
  }
  v35 = *(_QWORD *)(v28 + v29)
      + OBJC_IVAR____TtCV9Coherence14Proto_OptionalP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  v36 = v44;
  sub_1BDD86DEC(v35, v44, &qword_1ED6F3770);
  if (v24((char *)v36, 1, v15) == 1)
  {
    v37 = v45;
    sub_1BE1B20E4();
    v38 = *(int *)(v15 + 20);
    v33 = v47;
    v32 = v48;
    if (qword_1ED6F2718 != -1)
      swift_once();
    *(_QWORD *)(v37 + v38) = qword_1ED6F2708;
    swift_retain();
    sub_1BDD86E30(v36, &qword_1ED6F3770);
  }
  else
  {
    v37 = v45;
    sub_1BDDA2E8C(v36, v45, type metadata accessor for Proto_Value);
    v33 = v47;
    v32 = v48;
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  v39 = v43;
  swift_retain();
  v40 = sub_1BDDB4FC0(v37, v39);
  swift_release();
  v41 = v49;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v46 + 8) + 8) + 8))(v40, v32);
  result = sub_1BDD9C3E0(v28, type metadata accessor for Proto_Optional);
  if (!v41)
  {
    v31 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v33, v31, 1, v32);
  }
  return result;
}

uint64_t sub_1BDE15870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Value(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v2 + 16);
  v13 = v12 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v13, (uint64_t)v7, &qword_1ED6F3770);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Value);
    swift_retain();
    return sub_1BDF019AC((uint64_t)v11, v12, a1, a2);
  }
  return result;
}

uint64_t sub_1BDE159B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v16 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + 16);
  v14 = v13 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v14, (uint64_t)v8, &qword_1ED6F3770);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_Value);
    swift_retain();
    return sub_1BDF03584((uint64_t)v12, v13, a1, a2, v16);
  }
  return result;
}

uint64_t sub_1BDE15B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a4;
  v20 = a5;
  v18 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_Value(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v5 + 16);
  v16 = v15 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v16, (uint64_t)v10, &qword_1ED6F3770);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1BDDA2E8C((uint64_t)v10, (uint64_t)v14, type metadata accessor for Proto_Value);
    swift_retain();
    return sub_1BDFDA580((uint64_t)v14, v15, a1, a2, v18, v19, v20);
  }
  return result;
}

uint64_t sub_1BDE15C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v5 = MEMORY[0x1E0C80A78](v4);
  v33 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v30 - v7;
  v9 = type metadata accessor for Proto_Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v31 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - v13;
  v15 = type metadata accessor for Proto_TaggedValue(0);
  MEMORY[0x1E0C80A78](v15);
  v32 = (uint64_t)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v0 + 16);
  v18 = v17 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v8, &qword_1ED6F3770);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  result = v19(v8, 1, v9);
  if ((_DWORD)result != 1)
  {
    sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v14, type metadata accessor for Proto_Value);
    v21 = *(_QWORD *)&v14[*(int *)(v9 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1BDD86DEC(v21, (uint64_t)v3, &qword_1ED6F26F0);
    sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Value);
    v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v3, 1, v22) == 1)
    {
      sub_1BDD86E30((uint64_t)v3, &qword_1ED6F26F0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        v23 = v32;
        sub_1BDDA2E8C((uint64_t)v3, v32, type metadata accessor for Proto_TaggedValue);
        v24 = *(_QWORD *)(v23 + *(int *)(v15 + 20));
        swift_beginAccess();
        v3 = *(char **)(v24 + 16);
        v25 = v24
            + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        v26 = v33;
        sub_1BDD86DEC(v25, v33, &qword_1ED6F3770);
        if (v19((char *)v26, 1, v9) == 1)
        {
          v27 = v31;
          sub_1BE1B20E4();
          v28 = *(int *)(v9 + 20);
          if (qword_1ED6F2718 != -1)
            swift_once();
          *(_QWORD *)(v27 + v28) = qword_1ED6F2708;
          swift_retain();
          sub_1BDD86E30(v26, &qword_1ED6F3770);
        }
        else
        {
          v27 = v31;
          sub_1BDDA2E8C(v26, v31, type metadata accessor for Proto_Value);
        }
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        sub_1BDDB4FC0(v27, v17);
        swift_release();
        sub_1BDD9C3E0(v23, type metadata accessor for Proto_TaggedValue);
        return (uint64_t)v3;
      }
      sub_1BDD9C3E0((uint64_t)v3, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v29 = 0xD00000000000001ELL;
    *(_QWORD *)(v29 + 8) = 0x80000001BE1CD490;
    *(_BYTE *)(v29 + 16) = 0;
    swift_willThrow();
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t CRDecoder.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDD86E30(v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1ED6F3728);
  sub_1BDD86E30(v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1ED6F3770);
  return v0;
}

uint64_t (*sub_1BDE160F4())()
{
  swift_beginAccess();
  return j__swift_endAccess_0;
}

void CREncoder.version.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 72);
}

uint64_t CREncoder.__allocating_init()()
{
  id v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  v0 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)v4);
  sub_1BDD86E30((uint64_t)v4, qword_1ED6F3DD0);
  type metadata accessor for CREncoder();
  result = swift_allocObject();
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = v3;
  *(_QWORD *)(result + 64) = v2;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 16) = v0;
  *(_QWORD *)(result + 24) = v2;
  *(_BYTE *)(result + 72) = 1;
  return result;
}

uint64_t CREncoder.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 48) = v3;
  *(_QWORD *)(result + 56) = v4;
  *(_QWORD *)(result + 64) = v3;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = v3;
  *(_BYTE *)(result + 72) = 1;
  return result;
}

uint64_t CREncoder.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 72) = 1;
  return v1;
}

uint64_t CREncoder.init(_:version:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = MEMORY[0x1E0DEE9D8];
  v4 = MEMORY[0x1E0DEE9E0];
  v5 = *a2;
  *(_QWORD *)(v2 + 32) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = v3;
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  *(_BYTE *)(v2 + 72) = v5;
  return v2;
}

uint64_t sub_1BDE16288@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v24[3];
  uint64_t v25;

  v6 = v3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  sub_1BE1B20E4();
  v15 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  v16 = qword_1ED6F37F0;
  *(_QWORD *)(a3 + v15) = qword_1ED6F37F0;
  MEMORY[0x1E0C80A78](v16);
  v24[-2] = &v25;
  v24[-1] = v6;
  swift_retain();
  sub_1BDDA82F8(a2, (uint64_t)v14);
  if (v4)
    return sub_1BDD9C3E0(a3, type metadata accessor for Proto_Document);
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v11, type metadata accessor for Proto_CRDT);
  v18 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 0, 1, v18);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v19 = swift_retain();
    *(_QWORD *)(a3 + v15) = sub_1BDDA0F18(v19);
    swift_release();
  }
  v20 = *(_QWORD *)(a3 + v15)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v11, v20, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  v21 = *(_QWORD *)(v6 + 64);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v22 = swift_retain();
    *(_QWORD *)(a3 + v15) = sub_1BDDA0F18(v22);
    swift_release();
  }
  v23 = (_QWORD *)(*(_QWORD *)(a3 + v15)
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  swift_beginAccess();
  *v23 = v21;
  swift_bridgeObjectRelease();
  sub_1BDD8C8A8(a3);
  return sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDE16598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDE16C50(a1, a2, a3, (void (*)(uint64_t))sub_1BDE27F9C, a4);
}

uint64_t sub_1BDE165B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for Proto_CustomCRDT(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (uint64_t *)((char *)&v11 - v5);
  result = sub_1BDDA8D6C();
  if (!v0)
  {
    v8 = result;
    swift_retain();
    sub_1BE1B20E4();
    swift_retain();
    v9 = swift_bridgeObjectRetain();
    v10 = sub_1BDF32164(v9, v8);
    swift_bridgeObjectRelease();
    swift_release();
    *v6 = v10;
    sub_1BDD9C318((uint64_t)v6, (uint64_t)v4, type metadata accessor for Proto_CustomCRDT);
    swift_beginAccess();
    sub_1BE12919C((uint64_t)v4);
    swift_release();
    return sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
  }
  return result;
}

uint64_t sub_1BDE16708(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1BDDA8D6C();
  if (!v2)
  {
    v9 = result;
    type metadata accessor for CREncoder.CRDTKeyedContainer();
    inited = swift_initStackObject();
    v11 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(inited + 16) = v9;
    *(_QWORD *)(inited + 24) = a2;
    *v7 = v11;
    v7[1] = v11;
    v7[2] = v11;
    swift_retain();
    swift_retain();
    sub_1BE1B20E4();
    swift_beginAccess();
    sub_1BDDBE3B0((uint64_t)v7);
    sub_1BDFDF34C(inited, a1);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDE16830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for Proto_Counter(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BDDA8D6C();
  if (!v0)
  {
    v8 = result;
    v9 = *(_QWORD *)(result + 16);
    swift_retain();
    sub_1BE1B20E4();
    v10 = *(int *)(v4 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)&v6[v10] = qword_1ED6F2E08;
    swift_retain();
    sub_1BE0FF460();
    sub_1BE0FF514(v9, (uint64_t)v3);
    swift_release();
    sub_1BE12B7B4((uint64_t)v3);
    v11 = v8 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v6, v11, type metadata accessor for Proto_CRDT);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDE169BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v15 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  v16 = qword_1ED6F37F0;
  *(_QWORD *)(a4 + v15) = qword_1ED6F37F0;
  MEMORY[0x1E0C80A78](v16);
  v22[-4] = a2;
  v22[-3] = a3;
  v22[-2] = a1;
  v22[-1] = v4;
  swift_retain();
  v17 = v22[5];
  sub_1BDE1CC84((void (*)(uint64_t))sub_1BDE27F68, (uint64_t)v14);
  if (v17)
    return sub_1BDD9C3E0(a4, type metadata accessor for Proto_Document);
  sub_1BDD9C318((uint64_t)v14, (uint64_t)v11, type metadata accessor for Proto_Value);
  v19 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 0, 1, v19);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v20 = swift_retain();
    *(_QWORD *)(a4 + v15) = sub_1BDDA0F18(v20);
    swift_release();
  }
  v21 = *(_QWORD *)(a4 + v15)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v11, v21, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  sub_1BDD8C8A8(a4);
  return sub_1BDD9C3E0((uint64_t)v14, type metadata accessor for Proto_Value);
}

uint64_t sub_1BDE16C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDE16C50(a1, a2, a3, (void (*)(uint64_t))sub_1BDE27F38, a4);
}

uint64_t sub_1BDE16C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;

  v28 = a4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v16 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  v17 = qword_1ED6F37F0;
  *(_QWORD *)(a5 + v16) = qword_1ED6F37F0;
  MEMORY[0x1E0C80A78](v17);
  *(&v27 - 4) = a2;
  *(&v27 - 3) = a3;
  *(&v27 - 2) = a1;
  *(&v27 - 1) = v5;
  swift_retain();
  v18 = v29;
  sub_1BDDA82F8(v28, (uint64_t)v15);
  if (v18)
    return sub_1BDD9C3E0(a5, type metadata accessor for Proto_Document);
  v20 = v5;
  sub_1BDD9C318((uint64_t)v15, (uint64_t)v12, type metadata accessor for Proto_CRDT);
  v21 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 0, 1, v21);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v22 = swift_retain();
    *(_QWORD *)(a5 + v16) = sub_1BDDA0F18(v22);
    swift_release();
  }
  v23 = *(_QWORD *)(a5 + v16)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v12, v23, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  v24 = *(_QWORD *)(v20 + 64);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v25 = swift_retain();
    *(_QWORD *)(a5 + v16) = sub_1BDDA0F18(v25);
    swift_release();
  }
  v26 = (_QWORD *)(*(_QWORD *)(a5 + v16)
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  swift_beginAccess();
  *v26 = v24;
  swift_bridgeObjectRelease();
  sub_1BDD8C8A8(a5);
  return sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDE16F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v13 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  v14 = qword_1ED6F37F0;
  *(_QWORD *)(a2 + v13) = qword_1ED6F37F0;
  MEMORY[0x1E0C80A78](v14);
  *(&v19 - 2) = a1;
  *(&v19 - 1) = v4;
  swift_retain();
  sub_1BDDA82F8((void (*)(uint64_t))sub_1BDE27EE4, (uint64_t)v12);
  if (v3)
    return sub_1BDD9C3E0(a2, type metadata accessor for Proto_Document);
  sub_1BDD9C318((uint64_t)v12, (uint64_t)v9, type metadata accessor for Proto_CRDT);
  v16 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v17 = swift_retain();
    *(_QWORD *)(a2 + v13) = sub_1BDDA0F18(v17);
    swift_release();
  }
  v18 = *(_QWORD *)(a2 + v13)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v9, v18, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  sub_1BDD8C8A8(a2);
  return sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_CRDT);
}

char *sub_1BDE171C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = sub_1BE1B1F58();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Capsule(0, a2, *(_QWORD *)(a3 + 16), v9);
  Capsule<>.rootID.getter((uint64_t *)&v16);
  v15 = v16;
  Capsule.version.getter(v10, &v14);
  v13 = v14;
  Capsule.versionUUID.getter(v10, (uint64_t)v8);
  v11 = sub_1BDE172F0((uint64_t *)&v15, &v13, 0, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BDDB796C(v15, *((unint64_t *)&v15 + 1));
  return v11;
}

char *sub_1BDE172F0(uint64_t *a1, __int128 *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _DWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[14];
  unsigned __int8 v85;
  char *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;

  v80 = a4;
  v68[1] = a3;
  v89 = *MEMORY[0x1E0C80C00];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  MEMORY[0x1E0C80A78](v6);
  v81 = (uint64_t)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v79 = (uint64_t)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v78 = (uint64_t)v68 - v11;
  v12 = type metadata accessor for Proto_Version(0);
  v76 = *(_QWORD *)(v12 - 8);
  v77 = v12;
  MEMORY[0x1E0C80A78](v12);
  v75 = (_QWORD *)((char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v15 = MEMORY[0x1E0C80A78](v14);
  v74 = (uint64_t)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v73 = (uint64_t)v68 - v17;
  v83 = type metadata accessor for Proto_KeyPath(0);
  v71 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v19 = (_QWORD *)((char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *a1;
  v27 = a1[1];
  v72 = *a2;
  sub_1BE1B20E4();
  v69 = v23;
  v28 = *(int *)(v23 + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  *(_QWORD *)&v25[v28] = qword_1ED6F37F0;
  swift_retain();
  sub_1BE1B20E4();
  v29 = *(int *)(v20 + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)&v22[v29] = qword_1ED6EFD68;
  *v19 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  v30 = sub_1BE1B20CC();
  v32 = v31;
  sub_1BE1B20E4();
  sub_1BDDB6CA4(v26, v27);
  sub_1BDDB796C(v30, v32);
  v19[1] = v26;
  v19[2] = v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v33 = swift_retain();
    *(_QWORD *)&v22[v29] = sub_1BDDA1424(v33);
    swift_release();
  }
  v34 = *(_QWORD *)&v22[v29];
  v35 = v73;
  sub_1BDDA2E8C((uint64_t)v19, v73, type metadata accessor for Proto_KeyPath);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v35, 0, 1, v83);
  v36 = v74;
  sub_1BDDA2EF0(v35, v74, &qword_1ED6F3790);
  v37 = v34 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v36, v37, &qword_1ED6F3790);
  swift_endAccess();
  swift_release();
  v88 = v72;
  v38 = v75;
  v39 = v82;
  sub_1BDDAD780(v82, v75);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v40 = swift_retain();
    *(_QWORD *)&v25[v28] = sub_1BDDA0F18(v40);
    swift_release();
  }
  v41 = *(_QWORD *)&v25[v28];
  v42 = (uint64_t)v38;
  v43 = v78;
  sub_1BDDA2E8C(v42, v78, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v43, 0, 1, v77);
  v44 = v79;
  sub_1BDDA2EF0(v43, v79, &qword_1ED6F37A8);
  v45 = v41 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v44, v45, &qword_1ED6F37A8);
  swift_endAccess();
  swift_release();
  v46 = sub_1BDEE7C7C();
  v48 = v47;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v49 = swift_retain();
    *(_QWORD *)&v25[v28] = sub_1BDDA0F18(v49);
    swift_release();
  }
  v50 = (uint64_t *)(*(_QWORD *)&v25[v28]
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
  swift_beginAccess();
  v51 = *v50;
  v52 = v50[1];
  *v50 = v46;
  v50[1] = v48;
  sub_1BDDB796C(v51, v52);
  v53 = v81;
  sub_1BDD9C318((uint64_t)v22, v81, type metadata accessor for Proto_Reference);
  v54 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v53, 0, 1, v54);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v55 = swift_retain();
    *(_QWORD *)&v25[v28] = sub_1BDDA0F18(v55);
    swift_release();
  }
  v56 = *(_QWORD *)&v25[v28]
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v53, v56, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  v57 = (char *)v39;
  sub_1BDD8C8A8((uint64_t)v25);
  if (*(_BYTE *)(v39 + 72))
  {
    if (*(_BYTE *)(v39 + 72) == 1)
    {
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v57 = v25;
      v58 = v70;
      v59 = sub_1BE1B227C();
      if (!v58)
        v57 = (char *)v59;
    }
    else
    {
      v61 = v22;
      memset(v84, 0, sizeof(v84));
      v85 = 8;
      v62 = v70;
      sub_1BDDD2B90();
      v86 = *(char **)v84;
      v87 = *(unsigned int *)&v84[8] | ((unint64_t)v84[12] << 32) | ((unint64_t)v84[13] << 40) | ((unint64_t)v85 << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v57 = v25;
      v63 = sub_1BE1B227C();
      if (!v62)
      {
        v65 = v63;
        v66 = v64;
        sub_1BE1B1EA4();
        sub_1BDDB796C(v65, v66);
        v57 = v86;
        v22 = v61;
      }
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v60 = 0xD000000000000026;
    *(_QWORD *)(v60 + 8) = 0x80000001BE1CD760;
    *(_BYTE *)(v60 + 16) = 3;
    swift_willThrow();
  }
  sub_1BDD9C3E0((uint64_t)v22, type metadata accessor for Proto_Reference);
  sub_1BDD9C3E0((uint64_t)v25, type metadata accessor for Proto_Document);
  return v57;
}

uint64_t sub_1BDE17B60@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v4 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v24[-v11];
  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *a1;
  sub_1BE1B20E4();
  v17 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  *(_QWORD *)(a2 + v17) = qword_1ED6F37F0;
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = 0;
  swift_retain();
  swift_bridgeObjectRelease();
  swift_retain();
  v18 = swift_retain();
  sub_1BDE1CD80(v18, v16, v4, (uint64_t)v15);
  if (v3)
    return sub_1BDD9C3E0(a2, type metadata accessor for Proto_Document);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v20 = swift_retain();
    *(_QWORD *)(a2 + v17) = sub_1BDDA0F18(v20);
    swift_release();
  }
  v21 = *(_QWORD *)(a2 + v17);
  sub_1BDDA2E8C((uint64_t)v15, (uint64_t)v12, type metadata accessor for Proto_CRDT);
  v22 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 0, 1, v22);
  sub_1BDDA2EF0((uint64_t)v12, (uint64_t)v10, &qword_1ED6F37C8);
  v23 = v21 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4((uint64_t)v10, v23, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  return sub_1BDD8C8A8(a2);
}

uint64_t sub_1BDE17DF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _WORD v15[11];
  unsigned __int8 v16;
  uint64_t v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for Proto_Document(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v15 - v8;
  if (*(_BYTE *)(v1 + 72))
  {
    if (*(_BYTE *)(v1 + 72) == 1)
    {
      v17[0] = *a1;
      sub_1BDE17B60(v17, (uint64_t)v15 - v8);
      if (!v2)
      {
        sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
        v1 = sub_1BE1B227C();
LABEL_9:
        sub_1BDD9C3E0((uint64_t)v9, type metadata accessor for Proto_Document);
      }
    }
    else
    {
      v17[0] = *a1;
      sub_1BDE17B60(v17, (uint64_t)v7);
      if (!v2)
      {
        memset(&v15[4], 0, 14);
        v16 = 8;
        sub_1BDDD2B90();
        v17[0] = *(_QWORD *)&v15[4];
        v17[1] = *(unsigned int *)&v15[8] | ((unint64_t)LOBYTE(v15[10]) << 32) | ((unint64_t)HIBYTE(v15[10]) << 40) | ((unint64_t)v16 << 48);
        sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
        v12 = sub_1BE1B227C();
        v14 = v13;
        sub_1BE1B1EA4();
        sub_1BDDB796C(v12, v14);
        v1 = v17[0];
        v9 = v7;
        goto LABEL_9;
      }
    }
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v10 = 0xD000000000000026;
    *(_QWORD *)(v10 + 8) = 0x80000001BE1CD760;
    *(_BYTE *)(v10 + 16) = 3;
    swift_willThrow();
  }
  return v1;
}

uint64_t sub_1BDE18088@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t isEscapingClosureAtFileLocation@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v50;
  NSObject *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  uint64_t (*v60)();
  uint64_t v61;
  uint64_t v62;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v54 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v46 - v11;
  v62 = type metadata accessor for Proto_Version(0);
  v13 = *(_QWORD **)(v62 - 8);
  v14 = MEMORY[0x1E0C80A78](v62);
  v52 = (uint64_t *)((char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v46 - v16);
  v18 = *(NSObject **)a2;
  v19 = *(_QWORD *)(a2 + 8);
  v51 = *(NSObject **)(a2 + 16);
  v50 = *(_QWORD *)(a2 + 24);
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  v53 = v20;
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v4 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = 0;
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v4 + 72))
  {
    v48 = v21;
    v47 = a1;
    sub_1BE1B20E4();
    v22 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
    if (qword_1ED6F3268 != -1)
      goto LABEL_20;
    while (1)
    {
      *(_QWORD *)(isEscapingClosureAtFileLocation + v22) = qword_1ED6F37F0;
      aBlock = v18;
      v57 = v19;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BDDAD780(v4, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Document._StorageClass(0);
        swift_allocObject();
        v23 = swift_retain();
        *(_QWORD *)(isEscapingClosureAtFileLocation + v22) = sub_1BDDA0F18(v23);
        swift_release();
      }
      v24 = *(_QWORD *)(isEscapingClosureAtFileLocation + v22);
      sub_1BDDA2E8C((uint64_t)v17, (uint64_t)v12, type metadata accessor for Proto_Version);
      v49 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v13[7];
      v49(v12, 0, 1, v62);
      v25 = v54;
      sub_1BDDA2EF0((uint64_t)v12, v54, &qword_1ED6F37A8);
      v26 = v24
          + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v25, v26, &qword_1ED6F37A8);
      swift_endAccess();
      swift_release();
      aBlock = v51;
      v57 = v50;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = v52;
      sub_1BDDAD780(v4, v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Document._StorageClass(0);
        swift_allocObject();
        v28 = swift_retain();
        *(_QWORD *)(isEscapingClosureAtFileLocation + v22) = sub_1BDDA0F18(v28);
        swift_release();
      }
      v29 = *(_QWORD *)(isEscapingClosureAtFileLocation + v22);
      sub_1BDDA2E8C((uint64_t)v27, (uint64_t)v12, type metadata accessor for Proto_Version);
      v49(v12, 0, 1, v62);
      sub_1BDDA2EF0((uint64_t)v12, v25, &qword_1ED6F37A8);
      v30 = v29
          + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
      swift_beginAccess();
      swift_retain();
      sub_1BDDA1AF4(v25, v30, &qword_1ED6F37A8);
      swift_endAccess();
      swift_release();
      swift_retain();
      v31 = swift_bridgeObjectRetain();
      v32 = v55;
      v33 = sub_1BDE25994(v31, v4, sub_1BE19A380, (void (*)(uint64_t, _QWORD *, uint64_t))sub_1BDE1CF3C);
      v19 = v32;
      swift_bridgeObjectRelease();
      swift_release();
      if (v32)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Document._StorageClass(0);
        swift_allocObject();
        v34 = swift_retain();
        *(_QWORD *)(isEscapingClosureAtFileLocation + v22) = sub_1BDDA0F18(v34);
        swift_release();
      }
      v35 = (uint64_t *)(*(_QWORD *)(isEscapingClosureAtFileLocation + v22)
                      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences);
      swift_beginAccess();
      *v35 = v33;
      swift_bridgeObjectRelease();
      swift_retain();
      v36 = swift_bridgeObjectRetain();
      v37 = sub_1BDE25994(v36, v4, sub_1BE19A380, (void (*)(uint64_t, _QWORD *, uint64_t))sub_1BDE1D180);
      swift_bridgeObjectRelease();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Document._StorageClass(0);
        swift_allocObject();
        v40 = swift_retain();
        *(_QWORD *)(isEscapingClosureAtFileLocation + v22) = sub_1BDDA0F18(v40);
        swift_release();
      }
      v41 = (uint64_t *)(*(_QWORD *)(isEscapingClosureAtFileLocation + v22)
                      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
      swift_beginAccess();
      *v41 = v37;
      swift_bridgeObjectRelease();
      sub_1BDD8C8A8(isEscapingClosureAtFileLocation);
      if (qword_1ED6F4510 != -1)
        swift_once();
      v42 = *(void **)(qword_1ED6F8BE8 + 40);
      v17 = (_QWORD *)swift_allocObject();
      v13 = v47;
      v17[2] = v47;
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = sub_1BDE28224;
      *(_QWORD *)(v43 + 24) = v17;
      v60 = sub_1BDE28190;
      v61 = v43;
      aBlock = MEMORY[0x1E0C809B0];
      v57 = 1107296256;
      v58 = sub_1BDD843A8;
      v59 = &block_descriptor_139;
      v44 = _Block_copy(&aBlock);
      v4 = v61;
      v18 = v42;
      v45 = v13;
      swift_retain();
      swift_release();
      dispatch_sync(v18, v44);

      _Block_release(v44);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      result = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        return result;
      __break(1u);
LABEL_20:
      swift_once();
    }
    return sub_1BDD9C3E0(isEscapingClosureAtFileLocation, type metadata accessor for Proto_Document);
  }
  else
  {
    sub_1BDDFCAFC();
    swift_allocError();
    *(_QWORD *)v39 = 0xD00000000000002CLL;
    *(_QWORD *)(v39 + 8) = 0x80000001BE1CD850;
    *(_BYTE *)(v39 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t sub_1BDE1880C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void (*a4)(uint64_t, _QWORD *, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, _QWORD *, uint64_t);
  uint64_t v74;
  _QWORD v75[9];
  uint64_t v76;

  v73 = a4;
  v66 = a3;
  v74 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v65 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v64 = (uint64_t)&v56 - v10;
  v11 = type metadata accessor for Proto_Version(0);
  v62 = *(_QWORD *)(v11 - 8);
  v63 = v11;
  MEMORY[0x1E0C80A78](v11);
  v61 = (uint64_t *)((char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3728);
  v14 = MEMORY[0x1E0C80A78](v13);
  v60 = (uint64_t)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v59 = (uint64_t)&v56 - v16;
  v58 = type metadata accessor for Proto_CRDT(0);
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v70 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3790);
  v19 = MEMORY[0x1E0C80A78](v18);
  v69 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v56 - v21;
  v23 = type metadata accessor for Proto_KeyPath(0);
  v67 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v25 = (uint64_t *)((char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *a1;
  v26 = a1[1];
  v71 = a1[2];
  v76 = a1[3];
  v68 = a1[4];
  sub_1BE1B20E4();
  v28 = *(int *)(type metadata accessor for Proto_Reference(0) + 20);
  if (qword_1ED6EFD78 != -1)
    swift_once();
  *(_QWORD *)(a5 + v28) = qword_1ED6EFD68;
  *v25 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  v29 = sub_1BE1B20CC();
  v31 = v30;
  sub_1BE1B20E4();
  sub_1BDDB6CA4(v27, v26);
  v32 = v31;
  v33 = a5;
  sub_1BDDB796C(v29, v32);
  v25[1] = v27;
  v25[2] = v26;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    v34 = swift_retain();
    *(_QWORD *)(a5 + v28) = sub_1BDDA1424(v34);
    swift_release();
  }
  v35 = *(_QWORD *)(a5 + v28);
  sub_1BDDA2E8C((uint64_t)v25, (uint64_t)v22, type metadata accessor for Proto_KeyPath);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v22, 0, 1, v23);
  v36 = v69;
  sub_1BDDA2EF0((uint64_t)v22, v69, &qword_1ED6F3790);
  v37 = v35 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v36, v37, &qword_1ED6F3790);
  swift_endAccess();
  swift_release();
  sub_1BDDB6CA4(v27, v26);
  v75[0] = v27;
  v75[1] = v26;
  v38 = v71;
  v75[2] = v71;
  v75[3] = v76;
  v75[4] = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v39 = v74;
  v40 = swift_retain();
  v41 = (uint64_t)v70;
  v42 = v72;
  v73(v40, v75, v39);
  if (v42)
  {
    result = sub_1BDD9C3E0(v33, type metadata accessor for Proto_Reference);
    *v66 = v42;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Reference._StorageClass(0);
      swift_allocObject();
      v44 = swift_retain();
      *(_QWORD *)(v33 + v28) = sub_1BDDA1424(v44);
      swift_release();
    }
    v45 = *(_QWORD *)(v33 + v28);
    v46 = v59;
    sub_1BDDA2E8C(v41, v59, type metadata accessor for Proto_CRDT);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v46, 0, 1, v58);
    v47 = v60;
    sub_1BDDA2EF0(v46, v60, &qword_1ED6F3728);
    v48 = v45 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v47, v48, &qword_1ED6F3728);
    swift_endAccess();
    swift_release();
    v75[5] = v38;
    v75[6] = v76;
    v49 = v61;
    sub_1BDDAD780(v39, v61);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Reference._StorageClass(0);
      swift_allocObject();
      v50 = swift_retain();
      *(_QWORD *)(v33 + v28) = sub_1BDDA1424(v50);
      swift_release();
    }
    v51 = *(_QWORD *)(v33 + v28);
    v52 = (uint64_t)v49;
    v53 = v64;
    sub_1BDDA2E8C(v52, v64, type metadata accessor for Proto_Version);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v53, 0, 1, v63);
    v54 = v65;
    sub_1BDDA2EF0(v53, v65, &qword_1ED6F37A8);
    v55 = v51 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v54, v55, &qword_1ED6F37A8);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BDE18E48(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37C8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v29 = (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v28 - v5;
  v7 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (_QWORD *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Proto_Value(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v28 - v14;
  v16 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *a1;
  sub_1BE1B20E4();
  v19 = *(int *)(v16 + 20);
  if (qword_1ED6F3268 != -1)
    swift_once();
  *(_QWORD *)&v18[v19] = qword_1ED6F37F0;
  swift_retain();
  sub_1BE1B20E4();
  v20 = *(int *)(v10 + 20);
  if (qword_1ED6F2718 != -1)
    swift_once();
  *(_QWORD *)&v15[v20] = qword_1ED6F2708;
  v30 = v28;
  swift_retain();
  sub_1BDDAD780(v31, v9);
  sub_1BE128B60((uint64_t)v9);
  sub_1BDD9C318((uint64_t)v15, (uint64_t)v13, type metadata accessor for Proto_Value);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    v21 = swift_retain();
    *(_QWORD *)&v18[v19] = sub_1BDDA0F18(v21);
    swift_release();
  }
  v22 = *(_QWORD *)&v18[v19];
  sub_1BDDA2E8C((uint64_t)v13, (uint64_t)v6, type metadata accessor for Proto_Value);
  v23 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v6, 0, 1, v23);
  v24 = v29;
  sub_1BDDA2EF0((uint64_t)v6, v29, &qword_1ED6F37C8);
  v25 = v22 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v24, v25, &qword_1ED6F37C8);
  swift_endAccess();
  swift_release();
  sub_1BDD8C8A8((uint64_t)v18);
  sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_Value);
  sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
  v26 = sub_1BE1B227C();
  sub_1BDD9C3E0((uint64_t)v18, type metadata accessor for Proto_Document);
  return v26;
}

uint64_t sub_1BDE191E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  uint64_t isEscapingClosureAtFileLocation;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 aBlock;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)();
  char *v42;
  uint64_t v43;

  v3 = v1;
  v43 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for Proto4_Root(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v12 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v13 = a1;
  v14 = v3;
  sub_1BDE16288(v13, (void (*)(uint64_t))sub_1BDE280F4, (uint64_t)v10);
  if (v2)
    return v14;
  if (*(_BYTE *)(v3 + 72))
  {
    LODWORD(v36) = *(unsigned __int8 *)(v3 + 72);
    v15 = *(void **)(v3 + 16);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v16 = *(void **)(qword_1ED6F8BE8 + 40);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    v7 = (char *)swift_allocObject();
    *((_QWORD *)v7 + 2) = sub_1BDE28224;
    *((_QWORD *)v7 + 3) = v17;
    v41 = sub_1BDE28190;
    v42 = v7;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v39 = sub_1BDD843A8;
    v40 = &block_descriptor_117;
    v18 = _Block_copy(&aBlock);
    v19 = v16;
    v20 = v15;
    swift_retain();
    swift_release();
    dispatch_sync(v19, v18);

    _Block_release(v18);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      *(_QWORD *)((char *)&v37 + 6) = 0;
      *(_QWORD *)&v37 = 0;
      BYTE14(v37) = 8;
      sub_1BDDD2B90();
      *(_QWORD *)&aBlock = v37;
      *((_QWORD *)&aBlock + 1) = DWORD2(v37) | ((unint64_t)BYTE12(v37) << 32) | ((unint64_t)BYTE13(v37) << 40) | ((unint64_t)BYTE14(v37) << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v24 = sub_1BE1B227C();
      v26 = v25;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v24, v26);
      v14 = aBlock;
      sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
      return v14;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for Upgrade4to5();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v11;
    v22[3] = v12;
    v22[4] = v11;
    v22[5] = v12;
    v22[6] = 0;
    v22[7] = 0;
    sub_1BE0F023C((uint64_t)v10, (uint64_t)v7);
    *(_QWORD *)((char *)&aBlock + 6) = 0;
    *(_QWORD *)&aBlock = 0;
    BYTE14(aBlock) = 8;
    sub_1BDDD2B90();
    *(_QWORD *)&v37 = aBlock;
    *((_QWORD *)&v37 + 1) = DWORD2(aBlock) | ((unint64_t)BYTE12(aBlock) << 32) | ((unint64_t)BYTE13(aBlock) << 40) | ((unint64_t)BYTE14(aBlock) << 48);
    sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
    v27 = sub_1BE1B227C();
    v29 = v28;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v27, v29);
    isEscapingClosureAtFileLocation = *(_QWORD *)(v3 + 16);
    if (qword_1ED6F4510 == -1)
      goto LABEL_10;
  }
  swift_once();
LABEL_10:
  v30 = *(void **)(qword_1ED6F8BE8 + 40);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = isEscapingClosureAtFileLocation;
  v32 = swift_allocObject();
  v36 = (id)isEscapingClosureAtFileLocation;
  *(_QWORD *)(v32 + 16) = sub_1BDE28224;
  *(_QWORD *)(v32 + 24) = v31;
  v41 = sub_1BDE28190;
  v42 = (char *)v32;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v39 = sub_1BDD843A8;
  v40 = &block_descriptor_128;
  v33 = _Block_copy(&aBlock);
  v34 = v30;
  v35 = v36;
  swift_retain();
  swift_release();
  dispatch_sync(v34, v33);

  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v33 & 1) != 0)
    __break(1u);
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto4_Root);
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
  return v37;
}

uint64_t sub_1BDE197EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  uint64_t isEscapingClosureAtFileLocation;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 aBlock;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)();
  char *v42;
  uint64_t v43;

  v3 = v1;
  v43 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for Proto4_Root(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v12 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v13 = a1;
  v14 = v3;
  sub_1BDE16288(v13, (void (*)(uint64_t))sub_1BDE27EAC, (uint64_t)v10);
  if (v2)
    return v14;
  if (*(_BYTE *)(v3 + 72))
  {
    LODWORD(v36) = *(unsigned __int8 *)(v3 + 72);
    v15 = *(void **)(v3 + 16);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v16 = *(void **)(qword_1ED6F8BE8 + 40);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    v7 = (char *)swift_allocObject();
    *((_QWORD *)v7 + 2) = sub_1BDE28224;
    *((_QWORD *)v7 + 3) = v17;
    v41 = sub_1BDE28190;
    v42 = v7;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v39 = sub_1BDD843A8;
    v40 = &block_descriptor_36;
    v18 = _Block_copy(&aBlock);
    v19 = v16;
    v20 = v15;
    swift_retain();
    swift_release();
    dispatch_sync(v19, v18);

    _Block_release(v18);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      *(_QWORD *)((char *)&v37 + 6) = 0;
      *(_QWORD *)&v37 = 0;
      BYTE14(v37) = 8;
      sub_1BDDD2B90();
      *(_QWORD *)&aBlock = v37;
      *((_QWORD *)&aBlock + 1) = DWORD2(v37) | ((unint64_t)BYTE12(v37) << 32) | ((unint64_t)BYTE13(v37) << 40) | ((unint64_t)BYTE14(v37) << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v24 = sub_1BE1B227C();
      v26 = v25;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v24, v26);
      v14 = aBlock;
      sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
      return v14;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for Upgrade4to5();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v11;
    v22[3] = v12;
    v22[4] = v11;
    v22[5] = v12;
    v22[6] = 0;
    v22[7] = 0;
    sub_1BE0F023C((uint64_t)v10, (uint64_t)v7);
    *(_QWORD *)((char *)&aBlock + 6) = 0;
    *(_QWORD *)&aBlock = 0;
    BYTE14(aBlock) = 8;
    sub_1BDDD2B90();
    *(_QWORD *)&v37 = aBlock;
    *((_QWORD *)&v37 + 1) = DWORD2(aBlock) | ((unint64_t)BYTE12(aBlock) << 32) | ((unint64_t)BYTE13(aBlock) << 40) | ((unint64_t)BYTE14(aBlock) << 48);
    sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
    v27 = sub_1BE1B227C();
    v29 = v28;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v27, v29);
    isEscapingClosureAtFileLocation = *(_QWORD *)(v3 + 16);
    if (qword_1ED6F4510 == -1)
      goto LABEL_10;
  }
  swift_once();
LABEL_10:
  v30 = *(void **)(qword_1ED6F8BE8 + 40);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = isEscapingClosureAtFileLocation;
  v32 = swift_allocObject();
  v36 = (id)isEscapingClosureAtFileLocation;
  *(_QWORD *)(v32 + 16) = sub_1BDE28224;
  *(_QWORD *)(v32 + 24) = v31;
  v41 = sub_1BDE28190;
  v42 = (char *)v32;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v39 = sub_1BDD843A8;
  v40 = &block_descriptor_47;
  v33 = _Block_copy(&aBlock);
  v34 = v30;
  v35 = v36;
  swift_retain();
  swift_release();
  dispatch_sync(v34, v33);

  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v33 & 1) != 0)
    __break(1u);
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto4_Root);
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
  return v37;
}

uint64_t sub_1BDE19DF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  uint64_t isEscapingClosureAtFileLocation;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 aBlock;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)();
  char *v42;
  uint64_t v43;

  v3 = v1;
  v43 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for Proto4_Root(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v12 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v13 = a1;
  v14 = v3;
  sub_1BDE16288(v13, (void (*)(uint64_t))sub_1BDE27E70, (uint64_t)v10);
  if (v2)
    return v14;
  if (*(_BYTE *)(v3 + 72))
  {
    LODWORD(v36) = *(unsigned __int8 *)(v3 + 72);
    v15 = *(void **)(v3 + 16);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v16 = *(void **)(qword_1ED6F8BE8 + 40);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    v7 = (char *)swift_allocObject();
    *((_QWORD *)v7 + 2) = sub_1BDD84410;
    *((_QWORD *)v7 + 3) = v17;
    v41 = sub_1BDD843E8;
    v42 = v7;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v39 = sub_1BDD843A8;
    v40 = &block_descriptor_1;
    v18 = _Block_copy(&aBlock);
    v19 = v16;
    v20 = v15;
    swift_retain();
    swift_release();
    dispatch_sync(v19, v18);

    _Block_release(v18);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      *(_QWORD *)((char *)&v37 + 6) = 0;
      *(_QWORD *)&v37 = 0;
      BYTE14(v37) = 8;
      sub_1BDDD2B90();
      *(_QWORD *)&aBlock = v37;
      *((_QWORD *)&aBlock + 1) = DWORD2(v37) | ((unint64_t)BYTE12(v37) << 32) | ((unint64_t)BYTE13(v37) << 40) | ((unint64_t)BYTE14(v37) << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v24 = sub_1BE1B227C();
      v26 = v25;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v24, v26);
      v14 = aBlock;
      sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
      return v14;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for Upgrade4to5();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v11;
    v22[3] = v12;
    v22[4] = v11;
    v22[5] = v12;
    v22[6] = 0;
    v22[7] = 0;
    sub_1BE0F023C((uint64_t)v10, (uint64_t)v7);
    *(_QWORD *)((char *)&aBlock + 6) = 0;
    *(_QWORD *)&aBlock = 0;
    BYTE14(aBlock) = 8;
    sub_1BDDD2B90();
    *(_QWORD *)&v37 = aBlock;
    *((_QWORD *)&v37 + 1) = DWORD2(aBlock) | ((unint64_t)BYTE12(aBlock) << 32) | ((unint64_t)BYTE13(aBlock) << 40) | ((unint64_t)BYTE14(aBlock) << 48);
    sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
    v27 = sub_1BE1B227C();
    v29 = v28;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v27, v29);
    isEscapingClosureAtFileLocation = *(_QWORD *)(v3 + 16);
    if (qword_1ED6F4510 == -1)
      goto LABEL_10;
  }
  swift_once();
LABEL_10:
  v30 = *(void **)(qword_1ED6F8BE8 + 40);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = isEscapingClosureAtFileLocation;
  v32 = swift_allocObject();
  v36 = (id)isEscapingClosureAtFileLocation;
  *(_QWORD *)(v32 + 16) = sub_1BDE28224;
  *(_QWORD *)(v32 + 24) = v31;
  v41 = sub_1BDE28190;
  v42 = (char *)v32;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v39 = sub_1BDD843A8;
  v40 = &block_descriptor_25;
  v33 = _Block_copy(&aBlock);
  v34 = v30;
  v35 = v36;
  swift_retain();
  swift_release();
  dispatch_sync(v34, v33);

  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v33 & 1) != 0)
    __break(1u);
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto4_Root);
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
  return v37;
}

uint64_t sub_1BDE1A3FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  id v20;
  uint64_t isEscapingClosureAtFileLocation;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  id v35;
  id v36;
  __int128 v37;
  __int128 aBlock;
  uint64_t (*v39)(uint64_t);
  void *v40;
  uint64_t (*v41)();
  char *v42;
  uint64_t v43;

  v3 = v1;
  v43 = *MEMORY[0x1E0C80C00];
  v5 = type metadata accessor for Proto4_Root(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v12 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v3 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v13 = a1;
  v14 = v3;
  sub_1BDE16288(v13, (void (*)(uint64_t))sub_1BDE280B8, (uint64_t)v10);
  if (v2)
    return v14;
  if (*(_BYTE *)(v3 + 72))
  {
    LODWORD(v36) = *(unsigned __int8 *)(v3 + 72);
    v15 = *(void **)(v3 + 16);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v16 = *(void **)(qword_1ED6F8BE8 + 40);
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v15;
    v7 = (char *)swift_allocObject();
    *((_QWORD *)v7 + 2) = sub_1BDE28224;
    *((_QWORD *)v7 + 3) = v17;
    v41 = sub_1BDE28190;
    v42 = v7;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v39 = sub_1BDD843A8;
    v40 = &block_descriptor_95;
    v18 = _Block_copy(&aBlock);
    v19 = v16;
    v20 = v15;
    swift_retain();
    swift_release();
    dispatch_sync(v19, v18);

    _Block_release(v18);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      *(_QWORD *)((char *)&v37 + 6) = 0;
      *(_QWORD *)&v37 = 0;
      BYTE14(v37) = 8;
      sub_1BDDD2B90();
      *(_QWORD *)&aBlock = v37;
      *((_QWORD *)&aBlock + 1) = DWORD2(v37) | ((unint64_t)BYTE12(v37) << 32) | ((unint64_t)BYTE13(v37) << 40) | ((unint64_t)BYTE14(v37) << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v24 = sub_1BE1B227C();
      v26 = v25;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v24, v26);
      v14 = aBlock;
      sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
      return v14;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for Upgrade4to5();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v11;
    v22[3] = v12;
    v22[4] = v11;
    v22[5] = v12;
    v22[6] = 0;
    v22[7] = 0;
    sub_1BE0F023C((uint64_t)v10, (uint64_t)v7);
    *(_QWORD *)((char *)&aBlock + 6) = 0;
    *(_QWORD *)&aBlock = 0;
    BYTE14(aBlock) = 8;
    sub_1BDDD2B90();
    *(_QWORD *)&v37 = aBlock;
    *((_QWORD *)&v37 + 1) = DWORD2(aBlock) | ((unint64_t)BYTE12(aBlock) << 32) | ((unint64_t)BYTE13(aBlock) << 40) | ((unint64_t)BYTE14(aBlock) << 48);
    sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
    v27 = sub_1BE1B227C();
    v29 = v28;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v27, v29);
    isEscapingClosureAtFileLocation = *(_QWORD *)(v3 + 16);
    if (qword_1ED6F4510 == -1)
      goto LABEL_10;
  }
  swift_once();
LABEL_10:
  v30 = *(void **)(qword_1ED6F8BE8 + 40);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = isEscapingClosureAtFileLocation;
  v32 = swift_allocObject();
  v36 = (id)isEscapingClosureAtFileLocation;
  *(_QWORD *)(v32 + 16) = sub_1BDE28224;
  *(_QWORD *)(v32 + 24) = v31;
  v41 = sub_1BDE28190;
  v42 = (char *)v32;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v39 = sub_1BDD843A8;
  v40 = &block_descriptor_106;
  v33 = _Block_copy(&aBlock);
  v34 = v30;
  v35 = v36;
  swift_retain();
  swift_release();
  dispatch_sync(v34, v33);

  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v33 & 1) != 0)
    __break(1u);
  sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto4_Root);
  sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
  return v37;
}

uint64_t sub_1BDE1AA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 aBlock;
  uint64_t (*v40)(uint64_t);
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for Proto4_Root(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  sub_1BDE16288(a1, (void (*)(uint64_t))sub_1BDE2806C, (uint64_t)v9);
  if (v2)
    return v1;
  v35 = v4;
  v36 = a1;
  v37 = v9;
  if (*(_BYTE *)(v1 + 72))
  {
    v11 = *(void **)(v1 + 16);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v12 = *(void **)(qword_1ED6F8BE8 + 40);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v11;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = sub_1BDE28224;
    *(_QWORD *)(v14 + 24) = v13;
    v42 = sub_1BDE28190;
    v43 = v14;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v40 = sub_1BDD843A8;
    v41 = &block_descriptor_73;
    v15 = _Block_copy(&aBlock);
    v16 = v12;
    v17 = v11;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v15);

    _Block_release(v15);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    v18 = swift_release();
    if ((v15 & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 200))(v18);
      *(_QWORD *)((char *)&v38 + 6) = 0;
      *(_QWORD *)&v38 = 0;
      BYTE14(v38) = 8;
      sub_1BDDD2B90();
      *(_QWORD *)&aBlock = v38;
      *((_QWORD *)&aBlock + 1) = DWORD2(v38) | ((unint64_t)BYTE12(v38) << 32) | ((unint64_t)BYTE13(v38) << 40) | ((unint64_t)BYTE14(v38) << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v19 = (uint64_t)v37;
      v23 = sub_1BE1B227C();
      v25 = v24;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v23, v25);
      v1 = aBlock;
      sub_1BDD9C3E0(v19, type metadata accessor for Proto_Document);
      return v1;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for Upgrade4to5();
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = v10;
    v21 = MEMORY[0x1E0DEE9E0];
    v20[3] = MEMORY[0x1E0DEE9E0];
    v20[4] = v10;
    v20[5] = v21;
    v20[6] = 0;
    v20[7] = 0;
    v14 = (uint64_t)v6;
    sub_1BE0F023C((uint64_t)v37, (uint64_t)v6);
    *(_QWORD *)((char *)&aBlock + 6) = 0;
    *(_QWORD *)&aBlock = 0;
    BYTE14(aBlock) = 8;
    sub_1BDDD2B90();
    *(_QWORD *)&v38 = aBlock;
    *((_QWORD *)&v38 + 1) = DWORD2(aBlock) | ((unint64_t)BYTE12(aBlock) << 32) | ((unint64_t)BYTE13(aBlock) << 40) | ((unint64_t)BYTE14(aBlock) << 48);
    sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
    v26 = sub_1BE1B227C();
    v28 = v27;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v26, v28);
    v11 = *(void **)(v1 + 16);
    if (qword_1ED6F4510 == -1)
      goto LABEL_10;
  }
  swift_once();
LABEL_10:
  v29 = *(void **)(qword_1ED6F8BE8 + 40);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v11;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = sub_1BDE28224;
  *(_QWORD *)(v31 + 24) = v30;
  v42 = sub_1BDE28190;
  v43 = v31;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v40 = sub_1BDD843A8;
  v41 = &block_descriptor_84;
  v32 = _Block_copy(&aBlock);
  v33 = v29;
  v34 = v11;
  swift_retain();
  swift_release();
  dispatch_sync(v33, v32);

  _Block_release(v32);
  LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v32 & 1) != 0)
    __break(1u);
  sub_1BDD9C3E0(v14, type metadata accessor for Proto4_Root);
  sub_1BDD9C3E0((uint64_t)v37, type metadata accessor for Proto_Document);
  return v38;
}

uint64_t sub_1BDE1B030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  id v22;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  id v43;
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  __int128 aBlock;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t v57;

  v4 = v3;
  v57 = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for Proto4_Root(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v14 = (uint64_t)v50;
  sub_1BDE16598(a1, a2, a3, (uint64_t)v13);
  if (v14)
    return v3;
  v15 = MEMORY[0x1E0DEE9D8];
  v49 = 0;
  v44[1] = v8;
  v46 = a3;
  v47 = a1;
  v48 = a2;
  v45 = v10;
  v50 = v13;
  if (*(_BYTE *)(v4 + 72))
  {
    v16 = *(void **)(v4 + 16);
    if (qword_1ED6F4510 != -1)
      swift_once();
    v17 = *(void **)(qword_1ED6F8BE8 + 40);
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v16;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = sub_1BDE28224;
    *(_QWORD *)(v19 + 24) = v18;
    v55 = sub_1BDE28190;
    v56 = v19;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v53 = sub_1BDD843A8;
    v54 = &block_descriptor_187;
    v20 = _Block_copy(&aBlock);
    v21 = v17;
    v22 = v16;
    swift_retain();
    swift_release();
    dispatch_sync(v21, v20);

    _Block_release(v20);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v46 + 16) + 8) + 40))(v48);
      *(_QWORD *)((char *)&v51 + 6) = 0;
      *(_QWORD *)&v51 = 0;
      BYTE14(v51) = 8;
      v24 = v49;
      sub_1BDDD2B90();
      *(_QWORD *)&aBlock = v51;
      *((_QWORD *)&aBlock + 1) = DWORD2(v51) | ((unint64_t)BYTE12(v51) << 32) | ((unint64_t)BYTE13(v51) << 40) | ((unint64_t)BYTE14(v51) << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v25 = (uint64_t)v50;
      v3 = (uint64_t)v50;
      v26 = sub_1BE1B227C();
      if (!v24)
      {
        v33 = v26;
        v34 = v27;
        sub_1BE1B1EA4();
        sub_1BDDB796C(v33, v34);
        v3 = aBlock;
      }
      sub_1BDD9C3E0(v25, type metadata accessor for Proto_Document);
      return v3;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for Upgrade4to5();
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v15;
    v29 = MEMORY[0x1E0DEE9E0];
    v28[3] = MEMORY[0x1E0DEE9E0];
    v28[4] = v15;
    v28[5] = v29;
    v28[6] = 0;
    v28[7] = 0;
    v31 = v49;
    v30 = (uint64_t)v50;
    v3 = (uint64_t)v28;
    sub_1BE0F023C((uint64_t)v50, (uint64_t)v45);
    if (v31)
    {
      sub_1BDD9C3E0(v30, type metadata accessor for Proto_Document);
      swift_release();
      return v3;
    }
    *(_QWORD *)((char *)&aBlock + 6) = 0;
    *(_QWORD *)&aBlock = 0;
    BYTE14(aBlock) = 8;
    sub_1BDDD2B90();
    *(_QWORD *)&v51 = aBlock;
    *((_QWORD *)&v51 + 1) = DWORD2(aBlock) | ((unint64_t)BYTE12(aBlock) << 32) | ((unint64_t)BYTE13(aBlock) << 40) | ((unint64_t)BYTE14(aBlock) << 48);
    sub_1BDD8422C(&qword_1EF52C4A0, type metadata accessor for Proto4_Root, (uint64_t)&unk_1BE1B903C);
    v35 = sub_1BE1B227C();
    v37 = v36;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v35, v37);
    isEscapingClosureAtFileLocation = *(_QWORD *)(v4 + 16);
    if (qword_1ED6F4510 == -1)
      goto LABEL_13;
  }
  swift_once();
LABEL_13:
  v38 = *(void **)(qword_1ED6F8BE8 + 40);
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = isEscapingClosureAtFileLocation;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = sub_1BDE28224;
  *(_QWORD *)(v40 + 24) = v39;
  v55 = sub_1BDE28190;
  v56 = v40;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v53 = sub_1BDD843A8;
  v54 = &block_descriptor_198;
  v41 = _Block_copy(&aBlock);
  v42 = v38;
  v43 = (id)isEscapingClosureAtFileLocation;
  swift_retain();
  swift_release();
  dispatch_sync(v42, v41);

  _Block_release(v41);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v41 & 1) != 0)
    __break(1u);
  sub_1BDD9C3E0((uint64_t)v45, type metadata accessor for Proto4_Root);
  sub_1BDD9C3E0((uint64_t)v50, type metadata accessor for Proto_Document);
  return v51;
}

uint64_t sub_1BDE1B690(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  id v22;
  char isEscapingClosureAtFileLocation;
  uint64_t v24;
  _WORD v26[11];
  unsigned __int8 v27;
  uint64_t aBlock;
  unint64_t v29;
  uint64_t (*v30)(uint64_t);
  void *v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  *(_QWORD *)(v4 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v4 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  sub_1BDE16C34(a2, a3, a4, (uint64_t)v12);
  if (!v5)
  {
    if (*(_BYTE *)(v4 + 72))
    {
      memset(&v26[4], 0, 14);
      v27 = 8;
      sub_1BDDD2B90();
      aBlock = *(_QWORD *)&v26[4];
      v29 = *(unsigned int *)&v26[8] | ((unint64_t)LOBYTE(v26[10]) << 32) | ((unint64_t)HIBYTE(v26[10]) << 40) | ((unint64_t)v27 << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v13 = sub_1BE1B227C();
      v15 = v14;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v13, v15);
      v4 = aBlock;
      if (qword_1ED6F4510 != -1)
        swift_once();
      v16 = *(void **)(qword_1ED6F8BE8 + 40);
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = a1;
      v18 = v17;
      *(_QWORD *)v26 = v17;
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = sub_1BDE28224;
      *(_QWORD *)(v19 + 24) = v18;
      v32 = sub_1BDE28190;
      v33 = v19;
      aBlock = MEMORY[0x1E0C809B0];
      v29 = 1107296256;
      v30 = sub_1BDD843A8;
      v31 = &block_descriptor_176;
      v20 = _Block_copy(&aBlock);
      v21 = v16;
      v22 = a1;
      swift_retain();
      swift_release();
      dispatch_sync(v21, v20);

      _Block_release(v20);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
    else
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v24 = 0xD00000000000002CLL;
      *(_QWORD *)(v24 + 8) = 0x80000001BE1CD850;
      *(_BYTE *)(v24 + 16) = 3;
      swift_willThrow();
    }
    sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_Document);
  }
  return v4;
}

uint64_t sub_1BDE1BA1C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  id v18;
  char isEscapingClosureAtFileLocation;
  uint64_t v20;
  _WORD v22[11];
  unsigned __int8 v23;
  uint64_t aBlock;
  unint64_t v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  sub_1BDE16F60(a2, (uint64_t)v8);
  if (!v3)
  {
    if (*(_BYTE *)(v2 + 72))
    {
      memset(&v22[4], 0, 14);
      v23 = 8;
      sub_1BDDD2B90();
      aBlock = *(_QWORD *)&v22[4];
      v25 = *(unsigned int *)&v22[8] | ((unint64_t)LOBYTE(v22[10]) << 32) | ((unint64_t)HIBYTE(v22[10]) << 40) | ((unint64_t)v23 << 48);
      sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
      v9 = sub_1BE1B227C();
      v11 = v10;
      sub_1BE1B1EA4();
      sub_1BDDB796C(v9, v11);
      v2 = aBlock;
      if (qword_1ED6F4510 != -1)
        swift_once();
      v12 = *(void **)(qword_1ED6F8BE8 + 40);
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = a1;
      v14 = v13;
      *(_QWORD *)v22 = v13;
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = sub_1BDE28224;
      *(_QWORD *)(v15 + 24) = v14;
      v28 = sub_1BDE28190;
      v29 = v15;
      aBlock = MEMORY[0x1E0C809B0];
      v25 = 1107296256;
      v26 = sub_1BDD843A8;
      v27 = &block_descriptor_161;
      v16 = _Block_copy(&aBlock);
      v17 = v12;
      v18 = a1;
      swift_retain();
      swift_release();
      dispatch_sync(v17, v16);

      _Block_release(v16);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
    else
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v20 = 0xD00000000000002CLL;
      *(_QWORD *)(v20 + 8) = 0x80000001BE1CD880;
      *(_BYTE *)(v20 + 16) = 3;
      swift_willThrow();
    }
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Document);
  }
  return v2;
}

uint64_t sub_1BDE1BD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _WORD v15[11];
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  sub_1BDE169BC(a1, a2, a3, (uint64_t)v10);
  if (!v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 40))(a2);
    memset(&v15[4], 0, 14);
    v16 = 8;
    sub_1BDDD2B90();
    v17 = *(_QWORD *)&v15[4];
    v18 = *(unsigned int *)&v15[8] | ((unint64_t)LOBYTE(v15[10]) << 32) | ((unint64_t)HIBYTE(v15[10]) << 40) | ((unint64_t)v16 << 48);
    sub_1BDD8422C((unint64_t *)&qword_1ED6F3820, type metadata accessor for Proto_Document, (uint64_t)&unk_1BE1C690C);
    v12 = sub_1BE1B227C();
    v14 = v13;
    sub_1BE1B1EA4();
    sub_1BDDB796C(v12, v14);
    v3 = v17;
    sub_1BDD9C3E0((uint64_t)v10, type metadata accessor for Proto_Document);
  }
  return v3;
}

uint64_t sub_1BDE1BFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;

  v4 = v3;
  v5 = v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3290);
  v8 = MEMORY[0x1E0C80A78](v7);
  v67 = (uint64_t)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)v63 - v11);
  MEMORY[0x1E0C80A78](v10);
  v68 = (char *)v63 - v13;
  v14 = type metadata accessor for Proto_Constants(0);
  v70 = *(_QWORD *)(v14 - 8);
  v71 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v69 = (uint64_t)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v72 = (char *)v63 - v17;
  v18 = type metadata accessor for Proto_RetainCounts(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v21 = *(int *)(v18 + 20);
  if (qword_1EF52BB38 != -1)
LABEL_45:
    swift_once();
  *(_QWORD *)&v20[v21] = qword_1EF52BB30;
  swift_retain();
  swift_retain();
  v22 = swift_bridgeObjectRetain();
  v23 = sub_1BDE24E1C(v22);
  swift_bridgeObjectRelease();
  swift_release();
  if (v4)
  {
    sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for Proto_RetainCounts);
    return (uint64_t)v12;
  }
  v66 = v5;
  v63[0] = (uint64_t)v12;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_RetainCounts._StorageClass(0);
    swift_allocObject();
    v24 = swift_retain();
    *(_QWORD *)&v20[v21] = sub_1BE12EA90(v24);
    swift_release();
  }
  v25 = (uint64_t *)(*(_QWORD *)&v20[v21]
                  + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__referenceKeys);
  swift_beginAccess();
  *v25 = v23;
  swift_bridgeObjectRelease();
  v26 = swift_bridgeObjectRetain();
  v4 = sub_1BDE0D608(v26);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_RetainCounts._StorageClass(0);
    swift_allocObject();
    v27 = swift_retain();
    *(_QWORD *)&v20[v21] = sub_1BE12EA90(v27);
    swift_release();
  }
  v12 = (uint64_t *)(*(_QWORD *)&v20[v21]
                  + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__referenceRetainCounts);
  swift_beginAccess();
  *v12 = v4;
  result = swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(a2 + 16);
  if (v29 >> 58)
  {
    __break(1u);
    goto LABEL_47;
  }
  v63[1] = 0;
  v64 = v21;
  v65 = v18;
  v73 = sub_1BDDD6DF0(32 * v29);
  v74 = v30;
  v5 = a2 + 64;
  v31 = 1 << *(_BYTE *)(a2 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v18 = v32 & *(_QWORD *)(a2 + 64);
  v33 = (unint64_t)(v31 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v34 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v35 = v34 | (v21 << 6);
      goto LABEL_13;
    }
    v38 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v38 >= v33)
    {
LABEL_33:
      swift_release();
      v41 = v73;
      v42 = v74;
      sub_1BDDB6CA4(v73, v74);
      v43 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_RetainCounts._StorageClass(0);
        swift_allocObject();
        v44 = swift_retain();
        *(_QWORD *)&v20[v43] = sub_1BE12EA90(v44);
        swift_release();
      }
      v45 = (uint64_t *)(*(_QWORD *)&v20[v43]
                      + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assetDigests);
      swift_beginAccess();
      v46 = *v45;
      v47 = v45[1];
      *v45 = v41;
      v45[1] = v42;
      sub_1BDDB796C(v46, v47);
      v48 = swift_bridgeObjectRetain();
      v49 = sub_1BDE0D8B0(v48);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = (uint64_t)v72;
      v52 = (uint64_t)v68;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        type metadata accessor for Proto_RetainCounts._StorageClass(0);
        swift_allocObject();
        v53 = swift_retain();
        *(_QWORD *)&v20[v43] = sub_1BE12EA90(v53);
        swift_release();
      }
      v54 = (uint64_t *)(*(_QWORD *)&v20[v43]
                      + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assetRetainCounts);
      swift_beginAccess();
      *v54 = v49;
      swift_bridgeObjectRelease();
      sub_1BDDC90C0(v52);
      v56 = v70;
      v55 = v71;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v52, 1, v71) == 1)
      {
        sub_1BDD86E30(v52, &qword_1ED6F3290);
      }
      else
      {
        sub_1BDDA2E8C(v52, v51, type metadata accessor for Proto_Constants);
        sub_1BDD9C318(v51, v69, type metadata accessor for Proto_Constants);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_RetainCounts._StorageClass(0);
          swift_allocObject();
          v57 = swift_retain();
          *(_QWORD *)&v20[v43] = sub_1BE12EA90(v57);
          swift_release();
        }
        v58 = *(_QWORD *)&v20[v43];
        v59 = v63[0];
        sub_1BDDA2E8C(v69, v63[0], type metadata accessor for Proto_Constants);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v59, 0, 1, v55);
        v60 = v59;
        v61 = v67;
        sub_1BDDA2EF0(v60, v67, &qword_1ED6F3290);
        v62 = v58
            + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
        swift_beginAccess();
        swift_retain();
        sub_1BDDA1AF4(v61, v62, &qword_1ED6F3290);
        swift_endAccess();
        swift_release();
        sub_1BDD9C3E0(v51, type metadata accessor for Proto_Constants);
      }
      sub_1BDD8422C(&qword_1EF52BB50, type metadata accessor for Proto_RetainCounts, (uint64_t)&unk_1BE1C642C);
      v12 = (uint64_t *)sub_1BE1B227C();
      sub_1BDDB796C(v73, v74);
      sub_1BDD9C3E0((uint64_t)v20, type metadata accessor for Proto_RetainCounts);
      return (uint64_t)v12;
    }
    v39 = *(_QWORD *)(v5 + 8 * v38);
    ++v21;
    if (!v39)
    {
      v21 = v38 + 1;
      if (v38 + 1 >= v33)
        goto LABEL_33;
      v39 = *(_QWORD *)(v5 + 8 * v21);
      if (!v39)
      {
        v21 = v38 + 2;
        if (v38 + 2 >= v33)
          goto LABEL_33;
        v39 = *(_QWORD *)(v5 + 8 * v21);
        if (!v39)
        {
          v21 = v38 + 3;
          if (v38 + 3 >= v33)
            goto LABEL_33;
          v39 = *(_QWORD *)(v5 + 8 * v21);
          if (!v39)
          {
            v21 = v38 + 4;
            if (v38 + 4 >= v33)
              goto LABEL_33;
            v39 = *(_QWORD *)(v5 + 8 * v21);
            if (!v39)
              break;
          }
        }
      }
    }
LABEL_32:
    v18 = (v39 - 1) & v39;
    v35 = __clz(__rbit64(v39)) + (v21 << 6);
LABEL_13:
    v36 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v35);
    v37 = *v36;
    v4 = v36[1];
    sub_1BDDB6CA4(*v36, v4);
    v12 = &v73;
    sub_1BE1B1EA4();
    result = sub_1BDDB796C(v37, v4);
  }
  v40 = v38 + 5;
  if (v40 >= v33)
    goto LABEL_33;
  v39 = *(_QWORD *)(v5 + 8 * v40);
  if (v39)
  {
    v21 = v40;
    goto LABEL_32;
  }
  while (1)
  {
    v21 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v21 >= v33)
      goto LABEL_33;
    v39 = *(_QWORD *)(v5 + 8 * v21);
    ++v40;
    if (v39)
      goto LABEL_32;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1BDE1C774()
{
  return sub_1BDE1C7AC(sub_1BDE25870);
}

uint64_t sub_1BDE1C790()
{
  return sub_1BDE1C7AC(sub_1BDDA8D6C);
}

uint64_t sub_1BDE1C7AC(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  result = a1();
  if (!v1)
    return swift_retain();
  return result;
}

uint64_t sub_1BDE1C7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1BDDA8D6C();
  if (!v1)
  {
    v7 = v6;
    type metadata accessor for CREncoder.CRDTKeyedContainer();
    v2 = swift_allocObject();
    v8 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v2 + 16) = v7;
    *(_QWORD *)(v2 + 24) = v0;
    *v5 = v8;
    v5[1] = v8;
    v5[2] = v8;
    swift_retain_n();
    swift_retain();
    sub_1BE1B20E4();
    swift_beginAccess();
    sub_1BDDBE3B0((uint64_t)v5);
    swift_release();
  }
  return v2;
}

uint64_t sub_1BDE1C8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1BDE25870();
  if (!v1)
  {
    v7 = v6;
    type metadata accessor for CREncoder.CRValueKeyedContainer();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = v7;
    *(_QWORD *)(v2 + 24) = v0;
    v8 = MEMORY[0x1E0DEE9D8];
    *v5 = MEMORY[0x1E0DEE9D8];
    v5[1] = v8;
    swift_retain_n();
    swift_retain();
    sub_1BE1B20E4();
    swift_beginAccess();
    sub_1BE128730((uint64_t)v5);
    swift_release();
  }
  return v2;
}

uint64_t sub_1BDE1C9DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BDE1C9F0(a1, a2, a3, a4);
}

uint64_t sub_1BDE1C9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 152))(a3);
  if (!v4)
  {
    v12 = sub_1BDE25870() + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    sub_1BDD9C318(v12, a4, type metadata accessor for Proto_Value);
    *(_QWORD *)(a1 + 80) = v9;
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 88) = v10;
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1BDE1CB1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v14;
  void *v15;

  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  swift_retain();
  swift_release();
  v15 = a3;
  v11 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 152);
  v12 = swift_retain();
  v11(v12);
  if (v4)
  {
    swift_release();
    swift_release();
    swift_release();

  }
  else
  {
    swift_release();
    v14 = sub_1BDE25870() + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    sub_1BDD9C318(v14, a4, type metadata accessor for Proto_Value);
    *(_QWORD *)(a1 + 80) = v9;
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 88) = v10;

    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1BDE1CC84@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = v2;
  v8 = *(_QWORD *)(v2 + 80);
  v7 = *(_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  swift_retain();
  v9 = swift_release();
  a1(v9);
  if (!v3)
  {
    v11 = sub_1BDE25870() + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    sub_1BDD9C318(v11, a2, type metadata accessor for Proto_Value);
    *(_QWORD *)(v4 + 80) = v8;
    swift_retain();
    swift_release();
    *(_QWORD *)(v4 + 88) = v7;
  }
  swift_release();
  return swift_release();
}

uint64_t sub_1BDE1CD80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 176))(a3);
  if (v4)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 88))
    {
      v12 = sub_1BDDA8D6C();
      *(_QWORD *)(a1 + 80) = v10;
      swift_retain();
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 88) = v9;
      swift_release();
      swift_release();
      v13 = v12 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
      swift_beginAccess();
      sub_1BDD9C318(v13, a4, type metadata accessor for Proto_CRDT);
      swift_release();
    }
    else
    {
      sub_1BE1B20E4();
      v14 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(a4 + v14) = qword_1ED6F2E08;
      swift_retain();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1BDE1CF3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *a2;
  v7 = a2[1];
  v9 = a2[4];
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 104))(a3);
  if (v4)
  {
    swift_release();
    swift_release();
    sub_1BDDB796C(v8, v7);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 88))
  {
    v12 = sub_1BDDA8D6C();
    *(_QWORD *)(a1 + 80) = v10;
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 88) = v11;
    swift_release();
    swift_release();
    v13 = v12 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDD9C318(v13, a4, type metadata accessor for Proto_CRDT);
    swift_release();
    sub_1BDDB796C(v8, v7);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    sub_1BE1B20E4();
    v15 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(a4 + v15) = qword_1ED6F2E08;
    swift_retain();
    swift_release();
    swift_release();
    sub_1BDDB796C(v8, v7);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1BDE1D180@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *a2;
  v7 = a2[1];
  v9 = a2[4];
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 176))(a3);
  if (v4)
  {
    swift_release();
    swift_release();
    sub_1BDDB796C(v8, v7);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 88))
  {
    v12 = sub_1BDDA8D6C();
    *(_QWORD *)(a1 + 80) = v10;
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(a1 + 88) = v11;
    swift_release();
    swift_release();
    v13 = v12 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDD9C318(v13, a4, type metadata accessor for Proto_CRDT);
    swift_release();
    sub_1BDDB796C(v8, v7);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    sub_1BE1B20E4();
    v15 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)(a4 + v15) = qword_1ED6F2E08;
    swift_retain();
    swift_release();
    swift_release();
    sub_1BDDB796C(v8, v7);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1BDE1D3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 176))(a3);
  if (v4)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 88))
    {
      v11 = sub_1BDDA8D6C();
      *(_QWORD *)(a1 + 80) = v9;
      swift_retain();
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 88) = v8;
      swift_release();
      swift_release();
      v12 = v11 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
      swift_beginAccess();
      sub_1BDD9C318(v12, a4, type metadata accessor for Proto_CRDT);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      sub_1BE1B20E4();
      v13 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
      if (qword_1ED6F2E18 != -1)
        swift_once();
      *(_QWORD *)(a4 + v13) = qword_1ED6F2E08;
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1BDE1D5BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE1DC10(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CRRegister, sub_1BDFA36FC);
}

uint64_t sub_1BDE1D5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v5 = v3;
  v8 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v5 + 16);
  v13 = type metadata accessor for CRDTRegister(0, a2, a3, v12);
  result = sub_1BDFD1428(v11, v13, (uint64_t)v10);
  if (!v4)
  {
    v15 = v5 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v10, v15, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BDE1D6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE1DF84(a1, a2, a3, a4, type metadata accessor for CRMaxRegister, (uint64_t (*)(uint64_t, uint64_t))sub_1BDEFD58C);
}

uint64_t sub_1BDE1D6F8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[4];

  v6 = v4;
  v11 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *a1;
  v14 = *(_QWORD *)(v6 + 16);
  type metadata accessor for CRSet(0, a2, a3, a4);
  result = sub_1BE0CD4AC(v14, (uint64_t)v13);
  if (!v5)
  {
    v16 = v6 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v13, v16, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

void sub_1BDE1D7FC()
{
  uint64_t v0;

  v0 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for CROrderedDictionary();
}

uint64_t sub_1BDE1D898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(v3 - 72);
  result = sub_1BDFAE4C8(v2, a1, v1);
  if (!v4)
  {
    swift_beginAccess();
    return sub_1BE128D74(v1);
  }
  return result;
}

void sub_1BDE1D904()
{
  uint64_t v0;

  v0 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v0);
  type metadata accessor for CRDTDictionary();
}

uint64_t sub_1BDE1D99C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = sub_1BE1A2800(v4, a1, v2);
  if (!v3)
  {
    v6 = v1 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000(v2, v6, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

void sub_1BDE1DA1C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v12[4];

  v8 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v12[1] = *a1;
  v12[2] = v11;
  type metadata accessor for CRArray(0, a2, a3, a4);
  sub_1BDEE301C((uint64_t)v10);
}

uint64_t sub_1BDE1DABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (!v1)
  {
    v3 = v0 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000(v2, v3, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

void sub_1BDE1DB20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[4];

  v3 = v1;
  v5 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = *a1;
  sub_1BDE05ADC(*(_QWORD *)(v3 + 16), (uint64_t)v7);
  if (!v2)
  {
    v8 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v7, v8, type metadata accessor for Proto_CRDT);
    swift_endAccess();
  }
}

uint64_t sub_1BDE1DBEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1BDE1DC10(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for CRAttributedString, (uint64_t (*)(uint64_t, uint64_t))sub_1BE1498B8);
}

uint64_t sub_1BDE1DC10(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD v20[4];

  v9 = v5;
  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *a1;
  v16 = *(_QWORD *)(v9 + 16);
  v17 = a4(0, a2, a3);
  result = a5(v16, v17);
  if (!v6)
  {
    v19 = v9 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v15, v19, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BDE1DD14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for Proto_Counter(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + 16);
  sub_1BE1B20E4();
  v8 = *(int *)(v4 + 20);
  if (qword_1ED6F2E18 != -1)
    swift_once();
  *(_QWORD *)&v6[v8] = qword_1ED6F2E08;
  swift_retain();
  sub_1BE0FF460();
  sub_1BE0FF514(v7, (uint64_t)v3);
  swift_release();
  sub_1BE12B7B4((uint64_t)v3);
  v9 = v0 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  sub_1BDDAF000((uint64_t)v6, v9, type metadata accessor for Proto_CRDT);
  return swift_endAccess();
}

void sub_1BDE1DE80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v5 = v3;
  v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = *a1;
  v12 = *(_QWORD *)(v5 + 16);
  v14 = type metadata accessor for CRSequence(0, a2, a3, v13);
  sub_1BE0C6268(v12, v14, (uint64_t)v11);
  if (!v4)
  {
    swift_beginAccess();
    sub_1BE128F88((uint64_t)v11);
  }
}

uint64_t sub_1BDE1DF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE1DF84(a1, a2, a3, a4, type metadata accessor for CROrderedSet, (uint64_t (*)(uint64_t, uint64_t))sub_1BE161084);
}

uint64_t sub_1BDE1DF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);

  v21 = a6;
  v9 = v6;
  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v9 + 16);
  v17 = a5(0, a2, a3, a4);
  result = v21(v16, v17);
  if (!v7)
  {
    v19 = v9 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v15, v19, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BDE1E094(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v6);
  v58 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Proto_CustomCRDT(0);
  MEMORY[0x1E0C80A78](v54);
  v55 = (uint64_t *)((char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F37A8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v53 = (uint64_t)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v48 = (uint64_t)&v47 - v12;
  v13 = type metadata accessor for Proto_Version(0);
  v50 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v49 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (uint64_t *)((char *)&v47 - v17);
  MEMORY[0x1E0C80A78](v16);
  v52 = (uint64_t)&v47 - v19;
  v20 = type metadata accessor for Proto_CustomCRDT.Sibling(0);
  v56 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a3;
  v23 = a3[1];
  sub_1BE1B20E4();
  v25 = *(int *)(v20 + 20);
  if (qword_1EF52B448 != -1)
    swift_once();
  *(_QWORD *)&v22[v25] = qword_1EF52B440;
  swift_retain();
  sub_1BDDB6CA4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_CustomCRDT.Sibling._StorageClass(0);
    swift_allocObject();
    v26 = swift_retain();
    *(_QWORD *)&v22[v25] = sub_1BE1398A8(v26);
    swift_release();
  }
  v27 = (uint64_t *)(*(_QWORD *)&v22[v25]
                  + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
  swift_beginAccess();
  v28 = *v27;
  v29 = v27[1];
  *v27 = a1;
  v27[1] = a2;
  sub_1BDDB796C(v28, v29);
  v30 = v57;
  v31 = v55;
  if (v24)
  {
    v59 = v24;
    v60 = v23;
    v32 = *(_QWORD *)(v57 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BDDAD780(v32, v18);
    sub_1BDDC8EA0(v24);
    v33 = v52;
    sub_1BDDA2E8C((uint64_t)v18, v52, type metadata accessor for Proto_Version);
    v34 = v49;
    sub_1BDD9C318(v33, v49, type metadata accessor for Proto_Version);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_CustomCRDT.Sibling._StorageClass(0);
      swift_allocObject();
      v35 = swift_retain();
      *(_QWORD *)&v22[v25] = sub_1BE1398A8(v35);
      swift_release();
    }
    v36 = *(_QWORD *)&v22[v25];
    v37 = v48;
    sub_1BDDA2E8C(v34, v48, type metadata accessor for Proto_Version);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v37, 0, 1, v51);
    v38 = v53;
    sub_1BDDA2EF0(v37, v53, &qword_1ED6F37A8);
    v39 = v36
        + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
    swift_beginAccess();
    swift_retain();
    sub_1BDDA1AF4(v38, v39, &qword_1ED6F37A8);
    swift_endAccess();
    swift_release();
    sub_1BDD9C3E0(v33, type metadata accessor for Proto_Version);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C490);
  v40 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_1BE1B61B0;
  sub_1BDD9C318((uint64_t)v22, v41 + v40, type metadata accessor for Proto_CustomCRDT.Sibling);
  v42 = v30 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  v43 = *(_QWORD *)(v42 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v44 = v58;
  sub_1BDD86DEC(v43, v58, &qword_1ED6F2DF0);
  v45 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v44, 1, v45) == 1)
  {
    sub_1BDD86E30(v44, &qword_1ED6F2DF0);
LABEL_14:
    *v31 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_15;
  }
  if (swift_getEnumCaseMultiPayload() != 9)
  {
    sub_1BDD9C3E0(v44, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_14;
  }
  sub_1BDDA2E8C(v44, (uint64_t)v31, type metadata accessor for Proto_CustomCRDT);
LABEL_15:
  swift_bridgeObjectRelease();
  *v31 = v41;
  sub_1BE12919C((uint64_t)v31);
  swift_endAccess();
  return sub_1BDD9C3E0((uint64_t)v22, type metadata accessor for Proto_CustomCRDT.Sibling);
}

uint64_t sub_1BDE1E624(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_CustomCRDT(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for Proto_CustomCRDT.Sibling(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BE1B20E4();
  v16 = *(int *)(v12 + 20);
  if (qword_1EF52B448 != -1)
    swift_once();
  *(_QWORD *)&v15[v16] = qword_1EF52B440;
  swift_retain();
  sub_1BDDB6CA4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_CustomCRDT.Sibling._StorageClass(0);
    swift_allocObject();
    v27 = v13;
    v17 = swift_retain();
    v13 = v27;
    *(_QWORD *)&v15[v16] = sub_1BE1398A8(v17);
    swift_release();
  }
  v18 = (uint64_t *)(*(_QWORD *)&v15[v16]
                  + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
  swift_beginAccess();
  v19 = *v18;
  v20 = v18[1];
  *v18 = a1;
  v18[1] = a2;
  sub_1BDDB796C(v19, v20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF52C490);
  v21 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1BE1B61B0;
  sub_1BDD9C318((uint64_t)v15, v22 + v21, type metadata accessor for Proto_CustomCRDT.Sibling);
  v23 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  v24 = *(_QWORD *)(v23 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v24, (uint64_t)v8, &qword_1ED6F2DF0);
  v25 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v8, 1, v25) == 1)
  {
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F2DF0);
LABEL_10:
    *v11 = MEMORY[0x1E0DEE9D8];
    sub_1BE1B20E4();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 9)
  {
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v11, type metadata accessor for Proto_CustomCRDT);
LABEL_11:
  swift_bridgeObjectRelease();
  *v11 = v22;
  sub_1BE12919C((uint64_t)v11);
  swift_endAccess();
  return sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CustomCRDT.Sibling);
}

uint64_t CREncoder.CRDTContainer.deinit()
{
  return sub_1BDE21290(&OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDE1E9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v9);
  v27 = (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v25);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  if ((result & 1) != 0)
  {
    v24 = v12;
    MEMORY[0x1E0C80A78](result);
    *(&v24 - 4) = (_QWORD *)a3;
    *(&v24 - 3) = (_QWORD *)a4;
    *(&v24 - 2) = (_QWORD *)a1;
    *(&v24 - 1) = (_QWORD *)v4;
    result = sub_1BDDA82F8((void (*)(uint64_t))sub_1BDDA8464, (uint64_t)v15);
    if (!v5)
    {
      swift_retain();
      v17 = sub_1BDE25778(v26);
      swift_release();
      v18 = *(_QWORD *)(v4 + 16) + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
      swift_beginAccess();
      v19 = *(_QWORD *)(v18 + *(int *)(v13 + 20))
          + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      v20 = v27;
      sub_1BDD86DEC(v19, v27, &qword_1ED6F2DF0);
      v21 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21) == 1)
      {
        sub_1BDD86E30(v20, &qword_1ED6F2DF0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 3)
        {
          v22 = v24;
          sub_1BDDA2E8C(v20, (uint64_t)v24, type metadata accessor for Proto_Struct);
LABEL_9:
          sub_1BDE1EC78((uint64_t)v15, v17);
          sub_1BDDBE3B0((uint64_t)v22);
          swift_endAccess();
          sub_1BDD9C3E0((uint64_t)v15, type metadata accessor for Proto_CRDT);
          return swift_bridgeObjectRelease();
        }
        sub_1BDD9C3E0(v20, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
      }
      v22 = v24;
      v23 = MEMORY[0x1E0DEE9D8];
      *v24 = MEMORY[0x1E0DEE9D8];
      v22[1] = v23;
      v22[2] = v23;
      sub_1BE1B20E4();
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1BDE1EC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Proto_CRDT(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 16);
  if (v14 == 1)
  {
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD **)v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = sub_1BDDAEBFC(0, v16[2] + 1, 1, v16);
    v18 = v16[2];
    v17 = v16[3];
    if (v18 >= v17 >> 1)
      v16 = sub_1BDDAEBFC((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
    v16[2] = v18 + 1;
    v16[v18 + 4] = v15;
    *(_QWORD *)v3 = v16;
    sub_1BDD9C318(a1, (uint64_t)v13, type metadata accessor for Proto_CRDT);
    v19 = *(_QWORD *)(v3 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_1BDDA82E4(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
    v21 = *(_QWORD *)(v19 + 16);
    v20 = *(_QWORD *)(v19 + 24);
    if (v21 >= v20 >> 1)
      v19 = sub_1BDDA82E4(v20 > 1, v21 + 1, 1, v19);
    *(_QWORD *)(v19 + 16) = v21 + 1;
    result = sub_1BDDA2E8C((uint64_t)v13, v19+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v21, type metadata accessor for Proto_CRDT);
    *(_QWORD *)(v3 + 8) = v19;
  }
  else if (v14)
  {
    v22 = *(_QWORD *)(a2 + 32);
    v23 = (2 * v14) | 1;
    swift_bridgeObjectRetain();
    sub_1BDE212E8(v22, v8);
    sub_1BDE1EEAC(a1, a2, (_QWORD *)(a2 + 32), 1, v23);
    swift_bridgeObjectRelease();
    return sub_1BDE21524((uint64_t)v8, v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BDE1EEAC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v6 = v5;
  v12 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for Proto_CRDT(0);
  v16 = *(_QWORD *)(v15 - 8);
  result = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a5 >> 1;
  v21 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v21 != 1)
  {
    if (v20 == a4)
    {
      __break(1u);
    }
    else if (v20 > a4)
    {
      v27 = a3[a4];
      if (v21)
        v28 = a4 + 1;
      else
        v28 = a5 >> 1;
      swift_unknownObjectRetain();
      sub_1BDE212E8(v27, v14);
      sub_1BDE1EEAC(a1, a2, a3, v28, a5);
      swift_unknownObjectRelease();
      return sub_1BDE21524((uint64_t)v14, v27);
    }
    __break(1u);
    return result;
  }
  if (v20 == a4)
    goto LABEL_20;
  if (v20 <= a4)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  a5 = a3[a4];
  a3 = *(_QWORD **)v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_22:
    a3 = sub_1BDDAEBFC(0, a3[2] + 1, 1, a3);
  v23 = a3[2];
  v22 = a3[3];
  if (v23 >= v22 >> 1)
    a3 = sub_1BDDAEBFC((_QWORD *)(v22 > 1), v23 + 1, 1, a3);
  a3[2] = v23 + 1;
  a3[v23 + 4] = a5;
  *(_QWORD *)v6 = a3;
  sub_1BDD9C318(a1, (uint64_t)v19, type metadata accessor for Proto_CRDT);
  v24 = *(_QWORD *)(v6 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v24 = sub_1BDDA82E4(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
  v26 = *(_QWORD *)(v24 + 16);
  v25 = *(_QWORD *)(v24 + 24);
  if (v26 >= v25 >> 1)
    v24 = sub_1BDDA82E4(v25 > 1, v26 + 1, 1, v24);
  *(_QWORD *)(v24 + 16) = v26 + 1;
  result = sub_1BDDA2E8C((uint64_t)v19, v24+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v26, type metadata accessor for Proto_CRDT);
  *(_QWORD *)(v6 + 8) = v24;
  return result;
}

uint64_t sub_1BDE1F124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BDE1F144(a1, a2, 1, a3, a4);
}

uint64_t sub_1BDE1F144(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  _QWORD *v42;
  int EnumCaseMultiPayload;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v65 = a5;
  v6 = v5;
  v63 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v58 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v57 = (uint64_t)&v57 - v13;
  v61 = type metadata accessor for Proto_CustomCRValue(0);
  v14 = MEMORY[0x1E0C80A78](v61);
  v60 = (uint64_t *)((char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v62 = (uint64_t *)((char *)&v57 - v16);
  v17 = type metadata accessor for Proto_Value(0);
  v59 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v64 = (uint64_t)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v70 = (uint64_t)&v57 - v21;
  v22 = *(_QWORD *)(a4 - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v57 - v26;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v28((char *)&v57 - v26, a1, a4);
  if ((a3 & 1) != 0)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v27, a4);
  }
  else
  {
    v28(v25, (uint64_t)v27, a4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFBA8);
    if (swift_dynamicCast())
    {
      v30 = *((_QWORD *)&v68 + 1);
      v31 = v69;
      __swift_project_boxed_opaque_existential_1(&v67, *((uint64_t *)&v68 + 1));
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v27, a4);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
      if ((v32 & 1) != 0)
        return result;
    }
    else
    {
      v69 = 0;
      v67 = 0u;
      v68 = 0u;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v27, a4);
      result = sub_1BDD86E30((uint64_t)&v67, (uint64_t *)&unk_1ED6EF4E0);
    }
  }
  MEMORY[0x1E0C80A78](result);
  v33 = v66;
  result = sub_1BDE1CC84((void (*)(uint64_t))sub_1BDDA8464, v70);
  if (!v33)
  {
    if (v63 < 0)
    {
      result = sub_1BE1B31F4();
      __break(1u);
      return result;
    }
    v34 = *(_QWORD *)(v6 + 16) + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    v35 = *(int *)(v17 + 20);
    v36 = *(_QWORD *)(v34 + v35)
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v37 = v57;
    sub_1BDD86DEC(v36, v57, &qword_1ED6F26F0);
    v38 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48);
    v40 = v39(v37, 1, v38);
    v41 = MEMORY[0x1E0DEE9D8];
    if (v40 == 1)
    {
      sub_1BDD86E30(v37, &qword_1ED6F26F0);
      v42 = v62;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v42 = v62;
      if (EnumCaseMultiPayload == 13)
      {
        sub_1BDDA2E8C(v37, (uint64_t)v62, type metadata accessor for Proto_CustomCRValue);
        goto LABEL_15;
      }
      sub_1BDD9C3E0(v37, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    *v42 = v41;
    v42[1] = v41;
    sub_1BE1B20E4();
LABEL_15:
    v44 = (_QWORD *)*v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = sub_1BDDAEBFC(0, v44[2] + 1, 1, v44);
    v46 = v44[2];
    v45 = v44[3];
    if (v46 >= v45 >> 1)
      v44 = sub_1BDDAEBFC((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
    v44[2] = v46 + 1;
    v47 = v62;
    v44[v46 + 4] = v63;
    *v47 = v44;
    sub_1BE128730((uint64_t)v47);
    sub_1BDD9C318(v70, v64, type metadata accessor for Proto_Value);
    v48 = *(_QWORD *)(v34 + v35)
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v49 = v48;
    v50 = v58;
    sub_1BDD86DEC(v49, v58, &qword_1ED6F26F0);
    if (v39(v50, 1, v38) == 1)
    {
      sub_1BDD86E30(v50, &qword_1ED6F26F0);
      v51 = v60;
    }
    else
    {
      v52 = swift_getEnumCaseMultiPayload();
      v51 = v60;
      if (v52 == 13)
      {
        sub_1BDDA2E8C(v50, (uint64_t)v60, type metadata accessor for Proto_CustomCRValue);
        v53 = v59;
LABEL_25:
        v54 = v51[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v54 = sub_1BDE069C8(0, *(_QWORD *)(v54 + 16) + 1, 1, v54);
        v56 = *(_QWORD *)(v54 + 16);
        v55 = *(_QWORD *)(v54 + 24);
        if (v56 >= v55 >> 1)
          v54 = sub_1BDE069C8(v55 > 1, v56 + 1, 1, v54);
        *(_QWORD *)(v54 + 16) = v56 + 1;
        sub_1BDDA2E8C(v64, v54+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v56, type metadata accessor for Proto_Value);
        v51[1] = v54;
        sub_1BE128730((uint64_t)v51);
        swift_endAccess();
        return sub_1BDD9C3E0(v70, type metadata accessor for Proto_Value);
      }
      sub_1BDD9C3E0(v50, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    v53 = v59;
    *v51 = v41;
    v51[1] = v41;
    sub_1BE1B20E4();
    goto LABEL_25;
  }
  return result;
}

uint64_t _s9Coherence9CREncoderC18CRDTKeyedContainerCfd_0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t _s9Coherence9CREncoderC18CRDTKeyedContainerCfD_0()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BDE1F7EC(uint64_t a1)
{
  return sub_1BDDAE244(a1);
}

uint64_t sub_1BDE1F814(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)(v1 + 16) + 72) == 1)
  {
    swift_beginAccess();
    return sub_1BE128944(a1);
  }
  else
  {
    swift_beginAccess();
    return sub_1BE1293B0(a1);
  }
}

uint64_t sub_1BDE1F89C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = result;
  if (*(_BYTE *)(*(_QWORD *)(v1 + 16) + 72) == 1 && result < 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    return sub_1BE128944(v2);
  }
  return result;
}

uint64_t sub_1BDE1F914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1BDDA84A8(a1, a2);
  swift_beginAccess();
  return sub_1BE1295C4(v2);
}

uint64_t sub_1BDE1F980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v49 = a1;
  v47 = type metadata accessor for Proto_Value(0);
  v3 = *(_QWORD *)(v47 - 8);
  v4 = MEMORY[0x1E0C80A78](v47);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v45 - v7;
  v8 = type metadata accessor for Proto_RepeatedValue(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v50 = (uint64_t *)((char *)&v45 - v12);
  v13 = sub_1BE1B1EE0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1BE1B20C0();
  v17 = MEMORY[0x1E0C80A78](v51);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v45 - v20;
  v48 = v2;
  if (*(_BYTE *)(*(_QWORD *)(v2 + 16) + 72))
  {
    if (*(_BYTE *)(*(_QWORD *)(v2 + 16) + 72) == 1)
    {
      sub_1BDDFCAFC();
      swift_allocError();
      *(_QWORD *)v22 = 0xD00000000000001FLL;
      *(_QWORD *)(v22 + 8) = 0x80000001BE1CD3F0;
      *(_BYTE *)(v22 + 16) = 0;
      return swift_willThrow();
    }
    else
    {
      v38 = v18;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v49, v13);
      sub_1BE1B2090();
      sub_1BDD8422C((unint64_t *)&qword_1EF5254F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E5C8], MEMORY[0x1E0D3E5B8]);
      v39 = v51;
      v40 = v52;
      v41 = sub_1BE1B227C();
      if (v40)
      {
        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v21, v39);
      }
      else
      {
        v43 = v41;
        v44 = v42;
        swift_beginAccess();
        sub_1BDDB6CA4(v43, v44);
        sub_1BE1297E0(v43, v44);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v39);
        return sub_1BDDB796C(v43, v44);
      }
    }
  }
  else
  {
    v24 = v3;
    v45 = v18;
    v25 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v49, v13);
    sub_1BE1B2090();
    sub_1BE1B20E4();
    v26 = (uint64_t)v46;
    sub_1BE1B20E4();
    v27 = v47;
    v28 = *(int *)(v47 + 20);
    if (qword_1ED6F2718 != -1)
      swift_once();
    v29 = qword_1ED6F2708;
    *(_QWORD *)(v26 + v28) = qword_1ED6F2708;
    swift_retain();
    v30 = sub_1BE1B20B4();
    sub_1BE1293B0(v30);
    sub_1BE1B20E4();
    *(_QWORD *)&v6[*(int *)(v27 + 20)] = v29;
    swift_retain();
    v31 = sub_1BE1B209C();
    sub_1BE1293B0(v31);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6EFC70);
    v32 = v24;
    v33 = *(_QWORD *)(v24 + 72);
    v34 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_1BE1B61C0;
    v36 = v35 + v34;
    sub_1BDD9C318(v26, v36, type metadata accessor for Proto_Value);
    sub_1BDD9C318((uint64_t)v6, v36 + v33, type metadata accessor for Proto_Value);
    v37 = (uint64_t)v50;
    *v50 = v35;
    sub_1BDD9C318(v37, (uint64_t)v11, type metadata accessor for Proto_RepeatedValue);
    swift_beginAccess();
    sub_1BE1295CC((uint64_t)v11);
    sub_1BDD9C3E0((uint64_t)v6, type metadata accessor for Proto_Value);
    sub_1BDD9C3E0(v26, type metadata accessor for Proto_Value);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v25, v51);
    return sub_1BDD9C3E0(v37, type metadata accessor for Proto_RepeatedValue);
  }
}

uint64_t sub_1BDE1FE08(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  sub_1BDDB6CA4(a1, a2);
  return sub_1BE1297E0(a1, a2);
}

uint64_t sub_1BDE1FE78(double a1)
{
  swift_beginAccess();
  return sub_1BE1299EC(a1);
}

uint64_t sub_1BDE1FED4(float a1)
{
  uint64_t v1;

  if (*(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 72) >= 2u)
  {
    swift_beginAccess();
    return sub_1BE129BF8(a1);
  }
  else
  {
    swift_beginAccess();
    return sub_1BE1299EC(a1);
  }
}

uint64_t sub_1BDE1FF70(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1BDDAE244(a1);
  swift_beginAccess();
  return sub_1BE129E04(v1);
}

uint64_t sub_1BDE1FFDC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v8;

  v2 = v1;
  v4 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (_QWORD *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a1;
  sub_1BDDAD780(*(_QWORD *)(v2 + 16), v6);
  swift_beginAccess();
  return sub_1BE128B60((uint64_t)v6);
}

void sub_1BDE20080(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  dispatch_semaphore_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  unint64_t *v39;
  uint64_t (*v40)();
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _BYTE v51[32];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED6F3C10);
  MEMORY[0x1E0C80A78](v4);
  v50 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Proto_Asset(0);
  v49 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v48 = (uint64_t)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (_QWORD *)((char *)v47 - v12);
  v14 = *a1;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 24);
  v17 = v2 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  v18 = *(_QWORD *)(v17 + *(int *)(type metadata accessor for Proto_Value(0) + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v18, (uint64_t)v8, &qword_1ED6F26F0);
  v19 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v8, 1, v19) == 1)
  {
    sub_1BDDB6CA4(v15, v16);
    sub_1BDD86E30((uint64_t)v8, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 12)
    {
      sub_1BDDA2E8C((uint64_t)v8, (uint64_t)v13, type metadata accessor for Proto_Asset);
      sub_1BDDB6CA4(v15, v16);
      goto LABEL_7;
    }
    sub_1BDDB6CA4(v15, v16);
    sub_1BDD9C3E0((uint64_t)v8, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *v13 = 0;
  v13[1] = sub_1BE1B20CC();
  v13[2] = v20;
  v13[3] = sub_1BE1B20CC();
  v13[4] = v21;
  sub_1BE1B20E4();
LABEL_7:
  sub_1BDDB796C(v13[1], v13[2]);
  v13[1] = v15;
  v13[2] = v16;
  sub_1BE129E0C((uint64_t)v13);
  swift_endAccess();
  v22 = *(_QWORD *)(v2 + 16);
  swift_beginAccess();
  if (*(_QWORD *)(v22 + 48))
  {
    v23 = swift_allocBox();
    v25 = v24;
    *v24 = 0;
    v24[1] = sub_1BE1B20CC();
    v25[2] = v26;
    v25[3] = sub_1BE1B20CC();
    v25[4] = v27;
    sub_1BE1B20E4();
    v28 = *(_QWORD *)(v14 + 16);
    v29 = *(_QWORD *)(v14 + 24);
    v47[0] = v22;
    v30 = v25[1];
    v31 = v25[2];
    v25[1] = v28;
    v25[2] = v29;
    sub_1BDDB6CA4(v28, v29);
    sub_1BDDB796C(v30, v31);
    v32 = dispatch_semaphore_create(0);
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v23;
    *(_QWORD *)(v33 + 24) = v32;
    v34 = sub_1BE1B2ABC();
    v35 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v50, 1, 1, v34);
    v36 = swift_allocObject();
    swift_weakInit();
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = v36;
    v37[5] = v14;
    v37[6] = sub_1BDE26F30;
    v37[7] = v33;
    v47[1] = v23;
    swift_retain();
    v38 = v32;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1BDE220D4(v35, (uint64_t)&unk_1EF52C498, (uint64_t)v37);
    sub_1BDD86E30(v35, (uint64_t *)&unk_1ED6F3C10);
    sub_1BE1B2438();
    swift_allocObject();
    sub_1BE1B2444();
    swift_release();
    swift_release();
    swift_release();
    sub_1BE1B2EA0();
    v40 = sub_1BDE160F4();
    if (*v39)
    {
      v41 = v39;
      swift_beginAccess();
      v42 = v48;
      sub_1BDD9C318((uint64_t)v25, v48, type metadata accessor for Proto_Asset);
      v43 = *v41;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v41 = v43;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v43 = sub_1BDE069DC(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
        *v41 = v43;
      }
      v46 = *(_QWORD *)(v43 + 16);
      v45 = *(_QWORD *)(v43 + 24);
      if (v46 >= v45 >> 1)
      {
        v43 = sub_1BDE069DC(v45 > 1, v46 + 1, 1, v43);
        *v41 = v43;
      }
      *(_QWORD *)(v43 + 16) = v46 + 1;
      sub_1BDDA2E8C(v42, v43+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v46, type metadata accessor for Proto_Asset);
    }
    ((void (*)(_BYTE *, _QWORD))v40)(v51, 0);
    swift_release();

  }
}

uint64_t sub_1BDE20594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  type metadata accessor for Proto_Asset(0);
  v0 = swift_projectBox();
  v1 = sub_1BE1B1E08();
  v3 = v2;
  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)(v0 + 32) = v3;
  sub_1BDDB796C(v4, v5);
  return sub_1BE1B2EAC();
}

uint64_t sub_1BDE20644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v40 = a1;
  v39 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  MEMORY[0x1E0C80A78](v4);
  v37 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Proto_Optional(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v38 = (uint64_t)&v36 - v10;
  v36 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1E0C80A78](v36);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BE1B2EE8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v36 - v16;
  v18 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v40, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a2) != 1)
  {
    v23 = v6;
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, a2);
    MEMORY[0x1E0C80A78](v24);
    v25 = v39;
    *(&v36 - 4) = a2;
    *(&v36 - 3) = v25;
    *(&v36 - 2) = (uint64_t)v20;
    *(&v36 - 1) = v26;
    v27 = v41;
    sub_1BDE1CC84((void (*)(uint64_t))sub_1BDE2702C, (uint64_t)v12);
    if (v27)
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, a2);
    v28 = (uint64_t)v12;
    v40 = a2;
    v41 = v20;
    v29 = v42 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    v30 = *(_QWORD *)(v29 + *(int *)(v36 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    v31 = v37;
    sub_1BDD86DEC(v30, v37, &qword_1ED6F26F0);
    v32 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v31, 1, v32) == 1)
    {
      sub_1BDD86E30(v31, &qword_1ED6F26F0);
      v33 = v38;
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v33 = v38;
      if (EnumCaseMultiPayload == 8)
      {
        sub_1BDDA2E8C(v31, v38, type metadata accessor for Proto_Optional);
LABEL_15:
        sub_1BE12A020(v28);
        sub_1BE12A220(v33);
        swift_endAccess();
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v41, v40);
      }
      sub_1BDD9C3E0(v31, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1BE1B20E4();
    v35 = *(int *)(v23 + 20);
    if (qword_1ED6EEA40 != -1)
      swift_once();
    *(_QWORD *)(v33 + v35) = qword_1ED6EEA38;
    swift_retain();
    goto LABEL_15;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_1BE1B20E4();
  v21 = *(int *)(v6 + 20);
  if (qword_1ED6EEA40 != -1)
    swift_once();
  *(_QWORD *)&v9[v21] = qword_1ED6EEA38;
  swift_beginAccess();
  swift_retain();
  return sub_1BE12A220((uint64_t)v9);
}

uint64_t sub_1BDE20A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BDF01E64(*(_QWORD *)(v3 + 16), a1, a2, a3, (uint64_t)v10);
  if (!v4)
  {
    v12 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v10, v12, type metadata accessor for Proto_Value);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BDE20B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v10 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BDF03A74(*(_QWORD *)(v4 + 16), a1, a2, a3, a4, (uint64_t)v12);
  if (!v5)
  {
    v14 = v4 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v12, v14, type metadata accessor for Proto_Value);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BDE20C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v14 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BDFDADC8(*(_QWORD *)(v6 + 16), a1, a2, a3, a4, a5, a6, (uint64_t)v16);
  if (!v7)
  {
    v18 = v6 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    sub_1BDDAF000((uint64_t)v16, v18, type metadata accessor for Proto_Value);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1BDE20D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int EnumCaseMultiPayload;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F3770);
  v3 = MEMORY[0x1E0C80A78](v2);
  v44 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v40 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F26F0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v45 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v40 - v10;
  v12 = type metadata accessor for Proto_TaggedValue(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v40 - v16;
  v18 = type metadata accessor for Proto_Value(0);
  v41 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v1 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  sub_1BDD9C318(v21, (uint64_t)v20, type metadata accessor for Proto_Value);
  swift_beginAccess();
  v43 = *(int *)(v18 + 20);
  v22 = *(_QWORD *)(v21 + v43)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v22, (uint64_t)v11, &qword_1ED6F26F0);
  v23 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48);
  if (v42(v11, 1, v23) == 1)
  {
    sub_1BDD86E30((uint64_t)v11, &qword_1ED6F26F0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1BDDA2E8C((uint64_t)v11, (uint64_t)v17, type metadata accessor for Proto_TaggedValue);
      goto LABEL_9;
    }
    sub_1BDD9C3E0((uint64_t)v11, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v24 = *(int *)(v12 + 20);
  if (qword_1EF52B520 != -1)
    swift_once();
  *(_QWORD *)&v17[v24] = qword_1EF52B518;
  swift_retain();
LABEL_9:
  v46 = v12;
  v25 = *(int *)(v12 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v26 = swift_retain();
    *(_QWORD *)&v17[v25] = sub_1BE138794(v26);
    swift_release();
  }
  v27 = *(_QWORD *)&v17[v25];
  sub_1BDDA2E8C((uint64_t)v20, (uint64_t)v6, type metadata accessor for Proto_Value);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v6, 0, 1, v18);
  v28 = v44;
  sub_1BDDA2EF0((uint64_t)v6, v44, &qword_1ED6F3770);
  v29 = v27 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1BDDA1AF4(v28, v29, &qword_1ED6F3770);
  swift_endAccess();
  swift_release();
  sub_1BE12A434((uint64_t)v17);
  v30 = *(_QWORD *)(v21 + v43)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  v31 = v30;
  v32 = v45;
  sub_1BDD86DEC(v31, v45, &qword_1ED6F26F0);
  if (v42((char *)v32, 1, v23) == 1)
  {
    sub_1BDD86E30(v32, &qword_1ED6F26F0);
    v33 = v46;
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v33 = v46;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1BDDA2E8C(v32, (uint64_t)v15, type metadata accessor for Proto_TaggedValue);
      goto LABEL_19;
    }
    sub_1BDD9C3E0(v32, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1BE1B20E4();
  v35 = *(int *)(v33 + 20);
  if (qword_1EF52B520 != -1)
    swift_once();
  *(_QWORD *)&v15[v35] = qword_1EF52B518;
  swift_retain();
LABEL_19:
  v36 = *(int *)(v33 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    v37 = swift_retain();
    *(_QWORD *)&v15[v36] = sub_1BE138794(v37);
    swift_release();
  }
  v38 = *(_QWORD *)&v15[v36];
  swift_beginAccess();
  *(_QWORD *)(v38 + 16) = v47;
  sub_1BE12A434((uint64_t)v15);
  return swift_endAccess();
}

uint64_t CREncoder.CRValueContainer.deinit()
{
  return sub_1BDE21290(&OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value, type metadata accessor for Proto_Value);
}

uint64_t sub_1BDE21290(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  swift_release();
  sub_1BDD9C3E0(v2 + *a1, a2);
  return v2;
}

uint64_t CREncoder.CRValueContainer.__deallocating_deinit()
{
  return sub_1BDD8EB18(&OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value, type metadata accessor for Proto_Value);
}

uint64_t sub_1BDE212E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED6F2DF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Proto_CRDT(0);
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v2;
  v14 = *(_QWORD *)(*v2 + 16);
  if (!v14)
  {
LABEL_10:
    v22 = MEMORY[0x1E0DEE9D8];
    *a2 = MEMORY[0x1E0DEE9D8];
    a2[1] = v22;
    a2[2] = v22;
    type metadata accessor for Proto_Struct(0);
    return sub_1BE1B20E4();
  }
  if (*(_QWORD *)(v13 + 32) != a1)
  {
    v15 = 0;
    v16 = v13 + 40;
    v17 = v14 - 1;
    while (v17 != v15)
    {
      v18 = *(_QWORD *)(v16 + 8 * v15++);
      if (v18 == a1)
        goto LABEL_7;
    }
    goto LABEL_10;
  }
  v15 = 0;
LABEL_7:
  v19 = v2[1];
  if (v15 >= *(_QWORD *)(v19 + 16))
  {
    __break(1u);
    return result;
  }
  sub_1BDD9C318(v19+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v15, (uint64_t)v12, type metadata accessor for Proto_CRDT);
  v20 = *(_QWORD *)&v12[*(int *)(v8 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1BDD86DEC(v20, (uint64_t)v7, &qword_1ED6F2DF0);
  v21 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v7, 1, v21) == 1)
  {
    sub_1BDD86E30((uint64_t)v7, &qword_1ED6F2DF0);
LABEL_14:
    v23 = MEMORY[0x1E0DEE9D8];
    *a2 = MEMORY[0x1E0DEE9D8];
    a2[1] = v23;
    a2[2] = v23;
    type metadata accessor for Proto_Struct(0);
    sub_1BE1B20E4();
    return sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_CRDT);
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1BDD9C3E0((uint64_t)v7, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_14;
  }
  sub_1BDDA2E8C((uint64_t)v7, (uint64_t)a2, type metadata accessor for Proto_Struct);
  return sub_1BDD9C3E0((uint64_t)v12, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1BDE21524(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v36 = a1;
  v5 = type metadata accessor for Proto_CRDT(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v35 - v10;
  v12 = type metadata accessor for Proto_Struct(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v35 - v16;
  v18 = (_QWORD *)*v3;
  v19 = *(_QWORD *)(*v3 + 16);
  if (!v19)
  {
LABEL_11:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = sub_1BDDAEBFC(0, v18[2] + 1, 1, v18);
    v29 = v18[2];
    v28 = v18[3];
    if (v29 >= v28 >> 1)
      v18 = sub_1BDDAEBFC((_QWORD *)(v28 > 1), v29 + 1, 1, v18);
    v18[2] = v29 + 1;
    v18[v29 + 4] = a2;
    *v3 = v18;
    sub_1BE1B20E4();
    v30 = *(int *)(v5 + 20);
    if (qword_1ED6F2E18 != -1)
      swift_once();
    *(_QWORD *)&v11[v30] = qword_1ED6F2E08;
    v31 = v36;
    sub_1BDD9C318(v36, (uint64_t)v15, type metadata accessor for Proto_Struct);
    swift_retain();
    sub_1BDDBE3B0((uint64_t)v15);
    sub_1BDD9C318((uint64_t)v11, (uint64_t)v9, type metadata accessor for Proto_CRDT);
    v32 = v3[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = sub_1BDDA82E4(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
    v34 = *(_QWORD *)(v32 + 16);
    v33 = *(_QWORD *)(v32 + 24);
    if (v34 >= v33 >> 1)
      v32 = sub_1BDDA82E4(v33 > 1, v34 + 1, 1, v32);
    *(_QWORD *)(v32 + 16) = v34 + 1;
    sub_1BDDA2E8C((uint64_t)v9, v32+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v34, type metadata accessor for Proto_CRDT);
    v3[1] = v32;
    sub_1BDD9C3E0(v31, type metadata accessor for Proto_Struct);
    v27 = (uint64_t)v11;
    v26 = type metadata accessor for Proto_CRDT;
    return sub_1BDD9C3E0(v27, v26);
  }
  if (v18[4] != a2)
  {
    v20 = 0;
    v21 = v19 - 1;
    while (v21 != v20)
    {
      v22 = v18[v20++ + 5];
      if (v22 == a2)
        goto LABEL_7;
    }
    goto LABEL_11;
  }
  v20 = 0;
LABEL_7:
  v23 = v36;
  sub_1BDD9C318(v36, (uint64_t)&v35 - v16, type metadata accessor for Proto_Struct);
  v24 = v3[1];
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = sub_1BDFCEA14(v24);
    v24 = result;
  }
  if (v20 < *(_QWORD *)(v24 + 16))
  {
    sub_1BDDBE3B0((uint64_t)v17);
    v3[1] = v24;
    v26 = type metadata accessor for Proto_Struct;
    v27 = v23;
    return sub_1BDD9C3E0(v27, v26);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BDE2186C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE218C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRArray<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE2192C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRMaxRegister<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE21984@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRMaxRegister<A>, a3);
  return CRDT<>.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE219EC(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary<A, B>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE21A44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary<A, B>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE21AAC(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRUnorderedTree<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE21B04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRUnorderedTree<A>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE21B6C(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary_v1<A, B>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE21BC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDictionary_v1<A, B>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE21C2C(void *a1, char *a2)
{
  uint64_t *v2;

  return sub_1BDE0DBB0(a1, *a2, *v2, sub_1BDE197EC);
}

char *sub_1BDE21C50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  char *result;

  result = sub_1BDE0DC94(a1, a2, (uint64_t (*)(uint64_t))sub_1BDF31E00);
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1BDE21C80(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRRegister<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE21CD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRRegister<A>, a3);
  return CRDT<>.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE21D40(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedDictionary<A, B>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

uint64_t sub_1BDE21D98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;

  v8 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CROrderedDictionary<A, B>, a3);
  return CRDT.init(serializedData:)(a1, a2, a3, v8, a4);
}

uint64_t sub_1BDE21E00(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = MEMORY[0x1C3B7DF54](&protocol conformance descriptor for CRDTRegister<A>, a3);
  return CRDT.serializedData(_:version:)(a1, a2, a3, v6);
}

