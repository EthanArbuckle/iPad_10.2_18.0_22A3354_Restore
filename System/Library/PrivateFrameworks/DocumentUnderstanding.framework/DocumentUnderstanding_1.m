char *DUResponse.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  id v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  int v64;
  BOOL v65;
  char *v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void **v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  void **v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  id v98;
  uint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  void **v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t);
  int v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void **v114;
  void *v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  void **v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  int v132;
  uint64_t v133;
  char *v134;
  char *v135;
  void **v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  void **v150;
  void *v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v188 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v187 = *(_QWORD *)(v188 - 8);
  MEMORY[0x24BDAC7A8](v188);
  v171 = (uint64_t)&v153 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v170 = (uint64_t)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v186 = (uint64_t)&v153 - v9;
  v185 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v184 = *(_QWORD *)(v185 - 8);
  MEMORY[0x24BDAC7A8](v185);
  v169 = (char *)&v153 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v168 = (uint64_t)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v183 = (uint64_t)&v153 - v14;
  v182 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v181 = *(_QWORD *)(v182 - 8);
  MEMORY[0x24BDAC7A8](v182);
  v167 = (char *)&v153 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v166 = (uint64_t)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v180 = (uint64_t)&v153 - v19;
  v179 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v178 = *(_QWORD *)(v179 - 8);
  MEMORY[0x24BDAC7A8](v179);
  v165 = (char *)&v153 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v164 = (uint64_t)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v177 = (uint64_t)&v153 - v24;
  v190 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v191 = *(_QWORD *)(v190 - 8);
  v25 = MEMORY[0x24BDAC7A8](v190);
  v163 = (char *)&v153 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v162 = (uint64_t)&v153 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v161 = (uint64_t)&v153 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v176 = (uint64_t)&v153 - v31;
  v189 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v175 = *(_QWORD *)(v189 - 8);
  MEMORY[0x24BDAC7A8](v189);
  v160 = (char *)&v153 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v159 = (uint64_t)&v153 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v174 = (uint64_t)&v153 - v36;
  v173 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v172 = *(_QWORD *)(v173 - 8);
  MEMORY[0x24BDAC7A8](v173);
  v158 = (char *)&v153 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v157 = (uint64_t)&v153 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v153 - v41;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_Response?);
  v44 = MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)&v153 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v49 = (char *)&v153 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  v51 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v53 = (char *)&v153 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v49, a1, a2);
  v55 = (char *)v54;
  v56 = a2;
  v57 = v55;
  v58 = swift_dynamicCast();
  v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  if ((v58 & 1) != 0)
  {
    v155 = v47;
    v154 = a1;
    v156 = v56;
    v59(v46, 0, 1, v50);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v46, (uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
    v60 = v53;
    v61 = (uint64_t)&v53[*(int *)(v50 + 20)];
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v61, (uint64_t)v42, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 48);
    v63 = v173;
    v64 = v62(v42, 1, v173);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v42, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
    v65 = v64 == 1;
    v66 = v57;
    v67 = (int *)v50;
    if (!v65)
    {
      v68 = v157;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v61, v157, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
      if (v62((char *)v68, 1, v63) == 1)
      {
        v69 = MEMORY[0x24BEE4AF8];
        v70 = v158;
        *(_QWORD *)v158 = MEMORY[0x24BEE4AF8];
        *((_QWORD *)v70 + 1) = v69;
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(&v70[*(int *)(v63 + 28)], 1, 1, v190);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v68, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
      }
      else
      {
        v70 = v158;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v68, (uint64_t)v158, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
      }
      v71 = specialized DUTopicDetectionResponse.__allocating_init<A>(proto:)((uint64_t)v70);
      v72 = (void **)&v57[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_topics];
      swift_beginAccess();
      v73 = *v72;
      *v72 = v71;

    }
    v74 = (uint64_t)v60;
    v75 = (uint64_t)&v60[v67[6]];
    v76 = v174;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v75, v174, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v175 + 48);
    v78 = v189;
    v79 = v77(v76, 1, v189);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v76, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    v80 = v190;
    v81 = v179;
    if (v79 != 1)
    {
      v82 = v159;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v75, v159, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
      if (v77(v82, 1, v78) == 1)
      {
        v83 = v160;
        *(_QWORD *)v160 = MEMORY[0x24BEE4AF8];
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(&v83[*(int *)(v78 + 24)], 1, 1, v80);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v82, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
      }
      else
      {
        v83 = v160;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v82, (uint64_t)v160, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
      }
      v84 = specialized DUStructuredEntityResponse.__allocating_init<A>(proto:)((uint64_t)v83);
      v85 = (void **)&v66[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_structuredEntities];
      swift_beginAccess();
      v86 = *v85;
      *v85 = v84;

    }
    v87 = v67[11];
    v189 = v74;
    v88 = v74 + v87;
    v89 = v74 + v87;
    v90 = v176;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v89, v176, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 48);
    v92 = v91(v90, 1, v80);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v90, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v92 != 1)
    {
      v93 = v88;
      v94 = v161;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v93, v161, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      if (v91(v94, 1, v80) == 1)
      {
        v95 = v162;
        UnknownStorage.init()();
        v96 = (_QWORD *)(v95 + *(int *)(v80 + 20));
        *v96 = 0;
        v96[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v94, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        v95 = v162;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v94, v162, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v97 = (uint64_t)v163;
      v98 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v95, v97, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v99 = (uint64_t *)(v97 + *(int *)(v80 + 20));
      if (v99[1])
      {
        v100 = *v99;
        v101 = v99[1];
      }
      else
      {
        v100 = 0;
        v101 = 0xE000000000000000;
      }
      v102 = (char *)v98;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v97, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v103 = &v102[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v103 = v100;
      *((_QWORD *)v103 + 1) = v101;

      swift_bridgeObjectRelease();
      v104 = (void **)&v66[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_responseDebugInfo];
      swift_beginAccess();
      v105 = *v104;
      *v104 = v102;

      v80 = v190;
    }
    v106 = v185;
    v107 = v189 + v67[7];
    v108 = v177;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v107, v177, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    v109 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v178 + 48);
    v110 = v109(v108, 1, v81);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v108, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
    if (v110 != 1)
    {
      v111 = v164;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v107, v164, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
      if (v109(v111, 1, v81) == 1)
      {
        v112 = v165;
        *(_QWORD *)v165 = MEMORY[0x24BEE4AF8];
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(&v112[*(int *)(v81 + 24)], 1, 1, v80);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v111, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
      }
      else
      {
        v112 = v165;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v111, (uint64_t)v165, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
      }
      v113 = specialized DULanguageTaggingResponse.__allocating_init<A>(proto:)((uint64_t)v112);
      v114 = (void **)&v66[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_languageTags];
      swift_beginAccess();
      v115 = *v114;
      *v114 = v113;

    }
    v116 = v67;
    v117 = v189 + v67[8];
    v118 = v180;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v117, v180, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    v119 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
    v120 = v182;
    v121 = v119(v118, 1, v182);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v118, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    v122 = v106;
    if (v121 != 1)
    {
      v123 = v166;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v117, v166, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
      if (v119(v123, 1, v120) == 1)
      {
        v124 = v167;
        *(_QWORD *)v167 = MEMORY[0x24BEE4AF8];
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(&v124[*(int *)(v120 + 24)], 1, 1, v80);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v123, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
      }
      else
      {
        v124 = v167;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v123, (uint64_t)v167, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
      }
      v125 = specialized DUUserInterfaceUnderstandingResponse.__allocating_init<A>(proto:)((uint64_t)v124);
      v126 = (void **)&v66[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_userInterfaceUnderstandingResults];
      swift_beginAccess();
      v127 = *v126;
      *v126 = v125;

    }
    v128 = v189;
    v129 = v189 + v116[9];
    v130 = v183;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v129, v183, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v184 + 48);
    v132 = v131(v130, 1, v122);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v130, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    if (v132 != 1)
    {
      v133 = v168;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v129, v168, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
      if (v131(v133, 1, v122) == 1)
      {
        v134 = v169;
        *(_QWORD *)v169 = MEMORY[0x24BEE4AF8];
        UnknownStorage.init()();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(&v134[*(int *)(v122 + 24)], 1, 1, v190);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v133, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
      }
      else
      {
        v134 = v169;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v133, (uint64_t)v169, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
      }
      v135 = specialized DUCategoryClassificationResponse.__allocating_init<A>(proto:)((uint64_t)v134);
      v136 = (void **)&v66[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_documentCategories];
      swift_beginAccess();
      v137 = *v136;
      *v136 = v135;

    }
    v138 = v128 + v116[10];
    v139 = v186;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v138, v186, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    v140 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48);
    v141 = v188;
    v142 = v140(v139, 1, v188);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v139, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
    if (v142 == 1)
    {

      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v154, v156);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v128, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
    }
    else
    {
      v143 = v170;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v138, v170, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
      v144 = v140(v143, 1, v141);
      v145 = v154;
      if (v144 == 1)
      {
        v146 = v171;
        UnknownStorage.init()();
        v147 = *(int *)(v141 + 20);
        if (one-time initialization token for defaultInstance != -1)
          swift_once();
        *(_QWORD *)(v146 + v147) = static DocumentUnderstanding_ClientInterface_FoundInEventResult._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v143, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
      }
      else
      {
        v146 = v171;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v143, v171, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
      }
      v148 = v155;
      type metadata accessor for DUFoundInEventResult();
      v149 = specialized DUFoundInEventResult.__allocating_init<A>(proto:)(v146);
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v145, v156);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v128, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_Response);
      v150 = (void **)&v66[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_foundInEventResult];
      swift_beginAccess();
      v151 = *v150;
      *v150 = v149;

    }
  }
  else
  {
    v59(v46, 1, 1, v50);

    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a1, v56);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v46, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_Response?);
    return 0;
  }
  return v66;
}

char *specialized DUTopicDetectionResponse.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  id v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  void **v57;
  void *v58;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v60 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v60 - v10;
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v67 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v63 = (uint64_t)v60 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v62 = (uint64_t)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v66 = (uint64_t)v60 - v19;
  v65 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  MEMORY[0x24BDAC7A8](v65);
  v21 = (_QWORD *)((char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUTopicDetectionResponse()), sel_init);
  v69 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  v23 = *v21;
  v73 = MEMORY[0x24BEE4AF8];
  v24 = *(_QWORD *)(v23 + 16);
  v70 = v21;
  v71 = v22;
  if (v24)
  {
    v25 = v23 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v61 = v3;
    v26 = *(_QWORD *)(v3 + 72);
    v27 = v22;
    v60[1] = v23;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v25, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      v28 = specialized DUTopicResult.__allocating_init<A>(proto:)((uint64_t)v9);
      v29 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      if (v28)
      {
        MEMORY[0x22E2AFAFC](v29);
        if (*(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v25 += v26;
      --v24;
    }
    while (v24);
    v30 = v73;
    v21 = v70;
    v22 = v71;
    v3 = v61;
  }
  else
  {
    v31 = v22;
    swift_bridgeObjectRetain();
    v30 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v32 = &v22[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_globalTopics];
  swift_beginAccess();
  *(_QWORD *)v32 = v30;
  swift_bridgeObjectRelease();
  v33 = v21[1];
  v72 = MEMORY[0x24BEE4AF8];
  v34 = *(_QWORD *)(v33 + 16);
  if (v34)
  {
    v35 = v33 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v35, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      v37 = specialized DUTopicResult.__allocating_init<A>(proto:)((uint64_t)v9);
      v38 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      if (v37)
      {
        MEMORY[0x22E2AFAFC](v38);
        if (*(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v35 += v36;
      --v34;
    }
    while (v34);
    v39 = v72;
    v21 = v70;
    v22 = v71;
  }
  else
  {
    swift_bridgeObjectRetain();
    v39 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v40 = &v22[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_personalTopics];
  swift_beginAccess();
  *(_QWORD *)v40 = v39;
  swift_bridgeObjectRelease();
  v41 = v66;
  v42 = (uint64_t)v21 + *(int *)(v65 + 28);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v42, v66, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v43 = v68;
  v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
  v45 = v44(v41, 1, v68);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v41, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if (v45 == 1)
  {

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v69, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  }
  else
  {
    v46 = v42;
    v47 = v62;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v46, v62, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v44(v47, 1, v43) == 1)
    {
      v48 = v63;
      UnknownStorage.init()();
      v49 = (_QWORD *)(v48 + *(int *)(v43 + 20));
      *v49 = 0;
      v49[1] = 0;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v47, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    }
    else
    {
      v48 = v63;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, v63, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    }
    v50 = (uint64_t)v64;
    v51 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v48, v50, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v52 = (uint64_t *)(v50 + *(int *)(v43 + 20));
    if (v52[1])
    {
      v53 = *v52;
      v54 = v52[1];
    }
    else
    {
      v53 = 0;
      v54 = 0xE000000000000000;
    }
    v55 = (char *)v51;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v50, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v56 = &v55[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
    swift_beginAccess();
    *(_QWORD *)v56 = v53;
    *((_QWORD *)v56 + 1) = v54;

    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v69, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
    v22 = v71;
    v57 = (void **)&v71[OBJC_IVAR____TtC21DocumentUnderstanding24DUTopicDetectionResponse_responseDebugInfo];
    swift_beginAccess();
    v58 = *v57;
    *v57 = v55;

  }
  return v22;
}

char *specialized DUStructuredEntityResponse.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  void **v46;
  void *v47;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v49 - v7;
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v53 = (uint64_t)&v49 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v52 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v56 = (uint64_t)&v49 - v16;
  v55 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  MEMORY[0x24BDAC7A8](v55);
  v18 = (_QWORD **)((char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUStructuredEntityResponse()), sel_init);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  v20 = *v18;
  v59 = MEMORY[0x24BEE4AF8];
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v49 = v18;
    v50 = v19;
    v51 = a1;
    v22 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    v24 = v19;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v22, (uint64_t)v8, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, (uint64_t)v6, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
      v25 = specialized DUStructuredEntity.__allocating_init<A>(proto:)((uint64_t)v6);
      v26 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
      if (v25)
      {
        MEMORY[0x22E2AFAFC](v26);
        if (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v22 += v23;
      --v21;
    }
    while (v21);
    v27 = v59;
    v19 = v50;
    a1 = v51;
    v18 = v49;
  }
  else
  {
    v28 = v19;
    swift_bridgeObjectRetain();
    v27 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v29 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_structuredEntities];
  swift_beginAccess();
  *(_QWORD *)v29 = v27;
  swift_bridgeObjectRelease();
  v30 = v56;
  v31 = (uint64_t)v18 + *(int *)(v55 + 24);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v31, v56, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v32 = v58;
  v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  v34 = v33(v30, 1, v58);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v30, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if (v34 == 1)
  {

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  }
  else
  {
    v35 = v31;
    v36 = v52;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v35, v52, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v33(v36, 1, v32) == 1)
    {
      v37 = v53;
      UnknownStorage.init()();
      v38 = (_QWORD *)(v37 + *(int *)(v32 + 20));
      *v38 = 0;
      v38[1] = 0;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v36, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    }
    else
    {
      v37 = v53;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v36, v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    }
    v39 = (uint64_t)v54;
    v40 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v37, v39, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v41 = (uint64_t *)(v39 + *(int *)(v32 + 20));
    if (v41[1])
    {
      v42 = *v41;
      v43 = v41[1];
    }
    else
    {
      v42 = 0;
      v43 = 0xE000000000000000;
    }
    v44 = (char *)v40;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v39, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v45 = &v44[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
    swift_beginAccess();
    *(_QWORD *)v45 = v42;
    *((_QWORD *)v45 + 1) = v43;

    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
    v46 = (void **)&v19[OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_responseDebugInfo];
    swift_beginAccess();
    v47 = *v46;
    *v46 = v44;

  }
  return v19;
}

char *specialized DULanguageTaggingResponse.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  void **v33;
  void *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v38 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v2 = *(_QWORD *)(v38 - 8);
  v3 = MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v36 = (uint64_t)&v36 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DULanguageTaggingResponse()), sel_init);
  v16 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  v17 = *v14;
  v18 = &v15[OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_languageTags];
  swift_beginAccess();
  *(_QWORD *)v18 = v17;
  v19 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = (uint64_t)v14 + *(int *)(v12 + 24);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v20, (uint64_t)v11, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48);
  v22 = v38;
  LODWORD(v15) = v21(v11, 1, v38);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v11, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((_DWORD)v15 == 1)
  {

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v16, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  }
  else
  {
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v20, (uint64_t)v9, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v21(v9, 1, v22) == 1)
    {
      v23 = v36;
      UnknownStorage.init()();
      v24 = (_QWORD *)(v23 + *(int *)(v22 + 20));
      *v24 = 0;
      v24[1] = 0;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    }
    else
    {
      v23 = v36;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, v36, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    }
    v25 = v16;
    v26 = (uint64_t)v37;
    v27 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v23, v26, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v28 = (uint64_t *)(v26 + *(int *)(v22 + 20));
    if (v28[1])
    {
      v29 = *v28;
      v30 = v28[1];
    }
    else
    {
      v29 = 0;
      v30 = 0xE000000000000000;
    }
    v31 = (char *)v27;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v26, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v32 = &v31[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
    swift_beginAccess();
    *(_QWORD *)v32 = v29;
    *((_QWORD *)v32 + 1) = v30;

    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v25, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
    v33 = (void **)&v19[OBJC_IVAR____TtC21DocumentUnderstanding25DULanguageTaggingResponse_responseDebugInfo];
    swift_beginAccess();
    v34 = *v33;
    *v33 = v31;

  }
  return v19;
}

char *specialized DUUserInterfaceUnderstandingResponse.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  double *v33;
  double v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  void **v56;
  void *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v2 = *(_QWORD *)(v72 - 8);
  v3 = MEMORY[0x24BDAC7A8](v72);
  v5 = (uint64_t *)((char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = MEMORY[0x24BDAC7A8](v3);
  v71 = (uint64_t)&v59 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v59 - v8;
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v67 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v66 = (uint64_t)&v59 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v65 = (uint64_t)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v69 = (uint64_t)&v59 - v18;
  v68 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  MEMORY[0x24BDAC7A8](v68);
  v20 = (uint64_t *)((char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUUserInterfaceUnderstandingResponse()), sel_init);
  v22 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  v23 = *v20;
  v73 = MEMORY[0x24BEE4AF8];
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v60 = v11;
    v61 = v10;
    v62 = v20;
    v64 = v22;
    v25 = v23 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v70 = *(_QWORD *)(v2 + 72);
    v59 = v23;
    swift_bridgeObjectRetain_n();
    v63 = v21;
    v26 = v21;
    do
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v25, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      v27 = v71;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, v71, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      v28 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUUserInterfaceUnderstandingResult()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v27, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      v29 = *v5;
      v30 = v5[1];
      v31 = &v28[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicIdentifier];
      swift_beginAccess();
      *(_QWORD *)v31 = v29;
      *((_QWORD *)v31 + 1) = v30;
      v32 = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v33 = (double *)((char *)v5 + *(int *)(v72 + 24));
      if (*((_BYTE *)v33 + 8))
        v34 = 0.0;
      else
        v34 = *v33;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      v35 = (double *)&v32[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicConfidence];
      swift_beginAccess();
      *v35 = v34;

      v36 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      MEMORY[0x22E2AFAFC](v36);
      if (*(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v25 += v70;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v37 = v73;
    v38 = v64;
    v21 = v63;
    v20 = v62;
    v10 = v61;
    v11 = v60;
  }
  else
  {
    v39 = v21;
    swift_bridgeObjectRetain();
    v37 = MEMORY[0x24BEE4AF8];
    v38 = v22;
  }
  swift_bridgeObjectRelease();
  v40 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_foundEntities];
  swift_beginAccess();
  *(_QWORD *)v40 = v37;
  swift_bridgeObjectRelease();
  v41 = (uint64_t)v20 + *(int *)(v68 + 24);
  v42 = v69;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v41, v69, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v44 = v43(v42, 1, v10);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v42, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if (v44 == 1)
  {

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v38, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  }
  else
  {
    v45 = v41;
    v46 = v65;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v45, v65, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v43(v46, 1, v10) == 1)
    {
      v47 = v66;
      UnknownStorage.init()();
      v48 = (_QWORD *)(v47 + *(int *)(v10 + 20));
      *v48 = 0;
      v48[1] = 0;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v46, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    }
    else
    {
      v47 = v66;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v46, v66, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    }
    v49 = (uint64_t)v67;
    v50 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, v49, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v51 = (uint64_t *)(v49 + *(int *)(v10 + 20));
    if (v51[1])
    {
      v52 = *v51;
      v53 = v51[1];
    }
    else
    {
      v52 = 0;
      v53 = 0xE000000000000000;
    }
    v54 = (char *)v50;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v49, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v55 = &v54[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
    swift_beginAccess();
    *(_QWORD *)v55 = v52;
    *((_QWORD *)v55 + 1) = v53;

    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v38, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
    v56 = (void **)&v21[OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_responseDebugInfo];
    swift_beginAccess();
    v57 = *v56;
    *v56 = v54;

  }
  return v21;
}

char *specialized DUCategoryClassificationResponse.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  double v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  id v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  void **v60;
  void *v61;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v76 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v75 = (uint64_t)&v63 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v63 - v8;
  v73 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v72 = *(_QWORD *)(v73 - 8);
  v10 = MEMORY[0x24BDAC7A8](v73);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v69 = (uint64_t)&v63 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v68 = (uint64_t)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v71 = (uint64_t)&v63 - v17;
  v18 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (uint64_t *)((char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCategoryClassificationResponse()), sel_init);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  v22 = *v20;
  v77 = MEMORY[0x24BEE4AF8];
  v23 = *(_QWORD *)(v22 + 16);
  v70 = v12;
  if (v23)
  {
    v64 = v18;
    v65 = v20;
    v67 = a1;
    v24 = v22 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v74 = *(_QWORD *)(v3 + 72);
    v63 = v22;
    swift_bridgeObjectRetain_n();
    v66 = v21;
    v25 = v21;
    do
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v24, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
      v26 = (uint64_t)v9;
      v27 = (uint64_t)v9;
      v28 = v75;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v27, v75, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
      v29 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCategoryResult()), sel_init);
      v30 = v76;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v28, v76, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
      v31 = v2;
      v32 = (uint64_t *)(v30 + *(int *)(v2 + 20));
      if (v32[1])
      {
        v33 = *v32;
        v34 = v32[1];
      }
      else
      {
        v33 = 0;
        v34 = 0xE000000000000000;
      }
      v35 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryIdentifier];
      swift_beginAccess();
      *(_QWORD *)v35 = v33;
      *((_QWORD *)v35 + 1) = v34;
      v36 = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v2 = v31;
      v37 = v76 + *(int *)(v31 + 24);
      if (*(_BYTE *)(v37 + 8))
        v38 = 0.0;
      else
        v38 = *(double *)v37;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v76, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
      v39 = (double *)&v36[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryConfidence];
      swift_beginAccess();
      *v39 = v38;

      v9 = (char *)v26;
      v40 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v26, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
      MEMORY[0x22E2AFAFC](v40);
      if (*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v24 += v74;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    v41 = v77;
    a1 = v67;
    v21 = v66;
    v20 = v65;
    v18 = v64;
  }
  else
  {
    v42 = v21;
    swift_bridgeObjectRetain();
    v41 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v43 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_categories];
  swift_beginAccess();
  *(_QWORD *)v43 = v41;
  swift_bridgeObjectRelease();
  v44 = (uint64_t)v20 + *(int *)(v18 + 24);
  v45 = v71;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v44, v71, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  v47 = v73;
  v48 = v46(v45, 1, v73);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v45, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if (v48 == 1)
  {

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  }
  else
  {
    v49 = v44;
    v50 = v68;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, v68, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v46(v50, 1, v47) == 1)
    {
      v51 = v69;
      UnknownStorage.init()();
      v52 = (_QWORD *)(v51 + *(int *)(v47 + 20));
      *v52 = 0;
      v52[1] = 0;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v50, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    }
    else
    {
      v51 = v69;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v50, v69, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    }
    v53 = (uint64_t)v70;
    v54 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v51, v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v55 = (uint64_t *)(v53 + *(int *)(v47 + 20));
    if (v55[1])
    {
      v56 = *v55;
      v57 = v55[1];
    }
    else
    {
      v56 = 0;
      v57 = 0xE000000000000000;
    }
    v58 = (char *)v54;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
    v59 = &v58[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
    swift_beginAccess();
    *(_QWORD *)v59 = v56;
    *((_QWORD *)v59 + 1) = v57;

    swift_bridgeObjectRelease();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
    v60 = (void **)&v21[OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_responseDebugInfo];
    swift_beginAccess();
    v61 = *v60;
    *v60 = v58;

  }
  return v21;
}

char *specialized DUFoundInEventResult.__allocating_init<A>(proto:)(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  id v15;
  void *v16;
  Class isa;
  id v18;
  void **v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  Class v28;
  id v29;
  void **v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  unint64_t v38;
  void *v39;
  Class v40;
  id v41;
  void **v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  void *v50;
  Class v51;
  id v52;
  void **v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  unint64_t v61;
  void *v62;
  Class v63;
  id v64;
  void **v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  void *v73;
  Class v74;
  id v75;
  void **v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  id v85;
  unint64_t v86;
  void *v87;
  Class v88;
  id v89;
  void **v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  id v99;
  void *v100;
  Class v101;
  id v102;
  void **v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  id v110;
  unint64_t v111;
  void *v112;
  Class v113;
  id v114;
  void **v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  id v122;
  void *v123;
  Class v124;
  id v125;
  void **v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  id v134;
  void *v135;
  Class v136;
  id v137;
  void **v138;
  void *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  _BYTE *v151;
  unint64_t v152;

  v2 = v1;
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v148 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v6, v7);
  v8 = (char *)objc_msgSend(objc_allocWithZone(v2), sel_init);
  v9 = *(int *)(v4 + 20);
  v150 = v6;
  v148 = v9;
  v10 = *(_QWORD *)&v6[v9];
  swift_beginAccess();
  LOBYTE(a1) = *(_BYTE *)(v10 + 16);
  v11 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_detectedEventPolarity];
  swift_beginAccess();
  *v11 = a1;
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 33))
    v12 = 0;
  else
    v12 = *(_QWORD *)(v10 + 24);
  v13 = v8;
  v14 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xED000064496E6F69, v12);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v152 = (unint64_t)"ultilingual_implementation";
  v16 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, v12, isa);

  v19 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationIdError];
  swift_beginAccess();
  v20 = *v19;
  *v19 = v18;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 48))
  {
    v21 = *(_QWORD *)(v10 + 40);
    v22 = *(_QWORD *)(v10 + 48);
  }
  else
  {
    v21 = 0;
    v22 = 0xE000000000000000;
  }
  v151 = (_BYTE *)(v10 + 273);
  v23 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationId];
  swift_beginAccess();
  *(_QWORD *)v23 = v21;
  *((_QWORD *)v23 + 1) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 65))
    v24 = 0;
  else
    v24 = *(_QWORD *)(v10 + 56);
  v25 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461767265736572, 0xEF656D614E6E6F69, v24);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v25);
  swift_bridgeObjectRelease();
  v26 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v27 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, 0x80000002284D9F10);
  v28 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, v24, v28);

  v30 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationNameError];
  swift_beginAccess();
  v31 = *v30;
  *v30 = v29;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 80))
  {
    v32 = *(_QWORD *)(v10 + 72);
    v33 = *(_QWORD *)(v10 + 80);
  }
  else
  {
    v32 = 0;
    v33 = 0xE000000000000000;
  }
  v34 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_reservationName];
  swift_beginAccess();
  *(_QWORD *)v34 = v32;
  *((_QWORD *)v34 + 1) = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v151[32])
    v35 = 0;
  else
    v35 = *(_QWORD *)(v10 + 296);
  v36 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E6C65746F68, 0xE900000000000065, v35);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v36);
  swift_bridgeObjectRelease();
  v37 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v38 = v152 | 0x8000000000000000;
  v39 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v152 | 0x8000000000000000);
  v40 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v41 = objc_msgSend(v37, sel_initWithDomain_code_userInfo_, v39, v35, v40);

  v42 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelNameError];
  swift_beginAccess();
  v43 = *v42;
  *v42 = v41;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 320))
  {
    v44 = *(_QWORD *)(v10 + 312);
    v45 = *(_QWORD *)(v10 + 320);
  }
  else
  {
    v44 = 0;
    v45 = 0xE000000000000000;
  }
  v46 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_hotelName];
  swift_beginAccess();
  *(_QWORD *)v46 = v44;
  *((_QWORD *)v46 + 1) = v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v151[64])
    v47 = 0;
  else
    v47 = *(_QWORD *)(v10 + 328);
  v48 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E7473657567, 0xE900000000000065, v47);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v48);
  swift_bridgeObjectRelease();
  v49 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v50 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v38);
  v51 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v52 = objc_msgSend(v49, sel_initWithDomain_code_userInfo_, v50, v47, v51);

  v53 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestNameError];
  swift_beginAccess();
  v54 = *v53;
  *v53 = v52;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 352))
  {
    v55 = *(_QWORD *)(v10 + 344);
    v56 = *(_QWORD *)(v10 + 352);
  }
  else
  {
    v55 = 0;
    v56 = 0xE000000000000000;
  }
  v57 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_guestName];
  swift_beginAccess();
  *(_QWORD *)v57 = v55;
  *((_QWORD *)v57 + 1) = v56;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v151[96])
    v58 = 0;
  else
    v58 = *(_QWORD *)(v10 + 360);
  v59 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6D614E6569766F6DLL, 0xE900000000000065, v58);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v59);
  swift_bridgeObjectRelease();
  v60 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v61 = v152 | 0x8000000000000000;
  v62 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v152 | 0x8000000000000000);
  v63 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v64 = objc_msgSend(v60, sel_initWithDomain_code_userInfo_, v62, v58, v63);

  v65 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieNameError];
  swift_beginAccess();
  v66 = *v65;
  *v65 = v64;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 384))
  {
    v67 = *(_QWORD *)(v10 + 376);
    v68 = *(_QWORD *)(v10 + 384);
  }
  else
  {
    v67 = 0;
    v68 = 0xE000000000000000;
  }
  v69 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_movieName];
  swift_beginAccess();
  *(_QWORD *)v69 = v67;
  *((_QWORD *)v69 + 1) = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 97))
    v70 = 0;
  else
    v70 = *(_QWORD *)(v10 + 88);
  v71 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6464417472617473, 0xEC00000073736572, v70);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v71);
  swift_bridgeObjectRelease();
  v72 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v73 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v61);
  v74 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v75 = objc_msgSend(v72, sel_initWithDomain_code_userInfo_, v73, v70, v74);

  v76 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressError];
  swift_beginAccess();
  v77 = *v76;
  *v76 = v75;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 112))
  {
    v78 = *(_QWORD *)(v10 + 104);
    v79 = *(_QWORD *)(v10 + 112);
  }
  else
  {
    v78 = 0;
    v79 = 0xE000000000000000;
  }
  v80 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddress];
  swift_beginAccess();
  *(_QWORD *)v80 = v78;
  *((_QWORD *)v80 + 1) = v79;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v81 = *(_QWORD *)(v10 + 120);
  v82 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startAddressComponents];
  swift_beginAccess();
  *(_QWORD *)v82 = v81;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 137))
    v83 = 0;
  else
    v83 = *(_QWORD *)(v10 + 128);
  v84 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6572646441646E65, 0xEA00000000007373, v83);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v84);
  swift_bridgeObjectRelease();
  v85 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v86 = v152 | 0x8000000000000000;
  v87 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v152 | 0x8000000000000000);
  v88 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v89 = objc_msgSend(v85, sel_initWithDomain_code_userInfo_, v87, v83, v88);

  v90 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressError];
  swift_beginAccess();
  v91 = *v90;
  *v90 = v89;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 152))
  {
    v92 = *(_QWORD *)(v10 + 144);
    v93 = *(_QWORD *)(v10 + 152);
  }
  else
  {
    v92 = 0;
    v93 = 0xE000000000000000;
  }
  v94 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddress];
  swift_beginAccess();
  *(_QWORD *)v94 = v92;
  *((_QWORD *)v94 + 1) = v93;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v95 = *(_QWORD *)(v10 + 160);
  v96 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endAddressComponents];
  swift_beginAccess();
  *(_QWORD *)v96 = v95;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 177))
    v97 = 0;
  else
    v97 = *(_QWORD *)(v10 + 168);
  v98 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x616C507472617473, 0xEA00000000006563, v97);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v98);
  swift_bridgeObjectRelease();
  v99 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v100 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v86);
  v101 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v102 = objc_msgSend(v99, sel_initWithDomain_code_userInfo_, v100, v97, v101);

  v103 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlaceError];
  swift_beginAccess();
  v104 = *v103;
  *v103 = v102;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 192))
  {
    v105 = *(_QWORD *)(v10 + 184);
    v106 = *(_QWORD *)(v10 + 192);
  }
  else
  {
    v105 = 0;
    v106 = 0xE000000000000000;
  }
  v107 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startPlace];
  swift_beginAccess();
  *(_QWORD *)v107 = v105;
  *((_QWORD *)v107 + 1) = v106;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 209))
    v108 = 0;
  else
    v108 = *(_QWORD *)(v10 + 200);
  v109 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x6563616C50646E65, 0xE800000000000000, v108);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v109);
  swift_bridgeObjectRelease();
  v110 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v111 = v152 | 0x8000000000000000;
  v112 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v152 | 0x8000000000000000);
  v113 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v114 = objc_msgSend(v110, sel_initWithDomain_code_userInfo_, v112, v108, v113);

  v115 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlaceError];
  swift_beginAccess();
  v116 = *v115;
  *v115 = v114;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 224))
  {
    v117 = *(_QWORD *)(v10 + 216);
    v118 = *(_QWORD *)(v10 + 224);
  }
  else
  {
    v117 = 0;
    v118 = 0xE000000000000000;
  }
  v119 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endPlace];
  swift_beginAccess();
  *(_QWORD *)v119 = v117;
  *((_QWORD *)v119 + 1) = v118;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*(_BYTE *)(v10 + 241))
    v120 = 0;
  else
    v120 = *(_QWORD *)(v10 + 232);
  v121 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x7461447472617473, 0xE900000000000065, v120);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v121);
  swift_bridgeObjectRelease();
  v122 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v123 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v111);
  v124 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v125 = objc_msgSend(v122, sel_initWithDomain_code_userInfo_, v123, v120, v124);

  v126 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDateError];
  swift_beginAccess();
  v127 = *v126;
  *v126 = v125;

  swift_beginAccess();
  if (*(_QWORD *)(v10 + 256))
  {
    v128 = *(_QWORD *)(v10 + 248);
    v129 = *(_QWORD *)(v10 + 256);
  }
  else
  {
    v128 = 0;
    v129 = 0xE000000000000000;
  }
  v130 = (uint64_t)v150;
  v131 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_startDate];
  swift_beginAccess();
  *(_QWORD *)v131 = v128;
  *((_QWORD *)v131 + 1) = v129;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (*v151)
    v132 = 0;
  else
    v132 = *(_QWORD *)(v10 + 264);
  v133 = specialized static DUFoundInEventResult.mapErrorCodeToUserInfo(fieldName:errorCode:)(0x65746144646E65, 0xE700000000000000, v132);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v133);
  swift_bridgeObjectRelease();
  v134 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v135 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000031, v152 | 0x8000000000000000);
  v136 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v137 = objc_msgSend(v134, sel_initWithDomain_code_userInfo_, v135, v132, v136);

  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v149, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  v138 = (void **)&v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDateError];
  swift_beginAccess();
  v139 = *v138;
  *v138 = v137;

  v140 = *(_QWORD **)(v130 + v148);
  swift_beginAccess();
  if (v140[36])
  {
    v141 = v140[35];
    v142 = v140[36];
  }
  else
  {
    v141 = 0;
    v142 = 0xE000000000000000;
  }
  v143 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_endDate];
  swift_beginAccess();
  *(_QWORD *)v143 = v141;
  *((_QWORD *)v143 + 1) = v142;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v140[50])
  {
    v144 = v140[49];
    v145 = v140[50];
  }
  else
  {
    v144 = 0;
    v145 = 0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v130, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
  v146 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUFoundInEventResult_text];
  swift_beginAccess();
  *(_QWORD *)v146 = v144;
  *((_QWORD *)v146 + 1) = v145;

  swift_bridgeObjectRelease();
  return v13;
}

uint64_t DUResponse.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  void (*v59)(void);
  uint64_t v60;
  void (*v61)(void);
  void (*v62)(void);
  void (*v63)(void);
  void (*v64)(void);
  void (*v65)(void);
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  int v84;
  void (*v85)(void);
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void (*v103)(void);
  void *v104;
  uint64_t v105;
  int v106;
  void (*v107)(void);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  void (*v118)(void);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  void (*v128)(void);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  void (*v134)(void);
  void *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  void (*v171)(void);
  char *v172;
  uint64_t v173;
  void (*v174)(void);
  char *v175;
  uint64_t v176;
  void (*v177)(void);
  char *v178;
  void (*v179)(void);
  void (*v180)(void);
  void (*v181)(void);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
  MEMORY[0x24BDAC7A8](v2);
  v191 = (uint64_t)&v143 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult(0);
  v185 = *(_QWORD *)(v192 - 8);
  v4 = MEMORY[0x24BDAC7A8](v192);
  v161 = (uint64_t)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v170 = (char *)&v143 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v162 = (uint64_t)&v143 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  MEMORY[0x24BDAC7A8](v9);
  v189 = (uint64_t)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v184 = *(_QWORD *)(v190 - 8);
  v11 = MEMORY[0x24BDAC7A8](v190);
  v159 = (uint64_t)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v169 = (char *)&v143 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v160 = (uint64_t)&v143 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  MEMORY[0x24BDAC7A8](v16);
  v187 = (uint64_t)&v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v183 = *(_QWORD *)(v188 - 8);
  v18 = MEMORY[0x24BDAC7A8](v188);
  v157 = (uint64_t)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v168 = (char *)&v143 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v158 = (uint64_t)&v143 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
  MEMORY[0x24BDAC7A8](v23);
  v178 = (char *)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v182 = *(_QWORD *)(v186 - 8);
  v25 = MEMORY[0x24BDAC7A8](v186);
  v153 = (uint64_t)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v167 = (char *)&v143 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v154 = (uint64_t)&v143 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  MEMORY[0x24BDAC7A8](v30);
  v175 = (char *)&v143 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v150 = (uint64_t)&v143 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v34);
  v165 = (char *)&v143 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v151 = (uint64_t)&v143 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
  MEMORY[0x24BDAC7A8](v39);
  v172 = (char *)&v143 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = MEMORY[0x24BDAC7A8](v41);
  v146 = (uint64_t)&v143 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x24BDAC7A8](v43);
  v163 = (char *)&v143 - v46;
  MEMORY[0x24BDAC7A8](v45);
  v147 = (uint64_t)&v143 - v47;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)&v143 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = MEMORY[0x24BDAC7A8](v51);
  v143 = (uint64_t)&v143 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = MEMORY[0x24BDAC7A8](v53);
  MEMORY[0x24BDAC7A8](v55);
  v144 = (uint64_t)&v143 - v56;
  UnknownStorage.init()();
  v57 = (int *)type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  v58 = a1 + v57[5];
  v164 = v42;
  v59 = *(void (**)(void))(v42 + 56);
  v145 = v58;
  v173 = v41;
  v171 = v59;
  v59();
  v60 = a1 + v57[6];
  v166 = v33;
  v61 = *(void (**)(void))(v33 + 56);
  v148 = v60;
  v176 = v32;
  v180 = v61;
  v61();
  v62 = *(void (**)(void))(v182 + 56);
  v149 = a1 + v57[7];
  v174 = v62;
  v62();
  v63 = *(void (**)(void))(v183 + 56);
  v152 = a1 + v57[8];
  v177 = v63;
  v63();
  v64 = *(void (**)(void))(v184 + 56);
  v155 = a1 + v57[9];
  v181 = v64;
  v64();
  v65 = *(void (**)(void))(v185 + 56);
  v156 = a1 + v57[10];
  v179 = v65;
  v65();
  v66 = a1 + v57[11];
  v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v68 = v67(v66, 1, 1, v51);
  v69 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v70 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v193) + 0x158))(v68);
  if (v70)
  {
    v71 = v70;
    v72 = v69;
    (*(void (**)(void))((*v69 & *v70) + 0x78))();

    v73 = swift_dynamicCast();
    v67((uint64_t)v50, v73 ^ 1u, 1, v51);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51) != 1)
    {
      v74 = v144;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v50, v144, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v75 = v143;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v74, v143, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v66, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v75, v66, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v67(v66, 0, 1, v51);
      v76 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v74, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      goto LABEL_6;
    }
  }
  else
  {
    v72 = v69;
    v67((uint64_t)v50, 1, 1, v51);
  }
  v76 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v50, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
LABEL_6:
  v77 = (uint64_t)v178;
  v78 = v173;
  v79 = (uint64_t)v172;
  v80 = v193;
  v81 = v72;
  v82 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v72 & *v193) + 0x98))(v76);
  if (v82)
  {
    v83 = v82;
    (*(void (**)(void))((*v72 & *v82) + 0xB8))();

    v84 = swift_dynamicCast();
    v85 = v171;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v171)(v79, v84 ^ 1u, 1, v78);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v79, 1, v78);
    v87 = (uint64_t)v175;
    if (v86 != 1)
    {
      v88 = v79;
      v89 = v147;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v88, v147, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
      v90 = v146;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v89, v146, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
      v91 = v145;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v145, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v90, v91, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v85)(v91, 0, 1, v78);
      v92 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v89, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
      goto LABEL_11;
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v171)(v79, 1, 1, v78);
    v87 = (uint64_t)v175;
  }
  v92 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v79, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_TopicDetectionResponse?);
LABEL_11:
  v93 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v81 & *v80) + 0xB0))(v92);
  if (v93)
  {
    v94 = v93;
    (*(void (**)(void))((*v81 & *v93) + 0x98))();

    v95 = v176;
    v96 = swift_dynamicCast();
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v180)(v87, v96 ^ 1u, 1, v95);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v166 + 48))(v87, 1, v95) != 1)
    {
      v97 = v87;
      v98 = v151;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v97, v151, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
      v99 = v150;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v98, v150, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
      v100 = v148;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v148, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v99, v100, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v180)(v100, 0, 1, v95);
      v101 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v98, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
      goto LABEL_16;
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v180)(v87, 1, 1, v176);
  }
  v101 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v87, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
LABEL_16:
  v102 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v81 & *v80) + 0xC8))(v101);
  v103 = v181;
  if (v102)
  {
    v104 = v102;
    (*(void (**)(void))((*v81 & *v102) + 0x98))();

    v105 = v186;
    v106 = swift_dynamicCast();
    v107 = v174;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v174)(v77, v106 ^ 1u, 1, v105);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v77, 1, v105) != 1)
    {
      v108 = v77;
      v109 = v154;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v108, v154, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
      v110 = v153;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v109, v153, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
      v111 = v149;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v149, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v110, v111, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v107)(v111, 0, 1, v105);
      v112 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v109, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
      goto LABEL_21;
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v174)(v77, 1, 1, v186);
  }
  v112 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v77, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse?);
LABEL_21:
  v113 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v81 & *v80) + 0xE0))(v112);
  if (v113)
  {
    v114 = v113;
    (*(void (**)(void))((*v81 & *v113) + 0x98))();

    v116 = v187;
    v115 = v188;
    v117 = swift_dynamicCast();
    v118 = v177;
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v177)(v116, v117 ^ 1u, 1, v115);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v183 + 48))(v116, 1, v115) != 1)
    {
      v119 = v158;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v187, v158, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
      v120 = v157;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v119, v157, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
      v121 = v152;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v152, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v120, v121, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
      v103 = v181;
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v118)(v121, 0, 1, v115);
      v122 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v119, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
      goto LABEL_26;
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v177)(v187, 1, 1, v188);
  }
  v122 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v187, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
LABEL_26:
  v123 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v81 & *v80) + 0xF8))(v122);
  if (v123)
  {
    v124 = v123;
    (*(void (**)(void))((*v81 & *v123) + 0x98))();

    v126 = v189;
    v125 = v190;
    v127 = swift_dynamicCast();
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v103)(v126, v127 ^ 1u, 1, v125);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v126, 1, v125) != 1)
    {
      v128 = v103;
      v129 = v160;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v189, v160, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
      v130 = v159;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v129, v159, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
      v131 = v155;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v155, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v130, v131, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v128)(v131, 0, 1, v125);
      v132 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v129, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
      goto LABEL_31;
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v103)(v189, 1, 1, v190);
  }
  v132 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v189, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
LABEL_31:
  v133 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v81 & *v80) + 0x110))(v132);
  v134 = v179;
  if (v133)
  {
    v135 = v133;
    (*(void (**)(void))((*v81 & *v133) + 0x3B8))();

    v137 = v191;
    v136 = v192;
    v138 = swift_dynamicCast();
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v134)(v137, v138 ^ 1u, 1, v136);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v137, 1, v136) != 1)
    {
      v139 = v162;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v191, v162, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
      v140 = v161;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v139, v161, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
      v141 = v156;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v156, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v140, v141, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v134)(v141, 0, 1, v136);
      return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v139, type metadata accessor for DocumentUnderstanding_ClientInterface_FoundInEventResult);
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v179)(v191, 1, 1, v192);
  }
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v191, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_FoundInEventResult?);
}

uint64_t DUResponse.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x178))(v4);
  v7 = specialized DUResponse.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUResponse?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUResponse.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUResponse();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUResponse and conformance DUResponse, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUResponse, (uint64_t)&protocol conformance descriptor for DUResponse);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUResponse.init(coder:)(a1);
}

uint64_t DUResponse.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUResponse and conformance DUResponse, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUResponse, (uint64_t)&protocol conformance descriptor for DUResponse);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_topics] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_structuredEntities] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_languageTags] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_userInterfaceUnderstandingResults] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_documentCategories] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_foundInEventResult] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_poem] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_posTags] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding10DUResponse_responseDebugInfo] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

id DUResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUResponse()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x178))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 368);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_Response();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DUResponse()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUResponse()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228361EB4()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_Response and conformance DocumentUnderstanding_ClientInterface_Response, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_Response, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_Response);
}

uint64_t DUDocumentMessageData.conversationIdentifier.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_conversationIdentifier);
}

uint64_t DUDocumentMessageData.conversationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_conversationIdentifier);
}

uint64_t (*DUDocumentMessageData.conversationIdentifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentMessageData.creatorHandle.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_creatorHandle);
}

uint64_t DUDocumentMessageData.creatorHandle.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_creatorHandle);
}

uint64_t (*DUDocumentMessageData.creatorHandle.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUDocumentMessageData.recipientHandles.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentMessageData.recipientHandles.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientHandles);
}

uint64_t (*DUDocumentMessageData.recipientHandles.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

Class @objc DUDocumentMessageData.recipientHandles.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  Class isa;

  v3 = (_QWORD *)(a1 + *a3);
  swift_beginAccess();
  if (!*v3)
    return (Class)0;
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t DUDocumentMessageData.recipientNames.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t @objc DUDocumentMessageData.recipientHandles.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;

  if (a3)
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  else
    v6 = 0;
  v7 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v7 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t DUDocumentMessageData.recipientNames.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientNames);
}

uint64_t (*DUDocumentMessageData.recipientNames.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentMessageData.attachmentFileName.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFileName);
}

uint64_t DUDocumentMessageData.attachmentFileName.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFileName);
}

uint64_t (*DUDocumentMessageData.attachmentFileName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id @objc DUDocumentMessageData.conversationIdentifier.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  v4 = v3[1];
  if (!v4)
    return 0;
  v5 = *v3;
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x22E2AF8EC](v5, v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t DUDocumentMessageData.attachmentFilePath.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFilePath);
}

uint64_t @objc DUDocumentMessageData.conversationIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  if (a3)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v9 = v6;
  v9[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t DUDocumentMessageData.attachmentFilePath.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFilePath);
}

uint64_t (*DUDocumentMessageData.attachmentFilePath.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUDocumentMessageData.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DUDocumentMessageData.init()()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  objc_class *v5;
  objc_super v7;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_conversationIdentifier];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_creatorHandle];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientHandles] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientNames] = 0;
  v3 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFileName];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFilePath];
  v5 = (objc_class *)type metadata accessor for DUDocumentMessageData();
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v7.receiver = v0;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t type metadata accessor for DUDocumentMessageData()
{
  return objc_opt_self();
}

Swift::Void __swiftcall DUDocumentMessageData.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUDocumentMessageData();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentMessageData and conformance DUDocumentMessageData, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentMessageData, (uint64_t)&protocol conformance descriptor for DUDocumentMessageData);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUDocumentMessageData.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDocumentMessageData.init(coder:)(a1);
}

uint64_t DUDocumentMessageData.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentMessageData and conformance DUDocumentMessageData, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentMessageData, (uint64_t)&protocol conformance descriptor for DUDocumentMessageData);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t DUDocumentMessageData.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x130))(v4);
  v7 = specialized DUDocumentMessageData.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocumentMessageData?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

char *specialized DUDocumentMessageData.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BYTE v24[24];

  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)&v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentMessageData()), sel_init);
  outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(a1, (uint64_t)v4);
  v7 = v4[2];
  v6 = v4[3];
  v8 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_creatorHandle];
  swift_beginAccess();
  *(_QWORD *)v8 = v7;
  *((_QWORD *)v8 + 1) = v6;
  v9 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *v4;
  v10 = v4[1];
  v12 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_conversationIdentifier];
  swift_beginAccess();
  *(_QWORD *)v12 = v11;
  *((_QWORD *)v12 + 1) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = v4[5];
  v14 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientNames];
  swift_beginAccess();
  *(_QWORD *)v14 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = v4[4];
  v16 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientHandles];
  swift_beginAccess();
  *(_QWORD *)v16 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = v4[6];
  v17 = v4[7];
  v19 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFileName];
  swift_beginAccess();
  *(_QWORD *)v19 = v18;
  *((_QWORD *)v19 + 1) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21 = v4[8];
  v20 = v4[9];
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  v22 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFilePath];
  swift_beginAccess();
  *(_QWORD *)v22 = v21;
  *((_QWORD *)v22 + 1) = v20;

  swift_bridgeObjectRelease();
  return v9;
}

char *DUDocumentMessageData.__allocating_init<A>(proto:)()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  char v10;
  void (*v11)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _BYTE v29[24];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v29[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)&v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (char *)objc_msgSend(objc_allocWithZone(v1), sel_init);
  v10 = swift_dynamicCast();
  v11 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if ((v10 & 1) != 0)
  {
    v11(v4, 0, 1, v5);
    outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData((uint64_t)v4, (uint64_t)v8);
    v13 = v8[2];
    v12 = v8[3];
    v14 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_creatorHandle];
    swift_beginAccess();
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v16 = *v8;
    v15 = v8[1];
    v17 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_conversationIdentifier];
    swift_beginAccess();
    *(_QWORD *)v17 = v16;
    *((_QWORD *)v17 + 1) = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = v8[5];
    v19 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientNames];
    swift_beginAccess();
    *(_QWORD *)v19 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v20 = v8[4];
    v21 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_recipientHandles];
    swift_beginAccess();
    *(_QWORD *)v21 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v23 = v8[6];
    v22 = v8[7];
    v24 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFileName];
    swift_beginAccess();
    *(_QWORD *)v24 = v23;
    *((_QWORD *)v24 + 1) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v26 = v8[8];
    v25 = v8[9];
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
    v27 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding21DUDocumentMessageData_attachmentFilePath];
    swift_beginAccess();
    *(_QWORD *)v27 = v26;
    *((_QWORD *)v27 + 1) = v25;

    swift_bridgeObjectRelease();
  }
  else
  {
    v11(v4, 1, 1, v5);

    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
    return 0;
  }
  return v9;
}

uint64_t outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t DUDocumentMessageData.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _BYTE v39[24];
  uint64_t v40;

  v2 = v1;
  outlined init with copy of Any?(a1, (uint64_t)v39);
  if (!v40)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v39, &demangling cache variable for type metadata for Any?);
    goto LABEL_45;
  }
  type metadata accessor for DUDocumentMessageData();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_45:
    v9 = 0;
    return v9 & 1;
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))();
  v6 = v5;
  v7 = (*(uint64_t (**)(void))((*v3 & *v38) + 0x98))();
  v9 = v8;
  if (v6)
  {
    if (!v8)
      goto LABEL_41;
    if (v4 == v7 && v6 == v8)
    {
      swift_bridgeObjectRelease();
      v7 = swift_bridgeObjectRelease();
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v7 = swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
        goto LABEL_34;
    }
  }
  else if (v8)
  {
    goto LABEL_43;
  }
  v12 = (*(uint64_t (**)(uint64_t))((*v3 & *v2) + 0x80))(v7);
  v14 = v13;
  v15 = (*(uint64_t (**)(void))((*v3 & *v38) + 0x80))();
  v9 = v16;
  if (v14)
  {
    if (!v16)
      goto LABEL_41;
    if (v12 == v15 && v14 == v16)
    {
      swift_bridgeObjectRelease();
      v15 = swift_bridgeObjectRelease();
    }
    else
    {
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v15 = swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
        goto LABEL_34;
    }
  }
  else if (v16)
  {
    goto LABEL_43;
  }
  v19 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v3 & *v2) + 0xC8))(v15);
  v20 = (_QWORD *)(*(uint64_t (**)(void))((*v3 & *v38) + 0xC8))();
  v9 = (char)v20;
  if (v19)
  {
    if (!v20)
      goto LABEL_41;
    v21 = specialized static Array<A>.== infix(_:_:)(v19, v20);
    swift_bridgeObjectRelease();
    v20 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      goto LABEL_34;
  }
  else if (v20)
  {
    goto LABEL_43;
  }
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*v3 & *v2) + 0xB0))(v20);
  v23 = (_QWORD *)(*(uint64_t (**)(void))((*v3 & *v38) + 0xB0))();
  v9 = (char)v23;
  if (v22)
  {
    if (!v23)
      goto LABEL_41;
    v24 = specialized static Array<A>.== infix(_:_:)(v22, v23);
    swift_bridgeObjectRelease();
    v23 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
LABEL_34:

      goto LABEL_45;
    }
  }
  else if (v23)
  {
    goto LABEL_43;
  }
  v25 = (*(uint64_t (**)(_QWORD *))((*v3 & *v2) + 0xE0))(v23);
  v27 = v26;
  v28 = (*(uint64_t (**)(void))((*v3 & *v38) + 0xE0))();
  v9 = v29;
  if (v27)
  {
    if (v29)
    {
      if (v25 == v28 && v27 == v29)
      {
        swift_bridgeObjectRelease();
        v28 = swift_bridgeObjectRelease();
      }
      else
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v28 = swift_bridgeObjectRelease();
        if ((v31 & 1) == 0)
          goto LABEL_34;
      }
      goto LABEL_48;
    }
LABEL_41:

    swift_bridgeObjectRelease();
    return v9 & 1;
  }
  if (v29)
    goto LABEL_43;
LABEL_48:
  v32 = (*(uint64_t (**)(uint64_t))((*v3 & *v2) + 0xF8))(v28);
  v34 = v33;
  v35 = (*(uint64_t (**)(void))((*v3 & *v38) + 0xF8))();
  v37 = v36;
  if (!v34)
  {

    if (!v37)
    {
      v9 = 1;
      return v9 & 1;
    }
    goto LABEL_44;
  }
  if (!v36)
  {
LABEL_43:

LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  if (v32 == v35 && v34 == v36)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v9 & 1;
}

uint64_t DUDocumentMessageData.protoRepresentation.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  v3 = MEMORY[0x24BEE4AF8];
  a1[4] = MEMORY[0x24BEE4AF8];
  a1[5] = v3;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  a1[8] = 0;
  a1[9] = 0xE000000000000000;
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v4 = UnknownStorage.init()();
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  if (v7)
  {
    a1[2] = v6;
    a1[3] = v7;
  }
  v8 = (*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0x80))(v6);
  if (v9)
  {
    *a1 = v8;
    a1[1] = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0xC8))(v8);
  if (v10)
    a1[5] = v10;
  v11 = (*(uint64_t (**)(void))((*v5 & *v1) + 0xB0))();
  if (v11)
    a1[4] = v11;
  v12 = (*(uint64_t (**)(void))((*v5 & *v1) + 0xE0))();
  if (v13)
  {
    a1[6] = v12;
    a1[7] = v13;
  }
  result = (*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0xF8))(v12);
  if (v15)
  {
    a1[8] = result;
    a1[9] = v15;
  }
  return result;
}

id DUDocumentMessageData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentMessageData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocumentMessageData()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x130))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocumentMessageData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 296);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  _BOOL8 result;
  float v7;
  float v8;
  float v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  v3 = (float *)(a1 + 36);
  v4 = (float *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (double *)(a1 + 40);
  v6 = (double *)(a2 + 40);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  double *v15;
  char v16;
  double *v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v10 = (uint64_t *)((char *)&v21 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
      return 1;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1 + v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a2 + v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      v13 = *v10 == *v7 && v10[1] == v7[1];
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v14 = *(int *)(v4 + 24);
      v15 = (double *)((char *)v10 + v14);
      v16 = *((_BYTE *)v10 + v14 + 8);
      v17 = (double *)((char *)v7 + v14);
      v18 = *((unsigned __int8 *)v7 + v14 + 8);
      if ((v16 & 1) != 0)
      {
        if (!v18)
          break;
      }
      else
      {
        if (*v15 != *v17)
          LOBYTE(v18) = 1;
        if ((v18 & 1) != 0)
          break;
      }
      v22 = v11;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v19 = v22;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      v12 += v21;
      v11 = v19 - 1;
      if (!v11)
        return 1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
  }
  return 0;
}

{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char v38;
  BOOL v40;
  uint64_t v42;

  v4 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v42 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1 + v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a2 + v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
        v15 = v4[5];
        v16 = &v10[v15];
        v17 = *(_QWORD *)&v10[v15 + 8];
        v18 = &v7[v15];
        v19 = *((_QWORD *)v18 + 1);
        if (v17)
        {
          if (!v19
            || (*(_QWORD *)v16 == *(_QWORD *)v18 ? (v20 = v17 == v19) : (v20 = 0),
                !v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
          {
LABEL_46:
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
            goto LABEL_47;
          }
        }
        else if (v19)
        {
          goto LABEL_46;
        }
        v21 = v4[6];
        v22 = &v10[v21];
        v23 = *(_QWORD *)&v10[v21 + 8];
        v24 = &v7[v21];
        v25 = *((_QWORD *)v24 + 1);
        if (v23)
        {
          if (!v25)
            goto LABEL_46;
          v26 = *(_QWORD *)v22 == *(_QWORD *)v24 && v23 == v25;
          if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_46;
        }
        else if (v25)
        {
          goto LABEL_46;
        }
        v27 = v4[7];
        v28 = &v10[v27];
        v29 = *(_QWORD *)&v10[v27 + 8];
        v30 = &v7[v27];
        v31 = *((_QWORD *)v30 + 1);
        if (v29)
        {
          if (!v31)
            goto LABEL_46;
          v32 = *(_QWORD *)v28 == *(_QWORD *)v30 && v29 == v31;
          if (!v32 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_46;
        }
        else if (v31)
        {
          goto LABEL_46;
        }
        v33 = v4[8];
        v34 = &v10[v33];
        v35 = *(_QWORD *)&v10[v33 + 8];
        v36 = &v7[v33];
        v37 = *((_QWORD *)v36 + 1);
        if (v35)
        {
          if (!v37
            || (*(_QWORD *)v34 != *(_QWORD *)v36 || v35 != v37)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_46;
          }
        }
        else if (v37)
        {
          goto LABEL_46;
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
        v40 = v14-- != 0;
        if ((v38 & 1) != 0)
        {
          v12 += v13;
          if (v40)
            continue;
        }
        return v38 & 1;
      }
    }
    v38 = 1;
  }
  else
  {
LABEL_47:
    v38 = 0;
  }
  return v38 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v18 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v4 = MEMORY[0x24BDAC7A8](v18);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v17 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1 + v11, (uint64_t)v9, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a2 + v11, (uint64_t)v6, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
      v12 = *(int *)(v18 + 20);
      v13 = *(_QWORD **)&v9[v12];
      v14 = *(_QWORD **)&v6[v12];
      if (v13 != v14)
      {
        swift_retain();
        swift_retain();
        v15 = closure #1 in static DocumentUnderstanding_ClientInterface_StructuredEntity.== infix(_:_:)(v13, v14);
        swift_release();
        swift_release();
        if ((v15 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
        break;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
      v11 += v17;
      if (!--v10)
        return 1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (_QWORD **)((char *)&v19 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1 + v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a2 + v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        v15 = specialized static DocumentUnderstanding_ClientInterface_TopicResult.== infix(_:_:)(v10, v7);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  char v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (uint64_t *)((char *)&v38 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v27 = 1;
      return v27 & 1;
    }
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v38 = a2 + v13;
    v39 = a1 + v13;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v39 + v14 * v12, (uint64_t)v10, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v38 + v14 * v12, (uint64_t)v7, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
      v15 = *(_QWORD *)v7;
      if (v7[8] == 1)
        __asm { BR              X10 }
      if (*v10 != v15)
        break;
      v16 = (_QWORD *)v10[2];
      v17 = (_QWORD *)*((_QWORD *)v7 + 2);
      v18 = v16[2];
      if (v18 != v17[2])
        break;
      if (v18)
        v19 = v16 == v17;
      else
        v19 = 1;
      if (!v19)
      {
        v20 = v16[4] == v17[4] && v16[5] == v17[5];
        if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          break;
        if (v18 != 1)
        {
          if ((v16[6] != v17[6] || v16[7] != v17[7]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          v21 = v18 - 2;
          if (v21)
          {
            v34 = v17 + 9;
            v35 = v16 + 9;
            do
            {
              v36 = *(v35 - 1) == *(v34 - 1) && *v35 == *v34;
              if (!v36 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                goto LABEL_50;
              v34 += 2;
              v35 += 2;
            }
            while (--v21);
          }
        }
      }
      v22 = (_QWORD *)v10[3];
      v23 = (_QWORD *)*((_QWORD *)v7 + 3);
      v24 = v22[2];
      if (v24 != v23[2])
        break;
      if (v24)
        v25 = v22 == v23;
      else
        v25 = 1;
      if (!v25)
      {
        if (v22[4] != v23[4])
          break;
        if (v24 != 1)
        {
          if (v22[5] != v23[5])
            break;
          v28 = v22 + 6;
          v29 = v23 + 6;
          v30 = v24 - 2;
          while (v30)
          {
            v32 = *v28++;
            v31 = v32;
            v33 = *v29++;
            --v30;
            if (v31 != v33)
              goto LABEL_50;
          }
        }
      }
      v26 = v10[4] == *((_QWORD *)v7 + 4) && v10[5] == *((_QWORD *)v7 + 5);
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
      if ((v27 & 1) != 0 && ++v12 != v11)
        continue;
      return v27 & 1;
    }
LABEL_50:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, type metadata accessor for DocumentUnderstanding_ClientInterface_TaggedCharacterRange);
  }
  v27 = 0;
  return v27 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;

  v22 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v4 = MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v21 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
  {
LABEL_15:
    v17 = 0;
    return v17 & 1;
  }
  if (v10 && a1 != a2)
  {
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v21 = *(_QWORD *)(v7 + 72);
    v12 = v10 - 1;
    while (1)
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1 + v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a2 + v11, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
      v13 = *(int *)(v22 + 20);
      v14 = *(_QWORD *)&v9[v13];
      v15 = *(_QWORD *)&v6[v13];
      if (v14 != v15)
      {
        swift_retain();
        swift_retain();
        v16 = closure #1 in static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement.== infix(_:_:)(v14, v15);
        swift_release();
        swift_release();
        if ((v16 & 1) == 0)
          break;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
      v19 = v12-- != 0;
      if ((v17 & 1) != 0)
      {
        v11 += v21;
        if (v19)
          continue;
      }
      return v17 & 1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
    goto LABEL_15;
  }
  v17 = 1;
  return v17 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocumentMessageData()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228363B58()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  double *v24;
  char v25;
  double *v26;
  int v27;
  char v28;
  BOOL v30;
  uint64_t v32;

  v6 = a3(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v32 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (v13 && a1 != a2)
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v15 = *(_QWORD *)(v10 + 72);
      v16 = v13 - 1;
      while (1)
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1 + v14, (uint64_t)v12, a3);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a2 + v14, (uint64_t)v9, a3);
        v17 = *(int *)(v6 + 20);
        v18 = &v12[v17];
        v19 = *(_QWORD *)&v12[v17 + 8];
        v20 = &v9[v17];
        v21 = *((_QWORD *)v20 + 1);
        if (v19)
        {
          if (!v21)
            goto LABEL_27;
          v22 = *(_QWORD *)v18 == *(_QWORD *)v20 && v19 == v21;
          if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            goto LABEL_27;
        }
        else if (v21)
        {
          goto LABEL_27;
        }
        v23 = *(int *)(v6 + 24);
        v24 = (double *)&v12[v23];
        v25 = v12[v23 + 8];
        v26 = (double *)&v9[v23];
        v27 = v9[v23 + 8];
        if ((v25 & 1) != 0)
        {
          if (!v27)
            goto LABEL_27;
        }
        else
        {
          if (*v24 != *v26)
            LOBYTE(v27) = 1;
          if ((v27 & 1) != 0)
          {
LABEL_27:
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, a3);
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v12, a3);
            goto LABEL_28;
          }
        }
        type metadata accessor for UnknownStorage();
        lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, a3);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v12, a3);
        v30 = v16-- != 0;
        if ((v28 & 1) != 0)
        {
          v14 += v15;
          if (v30)
            continue;
        }
        return v28 & 1;
      }
    }
    v28 = 1;
  }
  else
  {
LABEL_28:
    v28 = 0;
  }
  return v28 & 1;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v30)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v31 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v3 + 32); ; result = (id)MEMORY[0x22E2AFF34](0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)MEMORY[0x22E2AFF34](0, v2);
LABEL_21:
    v14 = v13;
    type metadata accessor for DUDocumentUIElement();
    v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
      goto LABEL_48;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v17 = 0;
      v18 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v31)
          v19 = (id)MEMORY[0x22E2AFF34](v17 + 1, v3);
        else
          v19 = *(id *)(v3 + 40 + 8 * v17);
        v20 = v19;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v21 = (id)MEMORY[0x22E2AFF34](v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v8 + 16))
            goto LABEL_53;
          v21 = *(id *)(v2 + 40 + 8 * v17);
        }
        v22 = v21;
        v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v18 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24 <= 1)
        v24 = 1;
      v25 = v24 - 1;
      v26 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v25)
          goto LABEL_52;
        v28 = *v26++;
        v27 = v28;
        v29 = *(void **)v8;
        v8 += 8;
        v2 = v27;
        v3 = v29;
        v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.subject.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.subject.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.subject.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderName.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderEmail.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderEmail.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderEmail.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderDomain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderDomain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.senderDomain.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientNames.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientEmails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientEmails.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.recipientEmails.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccNames.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccEmails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccEmails.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.ccEmails.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccNames.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccEmails.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccEmails.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.bccEmails.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

double DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.dateReceived.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

void DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.dateReceived.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 112) = a1;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.dateReceived.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData() + 60);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData() + 60);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  v2 = MEMORY[0x24BEE4AF8];
  a1[8] = MEMORY[0x24BEE4AF8];
  a1[9] = v2;
  a1[10] = v2;
  a1[11] = v2;
  a1[12] = v2;
  a1[13] = v2;
  a1[14] = 0;
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  return UnknownStorage.init()();
}

void *DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.protoMessageName.getter()
{
  return 0xD000000000000040;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          break;
        case 11:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 8);
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = *(_QWORD *)(v0 + 24);
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      v7 = *(_QWORD *)(v0 + 40);
      v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v8 = *(_QWORD *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        v9 = *(_QWORD *)(v0 + 56);
        v10 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0)
          v10 = *(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (!*(_QWORD *)(*(_QWORD *)(v0 + 64) + 16)
            || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
          {
            if (!*(_QWORD *)(*(_QWORD *)(v0 + 72) + 16)
              || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
            {
              if (!*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16)
                || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
              {
                if (!*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16)
                  || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
                {
                  if (!*(_QWORD *)(*(_QWORD *)(v0 + 96) + 16)
                    || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
                  {
                    if (!*(_QWORD *)(*(_QWORD *)(v0 + 104) + 16)
                      || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
                    {
                      if (*(double *)(v0 + 112) == 0.0
                        || (result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
                      {
                        type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
                        return UnknownStorage.traverse<A>(visitor:)();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  v1 = MEMORY[0x24BEE4AF8];
  a1[8] = MEMORY[0x24BEE4AF8];
  a1[9] = v1;
  a1[10] = v1;
  a1[11] = v1;
  a1[12] = v1;
  a1[13] = v1;
  a1[14] = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return 0xD000000000000040;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 60);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 60);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
        || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
          || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 64), *(_QWORD **)(a2 + 64)) & 1) != 0
            && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 72), *(_QWORD **)(a2 + 72)) & 1) != 0
            && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 80), *(_QWORD **)(a2 + 80)) & 1) != 0
            && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 88), *(_QWORD **)(a2 + 88)) & 1) != 0
            && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 96), *(_QWORD **)(a2 + 96)) & 1) != 0
            && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 104), *(_QWORD **)(a2 + 104)) & 1) != 0
            && *(double *)(a1 + 112) == *(double *)(a2 + 112))
          {
            v14 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
            v15 = a1 + *(int *)(v14 + 60);
            v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v16(v10, v15, v4);
            v16(v8, a2 + *(int *)(v14 + 60), v4);
            lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            v17 = *(void (**)(char *, uint64_t))(v5 + 8);
            v17(v8, v4);
            v17(v10, v4);
          }
          else
          {
            v12 = 0;
          }
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  uint64_t v17;
  char *v18;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    v17 = a2[13];
    a1[12] = a2[12];
    a1[13] = v17;
    v11 = *(int *)(a3 + 60);
    v18 = (char *)a2 + v11;
    v16 = (char *)a1 + v11;
    a1[14] = a2[14];
    v12 = type metadata accessor for UnknownStorage();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v16, v18, v12);
  }
  return v3;
}

uint64_t destroy for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 60);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  v15 = a2[13];
  a1[12] = a2[12];
  a1[13] = v15;
  v10 = *(int *)(a3 + 60);
  v16 = (char *)a2 + v10;
  v14 = (char *)a1 + v10;
  a1[14] = a2[14];
  v11 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v14, v16, v11);
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  v6 = *(int *)(a3 + 60);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v7 = *(int *)(a3 + 60);
  v8 = a2 + v7;
  v9 = a1 + v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, v8, v10);
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRelease();
  a1[13] = a2[13];
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  v10 = *(int *)(a3 + 60);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283662D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22836635C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DUCreateContextRequestSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUCreateContextRequestSpecification.phaseID.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t DUCreateContextRequestSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUCreateContextRequestSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUCreateContextRequestSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUCreateContextRequestSpecification()
{
  return 0xD00000000000001CLL;
}

uint64_t type metadata accessor for DUCreateContextRequestSpecification()
{
  return objc_opt_self();
}

unint64_t static DUWikipediaTopicDetectionDefaultImplementation.implementationID.getter()
{
  return 0xD000000000000030;
}

uint64_t static DUWikipediaTopicDetectionDefaultImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUWikipediaTopicDetectionSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUWikipediaTopicDetectionSpecification;
  *a1 = result;
  return result;
}

void *static DUWikipediaTopicDetectionDefaultImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUWikipediaTopicDetectionDefaultImplementation.implementationAttributes.getter;
}

id DUWikipediaTopicDetectionDefaultImplementation.contextClient.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  if (v1 == (void *)1)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_clientWithDefaultRequestType_, 19);
    v3 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v2;
    v4 = v2;
    outlined consume of CKContextClient??(v3);
  }
  outlined copy of CKContextClient??(v1);
  return v2;
}

void DUWikipediaTopicDetectionDefaultImplementation.contextClient.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  outlined consume of CKContextClient??(v2);
}

void (*DUWikipediaTopicDetectionDefaultImplementation.contextClient.modify(id *a1))(uint64_t a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = DUWikipediaTopicDetectionDefaultImplementation.contextClient.getter();
  return DUWikipediaTopicDetectionDefaultImplementation.contextClient.modify;
}

void DUWikipediaTopicDetectionDefaultImplementation.contextClient.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
  if ((a2 & 1) != 0)
  {
    v5 = v2;
    outlined consume of CKContextClient??(v4);

  }
  else
  {
    outlined consume of CKContextClient??(v4);
  }
}

uint64_t DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v1 = (void *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 136) + 136))();

  if (v1)
  {
    type metadata accessor for DUConcatenatedDocumentTextSpecification();
    *(_QWORD *)(v0 + 152) = swift_allocObject();
    v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                         + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v2;
    *v2 = v0;
    v2[1] = DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:);
    return v6(*(_QWORD *)(v0 + 136));
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v4 = swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000015;
    *(_QWORD *)(v5 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v5 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, 1);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  if (*(_QWORD *)(v0 + 176))
  {
    type metadata accessor for DUCreateContextRequestSpecification();
    *(_QWORD *)(v0 + 184) = swift_allocObject();
    v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                         + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v1;
    *v1 = v0;
    v1[1] = DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:);
    return v5(*(_QWORD *)(v0 + 136));
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v3 = swift_allocError();
    *(_QWORD *)v4 = 0xD000000000000031;
    *(_QWORD *)(v4 + 8) = 0x80000002284DD540;
    *(_BYTE *)(v4 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, 1);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 200);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 168);
    v2 = *(_QWORD *)(v0 + 176);
    v4 = v1;
    v5 = (void *)MEMORY[0x22E2AF8EC](v3, v2);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setText_, v5);

    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:);
    v6 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    v7 = (_QWORD *)(v0 + 80);
    v7[1] = 0x40000000;
    v7[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CKContextResponse?) -> () with result type CKContextResponse?;
    v7[3] = &block_descriptor_2;
    v7[4] = v6;
    objc_msgSend(v4, sel_executeWithReply_, v7);
    return swift_continuation_await();
  }
  else
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v9 = swift_allocError();
    *(_QWORD *)v10 = 0xD00000000000002FLL;
    *(_QWORD *)(v10 + 8) = 0x80000002284DB340;
    *(_BYTE *)(v10 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, 1);
  }
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 120);
  if (v1 && (v2 = objc_msgSend(*(id *)(v0 + 120), sel_results)) != 0)
  {
    v3 = v2;
    v4 = *(void **)(v0 + 200);
    type metadata accessor for CKContextResult();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_retain();
    v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CKContextResultCG_21DocumentUnderstanding016DUWikipediaTopicE0Vs5NeverOTg504_s21f15Understanding46hi60DetectionDefaultImplementationC17runTypedOnRequest7requests6e16OySayAA0cdM0VGs5c34_pGAA012DUProcessingK0C_tYaFAISo09dW6CXEfU_AI0himnO0CTf1cn_nTf4ng_n(v5);
    swift_release();

    swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v8 = *(void **)(v0 + 200);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v6 = swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000027;
    *(_QWORD *)(v9 + 8) = 0x80000002284DD580;
    v7 = 1;
    *(_BYTE *)(v9 + 16) = 1;

  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v7);
}

uint64_t DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = a2;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

id closure #1 in DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:)@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  char v36;
  uint64_t v37;

  v3 = *a1;
  v4 = objc_msgSend(*a1, sel_title);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = objc_msgSend(v3, sel_topicId);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = objc_msgSend(v3, sel_debug);
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v16;
    v34 = v15;

  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  result = objc_msgSend(v3, sel_debug);
  if (!result)
    goto LABEL_21;
  v18 = result;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  v32 = &v30;
  v37 = 0;
  v23 = MEMORY[0x24BDAC7A8](v22);
  if ((v21 & 0x1000000000000000) == 0 && v21 & 0x2000000000000000 | v19 & 0x1000000000000000)
  {
    v30 = v12;
    v31 = v5;
    MEMORY[0x24BDAC7A8](v23);
    if ((v21 & 0x2000000000000000) != 0)
    {
      v35[0] = v19;
      v35[1] = v21 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v19)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          v26 = 0;
          break;
        default:
          swift_bridgeObjectRetain();
          v29 = (_BYTE *)_swift_stdlib_strtod_clocale();
          if (v29)
            v26 = *v29 == 0;
          else
            v26 = 0;
          break;
      }
      v36 = v26;
      result = (id)swift_bridgeObjectRelease_n();
      goto LABEL_18;
    }
    if ((v19 & 0x1000000000000000) != 0)
    {
      v24 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
      swift_bridgeObjectRetain();
    }
    else
    {
      v24 = _StringObject.sharedUTF8.getter();
      swift_bridgeObjectRetain();
      if (!v24)
      {
        v25 = 0;
        goto LABEL_14;
      }
    }
    v25 = v24;
LABEL_14:
    ((void (*)(_QWORD *__return_ptr, uint64_t))partial apply for closure #1 in closure #1 in Double.init<A>(_:))(v35, v25);
    v36 = v35[0];
    result = (id)swift_bridgeObjectRelease_n();
LABEL_18:
    v12 = v30;
    v5 = v31;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  _StringGuts._slowWithCString<A>(_:)();
  result = (id)swift_bridgeObjectRelease_n();
LABEL_19:
  if ((v36 & 1) == 0)
  {
LABEL_21:
    v27 = 0x3FF0000000000000;
    goto LABEL_22;
  }
  v27 = v37;
LABEL_22:
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v12;
  v28 = v33;
  *(_QWORD *)(a2 + 32) = v34;
  *(_QWORD *)(a2 + 40) = v28;
  *(_QWORD *)(a2 + 48) = v27;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

uint64_t DUWikipediaTopicDetectionDefaultImplementation.deinit()
{
  uint64_t v0;

  outlined consume of CKContextClient??(*(id *)(v0 + 16));
  return v0;
}

uint64_t DUWikipediaTopicDetectionDefaultImplementation.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of CKContextClient??(*(id *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t DUWikipediaTopicDetectionDefaultImplementation.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 1;
  return result;
}

uint64_t DUWikipediaTopicDetectionDefaultImplementation.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 1;
  return result;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUWikipediaTopicDetectionDefaultImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUWikipediaTopicDetectionSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUWikipediaTopicDetectionSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUWikipediaTopicDetectionDefaultImplementation()
{
  return 0xD000000000000030;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUWikipediaTopicDetectionDefaultImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUWikipediaTopicDetectionDefaultImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUWikipediaTopicDetectionDefaultImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 120) + *(_QWORD *)(**(_QWORD **)v2 + 120));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

void outlined consume of CKContextClient??(id a1)
{
  if (a1 != (id)1)

}

id outlined copy of CKContextClient??(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

unint64_t type metadata accessor for CKContextResult()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CKContextResult;
  if (!lazy cache variable for type metadata for CKContextResult)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CKContextResult);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo15CKContextResultCG_21DocumentUnderstanding016DUWikipediaTopicE0Vs5NeverOTg504_s21f15Understanding46hi60DetectionDefaultImplementationC17runTypedOnRequest7requests6e16OySayAA0cdM0VGs5c34_pGAA012DUProcessingK0C_tYaFAISo09dW6CXEfU_AI0himnO0CTf1cn_nTf4ng_n(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v2 = v1;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (!v4)
      return v5;
    v27 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v7 = 0;
    v5 = v27;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x22E2AFF34](v7, a1);
      else
        v8 = *(id *)(a1 + 8 * v7 + 32);
      v9 = v8;
      v21 = v8;
      closure #1 in DUWikipediaTopicDetectionDefaultImplementation.runTypedOnRequest(request:)(&v21, (uint64_t)&v22);
      if (v2)
      {
        swift_release();

        return v5;
      }
      v2 = 0;

      v10 = v22;
      v11 = v23;
      v12 = v24;
      v13 = v25;
      v14 = v26;
      v27 = v5;
      v16 = *(_QWORD *)(v5 + 16);
      v15 = *(_QWORD *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        v19 = v23;
        v20 = v22;
        v18 = v24;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v12 = v18;
        v11 = v19;
        v10 = v20;
        v5 = v27;
      }
      ++v7;
      *(_QWORD *)(v5 + 16) = v16 + 1;
      v17 = v5 + (v16 << 6);
      *(_OWORD *)(v17 + 32) = v10;
      *(_OWORD *)(v17 + 48) = v11;
      *(_OWORD *)(v17 + 64) = v12;
      *(_QWORD *)(v17 + 80) = v13;
      *(_BYTE *)(v17 + 88) = v14;
      if (v4 == v7)
        return v5;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUWikipediaTopicDetectionDefaultImplementation()
{
  return &protocol witness table for DUWikipediaTopicDetectionSpecification;
}

uint64_t sub_2283672EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_22836731C(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 96);
  v4 = *a1;
  return v3(v2);
}

uint64_t type metadata accessor for DUWikipediaTopicDetectionDefaultImplementation()
{
  return objc_opt_self();
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

id DUUserInterfaceUnderstandingResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

char *DUUserInterfaceUnderstandingResponse.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  double *v44;
  double v45;
  double *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  void **v70;
  void *v71;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v85 = a1;
  v83 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v82 = *(_QWORD *)(v83 - 8);
  v4 = MEMORY[0x24BDAC7A8](v83);
  v84 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v80 = (uint64_t)&v73 - v6;
  v88 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v86 = *(_QWORD *)(v88 - 8);
  v7 = MEMORY[0x24BDAC7A8](v88);
  v9 = (uint64_t *)((char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v7);
  v87 = (uint64_t)&v73 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v73 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v79 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v81 = (uint64_t)&v73 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (uint64_t *)((char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v85, a2);
  v30 = (char *)v29;
  v31 = v25;
  v32 = swift_dynamicCast();
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if ((v32 & 1) != 0)
  {
    v34 = v85;
    v76 = v30;
    v77 = v22;
    v33(v21, 0, 1, v31);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v21, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
    v75 = v28;
    v35 = *v28;
    v89 = MEMORY[0x24BEE4AF8];
    v36 = *(_QWORD *)(v35 + 16);
    v78 = a2;
    if (v36)
    {
      v74 = v31;
      v37 = v35 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
      v86 = *(_QWORD *)(v86 + 72);
      v73 = v35;
      swift_bridgeObjectRetain_n();
      do
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v37, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        v38 = v87;
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v13, v87, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        v39 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUUserInterfaceUnderstandingResult()), sel_init);
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v38, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        v41 = *v9;
        v40 = v9[1];
        v42 = &v39[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicIdentifier];
        swift_beginAccess();
        *(_QWORD *)v42 = v41;
        *((_QWORD *)v42 + 1) = v40;
        v43 = v39;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v44 = (double *)((char *)v9 + *(int *)(v88 + 24));
        if (*((_BYTE *)v44 + 8))
          v45 = 0.0;
        else
          v45 = *v44;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        v46 = (double *)&v43[OBJC_IVAR____TtC21DocumentUnderstanding34DUUserInterfaceUnderstandingResult_topicConfidence];
        swift_beginAccess();
        *v46 = v45;

        v47 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        MEMORY[0x22E2AFAFC](v47);
        if (*(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v37 += v86;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease();
      v49 = v89;
      v50 = v85;
      v51 = (uint64_t)v84;
      v31 = v74;
    }
    else
    {
      swift_bridgeObjectRetain();
      v49 = MEMORY[0x24BEE4AF8];
      v50 = v34;
      v51 = (uint64_t)v84;
    }
    swift_bridgeObjectRelease();
    v48 = v76;
    v52 = &v76[OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_foundEntities];
    swift_beginAccess();
    *(_QWORD *)v52 = v49;
    swift_bridgeObjectRelease();
    v53 = (uint64_t)v75;
    v54 = (uint64_t)v75 + *(int *)(v31 + 24);
    v55 = v81;
    outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v54, v81);
    v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
    v57 = v83;
    v58 = v56(v55, 1, v83);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v55, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v59 = v77;
    if (v58 == 1)
    {

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v50, v78);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
    }
    else
    {
      v60 = v54;
      v61 = v79;
      outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v60, v79);
      if (v56(v61, 1, v57) == 1)
      {
        v62 = v80;
        UnknownStorage.init()();
        v63 = (_QWORD *)(v62 + *(int *)(v57 + 20));
        *v63 = 0;
        v63[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v61, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        v62 = v80;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v61, v80, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v64 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v62, v51, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v65 = (uint64_t *)(v51 + *(int *)(v57 + 20));
      if (v65[1])
      {
        v66 = *v65;
        v67 = v65[1];
      }
      else
      {
        v66 = 0;
        v67 = 0xE000000000000000;
      }
      v68 = (char *)v64;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v51, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v69 = &v68[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v69 = v66;
      *((_QWORD *)v69 + 1) = v67;

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v50, v78);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
      v70 = (void **)&v48[OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_responseDebugInfo];
      swift_beginAccess();
      v71 = *v70;
      *v70 = v68;

    }
  }
  else
  {
    v33(v21, 1, 1, v25);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v85, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse?);
    return 0;
  }
  return v48;
}

uint64_t DUUserInterfaceUnderstandingResponse.foundEntities.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUUserInterfaceUnderstandingResponse.foundEntities.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_foundEntities);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUUserInterfaceUnderstandingResponse.foundEntities.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void *DUUserInterfaceUnderstandingResponse.responseDebugInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_responseDebugInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUUserInterfaceUnderstandingResponse.responseDebugInfo.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_responseDebugInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUUserInterfaceUnderstandingResponse.responseDebugInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUUserInterfaceUnderstandingResponse.protoRepresentation.getter@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  void (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;

  v2 = v1;
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
  MEMORY[0x24BDAC7A8](v4);
  v58 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult();
  v9 = *(_QWORD *)(v56 - 8);
  v10 = MEMORY[0x24BDAC7A8](v56);
  v57 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v55 = (uint64_t)&v51 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v52 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v20);
  v53 = (uint64_t)&v51 - v21;
  *a1 = MEMORY[0x24BEE4AF8];
  v22 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  UnknownStorage.init()();
  v23 = *(int *)(v22 + 24);
  v54 = a1;
  v24 = *(uint64_t (**)(void))(v17 + 56);
  v51 = (uint64_t)a1 + v23;
  v25 = v24();
  v26 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x78))(v25);
  if (v27)
  {
    v28 = v27;
    (*(void (**)(void))((*v26 & *v27) + 0x78))();

    v29 = swift_dynamicCast();
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v24)(v15, v29 ^ 1u, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      v30 = (uint64_t)v15;
      v31 = v53;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v30, v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v32 = v52;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v31, v52, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v33 = v51;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v51, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v32, v33, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v24)(v33, 0, 1, v16);
      v34 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v31, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v24)(v15, 1, 1, v16);
  }
  v34 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v15, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
LABEL_6:
  v35 = (*(uint64_t (**)(uint64_t))((*v26 & *v2) + 0x60))(v34);
  v36 = v35;
  if (!(v35 >> 62))
  {
    v37 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v37)
      goto LABEL_8;
LABEL_22:
    v40 = MEMORY[0x24BEE4AF8];
LABEL_23:
    swift_bridgeObjectRelease_n();
    v50 = v54;
    result = swift_bridgeObjectRelease();
    *v50 = v40;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v37 = result;
  if (!result)
    goto LABEL_22;
LABEL_8:
  if (v37 >= 1)
  {
    v39 = 0;
    v40 = MEMORY[0x24BEE4AF8];
    do
    {
      if ((v36 & 0xC000000000000001) != 0)
        v41 = (_QWORD *)MEMORY[0x22E2AFF34](v39, v36);
      else
        v41 = *(id *)(v36 + 8 * v39 + 32);
      v42 = v41;
      v43 = v26;
      v44 = *(void (**)(void))((*v26 & *v41) + 0x98);
      v45 = (uint64_t)v58;
      v44();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v45, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult);
      v46 = v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, v56);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v46) == 1)
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult?);
      }
      else
      {
        v47 = v55;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v8, v55, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, v57, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
        v49 = *(_QWORD *)(v40 + 16);
        v48 = *(_QWORD *)(v40 + 24);
        if (v49 >= v48 >> 1)
          v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v40);
        *(_QWORD *)(v40 + 16) = v49 + 1;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v57, v40+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v49, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResult);
      }
      ++v39;
      v26 = v43;
    }
    while (v37 != v39);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t DUUserInterfaceUnderstandingResponse.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = specialized DUUserInterfaceUnderstandingResponse.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUUserInterfaceUnderstandingResponse?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUUserInterfaceUnderstandingResponse.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUUserInterfaceUnderstandingResponse();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUUserInterfaceUnderstandingResponse and conformance DUUserInterfaceUnderstandingResponse, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUUserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DUUserInterfaceUnderstandingResponse);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUUserInterfaceUnderstandingResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUUserInterfaceUnderstandingResponse.init(coder:)(a1);
}

uint64_t DUUserInterfaceUnderstandingResponse.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUUserInterfaceUnderstandingResponse and conformance DUUserInterfaceUnderstandingResponse, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUUserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DUUserInterfaceUnderstandingResponse);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUUserInterfaceUnderstandingResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_foundEntities] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding36DUUserInterfaceUnderstandingResponse_responseDebugInfo] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUUserInterfaceUnderstandingResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

id DUUserInterfaceUnderstandingResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUUserInterfaceUnderstandingResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUUserInterfaceUnderstandingResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DUUserInterfaceUnderstandingResponse()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUUserInterfaceUnderstandingResponse()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228368A3C()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse and conformance DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_UserInterfaceUnderstandingResponse);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.categoryIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_CategoryResult;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_CategoryResult)
    return swift_getSingletonMetadata();
  return result;
}

double DocumentUnderstanding_ClientInterface_CategoryResult.categoryConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 24);
  result = *(double *)v1;
  if (*(_BYTE *)(v1 + 8))
    return 0.0;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  UnknownStorage.init()();
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v3 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v3 = 0;
  v3[1] = 0;
  v4 = a1 + *(int *)(result + 24);
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 1;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.categoryIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.categoryConfidence.setter(double a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v4 = v1 + *(int *)(result + 24);
  *(double *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_CategoryResult.categoryIdentifier : DocumentUnderstanding_ClientInterface_CategoryResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 20));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_CategoryResult.categoryIdentifier : DocumentUnderstanding_ClientInterface_CategoryResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CategoryResult.categoryIdentifier.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_ClientInterface_CategoryResult.hasCategoryIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 20)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_CategoryResult.clearCategoryIdentifier()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t (*DocumentUnderstanding_ClientInterface_CategoryResult.categoryConfidence.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = v1 + v3;
  v5 = *(double *)v4;
  if (*(_BYTE *)(v4 + 8))
    v5 = 0.0;
  *(double *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_ClientInterface_CategoryResult.hasCategoryConfidence.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 24)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_CategoryResult.clearCategoryConfidence()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult() + 24);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_ClientInterface_CategoryResult.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_CategoryResult.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_CategoryResult.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_CategoryResult.protoMessageName.getter()
{
  return 0xD000000000000036;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryResult._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_CategoryResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_CategoryResult.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_ClientInterface_CategoryResult.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DocumentUnderstanding_ClientInterface_CategoryResult.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_CategoryResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_CategoryResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_CategoryResult.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return 0xD000000000000036;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return DocumentUnderstanding_ClientInterface_CategoryResult.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return DocumentUnderstanding_ClientInterface_CategoryResult.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_CategoryResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_CategoryResult@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_CategoryResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_CategoryResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_CategoryResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_CategoryResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  double *v20;
  char v21;
  double *v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (!v16)
      goto LABEL_10;
LABEL_12:
    v18 = 0;
    return v18 & 1;
  }
  if (!v16)
    goto LABEL_12;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = *(int *)(v11 + 24);
    v20 = (double *)(a1 + v19);
    v21 = *(_BYTE *)(a1 + v19 + 8);
    v22 = (double *)(a2 + v19);
    v23 = *(unsigned __int8 *)(a2 + v19 + 8);
    if ((v21 & 1) != 0)
    {
      if (!v23)
        goto LABEL_12;
    }
    else
    {
      if (*v20 != *v22)
        LOBYTE(v23) = 1;
      if ((v23 & 1) != 0)
        goto LABEL_12;
    }
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v24(v10, a1, v4);
    v24(v8, a2, v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = dispatch thunk of static Equatable.== infix(_:_:)();
    v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
  }
  return v18 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryResult and conformance DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryResult);
}

uint64_t sub_22836972C@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  double v6;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v5 = a1 + *(int *)(result + 24);
  v6 = *(double *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  *a2 = v6;
  return result;
}

uint64_t sub_228369774(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v5 = a2 + *(int *)(result + 24);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283697B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_CategoryResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_228369850(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_CategoryResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t GenerationTask.context.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_context);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GenerationTask.context.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_context);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*GenerationTask.context.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void *GenerationTask.tgSession.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_tgSession);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void GenerationTask.tgSession.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_tgSession);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*GenerationTask.tgSession.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id GenerationTask.__allocating_init(context:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_tgSession] = 0;
  v6 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_context];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id GenerationTask.init(context:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_super v5;

  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_tgSession] = 0;
  v3 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding14GenerationTask_context];
  *(_QWORD *)v3 = a1;
  *((_QWORD *)v3 + 1) = a2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for GenerationTask();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for GenerationTask()
{
  return objc_opt_self();
}

uint64_t GenerationTask.perform(model:)()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0);
  v5 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = GenerationTask.perform(model:);
  return v5(48);
}

uint64_t GenerationTask.perform(model:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t GenerationTask.perform(model:numTokens:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t GenerationTask.perform(model:numTokens:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  int *v9;

  v1 = (_QWORD *)v0[3];
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))();
  v5 = v4;
  v0[4] = v4;
  v6 = *(int **)((*v2 & *v1) + 0xB0);
  v9 = (int *)((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  v0[5] = v7;
  *v7 = v0;
  v7[1] = GenerationTask.perform(model:numTokens:);
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v9)(v3, v5, v0[2]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2284C1EE0;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GenerationTask.perform(model:numTokens:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 48) = a1;
  *(_QWORD *)(v3 + 56) = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t GenerationTask.tgExecute(operation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t GenerationTask.tgExecute(operation:)()
{
  int8x16_t *v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  v0[3].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[2], v0[2], 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  v0[3].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = GenerationTask.tgExecute(operation:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void closure #1 in GenerationTask.tgExecute(operation:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<String, Never>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v10 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *a2) + 0x78))(v9);
  if (v10)
  {
    v11 = (void *)v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    v12 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v13 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    aBlock[4] = partial apply for closure #1 in closure #1 in GenerationTask.tgExecute(operation:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [TGTextGenerationOutput]?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_3;
    v14 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v11, sel_executeOperation_callback_, a3, v14);
    _Block_release(v14);

  }
  else
  {
    __break(1u);
  }
}

void partial apply for closure #1 in GenerationTask.tgExecute(operation:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in GenerationTask.tgExecute(operation:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in GenerationTask.tgExecute(operation:)(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v42 - v11;
  if (a2)
  {
    Logger.init()();
    v13 = a2;
    v14 = a2;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v43 = a3;
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v42 = v6;
      v19 = (_QWORD *)v18;
      *(_DWORD *)v17 = 138412290;
      v20 = a2;
      v21 = _swift_stdlib_bridgeErrorToNSError();
      v44 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v19 = v21;

      _os_log_impl(&dword_2282CC000, v15, v16, "Error while calling execute in TextGenerationInference: %@", v17, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      v22 = v19;
      v6 = v42;
      MEMORY[0x22E2B117C](v22, -1, -1);
      MEMORY[0x22E2B117C](v17, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_19:
    v44 = 0;
    v45 = 0xE000000000000000;
LABEL_21:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<String, Never>);
    return CheckedContinuation.resume(returning:)();
  }
  if (!a1)
  {
    Logger.init()();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, (os_log_type_t)v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_2282CC000, v39, (os_log_type_t)v40, "Empty response object returned from TextGenerationInference", v41, 2u);
      MEMORY[0x22E2B117C](v41, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    goto LABEL_19;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v24 = MEMORY[0x24BEE4AF8];
  if (!v23)
  {
LABEL_20:
    v44 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v36 = BidirectionalCollection<>.joined(separator:)();
    v38 = v37;
    swift_bridgeObjectRelease();
    v44 = v36;
    v45 = v38;
    goto LABEL_21;
  }
  v43 = a3;
  v44 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v26 = 0;
    v24 = v44;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v27 = (id)MEMORY[0x22E2AFF34](v26, a1);
      else
        v27 = *(id *)(a1 + 8 * v26 + 32);
      v28 = v27;
      v29 = objc_msgSend(v27, sel_text);
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      v44 = v24;
      v34 = *(_QWORD *)(v24 + 16);
      v33 = *(_QWORD *)(v24 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v24 = v44;
      }
      ++v26;
      *(_QWORD *)(v24 + 16) = v34 + 1;
      v35 = v24 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v30;
      *(_QWORD *)(v35 + 40) = v32;
    }
    while (v23 != v26);
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [TGTextGenerationOutput]?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for TGTextGenerationOutput);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t GenerationTask.generateRequest(prompt:model:numTokens:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for CharacterSet();
  v3[7] = v4;
  v3[8] = *(_QWORD *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v5 = type metadata accessor for Logger();
  v3[10] = v5;
  v3[11] = *(_QWORD *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 136) = a1;
  *(_QWORD *)(v3 + 144) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GenerationTask.generateRequest(prompt:model:numTokens:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  Class isa;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int *v19;
  _QWORD *v20;
  uint64_t (*v22)(id);

  v1 = v0[5];
  v2 = (_QWORD *)v0[6];
  v3 = v0[4];
  v4 = objc_allocWithZone(MEMORY[0x24BEB4CB8]);
  swift_bridgeObjectRetain();
  v5 = (void *)MEMORY[0x22E2AF8EC](v3, v1);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithInstructionText_, v5);
  v0[13] = v6;

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB4C98]), sel_initWithPrompt_, v6);
  v0[14] = v7;
  objc_msgSend(v7, sel_setProduceOutputStream_, 1);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB4CC0]), sel_init);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(id))((*MEMORY[0x24BEE4EA0] & *v2) + 0x80))(v8);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB4CA0]), sel_init);
  v0[15] = v10;
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = NSNumber.init(integerLiteral:)(48).super.super.isa;
  objc_msgSend(v10, sel_setMaxWordCount_, isa);

  objc_msgSend(v7, sel_setOutputConstraint_, v10);
  Logger.init()();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_2282CC000, v12, v13, "TextGeneration operation created", v14, 2u);
    MEMORY[0x22E2B117C](v14, -1, -1);
  }
  v16 = v0[11];
  v15 = v0[12];
  v17 = v0[10];
  v18 = (_QWORD *)v0[6];

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  v19 = *(int **)((*v9 & *v18) + 0xA8);
  v22 = (uint64_t (*)(id))((char *)v19 + *v19);
  v20 = (_QWORD *)swift_task_alloc();
  v0[16] = v20;
  *v20 = v0;
  v20[1] = GenerationTask.generateRequest(prompt:model:numTokens:);
  return v22(v7);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v3 = v2 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    *(_QWORD *)(v0 + 16) = v2;
    v5 = *(void **)(v0 + 112);
    v4 = *(void **)(v0 + 120);
    v6 = *(void **)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 24) = v1;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    v10 = StringProtocol.trimmingCharacters(in:)();
    v12 = v11;

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(void **)(v0 + 112);
    v14 = *(void **)(v0 + 120);
    v15 = *(void **)(v0 + 104);
    swift_bridgeObjectRelease();

    v12 = 0x80000002284DD6F0;
    v10 = 0xD00000000000001ALL;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v10, v12);
}

id GenerationTask.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void GenerationTask.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id GenerationTask.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GenerationTask();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_22836AA60@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_22836AAA0(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_22836AAEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<String, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GenerationTask.tgExecute(operation:)(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<String, Never>)
                                      - 8)
                          + 80);
  return closure #1 in closure #1 in GenerationTask.tgExecute(operation:)(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t static DUWordPieceTokenizerImplementation.implementationID.getter()
{
  return 0xD000000000000018;
}

uint64_t static DUWordPieceTokenizerImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUWordPieceTokenizerSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUWordPieceTokenizerSpecification;
  *a1 = result;
  return result;
}

void *static DUWordPieceTokenizerImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUWordPieceTokenizerImplementation.implementationAttributes.getter;
}

uint64_t DUWordPieceTokenizerImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t DUWordPieceTokenizerImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v2 = swift_allocError();
  *(_QWORD *)v3 = 0xD00000000000001ALL;
  *(_QWORD *)(v3 + 8) = 0x80000002284DD7C0;
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 40) = 0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_BYTE *)(v1 + 48) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DUWordPieceTokenizerImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUWordPieceTokenizerImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUWordPieceTokenizerImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUWordPieceTokenizerImplementation.init()()
{
  uint64_t v0;

  return v0;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUWordPieceTokenizerImplementation()
{
  return &protocol witness table for DUWordPieceTokenizerSpecification;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUWordPieceTokenizerImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUWordPieceTokenizerSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUWordPieceTokenizerSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUWordPieceTokenizerImplementation()
{
  return 0xD000000000000018;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUWordPieceTokenizerImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUWordPieceTokenizerImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUWordPieceTokenizerImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 72) = a1;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(**(_QWORD **)v2 + 80)
                                                + *(_QWORD *)(**(_QWORD **)v2 + 80));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 80) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUWordPieceTokenizerImplementation;
  return v7(v3 + 16, a2);
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUWordPieceTokenizerImplementation()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0 + 16;
  v2 = *(_QWORD *)(*v0 + 72);
  v4 = *v0;
  swift_task_dealloc();
  outlined init with take of Result<TokenizerOutput, Error>(v1, v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t type metadata accessor for DUWordPieceTokenizerImplementation()
{
  return objc_opt_self();
}

uint64_t outlined init with take of Result<TokenizerOutput, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<TokenizerOutput, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *DUCategoryClassificationResponse.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  double v47;
  double *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  void *v72;
  void **v73;
  void *v74;
  _QWORD v76[2];
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v88 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v87 = *(_QWORD *)(v88 - 8);
  v5 = MEMORY[0x24BDAC7A8](v88);
  v85 = (char *)v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v83 = (uint64_t)v76 - v7;
  v92 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v89 = *(_QWORD *)(v92 - 8);
  v8 = MEMORY[0x24BDAC7A8](v92);
  v10 = (char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v90 = (uint64_t)v76 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v91 = (uint64_t)v76 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v82 = (uint64_t)v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v86 = (uint64_t)v76 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (_QWORD *)((char *)v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a1, a2);
  v30 = (char *)v29;
  v31 = v25;
  v32 = swift_dynamicCast();
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if ((v32 & 1) != 0)
  {
    v84 = v30;
    v81 = v22;
    v33(v21, 0, 1, v25);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v21, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
    v34 = *v28;
    v93 = MEMORY[0x24BEE4AF8];
    v35 = *(_QWORD *)(v34 + 16);
    if (v35)
    {
      v77 = v25;
      v78 = v28;
      v79 = a1;
      v80 = a2;
      v36 = v34 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
      v89 = *(_QWORD *)(v89 + 72);
      v76[1] = v34;
      swift_bridgeObjectRetain_n();
      do
      {
        v37 = v91;
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v36, v91, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        v38 = v37;
        v39 = v90;
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v38, v90, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        v40 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCategoryResult()), sel_init);
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v39, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        v41 = &v10[*(int *)(v92 + 20)];
        if (*((_QWORD *)v41 + 1))
        {
          v42 = *(_QWORD *)v41;
          v43 = *((_QWORD *)v41 + 1);
        }
        else
        {
          v42 = 0;
          v43 = 0xE000000000000000;
        }
        v44 = &v40[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryIdentifier];
        swift_beginAccess();
        *(_QWORD *)v44 = v42;
        *((_QWORD *)v44 + 1) = v43;
        v45 = v40;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v46 = &v10[*(int *)(v92 + 24)];
        if (v46[8])
          v47 = 0.0;
        else
          v47 = *(double *)v46;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        v48 = (double *)&v45[OBJC_IVAR____TtC21DocumentUnderstanding16DUCategoryResult_categoryConfidence];
        swift_beginAccess();
        *v48 = v47;

        v49 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v91, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        MEMORY[0x22E2AFAFC](v49);
        if (*(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v36 += v89;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease();
      v51 = v93;
      a2 = v80;
      v52 = v79;
      v28 = v78;
      v31 = v77;
    }
    else
    {
      swift_bridgeObjectRetain();
      v51 = MEMORY[0x24BEE4AF8];
      v52 = a1;
    }
    swift_bridgeObjectRelease();
    v53 = v84;
    v54 = &v84[OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_categories];
    swift_beginAccess();
    *(_QWORD *)v54 = v51;
    swift_bridgeObjectRelease();
    v55 = (uint64_t)v28 + *(int *)(v31 + 24);
    v56 = v86;
    outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v55, v86);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
    v58 = v88;
    v59 = v57(v56, 1, v88);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v56, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v60 = v81;
    if (v59 == 1)
    {

      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v52, a2);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
      return v53;
    }
    else
    {
      v61 = v55;
      v62 = v82;
      outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v61, v82);
      if (v57(v62, 1, v58) == 1)
      {
        v63 = v83;
        UnknownStorage.init()();
        v64 = (_QWORD *)(v63 + *(int *)(v58 + 20));
        *v64 = 0;
        v64[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v62, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        v63 = v83;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v62, v83, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v65 = (uint64_t)v85;
      v66 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v63, v65, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v67 = (uint64_t *)(v65 + *(int *)(v58 + 20));
      if (v67[1])
      {
        v68 = *v67;
        v69 = v67[1];
      }
      else
      {
        v68 = 0;
        v69 = 0xE000000000000000;
      }
      v70 = (char *)v66;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v65, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v71 = &v70[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v71 = v68;
      *((_QWORD *)v71 + 1) = v69;

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v52, a2);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
      v72 = v84;
      v73 = (void **)&v84[OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_responseDebugInfo];
      swift_beginAccess();
      v74 = *v73;
      *v73 = v70;
      v50 = v72;

    }
  }
  else
  {
    v33(v21, 1, 1, v25);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse?);
    return 0;
  }
  return v50;
}

uint64_t DUCategoryClassificationResponse.categories.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUCategoryClassificationResponse.categories.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_categories);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUCategoryClassificationResponse.categories.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void *DUCategoryClassificationResponse.responseDebugInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_responseDebugInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUCategoryClassificationResponse.responseDebugInfo.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_responseDebugInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUCategoryClassificationResponse.responseDebugInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUCategoryClassificationResponse.protoRepresentation.getter@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(uint64_t);
  _QWORD *v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryResult?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v59 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v52 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v56 = (uint64_t)&v52 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v53 = (uint64_t)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v20);
  v55 = (uint64_t)&v52 - v21;
  *a1 = MEMORY[0x24BEE4AF8];
  v22 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  UnknownStorage.init()();
  v23 = *(int *)(v22 + 24);
  v54 = a1;
  v24 = (uint64_t)a1 + v23;
  v25 = *(uint64_t (**)(void))(v17 + 56);
  v52 = v24;
  v26 = v25();
  v27 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v28 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x78);
  v57 = v1;
  v29 = (_QWORD *)v28(v26);
  if (v29)
  {
    v30 = v29;
    (*(void (**)(void))((*v27 & *v29) + 0x78))();

    v31 = swift_dynamicCast();
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v25)(v15, v31 ^ 1u, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      v32 = (uint64_t)v15;
      v33 = v55;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v32, v55, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v34 = v53;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v33, v53, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v35 = v52;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v52, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v34, v35, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v25)(v35, 0, 1, v16);
      v36 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v33, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v15, 1, 1, v16);
  }
  v36 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v15, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
LABEL_6:
  v37 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v38 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v57) + 0x60))(v36);
  v39 = v38;
  if (!(v38 >> 62))
  {
    v40 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v40)
      goto LABEL_8;
LABEL_22:
    v43 = MEMORY[0x24BEE4AF8];
LABEL_23:
    swift_bridgeObjectRelease_n();
    v51 = v54;
    result = swift_bridgeObjectRelease();
    *v51 = v43;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v40 = result;
  if (!result)
    goto LABEL_22;
LABEL_8:
  if (v40 >= 1)
  {
    v42 = 0;
    v57 = (_QWORD *)(v39 & 0xC000000000000001);
    v43 = MEMORY[0x24BEE4AF8];
    v55 = v6;
    do
    {
      if (v57)
        v44 = (_QWORD *)MEMORY[0x22E2AFF34](v42, v39);
      else
        v44 = *(id *)(v39 + 8 * v42 + 32);
      v45 = v44;
      v46 = *(void (**)(void))((*v37 & *v44) + 0x98);
      v47 = (uint64_t)v58;
      v46();
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CategoryResult?);
        v37 = (_QWORD *)MEMORY[0x24BEE4EA0];
      }
      else
      {
        v48 = v56;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, v56, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v48, v59, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
        v37 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v50 = *(_QWORD *)(v43 + 16);
        v49 = *(_QWORD *)(v43 + 24);
        if (v50 >= v49 >> 1)
          v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, v43);
        *(_QWORD *)(v43 + 16) = v50 + 1;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v59, v43+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v50, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryResult);
        v6 = v55;
      }
      ++v42;
    }
    while (v40 != v42);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t DUCategoryClassificationResponse.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = specialized DUCategoryClassificationResponse.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUCategoryClassificationResponse?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUCategoryClassificationResponse.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUCategoryClassificationResponse();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUCategoryClassificationResponse and conformance DUCategoryClassificationResponse, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUCategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DUCategoryClassificationResponse);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUCategoryClassificationResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUCategoryClassificationResponse.init(coder:)(a1);
}

uint64_t DUCategoryClassificationResponse.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUCategoryClassificationResponse and conformance DUCategoryClassificationResponse, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUCategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DUCategoryClassificationResponse);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUCategoryClassificationResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DUCategoryClassificationResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_categories] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding32DUCategoryClassificationResponse_responseDebugInfo] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUCategoryClassificationResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

id DUCategoryClassificationResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUCategoryClassificationResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUCategoryClassificationResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DUCategoryClassificationResponse()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUCategoryClassificationResponse()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_22836C4F4()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_CategoryClassificationResponse and conformance DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_CategoryClassificationResponse);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = v2;
  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  UnknownStorage.init()();
  v4 = (char *)a1 + *(int *)(v3 + 28);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_TopicDetectionResponse;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_TopicDetectionResponse)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.globalTopics.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.globalTopics.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TopicDetectionResponse.globalTopics.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.personalTopics.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.personalTopics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_TopicDetectionResponse.personalTopics.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + *(int *)(v6 + 28), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, a1);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_TopicDetectionResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v7 + 28), (uint64_t)v6);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v6, a2);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_TopicDetectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(a1, (uint64_t)v7);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse() + 28);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse() + 28);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse() + 28);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.modify;
}

void DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(int *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v4);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v9, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v4, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5);
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(**(_QWORD **)a1 + v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

uint64_t outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL DocumentUnderstanding_ClientInterface_TopicDetectionResponse.hasResponseDebugInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v0 + *(int *)(v4 + 28), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_TopicDetectionResponse.clearResponseDebugInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse() + 28);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse() + 24);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse() + 24);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_TopicDetectionResponse.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_TopicDetectionResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_TopicDetectionResponse.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_TopicDetectionResponse.protoMessageName.getter()
{
  return 0xD00000000000003ELL;
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicDetectionResponse._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_TopicDetectionResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicDetectionResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        closure #3 in DocumentUnderstanding_ClientInterface_TopicDetectionResponse.decodeMessage<A>(decoder:)();
      }
      else if (result == 2 || result == 1)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult();
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_ClientInterface_TopicDetectionResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_ClientInterface_TopicDetectionResponse.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*v0 + 16)
    || (type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult(),
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_QWORD *)(v0[1] + 16)
      || (type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult(),
          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicResult and conformance DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicResult), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      result = closure #1 in DocumentUnderstanding_ClientInterface_TopicDetectionResponse.traverse<A>(visitor:)((uint64_t)v0);
      if (!v1)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_TopicDetectionResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v9 + 28), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v8);
}

Swift::Int DocumentUnderstanding_ClientInterface_TopicDetectionResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = MEMORY[0x24BEE4AF8];
  a2[1] = v4;
  UnknownStorage.init()();
  v5 = (char *)a2 + *(int *)(a1 + 28);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return 0xD00000000000003ELL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return DocumentUnderstanding_ClientInterface_TopicDetectionResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return DocumentUnderstanding_ClientInterface_TopicDetectionResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_TopicDetectionResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_TopicDetectionResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;

  v58 = a2;
  v54 = type metadata accessor for UnknownStorage();
  v56 = *(_QWORD *)(v54 - 8);
  v3 = MEMORY[0x24BDAC7A8](v54);
  v55 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v49 - v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v49 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v49 - v20;
  v22 = a1;
  v23 = *a1;
  v24 = v58;
  if ((specialized static Array<A>.== infix(_:_:)(v23, *v58) & 1) == 0)
    goto LABEL_9;
  v51 = v10;
  v52 = v19;
  v53 = v21;
  v49 = v9;
  v50 = v16;
  if ((specialized static Array<A>.== infix(_:_:)(v22[1], v24[1]) & 1) == 0)
    goto LABEL_9;
  v25 = v24;
  v26 = v22;
  v27 = type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse();
  v28 = (uint64_t)v53;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v26 + *(int *)(v27 + 28), (uint64_t)v53);
  v29 = (uint64_t)v52;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v25 + *(int *)(v27 + 28), (uint64_t)v52);
  v30 = (uint64_t)v12;
  v31 = (uint64_t)&v12[*(int *)(v51 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v28, (uint64_t)v12);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v29, v31);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v33 = v6;
  if (v32(v30, 1, v6) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v29, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v28, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v32(v31, 1, v6) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v30, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v34 = v57;
LABEL_12:
      v42 = (uint64_t)v26 + *(int *)(v27 + 24);
      v43 = v56;
      v44 = v27;
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
      v46 = v54;
      v45(v34, v42, v54);
      v47 = v55;
      v45(v55, (uint64_t)v25 + *(int *)(v44 + 24), v46);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      v48 = *(void (**)(char *, uint64_t))(v43 + 8);
      v48(v47, v46);
      v48(v34, v46);
      return v38 & 1;
    }
    goto LABEL_8;
  }
  v35 = v27;
  v36 = (uint64_t)v50;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v30, (uint64_t)v50);
  v37 = v32(v31, 1, v33);
  v34 = v57;
  if (v37 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v52, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v53, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v36);
LABEL_8:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v30, &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
    goto LABEL_9;
  }
  v40 = (uint64_t)v49;
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(v31, (uint64_t)v49);
  v41 = specialized static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(v36, v40);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v40);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v52, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v53, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v36);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v30, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v27 = v35;
  if ((v41 & 1) != 0)
    goto LABEL_12;
LABEL_9:
  v38 = 0;
  return v38 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_TopicDetectionResponse and conformance DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_TopicDetectionResponse);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_TopicDetectionResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = *(int *)(a3 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 28);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = *(int *)(v16 + 20);
      v20 = &v14[v19];
      v21 = &v15[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56);
      swift_bridgeObjectRetain();
      v23(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_TopicDetectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for DocumentUnderstanding_ClientInterface_TopicDetectionResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    v18 = *(int *)(v15 + 20);
    v19 = &v13[v18];
    v20 = &v14[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
    swift_bridgeObjectRetain();
    v22(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_ClientInterface_TopicDetectionResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v25 = *(int *)(v15 + 20);
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v13);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v19 = *(int *)(v15 + 20);
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  swift_bridgeObjectRetain();
  v22(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for DocumentUnderstanding_ClientInterface_TopicDetectionResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    *(_OWORD *)&v12[*(int *)(v14 + 20)] = *(_OWORD *)&v13[*(int *)(v14 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_ClientInterface_TopicDetectionResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v21 = *(int *)(v15 + 20);
      v22 = &v13[v21];
      v23 = &v14[v21];
      v25 = *(_QWORD *)v23;
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v13);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22836E3D0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_22836E480(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for DocumentUnderstanding_ClientInterface_TopicDetectionResponse()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
}

uint64_t DUTermOfAddressType.rawValue.getter(char a1)
{
  if (!a1)
    return 0x694E724F656D616ELL;
  if (a1 == 1)
    return 0x656D616E6C696168;
  return 0x6E776F6E6B6E75;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DUTermOfAddressType(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE800000000000000;
  v4 = 0x656D616E6C696168;
  if (v2 != 1)
  {
    v4 = 0x6E776F6E6B6E75;
    v3 = 0xE700000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x694E724F656D616ELL;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEE00656D616E6B63;
  v7 = 0xE800000000000000;
  v8 = 0x656D616E6C696168;
  if (*a2 != 1)
  {
    v8 = 0x6E776F6E6B6E75;
    v7 = 0xE700000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x694E724F656D616ELL;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xEE00656D616E6B63;
  if (v5 == v9 && v6 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DUTermOfAddressType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DUTermOfAddressType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DUTermOfAddressType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DUTermOfAddressType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized DUTermOfAddressType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DUTermOfAddressType(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEE00656D616E6B63;
  v4 = 0xE800000000000000;
  v5 = 0x656D616E6C696168;
  if (v2 != 1)
  {
    v5 = 0x6E776F6E6B6E75;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x694E724F656D616ELL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t DUReplyMetadata.originalString.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUReplyMetadata.formattedString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

float DUReplyMetadata.weight.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

uint64_t DUReplyMetadata.BOOLeanProperties.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall DUReplyMetadata.init(originalString:formattedString:weight:BOOLeanProperties:)(DocumentUnderstanding::DUReplyMetadata *__return_ptr retstr, Swift::String originalString, Swift::String formattedString, Swift::Float weight, Swift::OpaquePointer BOOLeanProperties)
{
  retstr->originalString = originalString;
  retstr->formattedString = formattedString;
  retstr->weight = weight;
  retstr->BOOLeanProperties = BOOLeanProperties;
}

uint64_t DUPersonalizeRepliesConversation.outgoingMessages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUConversationAnalysisResult.termsOfAddress.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUConversationAnalysisResult.additionalFields.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t specialized DUTermOfAddressType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DUTermOfAddressType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type DUTermOfAddressType and conformance DUTermOfAddressType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUTermOfAddressType and conformance DUTermOfAddressType;
  if (!lazy protocol witness table cache variable for type DUTermOfAddressType and conformance DUTermOfAddressType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUTermOfAddressType, &type metadata for DUTermOfAddressType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUTermOfAddressType and conformance DUTermOfAddressType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DUTermOfAddressType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DUTermOfAddressType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_22836EC00 + 4 * byte_2284C4175[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_22836EC34 + 4 * asc_2284C4170[v4]))();
}

uint64_t sub_22836EC34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22836EC3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22836EC44);
  return result;
}

uint64_t sub_22836EC50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22836EC58);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_22836EC5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22836EC64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for DUTermOfAddressType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for DUTermOfAddressType(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DUTermOfAddressType()
{
  return &type metadata for DUTermOfAddressType;
}

uint64_t destroy for DUReplyMetadata()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DUReplyMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DUReplyMetadata(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DUReplyMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DUReplyMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DUReplyMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DUReplyMetadata()
{
  return &type metadata for DUReplyMetadata;
}

uint64_t destroy for DUPersonalizeRepliesConversation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for DUPersonalizeRepliesConversation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DUPersonalizeRepliesConversation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for DUPersonalizeRepliesConversation(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DUPersonalizeRepliesConversation()
{
  return &type metadata for DUPersonalizeRepliesConversation;
}

uint64_t destroy for DUConversationAnalysisResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for DUConversationAnalysisResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DUConversationAnalysisResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DUConversationAnalysisResult(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DUConversationAnalysisResult(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DUConversationAnalysisResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DUConversationAnalysisResult()
{
  return &type metadata for DUConversationAnalysisResult;
}

uint64_t DUDocumentEmailData.subject.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_subject);
}

uint64_t DUDocumentEmailData.subject.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_subject);
}

uint64_t (*DUDocumentEmailData.subject.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.senderName.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderName);
}

uint64_t DUDocumentEmailData.senderName.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderName);
}

uint64_t (*DUDocumentEmailData.senderName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.senderEmail.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderEmail);
}

uint64_t DUDocumentEmailData.senderEmail.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderEmail);
}

uint64_t (*DUDocumentEmailData.senderEmail.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUDocumentEmailData.senderDomain.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderDomain);
}

uint64_t DUDocumentEmailData.senderDomain.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderDomain);
}

uint64_t (*DUDocumentEmailData.senderDomain.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.recipientNames.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentEmailData.recipientNames.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientNames);
}

uint64_t (*DUDocumentEmailData.recipientNames.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.recipientEmails.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentEmailData.recipientEmails.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientEmails);
}

uint64_t (*DUDocumentEmailData.recipientEmails.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.ccNames.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentEmailData.ccNames.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccNames);
}

uint64_t (*DUDocumentEmailData.ccNames.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.ccEmails.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentEmailData.ccEmails.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccEmails);
}

uint64_t (*DUDocumentEmailData.ccEmails.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.bccNames.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentEmailData.bccNames.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccNames);
}

uint64_t (*DUDocumentEmailData.bccNames.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.bccEmails.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentEmailData.bccEmails.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccEmails);
}

uint64_t (*DUDocumentEmailData.bccEmails.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentEmailData.dateReceived.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_dateReceived;
  swift_beginAccess();
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, a1, &demangling cache variable for type metadata for Date?);
}

uint64_t DUDocumentEmailData.dateReceived.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_dateReceived;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*DUDocumentEmailData.dateReceived.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUDocumentEmailData.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DUDocumentEmailData.init()()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  objc_super v8;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_subject];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderName];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v3 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderEmail];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderDomain];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientNames] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientEmails] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccNames] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccEmails] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccNames] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccEmails] = 0;
  v5 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_dateReceived];
  v6 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for DUDocumentEmailData();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for DUDocumentEmailData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DUDocumentEmailData;
  if (!type metadata singleton initialization cache for DUDocumentEmailData)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall DUDocumentEmailData.encode(with:)(NSCoder with)
{
  void *v2;
  id v3;
  void *v4;

  type metadata accessor for DUDocumentEmailData();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DUDocumentEmailData and conformance DUDocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentEmailData, (uint64_t)&protocol conformance descriptor for DUDocumentEmailData);
  v2 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v2)
  {
    v3 = v2;
    v4 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  }
}

uint64_t DUDocumentEmailData.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDocumentEmailData.init(coder:)(a1);
}

uint64_t DUDocumentEmailData.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v6;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DUDocumentEmailData and conformance DUDocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentEmailData, (uint64_t)&protocol conformance descriptor for DUDocumentEmailData);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v4 = v6;
  if (!v6)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t DUDocumentEmailData.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1D0))(v4);
  v7 = specialized DUDocumentEmailData.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocumentEmailData?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

char *specialized DUDocumentEmailData.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[200];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v37[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)&v37[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentEmailData()), sel_init);
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(a1, (uint64_t)v7);
  v10 = *v7;
  v9 = v7[1];
  v11 = &v8[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_subject];
  swift_beginAccess();
  *(_QWORD *)v11 = v10;
  *((_QWORD *)v11 + 1) = v9;
  v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = v7[2];
  v13 = v7[3];
  v15 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderName];
  swift_beginAccess();
  *(_QWORD *)v15 = v14;
  *((_QWORD *)v15 + 1) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = v7[4];
  v16 = v7[5];
  v18 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderEmail];
  swift_beginAccess();
  *(_QWORD *)v18 = v17;
  *((_QWORD *)v18 + 1) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = v7[6];
  v19 = v7[7];
  v21 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderDomain];
  swift_beginAccess();
  *(_QWORD *)v21 = v20;
  *((_QWORD *)v21 + 1) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = v7[8];
  v23 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientNames];
  swift_beginAccess();
  *(_QWORD *)v23 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v24 = v7[9];
  v25 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientEmails];
  swift_beginAccess();
  *(_QWORD *)v25 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = v7[10];
  v27 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccNames];
  swift_beginAccess();
  *(_QWORD *)v27 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = v7[11];
  v29 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccEmails];
  swift_beginAccess();
  *(_QWORD *)v29 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v7[12];
  v31 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccNames];
  swift_beginAccess();
  *(_QWORD *)v31 = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = v7[13];
  v33 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccEmails];
  swift_beginAccess();
  *(_QWORD *)v33 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Date.init(timeIntervalSinceReferenceDate:)();
  outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(a1);
  outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v7);
  v34 = type metadata accessor for Date();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v4, 0, 1, v34);
  v35 = (uint64_t)&v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_dateReceived];
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v4, v35);
  swift_endAccess();

  return v12;
}

char *DUDocumentEmailData.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  id v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  uint64_t v53;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v53 = a1;
  v20(v14, a1, a2);
  v21 = (char *)v19;
  v22 = swift_dynamicCast();
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v22 & 1) != 0)
  {
    v23(v11, 0, 1, v15);
    outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v11, (uint64_t)v18);
    v24 = *v18;
    v25 = v18[1];
    v26 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_subject];
    swift_beginAccess();
    *(_QWORD *)v26 = v24;
    *((_QWORD *)v26 + 1) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v27 = v18[2];
    v28 = v18[3];
    v29 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderName];
    swift_beginAccess();
    *(_QWORD *)v29 = v27;
    *((_QWORD *)v29 + 1) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v30 = v18[4];
    v31 = v18[5];
    v32 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderEmail];
    swift_beginAccess();
    *(_QWORD *)v32 = v30;
    *((_QWORD *)v32 + 1) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v33 = v18[6];
    v34 = v18[7];
    v35 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_senderDomain];
    swift_beginAccess();
    *(_QWORD *)v35 = v33;
    *((_QWORD *)v35 + 1) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v36 = v18[8];
    v37 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientNames];
    swift_beginAccess();
    *(_QWORD *)v37 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v38 = v18[9];
    v39 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_recipientEmails];
    swift_beginAccess();
    *(_QWORD *)v39 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v40 = v18[10];
    v41 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccNames];
    swift_beginAccess();
    *(_QWORD *)v41 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v42 = v18[11];
    v43 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_ccEmails];
    swift_beginAccess();
    *(_QWORD *)v43 = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v44 = v18[12];
    v45 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccNames];
    swift_beginAccess();
    *(_QWORD *)v45 = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v46 = v18[13];
    v47 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_bccEmails];
    swift_beginAccess();
    *(_QWORD *)v47 = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v48 = (uint64_t)v52;
    Date.init(timeIntervalSinceReferenceDate:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v53, a2);
    outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v18);
    v49 = type metadata accessor for Date();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
    v50 = (uint64_t)&v21[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentEmailData_dateReceived];
    swift_beginAccess();
    outlined assign with take of Date?(v48, v50);
    swift_endAccess();

  }
  else
  {
    v23(v11, 1, 1, v15);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v53, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v11, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    return 0;
  }
  return v21;
}

uint64_t outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DUDocumentEmailData.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v30;
  uint64_t *v31;
  _BYTE *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  _QWORD *v53;
  char v54;
  _QWORD *v55;
  _QWORD *v56;
  char v57;
  _QWORD *v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66;
  _QWORD *v67;
  _QWORD *v68;
  char v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _BYTE v86[24];
  uint64_t v87;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v80 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v80 - v18;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, (uint64_t)v86, &demangling cache variable for type metadata for Any?);
  if (!v87)
  {
    v31 = &demangling cache variable for type metadata for Any?;
    v32 = v86;
LABEL_12:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v32, v31);
    goto LABEL_73;
  }
  type metadata accessor for DUDocumentEmailData();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_73:
    v28 = 0;
    return v28 & 1;
  }
  v80 = v14;
  v81 = v5;
  v82 = v10;
  v83 = v4;
  v20 = v85;
  v21 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v22 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xA8))();
  v24 = v23;
  v25 = *(uint64_t (**)(void))((*v21 & *v20) + 0xA8);
  v84 = v20;
  v26 = v25();
  v28 = v27;
  if (v24)
  {
    if (!v27)
      goto LABEL_37;
    if (v22 == v26 && v24 == v27)
    {
      swift_bridgeObjectRelease();
      v26 = swift_bridgeObjectRelease();
    }
    else
    {
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v26 = swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
        goto LABEL_69;
    }
  }
  else if (v27)
  {
    goto LABEL_72;
  }
  v33 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v34 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xC0))(v26);
  v36 = v35;
  v37 = (*(uint64_t (**)(void))((*v33 & *v84) + 0xC0))();
  v28 = v38;
  if (v36)
  {
    if (!v38)
      goto LABEL_37;
    if (v34 == v37 && v36 == v38)
    {
      swift_bridgeObjectRelease();
      v37 = swift_bridgeObjectRelease();
    }
    else
    {
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v37 = swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
        goto LABEL_69;
    }
  }
  else if (v38)
  {
    goto LABEL_72;
  }
  v40 = (*(uint64_t (**)(uint64_t))((*v33 & *v2) + 0xD8))(v37);
  v42 = v41;
  v43 = (*(uint64_t (**)(void))((*v33 & *v84) + 0xD8))();
  v28 = v44;
  if (v42)
  {
    if (!v44)
      goto LABEL_37;
    if (v40 == v43 && v42 == v44)
    {
      swift_bridgeObjectRelease();
      v43 = swift_bridgeObjectRelease();
    }
    else
    {
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v43 = swift_bridgeObjectRelease();
      if ((v45 & 1) == 0)
        goto LABEL_69;
    }
  }
  else if (v44)
  {
    goto LABEL_72;
  }
  v46 = (*(uint64_t (**)(uint64_t))((*v33 & *v2) + 0xF0))(v43);
  v48 = v47;
  v49 = (*(uint64_t (**)(void))((*v33 & *v84) + 0xF0))();
  v28 = v50;
  if (!v48)
  {
    if (v50)
      goto LABEL_72;
    goto LABEL_41;
  }
  if (!v50)
    goto LABEL_37;
  if (v46 == v49 && v48 == v50)
  {
    swift_bridgeObjectRelease();
    v49 = swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v49 = swift_bridgeObjectRelease();
  if ((v51 & 1) == 0)
  {
LABEL_69:

    goto LABEL_73;
  }
LABEL_41:
  v52 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v33 & *v2) + 0x108))(v49);
  v53 = (_QWORD *)(*(uint64_t (**)(void))((*v33 & *v84) + 0x108))();
  v28 = (char)v53;
  if (v52)
  {
    if (!v53)
      goto LABEL_37;
    v54 = specialized static Array<A>.== infix(_:_:)(v52, v53);
    swift_bridgeObjectRelease();
    v53 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v54 & 1) == 0)
      goto LABEL_69;
  }
  else if (v53)
  {
    goto LABEL_72;
  }
  v55 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*v33 & *v2) + 0x120))(v53);
  v56 = (_QWORD *)(*(uint64_t (**)(void))((*v33 & *v84) + 0x120))();
  v28 = (char)v56;
  if (v55)
  {
    if (!v56)
      goto LABEL_37;
    v57 = specialized static Array<A>.== infix(_:_:)(v55, v56);
    swift_bridgeObjectRelease();
    v56 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
      goto LABEL_69;
  }
  else if (v56)
  {
    goto LABEL_72;
  }
  v58 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*v33 & *v2) + 0x138))(v56);
  v59 = (_QWORD *)(*(uint64_t (**)(void))((*v33 & *v84) + 0x138))();
  v28 = (char)v59;
  if (v58)
  {
    if (!v59)
      goto LABEL_37;
    v60 = specialized static Array<A>.== infix(_:_:)(v58, v59);
    swift_bridgeObjectRelease();
    v59 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v60 & 1) == 0)
      goto LABEL_69;
  }
  else if (v59)
  {
    goto LABEL_72;
  }
  v61 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*v33 & *v2) + 0x150))(v59);
  v62 = (_QWORD *)(*(uint64_t (**)(void))((*v33 & *v84) + 0x150))();
  v28 = (char)v62;
  if (v61)
  {
    if (!v62)
      goto LABEL_37;
    v63 = specialized static Array<A>.== infix(_:_:)(v61, v62);
    swift_bridgeObjectRelease();
    v62 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v63 & 1) == 0)
      goto LABEL_69;
  }
  else if (v62)
  {
    goto LABEL_72;
  }
  v64 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*v33 & *v2) + 0x168))(v62);
  v65 = (_QWORD *)(*(uint64_t (**)(void))((*v33 & *v84) + 0x168))();
  v28 = (char)v65;
  if (v64)
  {
    if (!v65)
      goto LABEL_37;
    v66 = specialized static Array<A>.== infix(_:_:)(v64, v65);
    swift_bridgeObjectRelease();
    v65 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
      goto LABEL_69;
  }
  else if (v65)
  {
    goto LABEL_72;
  }
  v67 = (_QWORD *)(*(uint64_t (**)(_QWORD *))((*v33 & *v2) + 0x180))(v65);
  v68 = (_QWORD *)(*(uint64_t (**)(void))((*v33 & *v84) + 0x180))();
  v28 = (char)v68;
  if (!v67)
  {
    if (!v68)
    {
LABEL_75:
      v71 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v72 = (*(uint64_t (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *v2) + 0x198))(v68);
      (*(void (**)(uint64_t))((*v71 & *v84) + 0x198))(v72);
      v73 = (uint64_t)v82;
      v74 = (uint64_t)&v82[*(int *)(v8 + 48)];
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v19, (uint64_t)v82, &demangling cache variable for type metadata for Date?);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v17, v74, &demangling cache variable for type metadata for Date?);
      v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
      if (v75(v73, 1, v83) == 1)
      {

        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v17, &demangling cache variable for type metadata for Date?);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v19, &demangling cache variable for type metadata for Date?);
        if (v75(v74, 1, v83) == 1)
        {
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v82, &demangling cache variable for type metadata for Date?);
          v28 = 1;
          return v28 & 1;
        }
      }
      else
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v82, (uint64_t)v80, &demangling cache variable for type metadata for Date?);
        if (v75(v74, 1, v83) != 1)
        {
          v76 = v81;
          v77 = v83;
          (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v7, v74, v83);
          lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
          v78 = (uint64_t)v80;
          v28 = dispatch thunk of static Equatable.== infix(_:_:)();

          v79 = *(void (**)(char *, uint64_t))(v76 + 8);
          v79(v7, v77);
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v17, &demangling cache variable for type metadata for Date?);
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v19, &demangling cache variable for type metadata for Date?);
          v79((char *)v78, v77);
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v82, &demangling cache variable for type metadata for Date?);
          return v28 & 1;
        }

        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v17, &demangling cache variable for type metadata for Date?);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v19, &demangling cache variable for type metadata for Date?);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v80, v83);
      }
      v31 = &demangling cache variable for type metadata for (Date?, Date?);
      v32 = v82;
      goto LABEL_12;
    }
LABEL_72:

    swift_bridgeObjectRelease();
    goto LABEL_73;
  }
  if (v68)
  {
    v69 = specialized static Array<A>.== infix(_:_:)(v67, v68);
    swift_bridgeObjectRelease();
    v68 = (_QWORD *)swift_bridgeObjectRelease();
    if ((v69 & 1) == 0)
      goto LABEL_69;
    goto LABEL_75;
  }
LABEL_37:

  swift_bridgeObjectRelease();
  return v28 & 1;
}

uint64_t DUDocumentEmailData.protoRepresentation.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  v10 = MEMORY[0x24BEE4AF8];
  a1[8] = MEMORY[0x24BEE4AF8];
  a1[9] = v10;
  a1[10] = v10;
  a1[11] = v10;
  a1[12] = v10;
  a1[13] = v10;
  a1[14] = 0;
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v11 = UnknownStorage.init()();
  v12 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xA8))(v11);
  if (v14)
  {
    *a1 = v13;
    a1[1] = v14;
  }
  v15 = (*(uint64_t (**)(uint64_t))((*v12 & *v1) + 0xC0))(v13);
  if (v16)
  {
    a1[2] = v15;
    a1[3] = v16;
  }
  v17 = (*(uint64_t (**)(uint64_t))((*v12 & *v1) + 0xD8))(v15);
  if (v18)
  {
    a1[4] = v17;
    a1[5] = v18;
  }
  v19 = (*(uint64_t (**)(uint64_t))((*v12 & *v1) + 0xF0))(v17);
  if (v20)
  {
    a1[6] = v19;
    a1[7] = v20;
  }
  v21 = (*(uint64_t (**)(uint64_t))((*v12 & *v1) + 0x108))(v19);
  if (v21)
    a1[8] = v21;
  v22 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x120))();
  if (v22)
    a1[9] = v22;
  v23 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x138))();
  if (v23)
    a1[10] = v23;
  v24 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x150))();
  if (v24)
    a1[11] = v24;
  v25 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x168))();
  if (v25)
    a1[12] = v25;
  v26 = (*(uint64_t (**)(void))((*v12 & *v1) + 0x180))();
  if (v26)
    a1[13] = v26;
  (*(void (**)(void))((*v12 & *v1) + 0x198))();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for Date?);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  Date.timeIntervalSinceReferenceDate.getter();
  v29 = v28;
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  a1[14] = v29;
  return result;
}

id DUDocumentEmailData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentEmailData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocumentEmailData()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x1D0))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocumentEmailData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 456);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v7 = lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocumentEmailData()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ObjC metadata update function for DUDocumentEmailData()
{
  return type metadata accessor for DUDocumentEmailData();
}

void type metadata completion function for DUDocumentEmailData()
{
  unint64_t v0;

  type metadata accessor for Date?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

uint64_t sub_228371700()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
}

uint64_t outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t DUFoundInEventHTMLPreprocessingSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUFoundInEventHTMLPreprocessingSpecification.phaseID.getter()
{
  return 0xD000000000000024;
}

uint64_t DUFoundInEventHTMLPreprocessingSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventHTMLPreprocessingSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventHTMLPreprocessingSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUFoundInEventHTMLPreprocessingSpecification()
{
  return 0xD000000000000024;
}

uint64_t type metadata accessor for DUFoundInEventHTMLPreprocessingSpecification()
{
  return objc_opt_self();
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureCooccurrenceCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 16);
  if (*(_BYTE *)(v1 + 24))
    return 0.0;
  return result;
}

uint64_t type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureCooccurrenceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 16) = v3;
  *(_BYTE *)(v6 + 24) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureCooccurrenceCount.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 16) = a1;
  *(_BYTE *)(v5 + 24) = 0;
  return result;
}

uint64_t type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass()
{
  return objc_opt_self();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureCooccurrenceCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 16);
  if (*(_BYTE *)(v5 + 24))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureCooccurrenceCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureCooccurrenceCount.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 16) = v4;
  *(_BYTE *)(v9 + 24) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureCooccurrenceCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 24) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureCooccurrenceCount()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 32);
  if (*(_BYTE *)(v1 + 40))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 32) = v3;
  *(_BYTE *)(v6 + 40) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityCount.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 32) = a1;
  *(_BYTE *)(v5 + 40) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 32);
  if (*(_BYTE *)(v5 + 40))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityCount.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 32) = v4;
  *(_BYTE *)(v9 + 40) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureEntityCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 40) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureEntityCount()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 40) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 48);
  if (*(_BYTE *)(v1 + 56))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 48) = v3;
  *(_BYTE *)(v6 + 56) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageCount.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 48) = a1;
  *(_BYTE *)(v5 + 56) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 48);
  if (*(_BYTE *)(v5 + 56))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageCount.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 48) = v4;
  *(_BYTE *)(v9 + 56) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureImageCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 56) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureImageCount()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 56) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityImageRatio.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 64);
  if (*(_BYTE *)(v1 + 72))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityImageRatio : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 64) = v3;
  *(_BYTE *)(v6 + 72) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityImageRatio.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 64) = a1;
  *(_BYTE *)(v5 + 72) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityImageRatio.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 64);
  if (*(_BYTE *)(v5 + 72))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityImageRatio.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityImageRatio.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 64) = v4;
  *(_BYTE *)(v9 + 72) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureEntityImageRatio.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 72) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureEntityImageRatio()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 64) = 0;
  *(_BYTE *)(v3 + 72) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageEntityRatio.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 88))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageEntityRatio : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 80) = v3;
  *(_BYTE *)(v6 + 88) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageEntityRatio.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 80) = a1;
  *(_BYTE *)(v5 + 88) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageEntityRatio.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 80);
  if (*(_BYTE *)(v5 + 88))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageEntityRatio.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageEntityRatio.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 80) = v4;
  *(_BYTE *)(v9 + 88) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureImageEntityRatio.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 88) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureImageEntityRatio()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 88) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureDeviceOwner.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 96);
  if (*(_BYTE *)(v1 + 104))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureDeviceOwner : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 96) = v3;
  *(_BYTE *)(v6 + 104) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureDeviceOwner.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 96) = a1;
  *(_BYTE *)(v5 + 104) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureDeviceOwner.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 96);
  if (*(_BYTE *)(v5 + 104))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureDeviceOwner.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureDeviceOwner.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 96) = v4;
  *(_BYTE *)(v9 + 104) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureDeviceOwner.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 104) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureDeviceOwner()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 96) = 0;
  *(_BYTE *)(v3 + 104) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageFaceRatio.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 112);
  if (*(_BYTE *)(v1 + 120))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageFaceRatio : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 112) = v3;
  *(_BYTE *)(v6 + 120) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageFaceRatio.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 112) = a1;
  *(_BYTE *)(v5 + 120) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageFaceRatio.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 112);
  if (*(_BYTE *)(v5 + 120))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageFaceRatio.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureImageFaceRatio.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 112) = v4;
  *(_BYTE *)(v9 + 120) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureImageFaceRatio.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 120) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureImageFaceRatio()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 112) = 0;
  *(_BYTE *)(v3 + 120) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureNameMentionsRatio.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 128);
  if (*(_BYTE *)(v1 + 136))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureNameMentionsRatio : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 128) = v3;
  *(_BYTE *)(v6 + 136) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureNameMentionsRatio.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 128) = a1;
  *(_BYTE *)(v5 + 136) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureNameMentionsRatio.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 128);
  if (*(_BYTE *)(v5 + 136))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureNameMentionsRatio.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureNameMentionsRatio.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 128) = v4;
  *(_BYTE *)(v9 + 136) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureNameMentionsRatio.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 136) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureNameMentionsRatio()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 128) = 0;
  *(_BYTE *)(v3 + 136) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 144);
  if (*(_BYTE *)(v1 + 152))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueNames : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 144) = v3;
  *(_BYTE *)(v6 + 152) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueNames.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 144) = a1;
  *(_BYTE *)(v5 + 152) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 144);
  if (*(_BYTE *)(v5 + 152))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueNames.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueNames.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 144) = v4;
  *(_BYTE *)(v9 + 152) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureUniqueNames.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 152) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureUniqueNames()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 144) = 0;
  *(_BYTE *)(v3 + 152) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueFaces.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 160);
  if (*(_BYTE *)(v1 + 168))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueFaces : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 160) = v3;
  *(_BYTE *)(v6 + 168) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueFaces.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 160) = a1;
  *(_BYTE *)(v5 + 168) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueFaces.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 160);
  if (*(_BYTE *)(v5 + 168))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueFaces.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureUniqueFaces.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 160) = v4;
  *(_BYTE *)(v9 + 168) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureUniqueFaces.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 168) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureUniqueFaces()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 160) = 0;
  *(_BYTE *)(v3 + 168) = 1;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureFaceCount.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 176);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 176) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureFaceCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 176) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureFaceCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 176);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureFaceCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureFaceCount.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 176) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 176) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureSenderFaceCount.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureSenderFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 184);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureSenderFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 184) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureSenderFaceCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 184) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureSenderFaceCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 184);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureSenderFaceCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureSenderFaceCount.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 184) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 184) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureReceiverFaceCount.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureReceiverFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 192);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureReceiverFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 192) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureReceiverFaceCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 192) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureReceiverFaceCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 192);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureReceiverFaceCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureReceiverFaceCount.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 192) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 192) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerFaceCount.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 200);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 200) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerFaceCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 200) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerFaceCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 200);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerFaceCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerFaceCount.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 200) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 200) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featurePronounFaceCount.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featurePronounFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 208);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featurePronounFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 208) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featurePronounFaceCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 208) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featurePronounFaceCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 208);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featurePronounFaceCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featurePronounFaceCount.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 208) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 208) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalConversationThreads.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 216);
  if (*(_BYTE *)(v1 + 224))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalConversationThreads : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 216) = v3;
  *(_BYTE *)(v6 + 224) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalConversationThreads.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 216) = a1;
  *(_BYTE *)(v5 + 224) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalConversationThreads.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 216);
  if (*(_BYTE *)(v5 + 224))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalConversationThreads.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalConversationThreads.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 216) = v4;
  *(_BYTE *)(v9 + 224) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureTotalConversationThreads.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 224) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureTotalConversationThreads()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 216) = 0;
  *(_BYTE *)(v3 + 224) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalMessages.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 232);
  if (*(_BYTE *)(v1 + 240))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalMessages : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 232) = v3;
  *(_BYTE *)(v6 + 240) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalMessages.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 232) = a1;
  *(_BYTE *)(v5 + 240) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalMessages.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 232);
  if (*(_BYTE *)(v5 + 240))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalMessages.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTotalMessages.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 232) = v4;
  *(_BYTE *)(v9 + 240) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureTotalMessages.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 240) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureTotalMessages()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 240) = 1;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForFace.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForFace : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 248);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForFace : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 248) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForFace.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 248) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForFace.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 248);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForFace.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForFace.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 248) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 248) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForName.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForName : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 256);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForName : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 256) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForName.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 256) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 256);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForName.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureMessagesCountInThreadsForName.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 256) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 256) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityDistances.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityDistances : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 264);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityDistances : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 264) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityDistances.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 264) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityDistances.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 264);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityDistances.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEntityDistances.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 264) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 264) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureContextTextLengths.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureContextTextLengths : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 272);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureContextTextLengths : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 272) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureContextTextLengths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 272) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureContextTextLengths.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 272);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureContextTextLengths.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureContextTextLengths.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 272) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 272) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 280);
  if (*(_BYTE *)(v1 + 288))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelConfidence : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 280) = v3;
  *(_BYTE *)(v6 + 288) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelConfidence.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 280) = a1;
  *(_BYTE *)(v5 + 288) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelConfidence.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 280);
  if (*(_BYTE *)(v5 + 288))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelConfidence.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelConfidence.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 280) = v4;
  *(_BYTE *)(v9 + 288) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureModelConfidence.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20))
     + 280;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureModelConfidence()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 280) = 0;
  *(_BYTE *)(v3 + 288) = 1;
}

double DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelThreshold.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  result = *(double *)(v1 + 296);
  if (*(_BYTE *)(v1 + 304))
    return 0.0;
  return result;
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelThreshold : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  result = swift_beginAccess();
  *(_QWORD *)(v6 + 296) = v3;
  *(_BYTE *)(v6 + 304) = 0;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelThreshold.setter(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  result = swift_beginAccess();
  *(double *)(v5 + 296) = a1;
  *(_BYTE *)(v5 + 304) = 0;
  return result;
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelThreshold.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v6 = *(double *)(v5 + 296);
  if (*(_BYTE *)(v5 + 304))
    v6 = 0.0;
  *((double *)v3 + 9) = v6;
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelThreshold.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureModelThreshold.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) == 0)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    v6 = *(int *)(v3 + 88);
    v7 = *(_QWORD *)(v3 + 80);
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v8 = swift_retain();
    *(_QWORD *)(v7 + v6) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v8);
    swift_release();
  }
LABEL_4:
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + *(int *)(v3 + 88));
  swift_beginAccess();
  *(_QWORD *)(v9 + 296) = v4;
  *(_BYTE *)(v9 + 304) = 0;
  free((void *)v3);
}

BOOL DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hasFeatureModelThreshold.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20))
     + 296;
  swift_beginAccess();
  return (*(_BYTE *)(v1 + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_XGBoostModelFeatures.clearFeatureModelThreshold()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  v3 = *(_QWORD *)(v0 + v1);
  swift_beginAccess();
  *(_QWORD *)(v3 + 296) = 0;
  *(_BYTE *)(v3 + 304) = 1;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrFaceCount.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 312);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrFaceCount : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 312) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrFaceCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 312) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrFaceCount.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 312);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrFaceCount.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrFaceCount.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 312) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 312) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrEntityDistances.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrEntityDistances : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 320);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrEntityDistances : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 320) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrEntityDistances.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 320) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrEntityDistances.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 320);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrEntityDistances.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrEntityDistances.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 320) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 320) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrContextTextLengths.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrContextTextLengths : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 328);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrContextTextLengths : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 328) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrContextTextLengths.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 328) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrContextTextLengths.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 328);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrContextTextLengths.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrContextTextLengths.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 328) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 328) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerConfidences.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerConfidences : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 336);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerConfidences : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 336) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerConfidences.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 336) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerConfidences.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 336);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerConfidences.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureTaggerConfidences.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 336) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 336) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrConfidences.getter()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrConfidences : DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 344);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrConfidences : DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v5 = swift_retain();
    *(_QWORD *)(a2 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v5);
    swift_release();
  }
  v6 = *(_QWORD *)(a2 + v4);
  swift_beginAccess();
  *(_QWORD *)(v6 + 344) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrConfidences.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v4 = swift_retain();
    *(_QWORD *)(v1 + v3) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + v3);
  swift_beginAccess();
  *(_QWORD *)(v5 + 344) = a1;
  return swift_bridgeObjectRelease();
}

void (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrConfidences.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  *((_DWORD *)v3 + 22) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  swift_beginAccess();
  v3[9] = *(_QWORD *)(v5 + 344);
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrConfidences.modify;
}

void DocumentUnderstanding_Autonaming_XGBoostModelFeatures.featureEcrConfidences.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 72);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v4 = *(int *)(v2 + 88);
      v5 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v6 = swift_retain();
      *(_QWORD *)(v5 + v4) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v6);
      swift_release();
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v7 + 344) = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      v8 = *(int *)(v2 + 88);
      v9 = *(_QWORD *)(v2 + 80);
      type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
      swift_allocObject();
      v10 = swift_retain();
      *(_QWORD *)(v9 + v8) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v10);
      swift_release();
    }
    v11 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + *(int *)(v2 + 88));
    swift_beginAccess();
    *(_QWORD *)(v11 + 344) = v3;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t (*DocumentUnderstanding_Autonaming_XGBoostModelFeatures.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  UnknownStorage.init()();
  v2 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v2) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
  return swift_retain();
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.features.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v1 + *(int *)(v6 + 20), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v5, a1);
  UnknownStorage.init()();
  v8 = *(int *)(v7 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_TrainingData.features : DocumentUnderstanding_Autonaming_TrainingData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  v8 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v6, a2);
  UnknownStorage.init()();
  v9 = *(int *)(v8 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v9) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
  swift_retain();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_TrainingData.features : DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(a1, (uint64_t)v7);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 20);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.features.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 20);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_Autonaming_TrainingData.features.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 20);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = *(int *)(v6 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v9[v11] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_Autonaming_TrainingData.features.modify;
}

void DocumentUnderstanding_Autonaming_TrainingData.features.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(int *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v4);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v9, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v4, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v5);
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(**(_QWORD **)a1 + v3, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v5, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL DocumentUnderstanding_Autonaming_TrainingData.hasFeatures.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_TrainingData.clearFeatures()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 20);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v2 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.annotation.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 24));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.annotation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v4 = v1 + *(int *)(result + 24);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_Autonaming_TrainingData.annotation.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 24);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_Autonaming_TrainingData.hasAnnotation.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 24)
                   + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_TrainingData.clearAnnotation()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 24);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.groundTruthAvailable.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 28)) & 1;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.groundTruthAvailable.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_Autonaming_TrainingData.groundTruthAvailable.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 28);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3) & 1;
  *(_DWORD *)(a1 + 8) = v3;
  return DocumentUnderstanding_Autonaming_TrainingData.groundTruthAvailable.modify;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.groundTruthAvailable.modify(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

BOOL DocumentUnderstanding_Autonaming_TrainingData.hasGroundTruthAvailable.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 28)) != 2;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_TrainingData.clearGroundTruthAvailable()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 28)) = 2;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.cooccurrenceKey.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 32));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_Autonaming_TrainingData.cooccurrenceKey : DocumentUnderstanding_Autonaming_TrainingData@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 32));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_Autonaming_TrainingData.cooccurrenceKey : DocumentUnderstanding_Autonaming_TrainingData(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 32));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.cooccurrenceKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_Autonaming_TrainingData.cooccurrenceKey.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 32);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_Autonaming_TrainingData.hasCooccurrenceKey.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 32)
                   + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_Autonaming_TrainingData.clearCooccurrenceKey()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 32));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t (*DocumentUnderstanding_Autonaming_TrainingData.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;

  UnknownStorage.init()();
  v2 = (int *)type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6 = a1 + v2[6];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  *(_BYTE *)(a1 + v2[7]) = 2;
  v7 = (_QWORD *)(a1 + v2[8]);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

void *DocumentUnderstanding_Autonaming_XGBoostModelFeatures.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_Autonaming_XGBoostModelFeatures.protoMessageName;
}

unint64_t static DocumentUnderstanding_Autonaming_XGBoostModelFeatures.protoMessageName.getter()
{
  return 0xD000000000000036;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._protobuf_nameMap, a1);
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 40) = 1;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 72) = 1;
  *(_QWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 88) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  *(_QWORD *)(v0 + 128) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  *(_QWORD *)(v0 + 144) = 0;
  *(_BYTE *)(v0 + 152) = 1;
  *(_QWORD *)(v0 + 160) = 0;
  v2 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v0 + 168) = 1;
  *(_QWORD *)(v0 + 176) = v2;
  *(_QWORD *)(v0 + 184) = v2;
  *(_QWORD *)(v0 + 192) = v2;
  *(_QWORD *)(v0 + 200) = v2;
  *(_QWORD *)(v0 + 208) = v2;
  *(_QWORD *)(v0 + 216) = 0;
  *(_BYTE *)(v0 + 224) = 1;
  *(_QWORD *)(v0 + 232) = 0;
  *(_BYTE *)(v0 + 240) = 1;
  *(_QWORD *)(v0 + 248) = v2;
  *(_QWORD *)(v0 + 256) = v2;
  *(_QWORD *)(v0 + 264) = v2;
  *(_QWORD *)(v0 + 272) = v2;
  *(_QWORD *)(v0 + 280) = 0;
  *(_BYTE *)(v0 + 288) = 1;
  *(_QWORD *)(v0 + 296) = 0;
  *(_BYTE *)(v0 + 304) = 1;
  *(_QWORD *)(v0 + 312) = v2;
  *(_QWORD *)(v0 + 320) = v2;
  *(_QWORD *)(v0 + 328) = v2;
  *(_QWORD *)(v0 + 336) = v2;
  *(_QWORD *)(v0 + 344) = v2;
  return result;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_QWORD *)(v1 + 48) = 0;
  v34 = a1 + 288;
  *(_BYTE *)(v1 + 56) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 1;
  *(_QWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 120) = 1;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 1;
  *(_QWORD *)(v1 + 144) = 0;
  *(_BYTE *)(v1 + 152) = 1;
  *(_QWORD *)(v1 + 160) = 0;
  *(_BYTE *)(v1 + 168) = 1;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 176) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 184) = v3;
  *(_QWORD *)(v1 + 192) = v3;
  *(_QWORD *)(v1 + 200) = v3;
  *(_QWORD *)(v1 + 208) = v3;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 224) = 1;
  *(_QWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 248) = v3;
  *(_BYTE *)(v1 + 240) = 1;
  *(_QWORD *)(v1 + 256) = v3;
  *(_QWORD *)(v1 + 264) = v3;
  *(_QWORD *)(v1 + 272) = v3;
  *(_QWORD *)(v1 + 280) = 0;
  *(_BYTE *)(v1 + 288) = 1;
  *(_BYTE *)(v1 + 304) = 1;
  *(_QWORD *)(v1 + 312) = v3;
  *(_QWORD *)(v1 + 320) = v3;
  *(_QWORD *)(v1 + 328) = v3;
  *(_QWORD *)(v1 + 336) = v3;
  *(_QWORD *)(v1 + 344) = v3;
  *(_QWORD *)(v1 + 296) = 0;
  swift_beginAccess();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = v5;
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 32);
  LOBYTE(v4) = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v6;
  *(_BYTE *)(v1 + 40) = v4;
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 48);
  LOBYTE(v4) = *(_BYTE *)(a1 + 56);
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = v7;
  *(_BYTE *)(v1 + 56) = v4;
  swift_beginAccess();
  v8 = *(_QWORD *)(a1 + 64);
  LOBYTE(v7) = *(_BYTE *)(a1 + 72);
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = v8;
  *(_BYTE *)(v1 + 72) = v7;
  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 80);
  LOBYTE(v7) = *(_BYTE *)(a1 + 88);
  swift_beginAccess();
  *(_QWORD *)(v1 + 80) = v9;
  *(_BYTE *)(v1 + 88) = v7;
  swift_beginAccess();
  v10 = *(_QWORD *)(a1 + 96);
  LOBYTE(v7) = *(_BYTE *)(a1 + 104);
  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = v10;
  *(_BYTE *)(v1 + 104) = v7;
  swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 112);
  LOBYTE(v7) = *(_BYTE *)(a1 + 120);
  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = v11;
  *(_BYTE *)(v1 + 120) = v7;
  swift_beginAccess();
  v12 = *(_QWORD *)(a1 + 128);
  LOBYTE(v7) = *(_BYTE *)(a1 + 136);
  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = v12;
  *(_BYTE *)(v1 + 136) = v7;
  swift_beginAccess();
  v13 = *(_QWORD *)(a1 + 144);
  LOBYTE(v7) = *(_BYTE *)(a1 + 152);
  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = v13;
  *(_BYTE *)(v1 + 152) = v7;
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 160);
  LOBYTE(v7) = *(_BYTE *)(a1 + 168);
  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = v14;
  *(_BYTE *)(v1 + 168) = v7;
  swift_beginAccess();
  v15 = *(_QWORD *)(a1 + 176);
  swift_beginAccess();
  *(_QWORD *)(v1 + 176) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v16 = *(_QWORD *)(a1 + 184);
  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = *(_QWORD *)(a1 + 192);
  swift_beginAccess();
  *(_QWORD *)(v1 + 192) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v18 = *(_QWORD *)(a1 + 200);
  swift_beginAccess();
  *(_QWORD *)(v1 + 200) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *(_QWORD *)(a1 + 208);
  swift_beginAccess();
  *(_QWORD *)(v1 + 208) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v20 = *(_QWORD *)(a1 + 216);
  LOBYTE(v7) = *(_BYTE *)(a1 + 224);
  swift_beginAccess();
  *(_QWORD *)(v1 + 216) = v20;
  *(_BYTE *)(v1 + 224) = v7;
  swift_beginAccess();
  v21 = *(_QWORD *)(a1 + 232);
  LOBYTE(v7) = *(_BYTE *)(a1 + 240);
  swift_beginAccess();
  *(_QWORD *)(v1 + 232) = v21;
  *(_BYTE *)(v1 + 240) = v7;
  swift_beginAccess();
  v22 = *(_QWORD *)(a1 + 248);
  swift_beginAccess();
  *(_QWORD *)(v1 + 248) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v23 = *(_QWORD *)(a1 + 256);
  swift_beginAccess();
  *(_QWORD *)(v1 + 256) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v24 = *(_QWORD *)(a1 + 264);
  swift_beginAccess();
  *(_QWORD *)(v1 + 264) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v25 = *(_QWORD *)(a1 + 272);
  swift_beginAccess();
  *(_QWORD *)(v1 + 272) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v26 = *(_QWORD *)(a1 + 280);
  LOBYTE(v7) = *(_BYTE *)(a1 + 288);
  swift_beginAccess();
  *(_QWORD *)(v1 + 280) = v26;
  *(_BYTE *)(v1 + 288) = v7;
  swift_beginAccess();
  v27 = *(_QWORD *)(a1 + 296);
  LOBYTE(v7) = *(_BYTE *)(v34 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 296) = v27;
  *(_BYTE *)(v1 + 304) = v7;
  swift_beginAccess();
  v28 = *(_QWORD *)(a1 + 312);
  swift_beginAccess();
  *(_QWORD *)(v1 + 312) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v29 = *(_QWORD *)(a1 + 320);
  swift_beginAccess();
  *(_QWORD *)(v1 + 320) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30 = *(_QWORD *)(a1 + 328);
  swift_beginAccess();
  *(_QWORD *)(v1 + 328) = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v31 = *(_QWORD *)(a1 + 336);
  swift_beginAccess();
  *(_QWORD *)(v1 + 336) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v32 = *(_QWORD *)(a1 + 344);
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v1 + 344) = v32;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1)
{
  return type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentUnderstanding_Autonaming_TrainingData);
}

uint64_t outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.__deallocating_deinit()
{
  DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.deinit();
  return swift_deallocClassInstance();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v2 = swift_retain();
    *(_QWORD *)(v0 + v1) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v2);
    swift_release();
  }
  swift_retain();
  closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
  return swift_release();
}

uint64_t closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          closure #1 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 2:
          closure #2 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 3:
          closure #3 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 4:
          closure #4 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 5:
          closure #5 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 6:
          closure #6 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 7:
          closure #7 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 8:
          closure #8 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 9:
          closure #9 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 10:
          closure #10 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 11:
          closure #11 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 12:
          closure #12 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 13:
          closure #13 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 14:
          closure #14 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 15:
          closure #15 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 16:
          closure #16 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 17:
          closure #17 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 18:
          closure #18 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 19:
          closure #19 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 20:
          closure #20 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 21:
          closure #21 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 22:
          closure #22 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 23:
          closure #23 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 24:
          closure #24 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 25:
          closure #25 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 26:
          closure #26 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 27:
          closure #27 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        case 28:
          closure #28 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #3 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #5 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #8 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #9 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #10 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #11 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #12 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #13 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #14 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #15 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #16 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #17 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #18 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #19 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #20 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #21 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #22 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #23 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #24 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #25 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #26 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #27 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t closure #28 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)()
{
  swift_beginAccess();
  dispatch thunk of Decoder.decodeRepeatedDoubleField(value:)();
  return swift_endAccess();
}

uint64_t DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v1 = (_QWORD *)swift_retain();
  closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(v1);
  result = swift_release();
  if (!v0)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;

  result = closure #1 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
  if (!v1)
  {
    closure #2 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #3 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #4 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #5 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #6 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #7 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #8 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #9 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #10 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    swift_beginAccess();
    if (*(_QWORD *)(a1[22] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[23] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[24] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[25] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[26] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #11 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #12 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    swift_beginAccess();
    if (*(_QWORD *)(a1[31] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[32] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[33] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[34] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    closure #13 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    closure #14 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)((uint64_t)a1);
    swift_beginAccess();
    if (*(_QWORD *)(a1[39] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[40] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[41] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    if (*(_QWORD *)(a1[42] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
    }
    result = swift_beginAccess();
    if (*(_QWORD *)(a1[43] + 16))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitPackedDoubleField(value:fieldNumber:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 72) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #5 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 88) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #6 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 104) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #7 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #9 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 152) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #10 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #11 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 224) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #12 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if ((*(_BYTE *)(a1 + 240) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #13 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 280;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

uint64_t closure #14 in closure #1 in DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 296;
  result = swift_beginAccess();
  if ((*(_BYTE *)(v1 + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  return result;
}

BOOL closure #1 in static DocumentUnderstanding_Autonaming_XGBoostModelFeatures.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v4;
  char v5;
  char v6;
  double v7;
  char v8;
  char v9;
  double v10;
  char v11;
  char v12;
  double v13;
  char v14;
  char v15;
  double v16;
  char v17;
  char v18;
  double v19;
  char v20;
  char v21;
  double v22;
  char v23;
  char v24;
  double v25;
  char v26;
  char v27;
  double v28;
  char v29;
  char v30;
  double v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  char v40;
  char v41;
  double v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  char v50;
  char v51;
  double v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  swift_beginAccess();
  v4 = *(double *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  swift_beginAccess();
  v6 = *(_BYTE *)(a2 + 24);
  if ((v5 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v4 != *(double *)(a2 + 16))
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v7 = *(double *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  swift_beginAccess();
  v9 = *(_BYTE *)(a2 + 40);
  if ((v8 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (v7 != *(double *)(a2 + 32))
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v10 = *(double *)(a1 + 48);
  v11 = *(_BYTE *)(a1 + 56);
  swift_beginAccess();
  v12 = *(_BYTE *)(a2 + 56);
  if ((v11 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      return 0;
  }
  else
  {
    if (v10 != *(double *)(a2 + 48))
      v12 = 1;
    if ((v12 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v13 = *(double *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  swift_beginAccess();
  v15 = *(_BYTE *)(a2 + 72);
  if ((v14 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 72))
      return 0;
  }
  else
  {
    if (v13 != *(double *)(a2 + 64))
      v15 = 1;
    if ((v15 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v16 = *(double *)(a1 + 80);
  v17 = *(_BYTE *)(a1 + 88);
  swift_beginAccess();
  v18 = *(_BYTE *)(a2 + 88);
  if ((v17 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 88))
      return 0;
  }
  else
  {
    if (v16 != *(double *)(a2 + 80))
      v18 = 1;
    if ((v18 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v19 = *(double *)(a1 + 96);
  v20 = *(_BYTE *)(a1 + 104);
  swift_beginAccess();
  v21 = *(_BYTE *)(a2 + 104);
  if ((v20 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 104))
      return 0;
  }
  else
  {
    if (v19 != *(double *)(a2 + 96))
      v21 = 1;
    if ((v21 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v22 = *(double *)(a1 + 112);
  v23 = *(_BYTE *)(a1 + 120);
  swift_beginAccess();
  v24 = *(_BYTE *)(a2 + 120);
  if ((v23 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 120))
      return 0;
  }
  else
  {
    if (v22 != *(double *)(a2 + 112))
      v24 = 1;
    if ((v24 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v25 = *(double *)(a1 + 128);
  v26 = *(_BYTE *)(a1 + 136);
  swift_beginAccess();
  v27 = *(_BYTE *)(a2 + 136);
  if ((v26 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 136))
      return 0;
  }
  else
  {
    if (v25 != *(double *)(a2 + 128))
      v27 = 1;
    if ((v27 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v28 = *(double *)(a1 + 144);
  v29 = *(_BYTE *)(a1 + 152);
  swift_beginAccess();
  v30 = *(_BYTE *)(a2 + 152);
  if ((v29 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 152))
      return 0;
  }
  else
  {
    if (v28 != *(double *)(a2 + 144))
      v30 = 1;
    if ((v30 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v31 = *(double *)(a1 + 160);
  v32 = *(_BYTE *)(a1 + 168);
  swift_beginAccess();
  v33 = *(_BYTE *)(a2 + 168);
  if ((v32 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 168))
      return 0;
  }
  else
  {
    if (v31 != *(double *)(a2 + 160))
      v33 = 1;
    if ((v33 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v34 = *(_QWORD *)(a1 + 176);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v34, *(_QWORD *)(a2 + 176)))
    return 0;
  swift_beginAccess();
  v35 = *(_QWORD *)(a1 + 184);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v35, *(_QWORD *)(a2 + 184)))
    return 0;
  swift_beginAccess();
  v36 = *(_QWORD *)(a1 + 192);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v36, *(_QWORD *)(a2 + 192)))
    return 0;
  swift_beginAccess();
  v37 = *(_QWORD *)(a1 + 200);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v37, *(_QWORD *)(a2 + 200)))
    return 0;
  swift_beginAccess();
  v38 = *(_QWORD *)(a1 + 208);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v38, *(_QWORD *)(a2 + 208)))
    return 0;
  swift_beginAccess();
  v39 = *(double *)(a1 + 216);
  v40 = *(_BYTE *)(a1 + 224);
  swift_beginAccess();
  v41 = *(_BYTE *)(a2 + 224);
  if ((v40 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 224))
      return 0;
  }
  else
  {
    if (v39 != *(double *)(a2 + 216))
      v41 = 1;
    if ((v41 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v42 = *(double *)(a1 + 232);
  v43 = *(_BYTE *)(a1 + 240);
  swift_beginAccess();
  v44 = *(_BYTE *)(a2 + 240);
  if ((v43 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 240))
      return 0;
  }
  else
  {
    if (v42 != *(double *)(a2 + 232))
      v44 = 1;
    if ((v44 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v45 = *(_QWORD *)(a1 + 248);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v45, *(_QWORD *)(a2 + 248)))
    return 0;
  swift_beginAccess();
  v46 = *(_QWORD *)(a1 + 256);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v46, *(_QWORD *)(a2 + 256)))
    return 0;
  swift_beginAccess();
  v47 = *(_QWORD *)(a1 + 264);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v47, *(_QWORD *)(a2 + 264)))
    return 0;
  swift_beginAccess();
  v48 = *(_QWORD *)(a1 + 272);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v48, *(_QWORD *)(a2 + 272)))
    return 0;
  swift_beginAccess();
  v49 = *(double *)(a1 + 280);
  v50 = *(_BYTE *)(a1 + 288);
  swift_beginAccess();
  v51 = *(_BYTE *)(a2 + 288);
  if ((v50 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 288))
      return 0;
  }
  else
  {
    if (v49 != *(double *)(a2 + 280))
      v51 = 1;
    if ((v51 & 1) != 0)
      return 0;
  }
  swift_beginAccess();
  v52 = *(double *)(a1 + 296);
  v53 = *(_BYTE *)(a1 + 304);
  swift_beginAccess();
  v54 = *(_BYTE *)(a2 + 304);
  if ((v53 & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 304))
      goto LABEL_94;
    return 0;
  }
  if (v52 != *(double *)(a2 + 296))
    v54 = 1;
  if ((v54 & 1) != 0)
    return 0;
LABEL_94:
  swift_beginAccess();
  v55 = *(_QWORD *)(a1 + 312);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v55, *(_QWORD *)(a2 + 312)))
    return 0;
  swift_beginAccess();
  v56 = *(_QWORD *)(a1 + 320);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v56, *(_QWORD *)(a2 + 320)))
    return 0;
  swift_beginAccess();
  v57 = *(_QWORD *)(a1 + 328);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v57, *(_QWORD *)(a2 + 328)))
    return 0;
  swift_beginAccess();
  v58 = *(_QWORD *)(a1 + 336);
  swift_beginAccess();
  if (!specialized static Array<A>.== infix(_:_:)(v58, *(_QWORD *)(a2 + 336)))
    return 0;
  swift_beginAccess();
  v59 = *(_QWORD *)(a1 + 344);
  swift_beginAccess();
  return specialized static Array<A>.== infix(_:_:)(v59, *(_QWORD *)(a2 + 344));
}

Swift::Int DocumentUnderstanding_Autonaming_XGBoostModelFeatures.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, &lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  UnknownStorage.init()();
  v4 = *(int *)(a1 + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
  return swift_retain();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return 0xD000000000000036;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return DocumentUnderstanding_Autonaming_XGBoostModelFeatures.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  return Message.hash(into:)();
}

void *DocumentUnderstanding_Autonaming_TrainingData.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_Autonaming_TrainingData.protoMessageName;
}

unint64_t static DocumentUnderstanding_Autonaming_TrainingData.protoMessageName.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_Autonaming_TrainingData._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_Autonaming_TrainingData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_Autonaming_TrainingData._protobuf_nameMap, a1);
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          closure #1 in DocumentUnderstanding_Autonaming_TrainingData.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_Autonaming_TrainingData.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(v0);
    closure #3 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(v0);
    closure #4 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(a1 + *(int *)(v9 + 20), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v8);
}

uint64_t closure #2 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 28)) != 2)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 32) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_Autonaming_TrainingData.hashValue.getter()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.hashValue.getter(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, &lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_Autonaming_TrainingData@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  UnknownStorage.init()();
  v4 = a2 + a1[5];
  v5 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v7 = a1[7];
  v8 = a2 + a1[6];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a2 + v7) = 2;
  v9 = (_QWORD *)(a2 + a1[8]);
  *v9 = 0;
  v9[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_Autonaming_TrainingData()
{
  return 0xD00000000000002ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_Autonaming_TrainingData()
{
  return DocumentUnderstanding_Autonaming_TrainingData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_Autonaming_TrainingData()
{
  return DocumentUnderstanding_Autonaming_TrainingData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_Autonaming_TrainingData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_Autonaming_TrainingData@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_Autonaming_TrainingData._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_Autonaming_TrainingData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_Autonaming_TrainingData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_Autonaming_XGBoostModelFeatures.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  v11 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a2 + v11);
  if (v12 == v13 || closure #1 in static DocumentUnderstanding_Autonaming_XGBoostModelFeatures.== infix(_:_:)(v12, v13))
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, a1, v4);
    v14(v8, a2, v4);
    lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized static DocumentUnderstanding_Autonaming_TrainingData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v61 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v60 = (char *)&v59 - v7;
  v8 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v64 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_Autonaming_XGBoostModelFeatures?, DocumentUnderstanding_Autonaming_XGBoostModelFeatures?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v59 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v59 - v21;
  v23 = (int *)type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v24 = v23[5];
  v65 = a1;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(a1 + v24, (uint64_t)v22);
  v25 = v23[5];
  v66 = a2;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(a2 + v25, (uint64_t)v20);
  v26 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v22, (uint64_t)v13);
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v20, v26);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v13, 1, v8) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    if (v27(v26, 1, v8) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      goto LABEL_13;
    }
    goto LABEL_6;
  }
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v13, (uint64_t)v17);
  if (v27(v26, 1, v8) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v17);
LABEL_6:
    v28 = &demangling cache variable for type metadata for (DocumentUnderstanding_Autonaming_XGBoostModelFeatures?, DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    v29 = (uint64_t)v13;
LABEL_7:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v29, v28);
    goto LABEL_8;
  }
  v32 = v64;
  outlined init with take of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(v26, v64);
  v33 = *(int *)(v8 + 20);
  v34 = *(_QWORD *)&v17[v33];
  v35 = *(_QWORD *)(v32 + v33);
  if (v34 != v35
    && !closure #1 in static DocumentUnderstanding_Autonaming_XGBoostModelFeatures.== infix(_:_:)(v34, v35))
  {
    outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(v32);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v17);
    v29 = (uint64_t)v13;
    v28 = &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?;
    goto LABEL_7;
  }
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures(v32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v17);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  if ((v36 & 1) == 0)
    goto LABEL_8;
LABEL_13:
  v37 = v23[6];
  v39 = v65;
  v38 = v66;
  v40 = (_QWORD *)(v65 + v37);
  v41 = *(_BYTE *)(v65 + v37 + 8);
  v42 = (_QWORD *)(v66 + v37);
  v43 = *(unsigned __int8 *)(v66 + v37 + 8);
  if ((v41 & 1) != 0)
  {
    if (!v43)
      goto LABEL_8;
  }
  else
  {
    if (*v40 != *v42)
      LOBYTE(v43) = 1;
    if ((v43 & 1) != 0)
      goto LABEL_8;
  }
  v44 = v23[7];
  v45 = *(unsigned __int8 *)(v65 + v44);
  v46 = *(unsigned __int8 *)(v66 + v44);
  if (v45 == 2)
  {
    if (v46 != 2)
      goto LABEL_8;
  }
  else if (v46 == 2 || ((((v46 & 1) == 0) ^ v45) & 1) == 0)
  {
    goto LABEL_8;
  }
  v47 = v23[8];
  v48 = (_QWORD *)(v65 + v47);
  v49 = *(_QWORD *)(v65 + v47 + 8);
  v50 = (_QWORD *)(v66 + v47);
  v51 = v50[1];
  if (!v49)
  {
    if (!v51)
    {
LABEL_32:
      v52 = v62;
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      v54 = v60;
      v55 = v39;
      v56 = v63;
      v53(v60, v55, v63);
      v57 = v61;
      v53(v61, v38, v56);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v58 = *(void (**)(char *, uint64_t))(v52 + 8);
      v58(v57, v56);
      v58(v54, v56);
      return v30 & 1;
    }
    goto LABEL_8;
  }
  if (!v51)
  {
LABEL_8:
    v30 = 0;
    return v30 & 1;
  }
  if (*v48 == *v50 && v49 == v51)
    goto LABEL_32;
  v30 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_32;
  return v30 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_XGBoostModelFeatures and conformance DocumentUnderstanding_Autonaming_XGBoostModelFeatures, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_Autonaming_TrainingData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_Autonaming_TrainingData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_Autonaming_TrainingData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_Autonaming_TrainingData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
}

uint64_t sub_22837DEE8@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 16);
  if (*(_BYTE *)(v3 + 24))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837DF50@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 32);
  if (*(_BYTE *)(v3 + 40))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837DFB8@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 48);
  if (*(_BYTE *)(v3 + 56))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E020@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 64);
  if (*(_BYTE *)(v3 + 72))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E088@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 80);
  if (*(_BYTE *)(v3 + 88))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E0F0@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 96);
  if (*(_BYTE *)(v3 + 104))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E158@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 112);
  if (*(_BYTE *)(v3 + 120))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E1C0@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 128);
  if (*(_BYTE *)(v3 + 136))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E228@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 144);
  if (*(_BYTE *)(v3 + 152))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E290@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 160);
  if (*(_BYTE *)(v3 + 168))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E320@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 216);
  if (*(_BYTE *)(v3 + 224))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E388@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 232);
  if (*(_BYTE *)(v3 + 240))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E410@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 280);
  if (*(_BYTE *)(v3 + 288))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E484@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  double v5;

  v3 = *(_QWORD *)(a1
                 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20));
  result = swift_beginAccess();
  v5 = *(double *)(v3 + 296);
  if (*(_BYTE *)(v3 + 304))
    v5 = 0.0;
  *a2 = v5;
  return result;
}

uint64_t sub_22837E528@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 24));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_22837E56C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v5 = a2 + *(int *)(result + 24);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_22837E5A4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 28)) & 1;
  return result;
}

uint64_t sub_22837E5DC(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  *(_BYTE *)(a2 + *(int *)(result + 28)) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22837E620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_Autonaming_XGBoostModelFeatures()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22837E6A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

char *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_Autonaming_TrainingData(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v8(v10, v11, v7);
      *(_QWORD *)&v10[*(int *)(v12 + 20)] = *(_QWORD *)&v11[*(int *)(v12 + 20)];
      v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
      swift_retain();
      v16(v10, 0, 1, v12);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = &a1[v17];
    v20 = &a2[v17];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    a1[v18] = a2[v18];
    v21 = a3[8];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v5(v6, v4);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    *(_QWORD *)&v9[*(int *)(v11 + 20)] = *(_QWORD *)&v10[*(int *)(v11 + 20)];
    v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
    swift_retain();
    v14(v9, 0, 1, v11);
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  void (*v16)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v26;
  int *v27;

  v6 = type metadata accessor for UnknownStorage();
  v26 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 24);
  v7(a1, a2, v6);
  v27 = a3;
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      *(_QWORD *)&v9[*(int *)(v11 + 20)] = *(_QWORD *)&v10[*(int *)(v11 + 20)];
      swift_retain();
      swift_release();
      goto LABEL_7;
    }
    outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v9);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v9, v10, v6);
  *(_QWORD *)&v9[*(int *)(v11 + 20)] = *(_QWORD *)&v10[*(int *)(v11 + 20)];
  v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
  swift_retain();
  v16(v9, 0, 1, v11);
LABEL_7:
  v18 = v27[6];
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 8) = *((_BYTE *)v20 + 8);
  *(_QWORD *)v19 = v21;
  *(_BYTE *)(a1 + v27[7]) = *(_BYTE *)(a2 + v27[7]);
  v22 = v27[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    *(_QWORD *)&v9[*(int *)(v11 + 20)] = *(_QWORD *)&v10[*(int *)(v11 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int *v28;

  v6 = type metadata accessor for UnknownStorage();
  v27 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  v7(a1, a2, v6);
  v28 = a3;
  v8 = a3[5];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v7((uint64_t)v9, (uint64_t)v10, v6);
      *(_QWORD *)&v9[*(int *)(v11 + 20)] = *(_QWORD *)&v10[*(int *)(v11 + 20)];
      swift_release();
      goto LABEL_7;
    }
    outlined destroy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures((uint64_t)v9);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v9, v10, v6);
  *(_QWORD *)&v9[*(int *)(v11 + 20)] = *(_QWORD *)&v10[*(int *)(v11 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = v28[6];
  v18 = v28[7];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v21 = v28[8];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_Autonaming_TrainingData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22837EEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_Autonaming_TrainingData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22837EFBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  return result;
}

void type metadata completion function for DocumentUnderstanding_Autonaming_TrainingData()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
}

unint64_t static DUPosTaggingSpecification.phaseID.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t DUPosTaggingSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUPosTaggingSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUPosTaggingSpecification.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUPosTaggingSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUPosTaggingSpecification()
{
  return 0xD00000000000001CLL;
}

uint64_t DUPosTaggingSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = DUPosTaggingSpecification.attachResultsToResponse(response:processingRequest:);
  return v6(a2);
}

uint64_t DUPosTaggingSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUPosTaggingSpecification.attachResultsToResponse(response:processingRequest:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 16)) + 0x148))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id DUPosTaggingSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 1024;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DUPosTaggingSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = DUPosTaggingSpecification.attachResultsToResponse(response:processingRequest:);
  return v6(a2);
}

id protocol witness for TopLevelSpecificationProtocol.associatedRequestTypes.getter in conformance DUPosTaggingSpecification()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 1024;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUPosTaggingSpecification()
{
  return objc_opt_self();
}

unint64_t static DUPosTaggingImplementation.implementationID.getter()
{
  return 0xD000000000000025;
}

uint64_t static DUPosTaggingImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUPosTaggingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUPosTaggingSpecification;
  *a1 = result;
  return result;
}

void *static DUPosTaggingImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUPosTaggingImplementation.implementationAttributes.getter;
}

uint64_t DUPosTaggingImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return swift_task_switch();
}

uint64_t DUPosTaggingImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  Class isa;
  id v12;
  void *v13;
  uint64_t inited;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 80) + 136))();
  v2 = v1;
  if (v1)
  {
    v3 = (uint64_t *)(v0 + 72);
    *(_QWORD *)(v0 + 72) = MEMORY[0x24BEE4AF8];
    v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x88))();
    if (v5)
    {
      v6 = v4;
      v7 = v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLTagScheme>);
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_2284C1EE0;
      v9 = (void *)*MEMORY[0x24BDDFD08];
      *(_QWORD *)(v8 + 32) = *MEMORY[0x24BDDFD08];
      v10 = objc_allocWithZone(MEMORY[0x24BDDFD68]);
      type metadata accessor for NLTagScheme(0);
      v9;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v12 = objc_msgSend(v10, sel_initWithTagSchemes_, isa);

      v13 = (void *)MEMORY[0x22E2AF8EC](v6, v7);
      objc_msgSend(v12, sel_setString_, v13);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLTag>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_2284C25C0;
      v15 = (void *)*MEMORY[0x24BDDFCD0];
      *(_QWORD *)(inited + 32) = *MEMORY[0x24BDDFCD0];
      v16 = (void *)*MEMORY[0x24BDDFCD8];
      v17 = (void *)*MEMORY[0x24BDDFCB8];
      *(_QWORD *)(inited + 40) = *MEMORY[0x24BDDFCD8];
      *(_QWORD *)(inited + 48) = v17;
      v18 = v15;
      v19 = v16;
      v20 = v17;
      v21 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
      swift_setDeallocating();
      type metadata accessor for NLTag(0);
      swift_arrayDestroy();
      v22 = (_QWORD *)swift_task_alloc();
      v22[2] = v21;
      v22[3] = v6;
      v22[4] = v7;
      v22[5] = v3;
      NLTagger.enumerateTags(in:unit:scheme:options:using:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      v23 = *v3;
    }
    else
    {

      v23 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v23 = swift_allocError();
    *(_QWORD *)v24 = 0xD000000000000015;
    *(_QWORD *)(v24 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v24 + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t, BOOL))(v0 + 8))(v23, v2 == 0);
}

uint64_t closure #1 in DUPosTaggingImplementation.runTypedOnRequest(request:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;

  if (a1)
  {
    v9 = a1;
    if ((specialized Set.contains(_:)((uint64_t)v9, a4) & 1) != 0)
    {
      v10 = String.subscript.getter();
      v11 = MEMORY[0x22E2AF988](v10);
      v13 = v12;
      swift_bridgeObjectRelease();
      v25 = String.distance(from:to:)();
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;
      v17 = String.count.getter();
      v18 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PosTaggingResult()), sel_init);
      v19 = (uint64_t *)&v18[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_tag];
      swift_beginAccess();
      *v19 = v14;
      v19[1] = v16;
      v20 = v18;
      swift_bridgeObjectRelease();
      v21 = (uint64_t *)&v20[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_text];
      swift_beginAccess();
      *v21 = v11;
      v21[1] = v13;
      swift_bridgeObjectRelease();
      v22 = (uint64_t *)&v20[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_start];
      swift_beginAccess();
      *v22 = v25;
      v23 = (uint64_t *)&v20[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_len];
      swift_beginAccess();
      *v23 = v17;

      MEMORY[0x22E2AFAFC]();
      if (*(_QWORD *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }

  }
  return 1;
}

uint64_t DUPosTaggingImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUPosTaggingImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUPosTaggingImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t DUPosTaggingImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUPosTaggingImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUPosTaggingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUPosTaggingSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUPosTaggingImplementation()
{
  return 0xD000000000000025;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUPosTaggingImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUPosTaggingImplementation;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NLTag>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      v7 = v6;
      String.hash(into:)();
      v8 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
            goto LABEL_3;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for Calendar.Component();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2A8]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component(&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component, MEMORY[0x24BDCF2C0]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t partial apply for closure #1 in DUPosTaggingImplementation.runTypedOnRequest(request:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in DUPosTaggingImplementation.runTypedOnRequest(request:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD **)(v3 + 40));
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUPosTaggingImplementation()
{
  return &protocol witness table for DUPosTaggingSpecification;
}

uint64_t type metadata accessor for DUPosTaggingImplementation()
{
  return objc_opt_self();
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t TableAnalysisResult.tallies.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TableAnalysisResult.tallies.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*TableAnalysisResult.tallies.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.matchesWithCommaIncluded.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t TableAnalysisResult.matchesWithCommaIncluded.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*TableAnalysisResult.matchesWithCommaIncluded.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.matchesWithCommaNotIncluded.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t TableAnalysisResult.matchesWithCommaNotIncluded.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*TableAnalysisResult.matchesWithCommaNotIncluded.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.matchesWithApostropheIncluded.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t TableAnalysisResult.matchesWithApostropheIncluded.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*TableAnalysisResult.matchesWithApostropheIncluded.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.matchesWithApostropheNotIncluded.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t TableAnalysisResult.matchesWithApostropheNotIncluded.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*TableAnalysisResult.matchesWithApostropheNotIncluded.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.acronymMatchesAllCaps.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t TableAnalysisResult.acronymMatchesAllCaps.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*TableAnalysisResult.acronymMatchesAllCaps.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.acronymMatchesNotAllCaps.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t TableAnalysisResult.acronymMatchesNotAllCaps.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*TableAnalysisResult.acronymMatchesNotAllCaps.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.questionMatchesWithQuestionMark.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t TableAnalysisResult.questionMatchesWithQuestionMark.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*TableAnalysisResult.questionMatchesWithQuestionMark.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.questionMatchesWithoutQuestionMark.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t TableAnalysisResult.questionMatchesWithoutQuestionMark.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*TableAnalysisResult.questionMatchesWithoutQuestionMark.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.exclamationsWithMark.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t TableAnalysisResult.exclamationsWithMark.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  return result;
}

uint64_t (*TableAnalysisResult.exclamationsWithMark.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t TableAnalysisResult.exclamationsWithoutMark.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t TableAnalysisResult.exclamationsWithoutMark.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = result;
  return result;
}

uint64_t (*TableAnalysisResult.exclamationsWithoutMark.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

Swift::tuple_counts_OpaquePointer_typesFound_OpaquePointer_optional __swiftcall TableAnalysisResult.columnTotals()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  void *v11;
  Swift::Bool v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::tuple_counts_OpaquePointer_typesFound_OpaquePointer_optional result;

  v1 = *v0;
  if (*v0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      v4 = *(_QWORD *)(v1 + 32);
      v3 = v1 + 32;
      v5 = (_QWORD *)specialized Array.init(repeating:count:)(0, *(_QWORD *)(v4 + 16));
      v6 = (_QWORD *)specialized Array.init(repeating:count:)(0, *(_QWORD *)(v4 + 16));
      outlined retain of TableAnalysisResult((uint64_t)v0);
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(v3 + 8 * v7);
        v9 = *(_QWORD *)(v8 + 16);
        if (v9)
          break;
LABEL_5:
        if (++v7 == v2)
        {
          outlined release of TableAnalysisResult((uint64_t)v0);
          goto LABEL_21;
        }
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        v5 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v13 = -v9;
      v14 = 4;
      while ((unint64_t)(v14 - 4) < v5[2])
      {
        v15 = *(_QWORD *)(v8 + 8 * v14);
        v16 = v5[v14];
        v17 = __OFADD__(v16, v15);
        v18 = v16 + v15;
        if (v17)
          goto LABEL_23;
        v5[v14] = v18;
        if (*(uint64_t *)(v8 + 8 * v14) >= 1)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
            v6 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          if ((unint64_t)(v14 - 4) >= v6[2])
            goto LABEL_24;
          v19 = v6[v14];
          v17 = __OFADD__(v19, 1);
          v20 = v19 + 1;
          if (v17)
            goto LABEL_25;
          v6[v14] = v20;
        }
        ++v14;
        if (v13 + v14 == 4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v5 = 0;
    v6 = 0;
LABEL_21:
    isUniquelyReferenced_nonNull_native = (uint64_t)v5;
    v11 = v6;
  }
  result.value.typesFound._rawValue = v11;
  result.value.counts._rawValue = (void *)isUniquelyReferenced_nonNull_native;
  result.is_nil = v12;
  return result;
}

uint64_t outlined retain of TableAnalysisResult(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

double TableAnalysisResult.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t default argument 1 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 2 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 3 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 4 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 5 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 6 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 7 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 8 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 9 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

uint64_t default argument 10 of TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)()
{
  return 0;
}

__n128 TableAnalysisResult.init(tallies:matchesWithCommaIncluded:matchesWithCommaNotIncluded:matchesWithApostropheIncluded:matchesWithApostropheNotIncluded:acronymMatchesAllCaps:acronymMatchesNotAllCaps:questionMatchesWithQuestionMark:questionMatchesWithoutQuestionMark:exclamationsWithMark:exclamationsWithoutMark:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11)
{
  __n128 result;

  result = a10;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4] = a10;
  a9[5].n128_u64[0] = a11;
  return result;
}

uint64_t DUReplyEquivalenceTable.languageCode.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUReplyEquivalenceTable.isLockable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t DUReplyEquivalenceTable.isLockedByDefault.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t DUReplyEquivalenceTable.questionRows.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUReplyEquivalenceTable.exclamationRows.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUReplyEquivalenceTable.acronymColumns.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUReplyEquivalenceTable.replyTable.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUReplyEquivalenceTable.defaultColumn.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t DUReplyEquivalenceTable.regexTable.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall DUReplyEquivalenceTable.init(languageCode:isLockable:isLockedByDefault:questionRows:exclamationRows:acronymColumns:replyTable:defaultColumn:stringReplacements:)(DocumentUnderstanding::DUReplyEquivalenceTable_optional *__return_ptr retstr, Swift::String languageCode, Swift::Bool isLockable, Swift::Bool isLockedByDefault, Swift::OpaquePointer questionRows, Swift::OpaquePointer exclamationRows, Swift::OpaquePointer acronymColumns, Swift::OpaquePointer replyTable, Swift::Int defaultColumn, Swift::OpaquePointer stringReplacements)
{
  _QWORD v11[9];

  specialized DUReplyEquivalenceTable.init(languageCode:isLockable:isLockedByDefault:questionRows:exclamationRows:acronymColumns:replyTable:defaultColumn:stringReplacements:)(languageCode._countAndFlagsBits, (uint64_t)languageCode._object, isLockable, isLockedByDefault, (uint64_t)questionRows._rawValue, (uint64_t)exclamationRows._rawValue, (uint64_t)acronymColumns._rawValue, (uint64_t)replyTable._rawValue, v11, defaultColumn, (uint64_t)stringReplacements._rawValue);
  outlined init with take of DUReplyEquivalenceTable?((uint64_t)v11, (uint64_t)retstr);
}

void DUReplyEquivalenceTable.analyze(outgoingMessages:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  void *v34;
  objc_class *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v2;
    v6 = *(_QWORD *)(v3 + 32);
    v61 = v3 + 32;
    v62 = *(_QWORD *)(v3 + 16);
    if (v6 >> 62)
      goto LABEL_106;
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    v8 = 0;
    v9 = 0;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    v88 = 0;
    v10 = 0;
    v71 = 0;
    v72 = 0;
    v77 = 0;
    v78 = 0;
    v11 = 0;
    v80 = 0;
    v63 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v67 = v7;
    while (1)
    {
      if (v8 == v4)
        goto LABEL_104;
      v76 = v9;
      if (v7)
        break;
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_81:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
      v9 = v76;
      v4 = v62;
      v52 = v63[2];
      v51 = v63[3];
      if (v52 >= v51 >> 1)
      {
        v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v63);
        v4 = v62;
        v9 = v76;
        v63 = v53;
      }
      ++v8;
      v63[2] = v52 + 1;
      v63[v52 + 4] = v15;
      if (v8 == v4)
      {
LABEL_92:
        v58 = v74;
        v4 = v75;
        v55 = v72;
        v57 = v73;
        v54 = v71;
        v59 = (uint64_t)v63;
        v56 = v88;
        goto LABEL_88;
      }
    }
    v12 = *(_QWORD *)(v5 + 48);
    if (v8 >= *(_QWORD *)(v12 + 16))
      goto LABEL_105;
    v13 = 0;
    v83 = *(_QWORD *)(a1 + 16);
    v14 = *(_QWORD *)(v61 + 8 * v8);
    v68 = *(_QWORD *)(v12 + 8 * v8 + 32);
    v69 = v14 & 0xC000000000000001;
    v65 = v14 & 0xFFFFFFFFFFFFFF8;
    v66 = v14;
    v64 = v14 + 32;
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v79 = v8;
    while (1)
    {
      v81 = v13;
      if (v13 == v7)
        goto LABEL_101;
      if (v69)
      {
        swift_bridgeObjectRetain();
        v16 = v13;
        v85 = (id)MEMORY[0x22E2AFF34](v13, v66);
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = v13;
        if (v13 >= *(_QWORD *)(v65 + 16))
          goto LABEL_103;
        v85 = *(id *)(v64 + 8 * v13);
      }
      if (v16 >= *(_QWORD *)(v68 + 16))
        goto LABEL_102;
      if (v83)
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v43 = 0;
      v19 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
LABEL_79:
        v47 = v43;
        v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        v43 = v47;
        v15 = v48;
      }
LABEL_74:
      v45 = v15[2];
      v44 = v15[3];
      v11 = v19;
      if (v45 >= v44 >> 1)
      {
        v49 = v43;
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v15);
        v43 = v49;
        v15 = v50;
      }
      v13 = v81 + 1;
      v15[2] = v45 + 1;
      v15[v45 + 4] = v43;

      v7 = v67;
      if (v81 + 1 == v67)
        goto LABEL_81;
    }
    v17 = (uint64_t *)(v68 + 32 + 16 * v13);
    v82 = *v17;
    v84 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v86 = 0;
    v18 = 0;
    v19 = v11;
    while (1)
    {
      v20 = (uint64_t *)(a1 + 32 + 16 * v18);
      v22 = *v20;
      v21 = v20[1];
      swift_bridgeObjectRetain();
      v23 = (void *)MEMORY[0x22E2AF8EC](v22, v21);
      v24 = objc_msgSend(v85, sel_numberOfMatchesInString_options_range_, v23, 0, 0, String.count.getter());

      if (!v24)
        goto LABEL_18;
      if (__OFADD__(v86, 1))
      {
        __break(1u);
        goto LABEL_90;
      }
      v25 = *(_QWORD **)(v5 + 24);
      v9 = v25[2];
      ++v86;
      if (v9)
      {
        if (v25[4] == v8)
          goto LABEL_24;
        if (v9 != 1)
        {
          if (v25[5] == v8)
          {
LABEL_24:
            lazy protocol witness table accessor for type String and conformance String();
            if ((StringProtocol.contains<A>(_:)() & 1) != 0)
            {
              v26 = __OFADD__(v75++, 1);
              v27 = v81;
              if (v26)
                goto LABEL_97;
            }
            else
            {
              v27 = v81;
              if (__OFADD__(v76, 1))
                goto LABEL_96;
              ++v76;
            }
            goto LABEL_32;
          }
          if (v9 != 2)
          {
            v40 = 6;
            while (1)
            {
              v41 = v40 - 3;
              if (__OFADD__(v40 - 4, 1))
                break;
              if (v25[v40] == v8)
                goto LABEL_24;
              ++v40;
              if (v41 == v9)
                goto LABEL_29;
            }
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
        }
      }
LABEL_29:
      v27 = v81;
LABEL_32:
      v28 = *(_QWORD **)(v5 + 40);
      v9 = v28[2];
      if (!v9)
        goto LABEL_47;
      if (v28[4] == v27)
        goto LABEL_34;
      if (v9 == 1)
        goto LABEL_47;
      if (v28[5] == v27)
      {
LABEL_34:
        if (String.hasAcronym()())
        {
          v26 = __OFADD__(v73++, 1);
          if (v26)
            goto LABEL_98;
        }
        else
        {
          v26 = __OFADD__(v74++, 1);
          if (v26)
            goto LABEL_99;
        }
      }
      else if (v9 != 2)
      {
        v29 = 6;
        do
        {
          v30 = v29 - 3;
          if (__OFADD__(v29 - 4, 1))
            goto LABEL_91;
          if (v28[v29] == v27)
            goto LABEL_34;
          ++v29;
        }
        while (v30 != v9);
      }
LABEL_47:
      v87 = v10;
      v31 = v88;
      if (one-time initialization token for apostropheRegex != -1)
        swift_once();
      if (apostropheRegex.value.super.isa)
      {
        v32 = v5;
        v33 = apostropheRegex.value.super.isa;
        v34 = (void *)MEMORY[0x22E2AF8EC](v82, v84);
        v5 = (uint64_t)-[objc_class numberOfMatchesInString:options:range:](v33, sel_numberOfMatchesInString_options_range_, v34, 0, 0, String.count.getter());

        if (v5 >= 1)
        {
          if (apostropheRegex.value.super.isa
            && (v35 = apostropheRegex.value.super.isa,
                v5 = MEMORY[0x22E2AF8EC](v22, v21),
                v36 = (uint64_t)-[objc_class numberOfMatchesInString:options:range:](v35, sel_numberOfMatchesInString_options_range_, v5, 0, 0, String.count.getter()), v35, (id)v5, v36 >= 1))
          {
            v87 = v80 + 1;
            if (__OFADD__(v80, 1))
              goto LABEL_100;
          }
          else
          {
            v31 = v19 + 1;
            if (__OFADD__(v19, 1))
              goto LABEL_95;
          }
        }
      }
      else
      {
        v32 = v5;
      }
      v5 = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v37 = StringProtocol.contains<A>(_:)();
      v38 = v31;
      v10 = v87;
      v88 = v38;
      if ((v37 & 1) == 0)
      {
        v19 = v38;
        v80 = v87;
        v5 = v32;
        v8 = v79;
LABEL_18:
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      v39 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) != 0)
      {
        if (__OFADD__(v77, 1))
          goto LABEL_94;
        v5 = v32;
        v71 = ++v77;
      }
      else
      {
        if (__OFADD__(v78, 1))
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          swift_bridgeObjectRetain();
          v7 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v7 < 0)
            __break(1u);
          v4 = v62;
          goto LABEL_4;
        }
        v5 = v32;
        v72 = ++v78;
      }
      v19 = v88;
      v80 = v87;
      v8 = v79;
LABEL_19:
      if (++v18 == v83)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v42 = swift_isUniquelyReferenced_nonNull_native();
        v43 = v86;
        if ((v42 & 1) == 0)
          goto LABEL_79;
        goto LABEL_74;
      }
    }
  }
  v54 = 0;
  v55 = 0;
  v10 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v9 = 0;
  v59 = 1;
LABEL_88:
  *a2 = v59;
  a2[1] = v54;
  a2[2] = v55;
  a2[3] = v10;
  a2[4] = v56;
  a2[5] = v57;
  a2[6] = v58;
  a2[7] = v4;
  a2[9] = 0;
  a2[10] = 0;
  a2[8] = v9;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t outlined release of TableAnalysisResult(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x22E2AFF40);
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void specialized DUReplyEquivalenceTable.init(languageCode:isLockable:isLockedByDefault:questionRows:exclamationRows:acronymColumns:replyTable:defaultColumn:stringReplacements:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v16;
  char v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  unint64_t v56;
  int64_t v57;
  Swift::String v58;
  Swift::String v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v13 = a1;
  if (a1 != 28261 || a2 != 0xE200000000000000)
  {
    v16 = a2;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v13 = a1;
    a2 = v16;
    if ((v18 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v27 = 0;
      v75 = 0;
      v76 = 0;
      a8 = 0;
      v77 = 0;
      v78 = 0;
      goto LABEL_68;
    }
  }
  v84 = v13;
  v88 = a9;
  v89 = a5;
  v19 = *(_QWORD *)(a8 + 16);
  v87 = a2;
  if (v19)
  {
    v98 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    v20 = v98;
    v21 = a8 + 32;
    v22 = *(_QWORD *)(v98 + 16);
    do
    {
      v23 = *(_QWORD *)(*(_QWORD *)v21 + 16);
      v24 = *(_QWORD *)(v98 + 24);
      if (v22 >= v24 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v22 + 1, 1);
      *(_QWORD *)(v98 + 16) = v22 + 1;
      *(_QWORD *)(v98 + 8 * v22 + 32) = v23;
      v21 += 8;
      ++v22;
      --v19;
    }
    while (v19);
  }
  else
  {
    swift_bridgeObjectRetain();
    v20 = MEMORY[0x24BEE4AF8];
  }
  v25 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v25 + 16);
  swift_bridgeObjectRelease();
  if (v26 != 1)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  v27 = v89;
  v81 = *(_QWORD *)(a8 + 16);
  if (!v81)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v75 = a6;
    swift_bridgeObjectRetain();
    v76 = a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v78 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_61:
    v77 = a10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v73 = v87;
    v79 = 256;
    if ((a4 & 1) == 0)
      v79 = 0;
    v74 = v79 & 0xFFFFFFFFFFFFFFFELL | a3 & 1;
    a9 = v88;
    v72 = v84;
    goto LABEL_68;
  }
  v82 = a8 + 32;
  v97 = a11 + 64;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = 0;
  v29 = MEMORY[0x24BEE4AF8];
  v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v92 = a8;
  while (1)
  {
    if (v28 >= *(_QWORD *)(a8 + 16))
    {
LABEL_73:
      __break(1u);
      return;
    }
    v83 = v28;
    v31 = *(_QWORD *)(v82 + 8 * v28);
    v99 = v29;
    v94 = *(_QWORD *)(v31 + 16);
    if (v94)
      break;
    v66 = v29;
LABEL_51:
    v67 = v30;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v30 = v67;
    else
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
    v69 = v30[2];
    v68 = v30[3];
    v70 = v83;
    v29 = MEMORY[0x24BEE4AF8];
    if (v69 >= v68 >> 1)
    {
      v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v30);
      v29 = MEMORY[0x24BEE4AF8];
      v70 = v83;
      v30 = v71;
    }
    v28 = v70 + 1;
    v30[2] = v69 + 1;
    v30[v69 + 4] = v66;
    if (v28 == v81)
    {
LABEL_70:
      v78 = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v89;
      v76 = a7;
      v75 = a6;
      goto LABEL_61;
    }
  }
  v80 = v30;
  v95 = v31 + 32;
  swift_bridgeObjectRetain();
  v32 = 0;
  v93 = v31;
LABEL_19:
  if (v32 >= *(_QWORD *)(v31 + 16))
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v33 = (uint64_t *)(v95 + 16 * v32);
  v35 = *v33;
  v34 = v33[1];
  v36 = one-time initialization token for apostropheRegex;
  swift_bridgeObjectRetain();
  if (v36 != -1)
    swift_once();
  if (apostropheRegex.value.super.isa)
  {
    v96 = v32 + 1;
    v37 = apostropheRegex.value.super.isa;
    v38 = (void *)MEMORY[0x22E2AF8EC](v35, v34);
    v39 = String.count.getter();
    v40 = (void *)MEMORY[0x22E2AF8EC](0x5D9980E2BCCA275BLL, 0xA90000000000003FLL);
    v41 = -[objc_class stringByReplacingMatchesInString:options:range:withTemplate:](v37, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v38, 0, 0, v39, v40);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    a8 = v42;
    swift_bridgeObjectRelease();

    lazy protocol witness table accessor for type String and conformance String();
    v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v45 = v44;
    swift_bridgeObjectRelease();
    v46 = 1 << *(_BYTE *)(a11 + 32);
    if (v46 < 64)
      v47 = ~(-1 << v46);
    else
      v47 = -1;
    v48 = v47 & *(_QWORD *)(a11 + 64);
    v49 = (unint64_t)(v46 + 63) >> 6;
    swift_bridgeObjectRetain();
    v50 = 0;
    while (1)
    {
      if (v48)
      {
        v51 = __clz(__rbit64(v48));
        v48 &= v48 - 1;
        v52 = v51 | (v50 << 6);
      }
      else
      {
        if (__OFADD__(v50++, 1))
        {
          __break(1u);
          goto LABEL_70;
        }
        if (v50 >= v49)
        {
LABEL_45:
          a8 = v92;
          v32 = v96;
          swift_release();
          v58._countAndFlagsBits = v43;
          v58._object = v45;
          String.append(_:)(v58);
          swift_bridgeObjectRelease();
          v59._countAndFlagsBits = 606754652;
          v59._object = (void *)0xE400000000000000;
          String.append(_:)(v59);
          v60 = objc_allocWithZone(MEMORY[0x24BDD1798]);
          v61 = @nonobjc NSRegularExpression.init(pattern:options:)(710368350, 0xE400000000000000, 17);
          if (!v61)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_66;
          }
          v62 = v61;
          MEMORY[0x22E2AFAFC](v62, v63, v64, v65);
          if (*(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          v31 = v93;
          if (v96 == v94)
          {
            swift_bridgeObjectRelease();
            v66 = v99;
            v30 = v80;
            goto LABEL_51;
          }
          goto LABEL_19;
        }
        v56 = *(_QWORD *)(v97 + 8 * v50);
        if (!v56)
        {
          v57 = v50 + 1;
          if (v50 + 1 >= v49)
            goto LABEL_45;
          v56 = *(_QWORD *)(v97 + 8 * v57);
          if (!v56)
          {
            v57 = v50 + 2;
            if (v50 + 2 >= v49)
              goto LABEL_45;
            v56 = *(_QWORD *)(v97 + 8 * v57);
            if (!v56)
            {
              v57 = v50 + 3;
              if (v50 + 3 >= v49)
                goto LABEL_45;
              v56 = *(_QWORD *)(v97 + 8 * v57);
              if (!v56)
              {
                while (1)
                {
                  v50 = v57 + 1;
                  if (__OFADD__(v57, 1))
                    break;
                  if (v50 >= v49)
                    goto LABEL_45;
                  v56 = *(_QWORD *)(v97 + 8 * v50);
                  ++v57;
                  if (v56)
                    goto LABEL_40;
                }
                __break(1u);
                goto LABEL_72;
              }
            }
          }
          v50 = v57;
        }
LABEL_40:
        v48 = (v56 - 1) & v56;
        v52 = __clz(__rbit64(v56)) + (v50 << 6);
      }
      a8 = *(_QWORD *)(*(_QWORD *)(a11 + 48) + 16 * v52 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v54 = v53;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45 = v54;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_66:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_67:
  swift_bridgeObjectRelease();
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v27 = 0;
  v75 = 0;
  v76 = 0;
  a8 = 0;
  v77 = 0;
  v78 = 0;
  a9 = v88;
LABEL_68:
  *a9 = v72;
  a9[1] = v73;
  a9[2] = v74;
  a9[3] = v27;
  a9[4] = v75;
  a9[5] = v76;
  a9[6] = a8;
  a9[7] = v77;
  a9[8] = v78;
}

uint64_t outlined init with take of DUReplyEquivalenceTable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUReplyEquivalenceTable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for TableAnalysisResult()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableAnalysisResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TableAnalysisResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

uint64_t assignWithTake for TableAnalysisResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableAnalysisResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableAnalysisResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TableAnalysisResult()
{
  return &type metadata for TableAnalysisResult;
}

uint64_t destroy for DUReplyEquivalenceTable()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DUReplyEquivalenceTable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DUReplyEquivalenceTable(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for DUReplyEquivalenceTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DUReplyEquivalenceTable(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DUReplyEquivalenceTable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DUReplyEquivalenceTable()
{
  return &type metadata for DUReplyEquivalenceTable;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  v1 = MEMORY[0x24BEE4AF8];
  a1[4] = MEMORY[0x24BEE4AF8];
  a1[5] = v1;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  a1[8] = 0;
  a1[9] = 0xE000000000000000;
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.conversationIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.conversationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.conversationIdentifier.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.creatorHandle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.creatorHandle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.creatorHandle.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientHandles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientHandles.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientHandles.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.recipientNames.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFileName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFileName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFileName.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFilePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFilePath.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.attachmentFilePath.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData() + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData() + 40);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.protoMessageName.getter()
{
  return 0xD000000000000042;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    v5 = v0[3];
    v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    if (!v6 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_QWORD *)(v0[4] + 16)
        || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(_QWORD *)(v0[5] + 16)
          || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
        {
          v7 = v0[7];
          v8 = HIBYTE(v7) & 0xF;
          if ((v7 & 0x2000000000000000) == 0)
            v8 = v0[6] & 0xFFFFFFFFFFFFLL;
          if (!v8 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            v9 = v0[9];
            v10 = HIBYTE(v9) & 0xF;
            if ((v9 & 0x2000000000000000) == 0)
              v10 = v0[8] & 0xFFFFFFFFFFFFLL;
            if (!v10 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  v1 = MEMORY[0x24BEE4AF8];
  a1[4] = MEMORY[0x24BEE4AF8];
  a1[5] = v1;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  a1[8] = 0;
  a1[9] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return 0xD000000000000042;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_DocumentRepresentation_DocumentMessageData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v11 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v13 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v13 || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 32), *(_QWORD **)(a2 + 32)) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 40), *(_QWORD **)(a2 + 40)) & 1) != 0)
      {
        if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
          || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64) && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72)
            || (v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            v14 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
            v15 = a1 + *(int *)(v14 + 40);
            v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v16(v10, v15, v4);
            v16(v8, a2 + *(int *)(v14 + 40), v4);
            lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
            v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            v17 = *(void (**)(char *, uint64_t))(v5 + 8);
            v17(v8, v4);
            v17(v10, v4);
          }
        }
      }
      else
      {
        v12 = 0;
      }
    }
  }
  return v12 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentMessageData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v16;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    v9 = a2[9];
    v10 = *(int *)(a3 + 40);
    v16 = (char *)a2 + v10;
    v11 = (char *)a1 + v10;
    a1[8] = a2[8];
    a1[9] = v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v16, v12);
  }
  return v3;
}

uint64_t destroy for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  v9 = *(int *)(a3 + 40);
  v14 = (char *)a2 + v9;
  v10 = (char *)a1 + v9;
  a1[8] = a2[8];
  a1[9] = v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v14, v11);
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 40);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 40);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_228382F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_228382FFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL DocumentUnderstanding_TopicSetIdentifier.TopicSetName.rawValue.getter(_BOOL8 result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.init()@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for DocumentUnderstanding_TopicSetIdentifier()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_TopicSetIdentifier;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_TopicSetIdentifier)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.topicSetName.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.topicSetName.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*DocumentUnderstanding_TopicSetIdentifier.topicSetName.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.topicSetVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.topicSetVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*DocumentUnderstanding_TopicSetIdentifier.topicSetVersion.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_TopicSetIdentifier() + 24);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_TopicSetIdentifier() + 24);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_TopicSetIdentifier.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.TopicSetName.init()()
{
  return 0;
}

void protocol witness for Enum.init() in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

void one-time initialization function for allCases()
{
  static DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static DocumentUnderstanding_ClientInterface_TaggedCharacterRange.TaggedCharacterRangeAnnotationType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static DocumentUnderstanding_ClientInterface_FoundInEventResult.FoundInEventResultError.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t *DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases.unsafeMutableAddressor()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  return &static DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases;
}

uint64_t static DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases.getter()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  static DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases.modify())()
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName@<X0>(_QWORD *a1@<X8>)
{
  if (one-time initialization token for allCases != -1)
    swift_once();
  swift_beginAccess();
  *a1 = static DocumentUnderstanding_TopicSetIdentifier.TopicSetName.allCases;
  return swift_bridgeObjectRetain();
}

void *DocumentUnderstanding_TopicSetIdentifier.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_TopicSetIdentifier.protoMessageName;
}

unint64_t static DocumentUnderstanding_TopicSetIdentifier.protoMessageName.getter()
{
  return 0xD000000000000029;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_TopicSetIdentifier._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier._protobuf_nameMap, a1);
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      else if (result == 1)
      {
        lazy protocol witness table accessor for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0
    || (lazy protocol witness table accessor for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName(),
        result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!v0[2] || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier.TopicSetName, &type metadata for DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier.TopicSetName, &type metadata for DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier.TopicSetName, &type metadata for DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier.TopicSetName, &type metadata for DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier.TopicSetName and conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName);
  }
  return result;
}

Swift::Int DocumentUnderstanding_TopicSetIdentifier.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_TopicSetIdentifier@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_TopicSetIdentifier()
{
  return 0xD000000000000029;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_TopicSetIdentifier()
{
  return DocumentUnderstanding_TopicSetIdentifier.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_TopicSetIdentifier()
{
  return DocumentUnderstanding_TopicSetIdentifier.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_TopicSetIdentifier()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_TopicSetIdentifier@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_TopicSetIdentifier()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_TopicSetIdentifier()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
  return Message.hash(into:)();
}

uint64_t DocumentUnderstanding_TopicSetIdentifier.TopicSetName._protobuf_nameMap.unsafeMutableAddressor()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.unsafeMutableAddressor(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier.TopicSetName._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_TopicSetIdentifier.TopicSetName._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return static DocumentUnderstanding_ClientInterface_StructuredEntity._protobuf_nameMap.getter(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier.TopicSetName._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_TopicSetIdentifier.TopicSetName@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&one-time initialization token for _protobuf_nameMap, (uint64_t)static DocumentUnderstanding_TopicSetIdentifier.TopicSetName._protobuf_nameMap, a1);
}

uint64_t specialized static DocumentUnderstanding_TopicSetIdentifier.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  v11 = *a1;
  v12 = *a2;
  if (*((_BYTE *)a1 + 8))
    v11 = *a1 != 0;
  if (*((_BYTE *)a2 + 8) != 1)
  {
    if (v11 == v12)
      goto LABEL_10;
LABEL_12:
    v16 = 0;
    return v16 & 1;
  }
  if (!v12)
  {
    if (!v11)
      goto LABEL_10;
    goto LABEL_12;
  }
  if (v11 != 1)
    goto LABEL_12;
LABEL_10:
  if (a1[2] != a2[2])
    goto LABEL_12;
  v13 = type metadata accessor for DocumentUnderstanding_TopicSetIdentifier();
  v14 = (uint64_t)a1 + *(int *)(v13 + 24);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v10, v14, v4);
  v15(v8, (uint64_t)a2 + *(int *)(v13 + 24), v4);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

unint64_t lazy protocol witness table accessor for type [DocumentUnderstanding_TopicSetIdentifier.TopicSetName] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DocumentUnderstanding_TopicSetIdentifier.TopicSetName] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DocumentUnderstanding_TopicSetIdentifier.TopicSetName] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentUnderstanding_TopicSetIdentifier.TopicSetName]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentUnderstanding_TopicSetIdentifier.TopicSetName] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_TopicSetIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_TopicSetIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_TopicSetIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_TopicSetIdentifier()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_TopicSetIdentifier and conformance DocumentUnderstanding_TopicSetIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_TopicSetIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_TopicSetIdentifier);
}

_QWORD *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t initializeWithCopy for DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_TopicSetIdentifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_TopicSetIdentifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_228384398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_TopicSetIdentifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283843E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DocumentUnderstanding_TopicSetIdentifier()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_TopicSetIdentifier.TopicSetName(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_TopicSetIdentifier.TopicSetName(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for DocumentUnderstanding_TopicSetIdentifier.TopicSetName(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for DocumentUnderstanding_TopicSetIdentifier.TopicSetName(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentUnderstanding_TopicSetIdentifier.TopicSetName()
{
  return &type metadata for DocumentUnderstanding_TopicSetIdentifier.TopicSetName;
}

double FoundInEventModelOutput.init(plainText:dataDetectorMatches:modelSequenceOutput:modelTokenOutput:tokenizerOutput:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[5];
  uint64_t v12;

  specialized FoundInEventModelOutput.init(plainText:dataDetectorMatches:modelSequenceOutput:modelTokenOutput:tokenizerOutput:)(a1, a2, a3, a4, a5, a6, v11);
  v8 = v11[3];
  *(_OWORD *)(a7 + 32) = v11[2];
  *(_OWORD *)(a7 + 48) = v8;
  *(_OWORD *)(a7 + 64) = v11[4];
  *(_QWORD *)(a7 + 80) = v12;
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a7 = v11[0];
  *(_OWORD *)(a7 + 16) = v10;
  return result;
}

uint64_t FoundInEventModelOutput.plainText.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventModelOutput.plainText.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FoundInEventModelOutput.plainText.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventModelOutput.dataDetectorMatches.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FoundInEventModelOutput.dataDetectorMatches.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*FoundInEventModelOutput.dataDetectorMatches.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventModelOutput.modelSequenceOutput.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FoundInEventModelOutput.modelSequenceOutput.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*FoundInEventModelOutput.modelSequenceOutput.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventModelOutput.modelTokenOutput.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FoundInEventModelOutput.modelTokenOutput.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*FoundInEventModelOutput.modelTokenOutput.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventModelOutput.tokenizerOutput.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[5];
  v3 = v1[6];
  v4 = v1[7];
  v5 = v1[8];
  v6 = v1[9];
  v7 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 FoundInEventModelOutput.tokenizerOutput.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __n128 result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 56) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 72) = result;
  return result;
}

uint64_t (*FoundInEventModelOutput.tokenizerOutput.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventModelOutput.smoothModelTokenOutput(modelTokenOutput:tokenizerOutput:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2[1];
  v11 = *a2;
  v4 = a2[3];
  v9 = a2[2];
  v10 = v3;
  v8 = v4;
  v7 = *((_OWORD *)a2 + 2);
  outlined retain of TableAnalysisResult((uint64_t)&v11);
  outlined retain of TableAnalysisResult((uint64_t)&v10);
  outlined retain of TableAnalysisResult((uint64_t)&v9);
  outlined retain of TableAnalysisResult((uint64_t)&v8);
  outlined retain of String((uint64_t)&v7);
  v5 = specialized _NativeDictionary.mapValues<A>(_:)(a1, v4);
  outlined release of TableAnalysisResult((uint64_t)&v11);
  outlined release of TableAnalysisResult((uint64_t)&v10);
  outlined release of TableAnalysisResult((uint64_t)&v9);
  outlined release of TableAnalysisResult((uint64_t)&v8);
  outlined release of String((uint64_t)&v7);
  return v5;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  result = static _DictionaryStorage.copy(original:)();
  v5 = (_QWORD *)result;
  v6 = 0;
  v40 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v37 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v38 = (unint64_t)(v8 + 63) >> 6;
  v48 = a2 + 32;
  v39 = result + 64;
  v35 = (_QWORD *)result;
  v36 = a2;
  if ((v9 & v7) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v6 << 6); ; i = __clz(__rbit64(v14)) + (v6 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(_QWORD **)(*(_QWORD *)(v40 + 56) + 8 * i);
    v20 = *(_QWORD *)(a2 + 16);
    if (v20)
      break;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
LABEL_38:
    *(_QWORD *)(v39 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v31 = (_QWORD *)(v5[6] + 16 * i);
    *v31 = v18;
    v31[1] = v17;
    *(_QWORD *)(v5[7] + 8 * i) = v19;
    v32 = v5[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_44;
    v5[2] = v34;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_45;
    if (v13 >= v38)
      return (uint64_t)v5;
    v14 = *(_QWORD *)(v37 + 8 * v13);
    ++v6;
    if (!v14)
    {
      v6 = v13 + 1;
      if (v13 + 1 >= v38)
        return (uint64_t)v5;
      v14 = *(_QWORD *)(v37 + 8 * v6);
      if (!v14)
      {
        v6 = v13 + 2;
        if (v13 + 2 >= v38)
          return (uint64_t)v5;
        v14 = *(_QWORD *)(v37 + 8 * v6);
        if (!v14)
        {
          v15 = v13 + 3;
          if (v15 >= v38)
            return (uint64_t)v5;
          v14 = *(_QWORD *)(v37 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              v6 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_46;
              if (v6 >= v38)
                return (uint64_t)v5;
              v14 = *(_QWORD *)(v37 + 8 * v6);
              ++v15;
              if (v14)
                goto LABEL_18;
            }
          }
          v6 = v15;
        }
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v41 = *v16;
  v43 = i;
  v44 = v10;
  v45 = v6;
  swift_bridgeObjectRetain_n();
  v42 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = 0;
  v22 = 0xE400000000000000;
  v23 = -1;
  v24 = 4;
  v25 = 1162760014;
  v26 = v19;
  v46 = v20;
  v47 = v19;
  while (1)
  {
    if (!v21)
      goto LABEL_23;
    v28 = *(_QWORD *)(v48 + 8 * v21);
    if (v28 == -1)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a2 = v36;
      result = swift_bridgeObjectRelease();
      v19 = v26;
      v5 = v35;
      v10 = v44;
      v6 = v45;
      v17 = v42;
      i = v43;
      v18 = v41;
      goto LABEL_38;
    }
    if (v28 != v23)
    {
      result = swift_bridgeObjectRelease();
      if (v21 >= v19[2])
        goto LABEL_42;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v22 = v29;
      swift_bridgeObjectRelease();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
        v26 = (_QWORD *)result;
      }
      v20 = v46;
      v19 = v47;
      if (v21 >= v26[2])
        goto LABEL_43;
      v30 = &v26[v24];
      *v30 = v25;
      v30[1] = v22;
      swift_bridgeObjectRetain();
      v23 = v28;
      goto LABEL_22;
    }
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
      v26 = (_QWORD *)result;
    }
    if (v21 >= v26[2])
      break;
    v27 = &v26[v24];
    *v27 = v25;
    v27[1] = v22;
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    ++v21;
    v24 += 2;
    if (v20 == v21)
      goto LABEL_36;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized FoundInEventModelOutput.init(plainText:dataDetectorMatches:modelSequenceOutput:modelTokenOutput:tokenizerOutput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v11 = *a6;
  v13 = a6[2];
  v14 = a6[3];
  v15 = a6[5];
  v21 = a6[4];
  v25 = a6[1];
  v12 = v25;
  v26 = v11;
  v23 = v14;
  v24 = v13;
  v22 = *((_OWORD *)a6 + 2);
  outlined retain of TableAnalysisResult((uint64_t)&v26);
  outlined retain of TableAnalysisResult((uint64_t)&v25);
  outlined retain of TableAnalysisResult((uint64_t)&v24);
  outlined retain of TableAnalysisResult((uint64_t)&v23);
  outlined retain of String((uint64_t)&v22);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v16 = a4;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = specialized _NativeDictionary.mapValues<A>(_:)(a5, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined release of TableAnalysisResult((uint64_t)&v26);
  outlined release of TableAnalysisResult((uint64_t)&v25);
  outlined release of TableAnalysisResult((uint64_t)&v24);
  outlined release of TableAnalysisResult((uint64_t)&v23);
  outlined release of String((uint64_t)&v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  result = swift_bridgeObjectRelease_n();
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = v16;
  a7[4] = v17;
  a7[5] = v11;
  a7[6] = v12;
  a7[7] = v13;
  a7[8] = v14;
  a7[9] = v21;
  a7[10] = v15;
  return result;
}

uint64_t outlined retain of String(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of String(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for FoundInEventModelOutput()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FoundInEventModelOutput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FoundInEventModelOutput(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FoundInEventModelOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FoundInEventModelOutput(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FoundInEventModelOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FoundInEventModelOutput()
{
  return &type metadata for FoundInEventModelOutput;
}

Swift::OpaquePointer *allSpecifications.unsafeMutableAddressor()
{
  if (one-time initialization token for allSpecifications != -1)
    swift_once();
  return &allSpecifications;
}

Swift::OpaquePointer *allImplementations.unsafeMutableAddressor()
{
  if (one-time initialization token for allImplementations != -1)
    swift_once();
  return &allImplementations;
}

Swift::OpaquePointer *allTopLevelSpecifications.unsafeMutableAddressor()
{
  if (one-time initialization token for allTopLevelSpecifications != -1)
    swift_once();
  return &allTopLevelSpecifications;
}

uint64_t one-time initialization function for allSpecifications()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUProcessingPhaseSpecification>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2284C4F70;
  v1 = type metadata accessor for DUBackboneEncodingSmolBERToSpecification();
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = &protocol witness table for DUBackboneEncodingSmolBERToSpecification;
  *(_QWORD *)(v0 + 32) = v2;
  v3 = type metadata accessor for DUTopicEncodingSmolBERToSpecification();
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = &protocol witness table for DUTopicEncodingSmolBERToSpecification;
  *(_QWORD *)(v0 + 72) = v4;
  v5 = type metadata accessor for DUFoundInEventEncodingSmolBERToSpecification();
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 136) = v5;
  *(_QWORD *)(v0 + 144) = &protocol witness table for DUFoundInEventEncodingSmolBERToSpecification;
  *(_QWORD *)(v0 + 112) = v6;
  v7 = type metadata accessor for DUWikipediaTopicDetectionSpecification();
  v8 = swift_allocObject();
  *(_QWORD *)(v0 + 176) = v7;
  *(_QWORD *)(v0 + 184) = &protocol witness table for DUWikipediaTopicDetectionSpecification;
  *(_QWORD *)(v0 + 152) = v8;
  v9 = type metadata accessor for DUConcatenatedDocumentTextSpecification();
  v10 = swift_allocObject();
  *(_QWORD *)(v0 + 216) = v9;
  *(_QWORD *)(v0 + 224) = &protocol witness table for DUConcatenatedDocumentTextSpecification;
  *(_QWORD *)(v0 + 192) = v10;
  v11 = type metadata accessor for DULanguageTaggingSpecification();
  v12 = swift_allocObject();
  *(_QWORD *)(v0 + 256) = v11;
  *(_QWORD *)(v0 + 264) = &protocol witness table for DULanguageTaggingSpecification;
  *(_QWORD *)(v0 + 232) = v12;
  v13 = type metadata accessor for DUStructuredExtractionSpecification();
  v14 = swift_allocObject();
  *(_QWORD *)(v0 + 296) = v13;
  *(_QWORD *)(v0 + 304) = &protocol witness table for DUStructuredExtractionSpecification;
  *(_QWORD *)(v0 + 272) = v14;
  v15 = type metadata accessor for DUUserInterfaceUnderstandingSpecification();
  v16 = swift_allocObject();
  *(_QWORD *)(v0 + 336) = v15;
  *(_QWORD *)(v0 + 344) = &protocol witness table for DUUserInterfaceUnderstandingSpecification;
  *(_QWORD *)(v0 + 312) = v16;
  v17 = type metadata accessor for DUCreateContextRequestSpecification();
  v18 = swift_allocObject();
  *(_QWORD *)(v0 + 376) = v17;
  *(_QWORD *)(v0 + 384) = &protocol witness table for DUCreateContextRequestSpecification;
  *(_QWORD *)(v0 + 352) = v18;
  v19 = type metadata accessor for DUCategoryClassificationSpecification();
  v20 = swift_allocObject();
  *(_QWORD *)(v0 + 416) = v19;
  *(_QWORD *)(v0 + 424) = &protocol witness table for DUCategoryClassificationSpecification;
  *(_QWORD *)(v0 + 392) = v20;
  v21 = type metadata accessor for DUPoemSpecification();
  v22 = swift_allocObject();
  *(_QWORD *)(v0 + 456) = v21;
  *(_QWORD *)(v0 + 464) = &protocol witness table for DUPoemSpecification;
  *(_QWORD *)(v0 + 432) = v22;
  v23 = type metadata accessor for DUPosTaggingSpecification();
  v24 = swift_allocObject();
  *(_QWORD *)(v0 + 496) = v23;
  *(_QWORD *)(v0 + 504) = &protocol witness table for DUPosTaggingSpecification;
  *(_QWORD *)(v0 + 472) = v24;
  v25 = type metadata accessor for DUFoundInEventSpecification();
  v26 = swift_allocObject();
  *(_QWORD *)(v0 + 536) = v25;
  *(_QWORD *)(v0 + 544) = &protocol witness table for DUFoundInEventSpecification;
  *(_QWORD *)(v0 + 512) = v26;
  v27 = type metadata accessor for DUFoundInEventHTMLPreprocessingSpecification();
  v28 = swift_allocObject();
  *(_QWORD *)(v0 + 576) = v27;
  *(_QWORD *)(v0 + 584) = &protocol witness table for DUFoundInEventHTMLPreprocessingSpecification;
  *(_QWORD *)(v0 + 552) = v28;
  v29 = type metadata accessor for DUFoundInEventDDSpecification();
  result = swift_allocObject();
  *(_QWORD *)(v0 + 616) = v29;
  *(_QWORD *)(v0 + 624) = &protocol witness table for DUFoundInEventDDSpecification;
  *(_QWORD *)(v0 + 592) = result;
  allSpecifications._rawValue = (void *)v0;
  return result;
}

void one-time initialization function for allTopLevelSpecifications()
{
  uint64_t v0;
  char *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8[2];
  _BYTE v9[40];

  if (one-time initialization token for allSpecifications != -1)
    swift_once();
  v0 = *((_QWORD *)allSpecifications._rawValue + 2);
  if (v0)
  {
    v1 = (char *)allSpecifications._rawValue + 32;
    swift_bridgeObjectRetain_n();
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of TopLevelSpecificationProtocol((uint64_t)v1, (uint64_t)v9);
      outlined init with copy of TopLevelSpecificationProtocol((uint64_t)v9, (uint64_t)v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUProcessingPhaseSpecification);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopLevelSpecificationProtocol);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v7 = 0;
        v5 = 0u;
        v6 = 0u;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
      if (*((_QWORD *)&v6 + 1))
      {
        outlined init with take of DUProcessingPhaseSpecification(&v5, (uint64_t)v8);
        outlined init with take of DUProcessingPhaseSpecification(v8, (uint64_t)&v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
        v4 = v2[2];
        v3 = v2[3];
        if (v4 >= v3 >> 1)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
        v2[2] = v4 + 1;
        outlined init with take of DUProcessingPhaseSpecification(&v5, (uint64_t)&v2[5 * v4 + 4]);
      }
      else
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v5, &demangling cache variable for type metadata for TopLevelSpecificationProtocol?);
      }
      v1 += 40;
      --v0;
    }
    while (v0);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  allTopLevelSpecifications._rawValue = v2;
}

uint64_t one-time initialization function for allImplementationsUnfiltered()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUProcessingPhaseImplementation?>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2284C4F80;
  v1 = type metadata accessor for DUBackboneEncodingSmolBERToImplementation();
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = &protocol witness table for DUBackboneEncodingSmolBERToImplementation;
  *(_QWORD *)(v0 + 32) = v2;
  v3 = type metadata accessor for DUTopicEncodingSmolBERToImplementation();
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 96) = v3;
  *(_QWORD *)(v0 + 104) = &protocol witness table for DUTopicEncodingSmolBERToImplementation;
  *(_QWORD *)(v0 + 72) = v4;
  v5 = type metadata accessor for DUWikipediaTopicDetectionSmolBERToRetrievalImplementation();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 40) = xmmword_2284C0D30;
  *(_QWORD *)(v0 + 136) = v5;
  *(_QWORD *)(v0 + 144) = &protocol witness table for DUWikipediaTopicDetectionSmolBERToRetrievalImplementation;
  *(_QWORD *)(v0 + 112) = v6;
  v7 = type metadata accessor for DUCategoryClassificationSmolBERToImplementation();
  v8 = swift_allocObject();
  *(_QWORD *)(v0 + 176) = v7;
  *(_QWORD *)(v0 + 184) = &protocol witness table for DUCategoryClassificationSmolBERToImplementation;
  *(_QWORD *)(v0 + 152) = v8;
  v9 = type metadata accessor for DUWordPieceTokenizerImplementation();
  v10 = swift_allocObject();
  *(_QWORD *)(v0 + 216) = v9;
  *(_QWORD *)(v0 + 224) = &protocol witness table for DUWordPieceTokenizerImplementation;
  *(_QWORD *)(v0 + 192) = v10;
  v11 = type metadata accessor for DUConcatenatedDocumentTextDefaultImplementation();
  v12 = swift_allocObject();
  *(_QWORD *)(v0 + 256) = v11;
  *(_QWORD *)(v0 + 264) = &protocol witness table for DUConcatenatedDocumentTextDefaultImplementation;
  *(_QWORD *)(v0 + 232) = v12;
  v13 = type metadata accessor for DULanguageTaggingDefaultImplementation();
  v14 = swift_allocObject();
  *(_QWORD *)(v0 + 296) = v13;
  *(_QWORD *)(v0 + 304) = &protocol witness table for DULanguageTaggingDefaultImplementation;
  *(_QWORD *)(v0 + 272) = v14;
  v15 = type metadata accessor for DUWikipediaTopicDetectionDefaultImplementation();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 1;
  *(_QWORD *)(v0 + 336) = v15;
  *(_QWORD *)(v0 + 344) = &protocol witness table for DUWikipediaTopicDetectionDefaultImplementation;
  *(_QWORD *)(v0 + 312) = v16;
  v17 = type metadata accessor for DUStructuredExtractionDefaultImplementation();
  v18 = swift_allocObject();
  *(_QWORD *)(v0 + 376) = v17;
  *(_QWORD *)(v0 + 384) = &protocol witness table for DUStructuredExtractionDefaultImplementation;
  *(_QWORD *)(v0 + 352) = v18;
  v19 = type metadata accessor for DUStructuredExtractionContextKitImplementation();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = 0x2F3A6F746C69616DLL;
  *(_QWORD *)(v20 + 24) = 0xE90000000000002FLL;
  *(_QWORD *)(v0 + 416) = v19;
  *(_QWORD *)(v0 + 424) = &protocol witness table for DUStructuredExtractionContextKitImplementation;
  *(_QWORD *)(v0 + 392) = v20;
  v21 = type metadata accessor for DUStructuredExtractionLocalImplementation();
  v22 = swift_allocObject();
  *(_QWORD *)(v0 + 456) = v21;
  *(_QWORD *)(v0 + 464) = &protocol witness table for DUStructuredExtractionLocalImplementation;
  *(_QWORD *)(v0 + 432) = v22;
  v23 = type metadata accessor for DUUserInterfaceUnderstandingDefaultImplementation();
  v24 = swift_allocObject();
  *(_QWORD *)(v0 + 496) = v23;
  *(_QWORD *)(v0 + 504) = &protocol witness table for DUUserInterfaceUnderstandingDefaultImplementation;
  *(_QWORD *)(v0 + 472) = v24;
  v25 = type metadata accessor for DUCreateContextRequestDefaultImplementation();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = 1;
  *(_QWORD *)(v0 + 536) = v25;
  *(_QWORD *)(v0 + 544) = &protocol witness table for DUCreateContextRequestDefaultImplementation;
  *(_QWORD *)(v0 + 512) = v26;
  v27 = type metadata accessor for DUCategoryClassificationRuleBasedImplementation();
  v28 = swift_allocObject();
  *(_QWORD *)(v0 + 576) = v27;
  *(_QWORD *)(v0 + 584) = &protocol witness table for DUCategoryClassificationRuleBasedImplementation;
  *(_QWORD *)(v0 + 552) = v28;
  v29 = type metadata accessor for DUPoemImplementation();
  v30 = swift_allocObject();
  *(_QWORD *)(v0 + 616) = v29;
  *(_QWORD *)(v0 + 624) = &protocol witness table for DUPoemImplementation;
  *(_QWORD *)(v0 + 592) = v30;
  v31 = type metadata accessor for DUPosTaggingImplementation();
  v32 = swift_allocObject();
  *(_QWORD *)(v0 + 656) = v31;
  *(_QWORD *)(v0 + 664) = &protocol witness table for DUPosTaggingImplementation;
  *(_QWORD *)(v0 + 632) = v32;
  v33 = type metadata accessor for DUFoundInEventMultilingualBERTImplementation();
  v34 = swift_allocObject();
  v35 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000024, 0x80000002284D98C0);
  v36 = objc_msgSend((id)objc_opt_self(), sel_contextualEmbeddingWithIdentifier_, v35);

  *(_QWORD *)(v34 + 16) = v36;
  *(_QWORD *)(v0 + 696) = v33;
  *(_QWORD *)(v0 + 704) = &protocol witness table for DUFoundInEventMultilingualBERTImplementation;
  *(_QWORD *)(v0 + 672) = v34;
  v37 = type metadata accessor for DUFoundInEventSmolBERToImplementation();
  v38 = swift_allocObject();
  *(_QWORD *)(v0 + 736) = v37;
  *(_QWORD *)(v0 + 744) = &protocol witness table for DUFoundInEventSmolBERToImplementation;
  *(_QWORD *)(v0 + 712) = v38;
  v39 = type metadata accessor for DUFoundInEventEncodingSmolBERToImplementation();
  v40 = swift_allocObject();
  *(_QWORD *)(v0 + 776) = v39;
  *(_QWORD *)(v0 + 784) = &protocol witness table for DUFoundInEventEncodingSmolBERToImplementation;
  *(_QWORD *)(v0 + 752) = v40;
  v41 = type metadata accessor for DUFoundInEventHTMLPreprocessingImplementation();
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v0 + 816) = v41;
  *(_QWORD *)(v0 + 824) = &protocol witness table for DUFoundInEventHTMLPreprocessingImplementation;
  *(_QWORD *)(v0 + 792) = v42;
  v43 = type metadata accessor for DUFoundInEventDefaultImplementation();
  v44 = swift_allocObject();
  *(_QWORD *)(v0 + 856) = v43;
  *(_QWORD *)(v0 + 864) = &protocol witness table for DUFoundInEventDefaultImplementation;
  *(_QWORD *)(v0 + 832) = v44;
  v45 = type metadata accessor for DUFoundInEventDDImplementation();
  result = swift_allocObject();
  *(_QWORD *)(v0 + 896) = v45;
  *(_QWORD *)(v0 + 904) = &protocol witness table for DUFoundInEventDDImplementation;
  *(_QWORD *)(v0 + 872) = result;
  allImplementationsUnfiltered._rawValue = (void *)v0;
  return result;
}

Swift::OpaquePointer *allImplementationsUnfiltered.unsafeMutableAddressor()
{
  if (one-time initialization token for allImplementationsUnfiltered != -1)
    swift_once();
  return &allImplementationsUnfiltered;
}

void one-time initialization function for allImplementations()
{
  uint64_t v0;
  char *v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7[2];
  _BYTE v8[40];

  if (one-time initialization token for allImplementationsUnfiltered != -1)
    swift_once();
  v0 = *((_QWORD *)allImplementationsUnfiltered._rawValue + 2);
  if (v0)
  {
    v1 = (char *)allImplementationsUnfiltered._rawValue + 32;
    swift_bridgeObjectRetain_n();
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of DUProcessingPhaseImplementation?((uint64_t)v1, (uint64_t)v8);
      outlined init with take of DUProcessingPhaseImplementation?((uint64_t)v8, (uint64_t)&v5);
      if (v6)
      {
        outlined init with take of DUProcessingPhaseSpecification(&v5, (uint64_t)v7);
        outlined init with take of DUProcessingPhaseSpecification(v7, (uint64_t)&v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
        v4 = v2[2];
        v3 = v2[3];
        if (v4 >= v3 >> 1)
          v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
        v2[2] = v4 + 1;
        outlined init with take of DUProcessingPhaseSpecification(&v5, (uint64_t)&v2[5 * v4 + 4]);
      }
      else
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v5, &demangling cache variable for type metadata for DUProcessingPhaseImplementation?);
      }
      v1 += 40;
      --v0;
    }
    while (v0);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  allImplementations._rawValue = v2;
}

uint64_t outlined init with copy of DUProcessingPhaseImplementation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUProcessingPhaseImplementation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DUProcessingPhaseImplementation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUProcessingPhaseImplementation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id DUDocumentUpdate.documentID.getter()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentID);
  swift_beginAccess();
  return *v1;
}

void DUDocumentUpdate.documentID.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentID);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUDocumentUpdate.documentID.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUDocumentUpdate.documentBody.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentBody);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUDocumentUpdate.documentBody.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentBody);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUDocumentUpdate.documentBody.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUDocumentUpdate.document.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_document);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUDocumentUpdate.document.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_document);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUDocumentUpdate.document.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUpdate.associatedFileURL.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_associatedFileURL, &demangling cache variable for type metadata for URL?, a1);
}

uint64_t DUDocumentUpdate.associatedFileURL.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_associatedFileURL, &demangling cache variable for type metadata for URL?);
}

uint64_t (*DUDocumentUpdate.associatedFileURL.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUpdate.documentType.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentType);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUDocumentUpdate.documentType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentType);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUDocumentUpdate.documentType.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUpdate.updateTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return DUDocumentUpdate.associatedFileURL.getter(&OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_updateTimestamp, &demangling cache variable for type metadata for Date?, a1);
}

uint64_t DUDocumentUpdate.associatedFileURL.getter@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v6, a3, a2);
}

uint64_t DUDocumentUpdate.updateTimestamp.setter(uint64_t a1)
{
  return DUDocumentUpdate.associatedFileURL.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_updateTimestamp, &demangling cache variable for type metadata for Date?);
}

uint64_t DUDocumentUpdate.associatedFileURL.setter(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*DUDocumentUpdate.updateTimestamp.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUpdate.documentAttributes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUDocumentUpdate.documentAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentAttributes);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUDocumentUpdate.documentAttributes.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *DUDocumentUpdate.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static DUDocumentUpdate.supportsSecureCoding;
}

uint64_t static DUDocumentUpdate.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static DUDocumentUpdate.supportsSecureCoding;
}

uint64_t static DUDocumentUpdate.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static DUDocumentUpdate.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static DUDocumentUpdate.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUDocumentUpdate.__allocating_init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v18;
  id v19;

  v18 = objc_allocWithZone(v9);
  v19 = specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  return v19;
}

id DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;

  v11 = specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  return v11;
}

id specialized DUDocumentUpdate.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(_QWORD);
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  int v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  objc_class *v73;
  char *v74;
  char *v75;
  uint64_t *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  int *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  char *v96;
  uint64_t v97;
  void *v98;
  uint64_t v100;
  uint64_t v101;
  id v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  _QWORD *v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  objc_super v122;
  unint64_t v123;

  v111 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v118 = *((_QWORD *)v111 - 1);
  v2 = MEMORY[0x24BDAC7A8](v111);
  v112 = (uint64_t)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v121 = (uint64_t)&v101 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v120 = (uint64_t)&v101 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v7);
  v104 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v106 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v107 = (uint64_t)&v101 - v12;
  v119 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v13 = *(_QWORD *)(v119 - 8);
  v14 = MEMORY[0x24BDAC7A8](v119);
  v117 = (uint64_t)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v115 = (uint64_t)&v101 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v116 = (uint64_t)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v101 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v26 = *((_QWORD *)v25 - 1);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v31, v32);
  v108 = (int *)v29;
  v33 = *(int *)(v29 + 24);
  v109 = v31;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v31[v33], (uint64_t)v24, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1, v25) == 1)
  {
    UnknownStorage.init()();
    v34 = &v28[v25[5]];
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = 0;
    v35 = &v28[v25[6]];
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    v36 = &v28[v25[7]];
    *(_QWORD *)v36 = 0;
    *((_QWORD *)v36 + 1) = 0;
    v37 = &v28[v25[8]];
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0;
    v38 = &v28[v25[9]];
    *(_QWORD *)v38 = 0;
    *((_QWORD *)v38 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v24, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v24, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  }
  v39 = specialized DUDocumentIdentifier.__allocating_init<A>(proto:)((uint64_t)v28);
  if (!v39)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v105, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
    return 0;
  }
  v103 = v39;
  v40 = (uint64_t)v109 + v108[8];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v40, (uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v42 = v119;
  v43 = v41(v21, 1, v119);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  if (v43 == 1)
  {
    v102 = 0;
  }
  else
  {
    v45 = v40;
    v46 = v116;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v45, v116, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    if (v41((char *)v46, 1, v42) == 1)
    {
      v47 = v115;
      UnknownStorage.init()();
      v48 = *(int *)(v42 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v47 + v48) = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v46, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    }
    else
    {
      v47 = v115;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v46, v115, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    }
    v49 = v117;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, v117, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    v50 = specialized DURawDocument.__allocating_init<A>(proto:)(v49);
    if (v50)
    {
      v51 = v50;
      v52 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
      v102 = specialized DUDocument.init(rawDocument:maxLength:)(v51, 0);

    }
    else
    {
      v102 = 0;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  }
  if (*(_QWORD *)((char *)v109 + v108[9] + 8))
  {
    swift_bridgeObjectRetain();
    URL.init(string:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v53 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v107, 1, 1, v53);
  }
  v54 = v112;
  v55 = *v109;
  v123 = MEMORY[0x24BEE4AF8];
  v56 = *(_QWORD *)(v55 + 16);
  if (v56)
  {
    v57 = v55 + ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
    v110 = *(_QWORD *)(v118 + 72);
    v101 = v55;
    swift_bridgeObjectRetain_n();
    do
    {
      v113 = v57;
      v58 = v120;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v57, v120, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v59 = v58;
      v60 = v121;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v59, v121, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v60, v54, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v61 = (uint64_t *)(v54 + v111[5]);
      v62 = v61[1];
      if (v62)
      {
        v63 = *v61;
        v118 = v62;
        v119 = v63;
      }
      else
      {
        v118 = 0xE000000000000000;
        v119 = 0;
      }
      v64 = (uint64_t *)(v54 + v111[6]);
      v65 = v64[1];
      v114 = v56;
      if (v65)
      {
        v66 = *v64;
        v116 = v65;
        v117 = v66;
      }
      else
      {
        v116 = 0xE000000000000000;
        v117 = 0;
      }
      v67 = (uint64_t *)(v54 + v111[7]);
      v68 = v67[1];
      if (v68)
      {
        v115 = *v67;
        v69 = v68;
      }
      else
      {
        v115 = 0;
        v69 = 0xE000000000000000;
      }
      v70 = (uint64_t *)(v54 + v111[8]);
      if (v70[1])
      {
        v71 = *v70;
        v72 = v70[1];
      }
      else
      {
        v71 = 0;
        v72 = 0xE000000000000000;
      }
      v73 = (objc_class *)type metadata accessor for DUDocumentAttribute();
      v74 = (char *)objc_allocWithZone(v73);
      v75 = &v74[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_displayName];
      *(_QWORD *)v75 = 0;
      *((_QWORD *)v75 + 1) = 0;
      v76 = (uint64_t *)&v74[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeNamespace];
      v77 = v118;
      *v76 = v119;
      v76[1] = v77;
      v78 = &v74[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeType];
      v79 = v116;
      *(_QWORD *)v78 = v117;
      *((_QWORD *)v78 + 1) = v79;
      v80 = &v74[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeID];
      *(_QWORD *)v80 = v115;
      *((_QWORD *)v80 + 1) = v69;
      swift_beginAccess();
      *(_QWORD *)v75 = v71;
      *((_QWORD *)v75 + 1) = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v122.receiver = v74;
      v122.super_class = v73;
      objc_msgSendSuper2(&v122, sel_init);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v121, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v54 = v112;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v112, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v81 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v120, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      MEMORY[0x22E2AFAFC](v81);
      if (*(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v57 = v113 + v110;
      v56 = v114 - 1;
    }
    while (v114 != 1);
    swift_bridgeObjectRelease();
    v82 = v123;
  }
  else
  {
    swift_bridgeObjectRetain();
    v82 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if (v82 >> 62)
  {
    swift_bridgeObjectRetain();
    v100 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v100)
      goto LABEL_42;
    goto LABEL_41;
  }
  if (!*(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_41:
    swift_bridgeObjectRelease();
    v82 = 0;
  }
LABEL_42:
  v83 = v108;
  v84 = v109;
  v85 = (_QWORD *)((char *)v109 + v108[7]);
  v86 = *v85;
  v87 = v85[1];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v107, v106, &demangling cache variable for type metadata for URL?);
  v88 = (_QWORD *)((char *)v84 + v83[10]);
  if (v88[1])
  {
    v89 = *v88;
    v90 = v88[1];
  }
  else
  {
    v89 = 0;
    v90 = 0xE000000000000000;
  }
  if ((*((_BYTE *)v109 + v108[11] + 8) & 1) != 0)
  {
    v91 = type metadata accessor for Date();
    v92 = v104;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v104, 1, 1, v91);
    v93 = (uint64_t)v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v93 = (uint64_t)v104;
    Date.init(timeIntervalSinceReferenceDate:)();
    v94 = type metadata accessor for Date();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v93, 0, 1, v94);
  }
  v95 = objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdate());
  v96 = v103;
  v97 = v87;
  v98 = v102;
  v44 = specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(v103, v86, v97, v102, v106, v89, v90, v93, v82);

  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v105, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v107, &demangling cache variable for type metadata for URL?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  return v44;
}

uint64_t DUDocumentUpdate.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  objc_class *v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  int *v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v109;
  _QWORD v110[2];
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  objc_super v134;
  unint64_t v135;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v116 = (char *)v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v126 = *((_QWORD *)v123 - 1);
  v6 = MEMORY[0x24BDAC7A8](v123);
  v124 = (uint64_t)v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v133 = (uint64_t)v110 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v132 = (uint64_t)v110 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v118 = (uint64_t)v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v120 = (uint64_t)v110 - v14;
  v15 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v128 = *(_QWORD *)(v15 - 8);
  v129 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v122 = (uint64_t)v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v125 = (uint64_t)v110 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v113 = (char *)v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v127 = (uint64_t)v110 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  MEMORY[0x24BDAC7A8](v23);
  v131 = (uint64_t)v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v130 = *((_QWORD *)v25 - 1);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v110 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)v110 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v110 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, a1, a2);
  v39 = swift_dynamicCast();
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
  if ((v39 & 1) == 0)
  {
    v40(v31, 1, 1, v35);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v31, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate?);
    return 0;
  }
  v114 = v32;
  v115 = a1;
  v40(v31, 0, 1, v35);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v31, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  v119 = (int *)v35;
  v41 = *(int *)(v35 + 24);
  v121 = v38;
  v42 = v131;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)&v38[v41], v131, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v130 + 48))(v42, 1, v25) == 1)
  {
    UnknownStorage.init()();
    v43 = &v27[v25[5]];
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    v44 = &v27[v25[6]];
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    v45 = &v27[v25[7]];
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    v46 = &v27[v25[8]];
    *(_QWORD *)v46 = 0;
    *((_QWORD *)v46 + 1) = 0;
    v47 = &v27[v25[9]];
    *(_QWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v42, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v42, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  }
  v49 = v115;
  v50 = v114;
  v51 = v129;
  v52 = specialized DUDocumentIdentifier.__allocating_init<A>(proto:)((uint64_t)v27);
  if (!v52)
  {
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
    return 0;
  }
  v111 = v52;
  v112 = a2;
  v53 = (uint64_t)v121 + v119[8];
  v54 = v127;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v53, v127, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  v56 = v55(v54, 1, v51);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v54, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  if (v56 == 1)
  {
    v113 = 0;
    v57 = v121;
    v58 = v124;
  }
  else
  {
    v59 = (uint64_t)v113;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v53, (uint64_t)v113, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    v60 = v55(v59, 1, v51);
    v58 = v124;
    if (v60 == 1)
    {
      v61 = v125;
      UnknownStorage.init()();
      v62 = *(int *)(v51 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v61 + v62) = static DocumentUnderstanding_DocumentRepresentation_Document._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v59, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
    }
    else
    {
      v61 = v125;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v59, v125, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    }
    v63 = v122;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v61, v122, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
    v64 = specialized DURawDocument.__allocating_init<A>(proto:)(v63);
    if (v64)
    {
      v65 = v64;
      v66 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
      v113 = (char *)specialized DUDocument.init(rawDocument:maxLength:)(v65, 0);

    }
    else
    {
      v113 = 0;
    }
    v57 = v121;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v61, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  }
  if (*(_QWORD *)((char *)v57 + v119[9] + 8))
  {
    swift_bridgeObjectRetain();
    URL.init(string:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v67 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v120, 1, 1, v67);
  }
  v68 = *v121;
  v135 = MEMORY[0x24BEE4AF8];
  v69 = *(_QWORD *)(v68 + 16);
  if (v69)
  {
    v70 = v68 + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    v122 = *(_QWORD *)(v126 + 72);
    v110[1] = v68;
    swift_bridgeObjectRetain_n();
    do
    {
      v125 = v70;
      v71 = v132;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v70, v132, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v72 = v71;
      v73 = v133;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v72, v133, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v73, v58, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v74 = (uint64_t *)(v58 + v123[5]);
      v75 = v74[1];
      if (v75)
      {
        v76 = *v74;
        v130 = v75;
        v131 = v76;
      }
      else
      {
        v130 = 0xE000000000000000;
        v131 = 0;
      }
      v77 = (uint64_t *)(v58 + v123[6]);
      v78 = v77[1];
      v126 = v69;
      if (v78)
      {
        v79 = *v77;
        v128 = v78;
        v129 = v79;
      }
      else
      {
        v128 = 0xE000000000000000;
        v129 = 0;
      }
      v80 = (uint64_t *)(v58 + v123[7]);
      v81 = v80[1];
      if (v81)
      {
        v127 = *v80;
        v82 = v81;
      }
      else
      {
        v127 = 0;
        v82 = 0xE000000000000000;
      }
      v83 = (uint64_t *)(v58 + v123[8]);
      if (v83[1])
      {
        v84 = *v83;
        v85 = v83[1];
      }
      else
      {
        v84 = 0;
        v85 = 0xE000000000000000;
      }
      v86 = (objc_class *)type metadata accessor for DUDocumentAttribute();
      v87 = (char *)objc_allocWithZone(v86);
      v88 = &v87[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_displayName];
      *(_QWORD *)v88 = 0;
      *((_QWORD *)v88 + 1) = 0;
      v89 = &v87[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeNamespace];
      v90 = v130;
      *(_QWORD *)v89 = v131;
      *((_QWORD *)v89 + 1) = v90;
      v91 = (uint64_t *)&v87[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeType];
      v92 = v128;
      *v91 = v129;
      v91[1] = v92;
      v93 = &v87[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeID];
      *(_QWORD *)v93 = v127;
      *((_QWORD *)v93 + 1) = v82;
      swift_beginAccess();
      *(_QWORD *)v88 = v84;
      *((_QWORD *)v88 + 1) = v85;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v134.receiver = v87;
      v134.super_class = v86;
      objc_msgSendSuper2(&v134, sel_init);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v133, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v58 = v124;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v124, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      v94 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v132, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
      MEMORY[0x22E2AFAFC](v94);
      if (*(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v135 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v70 = v125 + v122;
      v69 = v126 - 1;
    }
    while (v126 != 1);
    swift_bridgeObjectRelease();
    v95 = v135;
  }
  else
  {
    swift_bridgeObjectRetain();
    v95 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v96 = v119;
  if (v95 >> 62)
  {
    swift_bridgeObjectRetain();
    v109 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v109)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (!*(_QWORD *)((v95 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_43:
    swift_bridgeObjectRelease();
    v95 = 0;
  }
LABEL_44:
  v97 = v121;
  v98 = (_QWORD *)((char *)v121 + v96[7]);
  v100 = *v98;
  v99 = v98[1];
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v120, v118, &demangling cache variable for type metadata for URL?);
  v101 = (_QWORD *)((char *)v97 + v96[10]);
  if (v101[1])
  {
    v102 = *v101;
    v103 = v101[1];
  }
  else
  {
    v102 = 0;
    v103 = 0xE000000000000000;
  }
  if ((*((_BYTE *)v121 + v119[11] + 8) & 1) != 0)
  {
    v104 = type metadata accessor for Date();
    v105 = v116;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v116, 1, 1, v104);
    v106 = v105;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v106 = v116;
    Date.init(timeIntervalSinceReferenceDate:)();
    v107 = type metadata accessor for Date();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v106, 0, 1, v107);
  }
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, unint64_t, char *, unint64_t))(v117 + 304))(v111, v100, v99, v113, v118, v102, v103, v106, v95);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v115, v112);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v120, &demangling cache variable for type metadata for URL?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  return v48;
}

char *specialized DUDocumentIdentifier.__allocating_init<A>(proto:)(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  objc_class *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  objc_super v36;

  v2 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v4, v5);
  v6 = &v4[v2[5]];
  if (*((_QWORD *)v6 + 1))
  {
    v7 = *(_QWORD *)v6;
    v8 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  v9 = &v4[v2[6]];
  if (*((_QWORD *)v9 + 1))
  {
    v10 = *(_QWORD *)v9;
    v11 = *((_QWORD *)v9 + 1);
  }
  else
  {
    v10 = 0;
    v11 = 0xE000000000000000;
  }
  v12 = (objc_class *)type metadata accessor for DUDocumentIdentifier();
  v13 = (char *)objc_allocWithZone(v12);
  v14 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v16 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
  *(_QWORD *)v17 = v7;
  *((_QWORD *)v17 + 1) = v8;
  v18 = &v13[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
  *(_QWORD *)v18 = v10;
  *((_QWORD *)v18 + 1) = v11;
  v36.receiver = v13;
  v36.super_class = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = (char *)objc_msgSendSuper2(&v36, sel_init);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  v20 = &v4[v2[7]];
  v21 = *((_QWORD *)v20 + 1);
  if (v21)
  {
    v22 = *(_QWORD *)v20;
    v23 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
    swift_beginAccess();
    *(_QWORD *)v23 = v22;
    *((_QWORD *)v23 + 1) = v21;
    v24 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = v19;
  }
  v26 = &v4[v2[8]];
  v27 = *((_QWORD *)v26 + 1);
  if (v27)
  {
    v28 = *(_QWORD *)v26;
    v29 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
    swift_beginAccess();
    *(_QWORD *)v29 = v28;
    *((_QWORD *)v29 + 1) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v30 = &v4[v2[9]];
  v31 = *((_QWORD *)v30 + 1);
  if (v31)
  {
    v32 = *(_QWORD *)v30;
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
    v33 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
    swift_beginAccess();
    *(_QWORD *)v33 = v32;
    *((_QWORD *)v33 + 1) = v31;

    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);

  }
  return v19;
}

id specialized DUDocumentAttribute.__allocating_init<A>(proto:)(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  objc_class *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  id v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  objc_super v36;

  v2 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v4, v5);
  v6 = &v4[v2[5]];
  v7 = *((_QWORD *)v6 + 1);
  if (v7)
  {
    v8 = *(_QWORD *)v6;
    v32 = v7;
    v33 = v8;
  }
  else
  {
    v32 = 0xE000000000000000;
    v33 = 0;
  }
  v9 = &v4[v2[6]];
  v10 = *((_QWORD *)v9 + 1);
  if (v10)
  {
    v11 = *(_QWORD *)v9;
    v30 = v10;
    v31 = v11;
  }
  else
  {
    v30 = 0xE000000000000000;
    v31 = 0;
  }
  v12 = &v4[v2[7]];
  v13 = *((_QWORD *)v12 + 1);
  if (v13)
  {
    v29 = *(_QWORD *)v12;
    v14 = v13;
  }
  else
  {
    v29 = 0;
    v14 = 0xE000000000000000;
  }
  v15 = &v4[v2[8]];
  v16 = *((_QWORD *)v15 + 1);
  v34 = v7;
  if (v16)
  {
    v17 = *(_QWORD *)v15;
    v18 = v16;
  }
  else
  {
    v17 = 0;
    v18 = 0xE000000000000000;
  }
  v19 = (objc_class *)type metadata accessor for DUDocumentAttribute();
  v20 = (char *)objc_allocWithZone(v19);
  v21 = &v20[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_displayName];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = &v20[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeNamespace];
  v23 = v32;
  *(_QWORD *)v22 = v33;
  *((_QWORD *)v22 + 1) = v23;
  v24 = &v20[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeType];
  v25 = v30;
  *(_QWORD *)v24 = v31;
  *((_QWORD *)v24 + 1) = v25;
  v26 = &v20[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentAttribute_attributeID];
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v14;
  swift_beginAccess();
  *(_QWORD *)v21 = v17;
  *((_QWORD *)v21 + 1) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36.receiver = v20;
  v36.super_class = v19;
  v27 = objc_msgSendSuper2(&v36, sel_init);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v35, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
  return v27;
}

unint64_t DUDocumentUpdate.protoRepresentation.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  void (*v37)(void);
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t result;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  void *v99;
  void (*v100)(void);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  unint64_t *v118;
  uint64_t *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(void);
  _QWORD *v124;
  uint64_t *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t (*v133)(void);
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute();
  v5 = *(_QWORD *)(v137 - 8);
  v6 = MEMORY[0x24BDAC7A8](v137);
  v136 = (uint64_t)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v135 = (char *)&v107 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v134 = (uint64_t)&v107 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v11);
  v131 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for Date();
  v130 = *(_QWORD *)(v132 - 8);
  MEMORY[0x24BDAC7A8](v132);
  v117 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v14);
  v127 = (char *)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL();
  v128 = *(_QWORD *)(v16 - 8);
  v129 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v116 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
  MEMORY[0x24BDAC7A8](v18);
  v126 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v109 = (uint64_t)&v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v120 = (char *)&v107 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v110 = (uint64_t)&v107 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v107 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v113 = (uint64_t)&v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  MEMORY[0x24BDAC7A8](v34);
  v112 = (uint64_t)&v107 - v35;
  *a1 = MEMORY[0x24BEE4AF8];
  v36 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  UnknownStorage.init()();
  v37 = *(void (**)(void))(v31 + 56);
  v111 = (uint64_t)a1 + v36[6];
  v123 = v37;
  v37();
  v38 = (uint64_t *)((char *)a1 + v36[7]);
  *v38 = 0;
  v38[1] = 0;
  v119 = v38;
  v39 = (uint64_t)a1 + v36[8];
  v121 = v21;
  v40 = *(uint64_t (**)(void))(v21 + 56);
  v108 = v39;
  v122 = v20;
  v133 = v40;
  v41 = v40();
  v42 = (uint64_t *)((char *)a1 + v36[9]);
  *v42 = 0;
  v42[1] = 0;
  v114 = v42;
  v43 = (uint64_t *)((char *)a1 + v36[10]);
  *v43 = 0;
  v43[1] = 0;
  v125 = v43;
  v44 = v36[11];
  v118 = a1;
  v45 = (char *)a1 + v44;
  v46 = v124;
  *(_QWORD *)v45 = 0;
  v115 = v45;
  v45[8] = 1;
  v47 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v48 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v46) + 0x88))(v41);
  (*(void (**)(void))((*v47 & *v48) + 0x100))();

  if ((swift_dynamicCast() & 1) != 0)
  {
    v49 = v123;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v123)(v29, 0, 1, v30);
    v50 = v112;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v29, v112, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
    v51 = v113;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v50, v113, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
    v52 = v111;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v111, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v51, v52, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49)(v52, 0, 1, v30);
    v53 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v50, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v123)(v29, 1, 1, v30);
    v53 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v29, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  }
  v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v55 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v46) + 0xA0))(v53);
  v57 = (uint64_t)v126;
  v58 = (uint64_t)v127;
  if (v56)
  {
    v59 = v55;
    v60 = v56;
    v61 = v119;
    v55 = swift_bridgeObjectRelease();
    *v61 = v59;
    v61[1] = v60;
  }
  v62 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v54 & *v46) + 0xB8))(v55);
  if (v62)
  {
    v63 = v62;
    (*(void (**)(void))((*v54 & *v62) + 0x118))();

    v64 = v122;
    v65 = swift_dynamicCast();
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v133)(v57, v65 ^ 1u, 1, v64);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v57, 1, v64) != 1)
    {
      v66 = v57;
      v67 = v110;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v66, v110, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
      v68 = v109;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v67, v109, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
      v69 = v108;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v108, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v68, v69, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v133)(v69, 0, 1, v64);
      v70 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v67, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
      goto LABEL_11;
    }
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v133)(v57, 1, 1, v122);
  }
  v70 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v57, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_Document?);
LABEL_11:
  (*(void (**)(uint64_t))((*v54 & *v46) + 0xD0))(v70);
  v71 = v128;
  v72 = v129;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v58, 1, v129) == 1)
  {
    v73 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v58, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v74 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v116, v58, v72);
    v75 = v71;
    v76 = URL.absoluteString.getter();
    v78 = v77;
    v79 = v114;
    swift_bridgeObjectRelease();
    *v79 = v76;
    v79[1] = v78;
    v73 = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v74, v72);
  }
  v80 = (uint64_t)v131;
  v81 = (*(uint64_t (**)(uint64_t))((*v54 & *v46) + 0xE8))(v73);
  v83 = v82;
  v84 = v125;
  v85 = swift_bridgeObjectRelease();
  *v84 = v81;
  v84[1] = v83;
  (*(void (**)(uint64_t))((*v54 & *v46) + 0x100))(v85);
  v86 = v130;
  v87 = v132;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v80, 1, v132) == 1)
  {
    v88 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    v89 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v117, v80, v87);
    Date.timeIntervalSinceReferenceDate.getter();
    v91 = v90;
    v88 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v89, v87);
    v92 = v115;
    *v115 = v91;
    *((_BYTE *)v92 + 8) = 0;
  }
  result = (*(uint64_t (**)(uint64_t))((*v54 & *v46) + 0x118))(v88);
  if (result)
  {
    v94 = result;
    if (result >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v95 = result;
      if (result)
        goto LABEL_20;
    }
    else
    {
      v95 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v95)
      {
LABEL_20:
        if (v95 < 1)
        {
          __break(1u);
          return result;
        }
        v96 = 0;
        v97 = MEMORY[0x24BEE4AF8];
        do
        {
          if ((v94 & 0xC000000000000001) != 0)
            v98 = (_QWORD *)MEMORY[0x22E2AFF34](v96, v94);
          else
            v98 = *(id *)(v94 + 8 * v96 + 32);
          v99 = v98;
          v100 = *(void (**)(void))((*v54 & *v98) + 0xE0);
          v101 = (uint64_t)v135;
          v100();
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v101, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
          v102 = v137;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v4, 0, 1, v137);

          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v102) == 1)
          {
            outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute?);
          }
          else
          {
            v103 = v134;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, v134, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v103, v136, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v97 + 16) + 1, 1, v97);
            v105 = *(_QWORD *)(v97 + 16);
            v104 = *(_QWORD *)(v97 + 24);
            if (v105 >= v104 >> 1)
              v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1, v97);
            *(_QWORD *)(v97 + 16) = v105 + 1;
            outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v136, v97+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v105, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentAttribute);
          }
          ++v96;
          v54 = (_QWORD *)MEMORY[0x24BEE4EA0];
        }
        while (v95 != v96);
        goto LABEL_35;
      }
    }
    v97 = MEMORY[0x24BEE4AF8];
LABEL_35:
    swift_bridgeObjectRelease_n();
    v106 = v118;
    result = swift_bridgeObjectRelease();
    *v106 = v97;
  }
  return result;
}

uint64_t DUDocumentUpdate.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x140))(v4);
  v7 = specialized DUDocumentUpdate.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocumentUpdate?);
  a1[3] = result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUDocumentUpdate.encode(with:)(NSCoder with)
{
  void *v2;
  id v3;
  void *v4;

  type metadata accessor for DUDocumentUpdate();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DUDocumentUpdate and conformance DUDocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentUpdate, (uint64_t)&protocol conformance descriptor for DUDocumentUpdate);
  v2 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v2)
  {
    v3 = v2;
    v4 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  }
}

uint64_t DUDocumentUpdate.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDocumentUpdate.init(coder:)(a1);
}

uint64_t DUDocumentUpdate.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v6;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DUDocumentUpdate and conformance DUDocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentUpdate, (uint64_t)&protocol conformance descriptor for DUDocumentUpdate);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v4 = v6;
  if (!v6)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

id DUDocumentUpdate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DUDocumentUpdate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DUDocumentUpdate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentUpdate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocumentUpdate()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x140))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocumentUpdate@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 312);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate();
  v7 = lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

char *specialized DURawDocument.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  void **v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  void **v97;
  void *v98;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;

  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v100 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v100 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  MEMORY[0x24BDAC7A8](v8);
  v110 = (uint64_t)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData();
  v107 = *(_QWORD *)(v10 - 8);
  v108 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v109 = (uint64_t *)((char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  MEMORY[0x24BDAC7A8](v12);
  v105 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v102 = *(_QWORD *)(v14 - 8);
  v103 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v104 = (uint64_t *)((char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v16);
  v101 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document(0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = v23;
  v24 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v111 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v23, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  v112 = *(int *)(v21 + 20);
  v25 = *(_QWORD **)&v23[v112];
  swift_beginAccess();
  v26 = v25[2];
  v27 = v25[3];
  v28 = &v24[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_headline];
  swift_beginAccess();
  *(_QWORD *)v28 = v26;
  *((_QWORD *)v28 + 1) = v27;
  v29 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30 = v25[4];
  v31 = v25[5];
  v32 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_subHeadline];
  swift_beginAccess();
  *(_QWORD *)v32 = v30;
  *((_QWORD *)v32 + 1) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v33 = v25[6];
  v34 = v25[7];
  v35 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_version];
  swift_beginAccess();
  *(_QWORD *)v35 = v33;
  *((_QWORD *)v35 + 1) = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v36 = v25[8];
  v37 = v25[9];
  v38 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_creator];
  swift_beginAccess();
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v39 = v25[10];
  v40 = v25[11];
  v41 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_abstract];
  swift_beginAccess();
  *(_QWORD *)v41 = v39;
  *((_QWORD *)v41 + 1) = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v42 = v25[12];
  v43 = v25[13];
  v44 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_comment];
  swift_beginAccess();
  *(_QWORD *)v44 = v42;
  *((_QWORD *)v44 + 1) = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v45 = v25[14];
  v46 = v25[15];
  v47 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_text];
  swift_beginAccess();
  *(_QWORD *)v47 = v45;
  *((_QWORD *)v47 + 1) = v46;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v48 = v25[16];
  v49 = v25[17];
  v50 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_inLanguage];
  swift_beginAccess();
  *(_QWORD *)v50 = v48;
  *((_QWORD *)v50 + 1) = v49;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v51 = v25[18];
  v52 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_keywords];
  swift_beginAccess();
  *(_QWORD *)v52 = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v53 = v25[19];
  v54 = v25[20];
  v55 = &v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_identifier];
  swift_beginAccess();
  *(_QWORD *)v55 = v53;
  *((_QWORD *)v55 + 1) = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  v56 = (uint64_t)&v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_url];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, v56, &demangling cache variable for type metadata for URL?);
  swift_endAccess();
  v58 = v112;
  v57 = v113;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  v59 = (uint64_t)&v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_thumbnailUrl];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, v59, &demangling cache variable for type metadata for URL?);
  swift_endAccess();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  URL.init(string:)();
  swift_bridgeObjectRelease();
  v60 = (uint64_t)&v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_significantLink];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, v60, &demangling cache variable for type metadata for URL?);
  swift_endAccess();
  v61 = v58;
  v62 = v57;
  swift_beginAccess();
  v63 = (uint64_t)v101;
  Date.init(timeIntervalSinceReferenceDate:)();
  v64 = type metadata accessor for Date();
  v65 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
  v65(v63, 0, 1, v64);
  v66 = (uint64_t)&v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateCreated];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v63, v66, &demangling cache variable for type metadata for Date?);
  swift_endAccess();
  swift_beginAccess();
  Date.init(timeIntervalSinceReferenceDate:)();
  v65(v63, 0, 1, v64);
  v106 = v29;
  v67 = (uint64_t)&v29[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_dateModified];
  swift_beginAccess();
  outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v63, v67, &demangling cache variable for type metadata for Date?);
  swift_endAccess();
  v68 = *(_QWORD *)&v62[v61];
  swift_beginAccess();
  v69 = *(char **)(v68 + 232);
  v114 = MEMORY[0x24BEE4AF8];
  v70 = *((_QWORD *)v69 + 2);
  if (v70)
  {
    v71 = (uint64_t)&v69[(*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80)];
    v72 = *(_QWORD *)(v100 + 72);
    v101 = v69;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v71, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
      v73 = specialized DUDocumentUIElement.__allocating_init<A>(proto:)((uint64_t)v5);
      v74 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
      if (v73)
      {
        MEMORY[0x22E2AFAFC](v74);
        if (*(_QWORD *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v71 += v72;
      --v70;
    }
    while (v70);
    v75 = v114;
  }
  else
  {
    swift_bridgeObjectRetain();
    v75 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v76 = v106;
  v77 = &v106[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentUIElements];
  swift_beginAccess();
  *(_QWORD *)v77 = v75;
  swift_bridgeObjectRelease();
  v79 = v112;
  v78 = (uint64_t)v113;
  v80 = *(_QWORD *)&v113[v112]
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentHtmldata;
  swift_beginAccess();
  v81 = v105;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v80, v105, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v82 = v103;
  v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v81, 1, v103);
  v84 = v108;
  v85 = v104;
  if (v83 == 1)
  {
    *v104 = 0;
    v85[1] = 0xE000000000000000;
    UnknownStorage.init()();
    v86 = (char *)v85 + *(int *)(v82 + 24);
    v87 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 1, 1, v87);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v81, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v81, (uint64_t)v104, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  }
  v88 = specialized DUDocumentHTMLData.__allocating_init<A>(proto:)((uint64_t)v85);
  v89 = (void **)&v76[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentHTMLData];
  swift_beginAccess();
  v90 = *v89;
  *v89 = v88;

  v91 = *(_QWORD *)(v78 + v79)
      + OBJC_IVAR____TtCV21DocumentUnderstanding53DocumentUnderstanding_DocumentRepresentation_DocumentP33_B25D73F1E23932B4C52C7495EED50DAA13_StorageClass__documentMessageData;
  swift_beginAccess();
  v92 = v91;
  v93 = v110;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v92, v110, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v93, 1, v84) == 1)
  {
    v94 = v109;
    *v109 = 0;
    v94[1] = 0xE000000000000000;
    v94[2] = 0;
    v94[3] = 0xE000000000000000;
    v95 = MEMORY[0x24BEE4AF8];
    v94[4] = MEMORY[0x24BEE4AF8];
    v94[5] = v95;
    v94[6] = 0;
    v94[7] = 0xE000000000000000;
    v94[8] = 0;
    v94[9] = 0xE000000000000000;
    UnknownStorage.init()();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v93, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData?);
  }
  else
  {
    v94 = v109;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v93, (uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentMessageData);
  }
  v96 = specialized DUDocumentMessageData.__allocating_init<A>(proto:)((uint64_t)v94);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v111, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v78, type metadata accessor for DocumentUnderstanding_DocumentRepresentation_Document);
  v97 = (void **)&v76[OBJC_IVAR____TtC21DocumentUnderstanding13DURawDocument_documentMessageData];
  swift_beginAccess();
  v98 = *v97;
  *v97 = v96;

  return v76;
}

id specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  id v21;
  void *v22;
  id v23;
  char *v24;
  id v25;
  objc_super v32;

  v13 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentBody];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = (void **)&v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_document];
  *(_QWORD *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_document] = 0;
  v15 = (uint64_t)&v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_associatedFileURL];
  v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = (uint64_t)&v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_updateTimestamp];
  v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentAttributes];
  *(_QWORD *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentAttributes] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentID] = a1;
  swift_beginAccess();
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v20 = v9;
  v21 = a1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v22 = *v14;
  *v14 = a4;
  v23 = a4;

  swift_beginAccess();
  outlined assign with copy of URL?(a5, v15, &demangling cache variable for type metadata for URL?);
  swift_endAccess();
  v24 = &v20[OBJC_IVAR____TtC21DocumentUnderstanding16DUDocumentUpdate_documentType];
  *(_QWORD *)v24 = a6;
  *((_QWORD *)v24 + 1) = a7;
  swift_beginAccess();
  outlined assign with copy of URL?(a8, v17, &demangling cache variable for type metadata for Date?);
  swift_endAccess();
  swift_beginAccess();
  *(_QWORD *)v19 = a9;

  swift_bridgeObjectRelease();
  v32.receiver = v20;
  v32.super_class = (Class)type metadata accessor for DUDocumentUpdate();
  v25 = objc_msgSendSuper2(&v32, sel_init);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a8, &demangling cache variable for type metadata for Date?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a5, &demangling cache variable for type metadata for URL?);
  return v25;
}

uint64_t type metadata accessor for DUDocumentUpdate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DUDocumentUpdate;
  if (!type metadata singleton initialization cache for DUDocumentUpdate)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocumentUpdate()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ObjC metadata update function for DUDocumentUpdate()
{
  return type metadata accessor for DUDocumentUpdate();
}

void type metadata completion function for DUDocumentUpdate()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_22838A1F4()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentUpdate);
}

uint64_t outlined assign with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t DUCategoryClassificationSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUCategoryClassificationSpecification.phaseID.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t DUCategoryClassificationSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUCategoryClassificationSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUCategoryClassificationSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUCategoryClassificationSpecification()
{
  return 0xD00000000000001DLL;
}

uint64_t DUCategoryClassificationSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 80) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v4;
  *v4 = v2;
  v4[1] = DUCategoryClassificationSpecification.attachResultsToResponse(response:processingRequest:);
  return v6(a2);
}

uint64_t DUCategoryClassificationSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUCategoryClassificationSpecification.attachResultsToResponse(response:processingRequest:)()
{
  uint64_t v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  void (*v23)(uint64_t, _QWORD);
  Swift::String v24;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v3 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 80)) + 0xF8);
    v4 = (id)v3();
    if (!v4)
      v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUCategoryClassificationResponse()), sel_init);
    v5 = (*(uint64_t (**)(id))((*v2 & **(_QWORD **)(v0 + 80)) + 0x100))(v4);
    v6 = ((uint64_t (*)(uint64_t))v3)(v5);
    if (v6)
    {
      v7 = (_QWORD *)v6;
      v8 = (_QWORD *)v3();
      if (v8)
      {
        v9 = v8;
        v10 = (*(uint64_t (**)(void))((*v2 & *v8) + 0x60))();

      }
      else
      {
        v10 = MEMORY[0x24BEE4AF8];
      }
      (*(void (**)(uint64_t))((*v2 & *v7) + 0x68))(v10);

    }
    v11 = (_QWORD *)v3();
    if (v11)
    {
      v12 = v11;
      v13 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v2 & *v11) + 0x70))(v0 + 16);
      specialized Array.append<A>(contentsOf:)(v1);
      v13(v0 + 16, 0);

    }
    else
    {
      v14 = swift_bridgeObjectRelease();
    }
    v15 = ((uint64_t (*)(uint64_t))v3)(v14);
    if (v15)
    {
      v16 = (_QWORD *)v15;
      v17 = (_QWORD *)v3();
      if (!v17 || (v18 = v17, v19 = (id)(*(uint64_t (**)(void))((*v2 & *v17) + 0x78))(), v18, !v19))
        v19 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      (*(void (**)(id))((*v2 & *v16) + 0x80))(v19);

    }
    v20 = (_QWORD *)v3();
    if (v20)
    {
      v21 = v20;
      v22 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v20) + 0x78))();

      if (v22)
      {
        v23 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v2 & *v22) + 0x68))(v0 + 48);
        v24._object = (void *)0x80000002284DE4B0;
        v24._countAndFlagsBits = 0xD00000000000001DLL;
        String.append(_:)(v24);
        v23(v0 + 48, 0);

      }
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id DUCategoryClassificationSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 256;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DUCategoryClassificationSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  v5[10] = a1;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v6 = (_QWORD *)swift_task_alloc();
  v5[11] = v6;
  *v6 = v5;
  v6[1] = DUCategoryClassificationSpecification.attachResultsToResponse(response:processingRequest:);
  return v8(a2);
}

id protocol witness for TopLevelSpecificationProtocol.associatedRequestTypes.getter in conformance DUCategoryClassificationSpecification()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 256;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUCategoryClassificationSpecification()
{
  return objc_opt_self();
}

uint64_t static PoemStreamUtilities.updatePoemUsingBufferEvents()()
{
  uint64_t v0;
  unint64_t v1;
  double v2;
  uint64_t v3;
  _QWORD v5[7];
  _BYTE v6[32];
  double v7;
  char v8;

  type metadata accessor for PoemAggregationModelHandler();
  swift_allocObject();
  v0 = PoemAggregationModelHandler.init()();
  v1 = specialized static PoemStreamUtilities.fetchBufferEvents()();
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v0 + 200))(v5);
  outlined init with take of PoemModelingParameters?((uint64_t)v5, (uint64_t)v6);
  v2 = v7;
  if (v8)
    v2 = 0.45;
  v3 = static PoemStreamUtilities.convertBufferEventsToConversations(bufferEvents:threshold:)(v1, v2);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 336))(v3, 1);
  swift_release();
  return swift_release();
}

void static PoemStreamUtilities.poemEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:threshold:)(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id v27;
  double v28;
  double v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  double v46;
  char isUniquelyReferenced_nonNull_native;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD v60[2];
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74[7];

  v68 = a3;
  v7 = type metadata accessor for Logger();
  v70 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v69 = (char *)v60 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v66 = (char *)v60 - v13;
  v14 = *(_QWORD *)(a1 + 16);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14 == v55)
    {
      v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16)
        goto LABEL_4;
LABEL_34:
      swift_bridgeObjectRelease();
      v56 = swift_bridgeObjectRetain();
      specialized Sequence.compactMap<A>(_:)(v56, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, double))partial apply for closure #1 in static PoemStreamUtilities.poemEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:threshold:));
      swift_bridgeObjectRelease_n();
      return;
    }
LABEL_35:
    Logger.init()();
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_2282CC000, v57, v58, "PoemStreamUtilities: Keys count mismatch during aggregation model inference", v59, 2u);
      MEMORY[0x22E2B117C](v59, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v70 + 8))(v10, v7);
    return;
  }
  if (v14 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_35;
  v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v16 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16)
    goto LABEL_34;
LABEL_4:
  if (v16 < 1)
    goto LABEL_39;
  v67 = v15;
  v65 = v14;
  v18 = 0;
  v19 = (uint64_t *)(a1 + 40);
  v71 = 0x80000002284DE520;
  v72 = a2 & 0xC000000000000001;
  *(_QWORD *)&v17 = 134218240;
  v62 = v17;
  *(_QWORD *)&v17 = 134218242;
  v61 = v17;
  v60[1] = MEMORY[0x24BEE4AD8] + 8;
  v63 = v16;
  v64 = v7;
  while (1)
  {
    if (v72)
    {
      v20 = (void *)MEMORY[0x22E2AFF34](v18, a2);
    }
    else
    {
      v20 = *(void **)(a2 + 8 * v18 + 32);
      swift_unknownObjectRetain();
    }
    swift_unknownObjectRetain_n();
    v21 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000010, v71);
    v22 = objc_msgSend(v20, sel_featureValueForName_, v21);

    if (!v22)
    {
      swift_unknownObjectRelease_n();
      goto LABEL_7;
    }
    v23 = objc_msgSend(v22, sel_dictionaryValue);
    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v73 = 1;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v24 + 16))
    {
      v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v74);
      if ((v26 & 1) != 0)
        break;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v74);
    swift_unknownObjectRelease_n();

LABEL_7:
    ++v18;
    v19 += 2;
    if (v16 == v18)
      goto LABEL_34;
  }
  v27 = *(id *)(*(_QWORD *)(v24 + 56) + 8 * v25);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v74);
  objc_msgSend(v27, sel_doubleValue);
  v29 = v28;
  swift_unknownObjectRelease_n();

  if (v29 < a4)
  {
    Logger.init()();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      *(_DWORD *)v32 = v62;
      *(double *)(v32 + 4) = v29;
      *(_WORD *)(v32 + 12) = 2048;
      *(double *)(v32 + 14) = a4;
      _os_log_impl(&dword_2282CC000, v30, v31, "PoemStreamUtilities: Found a prediction with %f less than threshold %f", (uint8_t *)v32, 0x16u);
      MEMORY[0x22E2B117C](v32, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {

      swift_unknownObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v7);
    goto LABEL_7;
  }
  if (v18 < v65)
  {
    v33 = *(v19 - 1);
    v34 = *v19;
    v35 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 352);
    swift_bridgeObjectRetain();
    v36 = v35(v33, v34);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease();
    v43 = v67;
    if (*(_QWORD *)(v67 + 16))
    {
      swift_bridgeObjectRetain();
      v44 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
      if ((v45 & 1) != 0)
      {
        v46 = *(double *)(*(_QWORD *)(v43 + 56) + 24 * v44 + 16);
        swift_bridgeObjectRelease();
        if (v46 >= v29)
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = v64;
LABEL_30:
          v16 = v63;
          goto LABEL_7;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v74[0] = v43;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, v38, v40, v42, isUniquelyReferenced_nonNull_native, v29);
    v67 = v74[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = v66;
    Logger.init()();
    swift_bridgeObjectRetain();
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc();
      v52 = swift_slowAlloc();
      v74[0] = v52;
      *(_DWORD *)v51 = v61;
      *(double *)(v51 + 4) = v29;
      *(_WORD *)(v51 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v51 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v74);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v49, v50, "PoemStreamUtilities: Found a confident model prediction with %f for %s", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v52, -1, -1);
      MEMORY[0x22E2B117C](v51, -1, -1);
      swift_unknownObjectRelease();

      v53 = *(void (**)(char *, uint64_t))(v70 + 8);
      v54 = v66;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      v53 = *(void (**)(char *, uint64_t))(v70 + 8);
      v54 = v48;
    }
    v7 = v64;
    v53(v54, v64);
    goto LABEL_30;
  }
  __break(1u);
LABEL_39:
  __break(1u);
}

void *static PoemStreamUtilities.getModelConfidence(output:)(void *a1)
{
  return specialized static PoemStreamUtilities.getModelConfidence(output:)(a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t (*v5)(void *, uint64_t);
  id v6;

  v5 = *(uint64_t (**)(void *, uint64_t))(a1 + 32);
  v6 = a2;
  LOBYTE(a3) = v5(a2, a3);

  return a3 & 1;
}

uint64_t static PoemStreamUtilities.updateInferencesInPoemStream(poemInferences:)(unint64_t a1)
{
  uint8_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char **v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  unint64_t v39;
  uint64_t v40;

  v3 = type metadata accessor for Logger();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  v9 = os_log_type_enabled((os_log_t)v7, v8);
  v10 = a1 >> 62;
  v36 = a1;
  if (!v9)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  v1 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v1 = 134217984;
  if (v10)
    goto LABEL_36;
  v11 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v38 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2282CC000, (os_log_t)v7, v8, "PoemStreamUtilities: Found %ld events using buffer stream", v1, 0xCu);
    MEMORY[0x22E2B117C](v1, -1, -1);

LABEL_6:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v37 = specialized static PoemStreamUtilities.fetchPoemEvents()();
    v40 = MEMORY[0x24BEE4B08];
    v39 = MEMORY[0x24BEE4AF8];
    if (v10)
    {
      v4 = v36;
      if (v36 < 0)
        v6 = (char *)v36;
      else
        v6 = (char *)(v36 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      v10 = v37;
      if (!v7)
      {
LABEL_33:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = MEMORY[0x24BEE4B08];
        v33 = MEMORY[0x24BEE4AF8];
        goto LABEL_34;
      }
    }
    else
    {
      v4 = v36;
      v7 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v10 = v37;
      if (!v7)
        goto LABEL_33;
    }
    if (v7 >= 1)
      break;
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v12 = 0;
  v13 = v4 & 0xC000000000000001;
  v14 = &selRef_e1946_;
  do
  {
    if (v13)
      v15 = (id)MEMORY[0x22E2AFF34](v12, v4);
    else
      v15 = *(id *)(v4 + 8 * v12 + 32);
    v16 = v15;
    v17 = objc_msgSend(v15, v14[271], v36);
    if (!v17
      || (v18 = v17, v19 = objc_msgSend(v17, sel_person), v18, !v19)
      || (v20 = objc_msgSend(v19, sel_visualIdentifier), v19, !v20))
    {

      goto LABEL_11;
    }
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    v24 = v37;
    if (!*(_QWORD *)(v37 + 16))
      goto LABEL_24;
    swift_bridgeObjectRetain();
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v23);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_24:
      specialized Set._Variant.insert(_:)(&v38, v21, v23);
      swift_bridgeObjectRelease();
      v32 = v16;
      MEMORY[0x22E2AFAFC]();
      if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_27;
    }
    v27 = *(id *)(*(_QWORD *)(v24 + 56) + 8 * v25);
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_confidence);
    v29 = v28;
    objc_msgSend(v27, sel_confidence);
    v31 = v30;

    if (v31 < v29)
      goto LABEL_24;

    swift_bridgeObjectRelease();
LABEL_27:
    v14 = &selRef_e1946_;
    v4 = v36;
LABEL_11:
    ++v12;
  }
  while (v7 != v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v39;
  v34 = v40;
LABEL_34:
  specialized static PoemStreamUtilities.prunePoemEventsByVisualId(eventVisualIds:)(v34);
  swift_bridgeObjectRelease();
  specialized static PoemStreamUtilities.addInferencesToPoemStream(poemInferences:)(v33);
  return swift_bridgeObjectRelease();
}

id closure #1 in static PoemStreamUtilities.fetchPoemEvents()(void *a1)
{
  return closure #1 in static PoemStreamUtilities.fetchPoemEvents()(a1, "PoemStreamUtilities: Error while reading poem stream: %@");
}

void closure #2 in static PoemStreamUtilities.fetchPoemEvents()(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  id v14;
  uint64_t v15;

  v3 = objc_msgSend(a1, sel_eventBody);
  if (v3)
  {
    v14 = v3;
    v4 = objc_msgSend(v3, sel_object);
    if (v4
      && (v5 = v4, v6 = objc_msgSend(v4, sel_person), v5, v6)
      && (v7 = objc_msgSend(v6, sel_visualIdentifier), v6, v7))
    {
      v8 = (uint64_t *)(a2 + 16);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      swift_beginAccess();
      v12 = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15 = *v8;
      *v8 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, v9, v11, isUniquelyReferenced_nonNull_native);
      *v8 = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();

    }
    else
    {

    }
  }
}

uint64_t closure #1 in static PoemStreamUtilities.prunePoemEventsByVisualId(eventVisualIds:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
    return 0;
  v4 = objc_msgSend(a1, sel_eventBody);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = objc_msgSend(v4, sel_object);

  if (!v6)
    return 0;
  v7 = objc_msgSend(v6, sel_person);

  if (!v7)
    return 0;
  v8 = objc_msgSend(v7, sel_visualIdentifier);

  if (!v8)
    return 0;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v12 = specialized Set.contains(_:)(v9, v11, a3);
  swift_bridgeObjectRelease();
  return v12 & 1;
}

id closure #1 in static PoemStreamUtilities.fetchBufferEvents()(void *a1)
{
  return closure #1 in static PoemStreamUtilities.fetchPoemEvents()(a1, "PoemStreamUtilities: Error while reading buffer stream: %@");
}

id closure #1 in static PoemStreamUtilities.fetchPoemEvents()(void *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id result;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, sel_error);
  if (result)
  {
    v9 = result;
    Logger.init()();
    v10 = v9;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v19 = v4;
      v13 = swift_slowAlloc();
      v18 = a2;
      v14 = (uint8_t *)v13;
      v15 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v14 = 138412290;
      v10 = v10;
      v16 = _swift_stdlib_bridgeErrorToNSError();
      v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v15 = v16;
      v4 = v19;

      _os_log_impl(&dword_2282CC000, v11, v12, v18, v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v15, -1, -1);
      MEMORY[0x22E2B117C](v14, -1, -1);
    }
    else
    {

      v11 = v10;
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

void closure #2 in static PoemStreamUtilities.fetchBufferEvents()(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  id v6;

  v3 = objc_msgSend(a1, sel_eventBody);
  if (v3)
  {
    v4 = v3;
    v5 = (_QWORD *)(a2 + 16);
    swift_beginAccess();
    v6 = v4;
    MEMORY[0x22E2AFAFC]();
    if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t static PoemStreamUtilities.inferredContentType(bufferEvent:)(void *a1)
{
  if (objc_msgSend(a1, sel_photoAttachment))
    return 0x742E63696C627570;
  else
    return 0x6D2E63696C627570;
}

uint64_t static PoemStreamUtilities.trimPunctuationsAndSpaces(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for CharacterSet();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1;
  v15 = a2;
  static CharacterSet.punctuationCharacters.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v8 = StringProtocol.trimmingCharacters(in:)();
  v10 = v9;
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  v14 = v8;
  v15 = v10;
  static CharacterSet.whitespacesAndNewlines.getter();
  v12 = StringProtocol.trimmingCharacters(in:)();
  v11(v7, v4);
  swift_bridgeObjectRelease();
  return v12;
}

BOOL static PoemStreamUtilities.detectURL(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  id v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v24[2];

  v24[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone(MEMORY[0x24BDD14E8]);
  v24[0] = 0;
  v9 = objc_msgSend(v8, sel_initWithTypes_error_, 32, v24);
  if (v9)
  {
    v10 = v9;
    v11 = v24[0];
    v12 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
    swift_bridgeObjectRetain();
    v13 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v10, sel_matchesInString_options_range_, v12, 0, 0, v13);

    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();

    }
    return v16 != 0;
  }
  else
  {
    v18 = v24[0];
    v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    Logger.init()();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_2282CC000, v20, v21, "PoemStreamUtilities: Unable to check for URL", v22, 2u);
      MEMORY[0x22E2B117C](v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v6;
  uint64_t v8[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v4;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v4 < 0 || (v4 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v8[0] = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  v8[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  return specialized Array._endMutation()();
}

uint64_t static PoemStreamUtilities.convertBufferEventsToConversations(bufferEvents:threshold:)(unint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  uint64_t *v14;

  v14 = (uint64_t *)MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2AFF34](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v13 = v6;
      closure #1 in static PoemStreamUtilities.convertBufferEventsToConversations(bufferEvents:threshold:)(&v13, &v12, a2);

      if (v12)
      {
        MEMORY[0x22E2AFAFC]();
        if (*(_QWORD *)(((unint64_t)v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v14 & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v5;
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        v9 = v14;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)MEMORY[0x24BEE4AF8];
LABEL_17:
  v10 = specialized static PoemStreamUtilities.formatMessagesToConversations(messages:)(v9);
  swift_bridgeObjectRelease();
  return v10;
}

id closure #1 in static PoemStreamUtilities.convertBufferEventsToConversations(bufferEvents:threshold:)@<X0>(id *a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  id result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE v44[32];

  v43 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v39 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v39 - v16;
  v18 = *a1;
  result = objc_msgSend(*a1, sel_conversationId);
  if (!result)
    goto LABEL_16;
  v20 = result;
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  v23 = objc_msgSend(v18, sel_spotlightId);
  if (!v23)
  {
    result = (id)swift_bridgeObjectRelease();
LABEL_16:
    v34 = 0;
    goto LABEL_17;
  }
  v24 = v23;
  v42 = v22;
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = v25;

  v27 = objc_msgSend(v18, sel_messageTimestamp);
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_15;
  }
  v28 = v27;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v29(v7, v15, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = (id)outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for Date?);
    goto LABEL_16;
  }
  v29(v17, v7, v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v17, v8);
  v30 = v26;
  swift_bridgeObjectRetain();
  v31 = objc_msgSend(v18, sel_photoAttachment);
  if (v31)
    v32 = 0x742E63696C627570;
  else
    v32 = 0x6D2E63696C627570;
  if (v31)
    v33 = 0xEB00000000747865;
  else
    v33 = 0xEE00656761737365;
  type metadata accessor for PoemMessage();
  swift_allocObject();
  v34 = PoemMessage.init(chatId:id:time:type:text:)(v41, v42, v40, v26, (uint64_t)v12, v32, v33, 0, 0xE000000000000000);
  v35 = objc_msgSend(v18, sel_extractions);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for BMTextUnderstandingPoemBufferExtraction);
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t))(*v34 + 664))(v36);
  swift_bridgeObjectRelease();
  if (objc_msgSend(v18, sel_photoAttachment))
  {
    v37 = specialized static PoemStreamUtilities.getMADExtractions(identifier:threshold:)(v40, v30, a3);
    swift_bridgeObjectRelease();
    v38 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*v34 + 496))(v44);
    specialized Array.append<A>(contentsOf:)(v37);
    v38(v44, 0);
    result = (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v17, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    result = (id)swift_bridgeObjectRelease();
  }
LABEL_17:
  *v43 = v34;
  return result;
}

uint64_t static PoemStreamUtilities.getAnnotation(photoId:entityName:photoIdToName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  if (!*(_QWORD *)(a5 + 16))
    return -1;
  swift_bridgeObjectRetain();
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return -1;
  }
  v12 = (uint64_t *)(*(_QWORD *)(a5 + 56) + 16 * v10);
  v14 = *v12;
  v13 = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v14 == a3 && v13 == a4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
      return 0;
  }
  return 1;
}

BOOL static PoemStreamUtilities.containsPronoun(text:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _BOOL8 v13;
  _QWORD v15[4];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[2] = a1;
  v15[3] = a2;
  v15[0] = a3;
  v15[1] = a4;
  v11 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.range<A>(of:options:range:locale:)();
  v13 = (v12 & 1) == 0;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
  return v13;
}

uint64_t closure #1 in static PoemStreamUtilities.numberOfPeopleFromPhotos()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v6 = (uint64_t *)(a4 + 16);
  v7 = objc_msgSend(a1, sel_name);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    swift_bridgeObjectRelease();
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v9 & 0xFFFFFFFFFFFFLL;
    if (!v12)
      goto LABEL_11;
    v6 = (uint64_t *)(a5 + 16);
    result = swift_beginAccess();
    v14 = *(_QWORD *)(a5 + 16) + 1;
    if (!__OFADD__(*(_QWORD *)(a5 + 16), 1))
      goto LABEL_12;
    __break(1u);
  }
  result = swift_beginAccess();
  v14 = *v6 + 1;
  if (!__OFADD__(*v6, 1))
    goto LABEL_12;
  __break(1u);
LABEL_11:
  result = swift_beginAccess();
  v14 = *v6 + 1;
  if (!__OFADD__(*v6, 1))
  {
LABEL_12:
    *v6 = v14;
    return result;
  }
  __break(1u);
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed PHPerson, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;

  a4();
  v5 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t (*v24)(_QWORD);
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t *v66;
  Swift::Int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t (*v73)(_QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t (*v99)(_QWORD);
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  Swift::Int v156;
  char *v157;
  uint64_t (*v158)(_QWORD);
  Swift::Int v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  _QWORD *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (*v169)(_QWORD);
  void (*v170)(char *, uint64_t);
  uint64_t (*v171)(uint64_t);
  uint64_t (*v172)(_QWORD);
  uint64_t v173;

  v3 = v2;
  v6 = type metadata accessor for Date();
  v164 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v152 - v10;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_162;
    if (v12)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1, a2);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_171;
  v156 = result;
  v165 = v11;
  v166 = v9;
  v167 = v6;
  v163 = a2;
  v15 = v12;
  v152 = a1;
  if (v12 < 2)
  {
    v18 = (char *)MEMORY[0x24BEE4AF8];
    v173 = MEMORY[0x24BEE4AF8];
    v162 = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v12 != 1)
    {
      v96 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      goto LABEL_126;
    }
  }
  else
  {
    v16 = v14 >> 1;
    type metadata accessor for PoemMessage();
    v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
    v162 = (char *)((v17 & 0xFFFFFFFFFFFFFF8) + 32);
    v173 = v17;
  }
  v19 = 0;
  v20 = *a1;
  v21 = *a1 + 16;
  v153 = *a1 - 8;
  v154 = v21;
  v18 = (char *)MEMORY[0x24BEE4AF8];
  v159 = v12;
  v168 = v20;
  do
  {
    v22 = v19;
    v23 = v19 + 1;
    v158 = (uint64_t (*)(_QWORD))v19;
    if (v19 + 1 < v15)
    {
      v24 = *(uint64_t (**)(_QWORD))(v20 + 8 * v23);
      v25 = *(_QWORD *)(v20 + 8 * v19);
      v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 312);
      swift_retain();
      v27 = swift_retain();
      v28 = v165;
      v171 = v26;
      v172 = v24;
      v29 = v26(v27);
      v30 = *(void (**)(uint64_t))(*(_QWORD *)v25 + 312);
      v31 = v166;
      v30(v29);
      v32 = lazy protocol witness table accessor for type Date and conformance Date();
      v33 = v167;
      v160 = (_QWORD *)v32;
      v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v35 = *(void (**)(char *, uint64_t))(v164 + 8);
      v170 = v35;
      v35(v31, v33);
      v36 = ((uint64_t (*)(char *, uint64_t))v35)(v28, v33);
      if ((v34 & 1) != 0)
      {
        v37 = v172;
        if (__OFADD__(*v163, 1))
          goto LABEL_163;
        ++*v163;
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 240))(v36);
        v40 = v39;
        v42 = (*(uint64_t (**)(void))(*(_QWORD *)v25 + 240))() == v38 && v41 == v40;
        LODWORD(v171) = v42 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
        v22 = (uint64_t)v158;
        v15 = v159;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v43 = v171(v36);
        v30(v43);
        v44 = v170;
        LODWORD(v171) = static Date.> infix(_:_:)();
        v44(v31, v33);
        v44(v28, v33);
        v22 = (uint64_t)v158;
        v15 = v159;
      }
      swift_release();
      swift_release();
      v23 = v22 + 2;
      if (v22 + 2 < v15)
      {
        v155 = v18;
        v45 = v154 + 8 * v22;
        while (1)
        {
          v169 = (uint64_t (*)(_QWORD))v23;
          v161 = v3;
          v46 = *(_QWORD *)(v45 - 8);
          v47 = *(_QWORD *)v45;
          v48 = *(uint64_t (**)(_QWORD))(**(_QWORD **)v45 + 312);
          swift_retain();
          v49 = swift_retain();
          v50 = v165;
          v172 = v48;
          v51 = v48(v49);
          v52 = *(void (**)(uint64_t))(*(_QWORD *)v46 + 312);
          v53 = v166;
          v52(v51);
          v54 = v167;
          v55 = dispatch thunk of static Equatable.== infix(_:_:)();
          v56 = (uint64_t (*)(char *, uint64_t))v170;
          v170(v53, v54);
          v57 = v56(v50, v54);
          if ((v55 & 1) != 0)
          {
            if (__OFADD__(*v163, 1))
              goto LABEL_154;
            ++*v163;
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 240))(v57);
            v60 = v59;
            v62 = (*(uint64_t (**)(void))(*(_QWORD *)v46 + 240))() == v58 && v61 == v60;
            v63 = v62 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
            v15 = v159;
            v3 = v161;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v64 = (void (*)(char *, uint64_t))v56;
            v65 = v172(v57);
            v52(v65);
            v63 = static Date.> infix(_:_:)();
            v64(v53, v54);
            v64(v50, v54);
            v15 = v159;
            v3 = v161;
          }
          swift_release();
          swift_release();
          v23 = (Swift::Int)v169;
          if (((v171 ^ v63) & 1) != 0)
            break;
          v23 = (Swift::Int)v169 + 1;
          v45 += 8;
          if ((uint64_t (*)(_QWORD))v15 == (uint64_t (*)(_QWORD))((char *)v169 + 1))
          {
            v23 = v15;
            break;
          }
        }
        v18 = v155;
        v22 = (uint64_t)v158;
      }
      v20 = v168;
      if ((v171 & 1) != 0)
      {
        if (v23 < v22)
          goto LABEL_166;
        if (v22 < v23)
        {
          v66 = (uint64_t *)(v153 + 8 * v23);
          v67 = v23;
          v68 = v22;
          v69 = (uint64_t *)(v168 + 8 * v22);
          do
          {
            if (v68 != --v67)
            {
              if (!v20)
                goto LABEL_169;
              v70 = *v69;
              *v69 = *v66;
              *v66 = v70;
            }
            ++v68;
            --v66;
            ++v69;
          }
          while (v68 < v67);
        }
      }
    }
    if (v23 >= v15)
      goto LABEL_75;
    if (__OFSUB__(v23, v22))
      goto LABEL_161;
    if (v23 - v22 >= v156)
      goto LABEL_75;
    if (__OFADD__(v22, v156))
      goto LABEL_164;
    if (v22 + v156 >= v15)
      v71 = (char *)v15;
    else
      v71 = (char *)(v22 + v156);
    if ((uint64_t)v71 < v22)
      goto LABEL_165;
    if ((char *)v23 == v71)
      goto LABEL_75;
    v155 = v18;
    v161 = v3;
    v72 = (_QWORD *)(v153 + 8 * v23);
    v157 = v71;
    while (2)
    {
      v74 = *(_QWORD *)(v20 + 8 * v23);
      v160 = v72;
      v169 = (uint64_t (*)(_QWORD))v23;
      while (1)
      {
        v172 = (uint64_t (*)(_QWORD))v22;
        v75 = *v72;
        v76 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 312);
        swift_retain();
        v77 = swift_retain();
        v78 = v165;
        v171 = v76;
        v79 = v76(v77);
        v80 = v166;
        v170 = *(void (**)(char *, uint64_t))(*(_QWORD *)v75 + 312);
        ((void (*)(uint64_t))v170)(v79);
        lazy protocol witness table accessor for type Date and conformance Date();
        v81 = v167;
        v82 = dispatch thunk of static Equatable.== infix(_:_:)();
        v83 = *(void (**)(char *, uint64_t))(v164 + 8);
        v83(v80, v81);
        v84 = ((uint64_t (*)(char *, uint64_t))v83)(v78, v81);
        if ((v82 & 1) == 0)
        {
          v91 = v171(v84);
          ((void (*)(uint64_t))v170)(v91);
          v92 = static Date.> infix(_:_:)();
          v83(v80, v81);
          v83(v78, v81);
          swift_release();
          swift_release();
          if ((v92 & 1) == 0)
            goto LABEL_59;
          goto LABEL_71;
        }
        if (__OFADD__(*v163, 1))
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
          goto LABEL_157;
        }
        ++*v163;
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 240))(v84);
        v87 = v86;
        if ((*(uint64_t (**)(void))(*(_QWORD *)v75 + 240))() == v85 && v88 == v87)
          break;
        v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v90 & 1) == 0)
          goto LABEL_59;
LABEL_71:
        v20 = v168;
        if (!v168)
          goto LABEL_167;
        v93 = *v72;
        v74 = v72[1];
        *v72 = v74;
        v72[1] = v93;
        --v72;
        v22 = (uint64_t)v172 + 1;
        v73 = v169;
        if (v169 == (uint64_t (*)(_QWORD))((char *)v172 + 1))
          goto LABEL_60;
      }
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
LABEL_59:
      v20 = v168;
      v73 = v169;
LABEL_60:
      v23 = (Swift::Int)v73 + 1;
      v72 = v160 + 1;
      v22 = (uint64_t)v158;
      if ((char *)v23 != v157)
        continue;
      break;
    }
    v23 = (Swift::Int)v157;
    v3 = v161;
    v18 = v155;
LABEL_75:
    if (v23 < v22)
      goto LABEL_156;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v95 = *((_QWORD *)v18 + 2);
    v94 = *((_QWORD *)v18 + 3);
    v96 = v95 + 1;
    v20 = v168;
    v169 = (uint64_t (*)(_QWORD))v23;
    if (v95 >= v94 >> 1)
    {
      v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v94 > 1), v95 + 1, 1, v18);
      v20 = v168;
      v18 = v145;
    }
    *((_QWORD *)v18 + 2) = v96;
    v97 = v18 + 32;
    v98 = &v18[16 * v95 + 32];
    v99 = v169;
    *(_QWORD *)v98 = v22;
    *((_QWORD *)v98 + 1) = v99;
    if (v95)
    {
      while (1)
      {
        v100 = v96 - 1;
        if (v96 >= 4)
        {
          v105 = &v97[16 * v96];
          v106 = *((_QWORD *)v105 - 8);
          v107 = *((_QWORD *)v105 - 7);
          v111 = __OFSUB__(v107, v106);
          v108 = v107 - v106;
          if (v111)
            goto LABEL_144;
          v110 = *((_QWORD *)v105 - 6);
          v109 = *((_QWORD *)v105 - 5);
          v111 = __OFSUB__(v109, v110);
          v103 = v109 - v110;
          v104 = v111;
          if (v111)
            goto LABEL_145;
          v112 = v96 - 2;
          v113 = &v97[16 * v96 - 32];
          v115 = *(_QWORD *)v113;
          v114 = *((_QWORD *)v113 + 1);
          v111 = __OFSUB__(v114, v115);
          v116 = v114 - v115;
          if (v111)
            goto LABEL_147;
          v111 = __OFADD__(v103, v116);
          v117 = v103 + v116;
          if (v111)
            goto LABEL_150;
          if (v117 >= v108)
          {
            v135 = &v97[16 * v100];
            v137 = *(_QWORD *)v135;
            v136 = *((_QWORD *)v135 + 1);
            v111 = __OFSUB__(v136, v137);
            v138 = v136 - v137;
            if (v111)
              goto LABEL_155;
            v128 = v103 < v138;
            goto LABEL_112;
          }
        }
        else
        {
          if (v96 != 3)
          {
            v129 = *((_QWORD *)v18 + 4);
            v130 = *((_QWORD *)v18 + 5);
            v111 = __OFSUB__(v130, v129);
            v122 = v130 - v129;
            v123 = v111;
            goto LABEL_106;
          }
          v102 = *((_QWORD *)v18 + 4);
          v101 = *((_QWORD *)v18 + 5);
          v111 = __OFSUB__(v101, v102);
          v103 = v101 - v102;
          v104 = v111;
        }
        if ((v104 & 1) != 0)
          goto LABEL_146;
        v112 = v96 - 2;
        v118 = &v97[16 * v96 - 32];
        v120 = *(_QWORD *)v118;
        v119 = *((_QWORD *)v118 + 1);
        v121 = __OFSUB__(v119, v120);
        v122 = v119 - v120;
        v123 = v121;
        if (v121)
          goto LABEL_149;
        v124 = &v97[16 * v100];
        v126 = *(_QWORD *)v124;
        v125 = *((_QWORD *)v124 + 1);
        v111 = __OFSUB__(v125, v126);
        v127 = v125 - v126;
        if (v111)
          goto LABEL_152;
        if (__OFADD__(v122, v127))
          goto LABEL_153;
        if (v122 + v127 >= v103)
        {
          v128 = v103 < v127;
LABEL_112:
          if (v128)
            v100 = v112;
          goto LABEL_114;
        }
LABEL_106:
        if ((v123 & 1) != 0)
          goto LABEL_148;
        v131 = &v97[16 * v100];
        v133 = *(_QWORD *)v131;
        v132 = *((_QWORD *)v131 + 1);
        v111 = __OFSUB__(v132, v133);
        v134 = v132 - v133;
        if (v111)
          goto LABEL_151;
        if (v134 < v122)
          goto LABEL_123;
LABEL_114:
        v139 = v100 - 1;
        if (v100 - 1 >= v96)
          goto LABEL_140;
        if (!v20)
          goto LABEL_168;
        v140 = &v97[16 * v139];
        v141 = *(_QWORD *)v140;
        v142 = &v97[16 * v100];
        v143 = *((_QWORD *)v142 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v20 + 8 * *(_QWORD *)v140), (char *)(v20 + 8 * *(_QWORD *)v142), (char *)(v20 + 8 * v143), v162, v163);
        if (v3)
          goto LABEL_137;
        if (v143 < v141)
          goto LABEL_141;
        if (v100 > *((_QWORD *)v18 + 2))
          goto LABEL_142;
        *(_QWORD *)v140 = v141;
        *(_QWORD *)&v97[16 * v139 + 8] = v143;
        v144 = *((_QWORD *)v18 + 2);
        if (v100 >= v144)
          goto LABEL_143;
        v96 = v144 - 1;
        memmove(&v97[16 * v100], v142 + 16, 16 * (v144 - 1 - v100));
        *((_QWORD *)v18 + 2) = v144 - 1;
        v20 = v168;
        if (v144 <= 2)
          goto LABEL_123;
      }
    }
    v96 = 1;
LABEL_123:
    v15 = v159;
    v19 = (uint64_t)v169;
  }
  while ((uint64_t)v169 < v159);
LABEL_126:
  if (v96 < 2)
  {
LABEL_137:
    swift_bridgeObjectRelease();
    *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v146 = *v152;
    while (1)
    {
      v147 = v96 - 2;
      if (v96 < 2)
        break;
      if (!v146)
        goto LABEL_170;
      v148 = *(_QWORD *)&v18[16 * v147 + 32];
      v149 = *(_QWORD *)&v18[16 * v96 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v146 + 8 * v148), (char *)(v146 + 8 * *(_QWORD *)&v18[16 * v96 + 16]), (char *)(v146 + 8 * v149), v162, v163);
      if (v3)
        goto LABEL_137;
      if (v149 < v148)
        goto LABEL_158;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v18);
      if (v147 >= *((_QWORD *)v18 + 2))
        goto LABEL_159;
      v150 = &v18[16 * v147 + 32];
      *(_QWORD *)v150 = v148;
      *((_QWORD *)v150 + 1) = v149;
      v151 = *((_QWORD *)v18 + 2);
      if (v96 > v151)
        goto LABEL_160;
      memmove(&v18[16 * v96 + 16], &v18[16 * v96 + 32], 16 * (v151 - v96));
      *((_QWORD *)v18 + 2) = v151 - 1;
      v96 = v151 - 1;
      if (v151 <= 2)
        goto LABEL_137;
    }
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  char v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;

  v40 = a5;
  v37 = a1;
  v8 = type metadata accessor for Date();
  v41 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v35 - v13;
  v36 = a2;
  if (a3 == a2)
    return result;
  v42 = *a4;
  v15 = (_QWORD *)(v42 + 8 * a3 - 8);
  v39 = v8;
LABEL_6:
  v17 = *(_QWORD *)(v42 + 8 * a3);
  v45 = v37;
  v38 = v15;
  v43 = a3;
  while (1)
  {
    v18 = *v15;
    v19 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 312);
    swift_retain();
    v20 = swift_retain();
    v44 = v19;
    v21 = v19(v20);
    v22 = *(void (**)(uint64_t))(*(_QWORD *)v18 + 312);
    v22(v21);
    lazy protocol witness table accessor for type Date and conformance Date();
    v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    v24 = v11;
    v25 = *(void (**)(char *, uint64_t))(v41 + 8);
    v25(v24, v8);
    result = ((uint64_t (*)(char *, uint64_t))v25)(v14, v8);
    if ((v23 & 1) == 0)
    {
      v32 = v44(result);
      v22(v32);
      v33 = static Date.> infix(_:_:)();
      v25(v24, v8);
      v25(v14, v8);
      swift_release();
      result = swift_release();
      v16 = v43;
      v11 = v24;
      if ((v33 & 1) == 0)
        goto LABEL_5;
      goto LABEL_16;
    }
    if (__OFADD__(*v40, 1))
      break;
    v11 = v24;
    ++*v40;
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 240))(result);
    v28 = v27;
    if ((*(uint64_t (**)(void))(*(_QWORD *)v18 + 240))() == v26 && v29 == v28)
    {
      swift_release();
      swift_release();
      result = swift_bridgeObjectRelease_n();
      v16 = v43;
      v8 = v39;
LABEL_5:
      a3 = v16 + 1;
      v15 = v38 + 1;
      if (a3 == v36)
        return result;
      goto LABEL_6;
    }
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v16 = v43;
    v8 = v39;
    if ((v31 & 1) == 0)
      goto LABEL_5;
LABEL_16:
    if (!v42)
      goto LABEL_20;
    v34 = *v15;
    v17 = v15[1];
    *v15 = v17;
    v15[1] = v34;
    --v15;
    if (v16 == ++v45)
      goto LABEL_5;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, char *a3, char *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  char *v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  char *v53;
  uint64_t v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  uint64_t v64;
  char v65;
  char *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t result;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;

  v74 = a5;
  v9 = type metadata accessor for Date();
  v80 = *(_QWORD *)(v9 - 8);
  v81 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v79 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v78 = (char *)&v73 - v12;
  v13 = a2 - a1;
  v14 = a2 - a1 + 7;
  if (a2 - a1 >= 0)
    v14 = a2 - a1;
  v15 = v14 >> 3;
  v16 = a3 - a2;
  v17 = a3 - a2 + 7;
  if (a3 - a2 >= 0)
    v17 = a3 - a2;
  v18 = v17 >> 3;
  v88 = a1;
  v87 = a4;
  if (v15 >= v17 >> 3)
  {
    if (v16 < -7)
      goto LABEL_64;
    if (a4 != a2 || &a2[8 * v18] <= a4)
      memmove(a4, a2, 8 * v18);
    v44 = &a4[8 * v18];
    v86 = v44;
    v88 = a2;
    if (v16 < 8 || a1 >= a2)
      goto LABEL_61;
    v45 = a2;
    v83 = a1;
    v84 = a4;
    while (1)
    {
      v85 = a2;
      v82 = a3;
      v77 = v44;
      v46 = *((_QWORD *)v44 - 1);
      v47 = *((_QWORD *)v45 - 1);
      v75 = v44 - 8;
      v76 = v45 - 8;
      v48 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 312);
      swift_retain();
      v49 = swift_retain();
      v50 = v78;
      v51 = v48(v49);
      v52 = *(void (**)(uint64_t))(*(_QWORD *)v47 + 312);
      v53 = v79;
      v52(v51);
      lazy protocol witness table accessor for type Date and conformance Date();
      v54 = v81;
      v55 = dispatch thunk of static Equatable.== infix(_:_:)();
      v56 = *(void (**)(char *, uint64_t))(v80 + 8);
      v56(v53, v54);
      v57 = ((uint64_t (*)(char *, uint64_t))v56)(v50, v54);
      if ((v55 & 1) != 0)
      {
        if (__OFADD__(*v74, 1))
          goto LABEL_63;
        ++*v74;
        v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 240))(v57);
        v60 = v59;
        if ((*(uint64_t (**)(void))(*(_QWORD *)v47 + 240))() == v58 && v61 == v60)
          v63 = 0;
        else
          v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v66 = v82;
        v67 = (unint64_t)v85;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        a3 = v66 - 8;
        if ((v63 & 1) == 0)
        {
LABEL_55:
          v70 = v75;
          v86 = v75;
          v68 = v83;
          v71 = v84;
          if (v66 < v77 || a3 >= v77 || v66 != v77)
            *(_QWORD *)a3 = *(_QWORD *)v75;
          v45 = (char *)v67;
          v44 = v70;
          if (v70 <= v71)
            goto LABEL_61;
          goto LABEL_60;
        }
      }
      else
      {
        v64 = v48(v57);
        v52(v64);
        v65 = static Date.> infix(_:_:)();
        v56(v53, v54);
        v56(v50, v54);
        swift_release();
        swift_release();
        v66 = v82;
        a3 = v82 - 8;
        v67 = (unint64_t)v85;
        if ((v65 & 1) == 0)
          goto LABEL_55;
      }
      v68 = v83;
      v69 = v84;
      v45 = v76;
      if (v66 != (char *)v67 || (unint64_t)a3 >= v67)
        *(_QWORD *)a3 = *(_QWORD *)v76;
      v88 = v45;
      v44 = v77;
      if (v77 <= v69)
        goto LABEL_61;
LABEL_60:
      a2 = v45;
      if (v45 <= v68)
        goto LABEL_61;
    }
  }
  if (v13 < -7)
    goto LABEL_64;
  if (a4 != a1 || &a1[8 * v15] <= a4)
    memmove(a4, a1, 8 * v15);
  v77 = &a4[8 * v15];
  v86 = v77;
  if (v13 < 8 || a2 >= a3)
  {
LABEL_61:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v88, &v87, &v86);
    return 1;
  }
  v82 = a3;
  while (1)
  {
    v83 = a1;
    v84 = a4;
    v85 = a2;
    v19 = *(_QWORD *)a2;
    v20 = *(_QWORD *)a4;
    v21 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 312);
    swift_retain();
    v22 = swift_retain();
    v23 = v78;
    v24 = v21(v22);
    v25 = *(void (**)(uint64_t))(*(_QWORD *)v20 + 312);
    v26 = v79;
    v25(v24);
    lazy protocol witness table accessor for type Date and conformance Date();
    v27 = v81;
    v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v29 = *(void (**)(char *, uint64_t))(v80 + 8);
    v29(v26, v27);
    v30 = ((uint64_t (*)(char *, uint64_t))v29)(v23, v27);
    if ((v28 & 1) != 0)
      break;
    v40 = v21(v30);
    v25(v40);
    v41 = static Date.> infix(_:_:)();
    v29(v26, v27);
    v29(v23, v27);
    swift_release();
    swift_release();
    v38 = v82;
    a4 = v84;
    v39 = v85;
    if ((v41 & 1) != 0)
    {
LABEL_22:
      v42 = v39 + 8;
      v43 = v83;
      if (v83 < v39 || v83 >= v42 || v83 != v39)
        *(_QWORD *)v83 = *(_QWORD *)v39;
      goto LABEL_30;
    }
LABEL_27:
    v43 = v83;
    if (v83 != a4)
      *(_QWORD *)v83 = *(_QWORD *)a4;
    a4 += 8;
    v87 = a4;
    v42 = v39;
LABEL_30:
    a1 = v43 + 8;
    v88 = a1;
    if (a4 < v77)
    {
      a2 = v42;
      if (v42 < v38)
        continue;
    }
    goto LABEL_61;
  }
  if (!__OFADD__(*v74, 1))
  {
    v31 = v84;
    ++*v74;
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 240))(v30);
    v34 = v33;
    if ((*(uint64_t (**)(void))(*(_QWORD *)v20 + 240))() == v32 && v35 == v34)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      a4 = v31;
      v38 = v82;
      v39 = v85;
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4 = v31;
      v38 = v82;
      v39 = v85;
      if ((v37 & 1) != 0)
        goto LABEL_22;
    }
    goto LABEL_27;
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static PoemStreamUtilities.normalizedName(name:)()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  String.lowercased()();
  v0 = lazy protocol witness table accessor for type String and conformance String();
  v1 = (_QWORD *)MEMORY[0x22E2AFE50](32, 0xE100000000000000, 1, 1, MEMORY[0x24BEE0D00], v0);
  swift_bridgeObjectRelease();
  if (v1[2])
  {
    v2 = v1[4];
    v3 = v1[5];
    v4 = v1[6];
    v5 = v1[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x22E2AF988](v2, v3, v4, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

_QWORD *specialized static PoemStreamUtilities.fetchSurroundingMessages(messages:pivot:contextWindowSize:)(unint64_t a1, int64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v6 = (_QWORD *)type metadata accessor for Logger();
  v7 = *(v6 - 1);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 0)
    goto LABEL_49;
  if (a1 >> 62)
    goto LABEL_48;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v10 <= a2)
  {
LABEL_49:
    Logger.init()();
    swift_bridgeObjectRetain_n();
    v25 = a1;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc();
      *(_DWORD *)v28 = 134218240;
      v34 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2048;
      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v29 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v26, v27, "PoemStreamUtilities: Invalid pivot %ld for messages count: %ld", (uint8_t *)v28, 0x16u);
      MEMORY[0x22E2B117C](v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, _QWORD *))(v7 + 8))(v9, v6);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    while (1)
    {
      v31 = v10;
      v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v33 = a1;
      if (a2 && a3 > 1)
      {
        v11 = a1 & 0xC000000000000001;
        v32 = a1 & 0xFFFFFFFFFFFFFF8;
        v12 = 1;
        v13 = a2;
        while (1)
        {
          v14 = a3;
          a3 = v13 - 1;
          if (v11)
          {
            v9 = (char *)MEMORY[0x22E2AFF34](v13 - 1, a1);
          }
          else
          {
            if ((unint64_t)a3 >= *(_QWORD *)(v32 + 16))
              goto LABEL_47;
            v9 = *(char **)(a1 + 8 * v13 + 24);
            swift_retain();
          }
          v7 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 656))();
          swift_release();
          if ((v7 & 1) != 0)
          {
            if (v11)
            {
              v9 = (char *)MEMORY[0x22E2AFF34](v13 - 1, a1);
            }
            else
            {
              v9 = *(char **)(a1 + 8 * v13 + 24);
              swift_retain();
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
            v16 = v6[2];
            v15 = v6[3];
            v7 = v16 + 1;
            if (v16 >= v15 >> 1)
              v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v6);
            v6[2] = v7;
            v17 = &v6[2 * v16];
            v17[4] = v9;
            v17[5] = v12++;
            a1 = v33;
          }
          if (v13 < 2)
            break;
          --v13;
          a3 = v14;
          if (v12 >= v14)
            goto LABEL_24;
        }
        a3 = v14;
      }
LABEL_24:
      if (a3 < 1)
        break;
      v7 = 0;
      v18 = a1 & 0xC000000000000001;
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
      v20 = v31;
      while (1)
      {
        if (v18)
        {
          v9 = (char *)MEMORY[0x22E2AFF34](a2, a1);
        }
        else
        {
          if (a2 < 0)
            goto LABEL_45;
          if ((unint64_t)a2 >= *(_QWORD *)(v19 + 16))
            goto LABEL_46;
          v9 = *(char **)(a1 + 8 * a2 + 32);
          swift_retain();
        }
        v21 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 656))();
        swift_release();
        if ((v21 & 1) != 0)
        {
          if (v18)
          {
            v9 = (char *)MEMORY[0x22E2AFF34](a2, a1);
          }
          else
          {
            v9 = *(char **)(a1 + 8 * a2 + 32);
            swift_retain();
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
          v23 = v6[2];
          v22 = v6[3];
          if (v23 >= v22 >> 1)
            v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v6);
          v6[2] = v23 + 1;
          v24 = &v6[2 * v23];
          v24[4] = v9;
          v24[5] = v7++;
          a1 = v33;
        }
        if (__OFADD__(a2, 1))
          break;
        if (a2 + 1 < v20)
        {
          ++a2;
          if (v7 < a3)
            continue;
        }
        return v6;
      }
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 <= a2)
        goto LABEL_49;
    }
  }
  return v6;
}

uint64_t specialized static PoemStreamUtilities.fetchSurroundingEntities(messages:index:contextWindowSize:)(unint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  void *v80;
  unint64_t v81;
  char v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  char v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  void *v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  _BOOL8 v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  char v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  id v142;
  void *v143;
  uint64_t v144;
  id v145;
  void *v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  char v150;
  unint64_t v151;
  uint64_t v152;
  _BOOL8 v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  char v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t result;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;

  v7 = type metadata accessor for Logger();
  v171 = *(_QWORD *)(v7 - 8);
  v172 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v173 = (char *)&v170 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = a2;
  v175 = a1;
  v9 = specialized static PoemStreamUtilities.fetchSurroundingMessages(messages:pivot:contextWindowSize:)(a1, a2, a3)[2];
  if (v9)
  {
    v185 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v10 = 32;
    do
    {
      swift_retain();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v10 += 16;
      --v9;
    }
    while (v9);
    v11 = (unint64_t)v185;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (v11 >> 62)
    goto LABEL_104;
  v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v13)
  {
    v14 = 0;
    v178 = v11;
    v179 = v11 & 0xC000000000000001;
    v176 = v11 + 32;
    v177 = v13;
    while (1)
    {
      if (v179)
      {
        v181 = MEMORY[0x22E2AFF34](v14, v11);
        v15 = __OFADD__(v14, 1);
        v16 = v14 + 1;
        if (v15)
          goto LABEL_103;
      }
      else
      {
        v181 = *(_QWORD *)(v176 + 8 * v14);
        swift_retain();
        v15 = __OFADD__(v14, 1);
        v16 = v14 + 1;
        if (v15)
          goto LABEL_103;
      }
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)v181 + 504))();
      v3 = v17;
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v180 = v16;
        if (v18)
        {
LABEL_17:
          v183 = v3;
          v184 = v3 & 0xC000000000000001;
          v19 = 4;
          v182 = v18;
          while (1)
          {
            v20 = v184 ? (id)MEMORY[0x22E2AFF34](v19 - 4, v3) : *(id *)(v3 + 8 * v19);
            v21 = v20;
            v22 = v19 - 3;
            if (__OFADD__(v19 - 4, 1))
              break;
            v23 = objc_msgSend(v20, sel_identifier);
            if (v23)
            {
              v24 = v23;
              v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v11 = v26;

              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v185 = v12;
              v3 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v11);
              v29 = v12[2];
              v30 = (v28 & 1) == 0;
              v31 = v29 + v30;
              if (__OFADD__(v29, v30))
                goto LABEL_94;
              v32 = v28;
              if (v12[3] >= v31)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  v12 = v185;
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v31, isUniquelyReferenced_nonNull_native);
                v12 = v185;
                v33 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v11);
                if ((v32 & 1) != (v34 & 1))
                {
LABEL_184:
                  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
                  return result;
                }
                v3 = v33;
              }
              swift_bridgeObjectRelease();
              if ((v32 & 1) == 0)
              {
                v12[(v3 >> 6) + 8] |= 1 << v3;
                v35 = (uint64_t *)(v12[6] + 16 * v3);
                *v35 = v25;
                v35[1] = v11;
                v36 = v12[7] + 40 * v3;
                *(_QWORD *)(v36 + 32) = 0;
                *(_OWORD *)v36 = 0u;
                *(_OWORD *)(v36 + 16) = 0u;
                v37 = v12[2];
                v38 = v37 + 1;
                v39 = __OFADD__(v37, 1);
                swift_bridgeObjectRetain();
                if (v39)
                  goto LABEL_100;
                v12[2] = v38;
              }
              swift_bridgeObjectRetain();
              v40 = v12[7];
              swift_bridgeObjectRelease();
              v41 = (_QWORD *)(v40 + 40 * v3);
              if (__OFADD__(*v41, 1))
                goto LABEL_95;
              ++*v41;

              swift_bridgeObjectRelease();
              v18 = v182;
              v3 = v183;
            }
            else
            {

            }
            ++v19;
            if (v22 == v18)
              goto LABEL_40;
          }
          __break(1u);
          goto LABEL_92;
        }
      }
      else
      {
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v180 = v16;
        if (v18)
          goto LABEL_17;
      }
LABEL_40:
      v42 = swift_bridgeObjectRelease_n();
      v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 528))(v42);
      v11 = v43;
      if (v43 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v71 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v184 = v71;
        if (v71)
        {
LABEL_42:
          v182 = v11;
          v183 = v11 & 0xC000000000000001;
          v45 = 4;
          while (1)
          {
            v46 = v183 ? (id)MEMORY[0x22E2AFF34](v45 - 4, v11) : *(id *)(v11 + 8 * v45);
            v47 = v46;
            v48 = v45 - 3;
            if (__OFADD__(v45 - 4, 1))
              break;
            v49 = objc_msgSend(v46, sel_identifier);
            if (v49)
            {
              v50 = v49;
              v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v11 = v52;

              v53 = swift_isUniquelyReferenced_nonNull_native();
              v185 = v12;
              v3 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v11);
              v55 = v12[2];
              v56 = (v54 & 1) == 0;
              v57 = v55 + v56;
              if (__OFADD__(v55, v56))
                goto LABEL_96;
              v58 = v54;
              if (v12[3] >= v57)
              {
                if ((v53 & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  v12 = v185;
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, v53);
                v12 = v185;
                v59 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v11);
                if ((v58 & 1) != (v60 & 1))
                  goto LABEL_184;
                v3 = v59;
              }
              swift_bridgeObjectRelease();
              if ((v58 & 1) == 0)
              {
                v12[(v3 >> 6) + 8] |= 1 << v3;
                v61 = (uint64_t *)(v12[6] + 16 * v3);
                *v61 = v51;
                v61[1] = v11;
                v62 = v12[7] + 40 * v3;
                *(_QWORD *)(v62 + 32) = 0;
                *(_OWORD *)v62 = 0u;
                *(_OWORD *)(v62 + 16) = 0u;
                v63 = v12[2];
                v64 = v63 + 1;
                v65 = __OFADD__(v63, 1);
                swift_bridgeObjectRetain();
                if (v65)
                  goto LABEL_101;
                v12[2] = v64;
              }
              swift_bridgeObjectRetain();
              v66 = v12[7];
              swift_bridgeObjectRelease();
              v67 = v66 + 40 * v3;
              v69 = *(_QWORD *)(v67 + 8);
              v68 = (_QWORD *)(v67 + 8);
              v70 = v69 + 1;
              if (__OFADD__(v69, 1))
                goto LABEL_97;
              *v68 = v70;

              swift_bridgeObjectRelease();
              v11 = v182;
            }
            else
            {

            }
            ++v45;
            if (v48 == v184)
              goto LABEL_65;
          }
LABEL_92:
          __break(1u);
          goto LABEL_93;
        }
      }
      else
      {
        v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v184 = v44;
        if (v44)
          goto LABEL_42;
      }
LABEL_65:
      v72 = swift_bridgeObjectRelease_n();
      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 600))(v72);
      v11 = v73;
      if (v73 >> 62)
        break;
      v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v184 = v74;
      if (v74)
        goto LABEL_67;
LABEL_9:
      swift_bridgeObjectRelease_n();
      swift_release();
      v11 = v178;
      v14 = v180;
      if (v180 == v177)
        goto LABEL_105;
    }
    swift_bridgeObjectRetain_n();
    v100 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v184 = v100;
    if (!v100)
      goto LABEL_9;
LABEL_67:
    v182 = v11;
    v183 = v11 & 0xC000000000000001;
    v75 = 4;
    while (1)
    {
      v76 = v183 ? (id)MEMORY[0x22E2AFF34](v75 - 4, v11) : *(id *)(v11 + 8 * v75);
      v77 = v76;
      v78 = v75 - 3;
      if (__OFADD__(v75 - 4, 1))
        break;
      v79 = objc_msgSend(v76, sel_identifier);
      if (v79)
      {
        v80 = v79;
        v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v11 = v81;

        v82 = swift_isUniquelyReferenced_nonNull_native();
        v185 = v12;
        v84 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v11);
        v85 = v12[2];
        v86 = (v83 & 1) == 0;
        v87 = v85 + v86;
        if (__OFADD__(v85, v86))
          goto LABEL_98;
        v88 = v83;
        if (v12[3] >= v87)
        {
          if ((v82 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v12 = v185;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v87, v82);
          v12 = v185;
          v89 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v11);
          if ((v88 & 1) != (v90 & 1))
            goto LABEL_184;
          v84 = v89;
        }
        swift_bridgeObjectRelease();
        if ((v88 & 1) == 0)
        {
          v12[(v84 >> 6) + 8] |= 1 << v84;
          v91 = (unint64_t *)(v12[6] + 16 * v84);
          *v91 = v3;
          v91[1] = v11;
          v92 = v12[7] + 40 * v84;
          *(_QWORD *)(v92 + 32) = 0;
          *(_OWORD *)v92 = 0u;
          *(_OWORD *)(v92 + 16) = 0u;
          v93 = v12[2];
          v94 = v93 + 1;
          v3 = __OFADD__(v93, 1);
          swift_bridgeObjectRetain();
          if ((v3 & 1) != 0)
            goto LABEL_102;
          v12[2] = v94;
        }
        swift_bridgeObjectRetain();
        v95 = v12[7];
        swift_bridgeObjectRelease();
        v96 = v95 + 40 * v84;
        v98 = *(_QWORD *)(v96 + 16);
        v97 = (_QWORD *)(v96 + 16);
        v99 = v98 + 1;
        if (__OFADD__(v98, 1))
          goto LABEL_99;
        *v97 = v99;

        swift_bridgeObjectRelease();
        v11 = v182;
      }
      else
      {

      }
      ++v75;
      if (v78 == v184)
        goto LABEL_9;
    }
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    swift_bridgeObjectRetain_n();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_105:
  swift_bridgeObjectRelease_n();
  v101 = v174;
  if (v174 < 0)
    goto LABEL_140;
  if (v175 >> 62)
    goto LABEL_139;
  if (*(_QWORD *)((v175 & 0xFFFFFFFFFFFFF8) + 0x10) <= v174)
  {
LABEL_140:
    Logger.init()();
    v133 = v175;
    swift_bridgeObjectRetain_n();
    v134 = Logger.logObject.getter();
    v135 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v134, v135))
    {
      v136 = swift_slowAlloc();
      *(_DWORD *)v136 = 134218240;
      v185 = (_QWORD *)v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v136 + 12) = 2048;
      if (v133 >> 62)
      {
        swift_bridgeObjectRetain();
        v137 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v137 = *(_QWORD *)((v133 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v185 = (_QWORD *)v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v134, v135, "PoemStreamUtilities: Invalid index %ld for messages count: %ld", (uint8_t *)v136, 0x16u);
      MEMORY[0x22E2B117C](v136, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v171 + 8))(v173, v172);
    return (uint64_t)v12;
  }
  while (1)
  {
    v102 = v175 & 0xC000000000000001;
    if ((v175 & 0xC000000000000001) == 0)
      break;
    v104 = MEMORY[0x22E2AFF34](v101);
    v103 = v104;
LABEL_111:
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 552))(v104);
    swift_release();
    if (v3 >> 62)
      goto LABEL_149;
    v105 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v181 = v102;
    if (!v105)
      goto LABEL_150;
LABEL_113:
    v183 = v3;
    v184 = v3 & 0xC000000000000001;
    v106 = 4;
    v182 = v105;
    while (1)
    {
      v107 = v184 ? (id)MEMORY[0x22E2AFF34](v106 - 4, v3) : *(id *)(v3 + 8 * v106);
      v108 = v107;
      v109 = v106 - 3;
      if (__OFADD__(v106 - 4, 1))
        break;
      v110 = objc_msgSend(v107, sel_identifier);
      if (v110)
      {
        v111 = v110;
        v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v113 = v112;

        v114 = swift_isUniquelyReferenced_nonNull_native();
        v185 = v12;
        v116 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v113);
        v117 = v12[2];
        v118 = (v115 & 1) == 0;
        v119 = v117 + v118;
        if (__OFADD__(v117, v118))
          goto LABEL_136;
        v120 = v115;
        if (v12[3] >= v119)
        {
          if ((v114 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v12 = v185;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v119, v114);
          v12 = v185;
          v121 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v113);
          if ((v120 & 1) != (v122 & 1))
            goto LABEL_184;
          v116 = v121;
        }
        swift_bridgeObjectRelease();
        if ((v120 & 1) == 0)
        {
          v12[(v116 >> 6) + 8] |= 1 << v116;
          v123 = (unint64_t *)(v12[6] + 16 * v116);
          *v123 = v3;
          v123[1] = v113;
          v124 = v12[7] + 40 * v116;
          *(_QWORD *)(v124 + 32) = 0;
          *(_OWORD *)v124 = 0u;
          *(_OWORD *)(v124 + 16) = 0u;
          v125 = v12[2];
          v126 = v125 + 1;
          v3 = __OFADD__(v125, 1);
          swift_bridgeObjectRetain();
          if ((v3 & 1) != 0)
            goto LABEL_138;
          v12[2] = v126;
        }
        swift_bridgeObjectRetain();
        v127 = v12[7];
        swift_bridgeObjectRelease();
        v128 = v127 + 40 * v116;
        v130 = *(_QWORD *)(v128 + 24);
        v129 = (_QWORD *)(v128 + 24);
        v131 = v130 + 1;
        if (__OFADD__(v130, 1))
          goto LABEL_137;
        *v129 = v131;

        swift_bridgeObjectRelease();
        v105 = v182;
        v3 = v183;
      }
      else
      {

      }
      ++v106;
      if (v109 == v105)
        goto LABEL_150;
    }
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    swift_bridgeObjectRetain();
    v132 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v101 = v174;
    if (v132 <= v174)
      goto LABEL_140;
  }
  if (*(_QWORD *)((v175 & 0xFFFFFFFFFFFFF8) + 0x10) > v101)
  {
    v103 = *(_QWORD *)(v175 + 8 * v101 + 32);
    v104 = swift_retain();
    goto LABEL_111;
  }
  __break(1u);
LABEL_149:
  swift_bridgeObjectRetain_n();
  v105 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v181 = v102;
  if (v105)
    goto LABEL_113;
LABEL_150:
  swift_bridgeObjectRelease_n();
  if (v181)
  {
    v138 = MEMORY[0x22E2AFF34](v174, v175);
  }
  else
  {
    v138 = *(_QWORD *)(v175 + 8 * v174 + 32);
    swift_retain();
  }
  v139 = (*(uint64_t (**)(void))(*(_QWORD *)v138 + 576))();
  swift_release();
  if (v139 >> 62)
    goto LABEL_181;
  v140 = *(_QWORD *)((v139 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v184 = v140;
  if (v140)
  {
    do
    {
      v182 = v139;
      v183 = v139 & 0xC000000000000001;
      v141 = 4;
      while (1)
      {
        v142 = v183 ? (id)MEMORY[0x22E2AFF34](v141 - 4, v139) : *(id *)(v139 + 8 * v141);
        v143 = v142;
        v144 = v141 - 3;
        if (__OFADD__(v141 - 4, 1))
          break;
        v145 = objc_msgSend(v142, sel_identifier);
        if (v145)
        {
          v146 = v145;
          v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v139 = v148;

          v149 = swift_isUniquelyReferenced_nonNull_native();
          v185 = v12;
          v151 = specialized __RawDictionaryStorage.find<A>(_:)(v147, v139);
          v152 = v12[2];
          v153 = (v150 & 1) == 0;
          v154 = v152 + v153;
          if (__OFADD__(v152, v153))
            goto LABEL_178;
          v155 = v150;
          if (v12[3] >= v154)
          {
            if ((v149 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              v12 = v185;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v154, v149);
            v12 = v185;
            v156 = specialized __RawDictionaryStorage.find<A>(_:)(v147, v139);
            if ((v155 & 1) != (v157 & 1))
              goto LABEL_184;
            v151 = v156;
          }
          swift_bridgeObjectRelease();
          if ((v155 & 1) == 0)
          {
            v12[(v151 >> 6) + 8] |= 1 << v151;
            v158 = (uint64_t *)(v12[6] + 16 * v151);
            *v158 = v147;
            v158[1] = v139;
            v159 = v12[7] + 40 * v151;
            *(_QWORD *)(v159 + 32) = 0;
            *(_OWORD *)v159 = 0u;
            *(_OWORD *)(v159 + 16) = 0u;
            v160 = v12[2];
            v161 = v160 + 1;
            v162 = __OFADD__(v160, 1);
            swift_bridgeObjectRetain();
            if (v162)
              goto LABEL_180;
            v12[2] = v161;
          }
          swift_bridgeObjectRetain();
          v163 = v12[7];
          swift_bridgeObjectRelease();
          v164 = v163 + 40 * v151;
          v166 = *(_QWORD *)(v164 + 32);
          v165 = (_QWORD *)(v164 + 32);
          v167 = v166 + 1;
          if (__OFADD__(v166, 1))
            goto LABEL_179;
          *v165 = v167;

          swift_bridgeObjectRelease();
          v139 = v182;
        }
        else
        {

        }
        ++v141;
        if (v144 == v184)
          goto LABEL_182;
      }
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      swift_bridgeObjectRetain_n();
      v168 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v184 = v168;
    }
    while (v168);
  }
LABEL_182:
  swift_bridgeObjectRelease_n();
  return (uint64_t)v12;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD, uint64_t, double))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;

  v24 = MEMORY[0x24BEE4AF8];
  v22 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = (double *)(*(_QWORD *)(a1 + 56) + 24 * v10);
    v18 = *v17;
    v19 = *((_QWORD *)v17 + 1);
    v20 = v17[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = a2(v15, v16, *(_QWORD *)&v18, v19, v20);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v21)
    {
      MEMORY[0x22E2AFAFC](result);
      if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v23)
    goto LABEL_26;
  v12 = *(_QWORD *)(v22 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v23)
    goto LABEL_26;
  v12 = *(_QWORD *)(v22 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v23)
    goto LABEL_26;
  v12 = *(_QWORD *)(v22 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v23)
    goto LABEL_26;
  v12 = *(_QWORD *)(v22 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v23)
  {
LABEL_26:
    swift_release();
    return v24;
  }
  v12 = *(_QWORD *)(v22 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v23)
      goto LABEL_26;
    v12 = *(_QWORD *)(v22 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized static PoemStreamUtilities.formatMessagesToConversations(messages:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD *);
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t (*v53)(_QWORD *);
  uint64_t *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t result;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  __int128 v68;
  unint64_t v69;
  uint64_t (*v70)(void);
  void (*v71)(_QWORD *, _QWORD);
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[4];
  uint64_t v77;

  v2 = 0;
  isUniquelyReferenced_nonNull_native = type metadata accessor for Logger();
  v4 = *(_QWORD *)(isUniquelyReferenced_nonNull_native - 8);
  MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
  v6 = (unint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PoemConversations();
  swift_allocObject();
  v73 = PoemConversations.init()();
  v77 = 0;
  if ((unint64_t)a1 >> 62)
    goto LABEL_58;
  v7 = *(_QWORD *)(((unint64_t)a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v65 = isUniquelyReferenced_nonNull_native;
  v64 = v4;
  v63 = v6;
  v74 = v2;
  if (!v7)
  {
LABEL_28:
    v44 = swift_bridgeObjectRelease();
    v45 = (*(uint64_t (**)(uint64_t))(*v73 + 136))(v44);
    v2 = v45;
    v6 = (unint64_t)&v62;
    a1 = (uint64_t *)(v45 + 64);
    v46 = 1 << *(_BYTE *)(v45 + 32);
    v47 = -1;
    if (v46 < 64)
      v47 = ~(-1 << v46);
    v48 = v47 & *(_QWORD *)(v45 + 64);
    v49 = (unint64_t)(v46 + 63) >> 6;
    swift_bridgeObjectRetain();
    v50 = 0;
    while (1)
    {
      if (v48)
      {
        v51 = __clz(__rbit64(v48));
        v48 &= v48 - 1;
        v52 = v51 | (v50 << 6);
      }
      else
      {
        v42 = __OFADD__(v50++, 1);
        if (v42)
        {
          __break(1u);
          goto LABEL_55;
        }
        if (v50 >= v49)
        {
LABEL_51:
          swift_release();
          swift_bridgeObjectRelease();
          v57 = v63;
          Logger.init()();
          v58 = Logger.logObject.getter();
          v59 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v58, v59))
          {
            v60 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v60 = 134217984;
            swift_beginAccess();
            v75 = v77;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_2282CC000, v58, v59, "Found message date-time conflicts: %ld times", v60, 0xCu);
            MEMORY[0x22E2B117C](v60, -1, -1);
          }

          (*(void (**)(unint64_t, uint64_t))(v64 + 8))(v57, v65);
          return (uint64_t)v73;
        }
        v55 = a1[v50];
        if (!v55)
        {
          v56 = v50 + 1;
          if (v50 + 1 >= v49)
            goto LABEL_51;
          v55 = a1[v56];
          if (!v55)
          {
            v56 = v50 + 2;
            if (v50 + 2 >= v49)
              goto LABEL_51;
            v55 = a1[v56];
            if (!v55)
            {
              v56 = v50 + 3;
              if (v50 + 3 >= v49)
                goto LABEL_51;
              v55 = a1[v56];
              if (!v55)
              {
                v56 = v50 + 4;
                if (v50 + 4 >= v49)
                  goto LABEL_51;
                v55 = a1[v56];
                if (!v55)
                {
                  while (1)
                  {
                    v50 = v56 + 1;
                    if (__OFADD__(v56, 1))
                      break;
                    if (v50 >= v49)
                      goto LABEL_51;
                    v55 = a1[v50];
                    ++v56;
                    if (v55)
                      goto LABEL_46;
                  }
LABEL_57:
                  __break(1u);
LABEL_58:
                  swift_bridgeObjectRetain();
                  v7 = _CocoaArrayWrapper.endIndex.getter();
                  goto LABEL_3;
                }
              }
            }
          }
          v50 = v56;
        }
LABEL_46:
        v48 = (v55 - 1) & v55;
        v52 = __clz(__rbit64(v55)) + (v50 << 6);
      }
      v53 = *(uint64_t (**)(_QWORD *))(**(_QWORD **)(*(_QWORD *)(v2 + 56) + 8 * v52) + 152);
      swift_bridgeObjectRetain();
      swift_retain();
      v4 = v53(v76);
      isUniquelyReferenced_nonNull_native = v74;
      specialized MutableCollection<>.sort(by:)(v54, &v77);
      v74 = isUniquelyReferenced_nonNull_native;
      ((void (*)(_QWORD *, _QWORD))v4)(v76, 0);
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = *(uint64_t (**)(void))(*v73 + 136);
    v69 = (unint64_t)a1 & 0xC000000000000001;
    v70 = v9;
    v68 = xmmword_2284C1ED0;
    v67 = a1;
    v66 = v7;
    while (1)
    {
      if (v69)
      {
        v11 = MEMORY[0x22E2AFF34](v8, a1);
      }
      else
      {
        v11 = a1[v8 + 4];
        swift_retain();
      }
      v12 = *(uint64_t (**)(void))(*(_QWORD *)v11 + 216);
      v13 = v12();
      v15 = v14;
      v16 = v70();
      if (*(_QWORD *)(v16 + 16))
      {
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15);
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
          swift_retain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v20 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v19 + 152);
          swift_retain();
          isUniquelyReferenced_nonNull_native = v20(v76);
          v22 = v21;
          MEMORY[0x22E2AFAFC]();
          v4 = *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v4 >= *(_QWORD *)((*v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          ((void (*)(_QWORD *, _QWORD))isUniquelyReferenced_nonNull_native)(v76, 0);
          swift_release();
          goto LABEL_8;
        }
      }
      swift_bridgeObjectRelease();
      v23 = swift_bridgeObjectRelease();
      v72 = ((uint64_t (*)(uint64_t))v12)(v23);
      v25 = v24;
      v26 = v12();
      v4 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v68;
      *(_QWORD *)(v28 + 32) = v11;
      v76[0] = v28;
      specialized Array._endMutation()();
      v29 = v76[0];
      type metadata accessor for PoemMessageThread();
      v30 = (_QWORD *)swift_allocObject();
      v30[2] = 0;
      v30[3] = 0xE000000000000000;
      v30[4] = MEMORY[0x24BEE4AF8];
      v31 = MEMORY[0x24BEE4B08];
      v30[5] = MEMORY[0x24BEE4B08];
      v30[6] = v31;
      swift_beginAccess();
      v30[2] = v26;
      v30[3] = v4;
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v30[4] = v29;
      swift_bridgeObjectRelease();
      v71 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v73 + 152))(v76);
      a1 = v32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v75 = *a1;
      v33 = v75;
      *a1 = 0x8000000000000000;
      v2 = v72;
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(v72, v25);
      v35 = *(_QWORD *)(v33 + 16);
      v36 = (v34 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
      {
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      v4 = v34;
      if (*(_QWORD *)(v33 + 24) >= v37)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = v75;
          if ((v34 & 1) == 0)
            goto LABEL_24;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          isUniquelyReferenced_nonNull_native = v75;
          if ((v4 & 1) == 0)
            goto LABEL_24;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native);
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v25);
        if ((v4 & 1) != (v39 & 1))
          goto LABEL_60;
        v6 = v38;
        isUniquelyReferenced_nonNull_native = v75;
        if ((v4 & 1) == 0)
        {
LABEL_24:
          *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * (v6 >> 6) + 64) |= 1 << v6;
          v40 = (uint64_t *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v6);
          *v40 = v2;
          v40[1] = v25;
          *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v6) = v30;
          v41 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
          v42 = __OFADD__(v41, 1);
          v43 = v41 + 1;
          if (v42)
            goto LABEL_56;
          *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v43;
          swift_bridgeObjectRetain();
          goto LABEL_7;
        }
      }
      v10 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56);
      v4 = 8 * v6;
      swift_release();
      *(_QWORD *)(v10 + 8 * v6) = v30;
LABEL_7:
      *a1 = isUniquelyReferenced_nonNull_native;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71(v76, 0);
      a1 = v67;
      v7 = v66;
LABEL_8:
      swift_release();
      if (v7 == ++v8)
        goto LABEL_28;
    }
  }
  __break(1u);
LABEL_60:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static PoemStreamUtilities.getMADExtractions(identifier:threshold:)(uint64_t a1, uint64_t a2, double a3)
{
  void (**v6)(char *, uint64_t);
  uint64_t v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  Class isa;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char **v23;
  void *v24;
  id v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  float v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  id v43;
  double v44;
  float v45;
  float v46;
  float v47;
  id v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Class v62;
  id v63;
  void *v64;
  void *v65;
  void *v66;
  Class v67;
  id v68;
  char v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  char v81;
  char isUniquelyReferenced_nonNull_native;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char **v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint8_t *v97;
  _QWORD *v98;
  id v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t result;
  id v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  id v111;
  void *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  Class v120;
  uint64_t v121;
  id v122[3];

  v122[1] = *(id *)MEMORY[0x24BDAC8D0];
  v121 = type metadata accessor for Logger();
  v6 = *(void (***)(char *, uint64_t))(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v8 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v10 = objc_msgSend((id)objc_opt_self(), sel_service);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE64288]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2284C1ED0;
  *(_QWORD *)(v12 + 32) = v11;
  v122[0] = (id)v12;
  specialized Array._endMutation()();
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MADRequest);
  v13 = v11;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
  v122[0] = 0;
  v105 = v10;
  LODWORD(a2) = objc_msgSend(v10, sel_performRequests_onAssetWithSyndicationIdentifier_error_, isa, v15, v122);

  if (!(_DWORD)a2)
  {
    v90 = v122[0];
    v91 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    Logger.init()();
    v92 = v91;
    v93 = v91;
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v120 = (Class)v6;
      v96 = swift_slowAlloc();
      v119 = v8;
      v97 = (uint8_t *)v96;
      v98 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v97 = 138412290;
      v99 = v91;
      v100 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v122[0] = v100;
      v6 = (void (**)(char *, uint64_t))v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v98 = v100;

      _os_log_impl(&dword_2282CC000, v94, v95, "Error while calling MAD: %@", v97, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v98, -1, -1);
      v8 = v119;
      MEMORY[0x22E2B117C](v97, -1, -1);
    }
    else
    {

    }
    v6[1](v8, v121);

    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v16 = v122[0];
  v17 = objc_msgSend(v13, sel_results);
  v18 = v13;
  if (!v17)
  {
    swift_bridgeObjectRelease();

    return MEMORY[0x24BEE4AF8];
  }
  v19 = v17;
  v104 = v18;
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MADResult);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v20 >> 62)
    goto LABEL_61;
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
  {
LABEL_62:
    swift_bridgeObjectRelease();
    v102 = swift_bridgeObjectRetain();
    v101 = specialized _copyCollectionToContiguousArray<A>(_:)(v102);

    swift_bridgeObjectRelease_n();
    return (uint64_t)v101;
  }
LABEL_5:
  v22 = 0;
  v110 = v20 & 0xC000000000000001;
  v107 = v20 & 0xFFFFFFFFFFFFFF8;
  v106 = v20 + 32;
  v23 = &selRef_e1946_;
  v108 = v21;
  v109 = v20;
  while (1)
  {
    if (v110)
    {
      v25 = (id)MEMORY[0x22E2AFF34](v22, v20);
    }
    else
    {
      if (v22 >= *(_QWORD *)(v107 + 16))
        goto LABEL_60;
      v25 = *(id *)(v106 + 8 * v22);
    }
    v24 = v25;
    v26 = __OFADD__(v22++, 1);
    if (v26)
    {
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v21)
        goto LABEL_62;
      goto LABEL_5;
    }
    objc_opt_self();
    v27 = swift_dynamicCastObjCClass();
    if (v27)
      break;
LABEL_7:

    if (v22 == v21)
      goto LABEL_62;
  }
  v28 = (void *)v27;
  v111 = v24;
  v29 = objc_msgSend(v28, sel_resultItems);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MADPersonIdentificationResultItem);
  v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v30 >> 62))
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    v112 = v24;
    v113 = v22;
    if (v31)
      goto LABEL_16;
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v112 = v24;
  v113 = v22;
  if (!v31)
  {
LABEL_6:

    swift_bridgeObjectRelease();
    v21 = v108;
    v20 = v109;
    v24 = v112;
    v22 = v113;
    goto LABEL_7;
  }
LABEL_16:
  v20 = v30 & 0xC000000000000001;
  v32 = 4;
  v114 = v30;
  v115 = v30 & 0xC000000000000001;
  v116 = v31;
  while (1)
  {
    if (v20)
      v33 = (id)MEMORY[0x22E2AFF34](v32 - 4, v30);
    else
      v33 = *(id *)(v30 + 8 * v32);
    v34 = v33;
    v35 = v32 - 3;
    if (__OFADD__(v32 - 4, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    objc_msgSend(v33, v23[274]);
    if (v36 > a3)
      break;

LABEL_18:
    ++v32;
    if (v35 == v31)
      goto LABEL_6;
  }
  v121 = v32 - 3;
  v37 = objc_msgSend(v34, sel_personIdentifier);
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  if (*((_QWORD *)v9 + 2) && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(v38, v40), (v42 & 1) != 0))
  {
    v43 = *(id *)(*((_QWORD *)v9 + 7) + 8 * v41);
    swift_bridgeObjectRelease();
    objc_msgSend(v43, sel_confidenceScore);
    v45 = v44;
    objc_msgSend(v34, v23[274]);
    v47 = v46;

    if (v47 >= v45)
    {

      goto LABEL_46;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v119 = v9;
  v48 = objc_msgSend(v34, sel_personIdentifier);
  v117 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v118 = v49;

  v50 = objc_msgSend(v34, sel_personName);
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = v52;

  v54 = objc_msgSend(v34, sel_personIdentifier);
  v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v57 = v56;

  objc_msgSend(v34, v23[274]);
  v120 = Float._bridgeToObjectiveC()().super.super.isa;
  v58 = objc_msgSend(v34, sel_mdID);
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v61 = v60;

  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v62 = NSNumber.init(integerLiteral:)(0).super.super.isa;
  v63 = objc_allocWithZone(MEMORY[0x24BE0C7F8]);
  v64 = (void *)MEMORY[0x22E2AF8EC](v51, v53);
  swift_bridgeObjectRelease();
  v65 = (void *)MEMORY[0x22E2AF8EC](v55, v57);
  swift_bridgeObjectRelease();
  v66 = (void *)MEMORY[0x22E2AF8EC](v59, v61);
  swift_bridgeObjectRelease();
  v67 = v120;
  v68 = objc_msgSend(v63, sel_initWithType_text_identifier_confidenceScore_contactIdentifier_role_isCoref_, 2, v64, v65, v120, v66, 3, v62);

  if (!v68)
  {
    v9 = v119;
    swift_bridgeObjectRetain();
    v79 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v117, v118);
    v81 = v80;
    swift_bridgeObjectRelease();
    v30 = v114;
    if ((v81 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v122[0] = v9;
      v23 = &selRef_e1946_;
      v31 = v116;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v9 = (char *)v122[0];
      }
      swift_bridgeObjectRelease();
      v83 = *(void **)(*((_QWORD *)v9 + 7) + 8 * v79);
      specialized _NativeDictionary._delete(at:)(v79, (uint64_t)v9);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }

    swift_bridgeObjectRelease();
    v23 = &selRef_e1946_;
LABEL_46:
    v31 = v116;
LABEL_47:
    v20 = v115;
    v35 = v121;
    goto LABEL_18;
  }
  v20 = (unint64_t)v119;
  v69 = swift_isUniquelyReferenced_nonNull_native();
  v122[0] = (id)v20;
  v9 = v117;
  v70 = v118;
  v72 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v117, v118);
  v73 = *(_QWORD *)(v20 + 16);
  v74 = (v71 & 1) == 0;
  v75 = v73 + v74;
  if (__OFADD__(v73, v74))
    goto LABEL_57;
  v76 = v71;
  if (*(_QWORD *)(v20 + 24) >= v75)
  {
    v23 = &selRef_e1946_;
    if ((v69 & 1) == 0)
    {
      v84 = v9;
      v20 = (unint64_t)v122;
      specialized _NativeDictionary.copy()();
      v9 = (char *)v122[0];
      if ((v76 & 1) != 0)
        goto LABEL_40;
      goto LABEL_43;
    }
LABEL_39:
    v84 = v9;
    v9 = (char *)v122[0];
    if ((v76 & 1) != 0)
    {
LABEL_40:
      v85 = *((_QWORD *)v9 + 7);
      v86 = 8 * v72;

      *(_QWORD *)(v85 + v86) = v68;
LABEL_45:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30 = v114;
      goto LABEL_46;
    }
LABEL_43:
    *(_QWORD *)&v9[8 * (v72 >> 6) + 64] |= 1 << v72;
    v87 = (char **)(*((_QWORD *)v9 + 6) + 16 * v72);
    *v87 = v84;
    v87[1] = (char *)v70;
    *(_QWORD *)(*((_QWORD *)v9 + 7) + 8 * v72) = v68;
    v88 = *((_QWORD *)v9 + 2);
    v26 = __OFADD__(v88, 1);
    v89 = v88 + 1;
    if (v26)
      goto LABEL_58;
    *((_QWORD *)v9 + 2) = v89;
    swift_bridgeObjectRetain();
    goto LABEL_45;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v75, v69);
  v20 = (unint64_t)v122[0];
  v77 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9, v70);
  v23 = &selRef_e1946_;
  if ((v76 & 1) == (v78 & 1))
  {
    v72 = v77;
    goto LABEL_39;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized static PoemStreamUtilities.getDUDocumentForPoemMessage(message:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *);
  _QWORD *v18;
  id v19;
  id v20;

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 264))();
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x178))(v3);
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(v5);
  if (v6[2])
  {
    v7 = v6[4];
    v8 = v6[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v4 & *v2) + 0x130))(v7, v8);
  v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentMessageData()), sel_init);
  v10 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)a1 + 432))();
  if (v10[2])
  {
    v11 = v10[4];
    v12 = v10[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  swift_bridgeObjectRelease();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))((*v4 & *v9) + 0xA0))(v11, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(v13);
  v15 = (*(uint64_t (**)(uint64_t))((*v4 & *v9) + 0xD0))(v14);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(v15);
  (*(void (**)(uint64_t))((*v4 & *v9) + 0xB8))(v16);
  v17 = *(void (**)(_QWORD *))((*v4 & *v2) + 0x250);
  v18 = v9;
  v17(v9);
  v19 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
  v20 = specialized DUDocument.init(rawDocument:maxLength:)(v2, 5120);

  return v20;
}

id specialized static PoemStreamUtilities.senderExtraction(message:conversations:isPronoun:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  id v34;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  Class isa;
  Class v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v45 - v12;
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384);
  v15 = *(_QWORD *)(v14(v11) + 16);
  v16 = swift_bridgeObjectRelease();
  if (v15 != 1
    || (v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432),
        v18 = *(_QWORD *)(v17(v16) + 16),
        v19 = swift_bridgeObjectRelease(),
        v18 != 1))
  {
    Logger.init()();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_2282CC000, v31, v32, "Don't add implicit sender count if multiple senders", v33, 2u);
      MEMORY[0x22E2B117C](v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0;
  }
  v20 = (_QWORD *)v14(v19);
  if (!v20[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v22 = v20[4];
  v21 = v20[5];
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRelease();
  v24 = (_QWORD *)v17(v23);
  if (!v24[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v26 = v24[4];
  v25 = v24[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = v22 == v26 && v21 == v25;
  if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Logger.init()();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_2282CC000, v28, v29, "Not adding unknown sender handle", v30, 2u);
      MEMORY[0x22E2B117C](v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    return 0;
  }
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 336))(v22, v21);
  v34 = v37;
  if (v37)
  {
    v38 = v36;
    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    v40 = NSNumber.init(integerLiteral:)(a3 & 1).super.super.isa;
    v41 = objc_allocWithZone(MEMORY[0x24BE0C7F8]);
    v42 = (void *)MEMORY[0x22E2AF8EC](v22, v21);
    swift_bridgeObjectRelease();
    v43 = (void *)MEMORY[0x22E2AF8EC](v38, v34);
    swift_bridgeObjectRelease();
    v44 = (void *)MEMORY[0x22E2AF8EC](v26, v25);
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v41, sel_initWithType_text_identifier_confidenceScore_contactIdentifier_role_isCoref_, 1, v42, v43, isa, v44, 1, v40);

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v34;
}

id specialized static PoemStreamUtilities.receiverExtraction(message:conversations:isPronoun:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  id v34;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  Class isa;
  Class v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v45 - v12;
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408);
  v15 = *(_QWORD *)(v14(v11) + 16);
  v16 = swift_bridgeObjectRelease();
  if (v15 != 1
    || (v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456),
        v18 = *(_QWORD *)(v17(v16) + 16),
        v19 = swift_bridgeObjectRelease(),
        v18 != 1))
  {
    Logger.init()();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_2282CC000, v31, v32, "Don't add implicit receiver count if multiple receivers", v33, 2u);
      MEMORY[0x22E2B117C](v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0;
  }
  v20 = (_QWORD *)v14(v19);
  if (!v20[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v22 = v20[4];
  v21 = v20[5];
  swift_bridgeObjectRetain();
  v23 = swift_bridgeObjectRelease();
  v24 = (_QWORD *)v17(v23);
  if (!v24[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v26 = v24[4];
  v25 = v24[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = v22 == v26 && v21 == v25;
  if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Logger.init()();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_2282CC000, v28, v29, "Not adding unknown receiver handle", v30, 2u);
      MEMORY[0x22E2B117C](v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    return 0;
  }
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 336))(v22, v21);
  v34 = v37;
  if (v37)
  {
    v38 = v36;
    type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    v40 = NSNumber.init(integerLiteral:)(a3 & 1).super.super.isa;
    v41 = objc_allocWithZone(MEMORY[0x24BE0C7F8]);
    v42 = (void *)MEMORY[0x22E2AF8EC](v22, v21);
    swift_bridgeObjectRelease();
    v43 = (void *)MEMORY[0x22E2AF8EC](v38, v34);
    swift_bridgeObjectRelease();
    v44 = (void *)MEMORY[0x22E2AF8EC](v26, v25);
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v41, sel_initWithType_text_identifier_confidenceScore_contactIdentifier_role_isCoref_, 1, v42, v43, isa, v44, 2, v40);

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v34;
}

uint64_t specialized static PoemStreamUtilities.pronounBufferStreamEvents(message:conversations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264);
  v9 = v8(v5);
  v11 = v10;
  v12 = swift_bridgeObjectRelease();
  v13 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v13 = v9 & 0xFFFFFFFFFFFFLL;
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v35 = MEMORY[0x24BEE4AF8];
    v33 = v8(v12);
    v34 = v15;
    v31 = 0x29656D7C6928625CLL;
    v32 = 0xEA0000000000625CLL;
    v16 = type metadata accessor for Locale();
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
    v17(v7, 1, 1, v16);
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.range<A>(of:options:range:locale:)();
    v19 = v18;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for Locale?);
    v20 = swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      v30 = a2;
      specialized static PoemStreamUtilities.senderExtraction(message:conversations:isPronoun:)(a1, a2, 1);
      MEMORY[0x22E2AFAFC]();
      if (*(_QWORD *)(v35 + 16) >= *(_QWORD *)(v35 + 24) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      v20 = specialized Array._endMutation()();
      a2 = v30;
    }
    v33 = v8(v20);
    v34 = v21;
    v31 = 0x757C756F7928625CLL;
    v32 = 0xEB00000000625C29;
    v17(v7, 1, 1, v16);
    StringProtocol.range<A>(of:options:range:locale:)();
    v23 = v22;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v7, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      specialized static PoemStreamUtilities.receiverExtraction(message:conversations:isPronoun:)(a1, a2, 1);
      MEMORY[0x22E2AFAFC]();
      if (*(_QWORD *)(v35 + 16) >= *(_QWORD *)(v35 + 24) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v24 = v35;
    v33 = v14;
    v25 = *(_QWORD *)(v35 + 16);
    if (v25)
    {
      swift_bridgeObjectRetain_n();
      for (i = 0; i != v25; ++i)
      {
        v27 = *(void **)(v24 + 8 * i + 32);
        if (v27)
        {
          v28 = v27;
          MEMORY[0x22E2AFAFC]();
          if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v14 = v33;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v14;
}

uint64_t specialized static PoemStreamUtilities.senderReceiverBufferStreamEvents(message:conversations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = MEMORY[0x24BEE4AF8];
  v12 = MEMORY[0x24BEE4AF8];
  specialized static PoemStreamUtilities.senderExtraction(message:conversations:isPronoun:)(a1, a2, 0);
  MEMORY[0x22E2AFAFC]();
  if (*(_QWORD *)(v12 + 16) >= *(_QWORD *)(v12 + 24) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  specialized static PoemStreamUtilities.receiverExtraction(message:conversations:isPronoun:)(a1, a2, 0);
  MEMORY[0x22E2AFAFC]();
  if (*(_QWORD *)(v12 + 16) >= *(_QWORD *)(v12 + 24) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v11 = v4;
  v5 = *(_QWORD *)(v12 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    for (i = 0; i != v5; ++i)
    {
      v7 = *(void **)(v12 + 8 * i + 32);
      if (v7)
      {
        v8 = v7;
        MEMORY[0x22E2AFAFC]();
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v9 = v11;
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

void *specialized static PoemStreamUtilities.getModelConfidence(output:)(void *result)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];

  if (result)
  {
    v1 = result;
    swift_unknownObjectRetain();
    v2 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000010, 0x80000002284DE520);
    v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

    if (v3)
    {
      v4 = objc_msgSend(v3, sel_dictionaryValue);
      type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      AnyHashable.init<A>(_:)();
      if (*(_QWORD *)(v5 + 16))
      {
        v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
        if ((v7 & 1) != 0)
        {
          v8 = *(id *)(*(_QWORD *)(v5 + 56) + 8 * v6);
          swift_bridgeObjectRelease();
          outlined destroy of AnyHashable((uint64_t)v11);
          objc_msgSend(v8, sel_doubleValue, 1);
          v10 = v9;
          swift_unknownObjectRelease();

          return (void *)v10;
        }
      }
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v11);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();
    }
    return 0;
  }
  return result;
}

uint64_t specialized static PoemStreamUtilities.numberOfPeopleFromPhotos()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[7];

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = swift_allocObject();
  v5 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  v20 = v4 + 16;
  *(_QWORD *)(v5 + 16) = 0;
  v21 = v5 + 16;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE3570]), sel_init);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSPredicate);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2284C1EE0;
  *(_QWORD *)(v7 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PHPersonType]);
  *(_QWORD *)(v7 + 64) = lazy protocol witness table accessor for type [PHPersonType] and conformance [A]();
  *(_QWORD *)(v7 + 32) = &outlined read-only object #0 of static PoemStreamUtilities.numberOfPeopleFromPhotos();
  v8 = (void *)NSPredicate.init(format:_:)();
  objc_msgSend(v6, sel_setInternalPredicate_, v8);

  v9 = (void *)objc_opt_self();
  v19 = v6;
  v10 = objc_msgSend(v9, sel_fetchPersonsWithOptions_, v6);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v5;
  *(_QWORD *)(v11 + 24) = v4;
  aBlock[4] = partial apply for closure #1 in static PoemStreamUtilities.numberOfPeopleFromPhotos();
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed PHPerson, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_4;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_enumerateObjectsUsingBlock_, v12);
  _Block_release(v12);
  Logger.init()();
  swift_retain();
  swift_retain();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    *(_DWORD *)v15 = 134218240;
    v18 = v3;
    swift_beginAccess();
    aBlock[0] = *(_QWORD *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v15 + 12) = 2048;
    swift_beginAccess();
    aBlock[0] = *(_QWORD *)(v5 + 16);
    v3 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_2282CC000, v13, v14, "Found %ld named people and %ld unnamed people on device from photos", (uint8_t *)v15, 0x16u);
    MEMORY[0x22E2B117C](v15, -1, -1);

  }
  else
  {

    swift_release();
    swift_release();
    v10 = v19;
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess();
  v16 = *(_QWORD *)(v4 + 16);
  swift_beginAccess();
  swift_release();
  swift_release();
  return v16;
}

uint64_t specialized static PoemStreamUtilities.clearPoemStream()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t result;
  _QWORD aBlock[6];

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_2282CC000, v4, v5, "PoemStreamUtilities: Clearing the poem stream", v6, 2u);
    MEMORY[0x22E2B117C](v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
  swift_unknownObjectRelease();
  v8 = objc_msgSend(v7, sel_DocumentUnderstanding);
  swift_unknownObjectRelease();
  v9 = objc_msgSend(v8, sel_Poem);
  swift_unknownObjectRelease();
  v10 = objc_msgSend(v9, sel_pruner);
  aBlock[4] = protocol witness for static Equatable.== infix(_:_:) in conformance PDFNormalizationError;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  aBlock[3] = &block_descriptor_25;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v10, sel_deleteEventsPassingTest_, v11);

  _Block_release(v11);
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
    __break(1u);
  return result;
}

uint64_t specialized static PoemStreamUtilities.fetchBufferEvents()()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  void *v14;
  void *v15;
  uint64_t v16;

  v0 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
  swift_unknownObjectRelease();
  v1 = objc_msgSend(v0, sel_DocumentUnderstanding);
  swift_unknownObjectRelease();
  v2 = objc_msgSend(v1, sel_PoemBuffer);
  swift_unknownObjectRelease();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  v4 = objc_msgSend(v2, sel_publisher);
  v15 = closure #1 in static PoemStreamUtilities.fetchBufferEvents();
  v16 = 0;
  v5 = MEMORY[0x24BDAC760];
  v11 = MEMORY[0x24BDAC760];
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>) -> ();
  v14 = &block_descriptor_31;
  v6 = _Block_copy(&v11);
  v15 = partial apply for closure #2 in static PoemStreamUtilities.fetchBufferEvents();
  v16 = v3;
  v11 = v5;
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>) -> ();
  v14 = &block_descriptor_34;
  v7 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  v8 = objc_msgSend(v4, sel_sinkWithCompletion_receiveInput_, v6, v7);

  _Block_release(v7);
  _Block_release(v6);

  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v9;
}

id partial apply for closure #1 in static PoemStreamUtilities.poemEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:threshold:)(uint8_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, double a5)
{
  uint64_t v5;

  return specialized static PoemStreamUtilities.createPoemEvent(eid:pid:confidence:conversations:)(a3, a4, a1, a2, v5, a5);
}

id specialized static PoemStreamUtilities.createPoemEvent(eid:pid:confidence:conversations:)(uint64_t a1, unint64_t a2, uint8_t *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;

  v12 = type metadata accessor for Logger();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 344))(a1, a2);
  if (v17)
  {
    v18 = v16;
    v19 = v17;
    v61 = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 392))();
    v21 = v20;
    v23 = v22;
    v24 = a3;
    v26 = v25;
    v27 = *(uint64_t (**)(void))(*(_QWORD *)a5 + 400);
    v65 = v24;
    v63 = v27();
    v64 = v28;
    v30 = v29;
    v62 = v31;
    if (v26)
    {
      swift_bridgeObjectRelease();
      v18 = v23;
      v19 = v26;
    }
    v32 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 208);
    v33 = swift_bridgeObjectRetain();
    v34 = v32(v33);
    if (*(_QWORD *)(v34 + 16) && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v36 & 1) != 0))
    {
      v37 = (uint64_t *)(*(_QWORD *)(v34 + 56) + 16 * v35);
      v38 = *v37;
      v39 = v37[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v38 = 0;
      v39 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = (void *)MEMORY[0x22E2AF8EC](v18, v19);
    swift_bridgeObjectRelease();
    if (v21)
    {
      v41 = (void *)MEMORY[0x22E2AF8EC](v61, v21);
      swift_bridgeObjectRelease();
      if (v39)
      {
LABEL_10:
        v42 = (void *)MEMORY[0x22E2AF8EC](v38, v39);
        swift_bridgeObjectRelease();
LABEL_15:
        v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C808]), sel_initWithName_contactHandle_visualIdentifier_mdIdentifier_, v40, v41, 0, v42);

        v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C800]), sel_initWithPerson_topic_, v47, 0);
        swift_bridgeObjectRetain();
        if (v30)
        {
          v49 = (void *)MEMORY[0x22E2AF8EC](v62, v30);
          swift_bridgeObjectRelease();
        }
        else
        {
          v49 = 0;
        }
        v50 = v64;
        v51 = (void *)MEMORY[0x22E2AF8EC](v65, a4);
        swift_bridgeObjectRelease();
        if (v50)
        {
          v52 = (void *)MEMORY[0x22E2AF8EC](v63, v50);
          swift_bridgeObjectRelease();
        }
        else
        {
          v52 = 0;
        }
        v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C808]), sel_initWithName_contactHandle_visualIdentifier_mdIdentifier_, v49, 0, v51, v52);

        v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C800]), sel_initWithPerson_topic_, v53, 0);
        v55 = v48;
        v56 = v54;
        v57 = (void *)MEMORY[0x22E2AFBEC](a6);
        v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C7D8]), sel_initWithSubject_predicate_object_conversationId_confidence_, v55, 1, v56, 0, v57);

        return v58;
      }
    }
    else
    {
      v41 = 0;
      if (v39)
        goto LABEL_10;
    }
    v42 = 0;
    goto LABEL_15;
  }
  Logger.init()();
  swift_bridgeObjectRetain_n();
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    v46 = swift_slowAlloc();
    v67 = v46;
    *(_DWORD *)v45 = 136315138;
    v65 = v45 + 4;
    swift_bridgeObjectRetain();
    v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2282CC000, v43, v44, "PoemStreamUtilities: No name found for eid: %s while creating poem event", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v46, -1, -1);
    MEMORY[0x22E2B117C](v45, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return 0;
}

void specialized static PoemStreamUtilities.addInferencesToPoemStream(poemInferences:)(unint64_t a1)
{
  uint8_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  os_log_type_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t i;
  id v14;
  void *v15;
  _QWORD v16[2];

  v3 = (_QWORD *)type metadata accessor for Logger();
  v4 = *(v3 - 1);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  v9 = a1 >> 62;
  if (!os_log_type_enabled((os_log_t)v7, v8))
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  v1 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v1 = 134217984;
  if (v9)
    goto LABEL_17;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v16[1] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2282CC000, (os_log_t)v7, v8, "PoemStreamUtilities: Adding %ld events to poem stream", v1, 0xCu);
    MEMORY[0x22E2B117C](v1, -1, -1);

LABEL_6:
    (*(void (**)(char *, _QWORD *))(v4 + 8))(v6, v3);
    v11 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
    swift_unknownObjectRelease();
    v12 = objc_msgSend(v11, sel_DocumentUnderstanding);
    swift_unknownObjectRelease();
    v6 = (char *)objc_msgSend(v12, sel_Poem);
    swift_unknownObjectRelease();
    v3 = objc_msgSend(v6, sel_source);
    if (v9)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7)
        goto LABEL_15;
    }
    else
    {
      v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v7)
        goto LABEL_15;
    }
    if (v7 >= 1)
      break;
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  for (i = 0; i != v7; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v14 = (id)MEMORY[0x22E2AFF34](i, a1);
    else
      v14 = *(id *)(a1 + 8 * i + 32);
    v15 = v14;
    objc_msgSend(v3, sel_sendEvent_, v14);

  }
LABEL_15:

  swift_bridgeObjectRelease();
}

uint64_t specialized static PoemStreamUtilities.fetchPoemEvents()()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  void *v14;
  void *v15;
  uint64_t v16;

  v0 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
  swift_unknownObjectRelease();
  v1 = objc_msgSend(v0, sel_DocumentUnderstanding);
  swift_unknownObjectRelease();
  v2 = objc_msgSend(v1, sel_Poem);
  swift_unknownObjectRelease();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = objc_msgSend(v2, sel_publisher);
  v15 = closure #1 in static PoemStreamUtilities.fetchPoemEvents();
  v16 = 0;
  v5 = MEMORY[0x24BDAC760];
  v11 = MEMORY[0x24BDAC760];
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>) -> ();
  v14 = &block_descriptor_19;
  v6 = _Block_copy(&v11);
  v15 = partial apply for closure #2 in static PoemStreamUtilities.fetchPoemEvents();
  v16 = v3;
  v11 = v5;
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>) -> ();
  v14 = &block_descriptor_22;
  v7 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  v8 = objc_msgSend(v4, sel_sinkWithCompletion_receiveInput_, v6, v7);

  _Block_release(v7);
  _Block_release(v6);

  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v9;
}

uint64_t specialized static PoemStreamUtilities.prunePoemEventsByVisualId(eventVisualIds:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  swift_bridgeObjectRetain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v25 = v2;
    v8 = swift_slowAlloc();
    v24 = v3;
    v9 = (uint8_t *)v8;
    v10 = swift_slowAlloc();
    aBlock[0] = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    v11 = Set.description.getter();
    v13 = v12;
    swift_bridgeObjectRelease();
    v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2282CC000, v6, v7, "PoemStreamUtilities: Pruning poem stream with %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v10, -1, -1);
    MEMORY[0x22E2B117C](v9, -1, -1);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v14 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_DocumentUnderstanding);
  swift_unknownObjectRelease();
  v16 = objc_msgSend(v15, sel_Poem);
  swift_unknownObjectRelease();
  v17 = objc_msgSend(v16, sel_pruner);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = partial apply for closure #1 in static PoemStreamUtilities.prunePoemEventsByVisualId(eventVisualIds:);
  *(_QWORD *)(v19 + 24) = v18;
  aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  aBlock[3] = (uint64_t)&block_descriptor_13;
  v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v17, sel_deleteEventsPassingTest_, v20);

  _Block_release(v20);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for PoemStreamUtilities()
{
  return &type metadata for PoemStreamUtilities;
}

uint64_t sub_2283929BC()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [PHPersonType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PHPersonType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PHPersonType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PHPersonType]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BDCFBF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PHPersonType] and conformance [A]);
  }
  return result;
}

uint64_t sub_228392A18()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PoemStreamUtilities.numberOfPeopleFromPhotos()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in static PoemStreamUtilities.numberOfPeopleFromPhotos()(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in static PoemStreamUtilities.prunePoemEventsByVisualId(eventVisualIds:)(void *a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static PoemStreamUtilities.prunePoemEventsByVisualId(eventVisualIds:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_228392A6C()
{
  return swift_deallocObject();
}

uint64_t sub_228392A7C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in static PoemStreamUtilities.fetchPoemEvents()(void *a1)
{
  uint64_t v1;

  closure #2 in static PoemStreamUtilities.fetchPoemEvents()(a1, v1);
}

void partial apply for closure #2 in static PoemStreamUtilities.fetchBufferEvents()(void *a1)
{
  uint64_t v1;

  closure #2 in static PoemStreamUtilities.fetchBufferEvents()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BDCE958], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t DUProcessingPhaseImplementation.runOnRequest(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v4[2] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4[3] = swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  v8 = type metadata accessor for Result();
  v4[4] = v8;
  v4[5] = *(_QWORD *)(v8 - 8);
  v4[6] = swift_task_alloc();
  v9 = swift_task_alloc();
  v4[7] = v9;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 48) + *(_QWORD *)(a4 + 48));
  v10 = (_QWORD *)swift_task_alloc();
  v4[8] = v10;
  *v10 = v4;
  v10[1] = DUProcessingPhaseImplementation.runOnRequest(request:);
  return v12(v9, a2, a3, a4);
}

uint64_t DUProcessingPhaseImplementation.runOnRequest(request:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = *(_QWORD **)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = *(_QWORD **)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(v5 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
    *v6 = *v3;
  }
  else
  {
    v7 = *(uint64_t **)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v7[3] = v8;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v7);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(boxed_opaque_existential_0, v3, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  }
  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 32) = EnumCaseMultiPayload == 1;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

BOOL static DUProcessingPhaseImplementationAttributes.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DUProcessingPhaseImplementationAttributes.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int DUProcessingPhaseImplementationAttributes.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DUProcessingPhaseImplementationAttributes(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DUProcessingPhaseImplementationAttributes()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DUProcessingPhaseImplementationAttributes()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DUProcessingPhaseImplementationAttributes()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type DUProcessingPhaseImplementationAttributes and conformance DUProcessingPhaseImplementationAttributes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUProcessingPhaseImplementationAttributes and conformance DUProcessingPhaseImplementationAttributes;
  if (!lazy protocol witness table cache variable for type DUProcessingPhaseImplementationAttributes and conformance DUProcessingPhaseImplementationAttributes)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUProcessingPhaseImplementationAttributes, &type metadata for DUProcessingPhaseImplementationAttributes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUProcessingPhaseImplementationAttributes and conformance DUProcessingPhaseImplementationAttributes);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DUProcessingPhaseImplementationAttributes(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DUProcessingPhaseImplementationAttributes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_228393040 + 4 * byte_2284C50F5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_228393074 + 4 * asc_2284C50F0[v4]))();
}

uint64_t sub_228393074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22839307C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x228393084);
  return result;
}

uint64_t sub_228393090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x228393098);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_22839309C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283930A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DUProcessingPhaseImplementationAttributes()
{
  return &type metadata for DUProcessingPhaseImplementationAttributes;
}

uint64_t outlined copy of DUProcessingPhaseImplementationBaseError()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for DUProcessingPhaseImplementationBaseError()
{
  return outlined consume of DUProcessingPhaseImplementationBaseError();
}

uint64_t outlined consume of DUProcessingPhaseImplementationBaseError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for DUProcessingPhaseImplementationBaseError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of DUProcessingPhaseImplementationBaseError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DUProcessingPhaseImplementationBaseError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of DUProcessingPhaseImplementationBaseError();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of DUProcessingPhaseImplementationBaseError();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DUProcessingPhaseImplementationBaseError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of DUProcessingPhaseImplementationBaseError();
  return a1;
}

uint64_t getEnumTagSinglePayload for DUProcessingPhaseImplementationBaseError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DUProcessingPhaseImplementationBaseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for DUProcessingPhaseImplementationBaseError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for DUProcessingPhaseImplementationBaseError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DUProcessingPhaseImplementationBaseError()
{
  return &type metadata for DUProcessingPhaseImplementationBaseError;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(id **, void ***, char **))
{
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14[2];

  v10 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = a2(v10);
    *a1 = v10;
  }
  v12 = *(_QWORD *)(v10 + 16);
  v14[0] = v10 + 32;
  v14[1] = v12;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v14, a3, a4, a5);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized Sequence.reversed()(unint64_t a1, uint64_t (*a2)(unint64_t), uint64_t (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v5 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v21 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v5 & 0x4000000000000000) == 0)
  {
    v6 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRelease();
    v7 = (unint64_t)v6 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    v20 = v6 >= 0 ? v6 : v6 + 1;
    if (v6 < -1)
      __break(1u);
    v7 = v20 >> 1;
LABEL_6:
    if ((unint64_t)(v6 + 1) < 3)
      return v5;
    v8 = 0;
    while (1)
    {
      v10 = v8 + 1;
      v4 = v6 - (v8 + 1);
      if (__OFSUB__(v6, v8 + 1))
        break;
      if (v8 != v4)
      {
        v11 = v21;
        if ((v21 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x22E2AFF34](v8, v21);
          v15 = (id)MEMORY[0x22E2AFF34](v6 - (v8 + 1), v21);
        }
        else
        {
          if ((v8 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v12 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v8 >= v12)
            goto LABEL_34;
          v13 = *(id *)(v21 + 8 * v8 + 32);
          if ((v4 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v4 >= v12)
            goto LABEL_37;
          v14 = (uint64_t)v13;
          v15 = *(id *)(v21 + 32 + 8 * v4);
        }
        v16 = v15;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v11 = a3(v21);
          v21 = v11;
        }
        v17 = (v11 & 0xFFFFFFFFFFFFFF8) + 8 * v8;

        *(_QWORD *)(v17 + 32) = v16;
        specialized Array._endMutation()();
        v18 = v21;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v18 = a3(v21);
          v21 = v18;
        }
        if ((v4 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v4 >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;
        v9 = (v18 & 0xFFFFFFFFFFFFFF8) + 8 * v4;

        *(_QWORD *)(v9 + 32) = v14;
        specialized Array._endMutation()();
      }
      v8 = v10;
      if (v7 == v10)
        return v21;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v5 = a2(v4);
    v21 = v5;
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

id SpotlightOutputSinkCommonUtilities.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpotlightOutputSinkCommonUtilities();
  return objc_msgSendSuper2(&v2, sel_init);
}

id SpotlightOutputSinkCommonUtilities.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for SpotlightOutputSinkCommonUtilities);
}

id SpotlightOutputSink.iOSOutputSink.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding19SpotlightOutputSink_iOSOutputSink);
}

id SpotlightOutputSink.coreSpotlightOutputSink.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding19SpotlightOutputSink_coreSpotlightOutputSink);
}

uint64_t SpotlightOutputSink.writeTopicsAndClassesToSpotlightForFile(searchableItem:topics:documentClasses:analysisVersion:)()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(_QWORD *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "DocumentUnderstanding: File ingest disabled, skipping writing of topics to Spotlight", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SpotlightOutputSink.writeTopicsAndClassesToSpotlightForNonfileDocument(searchableItem:topics:documentClasses:analysisVersion:)()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(_QWORD *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "DocumentUnderstanding: Non-file ingest disabled, skipping writing of topics to Spotlight", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id SpotlightOutputSink.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SpotlightOutputSink.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding19SpotlightOutputSink_iOSOutputSink;
  v2 = objc_allocWithZone((Class)type metadata accessor for SpotlightiOSFileOutputSink());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR____TtC21DocumentUnderstanding19SpotlightOutputSink_coreSpotlightOutputSink;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CoreSpotlightOutputSink()), sel_init);

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SpotlightOutputSink();
  return objc_msgSendSuper2(&v6, sel_init);
}

id SpotlightOutputSink.__deallocating_deinit()
{
  return DUGlobalTopicSetIdentifier.__deallocating_deinit(type metadata accessor for SpotlightOutputSink);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(id **, void ***, char **))
{
  uint64_t v4;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::Int v14;
  unint64_t v15;
  Swift::Int v16;
  void *v17;
  id v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  id *v24;
  void *v25;
  id v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t *v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t *v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  Swift::Int v92;
  uint64_t v93;
  void *v94;
  id v95;
  id v96;
  double v97;
  double v98;
  double v99;
  double v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  Swift::Int v114;
  void **v115;
  uint64_t v117;
  uint64_t v118;

  v7 = a1[1];
  v8 = _minimumMergeRunLength(_:)(v7);
  if (v8 >= v7)
  {
    if (v7 < 0)
      goto LABEL_130;
    if (v7)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v7, 1, a1);
    return;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_138;
  v10 = v8;
  v108 = a1;
  if (v7 < 2)
  {
    v13 = (char *)MEMORY[0x24BEE4AF8];
    v118 = MEMORY[0x24BEE4AF8];
    v115 = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v7 != 1)
    {
      v15 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_96:
      if (v15 >= 2)
      {
        v102 = *v108;
        do
        {
          v103 = v15 - 2;
          if (v15 < 2)
            goto LABEL_125;
          if (!v102)
            goto LABEL_137;
          v104 = *(_QWORD *)&v13[16 * v103 + 32];
          v105 = *(_QWORD *)&v13[16 * v15 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v102 + 8 * v104), (id *)(v102 + 8 * *(_QWORD *)&v13[16 * v15 + 16]), v102 + 8 * v105, v115, a4);
          if (v4)
            break;
          if (v105 < v104)
            goto LABEL_126;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
          if (v103 >= *((_QWORD *)v13 + 2))
            goto LABEL_127;
          v106 = &v13[16 * v103 + 32];
          *(_QWORD *)v106 = v104;
          *((_QWORD *)v106 + 1) = v105;
          v107 = *((_QWORD *)v13 + 2);
          if (v15 > v107)
            goto LABEL_128;
          memmove(&v13[16 * v15 + 16], &v13[16 * v15 + 32], 16 * (v107 - v15));
          *((_QWORD *)v13 + 2) = v107 - 1;
          v15 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_107:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v11 = v9 >> 1;
    type metadata accessor for NSNumber(0, a2);
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) = v11;
    v115 = (void **)((v12 & 0xFFFFFFFFFFFFFF8) + 32);
    v118 = v12;
  }
  v111 = v10;
  v14 = 0;
  v117 = *a1;
  v109 = *a1 - 8;
  v110 = *a1 + 16;
  v13 = (char *)MEMORY[0x24BEE4AF8];
  v112 = v7;
  while (1)
  {
    v16 = v14++;
    if (v14 < v7)
    {
      v17 = *(void **)(v117 + 8 * v16);
      v18 = *(id *)(v117 + 8 * v14);
      v19 = v17;
      objc_msgSend(v18, sel_confidence);
      v21 = v20;
      objc_msgSend(v19, sel_confidence);
      v23 = v22;

      v14 = v16 + 2;
      if (v16 + 2 < v7)
      {
        v24 = (id *)(v110 + 8 * v16);
        while (1)
        {
          v25 = *(v24 - 1);
          v26 = *v24;
          v27 = v25;
          objc_msgSend(v26, sel_confidence);
          v29 = v28;
          objc_msgSend(v27, sel_confidence);
          v31 = v30;

          if (v21 < v23 == v29 >= v31)
            break;
          ++v14;
          ++v24;
          if (v7 == v14)
          {
            v14 = v7;
            break;
          }
        }
      }
      if (v21 < v23)
      {
        if (v14 < v16)
          goto LABEL_131;
        if (v16 < v14)
        {
          v32 = (uint64_t *)(v109 + 8 * v14);
          v33 = v14;
          v34 = v16;
          v35 = (uint64_t *)(v117 + 8 * v16);
          do
          {
            if (v34 != --v33)
            {
              if (!v117)
                goto LABEL_136;
              v36 = *v35;
              *v35 = *v32;
              *v32 = v36;
            }
            ++v34;
            --v32;
            ++v35;
          }
          while (v34 < v33);
        }
      }
    }
    if (v14 >= v7)
      goto LABEL_38;
    if (__OFSUB__(v14, v16))
      goto LABEL_129;
    if (v14 - v16 >= v111)
      goto LABEL_38;
    if (__OFADD__(v16, v111))
      goto LABEL_132;
    v37 = v16 + v111 >= v7 ? v7 : v16 + v111;
    if (v37 < v16)
      break;
    if (v14 != v37)
    {
      v90 = v109 + 8 * v14;
      v38 = v117;
      v113 = v37;
      v114 = v16;
      do
      {
        v91 = *(void **)(v117 + 8 * v14);
        v92 = v16;
        v93 = v90;
        do
        {
          v94 = *(void **)v93;
          v95 = v91;
          v96 = v94;
          objc_msgSend(v95, sel_confidence);
          v98 = v97;
          objc_msgSend(v96, sel_confidence);
          v100 = v99;

          if (v98 >= v100)
            break;
          if (!v117)
            goto LABEL_134;
          v101 = *(void **)v93;
          v91 = *(void **)(v93 + 8);
          *(_QWORD *)v93 = v91;
          *(_QWORD *)(v93 + 8) = v101;
          v93 -= 8;
          ++v92;
        }
        while (v14 != v92);
        ++v14;
        v90 += 8;
        v16 = v114;
      }
      while (v14 != v113);
      v14 = v113;
      if (v113 < v114)
        goto LABEL_124;
      goto LABEL_39;
    }
LABEL_38:
    v38 = v117;
    if (v14 < v16)
      goto LABEL_124;
LABEL_39:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v40 = *((_QWORD *)v13 + 2);
    v39 = *((_QWORD *)v13 + 3);
    v15 = v40 + 1;
    if (v40 >= v39 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v15;
    v41 = v13 + 32;
    v42 = &v13[16 * v40 + 32];
    *(_QWORD *)v42 = v16;
    *((_QWORD *)v42 + 1) = v14;
    if (v40)
    {
      while (1)
      {
        v43 = v15 - 1;
        if (v15 >= 4)
        {
          v48 = &v41[16 * v15];
          v49 = *((_QWORD *)v48 - 8);
          v50 = *((_QWORD *)v48 - 7);
          v54 = __OFSUB__(v50, v49);
          v51 = v50 - v49;
          if (v54)
            goto LABEL_113;
          v53 = *((_QWORD *)v48 - 6);
          v52 = *((_QWORD *)v48 - 5);
          v54 = __OFSUB__(v52, v53);
          v46 = v52 - v53;
          v47 = v54;
          if (v54)
            goto LABEL_114;
          v55 = v15 - 2;
          v56 = &v41[16 * v15 - 32];
          v58 = *(_QWORD *)v56;
          v57 = *((_QWORD *)v56 + 1);
          v54 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          if (v54)
            goto LABEL_116;
          v54 = __OFADD__(v46, v59);
          v60 = v46 + v59;
          if (v54)
            goto LABEL_119;
          if (v60 >= v51)
          {
            v78 = &v41[16 * v43];
            v80 = *(_QWORD *)v78;
            v79 = *((_QWORD *)v78 + 1);
            v54 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v54)
              goto LABEL_123;
            v71 = v46 < v81;
            goto LABEL_75;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v72 = *((_QWORD *)v13 + 4);
            v73 = *((_QWORD *)v13 + 5);
            v54 = __OFSUB__(v73, v72);
            v65 = v73 - v72;
            v66 = v54;
            goto LABEL_69;
          }
          v45 = *((_QWORD *)v13 + 4);
          v44 = *((_QWORD *)v13 + 5);
          v54 = __OFSUB__(v44, v45);
          v46 = v44 - v45;
          v47 = v54;
        }
        if ((v47 & 1) != 0)
          goto LABEL_115;
        v55 = v15 - 2;
        v61 = &v41[16 * v15 - 32];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v64 = __OFSUB__(v62, v63);
        v65 = v62 - v63;
        v66 = v64;
        if (v64)
          goto LABEL_118;
        v67 = &v41[16 * v43];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v54 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v54)
          goto LABEL_121;
        if (__OFADD__(v65, v70))
          goto LABEL_122;
        if (v65 + v70 >= v46)
        {
          v71 = v46 < v70;
LABEL_75:
          if (v71)
            v43 = v55;
          goto LABEL_77;
        }
LABEL_69:
        if ((v66 & 1) != 0)
          goto LABEL_117;
        v74 = &v41[16 * v43];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v54 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v54)
          goto LABEL_120;
        if (v77 < v65)
          goto LABEL_14;
LABEL_77:
        v82 = v43 - 1;
        if (v43 - 1 >= v15)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        v83 = v38;
        if (!v38)
          goto LABEL_135;
        v84 = v13;
        v85 = &v41[16 * v82];
        v86 = *(_QWORD *)v85;
        v87 = &v41[16 * v43];
        v88 = *((_QWORD *)v87 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v83 + 8 * *(_QWORD *)v85), (id *)(v83 + 8 * *(_QWORD *)v87), v83 + 8 * v88, v115, a4);
        if (v4)
          goto LABEL_107;
        if (v88 < v86)
          goto LABEL_110;
        if (v43 > *((_QWORD *)v84 + 2))
          goto LABEL_111;
        *(_QWORD *)v85 = v86;
        *(_QWORD *)&v41[16 * v82 + 8] = v88;
        v89 = *((_QWORD *)v84 + 2);
        if (v43 >= v89)
          goto LABEL_112;
        v13 = v84;
        v15 = v89 - 1;
        memmove(&v41[16 * v43], v87 + 16, 16 * (v89 - 1 - v43));
        *((_QWORD *)v84 + 2) = v89 - 1;
        v38 = v117;
        if (v89 <= 2)
          goto LABEL_14;
      }
    }
    v15 = 1;
LABEL_14:
    v7 = v112;
    if (v14 >= v112)
      goto LABEL_96;
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    v8 = *(void **)(v6 + 8 * v4);
    v9 = a1;
    v10 = v7;
    while (1)
    {
      v11 = *(void **)v10;
      v12 = v8;
      v13 = v11;
      objc_msgSend(v12, sel_confidence);
      v15 = v14;
      objc_msgSend(v13, sel_confidence);
      v17 = v16;

      if (v15 >= v17)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v6)
        break;
      v18 = *(void **)v10;
      v8 = *(void **)(v10 + 8);
      *(_QWORD *)v10 = v8;
      *(_QWORD *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **a4, void (*a5)(id **, void ***, char **))
{
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id *v23;
  id *v24;
  id *v25;
  void **v26;
  id *v27;
  id *v28;
  void *v29;
  id v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t result;
  char *v39;
  void **v40;
  id *v41;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v41 = __src;
  v40 = a4;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_46;
    if (a4 != a2 || &a2[v13] <= a4)
      memmove(a4, a2, 8 * v13);
    v24 = &a4[v13];
    v39 = (char *)v24;
    v41 = v6;
    if (v7 >= v6 || v11 < 8)
      goto LABEL_45;
    v25 = (id *)(a3 - 8);
    v26 = v6;
    while (1)
    {
      v27 = v25 + 1;
      v28 = v24 - 1;
      v29 = *--v26;
      v30 = *(v24 - 1);
      v31 = v29;
      objc_msgSend(v30, sel_confidence);
      v33 = v32;
      objc_msgSend(v31, sel_confidence);
      v35 = v34;

      if (v33 < v35)
        break;
      v39 = (char *)(v24 - 1);
      if (v27 < v24 || v25 >= v24)
      {
        *v25 = *v28;
        v26 = v6;
        --v24;
        goto LABEL_43;
      }
      if (v27 != v24)
        *v25 = *v28;
      v26 = v6;
      --v24;
      if (v6 <= v7)
        goto LABEL_45;
LABEL_44:
      --v25;
      v6 = v26;
      if (v24 <= a4)
        goto LABEL_45;
    }
    if (v27 != v6 || v25 >= v6)
      *v25 = *v26;
    v41 = v26;
LABEL_43:
    if (v26 <= v7)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (v8 >= -7)
  {
    if (a4 != __src || &__src[v10] <= a4)
      memmove(a4, __src, 8 * v10);
    v14 = &a4[v10];
    v39 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      v15 = a4;
      do
      {
        v16 = *v15;
        v17 = *v6;
        v18 = v16;
        objc_msgSend(v17, sel_confidence);
        v20 = v19;
        objc_msgSend(v18, sel_confidence);
        v22 = v21;

        if (v20 >= v22)
        {
          if (v7 != v15)
            *v7 = *v15;
          v40 = ++v15;
          v23 = v6;
        }
        else
        {
          v23 = v6 + 1;
          if (v7 < v6 || v7 >= v23 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v15 >= v14)
          break;
        v6 = v23;
      }
      while ((unint64_t)v23 < a3);
      v41 = v7;
    }
LABEL_45:
    a5(&v41, &v40, &v39);
    return 1;
  }
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static SpotlightOutputSinkCommonUtilities.topicsToSpotlightTopics(topics:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  id v12;
  void *v13;
  Class isa;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v19 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      result = swift_release();
      __break(1u);
      return result;
    }
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (_QWORD *)MEMORY[0x22E2AFF34](v4, a1);
      else
        v6 = *(id *)(a1 + 8 * v4 + 32);
      v7 = v6;
      ++v4;
      v8 = (*(uint64_t (**)(void))((*v5 & *v6) + 0x88))();
      v10 = v9;
      (*(void (**)(void))((*v5 & *v7) + 0xB8))();
      v11 = (*(double (**)(void))((*v5 & *v7) + 0xA0))();
      v12 = objc_allocWithZone(MEMORY[0x24BDC23E0]);
      v13 = (void *)MEMORY[0x22E2AF8EC](v8, v10);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v12, sel_initWithLabel_synonyms_confidence_, v13, isa, v11);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v4);
    v3 = v19;
  }
  if ((v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    v18 = swift_bridgeObjectRetain();
    v15 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v19 = v15;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v19, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), &lazy cache variable for type metadata for CSDocumentUnderstandingTopic, 0x24BDC23E0, (void (*)(id **, void ***, char **))specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:));
  v16 = specialized Sequence.reversed()(v19, (uint64_t (*)(unint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized static SpotlightOutputSinkCommonUtilities.documentClassesToSpotlightTags(documentClasses:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  id v15;
  void *v16;
  Class isa;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v22 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      result = swift_release();
      __break(1u);
      return result;
    }
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (_QWORD *)MEMORY[0x22E2AFF34](v4, a1);
      else
        v6 = *(id *)(a1 + 8 * v4 + 32);
      v7 = v6;
      ++v4;
      v8 = *(uint64_t (**)(void))((*v5 & *v6) + 0x60);
      v9 = v8();
      v11 = v10;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_2284C1EE0;
      *(_QWORD *)(v12 + 32) = v8();
      *(_QWORD *)(v12 + 40) = v13;
      v14 = (*(double (**)(void))((*v5 & *v7) + 0x78))();
      v15 = objc_allocWithZone(MEMORY[0x24BDC23D8]);
      v16 = (void *)MEMORY[0x22E2AF8EC](v9, v11);
      swift_bridgeObjectRelease();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v15, sel_initWithLabel_synonyms_confidence_, v16, isa, v14);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v2 != v4);
    v3 = v22;
  }
  if ((v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    v21 = swift_bridgeObjectRetain();
    v18 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v22 = v18;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v22, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), &lazy cache variable for type metadata for CSDocumentUnderstandingCategory, 0x24BDC23D8, (void (*)(id **, void ***, char **))specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:));
  v19 = specialized Sequence.reversed()(v22, (uint64_t (*)(unint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
  swift_bridgeObjectRelease();
  return v19;
}

void specialized static SpotlightOutputSinkCommonUtilities.updateSearchableItemFields(searchableItem:topics:documentClasses:topicAnalysisVersion:documentClassAnalysisVersion:)(void *a1, unint64_t a2, unint64_t a3)
{
  id v5;
  Class isa;
  Class v7;
  Class v8;
  Class v9;

  specialized static SpotlightOutputSinkCommonUtilities.topicsToSpotlightTopics(topics:)(a2);
  specialized static SpotlightOutputSinkCommonUtilities.documentClassesToSpotlightTags(documentClasses:)(a3);
  objc_msgSend(a1, sel_setIsUpdate_, 1);
  v5 = objc_msgSend(a1, sel_attributeSet);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CSDocumentUnderstandingTopic);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setDocumentUnderstandingTopics_, isa);

  v7 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v5, sel_setDocumentUnderstandingTopicsVersion_, v7);

  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for CSDocumentUnderstandingCategory);
  v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setDocumentUnderstandingCategories_, v8);

  v9 = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v5, sel_setDocumentUnderstandingCategoriesVersion_, v9);

}

uint64_t type metadata accessor for SpotlightOutputSinkCommonUtilities()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SpotlightOutputSink()
{
  return objc_opt_self();
}

uint64_t DUDocumentHTMLData.htmlString.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_htmlString);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUDocumentHTMLData.htmlString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_htmlString);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUDocumentHTMLData.htmlString.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

void *DUDocumentHTMLData.documentEmailData.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_documentEmailData);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUDocumentHTMLData.documentEmailData.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_documentEmailData);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUDocumentHTMLData.documentEmailData.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUDocumentHTMLData.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DUDocumentHTMLData.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_htmlString];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_documentEmailData] = 0;
  swift_beginAccess();
  *(_OWORD *)v1 = xmmword_2284C52F0;
  swift_bridgeObjectRelease();
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DUDocumentHTMLData();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUDocumentHTMLData()
{
  return objc_opt_self();
}

Swift::Void __swiftcall DUDocumentHTMLData.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUDocumentHTMLData();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentHTMLData and conformance DUDocumentHTMLData, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentHTMLData, (uint64_t)&protocol conformance descriptor for DUDocumentHTMLData);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUDocumentHTMLData.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDocumentHTMLData.init(coder:)(a1);
}

uint64_t DUDocumentHTMLData.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentHTMLData and conformance DUDocumentHTMLData, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentHTMLData, (uint64_t)&protocol conformance descriptor for DUDocumentHTMLData);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t DUDocumentHTMLData.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xB0))(v4);
  v7 = specialized DUDocumentHTMLData.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocumentHTMLData?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

char *specialized DUDocumentHTMLData.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v5 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentHTMLData()), sel_init);
  v22 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  v12 = *v10;
  v13 = v10[1];
  v14 = &v11[OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_htmlString];
  swift_beginAccess();
  *(_QWORD *)v14 = v12;
  *((_QWORD *)v14 + 1) = v13;
  v15 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10 + *(int *)(v8 + 24), (uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v21) == 1)
  {
    *v7 = 0;
    v7[1] = 0xE000000000000000;
    v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    v7[5] = 0xE000000000000000;
    v7[6] = 0;
    v7[7] = 0xE000000000000000;
    v16 = MEMORY[0x24BEE4AF8];
    v7[8] = MEMORY[0x24BEE4AF8];
    v7[9] = v16;
    v7[10] = v16;
    v7[11] = v16;
    v7[12] = v16;
    v7[13] = v16;
    v7[14] = 0;
    UnknownStorage.init()();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v4, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  }
  v17 = specialized DUDocumentEmailData.__allocating_init<A>(proto:)((uint64_t)v7);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v22, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  v18 = (void **)&v15[OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_documentEmailData];
  swift_beginAccess();
  v19 = *v18;
  *v18 = v17;

  return v15;
}

char *DUDocumentHTMLData.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void **v40;
  void *v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (uint64_t *)((char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  v46 = v15;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v24 = a1;
  v23(v17, a1, a2);
  v25 = (char *)v22;
  v26 = swift_dynamicCast();
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  if ((v26 & 1) != 0)
  {
    v27(v14, 0, 1, v18);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v14, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
    v28 = a2;
    v29 = v24;
    v30 = *v21;
    v31 = v21[1];
    v32 = &v25[OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_htmlString];
    swift_beginAccess();
    *(_QWORD *)v32 = v30;
    *((_QWORD *)v32 + 1) = v31;
    v33 = v29;
    v34 = v28;
    v35 = (uint64_t)v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21 + *(int *)(v18 + 24), v35, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v35, 1, v44);
    v37 = v46;
    if (v36 == 1)
    {
      *v10 = 0;
      v10[1] = 0xE000000000000000;
      v10[2] = 0;
      v10[3] = 0xE000000000000000;
      v10[4] = 0;
      v10[5] = 0xE000000000000000;
      v10[6] = 0;
      v10[7] = 0xE000000000000000;
      v38 = MEMORY[0x24BEE4AF8];
      v10[8] = MEMORY[0x24BEE4AF8];
      v10[9] = v38;
      v10[10] = v38;
      v10[11] = v38;
      v10[12] = v38;
      v10[13] = v38;
      v10[14] = 0;
      UnknownStorage.init()();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v35, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v35, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
    }
    v39 = specialized DUDocumentEmailData.__allocating_init<A>(proto:)((uint64_t)v10);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v34);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
    v40 = (void **)&v25[OBJC_IVAR____TtC21DocumentUnderstanding18DUDocumentHTMLData_documentEmailData];
    swift_beginAccess();
    v41 = *v40;
    *v40 = v39;

  }
  else
  {
    v27(v14, 1, 1, v18);

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v14, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData?);
    return 0;
  }
  return v25;
}

uint64_t DUDocumentHTMLData.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v11;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD *v17;
  _BYTE v18[24];
  uint64_t v19;

  v2 = v1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, (uint64_t)v18, &demangling cache variable for type metadata for Any?);
  if (!v19)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v18, &demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  type metadata accessor for DUDocumentHTMLData();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))();
    v6 = v5;
    v7 = (*(uint64_t (**)(void))((*v3 & *v17) + 0x60))();
    v9 = v8;
    if (v6)
    {
      if (!v8)
      {

        swift_bridgeObjectRelease();
        return v9 & 1;
      }
      if (v4 == v7 && v6 == v8)
      {
        swift_bridgeObjectRelease();
        v7 = swift_bridgeObjectRelease();
      }
      else
      {
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v7 = swift_bridgeObjectRelease();
        if ((v11 & 1) == 0)
        {

          goto LABEL_12;
        }
      }
    }
    else if (v8)
    {

      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    v13 = (void *)(*(uint64_t (**)(uint64_t))((*v3 & *v2) + 0x78))(v7);
    v14 = (*(uint64_t (**)(void))((*v3 & *v17) + 0x78))();
    v15 = (void *)v14;
    if (v13)
    {
      if (v14)
      {
        type metadata accessor for DUDocumentEmailData();
        v16 = v13;
        v9 = static NSObject.== infix(_:_:)();

        return v9 & 1;
      }

    }
    else
    {

      if (!v15)
      {
        v9 = 1;
        return v9 & 1;
      }

    }
  }
LABEL_12:
  v9 = 0;
  return v9 & 1;
}

uint64_t DUDocumentHTMLData.protoRepresentation.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v26 = (uint64_t)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - v11;
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v13 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  UnknownStorage.init()();
  v14 = (uint64_t)a1 + *(int *)(v13 + 24);
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v16 = v15(v14, 1, 1, v6);
  v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))(v16);
  if (v19)
  {
    *a1 = v18;
    a1[1] = v19;
  }
  v20 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v17 & *v1) + 0x78))(v18);
  if (v20)
  {
    v21 = v20;
    (*(void (**)(void))((*v17 & *v20) + 0x1D0))();

    v22 = swift_dynamicCast();
    v15((uint64_t)v5, v22 ^ 1u, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
      v23 = v26;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v12, v26, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v14, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v23, v14, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
      v15(v14, 0, 1, v6);
      return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
    }
  }
  else
  {
    v15((uint64_t)v5, 1, 1, v6);
  }
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
}

id DUDocumentHTMLData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentHTMLData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocumentHTMLData()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocumentHTMLData()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xB0))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocumentHTMLData@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 168);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_2283960DC()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

uint64_t DULanguageTaggingDefaultImplementation.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DULanguageTaggingDefaultImplementation.implementationID.getter()
{
  return 0xD000000000000027;
}

uint64_t static DULanguageTaggingDefaultImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DULanguageTaggingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DULanguageTaggingSpecification;
  *a1 = result;
  return result;
}

void *static DULanguageTaggingDefaultImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DULanguageTaggingDefaultImplementation.implementationAttributes.getter;
}

uint64_t DULanguageTaggingDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch();
}

uint64_t DULanguageTaggingDefaultImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);

  v1 = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 40) + 136))();
  v2 = v1;
  *(_QWORD *)(v0 + 48) = v1;
  if (!v1)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v8 = swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000015;
    *(_QWORD *)(v9 + 8) = 0x80000002284DB0D0;
    *(_BYTE *)(v9 + 16) = 0;
    return (*(uint64_t (**)(uint64_t, BOOL))(v0 + 8))(v8, v2 == 0);
  }
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x90))();
  if (v4)
  {
    v5 = v3;
    v6 = v4;
    v7 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v7 = v3 & 0xFFFFFFFFFFFFLL;
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_2284C1EE0;
      *(_QWORD *)(v8 + 32) = v5;
      *(_QWORD *)(v8 + 40) = v6;

      return (*(uint64_t (**)(uint64_t, BOOL))(v0 + 8))(v8, v2 == 0);
    }
    swift_bridgeObjectRelease();
  }
  type metadata accessor for DUConcatenatedDocumentTextSpecification();
  *(_QWORD *)(v0 + 56) = swift_allocObject();
  v12 = (uint64_t (*)(_QWORD))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v11;
  *v11 = v0;
  v11[1] = DULanguageTaggingDefaultImplementation.runTypedOnRequest(request:);
  return v12(*(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 72);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 24);
    v3 = (void *)objc_opt_self();
    v4 = (void *)MEMORY[0x22E2AF8EC](v2, v1);
    swift_bridgeObjectRelease();
    v5 = objc_msgSend(v3, sel_dominantLanguageForString_, v4);

    v6 = *(void **)(v0 + 48);
    if (v5)
    {
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v9 = v8;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_2284C1EE0;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = v9;

    }
    else
    {

      v10 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    v11 = *(void **)(v0 + 48);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v10 = swift_allocError();
    *(_QWORD *)v12 = 0xD000000000000031;
    *(_QWORD *)(v12 + 8) = 0x80000002284DD540;
    *(_BYTE *)(v12 + 16) = 0;

  }
  return (*(uint64_t (**)(uint64_t, BOOL))(v0 + 8))(v10, v1 == 0);
}

uint64_t DULanguageTaggingDefaultImplementation.runTypedOnRequest(request:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v3[9] = a2;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t DULanguageTaggingDefaultImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DULanguageTaggingDefaultImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DULanguageTaggingDefaultImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DULanguageTaggingDefaultImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DULanguageTaggingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DULanguageTaggingSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DULanguageTaggingDefaultImplementation()
{
  return 0xD000000000000027;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DULanguageTaggingDefaultImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DULanguageTaggingDefaultImplementation;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DULanguageTaggingDefaultImplementation()
{
  return &protocol witness table for DULanguageTaggingSpecification;
}

uint64_t type metadata accessor for DULanguageTaggingDefaultImplementation()
{
  return objc_opt_self();
}

id CoreSpotlightUpdateFetcher.iOSUpdateFetcher.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding26CoreSpotlightUpdateFetcher_iOSUpdateFetcher);
}

uint64_t CoreSpotlightUpdateFetcher.fetchUpdatedDocumentsFromSpotlight(maxDocuments:currentAnalysisVersion:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = v4;
  *(_BYTE *)(v5 + 49) = a4;
  *(_BYTE *)(v5 + 48) = a2;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t CoreSpotlightUpdateFetcher.fetchUpdatedDocumentsFromSpotlight(maxDocuments:currentAnalysisVersion:)()
{
  uint64_t v0;
  char v1;
  int *v2;
  char v3;
  _QWORD *v4;
  int *v6;

  v1 = *(_BYTE *)(v0 + 49);
  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 32)
                                                     + OBJC_IVAR____TtC21DocumentUnderstanding26CoreSpotlightUpdateFetcher_iOSUpdateFetcher))
               + 0x70);
  v6 = (int *)((char *)v2 + *v2);
  v3 = *(_BYTE *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v4;
  *v4 = v0;
  v4[1] = CoreSpotlightUpdateFetcher.fetchUpdatedDocumentsFromSpotlight(maxDocuments:currentAnalysisVersion:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v6)(*(_QWORD *)(v0 + 16), v3 & 1, *(_QWORD *)(v0 + 24), v1 & 1);
}

uint64_t CoreSpotlightUpdateFetcher.fetchUpdatedDocumentsFromSpotlight(maxDocuments:currentAnalysisVersion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

id CoreSpotlightUpdateFetcher.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CoreSpotlightUpdateFetcher.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  objc_super v5;

  v1 = OBJC_IVAR____TtC21DocumentUnderstanding26CoreSpotlightUpdateFetcher_iOSUpdateFetcher;
  v2 = objc_allocWithZone((Class)type metadata accessor for CoreSpotlightiOSFileUpdateFetcher());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for CoreSpotlightUpdateFetcher();
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t type metadata accessor for CoreSpotlightUpdateFetcher()
{
  return objc_opt_self();
}

id CoreSpotlightUpdateFetcher.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSpotlightUpdateFetcher();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static TaggedCharacterRange.annotationTypeUniqueIdentifier(tagType:)(char a1)
{
  return *(_QWORD *)&aU_0[8 * a1];
}

uint64_t TaggedCharacterRange.__allocating_init(annotationType:tags:range:text:values:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_QWORD *)(result + 48) = a5;
  *(_QWORD *)(result + 56) = a6;
  return result;
}

uint64_t static TaggedCharacterRange.mergeTaggedCharacterRanges(_:usingBaseTaggedCharacterRanges:)(int64_t a1, unint64_t a2)
{
  specialized static TaggedCharacterRange.mergeTagsFromTaggedCharacterRanges(_:withTaggedCharacterRanges:)(a2, a1);
  return swift_bridgeObjectRetain();
}

uint64_t TaggedCharacterRange.TaggedCharacterRangeAnnotationType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TaggedCharacterRange.TaggedCharacterRangeAnnotationType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TaggedCharacterRange.TaggedCharacterRangeAnnotationType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t TaggedCharacterRange.annotationType.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t TaggedCharacterRange.annotationType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*TaggedCharacterRange.annotationType.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t TaggedCharacterRange.tags.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t TaggedCharacterRange.tags.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*TaggedCharacterRange.tags.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t TaggedCharacterRange.range.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t TaggedCharacterRange.range.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*TaggedCharacterRange.range.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t TaggedCharacterRange.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaggedCharacterRange.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TaggedCharacterRange.text.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t TaggedCharacterRange.values.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t TaggedCharacterRange.values.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*TaggedCharacterRange.values.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t TaggedCharacterRange.init(annotationType:tags:range:text:values:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  *(_QWORD *)(v6 + 56) = a6;
  return v6;
}

uint64_t static TaggedCharacterRange.enrichAndFilterTaggedCharacterRanges(_:usingMapping:withAnnotationType:)()
{
  return MEMORY[0x24BEE4AF8];
}

_QWORD *static TaggedCharacterRange.isRangeOverlap(_:_:)(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;

  if (result[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = a2[2];
  if (!v2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a2[4] >= result[5])
    return 0;
  if (v2 >= 2)
    return (_QWORD *)(result[4] < a2[5]);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t static TaggedCharacterRange.mergeTagsFromTaggedCharacterRanges(_:withTaggedCharacterRanges:)(unint64_t a1, int64_t a2)
{
  specialized static TaggedCharacterRange.mergeTagsFromTaggedCharacterRanges(_:withTaggedCharacterRanges:)(a1, a2);
  return swift_bridgeObjectRetain();
}

unint64_t static TaggedCharacterRange.isTaggedCharacterRangesSorted(tcrs:)(unint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = result;
  if (result >> 62)
    goto LABEL_29;
  v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return 1;
  v3 = v2 - 1;
  if (__OFSUB__(v2, 1))
  {
LABEL_32:
    __break(1u);
    return 1;
  }
  while ((v3 & 0x8000000000000000) == 0)
  {
    if (!v3)
      return 1;
    v4 = 0;
    v5 = v1 & 0xC000000000000001;
    v6 = v2 - 2;
    v7 = (uint64_t *)(v1 + 40);
    while (v3 != v4)
    {
      if (v5)
      {
        v8 = MEMORY[0x22E2AFF34](v4, v1);
      }
      else
      {
        if (v4 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_27;
        v8 = *(v7 - 1);
        swift_retain();
      }
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 168))();
      swift_release();
      if (*(_QWORD *)(v9 + 16) < 2uLL)
        goto LABEL_25;
      v10 = *(_QWORD *)(v9 + 40);
      swift_bridgeObjectRelease();
      if (v5)
      {
        v11 = MEMORY[0x22E2AFF34](v4 + 1, v1);
      }
      else
      {
        if (v4 + 1 >= *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_28;
        v11 = *v7;
        swift_retain();
      }
      v12 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 168))();
      swift_release();
      if (!*(_QWORD *)(v12 + 16))
        goto LABEL_26;
      v13 = *(_QWORD *)(v12 + 32);
      swift_bridgeObjectRelease();
      result = v13 >= v10;
      ++v7;
      if (v13 < v10 || v6 == v4++)
        return result;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return 1;
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v3 = v2 - 1;
    if (__OFSUB__(v2, 1))
      goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t TaggedCharacterRange.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TaggedCharacterRange.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized static TaggedCharacterRange.mergeTagsFromTaggedCharacterRanges(_:withTaggedCharacterRanges:)(unint64_t a1, int64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(_QWORD *, _QWORD);
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[4];

  if (a1 >> 62)
    goto LABEL_69;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    v4 = a1;
    if ((unint64_t)a2 >> 62)
    {
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v4 = a1;
    }
    else
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v6 = 0;
    v40 = a2;
    v41 = v4 & 0xC000000000000001;
    v36 = v4 + 32;
    v7 = a2 & 0xC000000000000001;
    v38 = v5;
    v39 = v3;
    v43 = a2 & 0xC000000000000001;
    while (1)
    {
      if (v41)
      {
        v9 = MEMORY[0x22E2AFF34](v6, a1);
      }
      else
      {
        v9 = *(_QWORD *)(v36 + 8 * v6);
        swift_retain();
      }
      v10 = __OFADD__(v6, 1);
      v11 = v6 + 1;
      if (v10)
        goto LABEL_66;
      v44[0] = MEMORY[0x24BEE4AF8];
      v42 = v11;
      if (!v5)
      {
        v20 = MEMORY[0x24BEE4AF8];
        if ((MEMORY[0x24BEE4AF8] & 0x8000000000000000) != 0)
          goto LABEL_58;
        goto LABEL_30;
      }
      if (v5 < 1)
        goto LABEL_67;
      swift_bridgeObjectRetain();
      v12 = 0;
LABEL_16:
      if (v7)
      {
        v13 = MEMORY[0x22E2AFF34](v12, a2);
        if (v13 == v9)
          goto LABEL_14;
      }
      else
      {
        v13 = *(_QWORD *)(a2 + 8 * v12 + 32);
        swift_retain();
        if (v13 == v9)
          goto LABEL_14;
      }
      v14 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 168))();
      v15 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 168))();
      if (v14[2] < 2uLL)
        goto LABEL_61;
      v16 = v15[2];
      if (!v16)
        break;
      if (v15[4] >= v14[5])
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v16 < 2)
          goto LABEL_65;
        v17 = v14[4];
        v18 = v15[5];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = v17 < v18;
        v7 = v43;
        if (v19)
        {
LABEL_14:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_15;
        }
        swift_release();
      }
LABEL_15:
      if (v5 != ++v12)
        goto LABEL_16;
      swift_bridgeObjectRelease();
      v20 = v44[0];
      if ((v44[0] & 0x8000000000000000) != 0)
        goto LABEL_58;
LABEL_30:
      if ((v20 & 0x4000000000000000) == 0)
      {
        v21 = *(_QWORD *)(v20 + 16);
        swift_retain();
        goto LABEL_32;
      }
LABEL_58:
      swift_retain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
LABEL_32:
      v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v21)
      {
        if (v21 < 1)
          goto LABEL_68;
        v23 = 0;
LABEL_37:
        if ((v20 & 0xC000000000000001) != 0)
        {
          v24 = MEMORY[0x22E2AFF34](v23, v20);
        }
        else
        {
          v24 = *(_QWORD *)(v20 + 8 * v23 + 32);
          swift_retain();
        }
        v25 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 144))();
        swift_release();
        v26 = *(_QWORD *)(v25 + 16);
        a2 = v22[2];
        v27 = a2 + v26;
        if (__OFADD__(a2, v26))
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          break;
        }
        isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)isUniquelyReferenced_nonNull_native && v27 <= v22[3] >> 1)
        {
          if (!*(_QWORD *)(v25 + 16))
          {
LABEL_35:
            if (v26)
              goto LABEL_60;
            goto LABEL_36;
          }
        }
        else
        {
          if (a2 <= v27)
            v29 = a2 + v26;
          else
            v29 = a2;
          v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v29, 1, v22);
          if (!*(_QWORD *)(v25 + 16))
            goto LABEL_35;
        }
        v30 = v22[2];
        if ((v22[3] >> 1) - v30 < v26)
          goto LABEL_63;
        v31 = (unint64_t)&v22[2 * v30 + 4];
        if (v25 + 32 < v31 + 16 * v26 && v31 < v25 + 32 + 16 * v26)
        {
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v26)
        {
          v33 = v22[2];
          v10 = __OFADD__(v33, v26);
          v34 = v33 + v26;
          if (v10)
            goto LABEL_64;
          v22[2] = v34;
        }
LABEL_36:
        swift_bridgeObjectRelease();
        if (v21 == ++v23)
          goto LABEL_6;
        goto LABEL_37;
      }
LABEL_6:
      swift_release_n();
      v8 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v9 + 160))(v44);
      specialized Array.append<A>(contentsOf:)((uint64_t)v22);
      v8(v44, 0);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 128))(2);
      swift_release();
      a2 = v40;
      v6 = v42;
      v7 = v43;
      v5 = v38;
      if (v42 == v39)
        goto LABEL_70;
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_70:
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t specialized TaggedCharacterRange.TaggedCharacterRangeAnnotationType.init(rawValue:)(unint64_t result)
{
  if (result >= 9)
    return 9;
  return result;
}

unint64_t lazy protocol witness table accessor for type TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance TaggedCharacterRange.TaggedCharacterRangeAnnotationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance TaggedCharacterRange.TaggedCharacterRangeAnnotationType;
  if (!lazy protocol witness table cache variable for type TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance TaggedCharacterRange.TaggedCharacterRangeAnnotationType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for TaggedCharacterRange.TaggedCharacterRangeAnnotationType, &type metadata for TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedCharacterRange.TaggedCharacterRangeAnnotationType and conformance TaggedCharacterRange.TaggedCharacterRangeAnnotationType);
  }
  return result;
}

uint64_t type metadata accessor for TaggedCharacterRange()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for TaggedCharacterRange.TaggedCharacterRangeAnnotationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaggedCharacterRange.TaggedCharacterRangeAnnotationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_22839756C + 4 * byte_2284C5415[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2283975A0 + 4 * asc_2284C5410[v4]))();
}

uint64_t sub_2283975A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283975A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283975B0);
  return result;
}

uint64_t sub_2283975BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283975C4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_2283975C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283975D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaggedCharacterRange.TaggedCharacterRangeAnnotationType()
{
  return &type metadata for TaggedCharacterRange.TaggedCharacterRangeAnnotationType;
}

uint64_t DUFoundInEventHTMLPreprocessingImplementation.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t DUDocumentFoundInUIElements.styleProperties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUDocumentFoundInUIElements.superviewClassIndices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUDocumentFoundInUIElements.superviewClassNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUDocumentFoundInUIElements.range.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DUDocumentFoundInUIElements.range.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*DUDocumentFoundInUIElements.range.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUDocumentFoundInUIElements.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUDocumentFoundInUIElements.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2283976D4 + 4 * byte_2284C55A0[a1]))(0x6F7250656C797473, 0xEF73656974726570);
}

unint64_t sub_2283976D4()
{
  return 0xD000000000000015;
}

unint64_t sub_2283976F4()
{
  return 0xD000000000000013;
}

uint64_t sub_228397710()
{
  return 0x65676E6172;
}

uint64_t sub_228397724()
{
  return 1954047348;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DUDocumentFoundInUIElements.CodingKeys()
{
  unsigned __int8 *v0;

  return DUDocumentFoundInUIElements.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DUDocumentFoundInUIElements.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized DUDocumentFoundInUIElements.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance DUDocumentFoundInUIElements.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance DUDocumentFoundInUIElements.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DUDocumentFoundInUIElements.CodingKeys()
{
  lazy protocol witness table accessor for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DUDocumentFoundInUIElements.CodingKeys()
{
  lazy protocol witness table accessor for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double DUDocumentFoundInUIElements.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  specialized DUDocumentFoundInUIElements.init(from:)(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t DUDocumentFoundInUIElements.init(styleProperties:superviewClassIndices:superviewClassNames:range:text:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

double protocol witness for Decodable.init(from:) in conformance DUDocumentFoundInUIElements@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  specialized DUDocumentFoundInUIElements.init(from:)(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

id DUFoundInEventHTMLPreprocessingImplementation.pageContentFetcher.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)PageContentFetcher), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

unint64_t static DUFoundInEventHTMLPreprocessingImplementation.implementationID.getter()
{
  return 0xD000000000000025;
}

uint64_t static DUFoundInEventHTMLPreprocessingImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventHTMLPreprocessingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventHTMLPreprocessingSpecification;
  *a1 = result;
  return result;
}

void *static DUFoundInEventHTMLPreprocessingImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUFoundInEventHTMLPreprocessingImplementation.implementationAttributes.getter;
}

uint64_t DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v24 = a3;
  v25 = a5;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v28 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS();
  v26 = *(_QWORD *)(v14 - 8);
  v27 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  v17 = (void *)static OS_dispatch_queue.main.getter();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v6;
  v18[3] = a1;
  v19 = v24;
  v18[4] = a2;
  v18[5] = v19;
  v20 = v25;
  v18[6] = a4;
  v18[7] = v20;
  v18[8] = a6;
  aBlock[4] = partial apply for closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_5;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22E2AFD00](0, v16, v13, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v16, v27);
}

void closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[6];

  v13 = DUFoundInEventHTMLPreprocessingImplementation.pageContentFetcher.getter();
  v14 = (void *)MEMORY[0x22E2AF8EC](a2, a3);
  v15 = (void *)MEMORY[0x22E2AF8EC](a4, a5);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a6;
  *(_QWORD *)(v16 + 24) = a7;
  v18[4] = partial apply for closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:);
  v18[5] = v16;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> ();
  v18[3] = &block_descriptor_7;
  v17 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_runJavaScriptOnHTML_javaScript_completionHandler_, v14, v15, v17);
  _Block_release(v17);

}

uint64_t closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  uint8_t *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v34[2];
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[6];

  v42 = a1;
  v43 = a4;
  v41 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v44 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v39 = v8;
    v15 = a2;
    Logger.init()();
    v16 = a2;
    v17 = a2;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    v38 = v18;
    if (os_log_type_enabled(v18, v19))
    {
      v36 = v12;
      v20 = swift_slowAlloc();
      v37 = v7;
      v21 = (uint8_t *)v20;
      v35 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v21 = 138412290;
      v34[1] = v21 + 4;
      v22 = a2;
      v23 = v5;
      v24 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v25 = v35;
      v12 = v36;
      *v35 = v24;
      v5 = v23;

      v26 = v38;
      _os_log_impl(&dword_2282CC000, v38, v19, "Error evaluating Javascript: %@", v21, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v25, -1, -1);
      v27 = v21;
      v7 = v37;
      MEMORY[0x22E2B117C](v27, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v8 = v39;
  }
  type metadata accessor for OS_dispatch_queue();
  v28 = (void *)static OS_dispatch_queue.main.getter();
  v29 = (_QWORD *)swift_allocObject();
  v30 = v42;
  v31 = v43;
  v29[2] = v41;
  v29[3] = v31;
  v29[4] = v30;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:);
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_13_0;
  v32 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22E2AFD00](0, v10, v7, v32);
  _Block_release(v32);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v10, v8);
}

uint64_t closure #1 in closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(void (*a1)(unint64_t), uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  if (a3)
    v4 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(a3);
  else
    v4 = 0;
  a1(v4);
  return swift_bridgeObjectRelease();
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v23 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v7 << 6);
      v12 = v7;
    }
    else
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_37;
      if (v13 >= v22)
      {
LABEL_33:
        outlined consume of [String : String].Iterator._Variant();
        return (unint64_t)v2;
      }
      v14 = *(_QWORD *)(v23 + 8 * v13);
      v12 = v7 + 1;
      if (!v14)
      {
        v12 = v7 + 2;
        if (v7 + 2 >= v22)
          goto LABEL_33;
        v14 = *(_QWORD *)(v23 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 3;
          if (v7 + 3 >= v22)
            goto LABEL_33;
          v14 = *(_QWORD *)(v23 + 8 * v12);
          if (!v14)
          {
            v12 = v7 + 4;
            if (v7 + 4 >= v22)
              goto LABEL_33;
            v14 = *(_QWORD *)(v23 + 8 * v12);
            if (!v14)
            {
              v15 = v7 + 5;
              if (v7 + 5 >= v22)
                goto LABEL_33;
              v14 = *(_QWORD *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v12 >= v22)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v23 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    outlined init with copy of AnyHashable((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of [String : String].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v25);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v25, v26);
    v27 = v24;
    outlined init with take of Any(v26, v28);
    v16 = v27;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, &v27);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v16, *((uint64_t *)&v16 + 1));
    v17 = result;
    if ((v18 & 1) != 0)
    {
      v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v16;
      v9 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
      result = (unint64_t)outlined init with take of Any(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    result = (unint64_t)outlined init with take of Any(&v27, (_OWORD *)(v2[7] + 32 * result));
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_36;
    v2[2] = v21;
LABEL_8:
    v7 = v12;
    v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  int64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  _OWORD v28[2];
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    v1 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v23 = a1 + 64;
  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v10 = (v4 - 1) & v4;
      v11 = __clz(__rbit64(v4)) | (v6 << 6);
      v12 = v6;
    }
    else
    {
      v13 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_40;
      if (v13 >= v22)
      {
LABEL_36:
        outlined consume of [String : String].Iterator._Variant();
        return (unint64_t)v1;
      }
      v14 = *(_QWORD *)(v23 + 8 * v13);
      v12 = v6 + 1;
      if (!v14)
      {
        v12 = v6 + 2;
        if (v6 + 2 >= v22)
          goto LABEL_36;
        v14 = *(_QWORD *)(v23 + 8 * v12);
        if (!v14)
        {
          v12 = v6 + 3;
          if (v6 + 3 >= v22)
            goto LABEL_36;
          v14 = *(_QWORD *)(v23 + 8 * v12);
          if (!v14)
          {
            v12 = v6 + 4;
            if (v6 + 4 >= v22)
              goto LABEL_36;
            v14 = *(_QWORD *)(v23 + 8 * v12);
            if (!v14)
            {
              v15 = v6 + 5;
              if (v6 + 5 >= v22)
                goto LABEL_36;
              v14 = *(_QWORD *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_41;
                  if (v12 >= v22)
                    goto LABEL_36;
                  v14 = *(_QWORD *)(v23 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v6 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v31);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v32 + 8);
    v29[0] = v32[0];
    v29[1] = v32[1];
    v30 = v33;
    v28[0] = v31[0];
    v28[1] = v31[1];
    outlined init with copy of AnyHashable((uint64_t)v28, (uint64_t)v27);
    if (!swift_dynamicCast())
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
LABEL_35:
      swift_bridgeObjectRelease();
      outlined consume of [String : String].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v29 + 8, (uint64_t)v27);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    result = specialized __RawDictionaryStorage.find<A>(_:)(v25, v26);
    if ((v16 & 1) != 0)
    {
      v7 = 16 * result;
      v8 = (uint64_t *)(v1[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v25;
      v8[1] = v26;
      v9 = (uint64_t *)(v1[7] + v7);
      result = swift_bridgeObjectRelease();
      *v9 = v25;
      v9[1] = v26;
      goto LABEL_8;
    }
    if (v1[2] >= v1[3])
      break;
    *(_QWORD *)((char *)v1 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = (uint64_t *)(v1[6] + 16 * result);
    *v17 = v25;
    v17[1] = v26;
    v18 = (uint64_t *)(v1[7] + 16 * result);
    *v18 = v25;
    v18[1] = v26;
    v19 = v1[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_39;
    v1[2] = v21;
LABEL_8:
    v6 = v12;
    v4 = v10;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(on:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String : Any]?, Never>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v14 + v13, (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(a3, a4, a5, v17, (uint64_t)partial apply for closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(on:with:), v14);
  return swift_release();
}

uint64_t closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(on:with:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String : Any]?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t DUFoundInEventHTMLPreprocessingImplementation.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t DUFoundInEventHTMLPreprocessingImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[28] = a1;
  v2[29] = v1;
  v3 = type metadata accessor for String.Encoding();
  v2[30] = v3;
  v2[31] = *(_QWORD *)(v3 - 8);
  v2[32] = swift_task_alloc();
  v4 = type metadata accessor for Logger();
  v2[33] = v4;
  v2[34] = *(_QWORD *)(v4 - 8);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUFoundInEventHTMLPreprocessingImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(void *);
  id v16;
  void (*v17)(_QWORD *);
  _QWORD *v18;
  uint64_t ObjCClassFromMetadata;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;

  v1 = (_QWORD *)(*(uint64_t (**)(void))(**(_QWORD **)(v0 + 224) + 136))();
  if (!v1
    || (v2 = v1,
        v3 = (_QWORD *)MEMORY[0x24BEE4EA0],
        v4 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xF0))(),
        *(_QWORD *)(v0 + 296) = v4,
        v2,
        !v4))
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v24 = swift_allocError();
    *(_QWORD *)v25 = 0xD000000000000024;
    *(_QWORD *)(v25 + 8) = 0x80000002284DE840;
    *(_BYTE *)(v25 + 16) = 0;
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v24, 1);
  }
  v5 = (_QWORD *)(*(uint64_t (**)(void))((*v3 & *v4) + 0x278))();
  *(_QWORD *)(v0 + 304) = v5;
  if (!v5)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v24 = swift_allocError();
    *(_QWORD *)v27 = 0xD00000000000001ELL;
    *(_QWORD *)(v27 + 8) = 0x80000002284DE870;
    *(_BYTE *)(v27 + 16) = 0;

    goto LABEL_9;
  }
  v6 = v5;
  v7 = (*(uint64_t (**)(void))((*v3 & *v5) + 0x60))();
  *(_QWORD *)(v0 + 312) = v8;
  if (!v8)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v24 = swift_allocError();
    *(_QWORD *)v28 = 0xD00000000000001CLL;
    *(_QWORD *)(v28 + 8) = 0x80000002284DE890;
LABEL_13:
    *(_BYTE *)(v28 + 16) = 0;

    goto LABEL_9;
  }
  v9 = v7;
  v10 = v8;
  v11 = (*(uint64_t (**)(void))((*v3 & *v6) + 0x78))();
  *(_QWORD *)(v0 + 320) = v11;
  if (!v11)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v24 = swift_allocError();
    *(_QWORD *)v28 = 0xD00000000000001BLL;
    *(_QWORD *)(v28 + 8) = 0x80000002284DE8B0;
    goto LABEL_13;
  }
  v12 = (void *)v11;
  v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentHTMLData()), sel_init);
  *(_QWORD *)(v0 + 328) = v13;
  v14 = *(void (**)(uint64_t, uint64_t))((*v3 & *v13) + 0x68);
  swift_bridgeObjectRetain();
  v14(v9, v10);
  v15 = *(void (**)(void *))((*v3 & *v13) + 0x80);
  v16 = v12;
  v15(v12);
  v17 = *(void (**)(_QWORD *))((*v3 & *v4) + 0x280);
  v18 = v6;
  v17(v6);
  type metadata accessor for DUFoundInEventHTMLPreprocessingImplementation();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v20 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  *(_QWORD *)(v0 + 336) = v20;
  v21 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000010, 0x80000002284DE8D0);
  v22 = (void *)MEMORY[0x22E2AF8EC](29546, 0xE200000000000000);
  v23 = objc_msgSend(v20, sel_pathForResource_ofType_, v21, v22);

  if (v23)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = String.init(contentsOfFile:)();
    v37 = v36;
    swift_bridgeObjectRelease();
  }
  else
  {
    Logger.init()();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_2282CC000, v29, v30, "Error accessing file", v31, 2u);
      MEMORY[0x22E2B117C](v31, -1, -1);
    }
    v33 = *(_QWORD *)(v0 + 272);
    v32 = *(_QWORD *)(v0 + 280);
    v34 = *(_QWORD *)(v0 + 264);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    v35 = 0;
    v37 = 0xE000000000000000;
  }
  *(_QWORD *)(v0 + 344) = 0;
  *(_QWORD *)(v0 + 352) = v37;
  v38 = *(_QWORD *)(v0 + 232);
  v39 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v39;
  v39[2] = v38;
  v39[3] = v9;
  v39[4] = v10;
  v39[5] = v35;
  v39[6] = v37;
  v40 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 368) = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
  *v40 = v0;
  v40[1] = DUFoundInEventHTMLPreprocessingImplementation.runTypedOnRequest(request:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  void (*v53)(uint64_t, unint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  Swift::String v94;
  Swift::String v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  Swift::String v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  _QWORD *v107;
  void *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  _OWORD *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  unint64_t v123;

  v1 = (_OWORD *)(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 208);
  if (!v2 || !*(_QWORD *)(v2 + 16))
  {
    *v1 = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
LABEL_6:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 64, &demangling cache variable for type metadata for Any?);
    v5 = 0;
    v6 = 0;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(1954047348, 0xE400000000000000);
  if ((v4 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v3, v0 + 64);
  }
  else
  {
    *v1 = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 88))
    goto LABEL_6;
  v7 = swift_dynamicCast();
  v8 = v7 == 0;
  if (v7)
    v5 = *(_QWORD *)(v0 + 160);
  else
    v5 = 0;
  if (v8)
    v6 = 0;
  else
    v6 = *(_QWORD *)(v0 + 168);
LABEL_15:
  v9 = *(_QWORD **)(v0 + 296);
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v11 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v9) + 0x178);
  v12 = v11(v5, v6);
  v13 = (*(uint64_t (**)(uint64_t))((*v10 & *v9) + 0xE0))(v12);
  v118 = v14;
  if (v14)
  {
    v15 = v13;
    v16 = v14;
    v17 = String.count.getter();
    v120 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    v18 = *(_QWORD **)(v0 + 296);
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20 = swift_bridgeObjectRelease();
    v21 = (*(uint64_t (**)(uint64_t))((*v10 & *v18) + 0x170))(v20);
    if (v22)
      v23 = v21;
    else
      v23 = 0;
    if (v22)
      v24 = v22;
    else
      v24 = (void *)0xE000000000000000;
    swift_bridgeObjectRetain();
    v25._countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v15, v16);
  }
  else
  {
    v120 = 0;
  }
  v26 = (_OWORD *)(v0 + 96);
  v27 = 0xD000000000000012;
  if (!v2)
  {
LABEL_51:
    *v26 = 0u;
    v26[1] = 0u;
LABEL_52:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v26, &demangling cache variable for type metadata for Any?);
    goto LABEL_53;
  }
  if (*(_QWORD *)(v2 + 16)
    && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x80000002284DE960), (v29 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v28, v0 + 96);
  }
  else
  {
    *v26 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 120))
    goto LABEL_52;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v30 = *(_QWORD *)(v0 + 200);
    v123 = MEMORY[0x24BEE4AF8];
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
    {
      v32 = (_QWORD *)(v0 + 128);
      v111 = *(_QWORD *)(v0 + 248);
      v112 = (void *)objc_opt_self();
      v33 = v30 + 32;
      v34 = *(void **)(v0 + 344);
      while (1)
      {
        outlined init with copy of Any(v33, (uint64_t)v32);
        __swift_project_boxed_opaque_existential_1(v32, *(_QWORD *)(v0 + 152));
        v35 = _bridgeAnythingToObjectiveC<A>(_:)();
        *(_QWORD *)(v0 + 192) = 0;
        v36 = objc_msgSend(v112, sel_dataWithJSONObject_options_error_, v35, 1, v0 + 192);
        swift_unknownObjectRelease();
        v37 = *(void **)(v0 + 192);
        if (!v36)
        {
          v86 = v32;
          v87 = *(void **)(v0 + 328);
          v88 = *(void **)(v0 + 336);
          v89 = *(void **)(v0 + 320);
          v90 = *(void **)(v0 + 296);
          v91 = *(void **)(v0 + 304);
          v92 = v37;
          v93 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _StringGuts.grow(_:)(35);
          *(_QWORD *)(v0 + 176) = 0;
          *(_QWORD *)(v0 + 184) = 0xE000000000000000;
          v94._countAndFlagsBits = 0xD000000000000014;
          v94._object = (void *)0x80000002284DE980;
          String.append(_:)(v94);
          _print_unlocked<A, B>(_:_:)();
          v95._countAndFlagsBits = 0x4E4F534A20736120;
          v95._object = (void *)0xED00006174616420;
          String.append(_:)(v95);
          v96 = *(_QWORD *)(v0 + 176);
          v97 = *(_QWORD *)(v0 + 184);
          lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
          v74 = swift_allocError();
          *(_QWORD *)v98 = v96;
          *(_QWORD *)(v98 + 8) = v97;
          *(_BYTE *)(v98 + 16) = 0;

          v85 = (uint64_t)v86;
          goto LABEL_60;
        }
        v116 = v33;
        v117 = v31;
        v38 = v37;
        v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v41 = v40;

        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (!v42)
          goto LABEL_57;
        v43 = *(_QWORD *)(v0 + 256);
        v44 = *(_QWORD *)(v0 + 240);
        static String.Encoding.utf8.getter();
        v45 = String.data(using:allowLossyConversion:)();
        v47 = v46;
        swift_bridgeObjectRelease();
        v48 = v43;
        v49 = v47;
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v48, v44);
        if (v47 >> 60 == 15)
        {
LABEL_57:
          v78 = *(void **)(v0 + 328);
          v79 = *(void **)(v0 + 336);
          v80 = v39;
          v81 = *(void **)(v0 + 320);
          v82 = *(void **)(v0 + 304);
          v121 = *(void **)(v0 + 296);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _StringGuts.grow(_:)(34);
          swift_bridgeObjectRelease();
          v83._countAndFlagsBits = Data.description.getter();
          String.append(_:)(v83);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
          v74 = swift_allocError();
          *(_QWORD *)v84 = 0xD000000000000020;
          *(_QWORD *)(v84 + 8) = 0x80000002284DE9A0;
          *(_BYTE *)(v84 + 16) = 0;

          outlined consume of Data._Representation(v80, v41);
          v85 = v0 + 128;
          goto LABEL_60;
        }
        v114 = v39;
        v115 = v41;
        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        lazy protocol witness table accessor for type DUDocumentFoundInUIElements and conformance DUDocumentFoundInUIElements();
        v2 = v45;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        if (v34)
          break;
        swift_release();
        v113 = *(_OWORD **)(v0 + 16);
        v50 = *(_QWORD **)(v0 + 40);
        v51 = *(_QWORD *)(v0 + 48);
        v27 = *(_QWORD *)(v0 + 56);
        v52 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentUIElement()), sel_init);
        v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v53 = *(void (**)(uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v52) + 0xB8);
        swift_bridgeObjectRetain();
        v53(v51, v27);
        v54 = *(void (**)(uint64_t))((*v10 & *v52) + 0x118);
        v55 = swift_bridgeObjectRetain();
        v54(v55);
        v56 = *(void (**)(uint64_t))((*v10 & *v52) + 0x190);
        v57 = swift_bridgeObjectRetain();
        v26 = v113;
        v56(v57);
        v58 = *(void (**)(uint64_t))((*v10 & *v52) + 0x1C0);
        v59 = swift_bridgeObjectRetain();
        v58(v59);
        swift_bridgeObjectRetain();
        v60 = v50;
        v61 = v2;
        if (v118)
        {
          v60 = v50;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v62 = v50[2];
            if (!v62)
              goto LABEL_50;
          }
          else
          {
            v60 = specialized _ArrayBuffer._consumeAndCreateNew()(v50);
            v62 = v60[2];
            if (!v62)
            {
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
          }
          v63 = v60[4];
          v64 = __OFADD__(v63, v120);
          v65 = v63 + v120;
          if (v64)
            goto LABEL_66;
          v60[4] = v65;
          if (v62 < 2)
            goto LABEL_67;
          v66 = v60[5];
          v64 = __OFADD__(v66, v120);
          v67 = v66 + v120;
          if (v64)
            goto LABEL_68;
          v60[5] = v67;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *v52) + 0x1A8))(v60);
        v68 = v52;
        MEMORY[0x22E2AFAFC]();
        if (*(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        outlined consume of Data?(v61, v49);
        outlined consume of Data._Representation(v114, v115);
        v32 = (_QWORD *)(v0 + 128);
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
        v34 = 0;
        v33 = v116 + 32;
        v31 = v117 - 1;
        if (v117 == 1)
          goto LABEL_61;
      }
      v99 = *(void **)(v0 + 336);
      v100 = *(void **)(v0 + 320);
      v101 = *(void **)(v0 + 304);
      v119 = *(void **)(v0 + 328);
      v122 = *(void **)(v0 + 296);

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v102._countAndFlagsBits = Data.description.getter();
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
      v74 = swift_allocError();
      *(_QWORD *)v103 = 0xD00000000000001FLL;
      *(_QWORD *)(v103 + 8) = 0x80000002284DE9D0;
      *(_BYTE *)(v103 + 16) = 0;

      outlined consume of Data?(v2, v49);
      outlined consume of Data._Representation(v114, v115);

      v85 = (uint64_t)v32;
LABEL_60:
      __swift_destroy_boxed_opaque_existential_1Tm(v85);
      goto LABEL_54;
    }
LABEL_61:
    swift_bridgeObjectRelease();
    if (!v118)
    {
LABEL_64:
      v104 = *(void **)(v0 + 328);
      v105 = *(void **)(v0 + 336);
      v106 = *(void **)(v0 + 320);
      v107 = *(_QWORD **)(v0 + 296);
      v108 = *(void **)(v0 + 304);
      (*(void (**)(unint64_t))((*v10 & *v107) + 0x268))(v123);
      v109 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
      v74 = (uint64_t)specialized DUDocument.init(rawDocument:maxLength:)(v107, 100000);

      v76 = 0;
      goto LABEL_55;
    }
    v2 = specialized DUFoundInEventHTMLPreprocessingImplementation.prependUIElementForSubject(inputDocument:subjectRange:)(*(_QWORD **)(v0 + 296), v120);
    if (!(v123 >> 62))
    {
LABEL_63:
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, v2);
      goto LABEL_64;
    }
LABEL_69:
    swift_bridgeObjectRetain();
    v110 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v110 < 0)
      __break(1u);
    goto LABEL_63;
  }
LABEL_53:
  v70 = *(void **)(v0 + 328);
  v69 = *(void **)(v0 + 336);
  v71 = *(void **)(v0 + 320);
  v73 = *(void **)(v0 + 296);
  v72 = *(void **)(v0 + 304);
  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v74 = swift_allocError();
  *(_QWORD *)v75 = v27 + 50;
  *(_QWORD *)(v75 + 8) = 0x80000002284DE910;
  *(_BYTE *)(v75 + 16) = 0;

LABEL_54:
  v76 = 1;
LABEL_55:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v74, v76);
}

uint64_t DUFoundInEventHTMLPreprocessingImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventHTMLPreprocessingImplementation.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUFoundInEventHTMLPreprocessingImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventHTMLPreprocessingSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventHTMLPreprocessingSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUFoundInEventHTMLPreprocessingImplementation()
{
  return 0xD000000000000025;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventHTMLPreprocessingImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventHTMLPreprocessingImplementation;
}

uint64_t protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUFoundInEventHTMLPreprocessingImplementation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v7 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v2 + 152) + *(_QWORD *)(**(_QWORD **)v2 + 152));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = protocol witness for DUProcessingPhaseImplementation.runTypedOnRequest(request:) in conformance DUCategoryClassificationSmolBERToImplementation;
  return v7(a2);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 < v5)
    goto LABEL_31;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x22E2AFF40](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  type metadata accessor for DUDocumentUIElement();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()();
  }
  if (!(v7 >> 62))
  {
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - v5;
    if (!__OFSUB__(v16, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v17 = v24 - v5;
  if (__OFSUB__(v24, v5))
    goto LABEL_40;
LABEL_21:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v15 + 1);
    v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v19 || v18 >= &v19[8 * v17])
      memmove(v18, v19, 8 * v17);
    if (!(v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v21 = v25 + v8;
    if (!__OFADD__(v25, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized DUFoundInEventHTMLPreprocessingImplementation.prependUIElementForSubject(inputDocument:subjectRange:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentUIElement()), sel_init);
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0xE0))();
  (*(void (**)(uint64_t))((*v5 & *v4) + 0xB8))(v6);
  (*(void (**)(void *))((*v5 & *v4) + 0x118))(&outlined read-only object #0 of DUFoundInEventHTMLPreprocessingImplementation.prependUIElementForSubject(inputDocument:subjectRange:));
  (*(void (**)(void *))((*v5 & *v4) + 0x190))(&outlined read-only object #1 of DUFoundInEventHTMLPreprocessingImplementation.prependUIElementForSubject(inputDocument:subjectRange:));
  (*(void (**)(_QWORD))((*v5 & *v4) + 0x1C0))(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int64>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_2284C0D00;
  *(_QWORD *)(result + 32) = 0;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(result + 40) = a2 - 1;
    (*(void (**)(void))((*v5 & *v4) + 0x1A8))();
    return (uint64_t)v4;
  }
  return result;
}

uint64_t specialized DUDocumentFoundInUIElements.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F7250656C797473 && a2 == 0xEF73656974726570;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002284DCCF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002284DCCA0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized DUDocumentFoundInUIElements.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DUDocumentFoundInUIElements.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v27 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v28 = 0;
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE0D38]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v29;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]);
  v28 = 1;
  v11 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int64] and conformance <A> [A], &demangling cache variable for type metadata for [Int64], MEMORY[0x24BEE4038]);
  v26 = v9;
  swift_bridgeObjectRetain();
  v25 = v11;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v24 = v10;
  v12 = v29;
  v28 = 2;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v13 = v29;
  v28 = 3;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v14 = v29;
  LOBYTE(v29) = 4;
  v25 = v14;
  swift_bridgeObjectRetain();
  v15 = KeyedDecodingContainer.decode(_:forKey:)();
  v16 = v26;
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v24 = v15;
  v19(v8, v5);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  v20 = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v22 = v27;
  *v27 = v16;
  v22[1] = v12;
  v22[2] = v13;
  v22[3] = v20;
  v22[4] = v24;
  v22[5] = v18;
  return result;
}

uint64_t type metadata accessor for DUFoundInEventHTMLPreprocessingImplementation()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(on:with:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(on:with:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t lazy protocol witness table accessor for type DUDocumentFoundInUIElements and conformance DUDocumentFoundInUIElements()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUDocumentFoundInUIElements and conformance DUDocumentFoundInUIElements;
  if (!lazy protocol witness table cache variable for type DUDocumentFoundInUIElements and conformance DUDocumentFoundInUIElements)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUDocumentFoundInUIElements, &type metadata for DUDocumentFoundInUIElements);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUDocumentFoundInUIElements and conformance DUDocumentFoundInUIElements);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUFoundInEventHTMLPreprocessingImplementation()
{
  return &protocol witness table for DUFoundInEventHTMLPreprocessingSpecification;
}

uint64_t destroy for DUDocumentFoundInUIElements()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DUDocumentFoundInUIElements(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DUDocumentFoundInUIElements(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DUDocumentFoundInUIElements(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DUDocumentFoundInUIElements(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DUDocumentFoundInUIElements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DUDocumentFoundInUIElements()
{
  return &type metadata for DUDocumentFoundInUIElements;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t sub_22839AAF8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)()
{
  uint64_t *v0;

  closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t sub_22839ABF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_22839AC20()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(htmlString:jsCode:completion:)(*(void (**)(unint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_22839AC58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String : Any]?, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(on:with:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[String : Any]?, Never>);
  return closure #1 in closure #1 in DUFoundInEventHTMLPreprocessingImplementation.evaluateJavaScript(on:with:)();
}

unint64_t lazy protocol witness table accessor for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys;
  if (!lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUDocumentFoundInUIElements.CodingKeys, &unk_24F0FA1B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys;
  if (!lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUDocumentFoundInUIElements.CodingKeys, &unk_24F0FA1B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys;
  if (!lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUDocumentFoundInUIElements.CodingKeys, &unk_24F0FA1B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys;
  if (!lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUDocumentFoundInUIElements.CodingKeys, &unk_24F0FA1B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUDocumentFoundInUIElements.CodingKeys and conformance DUDocumentFoundInUIElements.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12D0], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DUDocumentFoundInUIElements.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DUDocumentFoundInUIElements.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_22839AE70 + 4 * byte_2284C55AA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_22839AEA4 + 4 * byte_2284C55A5[v4]))();
}

uint64_t sub_22839AEA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_22839AEAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x22839AEB4);
  return result;
}

uint64_t sub_22839AEC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x22839AEC8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_22839AECC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_22839AED4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DUDocumentFoundInUIElements.CodingKeys()
{
  return &unk_24F0FA1B8;
}

Swift::String __swiftcall CSSearchableItem.duLoggingDescriptor()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  Swift::String result;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v43 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v43 - v12;
  v14 = objc_msgSend(v0, sel_bundleID);
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v17;
    v45 = v16;

  }
  else
  {
    v44 = 0xE000000000000000;
    v45 = 0;
  }
  v18 = objc_msgSend(v0, sel_domainIdentifier);
  if (v18)
  {
    v19 = v18;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v20;

  }
  else
  {
    v43 = 0;
    v46 = 0xE000000000000000;
  }
  v21 = objc_msgSend(v0, sel_uniqueIdentifier, v43);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  v25 = objc_msgSend(v0, sel_attributeSet);
  v26 = objc_msgSend(v25, sel_contentURL);

  if (v26)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v11, v27, 1, v1);
  outlined init with take of URL?((uint64_t)v11, (uint64_t)v13);
  outlined init with copy of URL?((uint64_t)v13, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    outlined destroy of URL?((uint64_t)v8);
    v28 = 0xED0000646E756F66;
    v29 = 0x5F687461705F6F6ELL;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
    v29 = URL.absoluteString.getter();
    v28 = v30;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  v32 = v44;
  v31 = v45;
  v33 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_2284C2EB0;
  v35 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v34 + 56) = MEMORY[0x24BEE0D00];
  v36 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v34 + 32) = v31;
  *(_QWORD *)(v34 + 40) = v32;
  *(_QWORD *)(v34 + 96) = v35;
  *(_QWORD *)(v34 + 104) = v36;
  *(_QWORD *)(v34 + 64) = v36;
  *(_QWORD *)(v34 + 72) = v33;
  *(_QWORD *)(v34 + 80) = v46;
  *(_QWORD *)(v34 + 136) = v35;
  *(_QWORD *)(v34 + 144) = v36;
  *(_QWORD *)(v34 + 112) = v22;
  *(_QWORD *)(v34 + 120) = v24;
  *(_QWORD *)(v34 + 176) = v35;
  *(_QWORD *)(v34 + 184) = v36;
  *(_QWORD *)(v34 + 152) = v29;
  *(_QWORD *)(v34 + 160) = v28;
  v37 = String.init(format:_:)();
  v39 = v38;
  outlined destroy of URL?((uint64_t)v13);
  v40 = v37;
  v41 = v39;
  result._object = v41;
  result._countAndFlagsBits = v40;
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void __swiftcall DUWikipediaTopicResult.init(title:topicId:debug:confidence:)(DocumentUnderstanding::DUWikipediaTopicResult *__return_ptr retstr, Swift::String_optional title, Swift::String_optional topicId, Swift::String_optional debug, Swift::Double_optional confidence)
{
  char v5;

  retstr->title = title;
  retstr->topicId = topicId;
  retstr->debug = debug;
  retstr->confidence.value = *(Swift::Double *)&confidence.is_nil;
  retstr->confidence.is_nil = v5 & 1;
}

uint64_t DUWikipediaTopicResult.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUWikipediaTopicResult.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DUWikipediaTopicResult.title.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUWikipediaTopicResult.topicId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUWikipediaTopicResult.topicId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DUWikipediaTopicResult.topicId.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUWikipediaTopicResult.debug.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUWikipediaTopicResult.debug.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*DUWikipediaTopicResult.debug.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DUWikipediaTopicResult.confidence.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t DUWikipediaTopicResult.confidence.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*DUWikipediaTopicResult.confidence.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t initializeWithCopy for DUWikipediaTopicResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DUWikipediaTopicResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DUWikipediaTopicResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for DUWikipediaTopicResult(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DUWikipediaTopicResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DUWikipediaTopicResult()
{
  return &type metadata for DUWikipediaTopicResult;
}

id CoreSpotlightOutputSink.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t CoreSpotlightOutputSink.writeTopicsAndClassesToSpotlight(searchableItem:topics:documentClasses:analysisVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  v5 = type metadata accessor for Logger();
  v4[19] = v5;
  v4[20] = *(_QWORD *)(v5 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  return swift_task_switch();
}

id CoreSpotlightOutputSink.writeTopicsAndClassesToSpotlight(searchableItem:topics:documentClasses:analysisVersion:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  id v34;
  Class isa;
  uint64_t v36;
  _QWORD *v37;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "CoreSpotlightOutputSink: Beginning writeTopicsAndClassesToSpotlight", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(void **)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 128);

  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10(v4, v5);
  specialized static SpotlightOutputSinkCommonUtilities.updateSearchableItemFields(searchableItem:topics:documentClasses:topicAnalysisVersion:documentClassAnalysisVersion:)(v9, v8, v7);
  Logger.init()();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_2282CC000, v11, v12, "CoreSpotlightOutputSink: Updated local CSSearchableItem, indexing to Spotlight", v13, 2u);
    MEMORY[0x22E2B117C](v13, -1, -1);
  }
  v14 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 152);
  v16 = *(void **)(v0 + 120);

  v10(v14, v15);
  v17 = objc_msgSend(v16, sel_protection);
  if (v17)
  {
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0;
  }
  result = objc_msgSend(*(id *)(v0 + 120), sel_bundleID);
  if (result)
  {
    v23 = result;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;

    v27 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000017, 0x80000002284DEAF0);
    if (v21)
    {
      v28 = (void *)MEMORY[0x22E2AF8EC](v19, v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = 0;
    }
    v29 = *(void **)(v0 + 120);
    v30 = objc_allocWithZone(MEMORY[0x24BDC2470]);
    v31 = (void *)MEMORY[0x22E2AF8EC](v24, v26);
    swift_bridgeObjectRelease();
    v32 = objc_msgSend(v30, sel_initWithName_protectionClass_bundleIdentifier_, v27, v28, v31);
    *(_QWORD *)(v0 + 184) = v32;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_2284C1ED0;
    *(_QWORD *)(v33 + 32) = v29;
    specialized Array._endMutation()();
    type metadata accessor for CSSearchableItem();
    v34 = v29;
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 192) = isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = CoreSpotlightOutputSink.writeTopicsAndClassesToSpotlight(searchableItem:topics:documentClasses:analysisVersion:);
    v36 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    v37 = (_QWORD *)(v0 + 80);
    v37[1] = 0x40000000;
    v37[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
    v37[3] = &block_descriptor_6;
    v37[4] = v36;
    objc_msgSend(v32, sel_indexSearchableItems_completionHandler_, isa, v37);
    return (id)swift_continuation_await();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CoreSpotlightOutputSink.writeTopicsAndClassesToSpotlight(searchableItem:topics:documentClasses:analysisVersion:)()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 200) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 192);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 192);
  v2 = *(void **)(v0 + 184);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

id CoreSpotlightOutputSink.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSpotlightOutputSink();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CoreSpotlightOutputSink.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSpotlightOutputSink();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t type metadata accessor for CSSearchableItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CSSearchableItem;
  if (!lazy cache variable for type metadata for CSSearchableItem)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CSSearchableItem);
  }
  return result;
}

uint64_t type metadata accessor for CoreSpotlightOutputSink()
{
  return objc_opt_self();
}

id CoreSpotlightiOSFileUpdateFetcher.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t CoreSpotlightiOSFileUpdateFetcher.fetchUpdatedDocumentsFromSpotlight(maxDocuments:currentAnalysisVersion:)()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = type metadata accessor for Logger();
  v0[2] = v1;
  v0[3] = *(_QWORD *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "DocumentUnderstanding: File ingest disabled, skipping fetch of documents from Spotlight", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
}

id CoreSpotlightiOSFileUpdateFetcher.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSpotlightiOSFileUpdateFetcher();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CoreSpotlightiOSFileUpdateFetcher.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreSpotlightiOSFileUpdateFetcher();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CoreSpotlightiOSFileUpdateFetcher()
{
  return objc_opt_self();
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;

  UnknownStorage.init()();
  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v3 = (_QWORD *)(a1 + *(int *)(result + 20));
  *v3 = 0;
  v3[1] = 0;
  return result;
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_DebugInfo;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_DebugInfo)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo.debugString.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_DebugInfo.debugString : DocumentUnderstanding_ClientInterface_DebugInfo@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_DebugInfo.debugString : DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo.debugString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_DebugInfo.debugString.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_ClientInterface_DebugInfo.hasDebugString.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20) + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_DebugInfo.clearDebugString()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_ClientInterface_DebugInfo.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_DebugInfo.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_DebugInfo.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_DebugInfo.protoMessageName.getter()
{
  return 0xD000000000000031;
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_DebugInfo._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_DebugInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_DebugInfo._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_DebugInfo.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_ClientInterface_DebugInfo.traverse<A>(visitor:)(v0);
  if (!v1)
    return UnknownStorage.traverse<A>(visitor:)();
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_DebugInfo.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_ClientInterface_DebugInfo.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_DebugInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  result = UnknownStorage.init()();
  v5 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return 0xD000000000000031;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return DocumentUnderstanding_ClientInterface_DebugInfo.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return DocumentUnderstanding_ClientInterface_DebugInfo.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_DebugInfo()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_DebugInfo@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_DebugInfo._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_DebugInfo()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_DebugInfo()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  v11 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20);
  v12 = (_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  if (!v13)
  {
    if (!v15)
    {
LABEL_11:
      v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v18(v10, a1, v4);
      v18(v8, a2, v4);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v8, v4);
      v19(v10, v4);
      return v17 & 1;
    }
LABEL_10:
    v17 = 0;
    return v17 & 1;
  }
  if (!v15)
    goto LABEL_10;
  if (*v12 == *v14 && v13 == v15)
    goto LABEL_11;
  v17 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_11;
  return v17 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t initializeWithCopy for DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_ClientInterface_DebugInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_22839CC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_DebugInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_22839CD14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_ClientInterface_DebugInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.__allocating_init()()
{
  uint64_t v0;
  double result;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 40) = xmmword_2284C0D30;
  return result;
}

unint64_t static DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.implementationID.getter()
{
  return 0xD00000000000003FLL;
}

uint64_t static DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUWikipediaTopicDetectionSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUWikipediaTopicDetectionSpecification;
  *a1 = result;
  return result;
}

void *static DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.implementationAttributes.getter;
}

uint64_t DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[24];
  uint64_t v5;

  swift_beginAccess();
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + 16, (uint64_t)v4, &demangling cache variable for type metadata for VectorRetrieval??);
  if (v5 != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, a1, &demangling cache variable for type metadata for VectorRetrieval?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for VectorRetrieval??);
  closure #1 in DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.getter(a1);
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, (uint64_t)v4, &demangling cache variable for type metadata for VectorRetrieval?);
  swift_beginAccess();
  outlined assign with take of VectorRetrieval??((uint64_t)v4, v1 + 16);
  return swift_endAccess();
}

uint64_t closure #1 in DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t result;
  void (*v40)(char *, char *, uint64_t);
  void *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = a1;
  v1 = type metadata accessor for Logger();
  v72 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v68 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v63 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v66 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v67 = (char *)&v63 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v69 = (char *)&v63 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v63 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v63 - v16;
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v64 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v65 = (char *)&v63 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v71 = (char *)&v63 - v24;
  v25 = (void *)MEMORY[0x22E2AF8EC](0xD00000000000001FLL, 0x80000002284DECE0);
  v26 = (void *)objc_opt_self();
  v27 = objc_msgSend(v26, sel_bundleWithIdentifier_, v25);

  v73 = v1;
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    v33 = v74;
LABEL_7:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v17, &demangling cache variable for type metadata for URL?);
    Logger.init()();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_2282CC000, v36, v37, "Unable to find the l4 summary metadata plist", v38, 2u);
      MEMORY[0x22E2B117C](v38, -1, -1);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v5, v73);
    goto LABEL_19;
  }
  v70 = v19;
  v28 = (void *)MEMORY[0x22E2AF8EC](0x626C6F6D732D346CLL, 0xEC0000006F747265);
  v29 = (void *)MEMORY[0x22E2AF8EC](0x7473696C70, 0xE500000000000000);
  v30 = objc_msgSend(v27, sel_URLForResource_withExtension_, v28, v29);

  if (v30)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v31 = v70;
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
    v32(v15, 0, 1, v18);
  }
  else
  {
    v31 = v70;
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
    v32(v15, 1, 1, v18);
  }
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v15, (uint64_t)v17, &demangling cache variable for type metadata for URL?);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v35 = v34(v17, 1, v18);
  v33 = v74;
  if (v35 == 1)
    goto LABEL_7;
  v40 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v40(v71, v17, v18);
  v41 = (void *)MEMORY[0x22E2AF8EC](0xD00000000000001FLL, 0x80000002284DECE0);
  v42 = objc_msgSend(v26, sel_bundleWithIdentifier_, v41);

  if (!v42)
  {
    v49 = (uint64_t)v69;
    v32(v69, 1, 1, v18);
    v48 = v71;
LABEL_16:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, &demangling cache variable for type metadata for URL?);
    v50 = v68;
    Logger.init()();
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_2282CC000, v51, v52, "Unable to find the l4 summary vector model", v53, 2u);
      MEMORY[0x22E2B117C](v53, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v50, v73);
    result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v48, v18);
    goto LABEL_19;
  }
  v43 = (void *)MEMORY[0x22E2AF8EC](0x626C6F6D732D346CLL, 0xEC0000006F747265);
  v44 = (void *)MEMORY[0x22E2AF8EC](0x646465626D656C6ELL, 0xEB00000000676E69);
  v45 = objc_msgSend(v42, sel_URLForResource_withExtension_, v43, v44);

  if (v45)
  {
    v46 = (uint64_t)v67;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v47 = 0;
    v48 = v71;
    v49 = (uint64_t)v69;
  }
  else
  {
    v47 = 1;
    v48 = v71;
    v49 = (uint64_t)v69;
    v46 = (uint64_t)v67;
  }
  v32((char *)v46, v47, 1, v18);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v46, v49, &demangling cache variable for type metadata for URL?);
  if (v34((char *)v49, 1, v18) == 1)
    goto LABEL_16;
  v54 = v65;
  v40(v65, (char *)v49, v18);
  v55 = v70;
  v56 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  v57 = v64;
  v56(v64, v54, v18);
  v58 = (uint64_t)v66;
  v56(v66, v48, v18);
  v32((char *)v58, 0, 1, v18);
  v59 = specialized FrozenNLEmbeddingVectorRetrieval.init(embeddingAssetURL:embeddingMetadataURL:)(v57, v58);
  if (!v59)
  {
    v62 = *(void (**)(char *, uint64_t))(v55 + 8);
    v62(v54, v18);
    result = ((uint64_t (*)(char *, uint64_t))v62)(v48, v18);
LABEL_19:
    *(_QWORD *)(v33 + 32) = 0;
    *(_OWORD *)v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    return result;
  }
  *(_QWORD *)(v33 + 24) = &type metadata for FrozenNLEmbeddingVectorRetrieval;
  *(_QWORD *)(v33 + 32) = &protocol witness table for FrozenNLEmbeddingVectorRetrieval;
  *(_QWORD *)v33 = v59;
  *(_QWORD *)(v33 + 8) = v60;
  v61 = *(void (**)(char *, uint64_t))(v55 + 8);
  v61(v54, v18);
  return ((uint64_t (*)(char *, uint64_t))v61)(v48, v18);
}

uint64_t DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, (uint64_t)v3, &demangling cache variable for type metadata for VectorRetrieval?);
  swift_beginAccess();
  outlined assign with take of VectorRetrieval??((uint64_t)v3, v1 + 16);
  return swift_endAccess();
}

void (*DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.getter((uint64_t)v3);
  return DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.modify;
}

void DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.topicRetrieval.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  v3 = *a1 + 40;
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(*a1, v3, &demangling cache variable for type metadata for VectorRetrieval?);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, v4, &demangling cache variable for type metadata for VectorRetrieval?);
    swift_beginAccess();
    outlined assign with take of VectorRetrieval??(v4, v5 + 16);
    swift_endAccess();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v2, &demangling cache variable for type metadata for VectorRetrieval?);
  }
  else
  {
    v6 = v2[18];
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(*a1, v3, &demangling cache variable for type metadata for VectorRetrieval?);
    swift_beginAccess();
    outlined assign with take of VectorRetrieval??(v3, v6 + 16);
    swift_endAccess();
  }
  free(v2);
}

uint64_t DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.runTypedOnRequest(request:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v1 = swift_allocError();
  *(_QWORD *)v2 = 0xD00000000000001BLL;
  *(_QWORD *)(v2 + 8) = 0x80000002284DEC30;
  *(_BYTE *)(v2 + 16) = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, 1);
}

uint64_t DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.deinit()
{
  uint64_t v0;

  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 16, &demangling cache variable for type metadata for VectorRetrieval??);
  return v0;
}

uint64_t DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 16, &demangling cache variable for type metadata for VectorRetrieval??);
  return swift_deallocClassInstance();
}

double DUWikipediaTopicDetectionSmolBERToRetrievalImplementation.init()()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 40) = xmmword_2284C0D30;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUWikipediaTopicDetectionSmolBERToRetrievalImplementation()
{
  return 0xD00000000000003FLL;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUWikipediaTopicDetectionSmolBERToRetrievalImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUWikipediaTopicDetectionSmolBERToRetrievalImplementation;
}

uint64_t outlined assign with take of VectorRetrieval??(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VectorRetrieval??);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_22839D8FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
}

uint64_t sub_22839D924(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, (uint64_t)v4, &demangling cache variable for type metadata for VectorRetrieval?);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 96))(v4);
}

uint64_t type metadata accessor for DUWikipediaTopicDetectionSmolBERToRetrievalImplementation()
{
  return objc_opt_self();
}

uint64_t DUProcessingScheduler.__allocating_init(specifications:implementations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_allocObject();
  v5 = specialized static DUProcessingScheduler.constructSpecificationDictionary(specifications:)(a1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 16) = v5;
  v6 = specialized static DUProcessingScheduler.constructImplementationDictionary(implementations:)(a2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 24) = v6;
  return v4;
}

uint64_t DUProcessingScheduler.processingPhaseSpecifications.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUProcessingScheduler.processingPhaseSpecifications.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUProcessingScheduler.processingPhaseSpecifications.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUProcessingScheduler.processingPhaseImplementations.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUProcessingScheduler.processingPhaseImplementations.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUProcessingScheduler.processingPhaseImplementations.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUProcessingScheduler.init(specifications:implementations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = specialized static DUProcessingScheduler.constructSpecificationDictionary(specifications:)(a1);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = v4;
  v5 = specialized static DUProcessingScheduler.constructImplementationDictionary(implementations:)(a2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = v5;
  return v2;
}

uint64_t DUProcessingScheduler.prioritizedImplementationsForSpecification(specification:request:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  swift_getDynamicType();
  v6 = (*(uint64_t (**)(void))(a1[4] + 16))();
  v8 = v7;
  v9 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 120))();
  if (*(_QWORD *)(v9 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 152))(v12, a2);
    swift_bridgeObjectRelease();
    return v13;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
}

uint64_t DUProcessingScheduler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DUProcessingScheduler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  __int128 v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48[3];
  id v49;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  outlined init with copy of (String, DUProcessingPhaseSpecification)(a1 + 32, (uint64_t)&v46);
  v7 = v46;
  v8 = v47;
  v44 = v46;
  v45 = v47;
  outlined init with take of DUProcessingPhaseSpecification(v48, (uint64_t)v43);
  v9 = (_QWORD *)*a3;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v8;
    outlined init with take of DUProcessingPhaseSpecification(v43, v20[7] + 40 * v11);
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (!v25)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 88;
    while (1)
    {
      outlined init with copy of (String, DUProcessingPhaseSpecification)(v26, (uint64_t)&v46);
      v27 = v46;
      v28 = v47;
      v44 = v46;
      v45 = v47;
      outlined init with take of DUProcessingPhaseSpecification(v48, (uint64_t)v43);
      v29 = (_QWORD *)*a3;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        break;
      v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_25;
      }
      if ((v35 & 1) != 0)
        goto LABEL_10;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = (uint64_t *)(v37[6] + 16 * v30);
      *v38 = v27;
      v38[1] = v28;
      outlined init with take of DUProcessingPhaseSpecification(v43, v37[7] + 40 * v30);
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_24;
      v37[2] = v40;
      v26 += 56;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v49 = v18;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x80000002284DAB80;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static DUProcessingScheduler.constructSpecificationDictionary(specifications:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  _OWORD v16[2];
  uint64_t v17;
  _QWORD v18[5];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of TopLevelSpecificationProtocol(v2, (uint64_t)v18);
      __swift_project_boxed_opaque_existential_1(v18, v18[3]);
      swift_getDynamicType();
      *(_QWORD *)&v15 = (*(uint64_t (**)(void))(v18[4] + 16))();
      *((_QWORD *)&v15 + 1) = v4;
      outlined init with copy of TopLevelSpecificationProtocol((uint64_t)v18, (uint64_t)v16);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      if (*((_QWORD *)&v15 + 1))
      {
        v11 = v15;
        v12 = v16[0];
        v13 = v16[1];
        v14 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v6 = v3[2];
        v5 = v3[3];
        if (v6 >= v5 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
        v3[2] = v6 + 1;
        v7 = &v3[7 * v6];
        v7[10] = v14;
        *((_OWORD *)v7 + 3) = v12;
        *((_OWORD *)v7 + 4) = v13;
        *((_OWORD *)v7 + 2) = v11;
      }
      else
      {
        outlined destroy of (String, DUProcessingPhaseSpecification)?((uint64_t)&v15);
      }
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (v3[2])
      goto LABEL_12;
LABEL_14:
    v8 = MEMORY[0x24BEE4B00];
    goto LABEL_15;
  }
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_14;
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, DUProcessingPhaseSpecification>);
  v8 = static _DictionaryStorage.allocate(capacity:)();
LABEL_15:
  *(_QWORD *)&v15 = v8;
  v9 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v9, 1, &v15);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t result, char a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = (_QWORD *)swift_bridgeObjectRetain();
    v8 = v6[4];
    v7 = v6[5];
    v44 = v6;
    v9 = v6[6];
    v10 = (_QWORD *)*a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
    v13 = v10[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v16 = v11;
    if (v10[3] < v15)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_27:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v12 = v17;
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v45 = *(_QWORD *)(v19[7] + 8 * v12);
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v9);
      swift_bridgeObjectRelease();
      v20 = v19[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v12) = v45;
      v21 = v3 - 1;
      if (v3 == 1)
        return swift_bridgeObjectRelease();
LABEL_16:
      for (i = v44 + 9; ; i += 3)
      {
        v30 = *(i - 2);
        v29 = *(i - 1);
        v31 = *i;
        v32 = (_QWORD *)*a3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
        v35 = v32[2];
        v36 = (v34 & 1) == 0;
        v24 = __OFADD__(v35, v36);
        v37 = v35 + v36;
        if (v24)
          break;
        v38 = v34;
        if (v32[3] < v37)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
          v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
          if ((v38 & 1) != (v39 & 1))
            goto LABEL_27;
        }
        v40 = (_QWORD *)*a3;
        if ((v38 & 1) != 0)
        {
          v27 = 8 * v33;
          v46 = *(_QWORD *)(v40[7] + 8 * v33);
          swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v31);
          swift_bridgeObjectRelease();
          v28 = v40[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v28 + v27) = v46;
        }
        else
        {
          v40[(v33 >> 6) + 8] |= 1 << v33;
          v41 = (uint64_t *)(v40[6] + 16 * v33);
          *v41 = v30;
          v41[1] = v29;
          *(_QWORD *)(v40[7] + 8 * v33) = v31;
          v42 = v40[2];
          v24 = __OFADD__(v42, 1);
          v43 = v42 + 1;
          if (v24)
            goto LABEL_26;
          v40[2] = v43;
        }
        if (!--v21)
          return swift_bridgeObjectRelease();
      }
      goto LABEL_25;
    }
    if ((a2 & 1) != 0)
    {
      v19 = (_QWORD *)*a3;
      if ((v11 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v19 = (_QWORD *)*a3;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v19[6] + 16 * v12);
    *v22 = v8;
    v22[1] = v7;
    *(_QWORD *)(v19[7] + 8 * v12) = v9;
    v23 = v19[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v19[2] = v25;
    v21 = v3 - 1;
    if (v3 == 1)
      return swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  return result;
}

uint64_t specialized static DUProcessingScheduler.constructImplementationDictionary(implementations:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t DynamicType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[5];
  _QWORD v16[5];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1 + 32;
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of TopLevelSpecificationProtocol(v2, (uint64_t)v16);
      __swift_project_boxed_opaque_existential_1(v16, v16[3]);
      swift_getDynamicType();
      (*(void (**)(_QWORD *__return_ptr))(v16[4] + 24))(v15);
      __swift_project_boxed_opaque_existential_1(v15, v15[3]);
      DynamicType = swift_getDynamicType();
      v5 = v15[4];
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(DynamicType, v5);
      v8 = v7;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DUProcessingPhaseImplementation>);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_2284C1EE0;
      outlined init with copy of TopLevelSpecificationProtocol((uint64_t)v16, v9 + 32);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
      v3[2] = v11 + 1;
      v12 = &v3[3 * v11];
      v12[4] = v6;
      v12[5] = v8;
      v12[6] = v9;
      v2 += 40;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
    if (v3[2])
      goto LABEL_9;
LABEL_11:
    v13 = MEMORY[0x24BEE4B00];
    goto LABEL_12;
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    goto LABEL_11;
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [DUProcessingPhaseImplementation]>);
  v13 = static _DictionaryStorage.allocate(capacity:)();
LABEL_12:
  v16[0] = v13;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)v3, 1, v16);
  swift_bridgeObjectRelease();
  return v16[0];
}

uint64_t sub_22839E7C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_22839E7F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 104);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_22839E828@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_22839E858(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 128);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for DUProcessingScheduler()
{
  return objc_opt_self();
}

uint64_t outlined destroy of (String, DUProcessingPhaseSpecification)?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, DUProcessingPhaseSpecification)?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of (String, DUProcessingPhaseSpecification)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, DUProcessingPhaseSpecification));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t DUTrialAssetLoader.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  DUTrialAssetLoader.init()();
  return v0;
}

BOOL static FileType.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void FileType.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int FileType.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FileType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t one-time initialization function for downloadQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v5);
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.background.getter();
  v7[1] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static DUTrialAssetLoader.downloadQueue = result;
  return result;
}

uint64_t DUTrialAssetLoader.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 313);
  if (one-time initialization token for standard != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.standard);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2282CC000, v3, v4, "Initializing trial client for client id:%d", v5, 8u);
    MEMORY[0x22E2B117C](v5, -1, -1);
  }

  return v1;
}

id DUTrialAssetLoader.getAssetFile(namespace:factor:fileType:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  id *v5;
  id *v6;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = v5;
  v12 = v6[2];
  v13 = (void *)MEMORY[0x22E2AF8EC](a3, a4);
  v14 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
  v15 = objc_msgSend(v12, sel_levelForFactor_withNamespaceName_, v13, v14);

  if (!v15)
    goto LABEL_5;
  if ((a5 & 1) == 0)
  {
    v16 = objc_msgSend(v15, sel_fileValue);
    if (!v16)
    {
      __break(1u);
LABEL_5:
      if (one-time initialization token for standard != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.standard);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v28 = v21;
        *(_DWORD *)v20 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v20 + 12) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2282CC000, v18, v19, "Error retrieving level for factor: %s in namespace: %s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v21, -1, -1);
        MEMORY[0x22E2B117C](v20, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      (*((void (**)(uint64_t, unint64_t, uint64_t, unint64_t))*v6 + 18))(a1, a2, a3, a4);
      return 0;
    }
LABEL_10:
    if ((objc_msgSend(v16, sel_hasPath) & 1) == 0)
    {
      if (one-time initialization token for standard != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.standard);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v27 = swift_slowAlloc();
        v28 = v27;
        *(_DWORD *)v26 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2282CC000, v24, v25, "Trial asset has no path, attempting download for factor: %s in namespace: %s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v27, -1, -1);
        MEMORY[0x22E2B117C](v26, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      (*((void (**)(uint64_t, unint64_t, uint64_t, unint64_t))*v6 + 18))(a1, a2, a3, a4);
    }

    return v16;
  }
  result = objc_msgSend(v15, sel_directoryValue);
  v16 = result;
  if (result)
    goto LABEL_10;
  __break(1u);
  return result;
}

Swift::Bool_optional __swiftcall DUTrialAssetLoader.getAssetBoolean(namespace:factor:)(Swift::String a1, Swift::String factor)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  Swift::Bool_optional v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  object = factor._object;
  countAndFlagsBits = factor._countAndFlagsBits;
  v6 = a1._object;
  v7 = a1._countAndFlagsBits;
  v8 = *(id *)(v2 + 16);
  v9 = (void *)MEMORY[0x22E2AF8EC](countAndFlagsBits, object);
  v10 = (void *)MEMORY[0x22E2AF8EC](v7, v6);
  v11 = objc_msgSend(v8, sel_levelForFactor_withNamespaceName_, v9, v10);

  if (v11)
  {
    v12.value = objc_msgSend(v11, sel_BOOLeanValue);

  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc();
      v18 = swift_slowAlloc();
      v19 = v18;
      *(_DWORD *)v16 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, (unint64_t)v6, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v14, v15, "Error retrieving level for factor: %s in namespace: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v18, -1, -1);
      MEMORY[0x22E2B117C](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, void *, uint64_t, void *))(*(_QWORD *)v3 + 144))(v7, v6, countAndFlagsBits, object);
    return (Swift::Bool_optional)2;
  }
  return v12;
}

Swift::Void __swiftcall DUTrialAssetLoader.checkDownload(namespace:factor:)(Swift::String a1, Swift::String factor)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSArray v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t aBlock;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD *v23;

  object = factor._object;
  countAndFlagsBits = factor._countAndFlagsBits;
  v5 = a1._object;
  v6 = a1._countAndFlagsBits;
  v7 = *(void **)(v2 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2284C1EE0;
  *(_QWORD *)(v8 + 32) = countAndFlagsBits;
  *(_QWORD *)(v8 + 40) = object;
  v9 = v7;
  swift_bridgeObjectRetain();
  v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = (void *)MEMORY[0x22E2AF8EC](v6, v5);
  if (one-time initialization token for downloadQueue != -1)
    swift_once();
  v17 = static DUTrialAssetLoader.downloadQueue;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = countAndFlagsBits;
  v12[3] = object;
  v12[4] = v6;
  v12[5] = v5;
  v22 = partial apply for closure #1 in DUTrialAssetLoader.checkDownload(namespace:factor:);
  v23 = v12;
  v13 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v19 = 1107296256;
  v20 = thunk for @escaping @callee_guaranteed (@unowned UInt) -> ();
  v21 = &block_descriptor_7;
  v14 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = countAndFlagsBits;
  v15[3] = object;
  v15[4] = v6;
  v15[5] = v5;
  v22 = partial apply for closure #2 in DUTrialAssetLoader.checkDownload(namespace:factor:);
  v23 = v15;
  aBlock = v13;
  v19 = 1107296256;
  v20 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v21 = &block_descriptor_6_0;
  v16 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(v9, sel_downloadLevelsForFactors_withNamespace_queue_options_progress_completion_, v10.super.isa, v11, v17, 0, v14, v16);
  _Block_release(v16);
  _Block_release(v14);

}

void closure #1 in DUTrialAssetLoader.checkDownload(namespace:factor:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (one-time initialization token for standard != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.standard);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v14 = v13;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2282CC000, v10, v11, "Trial download for factor: %s in namespace %s is %lu%% complete", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v13, -1, -1);
    MEMORY[0x22E2B117C](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UInt) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void closure #2 in DUTrialAssetLoader.checkDownload(namespace:factor:)(int a1, id a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *oslog;
  uint64_t v26;

  if (a2)
  {
    v11 = a2;
    if (one-time initialization token for standard != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13 = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = a2;
    oslog = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v26 = v17;
      *(_DWORD *)v16 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 22) = 2080;
      swift_getErrorValue();
      v18 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2282CC000, oslog, v15, "Error downloading levels for factor: %s in namespace: %s. Error: %s ", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v17, -1, -1);
      MEMORY[0x22E2B117C](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

    }
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.standard);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v24 = swift_slowAlloc();
      v26 = v24;
      *(_DWORD *)v23 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v21, v22, "Successfully downloaded levels for factor: %s in namespace: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v24, -1, -1);
      MEMORY[0x22E2B117C](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

MLModel_optional __swiftcall DUTrialAssetLoader.mlModelForAsset(namespace:factor:useEspressoV2:)(Swift::String a1, Swift::String factor, Swift::Bool useEspressoV2)
{
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void *, uint64_t, void *, uint64_t);
  void *v20;
  void *v21;
  objc_class *v22;
  Swift::Bool v23;
  objc_class *v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  objc_class *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  MLModel_optional result;

  LODWORD(v37) = useEspressoV2;
  object = factor._object;
  countAndFlagsBits = factor._countAndFlagsBits;
  v6 = a1._object;
  v7 = a1._countAndFlagsBits;
  v36 = type metadata accessor for URL.DirectoryHint();
  v8 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL();
  v38 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v39 = countAndFlagsBits;
  v40 = (char *)&v35 - v18;
  v19 = *(uint64_t (**)(uint64_t, void *, uint64_t, void *, uint64_t))(*(_QWORD *)v3 + 128);
  v41 = (unint64_t)object;
  v20 = (void *)v19(v7, v6, countAndFlagsBits, object, 1);
  if (!v20)
    goto LABEL_6;
  v21 = v20;
  if (!objc_msgSend(v20, sel_hasPath))
  {

LABEL_6:
    if (one-time initialization token for standard != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.standard);
    v29 = v41;
    swift_bridgeObjectRetain_n();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v43 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v29, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v30, v31, "Unable to find a path to model asset factor: %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v33, -1, -1);
      MEMORY[0x22E2B117C](v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v34 = 0;
    goto LABEL_12;
  }
  v22 = (objc_class *)objc_msgSend(v21, sel_path);
  if (!v22)
  {
    __break(1u);
    goto LABEL_14;
  }
  v24 = v22;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v25 = v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDCD7A0], v36);
  v26 = v40;
  URL.init(filePath:directoryHint:relativeTo:)();
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFD8]), sel_init);
  objc_msgSend(v27, sel_setExperimentalMLE5EngineUsage_, (v37 & 1) == 0);
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MLModel);
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v17, v26, v14);
  v34 = (objc_class *)specialized @nonobjc MLModel.__allocating_init(contentsOf:configuration:)((uint64_t)v17, (uint64_t)v27);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v14);
LABEL_12:
  v22 = v34;
LABEL_14:
  result.value.super.isa = v22;
  result.is_nil = v23;
  return result;
}

uint64_t DUTrialAssetLoader.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUTrialAssetLoader.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void partial apply for closure #1 in DUTrialAssetLoader.checkDownload(namespace:factor:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in DUTrialAssetLoader.checkDownload(namespace:factor:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t objectdestroyTm_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in DUTrialAssetLoader.checkDownload(namespace:factor:)(int a1, void *a2)
{
  uint64_t v2;

  closure #2 in DUTrialAssetLoader.checkDownload(namespace:factor:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

id specialized @nonobjc MLModel.__allocating_init(contentsOf:configuration:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14;
  NSURL *v15;

  v15 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v15);
  v5 = v4;
  v14 = 0;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelWithContentsOfURL_configuration_error_, v4, a2, &v14);

  v7 = v14;
  if (v6)
  {
    v8 = type metadata accessor for URL();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

unint64_t lazy protocol witness table accessor for type FileType and conformance FileType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FileType and conformance FileType;
  if (!lazy protocol witness table cache variable for type FileType and conformance FileType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for FileType, &type metadata for FileType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileType and conformance FileType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FileType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FileType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2283A072C + 4 * byte_2284C5B75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2283A0760 + 4 * byte_2284C5B70[v4]))();
}

uint64_t sub_2283A0760(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283A0768(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283A0770);
  return result;
}

uint64_t sub_2283A077C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283A0784);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2283A0788(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283A0790(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for FileType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FileType()
{
  return &type metadata for FileType;
}

uint64_t type metadata accessor for DUTrialAssetLoader()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

void DUPersonalizeRepliesRuleBasedAnalyzer.init(configName:languageCode:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  BOOL v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;

  v8 = a3 == 28261 && a4 == 0xE200000000000000;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    goto LABEL_13;
  swift_bridgeObjectRetain();
  v9 = (void *)MEMORY[0x22E2AF8EC](0xD00000000000001FLL, 0x80000002284DECE0);
  v10 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v9);

  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v11 = (void *)MEMORY[0x22E2AF8EC](a1, a2);
  swift_bridgeObjectRelease();
  v12 = (void *)MEMORY[0x22E2AF8EC](0x7473696C70, 0xE500000000000000);
  v13 = objc_msgSend(v10, sel_pathForResource_ofType_, v11, v12);

  if (!v13)
  {

LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
  v18 = (void *)MEMORY[0x22E2AF8EC](v14, v16);
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_initWithContentsOfFile_, v18);

  if (v19)
  {
    v21 = 0;
    v20 = v19;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

LABEL_16:
  swift_bridgeObjectRelease();
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  a5[4] = 0;
  a5[5] = 0;
  a5[6] = 0;
  a5[7] = 0;
  a5[8] = 0;
  a5[9] = 0;
  a5[10] = 0;
}

uint64_t DUPersonalizeRepliesRuleBasedAnalyzer.loadEquivalenceTables(termOfAddress:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[2];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[9];
  _OWORD v106[4];
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;

  v3 = v2;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = *(_QWORD *)(v2 + 48);
  if (!*(_QWORD *)(v9 + 16))
    return 0;
  v94 = (char *)v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000002284DEF30);
  if ((v11 & 1) == 0)
    return 0;
  *(_QWORD *)&v108 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Swift.AnyObject]]);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  result = *(_QWORD *)&v106[0];
  v87 = *(_QWORD *)(*(_QWORD *)&v106[0] + 16);
  if (!v87)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v89 = v7;
  v90 = v6;
  v83 = v3;
  v84 = a1;
  v13 = 0;
  v14 = *(_QWORD *)&v106[0] + 32;
  v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v86 = 0x80000002284DEF50;
  v80[1] = MEMORY[0x24BEE4AD0] + 8;
  v81 = *(_QWORD *)&v106[0] + 32;
  v91 = *(_QWORD *)&v106[0];
  v82 = a2;
  while (1)
  {
    if (v13 >= *(_QWORD *)(result + 16))
      goto LABEL_73;
    v16 = *(_QWORD *)(v14 + 8 * v13);
    if (!*(_QWORD *)(v16 + 16))
      goto LABEL_62;
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x626154796C706572, 0xEA0000000000656CLL);
    if ((v18 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_62:
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    v93 = v16;
    v101 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
    swift_unknownObjectRetain();
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    v19 = v103;
    v20 = v104;
    v88 = v13;
    if (a2)
    {
      swift_bridgeObjectRetain();
      v21 = MEMORY[0x24BEE4B00];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v103 = v21;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v84, a2, 0x5F464F5F4D524554, 0xEF53534552444441, isUniquelyReferenced_nonNull_native);
      v92 = v103;
      swift_bridgeObjectRelease();
    }
    else
    {
      v92 = MEMORY[0x24BEE4B00];
    }
    v103 = v19;
    v104 = v20;
    v23 = v94;
    static CharacterSet.whitespacesAndNewlines.getter();
    v24 = lazy protocol witness table accessor for type String and conformance String();
    v25 = StringProtocol.trimmingCharacters(in:)();
    v27 = v26;
    v28 = v90;
    v29 = *(void (**)(char *, uint64_t))(v89 + 8);
    v29(v23, v90);
    swift_bridgeObjectRelease();
    v103 = v25;
    v104 = v27;
    static CharacterSet.newlines.getter();
    v98 = v24;
    v30 = StringProtocol.components(separatedBy:)();
    v29(v23, v28);
    result = swift_bridgeObjectRelease();
    v97 = *(_QWORD *)(v30 + 16);
    if (v97)
      break;
    swift_bridgeObjectRelease();
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_30:
    v46 = v93;
    if (!*(_QWORD *)(v93 + 16))
      goto LABEL_65;
    v47 = v93;
    v48 = specialized __RawDictionaryStorage.find<A>(_:)(0x62616B636F4C7369, 0xEA0000000000656CLL);
    if ((v49 & 1) == 0)
      goto LABEL_65;
    v103 = *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v48);
    swift_unknownObjectRetain();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_65;
    if (!*(_QWORD *)(v46 + 16))
      goto LABEL_65;
    v50 = v101;
    v51 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, v86);
    if ((v52 & 1) == 0)
      goto LABEL_65;
    v103 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v51);
    swift_unknownObjectRetain();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_65;
    if (!*(_QWORD *)(v47 + 16))
      goto LABEL_65;
    v53 = v101;
    v54 = specialized __RawDictionaryStorage.find<A>(_:)(0x43746C7561666564, 0xED00006E6D756C6FLL);
    if ((v55 & 1) == 0)
      goto LABEL_65;
    v103 = *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v54);
    swift_unknownObjectRetain();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_65;
    v56 = v47;
    if (!*(_QWORD *)(v47 + 16))
      goto LABEL_65;
    v57 = v101;
    v58 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6F697473657571, 0xEC00000073776F52);
    if ((v59 & 1) == 0)
      goto LABEL_65;
    v103 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v58);
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_65;
    v60 = v101;
    if (!*(_QWORD *)(v56 + 16)
      || (v61 = specialized __RawDictionaryStorage.find<A>(_:)(0x74616D616C637865, 0xEF73776F526E6F69),
          v62 = v93,
          (v63 & 1) == 0))
    {
LABEL_70:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_67:
      swift_bridgeObjectRelease();
      return 0;
    }
    v103 = *(_QWORD *)(*(_QWORD *)(v93 + 56) + 8 * v61);
    swift_unknownObjectRetain();
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_65:
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    v64 = v101;
    if (!*(_QWORD *)(v62 + 16)
      || (v65 = specialized __RawDictionaryStorage.find<A>(_:)(0x436D796E6F726361, 0xEE00736E6D756C6FLL),
          (v66 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_65;
    }
    v100 = (_QWORD *)v60;
    v67 = v50;
    v68 = *(_QWORD *)(*(_QWORD *)(v93 + 56) + 8 * v65);
    swift_unknownObjectRetain();
    swift_bridgeObjectRelease();
    v103 = v68;
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_70;
    v69 = v15;
    v70 = v101;
    v71 = *(_QWORD *)(v83 + 56);
    v72 = *(_QWORD *)(v83 + 64);
    swift_bridgeObjectRetain();
    specialized DUReplyEquivalenceTable.init(languageCode:isLockable:isLockedByDefault:questionRows:exclamationRows:acronymColumns:replyTable:defaultColumn:stringReplacements:)(v71, v72, v67, v53, (uint64_t)v100, v64, v70, (uint64_t)v32, v105, v57, v92);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v105, (uint64_t)v106, &demangling cache variable for type metadata for DUReplyEquivalenceTable?);
    if (!*((_QWORD *)&v106[0] + 1))
      goto LABEL_62;
    v110 = v106[2];
    v111 = v106[3];
    v112 = v107;
    v108 = v106[0];
    v109 = v106[1];
    v15 = v69;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v69[2] + 1, 1, v69);
    v14 = v81;
    a2 = v82;
    v73 = v88;
    v75 = v15[2];
    v74 = v15[3];
    if (v75 >= v74 >> 1)
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v74 > 1), v75 + 1, 1, v15);
    v13 = v73 + 1;
    v15[2] = v75 + 1;
    v76 = &v15[9 * v75];
    *((_OWORD *)v76 + 2) = v108;
    v77 = v109;
    v78 = v110;
    v79 = v111;
    v76[12] = v112;
    *((_OWORD *)v76 + 4) = v78;
    *((_OWORD *)v76 + 5) = v79;
    *((_OWORD *)v76 + 3) = v77;
    result = v91;
    if (v13 == v87)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v15;
    }
  }
  v85 = v15;
  v31 = 0;
  v96 = v30 + 32;
  v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v95 = v30;
  while (v31 < *(_QWORD *)(v30 + 16))
  {
    v33 = *(_QWORD *)(v96 + 16 * v31 + 8);
    v103 = *(_QWORD *)(v96 + 16 * v31);
    v104 = v33;
    v100 = v32;
    v101 = 59;
    v102 = 0xE100000000000000;
    v34 = StringProtocol.components<A>(separatedBy:)();
    v35 = *(_QWORD *)(v34 + 16);
    v99 = v34;
    if (v35)
    {
      v36 = v34;
      v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v38 = (uint64_t *)(v36 + 40);
      do
      {
        v39 = *(v38 - 1);
        v40 = *v38;
        v42 = v37[2];
        v41 = v37[3];
        swift_bridgeObjectRetain();
        if (v42 >= v41 >> 1)
          v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v37);
        v38 += 2;
        v37[2] = v42 + 1;
        v43 = &v37[2 * v42];
        v43[4] = v39;
        v43[5] = v40;
        --v35;
      }
      while (v35);
    }
    else
    {
      v37 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v32 = v100;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
      v32 = (_QWORD *)result;
    }
    v30 = v95;
    v45 = v32[2];
    v44 = v32[3];
    if (v45 >= v44 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v32);
      v32 = (_QWORD *)result;
    }
    ++v31;
    v32[2] = v45 + 1;
    v32[v45 + 4] = v37;
    if (v31 == v97)
    {
      swift_bridgeObjectRelease();
      v15 = v85;
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

_QWORD *DUPersonalizeRepliesRuleBasedAnalyzer.generateAndAnalyzeEquivalenceTables(outgoingMessages:termOfAddress:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20[11];
  _OWORD v21[5];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[4];
  uint64_t v30;

  v4 = DUPersonalizeRepliesRuleBasedAnalyzer.loadEquivalenceTables(termOfAddress:)(a2, a3);
  v5 = v4;
  if (!v4)
    return 0;
  v6 = *(_QWORD *)(v4 + 16);
  if (!v6)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  for (i = 32; ; i += 72)
  {
    v29[0] = *(_OWORD *)(v5 + i);
    v9 = *(_OWORD *)(v5 + i + 16);
    v10 = *(_OWORD *)(v5 + i + 32);
    v11 = *(_OWORD *)(v5 + i + 48);
    v30 = *(_QWORD *)(v5 + i + 64);
    v29[2] = v10;
    v29[3] = v11;
    v29[1] = v9;
    outlined retain of DUReplyEquivalenceTable((uint64_t)v29);
    DUReplyEquivalenceTable.analyze(outgoingMessages:)(a1, v20);
    outlined release of DUReplyEquivalenceTable((uint64_t)v29);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, (uint64_t)v21, &demangling cache variable for type metadata for TableAnalysisResult?);
    if (*(_QWORD *)&v21[0] == 1)
      break;
    v25 = v21[2];
    v26 = v21[3];
    v27 = v21[4];
    v28 = v22;
    v23 = v21[0];
    v24 = v21[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v13 = v7[2];
    v12 = v7[3];
    if (v13 >= v12 >> 1)
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
    v7[2] = v13 + 1;
    v14 = &v7[11 * v13];
    v15 = v24;
    *((_OWORD *)v14 + 2) = v23;
    *((_OWORD *)v14 + 3) = v15;
    v16 = v25;
    v17 = v26;
    v18 = v27;
    v14[14] = v28;
    *((_OWORD *)v14 + 5) = v17;
    *((_OWORD *)v14 + 6) = v18;
    *((_OWORD *)v14 + 4) = v16;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t DUPersonalizeRepliesRuleBasedAnalyzer.getReplyWeightsAndBooleanProperties(tableAnalysisResults:tables:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  float v44;
  BOOL v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char isUniquelyReferenced_nonNull_native;
  char v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64x2_t v93;
  int64x2_t *v94;
  unint64_t v95;
  int64x2_t v96;
  int8x16_t v97;
  uint64_t v98;
  unint64_t v99;
  int64_t *v100;
  int64_t v101;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t result;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  BOOL v129;
  BOOL v130;
  _QWORD v131[2];
  BOOL v132;
  _OWORD v133[5];
  uint64_t v134;

  v111 = *(_QWORD *)(a1 + 16);
  if (v111)
  {
    v2 = 0;
    v3 = a1 + 32;
    v4 = a2 + 32;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = (_QWORD *)MEMORY[0x24BEE4B00];
    v109 = a2 + 32;
    v110 = a1 + 32;
    v108 = v5;
    while (1)
    {
      v7 = v3 + 88 * v2;
      v8 = *(_OWORD *)(v7 + 48);
      v133[2] = *(_OWORD *)(v7 + 32);
      v133[3] = v8;
      v133[4] = *(_OWORD *)(v7 + 64);
      v134 = *(_QWORD *)(v7 + 80);
      v9 = *(_OWORD *)(v7 + 16);
      v133[0] = *(_OWORD *)v7;
      v133[1] = v9;
      if (v2 == v5)
      {
LABEL_127:
        __break(1u);
LABEL_128:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v127 = v6;
      v112 = v2;
      v10 = v4 + 72 * v2;
      v11 = *(unsigned __int8 *)(v10 + 17);
      v12 = *(_QWORD **)(v10 + 24);
      v13 = *(_QWORD **)(v10 + 32);
      v14 = *(_QWORD **)(v10 + 40);
      v15 = *(_QWORD *)(v10 + 48);
      v16 = *(_QWORD *)(v10 + 56);
      outlined retain of TableAnalysisResult((uint64_t)v133);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = (unsigned __int128)TableAnalysisResult.columnTotals()();
      v18 = v17;
      v19 = *((_QWORD *)&v17 + 1);
      outlined release of TableAnalysisResult((uint64_t)v133);
      if (!v18)
      {
LABEL_115:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      v125 = v11;
      v120 = v14;
      v121 = v13;
      v122 = v12;
      v20 = *(_QWORD *)(v18 + 16);
      v115 = v15;
      if (!v20)
      {
        v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
        goto LABEL_10;
      }
      v21 = *(_QWORD *)(v18 + 32);
      v22 = v20 - 1;
      if (v20 != 1)
      {
        if (v20 < 5)
        {
          v23 = 1;
LABEL_97:
          v99 = v20 - v23;
          v100 = (int64_t *)(v18 + 8 * v23 + 32);
          do
          {
            v102 = *v100++;
            v101 = v102;
            if (v21 <= v102)
              v21 = v101;
            --v99;
          }
          while (v99);
          goto LABEL_101;
        }
        v23 = v22 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v93 = vdupq_n_s64(v21);
        v94 = (int64x2_t *)(v18 + 56);
        v95 = v22 & 0xFFFFFFFFFFFFFFFCLL;
        v96 = v93;
        do
        {
          v93 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v93, v94[-1]), (int8x16_t)v93, (int8x16_t)v94[-1]);
          v96 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v96, *v94), (int8x16_t)v96, *(int8x16_t *)v94);
          v94 += 2;
          v95 -= 4;
        }
        while (v95);
        v97 = vbslq_s8((int8x16_t)vcgtq_s64(v93, v96), (int8x16_t)v93, (int8x16_t)v96);
        v98 = vextq_s8(v97, v97, 8uLL).u64[0];
        v21 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v97.i64[0], v98), *(int8x8_t *)v97.i8, (int8x8_t)v98);
        if (v22 != (v22 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_97;
      }
LABEL_101:
      v103 = 0;
      v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        if (*(_QWORD *)(v18 + 32 + 8 * v103) == v21)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
          v105 = v24[2];
          v104 = v24[3];
          if (v105 >= v104 >> 1)
            v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v104 > 1), v105 + 1, 1, v24);
          v24[2] = v105 + 1;
          v24[v105 + 4] = v103;
        }
        ++v103;
      }
      while (v20 != v103);
LABEL_10:
      v25 = v24[2];
      v27 = v121;
      v26 = v122;
      v28 = v14;
      v29 = v115;
      if (v25)
      {
        v30 = 0;
        v31 = *(_QWORD *)(v113 + 80);
        if (*(_QWORD *)(v115 + 16) < v31)
          v31 = *(_QWORD *)(v115 + 16);
        while (1)
        {
          v32 = v24[v30 + 4];
          if (v32 >= *(_QWORD *)(v19 + 16))
            break;
          if (*(_QWORD *)(v19 + 32 + 8 * v32) >= v31)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v33 = v32;
            goto LABEL_18;
          }
          if (v25 == ++v30)
            goto LABEL_16;
        }
LABEL_125:
        __break(1u);
        goto LABEL_126;
      }
LABEL_16:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = -1;
      v32 = v16;
LABEL_18:
      if (!v125)
        v33 = v32;
      v116 = v33;
      v34 = *(_QWORD *)(v115 + 16);
      v6 = v127;
      if (v34)
      {
        v35 = 0;
        v36 = v115 + 32;
        v114 = *(_QWORD *)(v115 + 16);
        while (v35 < *(_QWORD *)(v29 + 16))
        {
          v37 = *(_QWORD *)(v36 + 8 * v35);
          v124 = *(_QWORD *)(v37 + 16);
          if (v124)
          {
            v38 = v28[2];
            v39 = v26[2];
            v40 = v27[2];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
            v123 = v37 + 32;
            swift_bridgeObjectRetain();
            v41 = 0;
            v117 = v39;
            v118 = v37;
            v119 = v38;
            while (v41 < *(_QWORD *)(v37 + 16))
            {
              v43 = (uint64_t *)(v123 + 16 * v41);
              v126 = *v43;
              v128 = v43[1];
              if (v41 == v116)
                v44 = 1.0;
              else
                v44 = 0.0;
              if (v38)
              {
                v45 = v28[4] == v41;
                v46 = v28[4] == v41 || v38 == 1;
                if (!v46)
                {
                  v45 = v28[5] == v41;
                  if (v28[5] != v41 && v38 != 2)
                  {
                    v47 = 6;
                    while (1)
                    {
                      v48 = v47 - 3;
                      if (__OFADD__(v47 - 4, 1))
                        break;
                      v46 = v28[v47] == v41;
                      v45 = v46;
                      ++v47;
                      if (v46 || v48 == v38)
                        goto LABEL_49;
                    }
                    __break(1u);
LABEL_113:
                    __break(1u);
LABEL_114:
                    __break(1u);
                    goto LABEL_115;
                  }
                }
              }
              else
              {
                v45 = 0;
              }
LABEL_49:
              v129 = v45;
              if (v39)
              {
                v50 = v26[4] == v35;
                if (v26[4] != v35 && v39 != 1)
                {
                  v50 = v26[5] == v35;
                  if (v26[5] != v35 && v39 != 2)
                  {
                    v51 = 6;
                    do
                    {
                      v52 = v51 - 3;
                      if (__OFADD__(v51 - 4, 1))
                        goto LABEL_113;
                      v46 = v26[v51] == v35;
                      v50 = v46;
                      ++v51;
                    }
                    while (!v46 && v52 != v39);
                  }
                }
              }
              else
              {
                v50 = 0;
              }
              v130 = v50;
              strcpy((char *)v131, "isExclamation");
              HIWORD(v131[1]) = -4864;
              if (v40)
              {
                v54 = v27[4] == v35;
                if (v27[4] != v35 && v40 != 1)
                {
                  v54 = v27[5] == v35;
                  if (v27[5] != v35 && v40 != 2)
                  {
                    v55 = 6;
                    do
                    {
                      v56 = v55 - 3;
                      if (__OFADD__(v55 - 4, 1))
                        goto LABEL_114;
                      v46 = v27[v55] == v35;
                      v54 = v46;
                      ++v55;
                    }
                    while (!v46 && v56 != v40);
                  }
                }
              }
              else
              {
                v54 = 0;
              }
              v58 = v40;
              v132 = v54;
              v59 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
              swift_bridgeObjectRetain();
              swift_retain();
              swift_bridgeObjectRetain();
              v60 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6F726341736168, 0xEA00000000006D79);
              if ((v61 & 1) != 0)
                goto LABEL_117;
              v62 = v59 + 8;
              *(_QWORD *)((char *)v59 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v60;
              v63 = (_QWORD *)(v59[6] + 16 * v60);
              *v63 = 0x6E6F726341736168;
              v63[1] = 0xEA00000000006D79;
              *(_BYTE *)(v59[7] + v60) = v129;
              v64 = v59[2];
              v65 = __OFADD__(v64, 1);
              v66 = v64 + 1;
              if (v65)
                goto LABEL_118;
              v59[2] = v66;
              swift_bridgeObjectRetain();
              v67 = specialized __RawDictionaryStorage.find<A>(_:)(0x6974736575517369, 0xEA00000000006E6FLL);
              if ((v68 & 1) != 0)
                goto LABEL_119;
              *(_QWORD *)((char *)v62 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v67;
              v69 = (_QWORD *)(v59[6] + 16 * v67);
              *v69 = 0x6974736575517369;
              v69[1] = 0xEA00000000006E6FLL;
              *(_BYTE *)(v59[7] + v67) = v130;
              v70 = v59[2];
              v65 = __OFADD__(v70, 1);
              v71 = v70 + 1;
              if (v65)
                goto LABEL_120;
              v59[2] = v71;
              v72 = v131[0];
              v73 = v131[1];
              v74 = v132;
              swift_bridgeObjectRetain();
              v75 = specialized __RawDictionaryStorage.find<A>(_:)(v72, v73);
              if ((v76 & 1) != 0)
                goto LABEL_121;
              *(_QWORD *)((char *)v62 + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v75;
              v77 = (uint64_t *)(v59[6] + 16 * v75);
              *v77 = v72;
              v77[1] = v73;
              *(_BYTE *)(v59[7] + v75) = v74;
              v78 = v59[2];
              v65 = __OFADD__(v78, 1);
              v79 = v78 + 1;
              if (v65)
                goto LABEL_122;
              v59[2] = v79;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Bool));
              swift_arrayDestroy();
              swift_release();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v82 = specialized __RawDictionaryStorage.find<A>(_:)(v126, v128);
              v83 = v6[2];
              v84 = (v81 & 1) == 0;
              v85 = v83 + v84;
              if (__OFADD__(v83, v84))
                goto LABEL_123;
              v86 = v81;
              if (v6[3] >= v85)
              {
                v40 = v58;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  specialized _NativeDictionary.copy()();
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v85, isUniquelyReferenced_nonNull_native);
                v87 = specialized __RawDictionaryStorage.find<A>(_:)(v126, v128);
                if ((v86 & 1) != (v88 & 1))
                  goto LABEL_128;
                v82 = v87;
                v40 = v58;
              }
              v27 = v121;
              v26 = v122;
              v38 = v119;
              if ((v86 & 1) != 0)
              {
                v42 = v6[7] + 16 * v82;
                swift_bridgeObjectRelease();
                *(float *)v42 = v44;
                *(_QWORD *)(v42 + 8) = v59;
              }
              else
              {
                v6[(v82 >> 6) + 8] |= 1 << v82;
                v89 = (uint64_t *)(v6[6] + 16 * v82);
                *v89 = v126;
                v89[1] = v128;
                v90 = v6[7] + 16 * v82;
                *(float *)v90 = v44;
                *(_QWORD *)(v90 + 8) = v59;
                v91 = v6[2];
                v65 = __OFADD__(v91, 1);
                v92 = v91 + 1;
                if (v65)
                  goto LABEL_124;
                v6[2] = v92;
                swift_bridgeObjectRetain();
              }
              ++v41;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v28 = v120;
              v39 = v117;
              v37 = v118;
              if (v41 == v124)
              {
                swift_bridgeObjectRelease();
                v34 = v114;
                v29 = v115;
                v36 = v115 + 32;
                goto LABEL_23;
              }
            }
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
            goto LABEL_125;
          }
LABEL_23:
          if (++v35 == v34)
            goto LABEL_92;
        }
LABEL_126:
        __break(1u);
        goto LABEL_127;
      }
LABEL_92:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v112 + 1;
      v3 = v110;
      v5 = v108;
      v4 = v109;
      if (v112 + 1 == v111)
        goto LABEL_110;
    }
  }
  v6 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_110:
  v106 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v6);
  swift_bridgeObjectRelease();
  return v106;
}

Swift::OpaquePointer_optional __swiftcall DUPersonalizeRepliesRuleBasedAnalyzer.analyze(conversations:)(Swift::OpaquePointer conversations)
{
  uint64_t v1;
  void *rawValue;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::Bool v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  _QWORD *v29;
  Swift::OpaquePointer_optional result;

  v1 = *((_QWORD *)conversations._rawValue + 2);
  if (v1)
  {
    rawValue = conversations._rawValue;
    v28 = (char *)conversations._rawValue + 32;
    v3 = swift_bridgeObjectRetain();
    v4 = 0;
    v5 = v1 - 1;
    v6 = (uint64_t *)(v3 + 40);
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v26 = v1;
    v27 = (void *)v3;
    while (1)
    {
      v8 = *v6;
      v9 = v1 >= v4 ? v4 : v1;
      v10 = v4 ? v9 : 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      v11 = (_QWORD *)specialized Sequence.suffix(_:)(v5, (uint64_t)rawValue);
      v13 = v11[2];
      v14 = __OFADD__(v13, v10);
      v15 = v13 + v10;
      if (v14)
        break;
      v16 = (uint64_t)v11;
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 & ~(v15 >> 63), 0, MEMORY[0x24BEE4AF8]);
      v17 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v17, (uint64_t)v28, 0, (2 * v10) | 1);
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v16);
      swift_bridgeObjectRelease();
      v18 = specialized DUPersonalizeRepliesRuleBasedAnalyzer.analyzeConversation(conversation:allOtherConversations:)(v8, (uint64_t)v29);
      v20 = v19;
      v22 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v18)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v7 = 0;
        goto LABEL_19;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      v24 = v7[2];
      v23 = v7[3];
      if (v24 >= v23 >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v7);
      v7[2] = v24 + 1;
      v25 = &v7[3 * v24];
      v25[4] = v18;
      v25[5] = v20;
      v25[6] = v22;
      --v5;
      v6 += 2;
      ++v4;
      v1 = v26;
      rawValue = v27;
      if (v5 == -1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_19:
    v11 = v7;
  }
  result.value._rawValue = v11;
  result.is_nil = v12;
  return result;
}

uint64_t specialized Sequence.suffix(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  if (result < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v3 = result;
  if (!result)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  if (*(_QWORD *)(a2 + 16) >= result)
    v4 = result;
  else
    v4 = *(_QWORD *)(a2 + 16);
  v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v5 = v24;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  v22 = -v6;
  v20 = v6;
  do
  {
    while (1)
    {
LABEL_8:
      if (v8 >= *(_QWORD *)(a2 + 16))
        goto LABEL_39;
      v9 = (uint64_t *)(a2 + 32 + 16 * v8);
      v11 = *v9;
      v10 = v9[1];
      v12 = v24[2];
      if ((uint64_t)v12 < v3)
        break;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRetain();
      if (v7 >= v12)
        goto LABEL_40;
      v13 = &v24[2 * v7 + 4];
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *v13 = v11;
      v13[1] = v10;
      if ((uint64_t)++v7 >= v3)
      {
        if (v8 + 1 == v20)
        {
LABEL_30:
          swift_bridgeObjectRelease();
          goto LABEL_31;
        }
        v14 = (uint64_t *)(a2 + 56 + 16 * v8);
        v8 += 2;
        while (v8 - 1 < *(_QWORD *)(a2 + 16))
        {
          v11 = *(v14 - 1);
          v10 = *v14;
          v12 = v24[2];
          if ((uint64_t)v12 < v3)
          {
            v7 = 0;
            goto LABEL_22;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          v24[4] = v11;
          v24[5] = v10;
          if (v3 > 1)
          {
            v7 = 1;
            if (v22 + v8)
              goto LABEL_8;
            swift_bridgeObjectRelease();
            v7 = 1;
            goto LABEL_34;
          }
          ++v8;
          v14 += 2;
          if (v22 + v8 == 1)
            goto LABEL_30;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (++v8 == v20)
        goto LABEL_33;
    }
    ++v8;
LABEL_22:
    v15 = v24[3];
    v21 = v12 + 1;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v12 >= v15 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v21, 1);
    v24[2] = v21;
    v16 = &v24[2 * v12];
    v16[4] = v11;
    v16[5] = v10;
  }
  while (v8 != v20);
LABEL_33:
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_31;
LABEL_34:
  v17 = v24[2];
  v23 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  if (v17 >= (uint64_t)v7)
  {
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_43;
    v18 = v24[2];
    if (v18 >= v7 && v18 >= v17)
    {
      v19 = swift_retain();
      specialized ContiguousArray.append<A>(contentsOf:)(v19, (uint64_t)(v24 + 4), v7, (2 * v17) | 1);
      swift_bridgeObjectRelease();
      swift_release();
      specialized ContiguousArray.append<A>(contentsOf:)((uint64_t)v24, (uint64_t)(v24 + 4), 0, (2 * v7) | 1);
      swift_release();
      return v23;
    }
    goto LABEL_44;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

unint64_t protocol witness for DUPersonalizeRepliesAnalyzer.analyze(conversations:) in conformance DUPersonalizeRepliesRuleBasedAnalyzer(Swift::OpaquePointer a1)
{
  return (unint64_t)DUPersonalizeRepliesRuleBasedAnalyzer.analyze(conversations:)(a1);
}

unint64_t specialized DUPersonalizeRepliesRuleBasedAnalyzer.mostFirstLettersAreCapitalized(outgoingMessages:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String_optional v12;
  unint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v15;
  unint64_t result;
  char v17;
  char v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for Unicode.Scalar.Properties();
  v22 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v7 = 0;
    v8 = 0;
    return v8 >= v7;
  }
  v6 = a1 + 32;
  v21 = a1;
  swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)(v6 + 16 * v9 + 8);
    v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v11 = *(_QWORD *)(v6 + 16 * v9) & 0xFFFFFFFFFFFFLL;
    v23 = *(_QWORD *)(v6 + 16 * v9);
    v24 = v10;
    v25 = 0;
    v26 = v11;
    swift_bridgeObjectRetain();
    v12 = String.Iterator.next()();
    if (!v12.value._object)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    countAndFlagsBits = v12.value._countAndFlagsBits;
    object = v12.value._object;
    while ((Character.isLetter.getter() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v15 = String.Iterator.next()();
      countAndFlagsBits = v15.value._countAndFlagsBits;
      object = v15.value._object;
      if (!v15.value._object)
        goto LABEL_3;
    }
    if ((Character._isSingleScalar.getter() & 1) != 0)
    {
      result = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
      if ((result & 0x100000000) != 0)
        goto LABEL_34;
      Unicode.Scalar.properties.getter();
      v17 = Unicode.Scalar.Properties.isUppercase.getter();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v2);
      if ((v17 & 1) != 0)
        break;
    }
    if ((Character._isUppercased.getter() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = __OFADD__(v7++, 1);
      if (v20)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        swift_bridgeObjectRelease();
        return v8 >= v7;
      }
      goto LABEL_4;
    }
    if ((Character._isSingleScalar.getter() & 1) != 0)
    {
      result = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
      if ((result & 0x100000000) != 0)
        goto LABEL_35;
      Unicode.Scalar.properties.getter();
      v18 = Unicode.Scalar.Properties.isCased.getter();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v2);
      if ((v18 & 1) != 0)
        break;
    }
    if ((Character._isUppercased.getter() & 1) == 0)
      break;
    v19 = Character._isLowercased.getter();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      goto LABEL_25;
    v20 = __OFADD__(v7++, 1);
    if (v20)
      goto LABEL_30;
LABEL_4:
    if (++v9 == v5)
      goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
LABEL_25:
  v20 = __OFADD__(v8++, 1);
  if (!v20)
    goto LABEL_4;
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

unint64_t specialized DUPersonalizeRepliesRuleBasedAnalyzer.getAggregateStyleFields(tableAnalysisResults:)(int64_t *a1)
{
  int64_t v2;
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  uint64_t *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  unint64_t v67;
  int64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  unint64_t v78;
  int64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  _BOOL4 v101;
  int64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;

  v2 = a1[2];
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v103 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v103;
    v5 = *(_QWORD *)(v103 + 16);
    v6 = a1 + 11;
    v7 = v2;
    do
    {
      v9 = *v6;
      v6 += 11;
      v8 = v9;
      v104 = result;
      v10 = *(_QWORD *)(result + 24);
      v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v5 + 1, 1);
        result = v104;
      }
      *(_QWORD *)(result + 16) = v11;
      *(_QWORD *)(result + 8 * v5++ + 32) = v8;
      --v7;
    }
    while (v7);
  }
  else
  {
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v11)
    {
      v16 = MEMORY[0x24BEE4AF8];
      result = swift_bridgeObjectRelease();
      v13 = 0;
      goto LABEL_19;
    }
    result = MEMORY[0x24BEE4AF8];
  }
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)(result + 8 * v12 + 32);
    v15 = __OFADD__(v13, v14);
    v13 += v14;
    if (v15)
    {
      __break(1u);
      goto LABEL_114;
    }
    ++v12;
  }
  while (v11 != v12);
  result = swift_bridgeObjectRelease();
  v16 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v105 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v16 = v105;
    v17 = *(_QWORD *)(v105 + 16);
    v18 = a1 + 12;
    v19 = v2;
    do
    {
      v21 = *v18;
      v18 += 11;
      v20 = v21;
      v22 = *(_QWORD *)(v105 + 24);
      if (v17 >= v22 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v17 + 1, 1);
      *(_QWORD *)(v105 + 16) = v17 + 1;
      *(_QWORD *)(v105 + 8 * v17++ + 32) = v20;
      --v19;
    }
    while (v19);
  }
LABEL_19:
  v23 = *(_QWORD *)(v16 + 16);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *(_QWORD *)(v16 + 8 * v24 + 32);
      v15 = __OFADD__(v25, v26);
      v25 += v26;
      if (v15)
        break;
      if (v23 == ++v24)
      {
        swift_bridgeObjectRelease();
        v101 = v13 >= v25;
        if (!v2)
          goto LABEL_30;
        goto LABEL_24;
      }
    }
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  swift_bridgeObjectRelease();
  v101 = v13 >= 0;
  if (v2)
  {
LABEL_24:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v3;
    v27 = *(_QWORD *)(v3 + 16);
    v28 = a1 + 9;
    v29 = v2;
    do
    {
      v31 = *v28;
      v28 += 11;
      v30 = v31;
      v106 = result;
      v32 = *(_QWORD *)(result + 24);
      if (v27 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v27 + 1, 1);
        result = v106;
      }
      *(_QWORD *)(result + 16) = v27 + 1;
      *(_QWORD *)(result + 8 * v27++ + 32) = v30;
      --v29;
    }
    while (v29);
  }
  else
  {
LABEL_30:
    result = MEMORY[0x24BEE4AF8];
  }
  v33 = *(_QWORD *)(result + 16);
  if (v33)
  {
    v34 = 0;
    v35 = 0;
    while (1)
    {
      v36 = *(_QWORD *)(result + 8 * v34 + 32);
      v15 = __OFADD__(v35, v36);
      v35 += v36;
      if (v15)
        break;
      if (v33 == ++v34)
      {
        swift_bridgeObjectRelease();
        if (!v2)
          goto LABEL_42;
        goto LABEL_36;
      }
    }
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v35 = 0;
  if (v2)
  {
LABEL_36:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v3;
    v37 = *(_QWORD *)(v3 + 16);
    v38 = a1 + 10;
    v39 = v2;
    do
    {
      v41 = *v38;
      v38 += 11;
      v40 = v41;
      v107 = result;
      v42 = *(_QWORD *)(result + 24);
      if (v37 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v37 + 1, 1);
        result = v107;
      }
      *(_QWORD *)(result + 16) = v37 + 1;
      *(_QWORD *)(result + 8 * v37++ + 32) = v40;
      --v39;
    }
    while (v39);
  }
  else
  {
LABEL_42:
    result = MEMORY[0x24BEE4AF8];
  }
  v43 = *(_QWORD *)(result + 16);
  if (v43)
  {
    v44 = 0;
    v45 = 0;
    while (1)
    {
      v46 = *(_QWORD *)(result + 8 * v44 + 32);
      v15 = __OFADD__(v45, v46);
      v45 += v46;
      if (v15)
        goto LABEL_116;
      if (v43 == ++v44)
      {
        swift_bridgeObjectRelease();
        v100 = v35 >= v45;
        if (!v2)
          goto LABEL_54;
        goto LABEL_48;
      }
    }
  }
  swift_bridgeObjectRelease();
  v100 = v35 >= 0;
  if (v2)
  {
LABEL_48:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v3;
    v47 = *(_QWORD *)(v3 + 16);
    v48 = a1 + 5;
    v49 = v2;
    do
    {
      v51 = *v48;
      v48 += 11;
      v50 = v51;
      v108 = result;
      v52 = *(_QWORD *)(result + 24);
      if (v47 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v47 + 1, 1);
        result = v108;
      }
      *(_QWORD *)(result + 16) = v47 + 1;
      *(_QWORD *)(result + 8 * v47++ + 32) = v50;
      --v49;
    }
    while (v49);
  }
  else
  {
LABEL_54:
    result = MEMORY[0x24BEE4AF8];
  }
  v53 = *(_QWORD *)(result + 16);
  v102 = v2;
  if (v53)
  {
    v54 = 0;
    v55 = 0;
    while (1)
    {
      v56 = *(_QWORD *)(result + 8 * v54 + 32);
      v15 = __OFADD__(v55, v56);
      v55 += v56;
      if (v15)
        goto LABEL_117;
      if (v53 == ++v54)
      {
        swift_bridgeObjectRelease();
        if (!v2)
          goto LABEL_93;
        goto LABEL_60;
      }
    }
  }
  swift_bridgeObjectRelease();
  v55 = 0;
  if (!v2)
  {
LABEL_93:
    result = MEMORY[0x24BEE4AF8];
    v62 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v62)
      goto LABEL_94;
LABEL_65:
    v63 = 0;
    v64 = 0;
    while (1)
    {
      v65 = *(_QWORD *)(result + 8 * v63 + 32);
      v15 = __OFADD__(v64, v65);
      v64 += v65;
      if (v15)
        goto LABEL_118;
      if (v62 == ++v63)
      {
        swift_bridgeObjectRelease();
        v66 = v55 >= v64;
        if (!v2)
          goto LABEL_95;
        goto LABEL_69;
      }
    }
  }
LABEL_60:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  result = v3;
  v57 = *(_QWORD *)(v3 + 16);
  v58 = a1 + 6;
  do
  {
    v60 = *v58;
    v58 += 11;
    v59 = v60;
    v109 = result;
    v61 = *(_QWORD *)(result + 24);
    if (v57 >= v61 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v57 + 1, 1);
      result = v109;
    }
    *(_QWORD *)(result + 16) = v57 + 1;
    *(_QWORD *)(result + 8 * v57++ + 32) = v59;
    --v2;
  }
  while (v2);
  v2 = v102;
  v62 = *(_QWORD *)(result + 16);
  if (v62)
    goto LABEL_65;
LABEL_94:
  swift_bridgeObjectRelease();
  v66 = v55 >= 0;
  if (!v2)
  {
LABEL_95:
    result = MEMORY[0x24BEE4AF8];
    v73 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v73)
      goto LABEL_96;
LABEL_74:
    v74 = 0;
    v75 = 0;
    while (1)
    {
      v76 = *(_QWORD *)(result + 8 * v74 + 32);
      v15 = __OFADD__(v75, v76);
      v75 += v76;
      if (v15)
        goto LABEL_119;
      if (v73 == ++v74)
      {
        swift_bridgeObjectRelease();
        v77 = v55 >= v75;
        if (!v2)
          goto LABEL_97;
        goto LABEL_78;
      }
    }
  }
LABEL_69:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  result = v3;
  v67 = *(_QWORD *)(v3 + 16);
  v68 = v2;
  v69 = a1 + 8;
  do
  {
    v71 = *v69;
    v69 += 11;
    v70 = v71;
    v110 = result;
    v72 = *(_QWORD *)(result + 24);
    if (v67 >= v72 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v67 + 1, 1);
      result = v110;
    }
    *(_QWORD *)(result + 16) = v67 + 1;
    *(_QWORD *)(result + 8 * v67++ + 32) = v70;
    --v68;
  }
  while (v68);
  v2 = v102;
  v73 = *(_QWORD *)(result + 16);
  if (v73)
    goto LABEL_74;
LABEL_96:
  swift_bridgeObjectRelease();
  v77 = v55 >= 0;
  if (!v2)
  {
LABEL_97:
    result = MEMORY[0x24BEE4AF8];
    v84 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v84)
      goto LABEL_98;
LABEL_83:
    v85 = 0;
    v86 = 0;
    while (1)
    {
      v87 = *(_QWORD *)(result + 8 * v85 + 32);
      v15 = __OFADD__(v86, v87);
      v86 += v87;
      if (v15)
        goto LABEL_120;
      if (v84 == ++v85)
      {
        swift_bridgeObjectRelease();
        if (!v2)
          goto LABEL_99;
        goto LABEL_87;
      }
    }
  }
LABEL_78:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  result = v3;
  v78 = *(_QWORD *)(v3 + 16);
  v79 = v2;
  v80 = a1 + 13;
  do
  {
    v82 = *v80;
    v80 += 11;
    v81 = v82;
    v111 = result;
    v83 = *(_QWORD *)(result + 24);
    if (v78 >= v83 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v78 + 1, 1);
      result = v111;
    }
    *(_QWORD *)(result + 16) = v78 + 1;
    *(_QWORD *)(result + 8 * v78++ + 32) = v81;
    --v79;
  }
  while (v79);
  v2 = v102;
  v84 = *(_QWORD *)(result + 16);
  if (v84)
    goto LABEL_83;
LABEL_98:
  swift_bridgeObjectRelease();
  v86 = 0;
  if (v2)
  {
LABEL_87:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v3;
    v88 = *(_QWORD *)(v3 + 16);
    v89 = a1 + 14;
    do
    {
      v91 = *v89;
      v89 += 11;
      v90 = v91;
      v112 = result;
      v92 = *(_QWORD *)(result + 24);
      if (v88 >= v92 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v88 + 1, 1);
        result = v112;
      }
      *(_QWORD *)(result + 16) = v88 + 1;
      *(_QWORD *)(result + 8 * v88++ + 32) = v90;
      --v2;
    }
    while (v2);
  }
  else
  {
LABEL_99:
    result = MEMORY[0x24BEE4AF8];
  }
  v93 = *(_QWORD *)(result + 16);
  if (v93)
  {
    v94 = 0;
    v95 = (uint64_t *)(result + 32);
    while (1)
    {
      v96 = *v95++;
      v15 = __OFADD__(v94, v96);
      v94 += v96;
      if (v15)
        goto LABEL_121;
      if (!--v93)
        goto LABEL_106;
    }
  }
  v94 = 0;
LABEL_106:
  swift_bridgeObjectRelease();
  v97 = 0x100000000;
  if (!v77)
    v97 = 0;
  v98 = 0x1000000;
  if (!v100)
    v98 = 0;
  v99 = 0x10000;
  if (!v66)
    v99 = 0;
  return v98 | v101 | v99 | v97 | ((unint64_t)(v86 >= v94) << 8);
}

uint64_t specialized DUPersonalizeRepliesRuleBasedAnalyzer.formatReply(reply:BOOLeanReplyProperties:BOOLeanPreferences:stringReplacements:)(uint64_t countAndFlagsBits, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  Swift::String v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unint64_t v62;
  char v63;
  Swift::String v64;
  unint64_t v65;
  char v66;
  char v67;
  unint64_t v68;
  char v69;
  Swift::String v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  Swift::Bool v79;
  uint64_t v80;

  swift_bridgeObjectRetain();
  v79 = String.firstWordIsAcronym()();
  v8 = a5 + 64;
  v9 = 1 << *(_BYTE *)(a5 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v16 >= v12)
      goto LABEL_21;
    v17 = *(_QWORD *)(v8 + 8 * v16);
    ++v13;
    if (v17)
      goto LABEL_20;
    v13 = v16 + 1;
    if (v16 + 1 >= v12)
      goto LABEL_21;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    if (v17)
      goto LABEL_20;
    v13 = v16 + 2;
    if (v16 + 2 >= v12)
      goto LABEL_21;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    if (v17)
      goto LABEL_20;
    v18 = v16 + 3;
    if (v18 >= v12)
    {
LABEL_21:
      swift_release();
      v13 = a4;
      if (*(_QWORD *)(a4 + 16))
      {
        a5 = 0xEA00000000006D79;
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(0x6A6F6D4573657375, 0xEA00000000007369);
        if ((v20 & 1) != 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(a4 + 56) + v19) & 1) == 0)
          {
            countAndFlagsBits = String.removeEmojis()()._countAndFlagsBits;
            swift_bridgeObjectRelease();
          }
          if (*(_QWORD *)(a4 + 16))
          {
            v5 = 0xD000000000000011;
            v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x80000002284DEEF0);
            if ((v22 & 1) != 0)
            {
              if (*(_QWORD *)(a3 + 16))
              {
                v23 = *(_BYTE *)(*(_QWORD *)(a4 + 56) + v21);
                v24 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E6F726341736168, 0xEA00000000006D79);
                if ((v25 & 1) != 0)
                {
                  if (!(v23 & 1 | ((*(_BYTE *)(*(_QWORD *)(a3 + 56) + v24) & 1) == 0)))
                  {
                    countAndFlagsBits = String.makeAcronymsLowercase()()._countAndFlagsBits;
                    swift_bridgeObjectRelease();
                  }
                  if (*(_QWORD *)(a4 + 16))
                  {
                    v26 = specialized __RawDictionaryStorage.find<A>(_:)(0x74654C7473726966, 0xEF73706143726574);
                    if ((v27 & 1) != 0)
                    {
                      if ((*(_BYTE *)(*(_QWORD *)(a4 + 56) + v26) & 1) != 0)
                      {
                        v28 = String.count.getter();
                        if (v28 < 0)
                          goto LABEL_104;
                        if (v28)
                        {
                          v29 = 0;
                          v30 = 0;
                          v80 = v28 - 1;
                          v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
                          v32 = v28;
                          while (1)
                          {
                            String.index(_:offsetBy:)();
                            v33 = String.subscript.getter();
                            v35 = v34;
                            if ((Character.isLetter.getter() & 1) == 0 || (v30 & 1) != 0)
                            {
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
                              v43 = v31[2];
                              v42 = v31[3];
                              if (v43 >= v42 >> 1)
                                v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v42 > 1), v43 + 1, 1, v31);
                              v31[2] = v43 + 1;
                              v44 = &v31[2 * v43];
                              v44[4] = v33;
                              v44[5] = v35;
                              if (v80 == v29)
                                goto LABEL_74;
                            }
                            else
                            {
                              v36 = MEMORY[0x22E2AF850](v33, v35);
                              v38 = v37;
                              swift_bridgeObjectRelease();
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
                              v40 = v31[2];
                              v39 = v31[3];
                              if (v40 >= v39 >> 1)
                                v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v31);
                              v31[2] = v40 + 1;
                              v41 = &v31[2 * v40];
                              v41[4] = v36;
                              v41[5] = v38;
                              if (v80 == v29)
                                goto LABEL_74;
                              v30 = 1;
                            }
                            if (v32 == ++v29)
                              goto LABEL_102;
                          }
                        }
                        goto LABEL_74;
                      }
LABEL_54:
                      if (!v79)
                      {
                        v78 = String.count.getter();
                        if (v78 < 0)
                          goto LABEL_105;
                        if (v78)
                        {
                          v45 = 0;
                          v46 = 0;
                          v47 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_58:
                          v48 = v78;
                          if (v78 <= v46)
                            v48 = v46;
                          v49 = -v48;
                          ++v46;
                          while (v49 + v46 != 1)
                          {
                            String.index(_:offsetBy:)();
                            v50 = String.subscript.getter();
                            v52 = v51;
                            if (!(v45 & 1 | ((Character.isLetter.getter() & 1) == 0)))
                            {
                              v56 = String.lowercased()();
                              swift_bridgeObjectRelease();
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
                              v58 = v47[2];
                              v57 = v47[3];
                              if (v58 >= v57 >> 1)
                                v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v47);
                              v47[2] = v58 + 1;
                              *(Swift::String *)&v47[2 * v58 + 4] = v56;
                              v45 = 1;
                              if (v46 != v78)
                                goto LABEL_58;
                              goto LABEL_74;
                            }
                            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                              v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
                            v54 = v47[2];
                            v53 = v47[3];
                            if (v54 >= v53 >> 1)
                              v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v47);
                            v47[2] = v54 + 1;
                            v55 = &v47[2 * v54];
                            v55[4] = v50;
                            v55[5] = v52;
                            if (++v46 - v78 == 1)
                              goto LABEL_74;
                          }
                          goto LABEL_103;
                        }
LABEL_74:
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
                        lazy protocol witness table accessor for type [String] and conformance [A]();
                        countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v13 = a4;
                        a5 = 0xEA00000000006D79;
                        v5 = 0xD000000000000011;
                      }
                      if (*(_QWORD *)(v13 + 16))
                      {
                        v59 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000002284DEEB0);
                        if ((v60 & 1) != 0)
                        {
                          if (*(_QWORD *)(a3 + 16))
                          {
                            v61 = *(_BYTE *)(*(_QWORD *)(v13 + 56) + v59);
                            v62 = specialized __RawDictionaryStorage.find<A>(_:)(0x6974736575517369, a5 + 246);
                            if ((v63 & 1) != 0)
                            {
                              if ((*(_BYTE *)(*(_QWORD *)(a3 + 56) + v62) & 1) != 0)
                              {
                                v64._countAndFlagsBits = 63;
                                v64._object = (void *)0xE100000000000000;
                                countAndFlagsBits = String.handleTrailingPunctuation(punctuationMark:shouldHaveTrailingQuestionMark:)(v64, v61)._countAndFlagsBits;
                                swift_bridgeObjectRelease();
                              }
                              if (*(_QWORD *)(v13 + 16))
                              {
                                v65 = specialized __RawDictionaryStorage.find<A>(_:)(v5 + 3, 0x80000002284DEED0);
                                if ((v66 & 1) != 0)
                                {
                                  if (*(_QWORD *)(a3 + 16))
                                  {
                                    v67 = *(_BYTE *)(*(_QWORD *)(v13 + 56) + v65);
                                    v68 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D616C6378457369, 0xED00006E6F697461);
                                    if ((v69 & 1) != 0)
                                    {
                                      if ((*(_BYTE *)(*(_QWORD *)(a3 + 56) + v68) & 1) != 0)
                                      {
                                        v70._countAndFlagsBits = 33;
                                        v70._object = (void *)0xE100000000000000;
                                        countAndFlagsBits = String.handleTrailingPunctuation(punctuationMark:shouldHaveTrailingQuestionMark:)(v70, v67)._countAndFlagsBits;
                                        swift_bridgeObjectRelease();
                                      }
                                      if (*(_QWORD *)(a4 + 16))
                                      {
                                        v71 = specialized __RawDictionaryStorage.find<A>(_:)(0x6D6D6F4373657375, 0xEA00000000007361);
                                        if ((v72 & 1) != 0)
                                        {
                                          if ((*(_BYTE *)(*(_QWORD *)(a4 + 56) + v71) & 1) == 0)
                                          {
                                            lazy protocol witness table accessor for type String and conformance String();
                                            countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
                                            swift_bridgeObjectRelease();
                                          }
                                          if (*(_QWORD *)(a4 + 16))
                                          {
                                            v73 = specialized __RawDictionaryStorage.find<A>(_:)(0x736F704173657375, 0xEF736568706F7274);
                                            if ((v74 & 1) != 0)
                                            {
                                              if ((*(_BYTE *)(*(_QWORD *)(a4 + 56) + v73) & 1) != 0)
                                                return countAndFlagsBits;
                                              if (one-time initialization token for apostropheVariants != -1)
                                                goto LABEL_106;
                                              goto LABEL_95;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    v17 = *(_QWORD *)(v8 + 8 * v18);
    if (!v17)
      break;
    v13 = v18;
LABEL_20:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_5:
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * v15 + 8);
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v12)
      goto LABEL_21;
    v17 = *(_QWORD *)(v8 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  swift_once();
LABEL_95:
  v75 = *((_QWORD *)apostropheVariants._rawValue + 2);
  if (v75)
  {
    v76 = swift_bridgeObjectRetain() + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.init<A>(_:)();
      lazy protocol witness table accessor for type String and conformance String();
      countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v76 += 16;
      --v75;
    }
    while (v75);
    swift_bridgeObjectRelease();
  }
  return countAndFlagsBits;
}

uint64_t specialized DUPersonalizeRepliesRuleBasedAnalyzer.analyzeConversation(conversation:allOtherConversations:)(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Bool v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t i;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  float *v62;
  uint64_t v63;
  Class isa;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v5 = MEMORY[0x24BEE4AF8];
    v71 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v6 = (uint64_t *)(a2 + 40);
    do
    {
      v7 = *v6;
      v9 = *(_QWORD *)(v71 + 16);
      v8 = *(_QWORD *)(v71 + 24);
      v10 = v9 + 1;
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v71 + 16) = v10;
      *(_QWORD *)(v71 + 8 * v9 + 32) = v7;
      v6 += 2;
      --v3;
    }
    while (v3);
    v72 = v5;
    goto LABEL_8;
  }
  v11 = MEMORY[0x24BEE4AF8];
  v10 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v72 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    v12 = 0;
    do
    {
      ++v12;
      v13 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v13);
    }
    while (v10 != v12);
    swift_bridgeObjectRelease_n();
    v11 = v72;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
LABEL_11:
  v14 = DUTermsOfAddressAnalyzer.analyze(outgoingMessages:additionalUserText:)(a1, v11);
  swift_bridgeObjectRelease();
  v15 = specialized Collection.first.getter(v14);
  v16 = v15;
  v18 = v17;
  if (v17)
    v19 = (uint64_t)v15;
  else
    v19 = 0;
  v20 = DUPersonalizeRepliesRuleBasedAnalyzer.generateAndAnalyzeEquivalenceTables(outgoingMessages:termOfAddress:)(a1, v19, v18);
  v22 = v20;
  if (!v20)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v22;
  }
  v69 = v21;
  v66 = (uint64_t)v16;
  v23 = specialized DUPersonalizeRepliesRuleBasedAnalyzer.getAggregateStyleFields(tableAnalysisResults:)(v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Bool)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C1AF0;
  *(_QWORD *)(inited + 32) = 0x6A6F6D4573657375;
  *(_QWORD *)(inited + 40) = 0xEA00000000007369;
  v25 = *(_QWORD *)(a1 + 16);
  if (v25)
  {
    swift_bridgeObjectRetain();
    v26 = 0;
    v27 = a1 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      v28 = String.hasEmoji()();
      swift_bridgeObjectRelease();
      if (v28 && __OFADD__(v26++, 1))
        break;
      v27 += 16;
      if (!--v25)
        goto LABEL_22;
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = 0;
  }
  *(_BYTE *)(inited + 48) = v26 > 1;
  *(_QWORD *)(inited + 56) = 0x74654C7473726966;
  *(_QWORD *)(inited + 64) = 0xEF73706143726574;
  *(_BYTE *)(inited + 72) = specialized DUPersonalizeRepliesRuleBasedAnalyzer.mostFirstLettersAreCapitalized(outgoingMessages:)(a1) & 1;
  *(_QWORD *)(inited + 80) = 0xD000000000000011;
  *(_QWORD *)(inited + 88) = 0x80000002284DEEB0;
  *(_BYTE *)(inited + 96) = v23 & 1;
  *(_QWORD *)(inited + 104) = 0xD000000000000014;
  *(_QWORD *)(inited + 112) = 0x80000002284DEED0;
  *(_BYTE *)(inited + 120) = BYTE1(v23) & 1;
  *(_QWORD *)(inited + 128) = 0x6D6D6F4373657375;
  *(_QWORD *)(inited + 136) = 0xEA00000000007361;
  *(_BYTE *)(inited + 144) = BYTE2(v23) & 1;
  *(_QWORD *)(inited + 152) = 0xD000000000000013;
  *(_QWORD *)(inited + 160) = 0x80000002284DEEF0;
  *(_BYTE *)(inited + 168) = BYTE3(v23) & 1;
  *(_QWORD *)(inited + 176) = 0x736F704173657375;
  *(_QWORD *)(inited + 184) = 0xEF736568706F7274;
  *(_BYTE *)(inited + 192) = BYTE4(v23) & 1;
  v30 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v31 = DUPersonalizeRepliesRuleBasedAnalyzer.getReplyWeightsAndBooleanProperties(tableAnalysisResults:tables:)((uint64_t)v22, v69);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v68 = v31;
  if (!v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_57:
    swift_bridgeObjectRelease();
    return 0;
  }
  v33 = MEMORY[0x24BEE4B00];
  if (v18)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v66, v18, 0x5F464F5F4D524554, 0xEF53534552444441, isUniquelyReferenced_nonNull_native);
    result = swift_bridgeObjectRelease();
  }
  v35 = 0;
  v36 = *(_QWORD *)(v31 + 64);
  v65 = v31 + 64;
  v37 = 1 << *(_BYTE *)(v31 + 32);
  v38 = -1;
  if (v37 < 64)
    v38 = ~(-1 << v37);
  v39 = v38 & v36;
  v67 = (unint64_t)(v37 + 63) >> 6;
  v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if ((v38 & v36) == 0)
    goto LABEL_32;
LABEL_31:
  v40 = __clz(__rbit64(v39));
  v39 &= v39 - 1;
  for (i = v40 | (v35 << 6); ; i = __clz(__rbit64(v43)) + (v35 << 6))
  {
    v45 = 16 * i;
    v46 = (uint64_t *)(*(_QWORD *)(v68 + 48) + v45);
    v48 = *v46;
    v47 = v46[1];
    v49 = *(_QWORD *)(v68 + 56) + v45;
    v50 = *(float *)v49;
    v51 = *(_QWORD *)(v49 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52 = v30;
    v53 = specialized DUPersonalizeRepliesRuleBasedAnalyzer.formatReply(reply:BOOLeanReplyProperties:BOOLeanPreferences:stringReplacements:)(v48, v47, v51, v30, v33);
    v55 = v54;
    swift_bridgeObjectRelease();
    if (!v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    v70 = v35;
    v56 = v33;
    lazy protocol witness table accessor for type String and conformance String();
    v57 = StringProtocol.contains<A>(_:)();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((v57 & 1) != 0)
      v50 = 0.0;
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      v22 = (_QWORD *)result;
    }
    v58 = v22;
    v59 = v22[2];
    v60 = v58;
    v61 = v58[3];
    if (v59 >= v61 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v61 > 1), v59 + 1, 1, v60);
      v60 = (_QWORD *)result;
    }
    v60[2] = v59 + 1;
    v62 = (float *)&v60[6 * v59];
    v22 = v60;
    *((_QWORD *)v62 + 4) = v48;
    *((_QWORD *)v62 + 5) = v47;
    *((_QWORD *)v62 + 6) = v53;
    *((_QWORD *)v62 + 7) = v55;
    v62[16] = v50;
    *((_QWORD *)v62 + 9) = v51;
    v30 = v52;
    v33 = v56;
    v35 = v70;
    if (v39)
      goto LABEL_31;
LABEL_32:
    v42 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_62;
    }
    if (v42 >= v67)
      goto LABEL_59;
    v43 = *(_QWORD *)(v65 + 8 * v42);
    ++v35;
    if (!v43)
    {
      v35 = v42 + 1;
      if (v42 + 1 >= v67)
        goto LABEL_59;
      v43 = *(_QWORD *)(v65 + 8 * v35);
      if (!v43)
      {
        v35 = v42 + 2;
        if (v42 + 2 >= v67)
          goto LABEL_59;
        v43 = *(_QWORD *)(v65 + 8 * v35);
        if (!v43)
          break;
      }
    }
LABEL_45:
    v39 = (v43 - 1) & v43;
  }
  v44 = v42 + 3;
  if (v44 >= v67)
  {
LABEL_59:
    swift_release();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Swift.AnyObject)>);
    v63 = swift_initStackObject();
    *(_OWORD *)(v63 + 16) = xmmword_2284C1EE0;
    *(_QWORD *)(v63 + 32) = 0xD000000000000012;
    *(_QWORD *)(v63 + 40) = 0x80000002284DEF10;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v63 + 48) = isa;
    specialized Dictionary.init(dictionaryLiteral:)(v63);
    return (uint64_t)v22;
  }
  v43 = *(_QWORD *)(v65 + 8 * v44);
  if (v43)
  {
    v35 = v44;
    goto LABEL_45;
  }
  while (1)
  {
    v35 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v35 >= v67)
      goto LABEL_59;
    v43 = *(_QWORD *)(v65 + 8 * v35);
    ++v44;
    if (v43)
      goto LABEL_45;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t destroy for DUPersonalizeRepliesRuleBasedAnalyzer(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DUPersonalizeRepliesRuleBasedAnalyzer(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v7 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DUPersonalizeRepliesRuleBasedAnalyzer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for DUPersonalizeRepliesRuleBasedAnalyzer(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for DUPersonalizeRepliesRuleBasedAnalyzer()
{
  return &type metadata for DUPersonalizeRepliesRuleBasedAnalyzer;
}

uint64_t outlined retain of DUReplyEquivalenceTable(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of DUReplyEquivalenceTable(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized ContiguousArray.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v7;
  if (!(_DWORD)result || v9 > *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1);
      v7 = *v4;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *(_QWORD *)(v7 + 16);
  if ((*(_QWORD *)(v7 + 24) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = v7 + 16 * v14 + 32;
  v16 = a2 + 16 * a3;
  if (v16 < v15 + 16 * v6 && v15 < v16 + 16 * v6)
    goto LABEL_27;
  result = swift_arrayInitWithCopy();
  if (!v6)
  {
LABEL_22:
    *v4 = v7;
    return result;
  }
  v18 = *(_QWORD *)(v7 + 16);
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    *(_QWORD *)(v7 + 16) = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DUProcessingPhaseSpecification.outputFromRequest(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[24] = a4;
  v5[25] = v4;
  v5[22] = a2;
  v5[23] = a3;
  v5[21] = a1;
  return swift_task_switch();
}

uint64_t DUProcessingPhaseSpecification.outputFromRequest(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_0;
  _QWORD *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v6 = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 40) = v6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(boxed_opaque_existential_0, v1);
  *(_QWORD *)&v6 = **(int **)(*(_QWORD *)v2 + 232) + *(_QWORD *)(*(_QWORD *)v2 + 232);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v4;
  *v4 = v0;
  v4[1] = DUProcessingPhaseSpecification.outputFromRequest(request:);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(v0 + 56, v0 + 16);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 16;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  int v5;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for Result<Any?, Error>);
  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 168);
    outlined destroy of Result<Any?, Error>(v0 + 96);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v1, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 168);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v0 + 96, v0 + 136, &demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    v4 = swift_getAssociatedTypeWitness();
    v5 = swift_dynamicCast();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, v5 ^ 1u, 1, v4);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined destroy of Result<Any?, Error>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Any?, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id DUStructuredEntityResponse.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

char *DUStructuredEntityResponse.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  void **v67;
  void *v68;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v83 = a1;
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v78 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v77 = (uint64_t)&v70 - v7;
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v80 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v70 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v76 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v79 = (char *)&v70 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (uint64_t *)((char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v83, a2);
  v30 = (char *)v29;
  v31 = v25;
  v32 = a2;
  v33 = swift_dynamicCast();
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if ((v33 & 1) != 0)
  {
    v35 = v79;
    v36 = v80;
    v73 = v30;
    v74 = v22;
    v71 = v31;
    v34(v21, 0, 1, v31);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v21, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
    v72 = v28;
    v37 = *v28;
    v84 = MEMORY[0x24BEE4AF8];
    v38 = *(_QWORD *)(v37 + 16);
    v75 = v32;
    if (v38)
    {
      v39 = v37 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v40 = *(_QWORD *)(v36 + 72);
      v80 = v37;
      swift_bridgeObjectRetain();
      v41 = (uint64_t)v35;
      do
      {
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v39, (uint64_t)v13, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
        outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v13, (uint64_t)v11, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
        v42 = specialized DUStructuredEntity.__allocating_init<A>(proto:)((uint64_t)v11);
        v43 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v13, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
        if (v42)
        {
          MEMORY[0x22E2AFAFC](v43);
          if (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v41 = (uint64_t)v35;
        }
        v39 += v40;
        --v38;
      }
      while (v38);
      v45 = v84;
      v46 = v81;
    }
    else
    {
      swift_bridgeObjectRetain();
      v45 = MEMORY[0x24BEE4AF8];
      v46 = v81;
      v41 = (uint64_t)v35;
    }
    swift_bridgeObjectRelease();
    v44 = v73;
    v47 = &v73[OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_structuredEntities];
    swift_beginAccess();
    *(_QWORD *)v47 = v45;
    swift_bridgeObjectRelease();
    v48 = (uint64_t)v72;
    v49 = (uint64_t)v72 + *(int *)(v71 + 24);
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v49, v41, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
    v51 = v82;
    v52 = v50(v41, 1, v82);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v41, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v53 = v83;
    if (v52 == 1)
    {

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v53, v75);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v48, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
    }
    else
    {
      v54 = v49;
      v55 = v76;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v54, v76, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v56 = v50(v55, 1, v51);
      v57 = v74;
      v58 = v77;
      if (v56 == 1)
      {
        UnknownStorage.init()();
        v59 = (_QWORD *)(v58 + *(int *)(v51 + 20));
        *v59 = 0;
        v59[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v55, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v55, v77, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v60 = (uint64_t)v78;
      v61 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v58, v60, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v62 = (uint64_t *)(v60 + *(int *)(v51 + 20));
      if (v62[1])
      {
        v63 = *v62;
        v64 = v62[1];
      }
      else
      {
        v63 = 0;
        v64 = 0xE000000000000000;
      }
      v65 = (char *)v61;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v60, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v66 = &v65[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v66 = v63;
      *((_QWORD *)v66 + 1) = v64;

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v53, v75);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v48, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
      v67 = (void **)&v44[OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_responseDebugInfo];
      swift_beginAccess();
      v68 = *v67;
      *v67 = v65;

    }
  }
  else
  {
    v34(v21, 1, 1, v31);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v83, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v21, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntityResponse?);
    return 0;
  }
  return v44;
}

uint64_t DUStructuredEntityResponse.structuredEntities.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUStructuredEntityResponse.structuredEntities.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_structuredEntities);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUStructuredEntityResponse.structuredEntities.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *DUStructuredEntityResponse.responseDebugInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_responseDebugInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DUStructuredEntityResponse.responseDebugInfo.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_responseDebugInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*DUStructuredEntityResponse.responseDebugInfo.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t specialized DUStructuredEntity.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  double v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t i;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t (*v117)(uint64_t, uint64_t, int *);
  int v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  _QWORD *v123;
  _QWORD *v124;
  char *v125;
  void **v126;
  void *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t, uint64_t, int *);
  uint64_t v137;
  int *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  void **v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(uint64_t, uint64_t, uint64_t);
  int v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  id v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  void **v170;
  void *v171;
  uint64_t result;
  _QWORD v173[2];
  _BYTE *v174;
  _OWORD *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;

  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v188 = *(_QWORD *)(v2 - 8);
  v189 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v177 = (char *)v173 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v176 = (uint64_t)v173 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v180 = (uint64_t)v173 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v187 = (uint64_t)v173 - v9;
  v10 = type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo(0);
  v185 = *(_QWORD *)(v10 - 8);
  v186 = (int *)v10;
  MEMORY[0x24BDAC7A8](v10);
  v175 = (_OWORD *)((char *)v173 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v179 = (uint64_t)v173 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v184 = (uint64_t)v173 - v15;
  v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent(0);
  v182 = *(_QWORD *)(v16 - 8);
  v183 = (int *)v16;
  MEMORY[0x24BDAC7A8](v16);
  v174 = (char *)v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v178 = (uint64_t)v173 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v181 = (uint64_t)v173 - v21;
  v198 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel(0);
  v22 = *(_QWORD *)(v198 - 8);
  v23 = MEMORY[0x24BDAC7A8](v198);
  v197 = (uint64_t)v173 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v195 = (uint64_t)v173 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v196 = (uint64_t)v173 - v27;
  v28 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)v173 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUStructuredEntity()), sel_init);
  v190 = a1;
  v32 = a1;
  v33 = v30;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v32, (uint64_t)v30, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
  v191 = *(int *)(v28 + 20);
  v34 = *(_QWORD **)&v30[v191];
  swift_beginAccess();
  if (v34[3])
  {
    v35 = v34[2];
    v36 = v34[3];
  }
  else
  {
    v35 = 0;
    v36 = 0xE000000000000000;
  }
  v37 = &v31[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_title];
  swift_beginAccess();
  *(_QWORD *)v37 = v35;
  *((_QWORD *)v37 + 1) = v36;
  v193 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (v34[5])
  {
    v38 = v34[4];
    v39 = v34[5];
  }
  else
  {
    v38 = 0;
    v39 = 0xE000000000000000;
  }
  v40 = &v193[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_type];
  swift_beginAccess();
  *(_QWORD *)v40 = v38;
  *((_QWORD *)v40 + 1) = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v41 = v34[6];
  v200 = MEMORY[0x24BEE4AF8];
  v42 = *(_QWORD *)(v41 + 16);
  v192 = (uint64_t)v33;
  if (v42)
  {
    v43 = v41 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v194 = *(_QWORD *)(v22 + 72);
    v173[1] = v41;
    swift_bridgeObjectRetain_n();
    do
    {
      v44 = v196;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v43, v196, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v45 = v195;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v44, v195, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v46 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUStructuredExtractionLabel()), sel_init);
      v47 = v45;
      v48 = v197;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, v197, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v49 = (uint64_t *)(v48 + *(int *)(v198 + 20));
      if (v49[1])
      {
        v50 = *v49;
        v51 = v49[1];
      }
      else
      {
        v50 = 0;
        v51 = 0xE000000000000000;
      }
      v52 = &v46[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_labelName];
      swift_beginAccess();
      *(_QWORD *)v52 = v50;
      *((_QWORD *)v52 + 1) = v51;
      v53 = v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v54 = v197 + *(int *)(v198 + 24);
      if (*(_BYTE *)(v54 + 8))
        v55 = 0.0;
      else
        v55 = *(double *)v54;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v197, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      v56 = (double *)&v53[OBJC_IVAR____TtC21DocumentUnderstanding27DUStructuredExtractionLabel_confidenceScore];
      swift_beginAccess();
      *v56 = v55;

      v57 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v196, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityLabel);
      MEMORY[0x22E2AFAFC](v57);
      if (*(_QWORD *)((v200 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v200 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v43 += v194;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
    v58 = v200;
  }
  else
  {
    swift_bridgeObjectRetain();
    v58 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v59 = v193;
  v60 = &v193[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_labels];
  swift_beginAccess();
  *(_QWORD *)v60 = v58;
  swift_bridgeObjectRelease();
  v61 = *(_QWORD **)(v192 + v191);
  swift_beginAccess();
  v63 = v61[7];
  v62 = v61[8];
  v64 = &v59[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_phoneNumber];
  swift_beginAccess();
  *(_QWORD *)v64 = v63;
  *((_QWORD *)v64 + 1) = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v66 = v61[9];
  v65 = v61[10];
  v67 = &v59[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_email];
  swift_beginAccess();
  *(_QWORD *)v67 = v66;
  *((_QWORD *)v67 + 1) = v65;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v69 = v61[11];
  v68 = v61[12];
  v70 = &v59[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_url];
  swift_beginAccess();
  *(_QWORD *)v70 = v69;
  *((_QWORD *)v70 + 1) = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v71 = v61 + 13;
  swift_beginAccess();
  if (!*(_QWORD *)(v61[13] + 16))
  {
LABEL_55:
    v111 = v191;
    v112 = v192;
    v113 = *(_QWORD *)(v192 + v191)
         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
    swift_beginAccess();
    v114 = v113;
    v115 = v181;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v114, v181, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
    v116 = v183;
    v117 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v182 + 48);
    v118 = v117(v115, 1, v183);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v115, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
    v119 = 0;
    if (v118 != 1)
    {
      v120 = *(_QWORD *)(v112 + v111)
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__calendarEvent;
      swift_beginAccess();
      v121 = v178;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v120, v178, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
      if (v117(v121, 1, v116) == 1)
      {
        v122 = v174;
        *v174 = 0;
        UnknownStorage.init()();
        *(_OWORD *)&v122[v116[6]] = xmmword_2284C0CD0;
        v123 = &v122[v116[7]];
        *v123 = 0;
        v123[1] = 0;
        *(_OWORD *)&v122[v116[8]] = xmmword_2284C0CD0;
        v124 = &v122[v116[9]];
        *v124 = 0;
        v124[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v121, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_CalendarEvent?);
      }
      else
      {
        v122 = v174;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v121, (uint64_t)v174, type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent);
      }
      v119 = specialized DUCalendarEvent.__allocating_init<A>(proto:)((uint64_t)v122);
      v112 = v192;
    }
    v125 = v193;
    v126 = (void **)&v193[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_calendarEvent];
    swift_beginAccess();
    v127 = *v126;
    *v126 = v119;

    v128 = *(_QWORD *)(v112 + v111);
    v129 = (uint64_t *)(v128
                     + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__homeAutomationID);
    swift_beginAccess();
    v131 = *v129;
    v130 = v129[1];
    v132 = &v125[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_homeAutomationID];
    swift_beginAccess();
    *(_QWORD *)v132 = v131;
    *((_QWORD *)v132 + 1) = v130;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v133 = v128
         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
    swift_beginAccess();
    v134 = v133;
    v135 = v184;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v134, v184, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
    v136 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v185 + 48);
    v137 = v111;
    v138 = v186;
    LODWORD(v125) = v136(v135, 1, v186);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v135, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
    v139 = 0;
    if ((_DWORD)v125 != 1)
    {
      v140 = *(_QWORD *)(v112 + v137)
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__displayInfo;
      swift_beginAccess();
      v141 = v179;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v140, v179, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
      if (v136(v141, 1, v138) == 1)
      {
        v142 = v175;
        *v175 = xmmword_2284C0CE0;
        v142[1] = xmmword_2284C0CE0;
        *((_BYTE *)v142 + 32) = 0;
        UnknownStorage.init()();
        v143 = (char *)v142 + v138[8];
        *(_QWORD *)v143 = 0;
        v143[8] = 1;
        v144 = (char *)v142 + v138[9];
        *(_QWORD *)v144 = 0;
        v144[8] = 1;
        v145 = (char *)v142 + v138[10];
        *(_QWORD *)v145 = 0;
        v145[8] = 1;
        v146 = (char *)v142 + v138[11];
        *(_QWORD *)v146 = 0;
        v146[8] = 1;
        v147 = (char *)v142 + v138[12];
        *(_QWORD *)v147 = 0;
        v147[8] = 1;
        v148 = (char *)v142 + v138[13];
        *(_QWORD *)v148 = 0;
        v148[8] = 1;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v141, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DisplayInfo?);
      }
      else
      {
        v142 = v175;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v141, (uint64_t)v175, type metadata accessor for DocumentUnderstanding_ClientInterface_DisplayInfo);
      }
      v139 = specialized DUDisplayInfo.__allocating_init<A>(proto:)((uint64_t)v142);
      v137 = v191;
      v112 = v192;
    }
    v149 = (void **)&v193[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_displayInfo];
    swift_beginAccess();
    v150 = *v149;
    *v149 = v139;

    v151 = *(_QWORD *)(v112 + v137)
         + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
    swift_beginAccess();
    v152 = v151;
    v153 = v187;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v152, v187, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v154 = v189;
    v155 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
    v156 = v155(v153, 1, v189);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v153, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    v157 = 0;
    if (v156 != 1)
    {
      v158 = *(_QWORD *)(v112 + v137)
           + OBJC_IVAR____TtCV21DocumentUnderstanding54DocumentUnderstanding_ClientInterface_StructuredEntityP33_38B59A0C572EFC481874056181C4AC8813_StorageClass__responseDebugInfo;
      swift_beginAccess();
      v159 = v158;
      v160 = v180;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v159, v180, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      if (v155(v160, 1, v154) == 1)
      {
        v161 = v176;
        UnknownStorage.init()();
        v162 = (_QWORD *)(v161 + *(int *)(v154 + 20));
        *v162 = 0;
        v162[1] = 0;
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v160, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      }
      else
      {
        v161 = v176;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v160, v176, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      }
      v163 = (uint64_t)v177;
      v164 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v161, v163, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v165 = (uint64_t *)(v163 + *(int *)(v154 + 20));
      if (v165[1])
      {
        v166 = *v165;
        v167 = v165[1];
      }
      else
      {
        v166 = 0;
        v167 = 0xE000000000000000;
      }
      v157 = (char *)v164;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v163, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v168 = &v157[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
      swift_beginAccess();
      *(_QWORD *)v168 = v166;
      *((_QWORD *)v168 + 1) = v167;

      swift_bridgeObjectRelease();
      v112 = v192;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v190, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v112, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
    v169 = v193;
    v170 = (void **)&v193[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_responseDebugInfo];
    swift_beginAccess();
    v171 = *v170;
    *v170 = v157;

    return (uint64_t)v169;
  }
  v72 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v73 = (unint64_t *)&v193[OBJC_IVAR____TtC21DocumentUnderstanding18DUStructuredEntity_addressComponents];
  swift_beginAccess();
  *v73 = v72;
  swift_bridgeObjectRelease();
  v74 = *v71;
  v75 = *(_QWORD *)(*v71 + 64);
  v195 = *v71 + 64;
  v76 = 1 << *(_BYTE *)(v74 + 32);
  v77 = -1;
  if (v76 < 64)
    v77 = ~(-1 << v76);
  v78 = v77 & v75;
  v196 = (unint64_t)(v76 + 63) >> 6;
  v197 = v74;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v198)
  {
    if (v78)
    {
      v81 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      v198 = i;
      v82 = v81 | (i << 6);
    }
    else
    {
      v83 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_76;
      if (v83 >= v196)
      {
LABEL_54:
        swift_release();
        goto LABEL_55;
      }
      v84 = *(_QWORD *)(v195 + 8 * v83);
      v85 = i + 1;
      if (!v84)
      {
        v85 = i + 2;
        if (i + 2 >= v196)
          goto LABEL_54;
        v84 = *(_QWORD *)(v195 + 8 * v85);
        if (!v84)
        {
          v85 = i + 3;
          if (i + 3 >= v196)
            goto LABEL_54;
          v84 = *(_QWORD *)(v195 + 8 * v85);
          if (!v84)
          {
            v86 = i + 4;
            if (i + 4 >= v196)
              goto LABEL_54;
            v84 = *(_QWORD *)(v195 + 8 * v86);
            if (!v84)
            {
              while (1)
              {
                v85 = v86 + 1;
                if (__OFADD__(v86, 1))
                  goto LABEL_77;
                if (v85 >= v196)
                  goto LABEL_54;
                v84 = *(_QWORD *)(v195 + 8 * v85);
                ++v86;
                if (v84)
                  goto LABEL_41;
              }
            }
            v85 = i + 4;
          }
        }
      }
LABEL_41:
      v78 = (v84 - 1) & v84;
      v198 = v85;
      v82 = __clz(__rbit64(v84)) + (v85 << 6);
    }
    v87 = 16 * v82;
    v88 = (uint64_t *)(*(_QWORD *)(v197 + 48) + v87);
    v89 = *v88;
    v90 = v88[1];
    v91 = (uint64_t *)(*(_QWORD *)(v197 + 56) + v87);
    v93 = *v91;
    v92 = v91[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v94 = (void *)MEMORY[0x22E2AF8EC](v89, v90);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (!*v73)
      goto LABEL_78;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v199 = (_QWORD *)*v73;
    v96 = v199;
    *v73 = 0x8000000000000000;
    v98 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
    v99 = v96[2];
    v100 = (v97 & 1) == 0;
    v101 = v99 + v100;
    if (__OFADD__(v99, v100))
      break;
    v102 = v97;
    if (v96[3] >= v101)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v105 = v199;
        if ((v97 & 1) != 0)
          goto LABEL_24;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v105 = v199;
        if ((v102 & 1) != 0)
          goto LABEL_24;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v101, isUniquelyReferenced_nonNull_native);
      v103 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v94);
      if ((v102 & 1) != (v104 & 1))
        goto LABEL_79;
      v98 = v103;
      v105 = v199;
      if ((v102 & 1) != 0)
      {
LABEL_24:
        v80 = (_QWORD *)(v105[7] + 16 * v98);
        swift_bridgeObjectRelease();
        *v80 = v93;
        v80[1] = v92;
        goto LABEL_25;
      }
    }
    v105[(v98 >> 6) + 8] |= 1 << v98;
    *(_QWORD *)(v105[6] + 8 * v98) = v94;
    v106 = (_QWORD *)(v105[7] + 16 * v98);
    *v106 = v93;
    v106[1] = v92;
    v107 = v105[2];
    v108 = __OFADD__(v107, 1);
    v109 = v107 + 1;
    if (v108)
      goto LABEL_75;
    v105[2] = v109;
    v110 = v94;
LABEL_25:
    *v73 = (unint64_t)v105;

    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:

  __break(1u);
LABEL_79:
  type metadata accessor for NSTextCheckingKey(0);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t DUStructuredEntityResponse.protoRepresentation.getter@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(uint64_t);
  _QWORD *v29;
  void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t result;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  void *v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntity?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v58 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v57 = (char *)&v51 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v55 = (uint64_t)&v51 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v52 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v20);
  v54 = (uint64_t)&v51 - v21;
  *a1 = MEMORY[0x24BEE4AF8];
  v22 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  UnknownStorage.init()();
  v23 = *(int *)(v22 + 24);
  v53 = a1;
  v24 = (uint64_t)a1 + v23;
  v25 = *(uint64_t (**)(void))(v17 + 56);
  v51 = v24;
  v26 = v25();
  v27 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v28 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x78);
  v56 = v1;
  v29 = (_QWORD *)v28(v26);
  if (v29)
  {
    v30 = v29;
    (*(void (**)(void))((*v27 & *v29) + 0x78))();

    v31 = swift_dynamicCast();
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v25)(v15, v31 ^ 1u, 1, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
    {
      v32 = (uint64_t)v15;
      v33 = v54;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v32, v54, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v34 = v52;
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v33, v52, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      v35 = v51;
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v51, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v34, v35, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v25)(v35, 0, 1, v16);
      v36 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v33, (uint64_t (*)(_QWORD))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo);
      goto LABEL_6;
    }
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v15, 1, 1, v16);
  }
  v36 = outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v15, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
LABEL_6:
  v37 = (_QWORD *)MEMORY[0x24BEE4EA0];
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v56) + 0x60))(v36);
  if (!result)
    return result;
  v39 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v40 = result;
    if (result)
      goto LABEL_9;
  }
  else
  {
    v40 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v40)
    {
LABEL_9:
      if (v40 < 1)
      {
        __break(1u);
        return result;
      }
      v41 = 0;
      v56 = (_QWORD *)(v39 & 0xC000000000000001);
      v42 = MEMORY[0x24BEE4AF8];
      v54 = v6;
      do
      {
        if (v56)
          v43 = (_QWORD *)MEMORY[0x22E2AFF34](v41, v39);
        else
          v43 = *(id *)(v39 + 8 * v41 + 32);
        v44 = v43;
        v45 = *(void (**)(void))((*v37 & *v43) + 0x1B8);
        v46 = (uint64_t)v57;
        v45();
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v46, (uint64_t)v5, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);

        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
        {
          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_StructuredEntity?);
          v37 = (_QWORD *)MEMORY[0x24BEE4EA0];
        }
        else
        {
          v47 = v55;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v5, v55, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v47, v58, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1, v42);
          v37 = (_QWORD *)MEMORY[0x24BEE4EA0];
          v49 = *(_QWORD *)(v42 + 16);
          v48 = *(_QWORD *)(v42 + 24);
          if (v49 >= v48 >> 1)
            v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v42);
          *(_QWORD *)(v42 + 16) = v49 + 1;
          outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v58, v42+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v49, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity);
          v6 = v54;
        }
        ++v41;
      }
      while (v40 != v41);
      goto LABEL_24;
    }
  }
  v42 = MEMORY[0x24BEE4AF8];
LABEL_24:
  swift_bridgeObjectRelease_n();
  v50 = v53;
  result = swift_bridgeObjectRelease();
  *v50 = v42;
  return result;
}

uint64_t DUStructuredEntityResponse.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))(v4);
  v7 = specialized DUStructuredEntityResponse.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUStructuredEntityResponse?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUStructuredEntityResponse.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUStructuredEntityResponse();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUStructuredEntityResponse and conformance DUStructuredEntityResponse, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUStructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DUStructuredEntityResponse);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUStructuredEntityResponse.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUStructuredEntityResponse.init(coder:)(a1);
}

uint64_t DUStructuredEntityResponse.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUStructuredEntityResponse and conformance DUStructuredEntityResponse, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUStructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DUStructuredEntityResponse);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUStructuredEntityResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_structuredEntities] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding26DUStructuredEntityResponse_responseDebugInfo] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUStructuredEntityResponse();
  return objc_msgSendSuper2(&v2, sel_init);
}

id DUStructuredEntityResponse.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUStructuredEntityResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUStructuredEntityResponse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 144);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for DUStructuredEntityResponse()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUStructuredEntityResponse()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2283A6FD0()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.documentEmailData.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v5, (uint64_t)a1);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0xE000000000000000;
  v8 = MEMORY[0x24BEE4AF8];
  a1[8] = MEMORY[0x24BEE4AF8];
  a1[9] = v8;
  a1[10] = v8;
  a1[11] = v8;
  a1[12] = v8;
  a1[13] = v8;
  a1[14] = 0;
  UnknownStorage.init()();
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
}

uint64_t type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0xE000000000000000;
  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.documentEmailData.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.htmlString.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.htmlString.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.htmlString.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t key path setter for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.documentEmailData : DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(a1, (uint64_t)v7);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.documentEmailData.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData() + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    v9[5] = 0xE000000000000000;
    v9[6] = 0;
    v9[7] = 0xE000000000000000;
    v11 = MEMORY[0x24BEE4AF8];
    v9[8] = MEMORY[0x24BEE4AF8];
    v9[9] = v11;
    v9[10] = v11;
    v9[11] = v11;
    v9[12] = v11;
    v9[13] = v11;
    v9[14] = 0;
    UnknownStorage.init()();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.documentEmailData.modify;
}

void DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.documentEmailData.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(void **)a1;
  v3 = *(int *)(*(_QWORD *)a1 + 48);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(void **)(*(_QWORD *)a1 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v8 = *(void **)(*(_QWORD *)a1 + 8);
  v9 = **(_QWORD **)a1 + v3;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v4);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v9, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v4, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v5);
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(**(_QWORD **)a1 + v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v5, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.hasDocumentEmailData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.clearDocumentEmailData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.protoMessageName;
}

unint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.protoMessageName.getter()
{
  return 0xD00000000000003FLL;
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.traverse<A>(visitor:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = v0[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3 || (result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.traverse<A>(visitor:)((uint64_t)v0);
    if (!v1)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentEmailData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v8);
}

Swift::Int DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return 0xD00000000000003FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.== infix(_:_:)(uint64_t *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v40 - v7;
  v8 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?, DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v40 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v40 - v21;
  v23 = *a1;
  v24 = a1[1];
  v25 = *(_QWORD *)a2;
  v26 = *((_QWORD *)a2 + 1);
  v45 = a2;
  if (v23 == v25 && v24 == v26 || (v27 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    v40 = v4;
    v28 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData();
    outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v22);
    outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?((uint64_t)&v45[*(int *)(v28 + 24)], (uint64_t)v20);
    v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
    outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?((uint64_t)v22, (uint64_t)v13);
    outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?((uint64_t)v20, v29);
    v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v30((uint64_t)v13, 1, v8) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      if (v30(v29, 1, v8) == 1)
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
LABEL_11:
        v33 = v44;
        v34 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
        v35 = v42;
        v36 = v40;
        v34(v42, (char *)a1 + *(int *)(v28 + 20), v40);
        v37 = v43;
        v34(v43, &v45[*(int *)(v28 + 20)], v36);
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v33 + 8);
        v38(v37, v36);
        v38(v35, v36);
        return v27 & 1;
      }
    }
    else
    {
      outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?((uint64_t)v13, (uint64_t)v17);
      if (v30(v29, 1, v8) != 1)
      {
        v31 = v41;
        outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(v29, v41);
        v32 = specialized static DocumentUnderstanding_DocumentRepresentation_DocumentEmailData.== infix(_:_:)((uint64_t)v17, v31);
        outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData(v31);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
        outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v17);
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
        if ((v32 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        v27 = 0;
        return v27 & 1;
      }
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v17);
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for (DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?, DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?));
    goto LABEL_12;
  }
  return v27 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData and conformance DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData);
}

uint64_t sub_2283A83B0@<X0>(_QWORD *a1@<X8>)
{
  return DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData.documentEmailData.getter(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v30;
  void (*v31)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = v15[1];
      *v14 = *v15;
      v14[1] = v20;
      v21 = v15[3];
      v14[2] = v15[2];
      v14[3] = v21;
      v22 = v15[5];
      v14[4] = v15[4];
      v14[5] = v22;
      v31 = v12;
      v23 = v15[7];
      v14[6] = v15[6];
      v14[7] = v23;
      v24 = v15[9];
      v14[8] = v15[8];
      v14[9] = v24;
      v25 = v15[11];
      v14[10] = v15[10];
      v14[11] = v25;
      v26 = v15[13];
      v14[12] = v15[12];
      v14[13] = v26;
      v14[14] = v15[14];
      v27 = *(int *)(v16 + 60);
      v30 = (char *)v14 + v27;
      v28 = (char *)v15 + v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v31(v30, v28, v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t destroy for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 60), v5);
  }
  return result;
}

_QWORD *initializeWithCopy for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  void (*v29)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v20 = v14[5];
    v13[4] = v14[4];
    v13[5] = v20;
    v29 = v11;
    v21 = v14[7];
    v13[6] = v14[6];
    v13[7] = v21;
    v22 = v14[9];
    v13[8] = v14[8];
    v13[9] = v22;
    v23 = v14[11];
    v13[10] = v14[10];
    v13[11] = v23;
    v24 = v14[13];
    v13[12] = v14[12];
    v13[13] = v24;
    v13[14] = v14[14];
    v25 = *(int *)(v15 + 60);
    v28 = (char *)v13 + v25;
    v26 = (char *)v14 + v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v28, v26, v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v24;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
      *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
      *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 10) = *((_QWORD *)v14 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 12) = *((_QWORD *)v14 + 12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 13) = *((_QWORD *)v14 + 13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_QWORD *)v13 + 14) = *((_QWORD *)v14 + 14);
      v11(&v13[*(int *)(v15 + 60)], &v14[*(int *)(v15 + 60)], v9);
      return a1;
    }
    outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v13);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
  *((_QWORD *)v13 + 6) = *((_QWORD *)v14 + 6);
  *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
  *((_QWORD *)v13 + 8) = *((_QWORD *)v14 + 8);
  *((_QWORD *)v13 + 9) = *((_QWORD *)v14 + 9);
  *((_QWORD *)v13 + 10) = *((_QWORD *)v14 + 10);
  *((_QWORD *)v13 + 11) = *((_QWORD *)v14 + 11);
  *((_QWORD *)v13 + 12) = *((_QWORD *)v14 + 12);
  *((_QWORD *)v13 + 13) = *((_QWORD *)v14 + 13);
  *((_QWORD *)v13 + 14) = *((_QWORD *)v14 + 14);
  v19 = *(int *)(v15 + 60);
  v24 = &v13[v19];
  v20 = &v14[v19];
  v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v24, v20, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *initializeWithTake for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    v12[6] = v13[6];
    *((_QWORD *)v12 + 14) = *((_QWORD *)v13 + 14);
    v10((char *)v12 + *(int *)(v14 + 60), (char *)v13 + *(int *)(v14 + 60), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v9) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v9)
  {
    if (!v19)
    {
      v25 = *((_QWORD *)v15 + 1);
      *(_QWORD *)v14 = *(_QWORD *)v15;
      *((_QWORD *)v14 + 1) = v25;
      swift_bridgeObjectRelease();
      v26 = *((_QWORD *)v15 + 3);
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v14 + 3) = v26;
      swift_bridgeObjectRelease();
      v27 = *((_QWORD *)v15 + 5);
      *((_QWORD *)v14 + 4) = *((_QWORD *)v15 + 4);
      *((_QWORD *)v14 + 5) = v27;
      swift_bridgeObjectRelease();
      v28 = *((_QWORD *)v15 + 7);
      *((_QWORD *)v14 + 6) = *((_QWORD *)v15 + 6);
      *((_QWORD *)v14 + 7) = v28;
      swift_bridgeObjectRelease();
      *((_QWORD *)v14 + 8) = *((_QWORD *)v15 + 8);
      swift_bridgeObjectRelease();
      *((_QWORD *)v14 + 9) = *((_QWORD *)v15 + 9);
      swift_bridgeObjectRelease();
      *((_QWORD *)v14 + 10) = *((_QWORD *)v15 + 10);
      swift_bridgeObjectRelease();
      *((_QWORD *)v14 + 11) = *((_QWORD *)v15 + 11);
      swift_bridgeObjectRelease();
      *((_QWORD *)v14 + 12) = *((_QWORD *)v15 + 12);
      swift_bridgeObjectRelease();
      *((_QWORD *)v14 + 13) = *((_QWORD *)v15 + 13);
      swift_bridgeObjectRelease();
      *((_QWORD *)v14 + 14) = *((_QWORD *)v15 + 14);
      v12(&v14[*(int *)(v16 + 60)], &v15[*(int *)(v16 + 60)], v10);
      return a1;
    }
    outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentEmailData((uint64_t)v14);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v20 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v20;
  v21 = *((_OWORD *)v15 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
  *((_OWORD *)v14 + 3) = v21;
  v22 = *((_OWORD *)v15 + 5);
  *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
  *((_OWORD *)v14 + 5) = v22;
  *((_OWORD *)v14 + 6) = *((_OWORD *)v15 + 6);
  *((_QWORD *)v14 + 14) = *((_QWORD *)v15 + 14);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[*(int *)(v16 + 60)], &v15[*(int *)(v16 + 60)], v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283A8F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283A8FF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for DocumentUnderstanding_DocumentRepresentation_DocumentHTMLData()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentEmailData?);
  }
}

uint64_t DUDocumentUpdater.documentNamespace.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_documentNamespace);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUDocumentUpdater.documentNamespace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_documentNamespace);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUDocumentUpdater.documentNamespace.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

id DUDocumentUpdater.client.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_client);
}

id DUDocumentUpdater.poemUpdateHandler.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_poemUpdateHandler);
}

id DUDocumentUpdater.spotlightDocumentTaggingUpdateHandler.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightDocumentTaggingUpdateHandler));
}

id DUDocumentUpdater.spotlightUpdateFetcher.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightUpdateFetcher);
}

id DUDocumentUpdater.__allocating_init(client:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized DUDocumentUpdater.init(client:)(a1);

  return v4;
}

id DUDocumentUpdater.init(client:)(void *a1)
{
  id v2;

  v2 = specialized DUDocumentUpdater.init(client:)(a1);

  return v2;
}

uint64_t DUDocumentUpdater.handleFileUpdateNotification()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[9] = v0;
  v2 = type metadata accessor for Logger();
  v1[10] = v2;
  v1[11] = *(_QWORD *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  int *v9;
  _QWORD *v10;
  int *v12;

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "DocumentUnderstanding: Beginning handleiOSFileUpdateNotification", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v4 = v0[15];
  v5 = v0[10];
  v6 = v0[11];
  v7 = v0[9];

  v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[16] = v8;
  v8(v4, v5);
  v9 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v7
                                                     + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightUpdateFetcher))
               + 0x58);
  v12 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc();
  v0[17] = v10;
  *v10 = v0;
  v10[1] = DUDocumentUpdater.handleFileUpdateNotification();
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t))v12)(0, 1, 0, 1);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  unint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int *v17;
  id v18;
  id v19;
  _QWORD *v20;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  int *v33;
  _QWORD *v34;
  uint64_t (*v35)(id, id, uint64_t);
  uint64_t (*v36)(id, uint64_t);
  uint64_t v37;

  Logger.init()();
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(_QWORD *)(v0 + 144);
  if (v3)
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 64) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2282CC000, v1, v2, "Received %ld CSSearchableItems to process", v5, 0xCu);
    MEMORY[0x22E2B117C](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(void **)(v0 + 72);
  (*(void (**)(_QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80));
  v9 = v8;
  v10 = specialized Sequence.compactMap<A>(_:)(v7, v9);
  *(_QWORD *)(v0 + 160) = v10;

  swift_bridgeObjectRelease();
  v11 = v10[2];
  *(_QWORD *)(v0 + 168) = v11;
  if (v11)
  {
    v12 = *(_QWORD *)(v0 + 72);
    v13 = OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightDocumentTaggingUpdateHandler;
    *(_QWORD *)(v0 + 176) = OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightDocumentTaggingUpdateHandler;
    *(_QWORD *)(v0 + 184) = 0;
    v14 = *(_QWORD *)(v0 + 160);
    v15 = *(void **)(v14 + 32);
    *(_QWORD *)(v0 + 192) = v15;
    v16 = *(void **)(v14 + 40);
    *(_QWORD *)(v0 + 200) = v16;
    if (v15)
    {
      v17 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v12 + v13)) + 0x80);
      v35 = (uint64_t (*)(id, id, uint64_t))((char *)v17 + *v17);
      v18 = v15;
      v19 = v16;
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v20;
      *v20 = v0;
      v20[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v35(v18, v19, 1);
    }
    else
    {
      v22 = v16;
      Logger.init()();
      v23 = v22;
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      v26 = os_log_type_enabled(v24, v25);
      v27 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
      v28 = *(_QWORD *)(v0 + 104);
      v29 = *(_QWORD *)(v0 + 80);
      if (v26)
      {
        v30 = swift_slowAlloc();
        v31 = swift_slowAlloc();
        v37 = v31;
        *(_DWORD *)v30 = 136315138;
        v32 = CSSearchableItem.duLoggingDescriptor()();
        *(_QWORD *)(v30 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32._countAndFlagsBits, (unint64_t)v32._object, &v37);
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2282CC000, v24, v25, "Unable to construct a document update for %s", (uint8_t *)v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v31, -1, -1);
        MEMORY[0x22E2B117C](v30, -1, -1);
      }
      else
      {

      }
      v27(v28, v29);
      v33 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 176))) + 0x78);
      v36 = (uint64_t (*)(id, uint64_t))((char *)v33 + *v33);
      v34 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 224) = v34;
      *v34 = v0;
      v34[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v36(v23, 1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  int *v7;
  id v8;
  id v9;
  _QWORD *v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  int *v22;
  _QWORD *v23;
  uint64_t (*v24)(id, id, uint64_t);
  uint64_t (*v25)(id, uint64_t);
  uint64_t v26;

  v1 = *(void **)(v0 + 192);

  v2 = *(_QWORD *)(v0 + 184) + 1;
  if (v2 == *(_QWORD *)(v0 + 168))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 184) = v2;
    v4 = *(_QWORD *)(v0 + 160) + 16 * v2;
    v5 = *(void **)(v4 + 32);
    *(_QWORD *)(v0 + 192) = v5;
    v6 = *(void **)(v4 + 40);
    *(_QWORD *)(v0 + 200) = v6;
    if (v5)
    {
      v7 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 176))) + 0x80);
      v24 = (uint64_t (*)(id, id, uint64_t))((char *)v7 + *v7);
      v8 = v5;
      v9 = v6;
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v10;
      *v10 = v0;
      v10[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v24(v8, v9, 1);
    }
    else
    {
      v11 = v6;
      Logger.init()();
      v12 = v11;
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.error.getter();
      v15 = os_log_type_enabled(v13, v14);
      v16 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
      v17 = *(_QWORD *)(v0 + 104);
      v18 = *(_QWORD *)(v0 + 80);
      if (v15)
      {
        v19 = swift_slowAlloc();
        v20 = swift_slowAlloc();
        v26 = v20;
        *(_DWORD *)v19 = 136315138;
        v21 = CSSearchableItem.duLoggingDescriptor()();
        *(_QWORD *)(v19 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21._countAndFlagsBits, (unint64_t)v21._object, &v26);
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2282CC000, v13, v14, "Unable to construct a document update for %s", (uint8_t *)v19, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v20, -1, -1);
        MEMORY[0x22E2B117C](v19, -1, -1);
      }
      else
      {

      }
      v16(v17, v18);
      v22 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 176))) + 0x78);
      v25 = (uint64_t (*)(id, uint64_t))((char *)v22 + *v22);
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 224) = v23;
      *v23 = v0;
      v23[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v25(v12, 1);
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  int *v6;
  id v7;
  id v8;
  _QWORD *v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  int *v21;
  _QWORD *v22;
  uint64_t (*v23)(id, id, uint64_t);
  uint64_t (*v24)(id, uint64_t);
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 184) + 1;
  if (v1 == *(_QWORD *)(v0 + 168))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 184) = v1;
    v3 = *(_QWORD *)(v0 + 160) + 16 * v1;
    v4 = *(void **)(v3 + 32);
    *(_QWORD *)(v0 + 192) = v4;
    v5 = *(void **)(v3 + 40);
    *(_QWORD *)(v0 + 200) = v5;
    if (v4)
    {
      v6 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 176))) + 0x80);
      v23 = (uint64_t (*)(id, id, uint64_t))((char *)v6 + *v6);
      v7 = v4;
      v8 = v5;
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v9;
      *v9 = v0;
      v9[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v23(v7, v8, 1);
    }
    else
    {
      v10 = v5;
      Logger.init()();
      v11 = v10;
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.error.getter();
      v14 = os_log_type_enabled(v12, v13);
      v15 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
      v16 = *(_QWORD *)(v0 + 104);
      v17 = *(_QWORD *)(v0 + 80);
      if (v14)
      {
        v18 = swift_slowAlloc();
        v19 = swift_slowAlloc();
        v25 = v19;
        *(_DWORD *)v18 = 136315138;
        v20 = CSSearchableItem.duLoggingDescriptor()();
        *(_QWORD *)(v18 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20._countAndFlagsBits, (unint64_t)v20._object, &v25);
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2282CC000, v12, v13, "Unable to construct a document update for %s", (uint8_t *)v18, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v19, -1, -1);
        MEMORY[0x22E2B117C](v18, -1, -1);
      }
      else
      {

      }
      v15(v16, v17);
      v21 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 176))) + 0x78);
      v24 = (uint64_t (*)(id, uint64_t))((char *)v21 + *v21);
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 224) = v22;
      *v22 = v0;
      v22[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v24(v11, 1);
    }
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  void *v25;
  int *v26;
  id v27;
  id v28;
  _QWORD *v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  int *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t (*v46)(id, id, uint64_t);
  uint64_t (*v47)(id, uint64_t);
  uint64_t v48;

  v1 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 200);
  Logger.init()();
  v3 = v2;
  v4 = v1;
  v5 = v3;
  v6 = v1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 232);
    v10 = *(void **)(v0 + 200);
    v44 = *(_QWORD *)(v0 + 96);
    v45 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    v43 = *(_QWORD *)(v0 + 80);
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v48 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = CSSearchableItem.duLoggingDescriptor()();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13._countAndFlagsBits, (unint64_t)v13._object, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue();
    v14 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2282CC000, v7, v8, "Error while handling failed file searchable item %s. Error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v12, -1, -1);
    MEMORY[0x22E2B117C](v11, -1, -1);

    v45(v44, v43);
  }
  else
  {
    v16 = *(void **)(v0 + 232);
    v17 = *(void **)(v0 + 200);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 80);

    v18(v19, v20);
  }
  v21 = *(_QWORD *)(v0 + 184) + 1;
  if (v21 == *(_QWORD *)(v0 + 168))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 184) = v21;
    v23 = *(_QWORD *)(v0 + 160) + 16 * v21;
    v24 = *(void **)(v23 + 32);
    *(_QWORD *)(v0 + 192) = v24;
    v25 = *(void **)(v23 + 40);
    *(_QWORD *)(v0 + 200) = v25;
    if (v24)
    {
      v26 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 176))) + 0x80);
      v46 = (uint64_t (*)(id, id, uint64_t))((char *)v26 + *v26);
      v27 = v24;
      v28 = v25;
      v29 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v29;
      *v29 = v0;
      v29[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v46(v27, v28, 1);
    }
    else
    {
      v30 = v25;
      Logger.init()();
      v31 = v30;
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.error.getter();
      v34 = os_log_type_enabled(v32, v33);
      v35 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
      v36 = *(_QWORD *)(v0 + 104);
      v37 = *(_QWORD *)(v0 + 80);
      if (v34)
      {
        v38 = swift_slowAlloc();
        v39 = swift_slowAlloc();
        v48 = v39;
        *(_DWORD *)v38 = 136315138;
        v40 = CSSearchableItem.duLoggingDescriptor()();
        *(_QWORD *)(v38 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40._countAndFlagsBits, (unint64_t)v40._object, &v48);
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2282CC000, v32, v33, "Unable to construct a document update for %s", (uint8_t *)v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v39, -1, -1);
        MEMORY[0x22E2B117C](v38, -1, -1);
      }
      else
      {

      }
      v35(v36, v37);
      v41 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 176))) + 0x78);
      v47 = (uint64_t (*)(id, uint64_t))((char *)v41 + *v41);
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 224) = v42;
      *v42 = v0;
      v42[1] = DUDocumentUpdater.handleFileUpdateNotification();
      return v47(v31, 1);
    }
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 192);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DUDocumentUpdater.handleFileUpdateNotification()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = v1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t DUDocumentUpdater.handleHarvestingEventUpdate(serializedDocument:documentType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  v5 = type metadata accessor for Logger();
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUDocumentUpdater.handleHarvestingEventUpdate(serializedDocument:documentType:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  NSObject *v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  NSObject *v50;
  int *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  NSObject *v59;
  uint64_t v60;
  uint64_t (*v61);
  uint64_t v62[2];

  Logger.init()();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2282CC000, v1, v2, "(DUDocumentUpdater) Beginning handleHarvestingEventUpdate", v3, 2u);
    MEMORY[0x22E2B117C](v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);

  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v5, v6);
  v11 = specialized static HarvestingDocumentNormalization.normalizeDocument(documentData:documentType:)(v4, v9, v8);
  *(_QWORD *)(v0 + 112) = v11;
  *(_QWORD *)(v0 + 120) = v12;
  v13 = (void *)v11;
  v59 = v12;
  Logger.init()();
  v14 = v13;
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 64);
  v20 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (v17)
  {
    v56 = *(_QWORD *)(v0 + 96);
    v58 = v10;
    v21 = (uint8_t *)swift_slowAlloc();
    v54 = swift_slowAlloc();
    *(_DWORD *)v21 = 136315138;
    v62[0] = v54;
    v22 = (_QWORD *)(*(uint64_t (**)(void))((*v20 & (uint64_t)v14->isa) + 0x88))();
    v23 = (*(uint64_t (**)(void))((*v20 & *v22) + 0x90))();
    v25 = v24;

    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v20 = (_QWORD *)MEMORY[0x24BEE4EA0];
    swift_bridgeObjectRelease();

    v26 = v21;
    _os_log_impl(&dword_2282CC000, v15, v16, "(DUDocumentUpdater) Feature flag to index nonfile documents is off.  Skipping Spotlight updater for document %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v54, -1, -1);
    v10 = v58;
    MEMORY[0x22E2B117C](v26, -1, -1);

    v28 = v19;
    v27 = v56;
  }
  else
  {

    v27 = v18;
    v28 = v19;
  }
  v29 = ((uint64_t (*)(uint64_t, uint64_t))v10)(v27, v28);
  v30 = *(uint64_t (**)(void))((*v20 & (uint64_t)v14->isa) + 0x88);
  v31 = (_QWORD *)((uint64_t (*)(uint64_t))v30)(v29);
  v32 = (*(uint64_t (**)(void))((*v20 & *v31) + 0xA8))();
  v34 = v33;

  if (v34)
  {
    if (v32 == 0xD000000000000013 && v34 == 0x80000002284DF000)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      Logger.init()();
      v36 = v14;
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.info.getter();
      v39 = os_log_type_enabled(v37, v38);
      v40 = *(_QWORD *)(v0 + 88);
      v41 = *(_QWORD *)(v0 + 64);
      if (v39)
      {
        v60 = *(_QWORD *)(v0 + 88);
        v57 = *(_QWORD *)(v0 + 64);
        v42 = (uint8_t *)swift_slowAlloc();
        v55 = swift_slowAlloc();
        v62[0] = v55;
        *(_DWORD *)v42 = 136315138;
        v43 = (_QWORD *)v30();
        v44 = (*(uint64_t (**)(void))((*v20 & *v43) + 0x90))();
        v46 = v45;

        *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2282CC000, v37, v38, "Sending harvesting update with identifier %s to Poem Update Handler", v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v55, -1, -1);
        MEMORY[0x22E2B117C](v42, -1, -1);

        v10(v60, v57);
      }
      else
      {

        v10(v40, v41);
      }
      v52 = *(int **)((*v20 & **(_QWORD **)(*(_QWORD *)(v0 + 56)
                                          + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_poemUpdateHandler))
                    + 0x70);
      v61 = (uint64_t (*))((char *)v52 + *v52);
      v53 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 128) = v53;
      *v53 = v0;
      v53[1] = DUDocumentUpdater.handleHarvestingEventUpdate(serializedDocument:documentType:);
      return v61(v36);
    }
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_11;
  }
  Logger.init()();
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v49 = 0;
    _os_log_impl(&dword_2282CC000, v47, v48, "Poem update is only supported for iOS messages", v49, 2u);
    MEMORY[0x22E2B117C](v49, -1, -1);
    v50 = v59;
  }
  else
  {
    v50 = v14;
    v14 = v47;
    v47 = v59;
  }

  v10(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 112);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 112);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id DUDocumentUpdater.searchableItemFileToDocumentUpdate(searchableItem:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  id v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  uint8_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v2 = type metadata accessor for Logger();
  v59 = *(_QWORD *)(v2 - 8);
  v60 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v55 = (char *)&v53 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v54 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v58 = (char *)&v53 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v53 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v53 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v53 - v25;
  v56 = a1;
  v27 = objc_msgSend(a1, sel_attributeSet);
  v28 = objc_msgSend(v27, sel_contentURL);

  if (v28)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v29(v24, 0, 1, v10);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v29(v24, 1, 1, v10);
  }
  outlined init with take of URL?((uint64_t)v24, (uint64_t)v26);
  outlined init with copy of URL?((uint64_t)v26, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v21, 1, v10) == 1)
  {
    outlined destroy of URL?((uint64_t)v21);
    Logger.init()();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_2282CC000, v30, v31, "There is no path for the searchable item", v32, 2u);
      MEMORY[0x22E2B117C](v32, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v5, v60);
    goto LABEL_14;
  }
  v33 = (uint64_t)v58;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v58, v21, v10);
  v34 = specialized static FilesDocumentIngester.ingestDocumentFromFile(fileURL:)(v33);
  if (!v34)
  {
    v42 = v55;
    Logger.init()();
    v43 = v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v54, v33, v10);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v62 = v47;
      *(_DWORD *)v46 = 136315138;
      v57 = v46 + 4;
      v48 = URL.absoluteString.getter();
      v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v50 = *(void (**)(char *, uint64_t))(v11 + 8);
      v50(v43, v10);
      _os_log_impl(&dword_2282CC000, v44, v45, "FilesDocumentIngester failed for url: %s", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v47, -1, -1);
      MEMORY[0x22E2B117C](v46, -1, -1);

      (*(void (**)(char *, uint64_t))(v59 + 8))(v55, v60);
      v50(v58, v10);
    }
    else
    {

      v51 = *(void (**)(char *, uint64_t))(v11 + 8);
      v51(v43, v10);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v42, v60);
      v51((char *)v33, v10);
    }
LABEL_14:
    outlined destroy of URL?((uint64_t)v26);
    return 0;
  }
  v35 = (void *)v34;
  v36 = DUDocumentUpdater.documentIdentifierForCSSearchableItem(searchableItem:)(v56);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v18, v33, v10);
  v29(v18, 0, 1, v10);
  v37 = v33;
  v38 = v35;
  Date.init()();
  v39 = type metadata accessor for Date();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v9, 0, 1, v39);
  v40 = objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdate());
  v41 = specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(v36, 0, 0, v35, (uint64_t)v18, 1701603686, 0xE400000000000000, (uint64_t)v9, 0);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v37, v10);
  outlined destroy of URL?((uint64_t)v26);
  return v41;
}

uint64_t DUDocumentUpdater.retrieveFileUpdateBatch(batchSize:analysisVersion:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 97) = a4;
  *(_BYTE *)(v5 + 96) = a2;
  *(_QWORD *)(v5 + 24) = a1;
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v5 + 48) = v6;
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUDocumentUpdater.retrieveFileUpdateBatch(batchSize:analysisVersion:)()
{
  uint64_t v0;
  char v1;
  int *v2;
  char v3;
  _QWORD *v4;
  int *v6;

  v1 = *(_BYTE *)(v0 + 97);
  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(*(_QWORD *)(v0 + 40)
                                                     + OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightUpdateFetcher))
               + 0x58);
  v6 = (int *)((char *)v2 + *v2);
  v3 = *(_BYTE *)(v0 + 96);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = DUDocumentUpdater.retrieveFileUpdateBatch(batchSize:analysisVersion:);
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v6)(*(_QWORD *)(v0 + 24), v3 & 1, *(_QWORD *)(v0 + 32), v1 & 1);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  unint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;

  Logger.init()();
  swift_bridgeObjectRetain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(_QWORD *)(v0 + 80);
  if (v3)
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2282CC000, v1, v2, "Received %ld CSSearchableItems to process", v5, 0xCu);
    MEMORY[0x22E2B117C](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(void **)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  v9 = v8;
  v10 = specialized Sequence.compactMap<A>(_:)(v7, v9);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v10);
}

uint64_t DUDocumentUpdater.retrieveFileUpdateBatch(batchSize:analysisVersion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

_QWORD *DUDocumentUpdater.documentIdentifierForCSSearchableItem(searchableItem:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v35;
  void *v36;
  objc_super v37;
  unint64_t v38;
  unint64_t v39;

  v2 = v1;
  v4 = objc_msgSend(a1, sel_bundleID);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = (void *)0xE000000000000000;
  }
  v9 = objc_msgSend(a1, sel_domainIdentifier);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = (void *)0xE000000000000000;
  }
  v14 = objc_msgSend(a1, sel_uniqueIdentifier);
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = v15;
  v16 = v15;

  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  v38 = 0xD000000000000013;
  v39 = 0x80000002284DF0F0;
  v17._countAndFlagsBits = v6;
  v17._object = v8;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 24415;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v11;
  v19._object = v13;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 24415;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v35;
  v21._object = v16;
  String.append(_:)(v21);
  v22 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v23 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x78))();
  v25 = v24;
  v26 = (objc_class *)type metadata accessor for DUDocumentIdentifier();
  v27 = (char *)objc_allocWithZone(v26);
  v28 = &v27[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v29 = &v27[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v30 = &v27[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v31 = (uint64_t *)&v27[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
  *v31 = v23;
  v31[1] = v25;
  v32 = &v27[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
  *(_QWORD *)v32 = 0xD000000000000013;
  *((_QWORD *)v32 + 1) = 0x80000002284DF0F0;
  v37.receiver = v27;
  v37.super_class = v26;
  v33 = objc_msgSendSuper2(&v37, sel_init);
  (*(void (**)(uint64_t, void *))((*v22 & *v33) + 0xB0))(v6, v8);
  (*(void (**)(uint64_t, void *))((*v22 & *v33) + 0xC8))(v11, v13);
  (*(void (**)(uint64_t, void *))((*v22 & *v33) + 0xE0))(v35, v36);
  return v33;
}

id DUDocumentUpdater.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DUDocumentUpdater.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DUDocumentUpdater.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentUpdater();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t (*v15)(id);
  uint64_t v16;
  unint64_t v17;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v17 = v3 & 0xC000000000000001;
    v15 = *(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & *a2) + 0xA8);
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v6 = 4;
    v16 = v3;
    while (1)
    {
      v7 = v17 ? (id)MEMORY[0x22E2AFF34](v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      v8 = v7;
      v3 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v9 = v15(v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v11 = v5[2];
      v10 = v5[3];
      if (v11 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
      v5[2] = v11 + 1;
      v12 = &v5[2 * v11];
      v12[4] = v9;
      v12[5] = v8;
      ++v6;
      v13 = v3 == v4;
      v3 = v16;
      if (v13)
        goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_18:
  swift_bridgeObjectRelease();
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(id);
  _QWORD *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_17;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v19 = v3 & 0xC000000000000001;
    v5 = *(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & *a2) + 0xA8);
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v7 = 4;
    v17 = v4;
    v18 = v3;
    while (1)
    {
      v8 = v19 ? (id)MEMORY[0x22E2AFF34](v7 - 4, v3) : *(id *)(v3 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = v5(v8);
      if (v11)
      {
        v12 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v14 = v6[2];
        v13 = v6[3];
        if (v14 >= v13 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v6);
        v6[2] = v14 + 1;
        v15 = &v6[2 * v14];
        v15[4] = v12;
        v15[5] = v9;
        v4 = v17;
        v3 = v18;
      }
      else
      {

      }
      ++v7;
      if (v10 == v4)
        goto LABEL_19;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_19:
  swift_bridgeObjectRelease();
  return v6;
}

id specialized DUDocumentUpdater.init(client:)(void *a1)
{
  char *v1;
  char *v2;
  char *v4;
  char *v5;
  id v6;
  id v7;
  char *v8;
  objc_class *updated;
  char *v10;
  id v11;
  id v12;
  objc_class *v13;
  char *v14;
  id v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  objc_super v21;
  objc_super v22;
  objc_super v23;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_documentNamespace];
  *(_QWORD *)v4 = 0xD000000000000028;
  *((_QWORD *)v4 + 1) = 0x80000002284DCDC0;
  if (a1)
  {
    v5 = v1;
    v6 = a1;
  }
  else
  {
    v7 = objc_allocWithZone((Class)type metadata accessor for DUClient());
    v8 = v1;
    v6 = DUClient.init(identifier:)(0xD000000000000010, 0x80000002284DF110);
  }
  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_client] = v6;
  updated = (objc_class *)type metadata accessor for PoemUpdateHandler();
  v10 = (char *)objc_allocWithZone(updated);
  *(_QWORD *)&v10[OBJC_IVAR____TtC21DocumentUnderstanding17PoemUpdateHandler_client] = v6;
  v23.receiver = v10;
  v23.super_class = updated;
  v11 = a1;
  v12 = v6;
  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_poemUpdateHandler] = objc_msgSendSuper2(&v23, sel_init);
  v13 = (objc_class *)type metadata accessor for SpotlightDocumentTaggingUpdateHandler();
  v14 = (char *)objc_allocWithZone(v13);
  *(_QWORD *)&v14[OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_client] = v12;
  v15 = objc_allocWithZone((Class)type metadata accessor for SpotlightOutputSink());
  v16 = v12;
  v17 = v14;
  v18 = objc_msgSend(v15, sel_init);
  *(_QWORD *)&v17[OBJC_IVAR____TtC21DocumentUnderstanding37SpotlightDocumentTaggingUpdateHandler_spotlightOutputSink] = v18;

  v22.receiver = v17;
  v22.super_class = v13;
  v19 = objc_msgSendSuper2(&v22, sel_init);

  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightDocumentTaggingUpdateHandler] = v19;
  *(_QWORD *)&v2[OBJC_IVAR____TtC21DocumentUnderstanding17DUDocumentUpdater_spotlightUpdateFetcher] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CoreSpotlightUpdateFetcher()), sel_init);

  v21.receiver = v2;
  v21.super_class = (Class)type metadata accessor for DUDocumentUpdater();
  return objc_msgSendSuper2(&v21, sel_init);
}

uint64_t type metadata accessor for DUDocumentUpdater()
{
  return objc_opt_self();
}

uint64_t sub_2283ABEEC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2283ABF2C(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t DUFoundInEventEncodingSmolBERToImplementation.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t static DUFoundInEventEncodingSmolBERToImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventEncodingSmolBERToSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventEncodingSmolBERToSpecification;
  *a1 = result;
  return result;
}

unint64_t static DUFoundInEventEncodingSmolBERToImplementation.implementationID.getter()
{
  return 0xD000000000000026;
}

void *static DUFoundInEventEncodingSmolBERToImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUFoundInEventEncodingSmolBERToImplementation.implementationAttributes.getter;
}

uint64_t DUFoundInEventEncodingSmolBERToImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v5;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t, uint64_t);

  v3 = *v2;
  *(_QWORD *)(v3 + 240) = a1;
  *(_QWORD *)(v3 + 248) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v5 = *(void **)(v3 + 208);

  type metadata accessor for DUWordPieceTokenizerSpecification();
  *(_QWORD *)(v3 + 256) = swift_allocObject();
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                                + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 264) = v6;
  *v6 = v3;
  v6[1] = DUFoundInEventEncodingSmolBERToImplementation.runTypedOnRequest(request:);
  return v7(v3 + 128, *(_QWORD *)(v3 + 176));
}

uint64_t DUFoundInEventEncodingSmolBERToImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  type metadata accessor for DUTrialAssetLoader();
  swift_allocObject();
  v1 = DUTrialAssetLoader.init()();
  *(_QWORD *)(v0 + 184) = v1;
  *(_BYTE *)(v0 + 320) = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)v1 + 136))(0xD00000000000002DLL, 0x80000002284DB740, 0xD000000000000011, 0x80000002284DB770);
  type metadata accessor for DUBackboneEncodingSmolBERToSpecification();
  *(_QWORD *)(v0 + 192) = swift_allocObject();
  v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v2;
  *v2 = v0;
  v2[1] = DUFoundInEventEncodingSmolBERToImplementation.runTypedOnRequest(request:);
  return v4(*(_QWORD *)(v0 + 176));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 208);
  if (v1)
  {
    v2 = (*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, _QWORD))(**(_QWORD **)(v0 + 184) + 152))(0xD00000000000001FLL, 0x80000002284DF1A0, 0xD000000000000022, 0x80000002284DF1C0, *(_BYTE *)(v0 + 320) & 1);
    *(_QWORD *)(v0 + 216) = v2;
    if (v2)
    {
      v3 = objc_allocWithZone(MEMORY[0x24BDC0018]);
      v4 = v1;
      *(_QWORD *)(v0 + 224) = objc_msgSend(v3, sel_init);
      v5 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 232) = v5;
      *v5 = v0;
      v5[1] = DUFoundInEventEncodingSmolBERToImplementation.runTypedOnRequest(request:);
      return MLModel.prediction(from:options:)();
    }
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v7 = swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000037;
    *(_QWORD *)(v9 + 8) = 0x80000002284DF1F0;
    *(_BYTE *)(v9 + 16) = 0;

  }
  else
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v7 = swift_allocError();
    *(_QWORD *)v8 = 0xD00000000000003FLL;
    *(_QWORD *)(v8 + 8) = 0x80000002284DF160;
    *(_BYTE *)(v8 + 16) = 0;
  }
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, 1);
}

{
  _QWORD *v0;
  _OWORD *v1;
  __int128 v2;

  v1 = (_OWORD *)*v0;
  swift_task_dealloc();
  v2 = v1[9];
  v1[17] = v1[8];
  v1[18] = v2;
  v1[19] = v1[10];
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void *v16;

  outlined init with take of TokenizerOutput?(v0 + 128, v0 + 80);
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(void **)(v0 + 248);
    v2 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 24) = v2;
    v3 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 48) = v3;
    *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 304);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v4 = specialized DUFoundInEventEncodingSmolBERToImplementation.buildFoundInEventClassificationHeadFeatures(encodingOutput:)(v0 + 16);
    v5 = *(_QWORD *)(v0 + 272);
    if (!v1)
    {
      v8 = v4;
      v15 = *(void **)(v0 + 216);
      v16 = *(void **)(v0 + 208);
      swift_unknownObjectRelease_n();
      swift_release();
      swift_bridgeObjectRelease();

      outlined consume of TokenizerOutput?(v5);
      v13 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v13);
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of TokenizerOutput?(v5);
    swift_unknownObjectRelease();
    v7 = *(void **)(v0 + 208);
    v6 = *(void **)(v0 + 216);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v8 = swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000038;
    *(_QWORD *)(v9 + 8) = 0x80000002284DF230;
    *(_BYTE *)(v9 + 16) = 0;

  }
  else
  {
    v11 = *(void **)(v0 + 208);
    v10 = *(void **)(v0 + 216);
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v8 = swift_allocError();
    *(_QWORD *)v12 = 0xD00000000000001ALL;
    *(_QWORD *)(v12 + 8) = 0x80000002284DF270;
    *(_BYTE *)(v12 + 16) = 0;
    swift_unknownObjectRelease();

  }
  swift_release();
  v13 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v13);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 208);

  v2 = *(void **)(v0 + 248);
  v4 = *(void **)(v0 + 208);
  v3 = *(void **)(v0 + 216);
  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v5 = swift_allocError();
  *(_QWORD *)v6 = 0xD000000000000038;
  *(_QWORD *)(v6 + 8) = 0x80000002284DF230;
  *(_BYTE *)(v6 + 16) = 0;

  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, 1);
}

uint64_t DUFoundInEventEncodingSmolBERToImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventEncodingSmolBERToImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUFoundInEventEncodingSmolBERToImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUFoundInEventEncodingSmolBERToImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventEncodingSmolBERToSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventEncodingSmolBERToSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUFoundInEventEncodingSmolBERToImplementation()
{
  return 0xD000000000000026;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventEncodingSmolBERToImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventEncodingSmolBERToImplementation;
}

uint64_t specialized DUFoundInEventEncodingSmolBERToImplementation.buildFoundInEventClassificationHeadFeatures(encodingOutput:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t inited;
  unint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLShapedArray<Float>);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v37 - v8;
  v10 = *(void **)a1;
  v11 = (void *)MEMORY[0x22E2AF8EC](0xD00000000000001DLL, 0x80000002284DF2E0);
  v12 = objc_msgSend(v10, sel_featureValueForName_, v11);

  if (v12)
  {
    v42 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    lazy protocol witness table accessor for type [Float] and conformance [A]();
    MLShapedArray.init<A>(scalars:shape:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2284C0D00;
    *(_QWORD *)(inited + 32) = 0xD00000000000001DLL;
    *(_QWORD *)(inited + 40) = 0x80000002284DF2E0;
    v14 = type metadata accessor for MLFeatureValue();
    *(_QWORD *)(inited + 48) = v12;
    *(_QWORD *)(inited + 72) = v14;
    strcpy((char *)(inited + 80), "attention_mask");
    *(_BYTE *)(inited + 95) = -18;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    v15 = v12;
    v16 = MLFeatureValue.init<A>(shapedArray:)();
    *(_QWORD *)(inited + 120) = v14;
    *(_QWORD *)(inited + 96) = v16;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v17 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
    v18 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
    if (v1)
    {
      v38 = v9;
      v39 = v4;
      if (one-time initialization token for standard != -1)
        swift_once();
      v40 = v15;
      v41 = v3;
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.standard);
      v20 = v1;
      v21 = v1;
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled((os_log_t)v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v25 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v24 = 138412290;
        v26 = v1;
        v27 = _swift_stdlib_bridgeErrorToNSError();
        v42 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v25 = v27;

        _os_log_impl(&dword_2282CC000, (os_log_t)v22, v23, "Error building FoundInEventSmolBERToClassificationModel model inputs: %@", v24, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v25, -1, -1);
        MEMORY[0x22E2B117C](v24, -1, -1);
      }
      else
      {

      }
      v34 = v38;
      v33 = v39;

      lazy protocol witness table accessor for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError();
      swift_allocError();
      *v35 = 1;
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v41);
    }
    else
    {
      v22 = (uint64_t)v18;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);

    }
  }
  else
  {
    if (one-time initialization token for standard != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.standard);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    v22 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_2282CC000, v29, (os_log_type_t)v22, "Error extracting encoding output from FoundInEventSmolBERToEncodingModel", v31, 2u);
      MEMORY[0x22E2B117C](v31, -1, -1);
    }

    lazy protocol witness table accessor for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError();
    swift_allocError();
    *v32 = 0;
    swift_willThrow();
  }
  return v22;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUFoundInEventEncodingSmolBERToImplementation()
{
  return &protocol witness table for DUFoundInEventEncodingSmolBERToSpecification;
}

uint64_t type metadata accessor for DUFoundInEventEncodingSmolBERToImplementation()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError;
  if (!lazy protocol witness table cache variable for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for BuildSmolBERToHeadInputError, &type metadata for BuildSmolBERToHeadInputError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError;
  if (!lazy protocol witness table cache variable for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for BuildSmolBERToHeadInputError, &type metadata for BuildSmolBERToHeadInputError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BuildSmolBERToHeadInputError and conformance BuildSmolBERToHeadInputError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Float] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Float] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Float] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance [A]);
  }
  return result;
}

unint64_t type metadata accessor for MLFeatureValue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for MLFeatureValue;
  if (!lazy cache variable for type metadata for MLFeatureValue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLFeatureValue);
  }
  return result;
}

void *DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults.defaultNumberOfDocumentsToQuery.unsafeMutableAddressor()
{
  return &static DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults.defaultNumberOfDocumentsToQuery;
}

uint64_t static DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults.defaultNumberOfDocumentsToQuery.getter()
{
  return 1024;
}

void *DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults.analysisVersion.unsafeMutableAddressor()
{
  return &static DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults.analysisVersion;
}

uint64_t static DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults.analysisVersion.getter()
{
  return 4294967294;
}

id DocumentGradingDocumentFetcher.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DocumentGradingDocumentFetcher.init()()
{
  void *v0;
  char *v1;
  objc_super v3;

  objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdater());
  v1 = v0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding30DocumentGradingDocumentFetcher_documentUpdater] = specialized DUDocumentUpdater.init(client:)(0);

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DocumentGradingDocumentFetcher();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t DocumentGradingDocumentFetcher.retrieveDocumentsForGrading(numberOfDocuments:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[4] = swift_task_alloc();
  v3 = type metadata accessor for URL();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocument, URL, CSSearchableItem)?);
  v2[8] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocument, URL, CSSearchableItem));
  v2[9] = v4;
  v2[10] = *(_QWORD *)(v4 - 8);
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 112) = a1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t DocumentGradingDocumentFetcher.retrieveDocumentsForGrading(numberOfDocuments:)()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  if (v0[2])
    v1 = v0[2];
  else
    v1 = 1024;
  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0[3]
                                                     + OBJC_IVAR____TtC21DocumentUnderstanding30DocumentGradingDocumentFetcher_documentUpdater))
               + 0xB0);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  v0[13] = v3;
  *v3 = v0;
  v3[1] = DocumentGradingDocumentFetcher.retrieveDocumentsForGrading(numberOfDocuments:);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))v5)(v1, 0, 4294967294, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
    v30 = *(_QWORD *)(v0 + 72);
    v32 = *(_QWORD *)(v0 + 48);
    v3 = (id *)(swift_bridgeObjectRetain() + 40);
    v4 = MEMORY[0x24BEE4AF8];
    v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v33 = v2;
    do
    {
      v35 = v1;
      v6 = *(v3 - 1);
      v7 = *(uint64_t (**)(void))((*v5 & *v6) + 0xB8);
      v8 = *v3;
      v9 = v6;
      v10 = (_QWORD *)v7();
      if (v10)
      {
        v11 = v10;
        v34 = v4;
        v13 = *(_QWORD *)(v0 + 32);
        v12 = *(_QWORD *)(v0 + 40);
        (*(void (**)(void))((*v5 & *v10) + 0xA8))();
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v13, 1, v12);
        v16 = *(_QWORD **)(v0 + 64);
        v15 = *(_QWORD *)(v0 + 72);
        if (v14 == 1)
        {
          v17 = *(_QWORD *)(v0 + 32);

          outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v17, &demangling cache variable for type metadata for URL?);
          v2 = v33;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v16, 1, 1, v15);
        }
        else
        {
          v19 = *(_QWORD *)(v0 + 56);
          v20 = *(_QWORD *)(v0 + 40);
          v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
          v21(v19, *(_QWORD *)(v0 + 32), v20);
          v22 = (char *)v16 + *(int *)(v30 + 48);
          v31 = *(int *)(v30 + 64);
          *v16 = v11;
          v21((uint64_t)v22, v19, v20);
          *(_QWORD *)((char *)v16 + v31) = v8;
          v2 = v33;
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v16, 0, 1, v15);
        }
        v18 = v9;
        v9 = v8;
        v4 = v34;
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v2 + 56))(*(_QWORD *)(v0 + 64), 1, 1, *(_QWORD *)(v0 + 72));

        v18 = v8;
      }

      v23 = *(_QWORD *)(v0 + 64);
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v2 + 48))(v23, 1, *(_QWORD *)(v0 + 72)) == 1)
      {
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v23, &demangling cache variable for type metadata for (DUDocument, URL, CSSearchableItem)?);
      }
      else
      {
        v25 = *(_QWORD *)(v0 + 88);
        v24 = *(_QWORD *)(v0 + 96);
        outlined init with take of (DUDocument, URL, CSSearchableItem)(v23, v24);
        outlined init with take of (DUDocument, URL, CSSearchableItem)(v24, v25);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, v4);
        v27 = *(_QWORD *)(v4 + 16);
        v26 = *(_QWORD *)(v4 + 24);
        if (v27 >= v26 >> 1)
          v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v4);
        v28 = *(_QWORD *)(v0 + 88);
        *(_QWORD *)(v4 + 16) = v27 + 1;
        outlined init with take of (DUDocument, URL, CSSearchableItem)(v28, v4+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v27);
      }
      v3 += 2;
      v1 = v35 - 1;
      v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
    }
    while (v35 != 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v4);
}

id DocumentGradingDocumentFetcher.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DocumentGradingDocumentFetcher();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DocumentGradingDocumentFetcher()
{
  return objc_opt_self();
}

uint64_t outlined init with take of (DUDocument, URL, CSSearchableItem)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DUDocument, URL, CSSearchableItem));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults()
{
  return &type metadata for DocumentGradingDocumentFetcher.DocumentGradingDocumentFetcherDefaults;
}

uint64_t *RetrievalDatabaseMigrations.migrations.unsafeMutableAddressor()
{
  if (one-time initialization token for migrations != -1)
    swift_once();
  return &static RetrievalDatabaseMigrations.migrations;
}

uint64_t static RetrievalDatabaseMigrations.migrations.getter()
{
  if (one-time initialization token for migrations != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for RetrievalDatabaseMigrations()
{
  return &type metadata for RetrievalDatabaseMigrations;
}

uint64_t one-time initialization function for byteEncoder()
{
  void *v0;
  uint64_t result;

  v0 = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for byteEncoder);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt8, String));
  result = swift_arrayDestroy();
  byteEncoder._rawValue = v0;
  return result;
}

Swift::OpaquePointer *byteEncoder.unsafeMutableAddressor()
{
  if (one-time initialization token for byteEncoder != -1)
    swift_once();
  return &byteEncoder;
}

void *one-time initialization function for byteDecoder()
{
  void *result;

  if (one-time initialization token for byteEncoder != -1)
    swift_once();
  result = (void *)specialized static Utils.invert<A, B>(_:)((uint64_t)byteEncoder._rawValue);
  byteDecoder._rawValue = result;
  return result;
}

uint64_t specialized static Utils.invert<A, B>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  int64_t v31;
  uint64_t v32;

  v2 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v32 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v6 << 6);
    }
    else
    {
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_37;
      if (v9 >= v31)
      {
LABEL_34:
        outlined consume of [String : String].Iterator._Variant();
        return (uint64_t)v2;
      }
      v10 = *(_QWORD *)(v32 + 8 * v9);
      v11 = v6 + 1;
      if (!v10)
      {
        v11 = v6 + 2;
        if (v6 + 2 >= v31)
          goto LABEL_34;
        v10 = *(_QWORD *)(v32 + 8 * v11);
        if (!v10)
        {
          v11 = v6 + 3;
          if (v6 + 3 >= v31)
            goto LABEL_34;
          v10 = *(_QWORD *)(v32 + 8 * v11);
          if (!v10)
          {
            v12 = v6 + 4;
            if (v6 + 4 >= v31)
              goto LABEL_34;
            v10 = *(_QWORD *)(v32 + 8 * v12);
            if (!v10)
            {
              while (1)
              {
                v11 = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_38;
                if (v11 >= v31)
                  goto LABEL_34;
                v10 = *(_QWORD *)(v32 + 8 * v11);
                ++v12;
                if (v10)
                  goto LABEL_22;
              }
            }
            v11 = v6 + 4;
          }
        }
      }
LABEL_22:
      v5 = (v10 - 1) & v10;
      v8 = __clz(__rbit64(v10)) + (v11 << 6);
      v6 = v11;
    }
    v13 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v8);
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v8);
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
    v20 = v2[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v2[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v18 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v23 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v15);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_39;
      v19 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_5:
        *(_BYTE *)(v2[7] + v19) = v13;
        goto LABEL_6;
      }
    }
    v2[(v19 >> 6) + 8] |= 1 << v19;
    v26 = (uint64_t *)(v2[6] + 16 * v19);
    *v26 = v16;
    v26[1] = v15;
    *(_BYTE *)(v2[7] + v19) = v13;
    v27 = v2[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_36;
    v2[2] = v29;
    swift_bridgeObjectRetain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::OpaquePointer *byteDecoder.unsafeMutableAddressor()
{
  if (one-time initialization token for byteDecoder != -1)
    swift_once();
  return &byteDecoder;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_SaySo27MLDictionaryFeatureProviderCGs5NeverOTg5068_sSa21DocumentUnderstandingE7chunked4intoSaySayxGGSi_tFADSiXEfU_So27fgH5C_TG5AKSiTf1cn_n(int64_t a1, int64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t result;
  BOOL v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v29;

  v6 = v5;
  v9 = a1;
  v10 = 0;
  v11 = a1;
  while (1)
  {
    v12 = v11 <= a2;
    if (a3 > 0)
      v12 = v11 >= a2;
    if (v12)
      break;
    v13 = __OFADD__(v11, a3);
    v11 += a3;
    if (v13)
      v11 = (v11 >> 63) ^ 0x8000000000000000;
    v13 = __OFADD__(v10++, 1);
    if (v13)
    {
      __break(1u);
      break;
    }
  }
  v29 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
  if (v10)
  {
    while (1)
    {
      v15 = v9 <= a2;
      if (a3 > 0)
        v15 = v9 >= a2;
      if (v15)
        break;
      if (__OFADD__(v9, a3))
        v16 = ((v9 + a3) >> 63) ^ 0x8000000000000000;
      else
        v16 = v9 + a3;
      result = specialized closure #1 in Array.chunked(into:)(v9, a4, a5);
      if (v6)
        goto LABEL_37;
      v17 = result;
      v6 = 0;
      v19 = *(_QWORD *)(v29 + 16);
      v18 = *(_QWORD *)(v29 + 24);
      if (v19 >= v18 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      *(_QWORD *)(v29 + 16) = v19 + 1;
      *(_QWORD *)(v29 + 8 * v19 + 32) = v17;
      v9 = v16;
      if (!--v10)
        goto LABEL_23;
    }
    __break(1u);
  }
  else
  {
    v16 = v9;
LABEL_23:
    v20 = v16 <= a2;
    if (a3 > 0)
      v20 = v16 >= a2;
    if (v20)
    {
LABEL_26:
      swift_bridgeObjectRelease();
    }
    else
    {
      while (1)
      {
        v21 = __OFADD__(v16, a3) ? ((v16 + a3) >> 63) ^ 0x8000000000000000 : v16 + a3;
        v22 = specialized closure #1 in Array.chunked(into:)(v16, a4, a5);
        if (v6)
          break;
        v23 = v22;
        v6 = 0;
        v25 = *(_QWORD *)(v29 + 16);
        v24 = *(_QWORD *)(v29 + 24);
        if (v25 >= v24 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        *(_QWORD *)(v29 + 16) = v25 + 1;
        *(_QWORD *)(v29 + 8 * v25 + 32) = v23;
        v26 = v21 <= a2;
        if (a3 > 0)
          v26 = v21 >= a2;
        v16 = v21;
        if (v26)
          goto LABEL_26;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      swift_release();
    }
    return v29;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  Swift::Int v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = type metadata accessor for Optional();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  v57 = MEMORY[0x22E2AFFB8](v53);
  v53 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t PoemAggregationModelHandler.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  PoemAggregationModelHandler.init()();
  return v0;
}

uint64_t Array.chunked(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[10];

  result = MEMORY[0x22E2AFB74](a2, a3);
  if (a1)
  {
    v11[7] = 0;
    v11[8] = result;
    v11[9] = a1;
    MEMORY[0x24BDAC7A8](result);
    v11[2] = a3;
    v11[3] = a2;
    v11[4] = a1;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StrideTo<Int>);
    v8 = type metadata accessor for Array();
    v9 = lazy protocol witness table accessor for type StrideTo<Int> and conformance StrideTo<A>();
    return _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Array.chunked(into:), (uint64_t)v11, v7, v8, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in Array.chunked(into:)(int64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a1 + a3;
  if (__OFADD__(a1, a3))
  {
    __break(1u);
LABEL_32:
    if (v4 < 0)
      v7 = v4;
    else
      v7 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 >= v6)
      v8 = v6;
    if (v8 < v3)
      goto LABEL_43;
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 >= v3)
      goto LABEL_8;
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v4 = a2;
  v3 = a1;
  v5 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_32;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7 >= v6)
    v8 = a1 + a3;
  else
    v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v8 < a1)
    goto LABEL_43;
  if (v7 < a1)
    goto LABEL_39;
LABEL_8:
  if (v3 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v7 < v8)
    goto LABEL_41;
  if (v8 < 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if ((v4 & 0xC000000000000001) != 0 && v8 != v3)
  {
    if (v8 > (unint64_t)v3)
    {
      type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MLDictionaryFeatureProvider);
      v9 = v3;
      do
      {
        v10 = v9 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v9);
        v9 = v10;
      }
      while (v8 != v10);
      goto LABEL_19;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_19:
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.subscript.getter();
    v5 = v11;
    v3 = v12;
    v8 = v13;
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      goto LABEL_24;
LABEL_23:
    v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v5, v3, v8);
    goto LABEL_30;
  }
  v7 = v4 & 0xFFFFFFFFFFFFFF8;
  v5 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = (2 * v8) | 1;
  swift_bridgeObjectRetain();
  if ((v8 & 1) == 0)
    goto LABEL_23;
LABEL_24:
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_unknownObjectRelease();
    v15 = MEMORY[0x24BEE4AF8];
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_release();
  if (__OFSUB__((unint64_t)v8 >> 1, v3))
    goto LABEL_45;
  if (v16 != ((unint64_t)v8 >> 1) - v3)
  {
LABEL_46:
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_unknownObjectRelease();
    v14 = MEMORY[0x24BEE4AF8];
  }
LABEL_30:
  swift_unknownObjectRelease();
  return v14;
}

uint64_t *closure #1 in Array.chunked(into:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  v5 = *result;
  v6 = *result + a3;
  if (__OFADD__(*result, a3))
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t *)MEMORY[0x22E2AFB74](a2, a4);
    if ((uint64_t)result >= v6)
      v8 = (_QWORD *)v6;
    else
      v8 = result;
    if ((uint64_t)v8 >= v5)
    {
      Array.subscript.getter();
      v9 = type metadata accessor for ArraySlice();
      MEMORY[0x22E2B10E0](MEMORY[0x24BEE2180], v9);
      result = (uint64_t *)Array.init<A>(_:)();
      *a5 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

double PoemModelingParameters.modelPositiveClassThreshold.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void PoemModelingParameters.modelPositiveClassThreshold.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*PoemModelingParameters.modelPositiveClassThreshold.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemModelingParameters.contextWindowSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t PoemModelingParameters.contextWindowSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*PoemModelingParameters.contextWindowSize.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemModelingParameters.maxFaces.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t PoemModelingParameters.maxFaces.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*PoemModelingParameters.maxFaces.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemModelingParameters.batchSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t PoemModelingParameters.batchSize.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*PoemModelingParameters.batchSize.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

double PoemModelingParameters.madConfidenceThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void PoemModelingParameters.madConfidenceThreshold.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 32) = a1;
}

uint64_t (*PoemModelingParameters.madConfidenceThreshold.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

double PoemModelingParameters.lookBackInYears.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

void PoemModelingParameters.lookBackInYears.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

uint64_t (*PoemModelingParameters.lookBackInYears.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t PoemModelingParameters.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2283AE5D4
                                                                     + 4 * asc_2284C60B0[a1]))(0xD00000000000001BLL, 0x80000002284DF470);
}

unint64_t sub_2283AE5D4()
{
  return 0xD000000000000011;
}

uint64_t sub_2283AE5F0()
{
  return 0x736563614678616DLL;
}

uint64_t sub_2283AE608()
{
  return 0x7A69536863746162;
}

uint64_t sub_2283AE624()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_2283AE63C()
{
  return 0x6B6361426B6F6F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PoemModelingParameters.CodingKeys()
{
  unsigned __int8 *v0;

  return PoemModelingParameters.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PoemModelingParameters.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PoemModelingParameters.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PoemModelingParameters.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PoemModelingParameters.CodingKeys()
{
  lazy protocol witness table accessor for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PoemModelingParameters.CodingKeys()
{
  lazy protocol witness table accessor for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PoemModelingParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PoemModelingParameters.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

void __swiftcall PoemModelingParameters.init()(DocumentUnderstanding::PoemModelingParameters *__return_ptr retstr)
{
  retstr->modelPositiveClassThreshold = 0.91;
  *(_OWORD *)&retstr->contextWindowSize = xmmword_2284C62C0;
  retstr->batchSize = 32;
  *(_OWORD *)&retstr->madConfidenceThreshold = xmmword_2284C62D0;
}

double PoemModelingParameters.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  specialized PoemModelingParameters.init(from:)(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

double default argument 0 of PoemModelingParameters.init(modelPositiveClassThreshold:contextWindowSize:maxFaces:batchSize:madConfidenceThreshold:lookBackInYears:)()
{
  return 0.91;
}

uint64_t default argument 1 of PoemModelingParameters.init(modelPositiveClassThreshold:contextWindowSize:maxFaces:batchSize:madConfidenceThreshold:lookBackInYears:)()
{
  return 5;
}

uint64_t default argument 2 of PoemModelingParameters.init(modelPositiveClassThreshold:contextWindowSize:maxFaces:batchSize:madConfidenceThreshold:lookBackInYears:)()
{
  return 11;
}

uint64_t default argument 3 of PoemModelingParameters.init(modelPositiveClassThreshold:contextWindowSize:maxFaces:batchSize:madConfidenceThreshold:lookBackInYears:)()
{
  return 32;
}

double default argument 4 of PoemModelingParameters.init(modelPositiveClassThreshold:contextWindowSize:maxFaces:batchSize:madConfidenceThreshold:lookBackInYears:)()
{
  return 0.45;
}

double default argument 5 of PoemModelingParameters.init(modelPositiveClassThreshold:contextWindowSize:maxFaces:batchSize:madConfidenceThreshold:lookBackInYears:)()
{
  return 1.0;
}

void __swiftcall PoemModelingParameters.init(modelPositiveClassThreshold:contextWindowSize:maxFaces:batchSize:madConfidenceThreshold:lookBackInYears:)(DocumentUnderstanding::PoemModelingParameters *__return_ptr retstr, Swift::Double modelPositiveClassThreshold, Swift::Int contextWindowSize, Swift::Int maxFaces, Swift::Int batchSize, Swift::Double madConfidenceThreshold, Swift::Double lookBackInYears)
{
  retstr->modelPositiveClassThreshold = modelPositiveClassThreshold;
  retstr->contextWindowSize = contextWindowSize;
  retstr->maxFaces = maxFaces;
  retstr->batchSize = batchSize;
  retstr->madConfidenceThreshold = madConfidenceThreshold;
  retstr->lookBackInYears = lookBackInYears;
}

double protocol witness for Decodable.init(from:) in conformance PoemModelingParameters@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  specialized PoemModelingParameters.init(from:)(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PoemModelingParameters(_QWORD *a1)
{
  return PoemModelingParameters.encode(to:)(a1);
}

void *PoemAggregationModelHandler.model.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void PoemAggregationModelHandler.model.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t (*PoemAggregationModelHandler.model.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

void *PoemAggregationModelHandler.poemStatsDatabase.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

void PoemAggregationModelHandler.poemStatsDatabase.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

uint64_t (*PoemAggregationModelHandler.poemStatsDatabase.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

id PoemAggregationModelHandler.analyticsUtilities.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id result;

  swift_beginAccess();
  v3 = *(void **)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(_QWORD *)(v1 + 80);
  v10 = *(_BYTE *)(v1 + 88);
  result = outlined copy of CKContextClient??(v3);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return result;
}

void PoemAggregationModelHandler.analyticsUtilities.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 32);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + 32, &demangling cache variable for type metadata for PoemAnalyticsUtilities?);
  outlined consume of CKContextClient??(v3);
}

uint64_t (*PoemAggregationModelHandler.analyticsUtilities.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PoemAggregationModelHandler.assetLoader.getter()
{
  return swift_retain();
}

__n128 key path setter for PoemAggregationModelHandler.configuration : PoemAggregationModelHandler(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __int128 v8;

  v7 = (__n128)a1[1];
  v8 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  v4 = *((_BYTE *)a1 + 48);
  v5 = *a2;
  swift_beginAccess();
  *(_OWORD *)(v5 + 104) = v8;
  result = v7;
  *(__n128 *)(v5 + 120) = v7;
  *(_QWORD *)(v5 + 136) = v2;
  *(_QWORD *)(v5 + 144) = v3;
  *(_BYTE *)(v5 + 152) = v4;
  return result;
}

__n128 PoemAggregationModelHandler.configuration.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  __int128 v4;
  __n128 result;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 152);
  v4 = *(_OWORD *)(v1 + 120);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 136);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v3;
  return result;
}

uint64_t PoemAggregationModelHandler.propertyListDecoder.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 160))
  {
    v1 = *(_QWORD *)(v0 + 160);
  }
  else
  {
    v2 = v0;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    v1 = PropertyListDecoder.init()();
    *(_QWORD *)(v2 + 160) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t PoemAggregationModelHandler.init()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 1;
  v2 = (_QWORD *)(v0 + 32);
  type metadata accessor for DUTrialAssetLoader();
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_BYTE *)(v0 + 88) = 0;
  swift_allocObject();
  *(_QWORD *)(v0 + 96) = DUTrialAssetLoader.init()();
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_BYTE *)(v0 + 152) = 1;
  *(_QWORD *)(v0 + 160) = 0;
  PoemAggregationModelHandler.loadModel()();
  PoemAggregationModelHandler.initializeDb()();
  PoemAggregationModelHandler.loadConfig()();
  swift_beginAccess();
  v3 = *(void **)(v0 + 24);
  swift_beginAccess();
  v10 = *(_OWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 120);
  v8 = *(_OWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 144);
  v11 = *(_BYTE *)(v0 + 152);
  swift_beginAccess();
  v4 = *(void **)(v0 + 32);
  *v2 = v3;
  *(_OWORD *)(v1 + 40) = v10;
  *(_QWORD *)(v1 + 56) = v9;
  *(_OWORD *)(v1 + 64) = v8;
  *(_QWORD *)(v1 + 80) = v7;
  *(_BYTE *)(v1 + 88) = v11;
  v5 = v3;
  outlined consume of CKContextClient??(v4);
  return v1;
}

uint64_t *partial apply for closure #1 in Array.chunked(into:)@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in Array.chunked(into:)(a1, v2[3], v2[4], v2[2], a2);
}

unint64_t lazy protocol witness table accessor for type StrideTo<Int> and conformance StrideTo<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type StrideTo<Int> and conformance StrideTo<A>;
  if (!lazy protocol witness table cache variable for type StrideTo<Int> and conformance StrideTo<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for StrideTo<Int>);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE49C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StrideTo<Int> and conformance StrideTo<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for PoemModelingParameters.CodingKeys, &unk_24F0FA918);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for PoemModelingParameters.CodingKeys, &unk_24F0FA918);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for PoemModelingParameters.CodingKeys, &unk_24F0FA918);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys;
  if (!lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for PoemModelingParameters.CodingKeys, &unk_24F0FA918);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys);
  }
  return result;
}

id PoemAggregationModelHandler.loadModel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  NSURL *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  char *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  _QWORD *v54;
  id v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76[2];

  v76[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for Logger();
  v75 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v65 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v65 - v8;
  v10 = type metadata accessor for URL.DirectoryHint();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for URL();
  v72 = *(_QWORD *)(v74 - 8);
  v17 = MEMORY[0x24BDAC7A8](v74);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v70 = (char *)&v65 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v73 = (char *)&v65 - v22;
  v68 = v0;
  v23 = (void *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(v0 + 96) + 128))(0xD00000000000001BLL, 0x80000002284DF6C0, 0x696D616E6F747561, 0xEA0000000000676ELL, 0);
  if (v23)
  {
    v66 = v9;
    v67 = v4;
    v71 = v1;
    v69 = v23;
    result = objc_msgSend(v23, sel_path);
    if (result)
    {
      v25 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v26 = v72;
      v27 = v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v16, 1, 1, v74);
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BDCD7A0], v10);
      v28 = v73;
      URL.init(filePath:directoryHint:relativeTo:)();
      v29 = (void *)objc_opt_self();
      URL._bridgeToObjectiveC()(v30);
      v32 = v31;
      v76[0] = 0;
      v33 = objc_msgSend(v29, sel_compileModelAtURL_error_, v31, v76);

      v34 = v76[0];
      if (v33)
      {
        v35 = v70;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        v36 = v34;

        type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for MLModel);
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v19, v35, v27);
        v37 = @nonobjc MLModel.__allocating_init(contentsOf:)((uint64_t)v19);
        v38 = v71;
        v39 = v27;
        (*(void (**)(id))(*(_QWORD *)v68 + 136))(v37);
        v59 = *(void (**)(char *, uint64_t))(v26 + 8);
        v59(v35, v39);
        v60 = v66;
        Logger.init()();
        v61 = Logger.logObject.getter();
        v62 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v61, v62))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          _os_log_impl(&dword_2282CC000, v61, v62, "Loaded autonaming model from trial successfully", v64, 2u);
          MEMORY[0x22E2B117C](v64, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v75 + 8))(v60, v38);
        return (id)((uint64_t (*)(char *, uint64_t))v59)(v28, v39);
      }
      else
      {
        v43 = v76[0];
        v44 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        v45 = v71;
        v46 = v27;
        v47 = v26;
        v48 = v67;
        Logger.init()();
        v49 = v44;
        v50 = v44;
        v51 = Logger.logObject.getter();
        v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc();
          v54 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v53 = 138412290;
          v55 = v44;
          v56 = (void *)_swift_stdlib_bridgeErrorToNSError();
          v76[0] = v56;
          v45 = v71;
          v47 = v72;
          v46 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v54 = v56;

          _os_log_impl(&dword_2282CC000, v51, v52, "Error while initializing xgb model in PoemAggregationHandler: %@", v53, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          v57 = v54;
          v28 = v73;
          MEMORY[0x22E2B117C](v57, -1, -1);
          MEMORY[0x22E2B117C](v53, -1, -1);

        }
        else
        {

        }
        v58 = v75;

        (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v45);
        return (id)(*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v28, v46);
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    Logger.init()();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_2282CC000, v40, v41, "Unable to load autonaming model file path from trial in PoemAggregationHandler", v42, 2u);
      MEMORY[0x22E2B117C](v42, -1, -1);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v7, v1);
  }
  return result;
}

id @nonobjc MLModel.__allocating_init(contentsOf:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  NSURL *v13;

  v13 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v13);
  v3 = v2;
  v12 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelWithContentsOfURL_error_, v2, &v12);

  v5 = v12;
  if (v4)
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t PoemAggregationModelHandler.initializeDb()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  char *v27;
  char *v28;
  id v29;
  id v30;
  void (*v31)(id);
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v0 = type metadata accessor for Logger();
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  v1 = MEMORY[0x24BDAC7A8](v0);
  v35 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v37 = (char *)&v33 - v3;
  v4 = type metadata accessor for URL.DirectoryHint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v33 - v12;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v34 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v36 = (char *)&v33 - v18;
  v19 = objc_msgSend((id)objc_opt_self(), sel_topDirectory);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(string:)();
  swift_bridgeObjectRelease();
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v20(v11, 1, v14) == 1)
  {
    outlined destroy of URL?((uint64_t)v11);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  else
  {
    v40 = 0xD000000000000014;
    v41 = 0x80000002284DF700;
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCD7A0], v4);
    lazy protocol witness table accessor for type String and conformance String();
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v15 + 8);
    v21(v11, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    if (v20(v13, 1, v14) != 1)
    {
      v27 = v36;
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v36, v13, v14);
      v28 = v34;
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v34, v27, v14);
      v29 = objc_allocWithZone((Class)type metadata accessor for PoemStatsDatabase());
      v30 = PoemStatsDatabase.init(dbURL:isFrozen:)(v28, 0);
      v31 = *(void (**)(id))(*(_QWORD *)v33 + 160);
      v32 = v30;
      v31(v30);

      return ((uint64_t (*)(char *, uint64_t))v21)(v27, v14);
    }
  }
  outlined destroy of URL?((uint64_t)v13);
  v22 = v37;
  Logger.init()();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_2282CC000, v23, v24, "Couldn't initialize stats db URL in PoemAggregationHandler", v25, 2u);
    MEMORY[0x22E2B117C](v25, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v22, v39);
}

Swift::Void __swiftcall PoemAggregationModelHandler.initConfigurationForTesting()()
{
  uint64_t v0;

  swift_beginAccess();
  *(_OWORD *)(v0 + 104) = xmmword_2284C62E0;
  *(_OWORD *)(v0 + 120) = xmmword_2284C62F0;
  *(_OWORD *)(v0 + 136) = xmmword_2284C62D0;
  *(_BYTE *)(v0 + 152) = 0;
}

id PoemAggregationModelHandler.loadConfig()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id result;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v42 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  *(_QWORD *)&v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v37 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v37 - v9;
  v10 = type metadata accessor for URL.DirectoryHint();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL();
  v43 = *(_QWORD *)(v17 - 8);
  v44 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (void *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t, _QWORD))(**(_QWORD **)(v0 + 96) + 128))(0xD00000000000001BLL, 0x80000002284DF6C0, 0xD000000000000011, 0x80000002284DF6E0, 0);
  if (v20)
  {
    v40 = v20;
    v41 = v2;
    result = objc_msgSend(v20, sel_path);
    if (result)
    {
      v22 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v16, 1, 1, v44);
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BDCD7A0], v10);
      URL.init(filePath:directoryHint:relativeTo:)();
      v26 = Data.init(contentsOf:options:)();
      v28 = v27;
      PoemAggregationModelHandler.propertyListDecoder.getter();
      lazy protocol witness table accessor for type PoemModelingParameters and conformance PoemModelingParameters();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      v29 = v41;
      swift_release();
      v39 = v45;
      v37 = v46;
      v30 = v47;
      v31 = v48;
      swift_beginAccess();
      *(_OWORD *)(v1 + 104) = v39;
      *(_OWORD *)(v1 + 120) = v37;
      *(_QWORD *)(v1 + 136) = v30;
      *(_QWORD *)(v1 + 144) = v31;
      *(_BYTE *)(v1 + 152) = 0;
      v32 = v38;
      Logger.init()();
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_2282CC000, v33, v34, "Loaded autonaming config file from trial successfully", v36, 2u);
        MEMORY[0x22E2B117C](v36, -1, -1);
      }
      outlined consume of Data._Representation(v26, v28);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v29);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v19, v44);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    Logger.init()();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_2282CC000, v23, v24, "Unable to load autonaming config file path from trial in PoemAggregationHandler", v25, 2u);
      MEMORY[0x22E2B117C](v25, -1, -1);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v7, v2);
  }
  return result;
}

uint64_t PoemAggregationModelHandler.aggregationModelOutput(conversations:incremental:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD v33[7];
  _QWORD v34[8];
  _OWORD v35[2];
  _OWORD v36[4];
  _OWORD v37[2];
  double v38[6];
  char v39;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v33[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v33[-1] - v11;
  v13 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v10);

  if (!v13)
  {
    Logger.init()();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_2282CC000, v23, v24, "Don't try to do model aggregation if the model is missing", v25, 2u);
      MEMORY[0x22E2B117C](v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return MEMORY[0x24BEE4AF8];
  }
  v32 = v5;
  v14 = PoemAggregationModelHandler.prepareInputForInference(conversations:incremental:)(a1);
  v16 = v15;
  v17 = PoemAggregationModelHandler.runModelInference(inputBatches:)(v15);
  v18 = PoemAggregationModelHandler.persistAggregationStats(cooccurrenceKeys:inputBatches:outputBatches:conversations:incremental:)(v14, v16, v17, a1, a2 & 1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v2 + 200))(v33, v18);
  v19 = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v33, (uint64_t)v38, &demangling cache variable for type metadata for PoemModelingParameters?);
  if ((v39 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Logger.init()();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_2282CC000, v20, v21, "Unable to aggregate on conversations because the configuration wasn't loaded", v22, 2u);
      MEMORY[0x22E2B117C](v22, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v32);
    return MEMORY[0x24BEE4AF8];
  }
  v27 = v38[0];
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v2 + 176))(v34, v19);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v34, (uint64_t)v35, &demangling cache variable for type metadata for PoemAnalyticsUtilities?);
  if (*(_QWORD *)&v35[0] == 1)
  {
    static PoemStreamUtilities.poemEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:threshold:)(v14, v17, a1, v27);
    v26 = v28;
  }
  else
  {
    v36[2] = v35[0];
    v36[3] = v35[1];
    v37[0] = v36[0];
    *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)((char *)v36 + 9);
    if ((a2 & 1) == 0)
    {
      v29 = PoemAnalyticsUtilities.poemAnalyticsEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:)(v14, v17, a1);
      specialized PoemAnalyticsUtilities.addEventsToPoemAnalyticsStream(poemAnalyticsEvents:)((unint64_t)v29);
      swift_bridgeObjectRelease();
    }
    static PoemStreamUtilities.poemEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:threshold:)(v14, v17, a1, v27);
    v26 = v30;
    outlined release of PoemAnalyticsUtilities?((uint64_t)v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of CKContextClient??);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t PoemAggregationModelHandler.runModelInference(inputBatches:)(unint64_t a1)
{
  uint64_t v1;
  char **v3;
  uint64_t v4;
  char **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  char **v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v3 = (char **)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 128))();
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v5 = v3;
  v6 = specialized Sequence.compactMap<A>(_:)(a1, v3);
  if (v6 >> 62)
    goto LABEL_22;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
LABEL_24:
    v20 = *(_QWORD *)(v10 + 16);
    if (v20)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v20; ++i)
      {
        v22 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v22);
      }

      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();

      return MEMORY[0x24BEE4AF8];
    }
    return v4;
  }
  while (1)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v9 = 0;
    v10 = v4;
    v26 = v6;
    v27 = v6 & 0xC000000000000001;
    v23 = v5;
    v24 = v6 + 32;
    v5 = &selRef_e1946_;
    v25 = v7;
    while (v9 != v7)
    {
      if (v27)
      {
        v11 = (void *)MEMORY[0x22E2AFF34](v9, v6);
      }
      else
      {
        v11 = *(void **)(v24 + 8 * v9);
        swift_unknownObjectRetain();
      }
      v12 = (unint64_t)objc_msgSend(v11, sel_count, v23);
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_21;
      v13 = v12;
      if (v12)
      {
        specialized ContiguousArray.reserveCapacity(_:)();
        v14 = 0;
        do
        {
          v15 = v14 + 1;
          v16 = objc_msgSend(v11, sel_featuresAtIndex_);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v14 = v15;
        }
        while (v13 != v15);
        v17 = v4;
        swift_unknownObjectRelease();
        v7 = v25;
        v6 = v26;
      }
      else
      {
        swift_unknownObjectRelease();
        v17 = v4;
      }
      v19 = *(_QWORD *)(v4 + 16);
      v18 = *(_QWORD *)(v4 + 24);
      if (v19 >= v18 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      ++v9;
      *(_QWORD *)(v4 + 16) = v19 + 1;
      *(_QWORD *)(v4 + 8 * v19 + 32) = v17;
      if (v9 == v7)
      {
        swift_bridgeObjectRelease();
        v5 = v23;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7)
      goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t PoemAggregationModelHandler.prepareInputForInference(conversations:incremental:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class isa;
  _QWORD v14[8];
  uint64_t v15;
  _QWORD v16[7];
  _BYTE v17[64];

  v2 = MEMORY[0x24BEE4AF8];
  v15 = MEMORY[0x24BEE4AF8];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  v4 = specialized Sequence.compactMap<A>(_:)(v3, (uint64_t (*)(uint64_t, uint64_t, _OWORD *))partial apply for closure #1 in PoemAggregationModelHandler.prepareInputForInference(conversations:incremental:));
  v5 = swift_bridgeObjectRelease();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 200))(v16, v5);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for PoemModelingParameters?);
  result = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v16, (uint64_t)v17, &demangling cache variable for type metadata for PoemModelingParameters?);
  if (v17[48])
    v7 = 32;
  else
    v7 = v14[3];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_6;
LABEL_15:
    __break(1u);
    return result;
  }
  v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    goto LABEL_15;
LABEL_6:
  v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs8StrideToVySiG_SaySo27MLDictionaryFeatureProviderCGs5NeverOTg5068_sSa21DocumentUnderstandingE7chunked4intoSaySayxGGSi_tFADSiXEfU_So27fgH5C_TG5AKSiTf1cn_n(0, v8, v7, v4, v7);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v14[0] = v2;
    specialized ContiguousArray.reserveCapacity(_:)();
    v11 = 0;
    do
    {
      if (*(_QWORD *)(v9 + 8 * v11 + 32) >> 62)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFeatureProvider);
        _bridgeCocoaArray<A>(_:)();
      }
      else
      {
        swift_bridgeObjectRetain_n();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      }
      ++v11;
      v12 = objc_allocWithZone(MEMORY[0x24BDBFF60]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFeatureProvider);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v12, sel_initWithFeatureProviderArray_, isa);
      swift_bridgeObjectRelease();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v10 != v11);
  }
  swift_bridgeObjectRelease();
  return v15;
}

id closure #1 in PoemAggregationModelHandler.prepareInputForInference(conversations:incremental:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, _QWORD **a7)
{
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  v13 = type metadata accessor for Logger();
  MEMORY[0x24BDAC7A8](v13);
  v14 = PoemAggregationModelHandler.getFeatureMap(cooccurrenceKey:cooccurrenceCount:conversations:incremental:)(a1, a2, a3, a5, a6);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
  swift_bridgeObjectRelease();
  v15 = objc_allocWithZone(MEMORY[0x24BDBFF80]);
  v16 = @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
  v17 = *a7;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a7 = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *a7 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    *a7 = v17;
  }
  v17[2] = v20 + 1;
  v21 = &v17[2 * v20];
  v21[4] = a1;
  v21[5] = a2;
  return v16;
}

uint64_t PoemAggregationModelHandler.getFeatureMap(cooccurrenceKey:cooccurrenceCount:conversations:incremental:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  double v54;
  char v55;
  uint64_t v56;
  double v57;
  char v58;
  double v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  double v64;
  char v65;
  uint64_t v66;
  double v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  _QWORD v93[7];
  _QWORD v94[8];
  _QWORD v95[7];
  _QWORD v96[5];
  uint64_t v97[8];
  _QWORD v98[5];
  _BYTE v99[8];
  uint64_t v100;
  uint64_t v101;
  _BYTE v102[16];
  uint64_t v103;
  char v104;

  v6 = v5;
  v91 = a5;
  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 200))(v93);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v93, (uint64_t)v102, &demangling cache variable for type metadata for PoemModelingParameters?);
  if ((v104 & 1) != 0)
  {
    Logger.init()();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2282CC000, v15, v16, "Unable to create a feature map because the configuration wasn't loaded", v17, 2u);
      MEMORY[0x22E2B117C](v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return v92;
  }
  v18 = v103;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 352))(a1, a2);
  v90 = result;
  if (v18 >= 1)
  {
    v23 = v20;
    v24 = v21;
    v25 = v22;
    v26 = 1;
    while (1)
    {
      v97[0] = v26;
      closure #1 in PoemAggregationModelHandler.getFeatureMap(cooccurrenceKey:cooccurrenceCount:conversations:incremental:)(v97, a4, v24, v25, (uint64_t *)&v92, a3);
      if (v18 == v26)
        break;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
        break;
      }
    }
    v28 = *(uint64_t (**)(void))(*(_QWORD *)a4 + 232);
    v29 = swift_bridgeObjectRetain();
    v30 = ((uint64_t (*)(uint64_t))v28)(v29);
    v31 = *(_QWORD *)(v30 + 16);
    v87 = v6;
    v89 = v23;
    if (v31 && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v23), (v33 & 1) != 0))
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = (double)v34;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35 = 0.0;
    }
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 360))(v24, v25);
    v37 = (double)v36;
    v38 = *(_QWORD *)(v28() + 16);
    v39 = swift_bridgeObjectRelease();
    v88 = v38;
    v40 = (double)v38;
    v41 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 280))(v39) + 16);
    v42 = swift_bridgeObjectRelease();
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 368))(v42);
    v45 = v44;
    v46 = (double)PoemCooccurrenceCounts.counts()();
    v47 = v92;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v97[0] = v47;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x61727563636F6F63, 0xEF746E632065636ELL, isUniquelyReferenced_nonNull_native, v46);
    v49 = v97[0];
    swift_bridgeObjectRelease();
    v50 = swift_isUniquelyReferenced_nonNull_native();
    v97[0] = v49;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6320797469746E65, 0xEA0000000000746ELL, v50, v35);
    v51 = v97[0];
    swift_bridgeObjectRelease();
    v52 = swift_isUniquelyReferenced_nonNull_native();
    v97[0] = v51;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6E63206567616D69, 0xE900000000000074, v52, (double)v36);
    v53 = v97[0];
    swift_bridgeObjectRelease();
    if (v36)
      v54 = v35 / v37;
    else
      v54 = 0.0;
    v55 = swift_isUniquelyReferenced_nonNull_native();
    v97[0] = v53;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000012, 0x80000002284DF350, v55, v54);
    v56 = v97[0];
    swift_bridgeObjectRelease();
    if (v35 == 0.0)
      v57 = 0.0;
    else
      v57 = v37 / v35;
    v58 = swift_isUniquelyReferenced_nonNull_native();
    v97[0] = v56;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000013, 0x80000002284DF370, v58, v57);
    v92 = v97[0];
    swift_bridgeObjectRelease();
    if (v45)
    {
      if (v43 == v90 && v45 == v89)
      {
        swift_bridgeObjectRelease();
        v59 = 1.0;
LABEL_27:
        v61 = v92;
        v62 = swift_isUniquelyReferenced_nonNull_native();
        v97[0] = v61;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6F20656369766564, 0xEC00000072656E77, v62, v59);
        v63 = v97[0];
        swift_bridgeObjectRelease();
        if (v41)
          v64 = v37 / (double)v41;
        else
          v64 = 0.0;
        v65 = swift_isUniquelyReferenced_nonNull_native();
        v97[0] = v63;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x2072657020676D69, 0xEC00000065636166, v65, v64);
        v66 = v97[0];
        swift_bridgeObjectRelease();
        if (v88)
          v67 = v35 / v40;
        else
          v67 = 0.0;
        v68 = swift_isUniquelyReferenced_nonNull_native();
        v97[0] = v66;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000011, 0x80000002284DF390, v68, v67);
        v69 = v97[0];
        swift_bridgeObjectRelease();
        v70 = swift_isUniquelyReferenced_nonNull_native();
        v97[0] = v69;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6E20657571696E75, 0xEC00000073656D61, v70, v40);
        v71 = v97[0];
        swift_bridgeObjectRelease();
        v72 = swift_isUniquelyReferenced_nonNull_native();
        v97[0] = v71;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6620657571696E75, 0xEC00000073656361, v72, (double)v41);
        v73 = v97[0];
        v92 = v97[0];
        v74 = swift_bridgeObjectRelease();
        if ((v91 & 1) != 0)
        {
          v75 = v87;
          v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 152))(v74);
          if (v76)
          {
            v77 = (_QWORD *)v76;
            v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 344))(v90, v89);
            v80 = v79;
            swift_bridgeObjectRelease();
            if (v80)
            {
              v81 = (_QWORD *)MEMORY[0x24BEE4EA0];
              (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v77)
                                                                                               + 0x98))(v94, v78, v80, v24, v25);
              (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))((*v81 & *v77) + 0x88))(v95, v78, v80);
              swift_bridgeObjectRelease();
              (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))((*v81 & *v77) + 0x90))(v96, v24, v25);
              swift_bridgeObjectRelease();
              outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v95, (uint64_t)v99, &demangling cache variable for type metadata for (cooccurrenceId: String, entityId: String, entityName: String, associatedModelInputFeatureMap: [String : Double]?)?);
              if (v100)
              {
                v82 = v101;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                v82 = 0;
              }
              outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v96, (uint64_t)v98, &demangling cache variable for type metadata for (cooccurrenceId: String, photoId: String, associatedModelInputFeatureMap: [String : Double]?)?);
              if (v98[1])
              {
                v83 = v98[4];
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                v83 = 0;
              }
              outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v94, (uint64_t)v97, &demangling cache variable for type metadata for (cooccurrenceId: String, entityName: String, photoId: String, associatedModelInputFeatureMap: [String : Double]?, associatedListFeatures: [String : [Double]]?)?);
              if (v97[1])
              {
                v84 = v97[6];
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                v84 = 0;
              }
              v85 = v92;
              v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v75 + 320);
              swift_bridgeObjectRetain();
              v73 = v86(v82, v83, v84, v85);
              swift_bridgeObjectRelease_n();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v73;
            }
            v73 = v92;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();

          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          return v73;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v92;
      }
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v59 = 1.0;
      if ((v60 & 1) != 0)
        goto LABEL_27;
    }
    v59 = 0.0;
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in PoemAggregationModelHandler.getFeatureMap(cooccurrenceKey:cooccurrenceCount:conversations:incremental:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  Swift::String v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  double v21;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v23;
  uint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  char v28;
  char v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  Swift::String v35;
  uint64_t v36;
  double v37;
  double v38;
  unint64_t v39;
  char v40;
  char v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v10 = *a1;
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 280);
  v12 = swift_bridgeObjectRetain();
  v13 = v11(v12);
  if (*(_QWORD *)(v13 + 16))
  {
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v16 + 16) && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v19 & 1) != 0))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v18);
        swift_bridgeObjectRelease();
        v21 = (double)v20;
      }
      else
      {
        swift_bridgeObjectRelease();
        v21 = 0.0;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v48 = *a5;
      *a5 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x746E635F65636166, 0xE90000000000005FLL, isUniquelyReferenced_nonNull_native, v21);
      *a5 = v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24 = a6[3];
      v25 = 0.0;
      v26 = 0.0;
      if (*(_QWORD *)(v24 + 16))
      {
        v27 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        if ((v28 & 1) != 0)
          v26 = (double)*(uint64_t *)(*(_QWORD *)(v24 + 56) + 8 * v27);
      }
      v29 = swift_isUniquelyReferenced_nonNull_native();
      v49 = *a5;
      *a5 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD00000000000001ALL, 0x80000002284DF4D0, v29, v26);
      *a5 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31 = a6[4];
      if (*(_QWORD *)(v31 + 16))
      {
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        if ((v33 & 1) != 0)
          v25 = (double)*(uint64_t *)(*(_QWORD *)(v31 + 56) + 8 * v32);
      }
      v34 = swift_isUniquelyReferenced_nonNull_native();
      v50 = *a5;
      *a5 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD00000000000001CLL, 0x80000002284DF4F0, v34, v25);
      *a5 = v50;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36 = *a6;
      v37 = 0.0;
      v38 = 0.0;
      if (*(_QWORD *)(*a6 + 16))
      {
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        if ((v40 & 1) != 0)
          v38 = (double)*(uint64_t *)(*(_QWORD *)(v36 + 56) + 8 * v39);
      }
      v41 = swift_isUniquelyReferenced_nonNull_native();
      v51 = *a5;
      *a5 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD00000000000001ALL, 0x80000002284DF510, v41, v38);
      *a5 = v51;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43 = a6[2];
      if (*(_QWORD *)(v43 + 16))
      {
        v44 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        if ((v45 & 1) != 0)
          v37 = (double)*(uint64_t *)(*(_QWORD *)(v43 + 56) + 8 * v44);
      }
      v46 = swift_isUniquelyReferenced_nonNull_native();
      v52 = *a5;
      *a5 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD00000000000001BLL, 0x80000002284DF530, v46, v37);
      *a5 = v52;
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *PoemAggregationModelHandler.updateFeatureMap(entityRecord:photoRecord:cooccurrenceRecord:existingFeatureMap:)(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  char v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void (*v30)(_QWORD *@<X8>);
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  Swift::String v35;
  uint64_t v36;
  Swift::String v37;
  unint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  double v87;
  char v88;
  uint64_t v89;
  double v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  void (*v105)(_QWORD *@<X8>);
  uint64_t v106;
  _QWORD *result;
  uint64_t v108;
  void (*v109)(_QWORD *@<X8>);
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD v116[7];
  char v117[16];
  int64_t v118;
  char v119;

  v112 = a2;
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = a4;
  v13 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 200);
  v14 = swift_bridgeObjectRetain();
  v13(v116, v14);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v116, (uint64_t)v117, &demangling cache variable for type metadata for PoemModelingParameters?);
  if ((v119 & 1) != 0)
  {
    Logger.init()();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_2282CC000, v15, v16, "Unable to update feature map because the configuration wasn't loaded", v17, 2u);
      MEMORY[0x22E2B117C](v17, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
    return v115;
  }
  v19 = 0xEC00000073656361;
  v20 = v118;
  if (!a1)
  {
    v30 = 0;
    goto LABEL_21;
  }
  v5 = 0.0;
  if (*(_QWORD *)(a1 + 16))
  {
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x6320797469746E65, 0xEA0000000000746ELL);
    if ((v22 & 1) != 0)
      v5 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * v21);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v113 = (uint64_t)a4;
  v115 = (_QWORD *)0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(0x6320797469746E65, 0xEA0000000000746ELL);
  v25 = a4[2];
  v26 = (v24 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  LOBYTE(v12) = v24;
  if (a4[3] >= v27)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_118;
    goto LABEL_15;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
  a4 = (_QWORD *)v113;
  v28 = specialized __RawDictionaryStorage.find<A>(_:)(0x6320797469746E65, 0xEA0000000000746ELL);
  if ((v12 & 1) != (v29 & 1))
  {
LABEL_119:
    result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v9 = v28;
  while (1)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if ((v12 & 1) == 0)
      specialized _NativeDictionary._insert(at:key:value:)(v9, 0x6320797469746E65, 0xEA0000000000746ELL, a4, 0.0);
    v31 = a4[7];
    swift_bridgeObjectRelease();
    *(double *)(v31 + 8 * v9) = v5 + *(double *)(v31 + 8 * v9);
    v5 = 0.0;
    if (*(_QWORD *)(a1 + 16))
    {
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E20657571696E75, v19 + 2560);
      if ((v33 & 1) != 0)
        v5 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * v32);
    }
    v34 = swift_isUniquelyReferenced_nonNull_native();
    v113 = (uint64_t)a4;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6E20657571696E75, v19 + 2560, v34, v5);
    a4 = (_QWORD *)v113;
    v115 = (_QWORD *)v113;
    swift_bridgeObjectRelease();
    v30 = protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
LABEL_21:
    a1 = v112;
    if (!v112)
    {
      v12 = 0;
      v9 = 0;
      goto LABEL_64;
    }
    if (v20 >= 1)
      break;
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    specialized _NativeDictionary.copy()();
    a4 = (_QWORD *)v113;
  }
  v109 = v30;
  v110 = a3;
  v19 = 0xE90000000000005FLL;
  v12 = 1;
  v111 = v20;
  while (1)
  {
    v113 = v12;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v113 = 0x746E635F65636166;
    v114 = 0xE90000000000005FLL;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    a3 = v113;
    v36 = v114;
    v113 = v12;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v113 = 0x746E635F65636166;
    v114 = 0xE90000000000005FLL;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v5 = 0.0;
    if (*(_QWORD *)(a1 + 16))
    {
      v38 = specialized __RawDictionaryStorage.find<A>(_:)(v113, v114);
      if ((v39 & 1) != 0)
        v5 = *(double *)(*(_QWORD *)(a1 + 56) + 8 * v38);
    }
    swift_bridgeObjectRelease();
    v9 = (uint64_t)v115;
    v40 = swift_isUniquelyReferenced_nonNull_native();
    v113 = v9;
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a3, v36);
    v42 = *(_QWORD *)(v9 + 16);
    v43 = (v41 & 1) == 0;
    v44 = v42 + v43;
    if (__OFADD__(v42, v43))
    {
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
      goto LABEL_112;
    }
    a1 = v41;
    if (*(_QWORD *)(v9 + 24) >= v44)
    {
      if ((v40 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v9 = v113;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, v40);
      v9 = v113;
      v45 = specialized __RawDictionaryStorage.find<A>(_:)(a3, v36);
      if ((a1 & 1) != (v46 & 1))
        goto LABEL_119;
      v20 = v45;
    }
    v115 = (_QWORD *)v9;
    swift_bridgeObjectRelease();
    if ((a1 & 1) == 0)
    {
      *(_QWORD *)(v9 + 8 * ((unint64_t)v20 >> 6) + 64) |= 1 << v20;
      v47 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v20);
      *v47 = a3;
      v47[1] = v36;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v20) = 0;
      v48 = *(_QWORD *)(v9 + 16);
      v49 = __OFADD__(v48, 1);
      v50 = v48 + 1;
      if (v49)
        goto LABEL_111;
      *(_QWORD *)(v9 + 16) = v50;
      swift_bridgeObjectRetain();
    }
    *(double *)(*(_QWORD *)(v9 + 56) + 8 * v20) = v5 + *(double *)(*(_QWORD *)(v9 + 56) + 8 * v20);
    swift_bridgeObjectRelease();
    v20 = v111;
    if (v111 == v12)
      break;
    v49 = __OFADD__(v12++, 1);
    a1 = v112;
    if (v49)
      goto LABEL_110;
  }
  v19 = v112;
  v5 = 0.0;
  a3 = v110;
  if (*(_QWORD *)(v112 + 16))
  {
    v51 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E63206567616D69, 0xE900000000000074);
    if ((v52 & 1) != 0)
      v5 = *(double *)(*(_QWORD *)(v19 + 56) + 8 * v51);
  }
  v53 = swift_isUniquelyReferenced_nonNull_native();
  v113 = v9;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E63206567616D69, 0xE900000000000074);
  v55 = *(_QWORD *)(v9 + 16);
  v56 = (v54 & 1) == 0;
  v57 = v55 + v56;
  v30 = v109;
  if (__OFADD__(v55, v56))
    goto LABEL_115;
  v58 = v54;
  if (*(_QWORD *)(v9 + 24) >= v57)
  {
    if ((v53 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v113;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, v53);
    v9 = v113;
    v59 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E63206567616D69, 0xE900000000000074);
    if ((v58 & 1) != (v60 & 1))
      goto LABEL_119;
    v12 = v59;
  }
  v115 = (_QWORD *)v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v58 & 1) == 0)
    specialized _NativeDictionary._insert(at:key:value:)(v12, 0x6E63206567616D69, 0xE900000000000074, (_QWORD *)v9, 0.0);
  v61 = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRelease();
  *(double *)(v61 + 8 * v12) = v5 + *(double *)(v61 + 8 * v12);
  v5 = 0.0;
  if (*(_QWORD *)(v19 + 16))
  {
    v62 = specialized __RawDictionaryStorage.find<A>(_:)(0x6620657571696E75, 0xEC00000073656361);
    if ((v63 & 1) != 0)
      v5 = *(double *)(*(_QWORD *)(v19 + 56) + 8 * v62);
  }
  a1 = swift_isUniquelyReferenced_nonNull_native();
  v113 = v9;
  v115 = (_QWORD *)0x8000000000000000;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(0x6620657571696E75, 0xEC00000073656361);
  v65 = *(_QWORD *)(v9 + 16);
  v66 = (v64 & 1) == 0;
  v67 = v65 + v66;
  if (__OFADD__(v65, v66))
    goto LABEL_116;
  v68 = v64;
  if (*(_QWORD *)(v9 + 24) >= v67)
  {
    if ((a1 & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v67, a1);
    v69 = specialized __RawDictionaryStorage.find<A>(_:)(0x6620657571696E75, 0xEC00000073656361);
    if ((v68 & 1) != (v70 & 1))
      goto LABEL_119;
    v19 = v69;
  }
  a4 = (_QWORD *)v113;
  v115 = (_QWORD *)v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v68 & 1) == 0)
    specialized _NativeDictionary._insert(at:key:value:)(v19, 0x6620657571696E75, 0xEC00000073656361, a4, 0.0);
  v71 = a4[7];
  swift_bridgeObjectRelease();
  *(double *)(v71 + 8 * v19) = v5;
  v9 = (uint64_t)protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
  v12 = (uint64_t)protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
  v19 = 0xEC00000073656361;
LABEL_64:
  v72 = 0.0;
  v73 = 0.0;
  v74 = 0.0;
  v75 = 0.0;
  v76 = 0.0;
  if (a4[2])
  {
    v77 = specialized __RawDictionaryStorage.find<A>(_:)(0x6320797469746E65, 0xEA0000000000746ELL);
    if ((v78 & 1) != 0)
      v73 = *(double *)(a4[7] + 8 * v77);
    if (a4[2])
    {
      v79 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E63206567616D69, 0xE900000000000074);
      if ((v80 & 1) != 0)
        v74 = *(double *)(a4[7] + 8 * v79);
      if (a4[2])
      {
        v81 = specialized __RawDictionaryStorage.find<A>(_:)(0x6620657571696E75, 0xEC00000073656361);
        if ((v82 & 1) != 0)
          v72 = *(double *)(a4[7] + 8 * v81);
        if (a4[2])
        {
          v83 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E20657571696E75, v19 + 2560);
          if ((v84 & 1) != 0)
            v76 = *(double *)(a4[7] + 8 * v83);
        }
      }
      if (v74 != 0.0)
        v75 = v73 / v74;
    }
  }
  v85 = swift_isUniquelyReferenced_nonNull_native();
  v113 = (uint64_t)a4;
  v19 = 0xD000000000000011;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000012, 0x80000002284DF350, v85, v75);
  v86 = v113;
  swift_bridgeObjectRelease();
  if (v73 == 0.0)
    v87 = 0.0;
  else
    v87 = v74 / v73;
  v88 = swift_isUniquelyReferenced_nonNull_native();
  v113 = v86;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000013, 0x80000002284DF370, v88, v87);
  v89 = v113;
  swift_bridgeObjectRelease();
  if (v72 == 0.0)
    v90 = 0.0;
  else
    v90 = v74 / v72;
  v91 = swift_isUniquelyReferenced_nonNull_native();
  v113 = v89;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x2072657020676D69, 0xEC00000065636166, v91, v90);
  v92 = v113;
  swift_bridgeObjectRelease();
  if (v76 == 0.0)
    v5 = 0.0;
  else
    v5 = v73 / v76;
  v93 = swift_isUniquelyReferenced_nonNull_native();
  v113 = v92;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000011, 0x80000002284DF390, v93, v5);
  v18 = (_QWORD *)v113;
  v115 = (_QWORD *)v113;
  swift_bridgeObjectRelease();
  if (!a3)
  {
    v105 = 0;
    goto LABEL_107;
  }
  if (v20 < 1)
    goto LABEL_114;
  v19 = 0;
  v94 = 1;
  while (1)
  {
    v113 = v94;
    closure #2 in PoemAggregationModelHandler.updateFeatureMap(entityRecord:photoRecord:cooccurrenceRecord:existingFeatureMap:)(&v113, &v115, a3);
    if (v20 == v94)
      break;
    v49 = __OFADD__(v94++, 1);
    if (v49)
    {
      __break(1u);
      break;
    }
  }
  v5 = 0.0;
  if (*(_QWORD *)(a3 + 16))
  {
    v95 = specialized __RawDictionaryStorage.find<A>(_:)(0x61727563636F6F63, 0xEF746E632065636ELL);
    if ((v96 & 1) != 0)
      v5 = *(double *)(*(_QWORD *)(a3 + 56) + 8 * v95);
  }
  v18 = v115;
  a1 = swift_isUniquelyReferenced_nonNull_native();
  v113 = (uint64_t)v18;
  v98 = specialized __RawDictionaryStorage.find<A>(_:)(0x61727563636F6F63, 0xEF746E632065636ELL);
  v99 = v18[2];
  v100 = (v97 & 1) == 0;
  v101 = v99 + v100;
  if (__OFADD__(v99, v100))
    goto LABEL_117;
  v102 = v97;
  if (v18[3] >= v101)
  {
    if ((a1 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v18 = (_QWORD *)v113;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v101, a1);
    v18 = (_QWORD *)v113;
    v103 = specialized __RawDictionaryStorage.find<A>(_:)(0x61727563636F6F63, 0xEF746E632065636ELL);
    if ((v102 & 1) != (v104 & 1))
      goto LABEL_119;
    v98 = v103;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((v102 & 1) == 0)
    specialized _NativeDictionary._insert(at:key:value:)(v98, 0x61727563636F6F63, 0xEF746E632065636ELL, v18, 0.0);
  v106 = v18[7];
  swift_bridgeObjectRelease();
  *(double *)(v106 + 8 * v98) = v5 + *(double *)(v106 + 8 * v98);
  v105 = protocol witness for SetAlgebra.init() in conformance NSPropertyListMutabilityOptions;
LABEL_107:
  outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v30);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?(v12);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?(v9);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed _PASSqliteStatement) -> (@unowned _PASDBIterAction_))?((uint64_t)v105);
  return v18;
}

uint64_t closure #2 in PoemAggregationModelHandler.updateFeatureMap(entityRecord:photoRecord:cooccurrenceRecord:existingFeatureMap:)(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  unint64_t v28;
  char v29;
  char v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  char v43;
  char v44;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  char v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;

  v5 = *a1;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = 0x80000002284DF4D0;
  v69 = v5;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v9 = 0xD00000000000001ALL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v10 = 0.0;
  if (*(_QWORD *)(a3 + 16))
  {
    v11 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF4D0);
    if ((v12 & 1) != 0)
      v10 = *(double *)(*(_QWORD *)(a3 + 56) + 8 * v11);
  }
  v68 = a3;
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *a2;
  v70 = *a2;
  *a2 = (_QWORD *)0x8000000000000000;
  v15 = 0xD00000000000001ALL;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF4D0);
  v18 = v14[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_46;
  }
  LOBYTE(a3) = v16;
  if (v14[3] < v20)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
    v14 = v70;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF4D0);
    if ((a3 & 1) == (v22 & 1))
    {
      v17 = v21;
      goto LABEL_9;
    }
    goto LABEL_50;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_49;
  while (1)
  {
LABEL_9:
    *a2 = v14;
    swift_bridgeObjectRelease();
    v23 = *a2;
    if ((a3 & 1) == 0)
    {
      specialized _NativeDictionary._insert(at:key:value:)(v17, v15, v7, *a2, 0.0);
      swift_bridgeObjectRetain();
    }
    *(double *)(v23[7] + 8 * v17) = v10 + *(double *)(v23[7] + 8 * v17);
    swift_bridgeObjectRelease();
    v15 = v69;
    LOBYTE(a3) = MEMORY[0x24BEE17D8];
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v25 = v9 + 2;
    v9 = 0x80000002284DF4F0;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v26 = v25;
    v7 = 0x80000002284DF4F0;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v10 = 0.0;
    if (*(_QWORD *)(v68 + 16))
    {
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(v25, 0x80000002284DF4F0);
      if ((v29 & 1) != 0)
        v10 = *(double *)(*(_QWORD *)(v68 + 56) + 8 * v28);
    }
    swift_bridgeObjectRelease();
    v30 = swift_isUniquelyReferenced_nonNull_native();
    v31 = *a2;
    v70 = *a2;
    *a2 = (_QWORD *)0x8000000000000000;
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v26, 0x80000002284DF4F0);
    v33 = v31[2];
    v34 = (v32 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
    {
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v36 = v32;
    if (v31[3] >= v35)
    {
      if ((v30 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v31 = v70;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, v30);
      v31 = v70;
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v26, 0x80000002284DF4F0);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_50;
      v17 = v37;
    }
    *a2 = v31;
    swift_bridgeObjectRelease();
    v39 = (uint64_t)*a2;
    if ((v36 & 1) == 0)
    {
      specialized _NativeDictionary._insert(at:key:value:)(v17, v26, 0x80000002284DF4F0, *a2, 0.0);
      swift_bridgeObjectRetain();
    }
    *(double *)(*(_QWORD *)(v39 + 56) + 8 * v17) = v10 + *(double *)(*(_QWORD *)(v39 + 56) + 8 * v17);
    swift_bridgeObjectRelease();
    LOBYTE(a3) = MEMORY[0x24BEE17D8];
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v9 = 0x80000002284DF510;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v7 = 0x80000002284DF510;
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v10 = 0.0;
    if (*(_QWORD *)(v68 + 16))
    {
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF510);
      if ((v43 & 1) != 0)
        v10 = *(double *)(*(_QWORD *)(v68 + 56) + 8 * v42);
    }
    swift_bridgeObjectRelease();
    v44 = swift_isUniquelyReferenced_nonNull_native();
    v45 = *a2;
    v70 = *a2;
    *a2 = (_QWORD *)0x8000000000000000;
    v15 = 0xD00000000000001ALL;
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF510);
    v47 = v45[2];
    v48 = (v46 & 1) == 0;
    v49 = v47 + v48;
    if (__OFADD__(v47, v48))
      goto LABEL_47;
    v50 = v46;
    if (v45[3] >= v49)
    {
      if ((v44 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v45 = v70;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, v44);
      v45 = v70;
      v51 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF510);
      if ((v50 & 1) != (v52 & 1))
        goto LABEL_50;
      v17 = v51;
    }
    *a2 = v45;
    swift_bridgeObjectRelease();
    v53 = (uint64_t)*a2;
    if ((v50 & 1) == 0)
    {
      specialized _NativeDictionary._insert(at:key:value:)(v17, 0xD00000000000001ALL, 0x80000002284DF510, *a2, 0.0);
      swift_bridgeObjectRetain();
    }
    *(double *)(*(_QWORD *)(v53 + 56) + 8 * v17) = v10 + *(double *)(*(_QWORD *)(v53 + 56) + 8 * v17);
    swift_bridgeObjectRelease();
    v15 = v69;
    v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v7 = 0x80000002284DF530;
    v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v17 = 0x80000002284DF530;
    v10 = 0.0;
    if (*(_QWORD *)(v68 + 16))
    {
      v56 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x80000002284DF530);
      if ((v57 & 1) != 0)
        v10 = *(double *)(*(_QWORD *)(v68 + 56) + 8 * v56);
    }
    swift_bridgeObjectRelease();
    LOBYTE(a3) = swift_isUniquelyReferenced_nonNull_native();
    v58 = *a2;
    v70 = *a2;
    *a2 = (_QWORD *)0x8000000000000000;
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x80000002284DF530);
    v60 = v58[2];
    v61 = (v59 & 1) == 0;
    v62 = v60 + v61;
    if (!__OFADD__(v60, v61))
      break;
LABEL_48:
    __break(1u);
LABEL_49:
    specialized _NativeDictionary.copy()();
    v14 = v70;
  }
  v63 = v59;
  if (v58[3] >= v62)
  {
    if ((a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v58 = v70;
    }
LABEL_42:
    *a2 = v58;
    swift_bridgeObjectRelease();
    v66 = (uint64_t)*a2;
    if ((v63 & 1) == 0)
    {
      specialized _NativeDictionary._insert(at:key:value:)(v9, 0xD00000000000001BLL, 0x80000002284DF530, *a2, 0.0);
      swift_bridgeObjectRetain();
    }
    *(double *)(*(_QWORD *)(v66 + 56) + 8 * v9) = v10 + *(double *)(*(_QWORD *)(v66 + 56) + 8 * v9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v62, a3);
    v58 = v70;
    v64 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x80000002284DF530);
    if ((v63 & 1) == (v65 & 1))
    {
      v9 = v64;
      goto LABEL_42;
    }
LABEL_50:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  return result;
}

uint64_t PoemAggregationModelHandler.aggregateStats(conversations:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  void (*v34)(char *, uint64_t);
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63[2];
  _QWORD v64[7];
  char v65[8];
  uint64_t v66;
  char v67;

  v3 = type metadata accessor for Logger();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v56 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v56 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v56 - v15;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v1 + 200))(v64, v14);
  v17 = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v64, (uint64_t)v65, &demangling cache variable for type metadata for PoemModelingParameters?);
  if ((v67 & 1) != 0)
  {
    Logger.init()();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_2282CC000, v18, v19, "Unable to aggregate stats on conversation because the configuration wasn't loaded", v20, 2u);
      MEMORY[0x22E2B117C](v20, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  else
  {
    v22 = v66;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(v17);
    swift_retain();
    specialized Sequence.forEach(_:)(v23, a1, v22);
    swift_bridgeObjectRelease();
    swift_release();
    Logger.init()();
    swift_retain_n();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    v26 = os_log_type_enabled(v24, v25);
    v60 = v3;
    v61 = v10;
    v59 = v13;
    if (v26)
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v58 = (void (*)(char *, uint64_t))v4;
      v29 = v28;
      v63[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v57 = v27 + 4;
      (*(void (**)(void))(*(_QWORD *)a1 + 280))();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : Int]);
      v30 = Dictionary.description.getter();
      v32 = v31;
      swift_bridgeObjectRelease();
      v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      v3 = v60;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v24, v25, "Distinct images with counts: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v29, -1, -1);
      v33 = v27;
      v13 = v59;
      MEMORY[0x22E2B117C](v33, -1, -1);

      v34 = (void (*)(char *, uint64_t))*((_QWORD *)v58 + 1);
    }
    else
    {

      swift_release_n();
      v34 = *(void (**)(char *, uint64_t))(v4 + 8);
    }
    v34(v16, v3);
    Logger.init()();
    swift_retain_n();
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.debug.getter();
    v37 = os_log_type_enabled(v35, v36);
    v58 = v34;
    if (v37)
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v63[0] = v39;
      *(_DWORD *)v38 = 136315138;
      v57 = v38 + 4;
      (*(void (**)(void))(*(_QWORD *)a1 + 232))();
      v40 = v3;
      v41 = Dictionary.description.getter();
      v43 = v42;
      swift_bridgeObjectRelease();
      v44 = v41;
      v3 = v40;
      v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v43, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v35, v36, "Distinct entities with counts: %s", v38, 0xCu);
      swift_arrayDestroy();
      v45 = v39;
      v34 = v58;
      MEMORY[0x22E2B117C](v45, -1, -1);
      MEMORY[0x22E2B117C](v38, -1, -1);

      v46 = v59;
      v47 = v40;
    }
    else
    {

      swift_release_n();
      v46 = v13;
      v47 = v3;
    }
    v34(v46, v47);
    v48 = v61;
    Logger.init()();
    swift_retain_n();
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v52 = swift_slowAlloc();
      v63[0] = v52;
      *(_DWORD *)v51 = 136315138;
      (*(void (**)(void))(*(_QWORD *)a1 + 256))();
      v53 = Dictionary.description.getter();
      v55 = v54;
      swift_bridgeObjectRelease();
      v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2282CC000, v49, v50, "Cooccurrence stats of entity image pair: %s", v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v52, -1, -1);
      MEMORY[0x22E2B117C](v51, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v58)(v61, v60);
    }
    else
    {

      swift_release_n();
      return ((uint64_t (*)(char *, uint64_t))v34)(v48, v3);
    }
  }
}

uint64_t PoemAggregationModelHandler.aggregate(conversations:incremental:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  PoemAggregationModelHandler.aggregateStats(conversations:)(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 288))(a1, a2);
  swift_bridgeObjectRelease();
  specialized static PoemStreamUtilities.clearPoemStream()();
  Logger.init()();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2282CC000, v9, v10, "AutonamingFromMessages feature flag is off. Not adding events to poem stream", v11, 2u);
    MEMORY[0x22E2B117C](v11, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PoemAggregationModelHandler.persistAggregationStats(cooccurrenceKeys:inputBatches:outputBatches:conversations:incremental:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t result;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t i;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t j;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  const char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD v87[7];
  _QWORD v88[6];
  char v89;

  v82 = a4;
  v83 = a3;
  v84 = a1;
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v76 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v76 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v76 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v76 - v23;
  if ((a5 & 1) != 0)
  {
    Logger.init()();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_2282CC000, v25, v26, "Don't persist stats for incremental runs", v27, 2u);
      MEMORY[0x22E2B117C](v27, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v5 + 200))(v87, v22);
  v29 = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v87, (uint64_t)v88, &demangling cache variable for type metadata for PoemModelingParameters?);
  if ((v89 & 1) != 0)
  {
    Logger.init()();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_2282CC000, v30, v31, "Can't persist stats because the configuration counldn't be loaded", v32, 2u);
      MEMORY[0x22E2B117C](v32, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  }
  v33 = *(double *)v88;
  v34 = v88[2];
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 152))(v29);
  if (v35)
  {
    v36 = (_QWORD *)v35;
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v37 = result;
    }
    else
    {
      v37 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
    }
    v38 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v81 = v8;
    v80 = v9;
    v85 = v36;
    v77 = v24;
    v79 = v21;
    v78 = v34;
    if (v37)
    {
      if (v37 < 1)
      {
        __break(1u);
        goto LABEL_47;
      }
      for (i = 0; i != v37; ++i)
      {
        if ((a2 & 0xC000000000000001) != 0)
          v40 = (id)MEMORY[0x22E2AFF34](i, a2);
        else
          v40 = *(id *)(a2 + 8 * i + 32);
        v41 = v40;
        v42 = objc_msgSend(v40, sel_array);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFeatureProvider);
        v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        v45 = v38[2];
        v44 = v38[3];
        if (v45 >= v44 >> 1)
          v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v44 > 1), v45 + 1, 1, v38);
        v38[2] = v45 + 1;
        v38[v45 + 4] = v43;
      }
    }
    swift_bridgeObjectRelease();
    v86 = MEMORY[0x24BEE4AF8];
    v46 = v38[2];
    v47 = v81;
    v48 = v80;
    v50 = v84;
    v49 = v85;
    v51 = v83;
    if (v46)
    {
      swift_bridgeObjectRetain();
      for (j = 0; j != v46; ++j)
      {
        v53 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v53);
      }
      swift_bridgeObjectRelease();
    }
    v54 = swift_bridgeObjectRelease();
    v55 = v86;
    if (v86 >> 62)
    {
      swift_bridgeObjectRetain();
      v68 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v68 == *(_QWORD *)(v50 + 16))
      {
        swift_bridgeObjectRetain();
        v56 = _CocoaArrayWrapper.endIndex.getter();
        v54 = swift_bridgeObjectRelease();
        if (v56)
        {
LABEL_30:
          v57 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v49) + 0x68))(v54);
          v58 = v82;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 408))(v57);
          if (v56 >= 1)
          {
            v59 = result;
            swift_bridgeObjectRetain();
            v60 = 0;
            v61 = v78;
            v62 = v84;
            v63 = v58;
            do
            {
              v64 = *(void **)(v55 + 8 * v60 + 32);
              swift_unknownObjectRetain();
              specialized closure #3 in PoemAggregationModelHandler.persistAggregationStats(cooccurrenceKeys:inputBatches:outputBatches:conversations:incremental:)(v60, v64, v51, v61, v63, v62, v85, v59, v33);
              swift_unknownObjectRelease();
              ++v60;
            }
            while (v56 != v60);
            swift_bridgeObjectRelease();

            return swift_bridgeObjectRelease_n();
          }
LABEL_47:
          __break(1u);
          return result;
        }
LABEL_40:
        swift_bridgeObjectRelease();
        v69 = v77;
        Logger.init()();
        v70 = v69;
        v71 = Logger.logObject.getter();
        v72 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v71, v72))
        {
          v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v73 = 0;
          v74 = "No features found to persist or send to PET";
LABEL_44:
          _os_log_impl(&dword_2282CC000, v71, v72, v74, v73, 2u);
          MEMORY[0x22E2B117C](v73, -1, -1);
          goto LABEL_45;
        }
        goto LABEL_45;
      }
    }
    else
    {
      v56 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v56 == *(_QWORD *)(v50 + 16))
      {
        if (v56)
          goto LABEL_30;
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();
    v75 = v79;
    Logger.init()();
    v70 = v75;
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v73 = 0;
      v74 = "Keys count mismatch while trying to persist stats";
      goto LABEL_44;
    }
LABEL_45:

    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v70, v47);
  }
  Logger.init()();
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v67 = 0;
    _os_log_impl(&dword_2282CC000, v65, v66, "Can't persist stats without a database", v67, 2u);
    MEMORY[0x22E2B117C](v67, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v18, v8);
}

id *PoemAggregationModelHandler.deinit()
{
  id *v0;

  outlined consume of CKContextClient??(v0[4]);
  swift_release();
  swift_release();
  return v0;
}

uint64_t PoemAggregationModelHandler.__deallocating_deinit()
{
  id *v0;

  outlined consume of CKContextClient??(v0[4]);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

id @nonobjc MLDictionaryFeatureProvider.init(dictionary:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithDictionary_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized closure #1 in closure #1 in PoemAggregationModelHandler.aggregateStats(conversations:)(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v49;

  (*(void (**)(void))(*(_QWORD *)a2 + 552))();
  v8 = *(void (**)(void))(*(_QWORD *)a3 + 304);
  v8();
  v9 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 576))(v9);
  v8();
  v10 = swift_bridgeObjectRelease();
  v11 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 504);
  v11(v10);
  v8();
  v12 = swift_bridgeObjectRelease();
  v13 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 528);
  v13(v12);
  v8();
  v14 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 600))(v14);
  v8();
  v15 = swift_bridgeObjectRelease();
  v16 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 480);
  v16(v15);
  v45 = a3;
  (*(void (**)(void))(*(_QWORD *)a3 + 312))();
  v17 = swift_bridgeObjectRelease();
  v11(v17);
  v18 = *(void (**)(void))(*(_QWORD *)a4 + 232);
  v18();
  v19 = swift_bridgeObjectRelease();
  v13(v19);
  v18();
  v20 = swift_bridgeObjectRelease();
  v16(v20);
  v47 = a4;
  (*(void (**)(void))(*(_QWORD *)a4 + 240))();
  v21 = swift_bridgeObjectRelease();
  v22 = ((uint64_t (*)(uint64_t))v16)(v21);
  if (v22 >> 62)
    v44 = _CocoaArrayWrapper.endIndex.getter();
  else
    v44 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
  v23 = swift_bridgeObjectRelease();
  v24 = ((uint64_t (*)(uint64_t))v16)(v23);
  v25 = v24;
  if (!(v24 >> 62))
  {
    v26 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v26)
      goto LABEL_5;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v26 = result;
  if (!result)
    return swift_bridgeObjectRelease_n();
LABEL_5:
  if (v26 >= 1)
  {
    v28 = 0;
    v49 = v25 & 0xC000000000000001;
    v42 = v26;
    v43 = v25;
    do
    {
      if (v49)
        v29 = (id)MEMORY[0x22E2AFF34](v28, v25);
      else
        v29 = *(id *)(v25 + 8 * v28 + 32);
      v30 = v29;
      v31 = objc_msgSend(v29, sel_identifier);
      if (v31)
      {
        v32 = v31;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v35 = v34;

        v36 = *(uint64_t (**)(void))(*(_QWORD *)v47 + 136);
        v37 = v36();
        v38 = specialized static PoemStreamUtilities.fetchSurroundingEntities(messages:index:contextWindowSize:)(v37, a1, a5);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 320))(v33, v35, v38, v44);
        v39 = swift_bridgeObjectRelease();
        v40 = ((uint64_t (*)(uint64_t))v36)(v39);
        v26 = v42;
        v41 = specialized static PoemStreamUtilities.fetchSurroundingMessages(messages:pivot:contextWindowSize:)(v40, a1, a5);
        swift_bridgeObjectRelease();
        v25 = v43;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v45 + 328))(v33, v35, v41);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

      }
      ++v28;
    }
    while (v26 != v28);
    return swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t j;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v26;
  int64_t v27;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v24 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v26 = (v7 - 1) & v7;
      v27 = v9;
      v10 = __clz(__rbit64(v7)) | (v9 << 6);
    }
    else
    {
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_34;
      if (v11 >= v24)
        return swift_release();
      v12 = *(_QWORD *)(v23 + 8 * v11);
      i = v9 + 1;
      if (!v12)
      {
        i = v9 + 2;
        if (v9 + 2 >= v24)
          return swift_release();
        v12 = *(_QWORD *)(v23 + 8 * i);
        if (!v12)
        {
          i = v9 + 3;
          if (v9 + 3 >= v24)
            return swift_release();
          v12 = *(_QWORD *)(v23 + 8 * i);
          if (!v12)
          {
            i = v9 + 4;
            if (v9 + 4 >= v24)
              return swift_release();
            v12 = *(_QWORD *)(v23 + 8 * i);
            if (!v12)
            {
              v14 = v9 + 5;
              if (v9 + 5 >= v24)
                return swift_release();
              v12 = *(_QWORD *)(v23 + 8 * v14);
              for (i = v9 + 5; !v12; ++v14)
              {
                i = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_35;
                if (i >= v24)
                  return swift_release();
                v12 = *(_QWORD *)(v23 + 8 * i);
              }
            }
          }
        }
      }
      v26 = (v12 - 1) & v12;
      v27 = i;
      v10 = __clz(__rbit64(v12)) + (i << 6);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136);
    v17 = swift_retain();
    v18 = v16(v17);
    v19 = v18;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v20 = result;
      if (!result)
        goto LABEL_4;
    }
    else
    {
      v20 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v20)
        goto LABEL_4;
    }
    if (v20 < 1)
      break;
    for (j = 0; j != v20; ++j)
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        v22 = MEMORY[0x22E2AFF34](j, v19);
      }
      else
      {
        v22 = *(_QWORD *)(v19 + 8 * j + 32);
        swift_retain();
      }
      specialized closure #1 in closure #1 in PoemAggregationModelHandler.aggregateStats(conversations:)(j, v22, a2, v15, a3);
      swift_release();
    }
LABEL_4:
    swift_bridgeObjectRelease_n();
    result = swift_release();
    v9 = v27;
    v7 = v26;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  _QWORD *v40;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v37 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v7 = 0;
  if (v6)
    goto LABEL_35;
LABEL_6:
  v8 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v8 < v37)
    {
      v9 = *(_QWORD *)(v36 + 8 * v8);
      ++v7;
      if (v9)
        goto LABEL_21;
      v7 = v8 + 1;
      if (v8 + 1 >= v37)
        return swift_release();
      v9 = *(_QWORD *)(v36 + 8 * v7);
      if (v9)
        goto LABEL_21;
      v7 = v8 + 2;
      if (v8 + 2 >= v37)
        return swift_release();
      v9 = *(_QWORD *)(v36 + 8 * v7);
      if (v9)
        goto LABEL_21;
      v7 = v8 + 3;
      if (v8 + 3 >= v37)
        return swift_release();
      v9 = *(_QWORD *)(v36 + 8 * v7);
      if (v9)
      {
LABEL_21:
        v6 = (v9 - 1) & v9;
        for (i = __clz(__rbit64(v9)) + (v7 << 6); ; i = v34 | (v7 << 6))
        {
          v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
          v14 = *v12;
          v13 = v12[1];
          swift_bridgeObjectRetain();
          v15 = (void *)MEMORY[0x22E2AF8EC](v14, v13);
          v16 = objc_msgSend(a2, sel_featureValueForName_, v15);

          if (!v16)
          {
            swift_bridgeObjectRelease();
            if (!v6)
              goto LABEL_6;
            goto LABEL_35;
          }
          objc_msgSend(v16, sel_doubleValue);
          v18 = v17;

          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v20 = (_QWORD *)*a3;
          v40 = (_QWORD *)*a3;
          *a3 = 0x8000000000000000;
          v22 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
          v23 = v20[2];
          v24 = (v21 & 1) == 0;
          v25 = v23 + v24;
          if (__OFADD__(v23, v24))
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v21;
          if (v20[3] >= v25)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v29 = v40;
              if ((v21 & 1) != 0)
                goto LABEL_30;
            }
            else
            {
              specialized _NativeDictionary.copy()();
              v29 = v40;
              if ((v26 & 1) != 0)
                goto LABEL_30;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
            v27 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
            if ((v26 & 1) != (v28 & 1))
              goto LABEL_41;
            v22 = v27;
            v29 = v40;
            if ((v26 & 1) != 0)
            {
LABEL_30:
              *(_QWORD *)(v29[7] + 8 * v22) = v18;
              goto LABEL_34;
            }
          }
          v29[(v22 >> 6) + 8] |= 1 << v22;
          v30 = (uint64_t *)(v29[6] + 16 * v22);
          *v30 = v14;
          v30[1] = v13;
          *(_QWORD *)(v29[7] + 8 * v22) = v18;
          v31 = v29[2];
          v32 = __OFADD__(v31, 1);
          v33 = v31 + 1;
          if (v32)
            goto LABEL_39;
          v29[2] = v33;
          swift_bridgeObjectRetain();
LABEL_34:
          *a3 = v29;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          if (!v6)
            goto LABEL_6;
LABEL_35:
          v34 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v10 = v8 + 4;
      if (v10 < v37)
      {
        v9 = *(_QWORD *)(v36 + 8 * v10);
        if (v9)
        {
          v7 = v10;
          goto LABEL_21;
        }
        while (1)
        {
          v7 = v10 + 1;
          if (__OFADD__(v10, 1))
            goto LABEL_40;
          if (v7 >= v37)
            return swift_release();
          v9 = *(_QWORD *)(v36 + 8 * v7);
          ++v10;
          if (v9)
            goto LABEL_21;
        }
      }
    }
    return swift_release();
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _OWORD *))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v25;
  int64_t v26;
  _OWORD v27[5];
  uint64_t v28;
  uint64_t v29;

  v29 = MEMORY[0x24BEE4AF8];
  v21 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  while (v4)
  {
    v25 = (v4 - 1) & v4;
    v26 = v6;
    v7 = __clz(__rbit64(v4)) | (v6 << 6);
LABEL_22:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v7);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(_QWORD *)(a1 + 56) + 88 * v7;
    v16 = *(_OWORD *)(v15 + 16);
    v27[0] = *(_OWORD *)v15;
    v27[1] = v16;
    v18 = *(_OWORD *)(v15 + 48);
    v17 = *(_OWORD *)(v15 + 64);
    v19 = *(_OWORD *)(v15 + 32);
    v28 = *(_QWORD *)(v15 + 80);
    v27[3] = v18;
    v27[4] = v17;
    v27[2] = v19;
    swift_bridgeObjectRetain();
    outlined retain of PoemCooccurrenceCounts((uint64_t)v27);
    v20 = a2(v13, v14, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v4 = v25;
    v6 = v26;
    if (v20)
    {
      MEMORY[0x22E2AFAFC](result);
      if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
    }
  }
  v8 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v8 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v8);
  v10 = v6 + 1;
  if (v9)
    goto LABEL_21;
  v10 = v6 + 2;
  if (v6 + 2 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v10);
  if (v9)
    goto LABEL_21;
  v10 = v6 + 3;
  if (v6 + 3 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v10);
  if (v9)
    goto LABEL_21;
  v10 = v6 + 4;
  if (v6 + 4 >= v22)
    goto LABEL_26;
  v9 = *(_QWORD *)(v21 + 8 * v10);
  if (v9)
  {
LABEL_21:
    v25 = (v9 - 1) & v9;
    v26 = v10;
    v7 = __clz(__rbit64(v9)) + (v10 << 6);
    goto LABEL_22;
  }
  v11 = v6 + 5;
  if (v6 + 5 >= v22)
  {
LABEL_26:
    swift_release();
    return v29;
  }
  v9 = *(_QWORD *)(v21 + 8 * v11);
  if (v9)
  {
    v10 = v6 + 5;
    goto LABEL_21;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v22)
      goto LABEL_26;
    v9 = *(_QWORD *)(v21 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Logger();
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v31 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v32 = a1 & 0xC000000000000001;
    v8 = 4;
    *(_QWORD *)&v7 = 138412290;
    v26 = v7;
    v27 = a1;
    v28 = a2;
    while (1)
    {
      v9 = v32 ? (id)MEMORY[0x22E2AFF34](v8 - 4, a1) : *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v33 = 0;
      if (objc_msgSend(a2, sel_predictionsFromBatch_error_, v9, &v33))
      {
        v12 = v33;

        MEMORY[0x22E2AFAFC]();
        if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        v13 = v33;
        v14 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        Logger.init()();
        v15 = v14;
        v16 = v14;
        v17 = Logger.logObject.getter();
        v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = swift_slowAlloc();
          v20 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v19 = v26;
          v21 = v14;
          v22 = _swift_stdlib_bridgeErrorToNSError();
          *(_QWORD *)(v19 + 4) = v22;
          *v20 = v22;

          _os_log_impl(&dword_2282CC000, v17, v18, "Error while inference in PoemAggregationModel: %@", (uint8_t *)v19, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          v23 = v20;
          a1 = v27;
          MEMORY[0x22E2B117C](v23, -1, -1);
          v24 = v19;
          a2 = v28;
          MEMORY[0x22E2B117C](v24, -1, -1);

        }
        else
        {

        }
        (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v30);

      }
      ++v8;
      if (v11 == v6)
      {
        swift_bridgeObjectRelease();
        return v34;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized PoemAggregationModelHandler.updateDoublesFeatureMap(conversations:cooccurrenceKey:existingFeatureMap:maxFaces:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  double v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t result;
  _QWORD v55[10];
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v57 = a5;
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256);
  swift_bridgeObjectRetain();
  v14 = swift_bridgeObjectRetain();
  v15 = v13(v14);
  if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v17 & 1) != 0))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 88 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = v18[3];
    v23 = v18[4];
    v24 = v18[5];
    v26 = v18[6];
    v25 = v18[7];
    v27 = v18[8];
    v29 = v18[9];
    v28 = v18[10];
    v55[8] = v29;
    v55[9] = v27;
    v55[6] = v19;
    v55[7] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v55[5] = v21;
    swift_bridgeObjectRetain();
    v55[4] = v22;
    swift_bridgeObjectRetain();
    v55[3] = v23;
    swift_bridgeObjectRetain();
    v55[2] = v24;
    swift_bridgeObjectRetain();
    v55[1] = v26;
    swift_bridgeObjectRetain();
    v55[0] = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v57 >= 1)
    {
      v56 = 0x80000002284DF6A0;
      v30 = 1;
      while (1)
      {
        v58 = v30;
        v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        v58 = 0xD000000000000017;
        v59 = v56;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v33 = v58;
        v32 = v59;
        if (!*(_QWORD *)(v20 + 16))
          goto LABEL_8;
        v34 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if ((v35 & 1) != 0)
          v36 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v34);
        else
LABEL_8:
          v36 = 0;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v58 = (unint64_t)a4;
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v32);
        v40 = a4[2];
        v41 = (v38 & 1) == 0;
        v42 = v40 + v41;
        if (__OFADD__(v40, v41))
          break;
        v43 = v38;
        if (a4[3] >= v42)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
          v44 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v32);
          if ((v43 & 1) != (v45 & 1))
            goto LABEL_32;
          v39 = v44;
        }
        v46 = (double)v36;
        a4 = (_QWORD *)v58;
        if ((v43 & 1) != 0)
        {
          *(double *)(*(_QWORD *)(v58 + 56) + 8 * v39) = v46;
        }
        else
        {
          *(_QWORD *)(v58 + 8 * (v39 >> 6) + 64) |= 1 << v39;
          v47 = (uint64_t *)(a4[6] + 16 * v39);
          *v47 = v33;
          v47[1] = v32;
          *(double *)(a4[7] + 8 * v39) = v46;
          v48 = a4[2];
          v49 = __OFADD__(v48, 1);
          v50 = v48 + 1;
          if (v49)
            goto LABEL_30;
          a4[2] = v50;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v57 == v30)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (uint64_t)a4;
        }
        v49 = __OFADD__(v30++, 1);
        if (v49)
          goto LABEL_29;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
    }
    __break(1u);
LABEL_32:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Logger.init()();
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_2282CC000, v51, v52, "No cooccurrence count found while updating feature map", v53, 2u);
      MEMORY[0x22E2B117C](v53, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (uint64_t)a4;
  }
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v5 = result;
  v6 = 0;
  v19 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(result + 64);
  v18 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v11 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0)
    goto LABEL_6;
LABEL_7:
  v14 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v14 < v11)
    {
      v15 = *(_QWORD *)(v18 + 8 * v14);
      ++v6;
      if (v15)
        goto LABEL_22;
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_26;
      v15 = *(_QWORD *)(v18 + 8 * v6);
      if (v15)
        goto LABEL_22;
      v6 = v14 + 2;
      if (v14 + 2 >= v11)
        goto LABEL_26;
      v15 = *(_QWORD *)(v18 + 8 * v6);
      if (v15)
        goto LABEL_22;
      v6 = v14 + 3;
      if (v14 + 3 >= v11)
        goto LABEL_26;
      v15 = *(_QWORD *)(v18 + 8 * v6);
      if (v15)
      {
LABEL_22:
        v10 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v6 << 6); ; i = v12 | (v6 << 6))
        {
          v17 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * i) + 224);
          swift_retain();
          if ((v17(a2, a3) & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            result = specialized ContiguousArray._endMutation()();
            if (!v10)
              goto LABEL_7;
          }
          else
          {
            result = swift_release();
            if (!v10)
              goto LABEL_7;
          }
LABEL_6:
          v12 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      v16 = v14 + 4;
      if (v16 < v11)
      {
        v15 = *(_QWORD *)(v18 + 8 * v16);
        if (v15)
        {
          v6 = v16;
          goto LABEL_22;
        }
        while (1)
        {
          v6 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_28;
          if (v6 >= v11)
            break;
          v15 = *(_QWORD *)(v18 + 8 * v6);
          ++v16;
          if (v15)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release();
    return v19;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v5 = result;
  v6 = 0;
  v19 = MEMORY[0x24BEE4AF8];
  v7 = *(_QWORD *)(result + 64);
  v18 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v11 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0)
    goto LABEL_6;
LABEL_7:
  v14 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v14 < v11)
    {
      v15 = *(_QWORD *)(v18 + 8 * v14);
      ++v6;
      if (v15)
        goto LABEL_22;
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_26;
      v15 = *(_QWORD *)(v18 + 8 * v6);
      if (v15)
        goto LABEL_22;
      v6 = v14 + 2;
      if (v14 + 2 >= v11)
        goto LABEL_26;
      v15 = *(_QWORD *)(v18 + 8 * v6);
      if (v15)
        goto LABEL_22;
      v6 = v14 + 3;
      if (v14 + 3 >= v11)
        goto LABEL_26;
      v15 = *(_QWORD *)(v18 + 8 * v6);
      if (v15)
      {
LABEL_22:
        v10 = (v15 - 1) & v15;
        for (i = __clz(__rbit64(v15)) + (v6 << 6); ; i = v12 | (v6 << 6))
        {
          v17 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v5 + 56) + 8 * i) + 216);
          swift_retain();
          if ((v17(a2, a3) & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            result = specialized ContiguousArray._endMutation()();
            if (!v10)
              goto LABEL_7;
          }
          else
          {
            result = swift_release();
            if (!v10)
              goto LABEL_7;
          }
LABEL_6:
          v12 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      v16 = v14 + 4;
      if (v16 < v11)
      {
        v15 = *(_QWORD *)(v18 + 8 * v16);
        if (v15)
        {
          v6 = v16;
          goto LABEL_22;
        }
        while (1)
        {
          v6 = v16 + 1;
          if (__OFADD__(v16, 1))
            goto LABEL_28;
          if (v6 >= v11)
            break;
          v15 = *(_QWORD *)(v18 + 8 * v6);
          ++v16;
          if (v15)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release();
    return v19;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized PoemAggregationModelHandler.getListFeaturesMap(conversations:cooccurrenceKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v91)(void);
  uint64_t (*v92)(uint64_t);
  uint64_t v93;
  uint64_t v94;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 352))(a2, a3);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = MEMORY[0x24BEE4AF8];
  v83 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v91 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 136);
  v13 = v91();
  v14 = specialized Sequence.filter(_:)(v13, v9, v11);
  swift_bridgeObjectRelease();
  if (v14 >> 62)
    v15 = _CocoaArrayWrapper.endIndex.getter();
  else
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  v89 = a1;
  if (v15)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 & ~(v15 >> 63), 0);
    if (v15 < 0)
    {
      __break(1u);
      goto LABEL_74;
    }
    v17 = v5;
    v82 = v7;
    v18 = 0;
    v19 = v12;
    do
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        v20 = MEMORY[0x22E2AFF34](v18, v14);
      }
      else
      {
        v20 = *(_QWORD *)(v14 + 8 * v18 + 32);
        swift_retain();
      }
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)v20 + 136))();
      if (v21 >> 62)
        v22 = _CocoaArrayWrapper.endIndex.getter();
      else
        v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_release();
      swift_bridgeObjectRelease();
      v24 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      if (v24 >= v23 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
      ++v18;
      *(_QWORD *)(v19 + 16) = v24 + 1;
      *(double *)(v19 + 8 * v24 + 32) = (double)v22;
    }
    while (v15 != v18);
    swift_bridgeObjectRelease();
    v7 = v82;
  }
  else
  {
    v17 = v5;
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x24BEE4AF8];
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD00000000000001DLL, 0x80000002284DF5A0, isUniquelyReferenced_nonNull_native);
  v26 = swift_bridgeObjectRelease();
  v27 = ((uint64_t (*)(uint64_t))v91)(v26);
  v28 = specialized Sequence.filter(_:)(v27, v17, v7);
  swift_bridgeObjectRelease();
  if (v28 >> 62)
    v29 = _CocoaArrayWrapper.endIndex.getter();
  else
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v29)
  {
    v94 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29 & ~(v29 >> 63), 0);
    if ((v29 & 0x8000000000000000) == 0)
    {
      v30 = 0;
      v31 = v94;
      do
      {
        if ((v28 & 0xC000000000000001) != 0)
        {
          v32 = MEMORY[0x22E2AFF34](v30, v28);
        }
        else
        {
          v32 = *(_QWORD *)(v28 + 8 * v30 + 32);
          swift_retain();
        }
        v33 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 136))();
        if (v33 >> 62)
          v34 = _CocoaArrayWrapper.endIndex.getter();
        else
          v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_release();
        swift_bridgeObjectRelease();
        v36 = *(_QWORD *)(v94 + 16);
        v35 = *(_QWORD *)(v94 + 24);
        if (v36 >= v35 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        ++v30;
        *(_QWORD *)(v94 + 16) = v36 + 1;
        *(double *)(v94 + 8 * v36 + 32) = (double)v34;
      }
      while (v29 != v30);
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
LABEL_74:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v31 = MEMORY[0x24BEE4AF8];
LABEL_33:
  v37 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, 0xD00000000000001DLL, 0x80000002284DF5C0, v37);
  v38 = v83;
  swift_bridgeObjectRelease();
  v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 256);
  v40 = swift_bridgeObjectRetain();
  v92 = v39;
  v41 = v39(v40);
  if (*(_QWORD *)(v41 + 16) && (v42 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v43 & 1) != 0))
  {
    v44 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 88 * v42);
    v45 = v44[5];
    v84 = *v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v84)
    {
      swift_bridgeObjectRetain();
      outlined consume of PoemCooccurrenceCounts?(v84);
    }
    else
    {
      v45 = MEMORY[0x24BEE4AF8];
    }
    v38 = v83;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = MEMORY[0x24BEE4AF8];
  }
  v46 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v45, 0xD00000000000001CLL, 0x80000002284DF5E0, v46);
  swift_bridgeObjectRelease();
  v47 = swift_bridgeObjectRetain();
  v48 = v92(v47);
  if (*(_QWORD *)(v48 + 16) && (v49 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v50 & 1) != 0))
  {
    v51 = (uint64_t *)(*(_QWORD *)(v48 + 56) + 88 * v49);
    v52 = v51[6];
    v85 = *v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v85)
    {
      swift_bridgeObjectRetain();
      outlined consume of PoemCooccurrenceCounts?(v85);
    }
    else
    {
      v52 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52 = MEMORY[0x24BEE4AF8];
  }
  v53 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v52, 0xD000000000000017, 0x80000002284DF600, v53);
  swift_bridgeObjectRelease();
  v54 = swift_bridgeObjectRetain();
  v55 = v92(v54);
  if (*(_QWORD *)(v55 + 16) && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v57 & 1) != 0))
  {
    v58 = (uint64_t *)(*(_QWORD *)(v55 + 56) + 88 * v56);
    v59 = v58[7];
    v86 = *v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v86)
    {
      swift_bridgeObjectRetain();
      outlined consume of PoemCooccurrenceCounts?(v86);
    }
    else
    {
      v59 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v59 = MEMORY[0x24BEE4AF8];
  }
  v60 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, 0xD00000000000001CLL, 0x80000002284DF620, v60);
  swift_bridgeObjectRelease();
  v61 = swift_bridgeObjectRetain();
  v62 = v92(v61);
  if (*(_QWORD *)(v62 + 16) && (v63 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v64 & 1) != 0))
  {
    v65 = (uint64_t *)(*(_QWORD *)(v62 + 56) + 88 * v63);
    v87 = *v65;
    v66 = v65[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v87)
    {
      swift_bridgeObjectRetain();
      outlined consume of PoemCooccurrenceCounts?(v87);
    }
    else
    {
      v66 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v66 = MEMORY[0x24BEE4AF8];
  }
  v67 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v66, 0xD000000000000019, 0x80000002284DF640, v67);
  swift_bridgeObjectRelease();
  v68 = swift_bridgeObjectRetain();
  v69 = v92(v68);
  if (*(_QWORD *)(v69 + 16) && (v70 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v71 & 1) != 0))
  {
    v72 = (uint64_t *)(*(_QWORD *)(v69 + 56) + 88 * v70);
    v88 = *v72;
    v73 = v72[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v88)
    {
      swift_bridgeObjectRetain();
      outlined consume of PoemCooccurrenceCounts?(v88);
    }
    else
    {
      v73 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = MEMORY[0x24BEE4AF8];
  }
  v74 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v73, 0xD000000000000014, 0x80000002284DF660, v74);
  swift_bridgeObjectRelease();
  v75 = swift_bridgeObjectRetain();
  v76 = v92(v75);
  if (*(_QWORD *)(v76 + 16) && (v77 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v78 & 1) != 0))
  {
    v79 = (uint64_t *)(*(_QWORD *)(v76 + 56) + 88 * v77);
    v93 = *v79;
    v80 = v79[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v93)
    {
      swift_bridgeObjectRetain();
      outlined consume of PoemCooccurrenceCounts?(v93);
    }
    else
    {
      v80 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v80 = MEMORY[0x24BEE4AF8];
  }
  v81 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v80, 0xD000000000000019, 0x80000002284DF680, v81);
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t specialized closure #3 in PoemAggregationModelHandler.persistAggregationStats(cooccurrenceKeys:inputBatches:outputBatches:conversations:incremental:)(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, double a9)
{
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t result;
  void *v25;
  double v26;
  char v27;
  char v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  double v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  char *v77;
  unint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t *boxed_opaque_existential_0;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[5];
  uint64_t v117;
  unint64_t v118;

  v109 = a7;
  v110 = a8;
  v108 = a4;
  v111 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  MEMORY[0x24BDAC7A8](v111);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v113 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v107 = (uint64_t)&v103 - v21;
  v118 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v22 = objc_msgSend(a2, sel_featureNames);
  v23 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  swift_unknownObjectRetain();
  specialized Sequence.forEach(_:)(v23, a2, &v118);
  swift_bridgeObjectRelease();
  result = swift_unknownObjectRelease();
  v112 = v16;
  if ((a3 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v25 = *(void **)(a3 + 8 * a1 + 32);
      swift_unknownObjectRetain();
      goto LABEL_5;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v25 = (void *)MEMORY[0x22E2AFF34](a1, a3);
LABEL_5:
  v26 = COERCE_DOUBLE(specialized static PoemStreamUtilities.getModelConfidence(output:)(v25));
  v28 = v27;
  swift_unknownObjectRelease();
  v29 = v118;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v116[0] = v29;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x68745F6C65646F6DLL, 0xEF646C6F68736572, isUniquelyReferenced_nonNull_native, a9);
  v31 = v116[0];
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
    v32 = 0.0;
  else
    v32 = v26;
  v33 = swift_isUniquelyReferenced_nonNull_native();
  v116[0] = v31;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000010, 0x80000002284DF550, v33, v32);
  v34 = v116[0];
  v35 = swift_bridgeObjectRelease();
  v36 = (double)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 416))(v35);
  v37 = swift_isUniquelyReferenced_nonNull_native();
  v116[0] = v34;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x736D5F746E756F63, 0xEA00000000007367, v37, v36);
  v38 = v116[0];
  v39 = swift_bridgeObjectRelease();
  v40 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 136))(v39) + 16);
  swift_bridgeObjectRelease();
  v41 = swift_isUniquelyReferenced_nonNull_native();
  v116[0] = v38;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x7268745F766E6F63, 0xEC00000073646165, v41, (double)v40);
  v42 = (_QWORD *)v116[0];
  v118 = v116[0];
  result = swift_bridgeObjectRelease();
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_36;
  if (*(_QWORD *)(a6 + 16) > a1)
  {
    v114 = v18;
    v115 = v17;
    v43 = a6 + 16 * a1;
    v44 = *(_QWORD *)(v43 + 32);
    v46 = *(_QWORD *)(v43 + 40);
    v45 = (uint64_t *)(v43 + 32);
    v47 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 352);
    swift_bridgeObjectRetain();
    v48 = v47(v44, v46);
    v50 = v49;
    v52 = v51;
    v54 = v53;
    swift_bridgeObjectRelease();
    v55 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 344))(v48, v50);
    if (!v56)
    {
      swift_bridgeObjectRelease();
      v85 = v107;
      Logger.init()();
      swift_bridgeObjectRetain();
      v86 = Logger.logObject.getter();
      v87 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc();
        v89 = swift_slowAlloc();
        v116[0] = v89;
        *(_DWORD *)v88 = 136315138;
        swift_bridgeObjectRetain();
        v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2282CC000, v86, v87, "Unable to find name for id %s while trying to persist stats", v88, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v89, -1, -1);
        MEMORY[0x22E2B117C](v88, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v85, v115);
      return swift_bridgeObjectRelease();
    }
    v57 = v55;
    v58 = v56;
    v107 = v52;
    v59 = *v45;
    v60 = v45[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v61 = specialized PoemAggregationModelHandler.updateDoublesFeatureMap(conversations:cooccurrenceKey:existingFeatureMap:maxFaces:)(a5, v59, v60, v42, v108);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v118 = v61;
    swift_bridgeObjectRelease();
    v62 = v58;
    v63 = v54;
    v64 = *v45;
    v65 = v45[1];
    swift_bridgeObjectRetain();
    v66 = specialized PoemAggregationModelHandler.getListFeaturesMap(conversations:cooccurrenceKey:)(a5, v64, v65);
    v108 = v48;
    v67 = v66;
    swift_bridgeObjectRelease();
    v68 = v57;
    v70 = *v45;
    v69 = v45[1];
    v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v109) + 0xA0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v104 = v67;
    v102 = v67;
    v71 = v70;
    v72 = v68;
    v105 = v62;
    v73 = v107;
    v106(v71, v69, v68, v62, v108, v50, v107, v63, v61, v102);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v74 = v110;
    if (*(_QWORD *)(v110 + 16))
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v73, v63);
      v76 = v75;
      swift_bridgeObjectRelease();
      v77 = v113;
      if (*(_QWORD *)(v74 + 16))
      {
        swift_bridgeObjectRetain();
        v78 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v63);
        if ((v79 & 1) != 0)
        {
          LODWORD(v109) = v76;
          v80 = (uint64_t *)(*(_QWORD *)(v74 + 56) + 16 * v78);
          v82 = *v80;
          v81 = v80[1];
          swift_bridgeObjectRetain();
          v83 = v63;
          swift_bridgeObjectRelease();
          if (v72 == v82 && v105 == v81)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v84 = 1;
          }
          else
          {
            v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v84 = v101 & 1;
          }
          v90 = v104;
          LOBYTE(v76) = (_BYTE)v109;
          goto LABEL_26;
        }
        swift_bridgeObjectRelease();
        v83 = v63;
      }
      else
      {
        v83 = v63;
      }
    }
    else
    {
      v83 = v63;
      LOBYTE(v76) = 0;
      v77 = v113;
    }
    swift_bridgeObjectRelease();
    v84 = -1;
    v90 = v104;
LABEL_26:
    type metadata accessor for AutonamingModelFeatures();
    v91 = *v45;
    v92 = v45[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v93 = AutonamingModelFeatures.__allocating_init(featureMap:annotation:groundTruthAvailable:cooccurrenceKey:listFeatureMap:)(v61, v84, v76 & 1, v91, v92, v90);
    v94 = (uint64_t)v112;
    (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v93) + 0xF8))();

    Logger.init()();
    v95 = v83;
    swift_bridgeObjectRetain();
    v96 = Logger.logObject.getter();
    v97 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = (uint8_t *)swift_slowAlloc();
      v99 = swift_slowAlloc();
      v116[0] = v99;
      *(_DWORD *)v98 = 136315138;
      swift_bridgeObjectRetain();
      v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v95, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v96, v97, "Logging training data to PET for %s", v98, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v99, -1, -1);
      MEMORY[0x22E2B117C](v98, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v114 + 8))(v77, v115);
    type metadata accessor for EventTracker();
    static EventTracker.shared.getter();
    v116[3] = v111;
    v116[4] = lazy protocol witness table accessor for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData();
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v116);
    outlined init with copy of DocumentUnderstanding_Autonaming_TrainingData(v94, (uint64_t)boxed_opaque_existential_0);
    dispatch thunk of EventTracker.log(message:objcClassName:subGroup:)();
    swift_release();
    outlined destroy of DocumentUnderstanding_Autonaming_TrainingData(v94);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v116);
    return swift_bridgeObjectRelease();
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized PoemModelingParameters.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001BLL && a2 == 0x80000002284DF470
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002284DF490
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736563614678616DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7A69536863746162 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002284DF4B0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6B6361426B6F6F6CLL && a2 == 0xEF73726165596E49)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized PoemModelingParameters.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PoemModelingParameters.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PoemModelingParameters.CodingKeys and conformance PoemModelingParameters.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v24 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  v10 = v9;
  v23 = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  v22 = 2;
  v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v21 = 3;
  v18 = KeyedDecodingContainer.decode(_:forKey:)();
  v20 = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  v14 = v13;
  v19 = 5;
  KeyedDecodingContainer.decode(_:forKey:)();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v18;
  a2[4] = v14;
  a2[5] = v16;
  return result;
}

uint64_t sub_2283B72E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_2283B7318(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 136);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_2283B7354@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_2283B7384(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 160);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_2283B73C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[8];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 176))(v4);
  return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, a2, &demangling cache variable for type metadata for PoemAnalyticsUtilities?);
}

uint64_t sub_2283B740C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(_BYTE *);
  _BYTE v5[64];

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PoemAnalyticsUtilities?);
  v3 = *(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 184);
  outlined release of PoemAnalyticsUtilities?((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of CKContextClient??);
  return v3(v5);
}

uint64_t sub_2283B7464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v4[7];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 200))(v4);
  return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, a2, &demangling cache variable for type metadata for PoemModelingParameters?);
}

uint64_t getEnumTagSinglePayload for PoemModelingParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PoemModelingParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PoemModelingParameters()
{
  return &type metadata for PoemModelingParameters;
}

uint64_t type metadata accessor for PoemAggregationModelHandler()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for PoemModelingParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2283B7588 + 4 * byte_2284C60BB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2283B75BC + 4 * byte_2284C60B6[v4]))();
}

uint64_t sub_2283B75BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283B75C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283B75CCLL);
  return result;
}

uint64_t sub_2283B75D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283B75E0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2283B75E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283B75EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PoemModelingParameters.CodingKeys()
{
  return &unk_24F0FA918;
}

uint64_t outlined release of PoemAnalyticsUtilities?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return a1;
}

unint64_t lazy protocol witness table accessor for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData;
  if (!lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData)
  {
    v1 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(255);
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData);
  }
  return result;
}

uint64_t outlined init with copy of DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_Autonaming_TrainingData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of PoemCooccurrenceCounts?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id partial apply for closure #1 in PoemAggregationModelHandler.prepareInputForInference(conversations:incremental:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return closure #1 in PoemAggregationModelHandler.prepareInputForInference(conversations:incremental:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(_QWORD ***)(v3 + 40));
}

uint64_t outlined retain of PoemCooccurrenceCounts(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PoemModelingParameters and conformance PoemModelingParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PoemModelingParameters and conformance PoemModelingParameters;
  if (!lazy protocol witness table cache variable for type PoemModelingParameters and conformance PoemModelingParameters)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for PoemModelingParameters, &type metadata for PoemModelingParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PoemModelingParameters and conformance PoemModelingParameters);
  }
  return result;
}

uint64_t DocumentUnderstanding_PosTaggingResult.tag.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 20));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for DocumentUnderstanding_PosTaggingResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_PosTaggingResult;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_PosTaggingResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for DocumentUnderstanding_PosTaggingResult.tag : DocumentUnderstanding_PosTaggingResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 20));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_PosTaggingResult.tag : DocumentUnderstanding_PosTaggingResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 20));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_PosTaggingResult.tag.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_PosTaggingResult.tag.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 20);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_PosTaggingResult.hasTag.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 20) + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_PosTaggingResult.clearTag()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 20));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_PosTaggingResult.text.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 24));
  if (v1[1])
    v2 = *v1;
  else
    v2 = 0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t key path getter for DocumentUnderstanding_PosTaggingResult.text : DocumentUnderstanding_PosTaggingResult@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 24));
  v4 = v3[1];
  if (v4)
  {
    v5 = *v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for DocumentUnderstanding_PosTaggingResult.text : DocumentUnderstanding_PosTaggingResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(a2 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 24));
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v4 = v3;
  v4[1] = v2;
  return result;
}

uint64_t DocumentUnderstanding_PosTaggingResult.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DocumentUnderstanding_PosTaggingResult.text.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 24);
  *(_DWORD *)(a1 + 24) = v3;
  v4 = (uint64_t *)(v1 + v3);
  v5 = v4[1];
  if (v5)
  {
    v6 = *v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain();
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.labelName.modify;
}

BOOL DocumentUnderstanding_PosTaggingResult.hasText.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 24) + 8) != 0;
}

Swift::Void __swiftcall DocumentUnderstanding_PosTaggingResult.clearText()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 24));
  swift_bridgeObjectRelease();
  *v1 = 0;
  v1[1] = 0;
}

uint64_t DocumentUnderstanding_PosTaggingResult.start.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 28));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t DocumentUnderstanding_PosTaggingResult.start.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v4 = v1 + *(int *)(result + 28);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_PosTaggingResult.start.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 28);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_PosTaggingResult.hasStart.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 28) + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_PosTaggingResult.clearStart()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 28);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_PosTaggingResult.len.getter()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 32));
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t DocumentUnderstanding_PosTaggingResult.len.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v4 = v1 + *(int *)(result + 32);
  *(_QWORD *)v4 = a1;
  *(_BYTE *)(v4 + 8) = 0;
  return result;
}

uint64_t (*DocumentUnderstanding_PosTaggingResult.len.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = v1;
  v3 = *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 32);
  *(_DWORD *)(a1 + 16) = v3;
  v4 = (uint64_t *)(v1 + v3);
  if (*((_BYTE *)v4 + 8))
    v5 = 0;
  else
    v5 = *v4;
  *(_QWORD *)a1 = v5;
  return DocumentUnderstanding_ClientInterface_StructuredEntityLabel.confidenceScore.modify;
}

BOOL DocumentUnderstanding_PosTaggingResult.hasLen.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 32) + 8) & 1) == 0;
}

Swift::Void __swiftcall DocumentUnderstanding_PosTaggingResult.clearLen()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_PosTaggingResult() + 32);
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t DocumentUnderstanding_PosTaggingResult.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DocumentUnderstanding_PosTaggingResult.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*DocumentUnderstanding_PosTaggingResult.unknownFields.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

int *DocumentUnderstanding_PosTaggingResult.init()@<X0>(uint64_t a1@<X8>)
{
  int *result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = (int *)type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v3 = (_QWORD *)(a1 + result[5]);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(a1 + result[6]);
  *v4 = 0;
  v4[1] = 0;
  v5 = a1 + result[7];
  *(_QWORD *)v5 = 0;
  *(_BYTE *)(v5 + 8) = 1;
  v6 = a1 + result[8];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

void *DocumentUnderstanding_PosTaggingResult.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_PosTaggingResult.protoMessageName;
}

unint64_t static DocumentUnderstanding_PosTaggingResult.protoMessageName.getter()
{
  return 0xD000000000000027;
}

uint64_t DocumentUnderstanding_PosTaggingResult._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_PosTaggingResult._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_PosTaggingResult._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_PosTaggingResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_PosTaggingResult.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for DocumentUnderstanding_PosTaggingResult();
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for DocumentUnderstanding_PosTaggingResult();
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(v0);
    closure #3 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(v0);
    closure #4 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  if (*(_QWORD *)(a1 + *(int *)(result + 20) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  if (*(_QWORD *)(a1 + *(int *)(result + 24) + 8))
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  if ((*(_BYTE *)(a1 + *(int *)(result + 28) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  if ((*(_BYTE *)(a1 + *(int *)(result + 32) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  return result;
}

Swift::Int DocumentUnderstanding_PosTaggingResult.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_PosTaggingResult@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = UnknownStorage.init()();
  v5 = a1[6];
  v6 = (_QWORD *)(a2 + a1[5]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  v8 = a1[8];
  v9 = a2 + a1[7];
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  v10 = a2 + v8;
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_PosTaggingResult()
{
  return 0xD000000000000027;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_PosTaggingResult()
{
  return DocumentUnderstanding_PosTaggingResult.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_PosTaggingResult()
{
  return DocumentUnderstanding_PosTaggingResult.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_PosTaggingResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_PosTaggingResult@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_PosTaggingResult._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_PosTaggingResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_PosTaggingResult()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_PosTaggingResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  _QWORD *v33;
  int v34;
  void (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v38 - v9;
  v11 = (int *)type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v12 = v11[5];
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_27;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_27;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
LABEL_10:
    v19 = v11[6];
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (v23)
      {
        if (*v20 != *v22 || v21 != v23)
        {
          v18 = 0;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            return v18 & 1;
        }
LABEL_19:
        v25 = v11[7];
        v26 = (_QWORD *)(a1 + v25);
        v27 = *(_BYTE *)(a1 + v25 + 8);
        v28 = (_QWORD *)(a2 + v25);
        v29 = *(unsigned __int8 *)(a2 + v25 + 8);
        if ((v27 & 1) != 0)
        {
          if (!v29)
            goto LABEL_27;
        }
        else
        {
          if (*v26 != *v28)
            LOBYTE(v29) = 1;
          if ((v29 & 1) != 0)
            goto LABEL_27;
        }
        v30 = v11[8];
        v31 = (_QWORD *)(a1 + v30);
        v32 = *(_BYTE *)(a1 + v30 + 8);
        v33 = (_QWORD *)(a2 + v30);
        v34 = *(unsigned __int8 *)(a2 + v30 + 8);
        if ((v32 & 1) != 0)
        {
          if (!v34)
            goto LABEL_27;
        }
        else
        {
          if (*v31 != *v33)
            LOBYTE(v34) = 1;
          if ((v34 & 1) != 0)
            goto LABEL_27;
        }
        v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v36(v10, a1, v4);
        v36(v8, a2, v4);
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)();
        v37 = *(void (**)(char *, uint64_t))(v5 + 8);
        v37(v8, v4);
        v37(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v23)
    {
      goto LABEL_19;
    }
LABEL_27:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_PosTaggingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_PosTaggingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_PosTaggingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_PosTaggingResult()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
}

uint64_t sub_2283B8C28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v5 = (uint64_t *)(a1 + *(int *)(result + 28));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_2283B8C6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v5 = a2 + *(int *)(result + 28);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_2283B8CA4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;

  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v5 = (uint64_t *)(a1 + *(int *)(result + 32));
  if (*((_BYTE *)v5 + 8))
    v6 = 0;
  else
    v6 = *v5;
  *a2 = v6;
  return result;
}

uint64_t sub_2283B8CE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v5 = a2 + *(int *)(result + 32);
  *(_QWORD *)v5 = v3;
  *(_BYTE *)(v5 + 8) = 0;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_PosTaggingResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (char *)a1 + v16;
    v19 = (char *)a2 + v16;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = (char *)a1 + v17;
    v21 = (char *)a2 + v17;
    v20[8] = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DocumentUnderstanding_PosTaggingResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentUnderstanding_PosTaggingResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a1 + v16;
  v20 = a2 + v16;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentUnderstanding_PosTaggingResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  *(_BYTE *)(v14 + 8) = *((_BYTE *)v15 + 8);
  *(_QWORD *)v14 = v16;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  *(_BYTE *)(v18 + 8) = *((_BYTE *)v19 + 8);
  *(_QWORD *)v18 = v20;
  return a1;
}

uint64_t initializeWithTake for DocumentUnderstanding_PosTaggingResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  return a1;
}

uint64_t assignWithTake for DocumentUnderstanding_PosTaggingResult(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = a3[8];
  v19 = a1 + v17;
  v20 = a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  v21 = a1 + v18;
  v22 = a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_PosTaggingResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283B914C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_PosTaggingResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283B91E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for DocumentUnderstanding_PosTaggingResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

const char *AutonamingConstants.keyDoubleFeatures.unsafeMutableAddressor()
{
  return "doubleFeatures";
}

const char *AutonamingConstants.keyListFeatures.unsafeMutableAddressor()
{
  return "listFeatures";
}

void *AutonamingConstants.modelPositiveClassIndex.unsafeMutableAddressor()
{
  return &static AutonamingConstants.modelPositiveClassIndex;
}

void *AutonamingConstants.defaultMadConfidenceThreshold.unsafeMutableAddressor()
{
  return &static AutonamingConstants.defaultMadConfidenceThreshold;
}

void *AutonamingConstants.annotationUnknown.unsafeMutableAddressor()
{
  return &static AutonamingConstants.annotationUnknown;
}

void *AutonamingConstants.annotationCorrect.unsafeMutableAddressor()
{
  return &static AutonamingConstants.annotationCorrect;
}

void *AutonamingConstants.annotationIncorrect.unsafeMutableAddressor()
{
  return &static AutonamingConstants.annotationIncorrect;
}

const char *AutonamingConstants.pronounsSender.unsafeMutableAddressor()
{
  return "\\b(i|me)\\b";
}

const char *AutonamingConstants.pronounsReceiver.unsafeMutableAddressor()
{
  return "\\b(you|u)\\b";
}

void *AutonamingConstants.defaultModelPositiveClassThreshold.unsafeMutableAddressor()
{
  return &static AutonamingConstants.defaultModelPositiveClassThreshold;
}

void *AutonamingConstants.defaultContextWindowSize.unsafeMutableAddressor()
{
  return &static AutonamingConstants.defaultContextWindowSize;
}

void *AutonamingConstants.defaultMaxFaces.unsafeMutableAddressor()
{
  return &static AutonamingConstants.defaultMaxFaces;
}

void *AutonamingConstants.defaultBatchSize.unsafeMutableAddressor()
{
  return &static AutonamingConstants.defaultBatchSize;
}

void *AutonamingConstants.defaultLookBackInYears.unsafeMutableAddressor()
{
  return &static AutonamingConstants.defaultLookBackInYears;
}

void *AutonamingConstants.poemTrialNamespace.unsafeMutableAddressor()
{
  return &static AutonamingConstants.poemTrialNamespace;
}

const char *AutonamingConstants.xgbModelHeadFactor.unsafeMutableAddressor()
{
  return "autonaming";
}

void *AutonamingConstants.autonamingConfig.unsafeMutableAddressor()
{
  return &static AutonamingConstants.autonamingConfig;
}

const char *AutonamingConstants.featureFaceCount.unsafeMutableAddressor()
{
  return "face_cnt_";
}

void *AutonamingConstants.featureSenderFaceCount.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureSenderFaceCount;
}

void *AutonamingConstants.featureReceiverFaceCount.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureReceiverFaceCount;
}

void *AutonamingConstants.featureTaggerFaceCount.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureTaggerFaceCount;
}

void *AutonamingConstants.featurePronounFaceCount.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featurePronounFaceCount;
}

void *AutonamingConstants.featureCooccurrenceCount.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureCooccurrenceCount;
}

const char *AutonamingConstants.featureEntityCount.unsafeMutableAddressor()
{
  return "entity cnt";
}

const char *AutonamingConstants.featureImageCount.unsafeMutableAddressor()
{
  return "image cnt";
}

void *AutonamingConstants.featureEntityImageRatio.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureEntityImageRatio;
}

void *AutonamingConstants.featureImageEntityRatio.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureImageEntityRatio;
}

const char *AutonamingConstants.featureDeviceOwner.unsafeMutableAddressor()
{
  return "device owner";
}

const char *AutonamingConstants.featureImageFaceRatio.unsafeMutableAddressor()
{
  return "img per face";
}

void *AutonamingConstants.featureNameMentionsRatio.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureNameMentionsRatio;
}

const char *AutonamingConstants.featureUniqueNames.unsafeMutableAddressor()
{
  return "unique names";
}

const char *AutonamingConstants.featureUniqueFaces.unsafeMutableAddressor()
{
  return "unique faces";
}

void *AutonamingConstants.featureEcrFaceCount.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureEcrFaceCount;
}

void *AutonamingConstants.featureMessagesCountInThreadsForFace.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureMessagesCountInThreadsForFace;
}

void *AutonamingConstants.featureMessagesCountInThreadsForName.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureMessagesCountInThreadsForName;
}

void *AutonamingConstants.featureTaggerEntityDistances.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureTaggerEntityDistances;
}

void *AutonamingConstants.featureTaggerContextTextLengths.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureTaggerContextTextLengths;
}

void *AutonamingConstants.featureTaggerConfidences.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureTaggerConfidences;
}

void *AutonamingConstants.featureEcrEntityDistances.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureEcrEntityDistances;
}

void *AutonamingConstants.featureEcrContextTextLengths.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureEcrContextTextLengths;
}

void *AutonamingConstants.featureEcrConfidences.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureEcrConfidences;
}

void *AutonamingConstants.featureModelThreshold.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureModelThreshold;
}

void *AutonamingConstants.featureModelConfidence.unsafeMutableAddressor()
{
  return &static AutonamingConstants.featureModelConfidence;
}

const char *AutonamingConstants.featureTotalMessages.unsafeMutableAddressor()
{
  return "count_msgs";
}

const char *AutonamingConstants.featureTotalConversationThreads.unsafeMutableAddressor()
{
  return "conv_threads";
}

void *AutonamingConstants.petObjcClassName.unsafeMutableAddressor()
{
  return &static AutonamingConstants.petObjcClassName;
}

uint64_t static AutonamingConstants.featureFaceCount.getter()
{
  return 0x746E635F65636166;
}

unint64_t static AutonamingConstants.featureSenderFaceCount.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static AutonamingConstants.featureReceiverFaceCount.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static AutonamingConstants.featureTaggerFaceCount.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static AutonamingConstants.featureEcrFaceCount.getter()
{
  return 0xD000000000000017;
}

unint64_t static AutonamingConstants.featurePronounFaceCount.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static AutonamingConstants.featureCooccurrenceCount.getter()
{
  return 0x61727563636F6F63;
}

uint64_t static AutonamingConstants.featureEntityCount.getter()
{
  return 0x6320797469746E65;
}

uint64_t static AutonamingConstants.featureImageCount.getter()
{
  return 0x6E63206567616D69;
}

unint64_t static AutonamingConstants.featureEntityImageRatio.getter()
{
  return 0xD000000000000012;
}

unint64_t static AutonamingConstants.featureImageEntityRatio.getter()
{
  return 0xD000000000000013;
}

uint64_t static AutonamingConstants.featureDeviceOwner.getter()
{
  return 0x6F20656369766564;
}

uint64_t static AutonamingConstants.featureImageFaceRatio.getter()
{
  return 0x2072657020676D69;
}

unint64_t static AutonamingConstants.featureNameMentionsRatio.getter()
{
  return 0xD000000000000011;
}

uint64_t static AutonamingConstants.featureUniqueNames.getter()
{
  return 0x6E20657571696E75;
}

uint64_t static AutonamingConstants.featureUniqueFaces.getter()
{
  return 0x6620657571696E75;
}

uint64_t static AutonamingConstants.featureTotalConversationThreads.getter()
{
  return 0x7268745F766E6F63;
}

uint64_t static AutonamingConstants.featureTotalMessages.getter()
{
  return 0x736D5F746E756F63;
}

unint64_t static AutonamingConstants.featureMessagesCountInThreadsForFace.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static AutonamingConstants.featureMessagesCountInThreadsForName.getter()
{
  return 0xD00000000000001DLL;
}

unint64_t static AutonamingConstants.featureTaggerEntityDistances.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static AutonamingConstants.featureTaggerContextTextLengths.getter()
{
  return 0xD000000000000017;
}

unint64_t static AutonamingConstants.featureTaggerConfidences.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static AutonamingConstants.featureEcrEntityDistances.getter()
{
  return 0xD000000000000019;
}

unint64_t static AutonamingConstants.featureEcrContextTextLengths.getter()
{
  return 0xD000000000000014;
}

unint64_t static AutonamingConstants.featureEcrConfidences.getter()
{
  return 0xD000000000000019;
}

uint64_t static AutonamingConstants.featureModelThreshold.getter()
{
  return 0x68745F6C65646F6DLL;
}

unint64_t static AutonamingConstants.featureModelConfidence.getter()
{
  return 0xD000000000000010;
}

uint64_t static AutonamingConstants.keyDoubleFeatures.getter()
{
  return 0x6546656C62756F64;
}

uint64_t static AutonamingConstants.keyListFeatures.getter()
{
  return 0x746165467473696CLL;
}

uint64_t static AutonamingConstants.defaultContextWindowSize.getter()
{
  return 5;
}

uint64_t static AutonamingConstants.defaultMaxFaces.getter()
{
  return 11;
}

uint64_t static AutonamingConstants.defaultBatchSize.getter()
{
  return 32;
}

double static AutonamingConstants.defaultModelPositiveClassThreshold.getter()
{
  return 0.91;
}

double static AutonamingConstants.defaultMadConfidenceThreshold.getter()
{
  return 0.45;
}

double static AutonamingConstants.defaultLookBackInYears.getter()
{
  return 1.0;
}

uint64_t static AutonamingConstants.modelPositiveClassIndex.getter()
{
  return 1;
}

void *AutonamingConstants.millisecondsInAYear.unsafeMutableAddressor()
{
  return &static AutonamingConstants.millisecondsInAYear;
}

double static AutonamingConstants.millisecondsInAYear.getter()
{
  return 31536000.0;
}

uint64_t static AutonamingConstants.xgbModelHeadFactor.getter()
{
  return 0x696D616E6F747561;
}

const char *AutonamingConstants.modelName.unsafeMutableAddressor()
{
  return "autonaming-xgb";
}

uint64_t static AutonamingConstants.modelName.getter()
{
  return 0x696D616E6F747561;
}

unint64_t static AutonamingConstants.autonamingConfig.getter()
{
  return 0xD000000000000011;
}

unint64_t static AutonamingConstants.poemTrialNamespace.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static AutonamingConstants.petObjcClassName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t static AutonamingConstants.annotationUnknown.getter()
{
  return -1;
}

uint64_t static AutonamingConstants.annotationIncorrect.getter()
{
  return 0;
}

uint64_t static AutonamingConstants.annotationCorrect.getter()
{
  return 1;
}

uint64_t static AutonamingConstants.pronounsSender.getter()
{
  return 0x29656D7C6928625CLL;
}

uint64_t static AutonamingConstants.pronounsReceiver.getter()
{
  return 0x757C756F7928625CLL;
}

ValueMetadata *type metadata accessor for AutonamingConstants()
{
  return &type metadata for AutonamingConstants;
}

char *PosTaggingResult.__allocating_init(tag:text:start:len:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  objc_class *v7;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v7 = v6;
  v14 = (char *)objc_msgSend(objc_allocWithZone(v7), sel_init);
  v15 = &v14[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_tag];
  swift_beginAccess();
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  v16 = v14;
  swift_bridgeObjectRelease();
  v17 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_text];
  swift_beginAccess();
  *(_QWORD *)v17 = a3;
  *((_QWORD *)v17 + 1) = a4;
  swift_bridgeObjectRelease();
  v18 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_start];
  swift_beginAccess();
  *(_QWORD *)v18 = a5;
  v19 = &v16[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_len];
  swift_beginAccess();
  *(_QWORD *)v19 = a6;

  return v16;
}

uint64_t PosTaggingResult.tag.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_tag);
}

uint64_t PosTaggingResult.tag.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_tag);
}

uint64_t (*PosTaggingResult.tag.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PosTaggingResult.text.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_text);
}

uint64_t PosTaggingResult.text.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_text);
}

uint64_t (*PosTaggingResult.text.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PosTaggingResult.start.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_start;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t PosTaggingResult.start.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_start);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PosTaggingResult.start.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t PosTaggingResult.len.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_len;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t PosTaggingResult.len.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_len);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PosTaggingResult.len.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

char *specialized PosTaggingResult.__allocating_init<A>(proto:)(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  _BYTE v22[24];

  v2 = (int *)type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PosTaggingResult()), sel_init);
  outlined init with copy of DocumentUnderstanding_PosTaggingResult(a1, (uint64_t)v4);
  v6 = (uint64_t *)&v4[v2[5]];
  if (v6[1])
  {
    v7 = *v6;
    v8 = v6[1];
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  v9 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_tag];
  swift_beginAccess();
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)&v4[v2[6]];
  if (v11[1])
  {
    v12 = *v11;
    v13 = v11[1];
  }
  else
  {
    v12 = 0;
    v13 = 0xE000000000000000;
  }
  v14 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_text];
  swift_beginAccess();
  *(_QWORD *)v14 = v12;
  *((_QWORD *)v14 + 1) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = &v4[v2[7]];
  if (v15[8])
    v16 = 0;
  else
    v16 = *(_QWORD *)v15;
  v17 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_start];
  swift_beginAccess();
  *(_QWORD *)v17 = v16;
  v18 = &v4[v2[8]];
  if (v18[8])
    v19 = 0;
  else
    v19 = *(_QWORD *)v18;
  outlined destroy of DocumentUnderstanding_PosTaggingResult(a1);
  outlined destroy of DocumentUnderstanding_PosTaggingResult((uint64_t)v4);
  v20 = &v10[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_len];
  swift_beginAccess();
  *(_QWORD *)v20 = v19;

  return v10;
}

char *PosTaggingResult.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  char *v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t, int *);
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_PosTaggingResult?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v14 = *((_QWORD *)v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  v18 = (char *)v17;
  v19 = swift_dynamicCast();
  v20 = *(void (**)(char *, uint64_t, uint64_t, int *))(v14 + 56);
  if ((v19 & 1) != 0)
  {
    v20(v9, 0, 1, v13);
    outlined init with take of DocumentUnderstanding_PosTaggingResult((uint64_t)v9, (uint64_t)v16);
    v21 = &v16[v13[5]];
    v22 = *((_QWORD *)v21 + 1);
    v38 = a1;
    if (v22)
    {
      v23 = *(_QWORD *)v21;
      v24 = v22;
    }
    else
    {
      v23 = 0;
      v24 = 0xE000000000000000;
    }
    v25 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_tag];
    swift_beginAccess();
    *(_QWORD *)v25 = v23;
    *((_QWORD *)v25 + 1) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v26 = &v16[v13[6]];
    if (*((_QWORD *)v26 + 1))
    {
      v27 = *(_QWORD *)v26;
      v28 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v27 = 0;
      v28 = 0xE000000000000000;
    }
    v29 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_text];
    swift_beginAccess();
    *(_QWORD *)v29 = v27;
    *((_QWORD *)v29 + 1) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v30 = &v16[v13[7]];
    if (v30[8])
      v31 = 0;
    else
      v31 = *(_QWORD *)v30;
    v32 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_start];
    swift_beginAccess();
    *(_QWORD *)v32 = v31;
    v33 = &v16[v13[8]];
    if (v33[8])
      v34 = 0;
    else
      v34 = *(_QWORD *)v33;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v38, a2);
    outlined destroy of DocumentUnderstanding_PosTaggingResult((uint64_t)v16);
    v35 = &v18[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_len];
    swift_beginAccess();
    *(_QWORD *)v35 = v34;

  }
  else
  {
    v20(v9, 1, 1, v13);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_PosTaggingResult?((uint64_t)v9);
    return 0;
  }
  return v18;
}

uint64_t outlined destroy of DocumentUnderstanding_PosTaggingResult?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_PosTaggingResult?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of DocumentUnderstanding_PosTaggingResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_PosTaggingResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PosTaggingResult.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  UnknownStorage.init()();
  v3 = (int *)type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v4 = (_QWORD *)(a1 + v3[5]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(a1 + v3[6]);
  *v5 = 0;
  v5[1] = 0;
  v6 = a1 + v3[7];
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  v7 = a1 + v3[8];
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x70))();
  v4[1] = v9;
  *v5 = (*(uint64_t (**)(void))((*v8 & *v1) + 0x88))();
  v5[1] = v10;
  *(_QWORD *)v6 = (*(uint64_t (**)(void))((*v8 & *v1) + 0xA0))();
  *(_BYTE *)(v6 + 8) = 0;
  result = (*(uint64_t (**)(void))((*v8 & *v1) + 0xB8))();
  *(_QWORD *)v7 = result;
  *(_BYTE *)(v7 + 8) = 0;
  return result;
}

uint64_t PosTaggingResult.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xD8))(v4);
  v7 = specialized PosTaggingResult.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PosTaggingResult?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall PosTaggingResult.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for PosTaggingResult();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type PosTaggingResult and conformance PosTaggingResult, v2, (uint64_t (*)(uint64_t))type metadata accessor for PosTaggingResult, (uint64_t)&protocol conformance descriptor for PosTaggingResult);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t type metadata accessor for PosTaggingResult()
{
  return objc_opt_self();
}

uint64_t PosTaggingResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PosTaggingResult.init(coder:)(a1);
}

uint64_t PosTaggingResult.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type PosTaggingResult and conformance PosTaggingResult, v4, (uint64_t (*)(uint64_t))type metadata accessor for PosTaggingResult, (uint64_t)&protocol conformance descriptor for PosTaggingResult);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id PosTaggingResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id PosTaggingResult.init()()
{
  char *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_tag];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_text];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0xE000000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_start] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding16PosTaggingResult_len] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for PosTaggingResult();
  return objc_msgSendSuper2(&v4, sel_init);
}

id PosTaggingResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PosTaggingResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in PosTaggingResult()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance PosTaggingResult@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 208);
  v6 = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_2283BAA58@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x70))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2283BAA98(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x78);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2283BAAEC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2283BAB2C(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x90);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2283BAB80@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_2283BABC0(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA8))(*a1);
}

uint64_t sub_2283BABFC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_2283BAC3C(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xC0))(*a1);
}

uint64_t sub_2283BAC78()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_PosTaggingResult and conformance DocumentUnderstanding_PosTaggingResult, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_PosTaggingResult, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_PosTaggingResult);
}

uint64_t outlined init with copy of DocumentUnderstanding_PosTaggingResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_PosTaggingResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t DUFoundInEventDDImplementation.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUFoundInEventDDImplementation.implementationID.getter()
{
  return 0xD000000000000019;
}

uint64_t static DUFoundInEventDDImplementation.specification.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventDDSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventDDSpecification;
  *a1 = result;
  return result;
}

void *static DUFoundInEventDDImplementation.implementationAttributes.getter()
{
  return &outlined read-only object #0 of static DUFoundInEventDDImplementation.implementationAttributes.getter;
}

uint64_t DUFoundInEventDDImplementation.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventDDImplementation.runTypedOnRequest(request:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[4] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v1[5] = swift_task_alloc();
  v2 = type metadata accessor for Date();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t DUFoundInEventDDImplementation.runTypedOnRequest(request:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  void *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(uint64_t (**)(void))(**(_QWORD **)(v0 + 32) + 136);
  v2 = (void *)v1();

  if (!v2)
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v17 = swift_allocError();
    v18 = 0xD000000000000015;
    v19 = "nil document received";
    goto LABEL_11;
  }
  v3 = (_QWORD *)v1();
  if (!v3
    || (v4 = v3,
        v5 = (_QWORD *)MEMORY[0x24BEE4EA0],
        v6 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v3) + 0x88))(),
        v8 = v7,
        v4,
        !v8))
  {
    lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
    v17 = swift_allocError();
    v18 = 0xD000000000000023;
    v19 = "Unable to access document plaintext";
LABEL_11:
    *(_QWORD *)v16 = v18;
    *(_QWORD *)(v16 + 8) = (unint64_t)(v19 - 32) | 0x8000000000000000;
    *(_BYTE *)(v16 + 16) = 0;
    goto LABEL_12;
  }
  type metadata accessor for DUDataDetectors();
  swift_initStackObject();
  v9 = (_QWORD *)v1();
  if (!v9
    || (v10 = v9, v11 = (_QWORD *)(*(uint64_t (**)(void))((*v5 & *v9) + 0xE0))(), v10, !v11)
    || (v12 = (_QWORD *)(*(uint64_t (**)(void))((*v5 & *v11) + 0x78))(), v11, !v12))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 56))(*(_QWORD *)(v0 + 40), 1, 1, *(_QWORD *)(v0 + 48));
    goto LABEL_15;
  }
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 40);
  (*(void (**)(void))((*v5 & *v12) + 0x198))();

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
  {
LABEL_15:
    v22 = *(_QWORD *)(v0 + 40);
    Date.init()();
    outlined destroy of Date?(v22);
    goto LABEL_16;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 32))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
LABEL_16:
  v17 = DUDataDetectors.getDataDetectorsForPlainText(docText:dateReceieved:)(v6, v8, *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v0 + 56);
  v23 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 48);
  if (v17)
  {
    (*(void (**)(_QWORD, _QWORD))(v24 + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    v20 = 0;
    goto LABEL_13;
  }
  lazy protocol witness table accessor for type DUProcessingPhaseImplementationBaseError and conformance DUProcessingPhaseImplementationBaseError();
  v17 = swift_allocError();
  v27 = v26;
  swift_release();
  *(_QWORD *)v27 = 0xD00000000000002CLL;
  *(_QWORD *)(v27 + 8) = 0x80000002284DF7F0;
  *(_BYTE *)(v27 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
LABEL_12:
  v20 = 1;
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t, uint64_t))(v0 + 8))(v17, v20);
}

uint64_t DUFoundInEventDDImplementation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUFoundInEventDDImplementation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static DUProcessingPhaseImplementation.specification.getter in conformance DUFoundInEventDDImplementation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DUFoundInEventDDSpecification();
  result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for DUFoundInEventDDSpecification;
  *a1 = result;
  return result;
}

unint64_t protocol witness for static DUProcessingPhaseImplementation.implementationID.getter in conformance DUFoundInEventDDImplementation()
{
  return 0xD000000000000019;
}

void *protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventDDImplementation()
{
  return &outlined read-only object #0 of protocol witness for static DUProcessingPhaseImplementation.implementationAttributes.getter in conformance DUFoundInEventDDImplementation;
}

_UNKNOWN **associated type witness table accessor for DUProcessingPhaseImplementation.SpecificationType : DUProcessingPhaseSpecification in DUFoundInEventDDImplementation()
{
  return &protocol witness table for DUFoundInEventDDSpecification;
}

uint64_t type metadata accessor for DUFoundInEventDDImplementation()
{
  return objc_opt_self();
}

char *AutonamingModelFeatures.__allocating_init(featureMap:annotation:groundTruthAvailable:cooccurrenceKey:listFeatureMap:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  objc_class *v7;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v7 = v6;
  v14 = (char *)objc_msgSend(objc_allocWithZone(v7), sel_init);
  v15 = &v14[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_annotation];
  swift_beginAccess();
  *(_QWORD *)v15 = a2;
  v16 = &v14[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_featureMap];
  swift_beginAccess();
  *(_QWORD *)v16 = a1;
  v17 = v14;
  swift_bridgeObjectRelease();
  v18 = &v17[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_groundTruthAvailable];
  swift_beginAccess();
  *v18 = a3;
  v19 = &v17[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_cooccurrenceKey];
  swift_beginAccess();
  *(_QWORD *)v19 = a4;
  *((_QWORD *)v19 + 1) = a5;
  swift_bridgeObjectRelease();
  v20 = &v17[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_listFeatureMap];
  swift_beginAccess();
  *(_QWORD *)v20 = a6;

  swift_bridgeObjectRelease();
  return v17;
}

uint64_t AutonamingModelFeatures.annotation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_annotation;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t AutonamingModelFeatures.annotation.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_annotation);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AutonamingModelFeatures.annotation.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t AutonamingModelFeatures.featureMap.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t AutonamingModelFeatures.featureMap.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_featureMap);
}

uint64_t (*AutonamingModelFeatures.featureMap.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t AutonamingModelFeatures.listFeatureMap.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t AutonamingModelFeatures.listFeatureMap.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_listFeatureMap);
}

uint64_t (*AutonamingModelFeatures.listFeatureMap.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t AutonamingModelFeatures.groundTruthAvailable.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_groundTruthAvailable);
  swift_beginAccess();
  return *v1;
}

uint64_t AutonamingModelFeatures.groundTruthAvailable.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_groundTruthAvailable);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*AutonamingModelFeatures.groundTruthAvailable.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t AutonamingModelFeatures.cooccurrenceKey.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_cooccurrenceKey);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AutonamingModelFeatures.cooccurrenceKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_cooccurrenceKey);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*AutonamingModelFeatures.cooccurrenceKey.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *specialized AutonamingModelFeatures.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int *v93;
  uint64_t v94;
  unsigned int (*v95)(char *, uint64_t, uint64_t);
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  unsigned int (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t *v117;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  char v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  double v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  char v198;
  unsigned int (*v199)(char *, uint64_t, uint64_t);
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  char *v250;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  unsigned int (*v298)(char *, uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308[3];
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v285 = (uint64_t)&v252 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v284 = (uint64_t)&v252 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v282 = (uint64_t)&v252 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v280 = (uint64_t)&v252 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v277 = (uint64_t)&v252 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v275 = (uint64_t)&v252 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v274 = (uint64_t)&v252 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v271 = (uint64_t)&v252 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v295 = (uint64_t)&v252 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v252 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v267 = (uint64_t)&v252 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v266 = (char *)&v252 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v293 = (uint64_t)&v252 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v292 = (uint64_t)&v252 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v291 = (uint64_t)&v252 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v290 = (uint64_t)&v252 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v260 = (char *)&v252 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v289 = (uint64_t)&v252 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v256 = (char *)&v252 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v288 = (uint64_t)&v252 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v287 = (uint64_t)&v252 - v45;
  MEMORY[0x24BDAC7A8](v44);
  v297 = (uint64_t)&v252 - v46;
  v47 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v252 = *(_QWORD *)(v47 - 8);
  v48 = MEMORY[0x24BDAC7A8](v47);
  v283 = (uint64_t)&v252 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x24BDAC7A8](v48);
  v281 = (uint64_t)&v252 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v279 = (uint64_t)&v252 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v278 = (uint64_t)&v252 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v58 = (char *)&v252 - v57;
  v59 = MEMORY[0x24BDAC7A8](v56);
  v273 = (char *)&v252 - v60;
  v61 = MEMORY[0x24BDAC7A8](v59);
  v272 = (uint64_t)&v252 - v62;
  v63 = MEMORY[0x24BDAC7A8](v61);
  v270 = (uint64_t)&v252 - v64;
  v65 = MEMORY[0x24BDAC7A8](v63);
  v269 = (uint64_t)&v252 - v66;
  v67 = MEMORY[0x24BDAC7A8](v65);
  v268 = (uint64_t)&v252 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v265 = (uint64_t)&v252 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v264 = (uint64_t)&v252 - v72;
  v73 = MEMORY[0x24BDAC7A8](v71);
  v263 = (uint64_t)&v252 - v74;
  v75 = MEMORY[0x24BDAC7A8](v73);
  v262 = (uint64_t)&v252 - v76;
  v77 = MEMORY[0x24BDAC7A8](v75);
  v261 = (uint64_t)&v252 - v78;
  v79 = MEMORY[0x24BDAC7A8](v77);
  v259 = (uint64_t)&v252 - v80;
  v81 = MEMORY[0x24BDAC7A8](v79);
  v258 = (uint64_t)&v252 - v82;
  v83 = MEMORY[0x24BDAC7A8](v81);
  v257 = (uint64_t)&v252 - v84;
  v85 = MEMORY[0x24BDAC7A8](v83);
  v255 = (uint64_t)&v252 - v86;
  v87 = MEMORY[0x24BDAC7A8](v85);
  v254 = (uint64_t)&v252 - v88;
  v89 = MEMORY[0x24BDAC7A8](v87);
  v253 = (char *)&v252 - v90;
  MEMORY[0x24BDAC7A8](v89);
  v92 = (char *)&v252 - v91;
  v93 = (int *)type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  MEMORY[0x24BDAC7A8](v93);
  v95 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v252 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AutonamingModelFeatures()), sel_init);
  v286 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v95, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData);
  v97 = (char *)v95 + v93[6];
  if (v97[8])
    v98 = 0;
  else
    v98 = *(_QWORD *)v97;
  v99 = &v96[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_annotation];
  swift_beginAccess();
  *(_QWORD *)v99 = v98;
  v100 = *((_BYTE *)v95 + v93[7]) & 1;
  v101 = &v96[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_groundTruthAvailable];
  swift_beginAccess();
  *v101 = v100;
  v102 = v93[8];
  v298 = v95;
  v103 = (uint64_t *)((char *)v95 + v102);
  v104 = v103[1];
  v276 = v58;
  v294 = v23;
  if (v104)
  {
    v105 = *v103;
    v106 = v104;
  }
  else
  {
    v105 = 0;
    v106 = 0xE000000000000000;
  }
  v107 = &v96[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_cooccurrenceKey];
  swift_beginAccess();
  *(_QWORD *)v107 = v105;
  *((_QWORD *)v107 + 1) = v106;
  v108 = v96;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v109 = v297;
  v110 = (char *)v298 + v93[5];
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v297);
  v111 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v252 + 48);
  if (v111(v109, 1, v47) == 1)
  {
    UnknownStorage.init()();
    v112 = *(int *)(v47 + 20);
    v113 = (uint64_t)v256;
    v114 = (uint64_t)v253;
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v92[v112] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v297, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v297, (uint64_t)v92, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v113 = (uint64_t)v256;
    v114 = (uint64_t)v253;
  }
  v115 = *(_QWORD *)&v92[*(int *)(v47 + 20)];
  swift_beginAccess();
  if (*(_BYTE *)(v115 + 24))
    v116 = 0.0;
  else
    v116 = *(double *)(v115 + 16);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v92, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  v117 = (uint64_t *)&v108[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_featureMap];
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v320 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x61727563636F6F63, 0xEF746E632065636ELL, isUniquelyReferenced_nonNull_native, v116);
  *v117 = v320;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v119 = v287;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v287);
  if (v111(v119, 1, v47) == 1)
  {
    UnknownStorage.init()();
    v120 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v114 + v120) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v287, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v119, v114, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v121 = *(_QWORD *)(v114 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v121 + 40))
    v122 = 0.0;
  else
    v122 = *(double *)(v121 + 32);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v114, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v123 = swift_isUniquelyReferenced_nonNull_native();
  v319 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6320797469746E65, 0xEA0000000000746ELL, v123, v122);
  *v117 = v319;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v124 = v288;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v288);
  if (v111(v124, 1, v47) == 1)
  {
    v125 = v254;
    UnknownStorage.init()();
    v126 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v125 + v126) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v288, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v125 = v254;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v124, v254, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v127 = *(_QWORD *)(v125 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v127 + 56))
    v128 = 0.0;
  else
    v128 = *(double *)(v127 + 48);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v125, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v129 = swift_isUniquelyReferenced_nonNull_native();
  v318 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6E63206567616D69, 0xE900000000000074, v129, v128);
  *v117 = v318;
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v113);
  if (v111(v113, 1, v47) == 1)
  {
    v130 = v255;
    UnknownStorage.init()();
    v131 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v130 + v131) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v113, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    v132 = v130;
  }
  else
  {
    v133 = v113;
    v132 = v255;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v133, v255, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v134 = *(_QWORD *)(v132 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v134 + 72))
    v135 = 0.0;
  else
    v135 = *(double *)(v134 + 64);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v132, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v136 = swift_isUniquelyReferenced_nonNull_native();
  v317 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000012, 0x80000002284DF350, v136, v135);
  *v117 = v317;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v137 = v289;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v289);
  if (v111(v137, 1, v47) == 1)
  {
    v138 = v257;
    UnknownStorage.init()();
    v139 = *(int *)(v47 + 20);
    v140 = (uint64_t)v260;
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v138 + v139) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v289, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v138 = v257;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v137, v257, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v140 = (uint64_t)v260;
  }
  v141 = *(_QWORD *)(v138 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v141 + 88))
    v142 = 0.0;
  else
    v142 = *(double *)(v141 + 80);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v138, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v143 = swift_isUniquelyReferenced_nonNull_native();
  v316 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000013, 0x80000002284DF370, v143, v142);
  *v117 = v316;
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v140);
  if (v111(v140, 1, v47) == 1)
  {
    v144 = v258;
    UnknownStorage.init()();
    v145 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v144 + v145) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v140, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v144 = v258;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v140, v258, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v146 = *(_QWORD *)(v144 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v146 + 104))
    v147 = 0.0;
  else
    v147 = *(double *)(v146 + 96);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v144, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v148 = swift_isUniquelyReferenced_nonNull_native();
  v315 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6F20656369766564, 0xEC00000072656E77, v148, v147);
  *v117 = v315;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v149 = v290;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v290);
  v150 = v111(v149, 1, v47);
  v151 = v259;
  if (v150 == 1)
  {
    UnknownStorage.init()();
    v152 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v151 + v152) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v290, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v149, v259, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v153 = *(_QWORD *)(v151 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v153 + 120))
    v154 = 0.0;
  else
    v154 = *(double *)(v153 + 112);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v151, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v155 = swift_isUniquelyReferenced_nonNull_native();
  v314 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x2072657020676D69, 0xEC00000065636166, v155, v154);
  *v117 = v314;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v156 = v291;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v291);
  if (v111(v156, 1, v47) == 1)
  {
    v157 = v261;
    UnknownStorage.init()();
    v158 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v157 + v158) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v291, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v157 = v261;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v156, v261, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v159 = *(_QWORD *)(v157 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v159 + 136))
    v160 = 0.0;
  else
    v160 = *(double *)(v159 + 128);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v157, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v161 = swift_isUniquelyReferenced_nonNull_native();
  v313 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000011, 0x80000002284DF390, v161, v160);
  *v117 = v313;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v162 = v292;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v292);
  if (v111(v162, 1, v47) == 1)
  {
    v163 = v262;
    UnknownStorage.init()();
    v164 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v163 + v164) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v292, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v163 = v262;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v162, v262, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v165 = *(_QWORD *)(v163 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v165 + 152))
    v166 = 0.0;
  else
    v166 = *(double *)(v165 + 144);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v163, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v167 = swift_isUniquelyReferenced_nonNull_native();
  v312 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6E20657571696E75, 0xEC00000073656D61, v167, v166);
  *v117 = v312;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v168 = v293;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v293);
  if (v111(v168, 1, v47) == 1)
  {
    v169 = v263;
    UnknownStorage.init()();
    v170 = *(int *)(v47 + 20);
    v171 = (uint64_t)v266;
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v169 + v170) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v293, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v169 = v263;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v168, v263, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v171 = (uint64_t)v266;
  }
  v172 = *(_QWORD *)(v169 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v172 + 168))
    v173 = 0.0;
  else
    v173 = *(double *)(v172 + 160);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v169, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v174 = swift_isUniquelyReferenced_nonNull_native();
  v311 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6620657571696E75, 0xEC00000073656361, v174, v173);
  *v117 = v311;
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v171);
  if (v111(v171, 1, v47) == 1)
  {
    v175 = v264;
    UnknownStorage.init()();
    v176 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v175 + v176) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v171, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v175 = v264;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v171, v264, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v177 = *(_QWORD *)(v175 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v177 + 304))
    v178 = 0.0;
  else
    v178 = *(double *)(v177 + 296);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v175, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v179 = swift_isUniquelyReferenced_nonNull_native();
  v310 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x68745F6C65646F6DLL, 0xEF646C6F68736572, v179, v178);
  *v117 = v310;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v180 = v267;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v267);
  if (v111(v180, 1, v47) == 1)
  {
    v181 = v265;
    UnknownStorage.init()();
    v182 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v181 + v182) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v180, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    v183 = v181;
  }
  else
  {
    v183 = v265;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v180, v265, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v184 = *(_QWORD *)(v183 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v184 + 288))
    v185 = 0.0;
  else
    v185 = *(double *)(v184 + 280);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v183, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v186 = swift_isUniquelyReferenced_nonNull_native();
  v309 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000010, 0x80000002284DF550, v186, v185);
  *v117 = v309;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v187 = (uint64_t)v294;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, (uint64_t)v294);
  if (v111(v187, 1, v47) == 1)
  {
    v188 = v268;
    UnknownStorage.init()();
    v189 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v188 + v189) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v294, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v188 = v268;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v187, v268, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v190 = *(_QWORD *)(v188 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v190 + 224))
    v191 = 0.0;
  else
    v191 = *(double *)(v190 + 216);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v188, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v192 = swift_isUniquelyReferenced_nonNull_native();
  v308[0] = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x7268745F766E6F63, 0xEC00000073646165, v192, v191);
  *v117 = v308[0];
  swift_bridgeObjectRelease();
  swift_endAccess();
  v193 = v295;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v295);
  if (v111(v193, 1, v47) == 1)
  {
    v194 = v269;
    UnknownStorage.init()();
    v195 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v194 + v195) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v295, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v194 = v269;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v193, v269, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v196 = *(_QWORD *)(v194 + *(int *)(v47 + 20));
  swift_beginAccess();
  if (*(_BYTE *)(v196 + 240))
    v197 = 0.0;
  else
    v197 = *(double *)(v196 + 232);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v194, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v198 = swift_isUniquelyReferenced_nonNull_native();
  v307 = *v117;
  *v117 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x736D5F746E756F63, 0xEA00000000007367, v198, v197);
  *v117 = v307;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v308[0] = 1;
  v199 = v298;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v298, v108);
  v308[0] = 2;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 3;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 4;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 5;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 6;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 7;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 8;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 9;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 10;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v308[0] = 11;
  closure #1 in AutonamingModelFeatures.init<A>(proto:)(v308, v199, v108);
  v200 = v271;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v271);
  v201 = v111(v200, 1, v47);
  v296 = v108;
  if (v201 == 1)
  {
    v202 = v270;
    UnknownStorage.init()();
    v203 = *(int *)(v47 + 20);
    v204 = (uint64_t)v273;
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v202 + v203) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v200, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v202 = v270;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v200, v270, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v204 = (uint64_t)v273;
  }
  v205 = *(_QWORD *)(v202 + *(int *)(v47 + 20));
  swift_beginAccess();
  v206 = *(_QWORD *)(v205 + 248);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v202, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  v207 = &v296[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_listFeatureMap];
  swift_beginAccess();
  v208 = swift_isUniquelyReferenced_nonNull_native();
  v306 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v206, 0xD00000000000001DLL, 0x80000002284DF5A0, v208);
  *(_QWORD *)v207 = v306;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v209 = v274;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v274);
  if (v111(v209, 1, v47) == 1)
  {
    v210 = v272;
    UnknownStorage.init()();
    v211 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v210 + v211) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v209, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v210 = v272;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v209, v272, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v212 = *(_QWORD *)(v210 + *(int *)(v47 + 20));
  swift_beginAccess();
  v213 = *(_QWORD *)(v212 + 256);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v210, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v214 = swift_isUniquelyReferenced_nonNull_native();
  v305 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v213, 0xD00000000000001DLL, 0x80000002284DF5C0, v214);
  *(_QWORD *)v207 = v305;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v215 = v275;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v275);
  if (v111(v215, 1, v47) == 1)
  {
    UnknownStorage.init()();
    v216 = *(int *)(v47 + 20);
    v217 = (uint64_t)v276;
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v204 + v216) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v215, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v215, v204, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v217 = (uint64_t)v276;
  }
  v218 = *(_QWORD *)(v204 + *(int *)(v47 + 20));
  swift_beginAccess();
  v219 = *(_QWORD *)(v218 + 264);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v204, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v220 = swift_isUniquelyReferenced_nonNull_native();
  v304 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v219, 0xD00000000000001CLL, 0x80000002284DF5E0, v220);
  *(_QWORD *)v207 = v304;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v221 = v277;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v277);
  if (v111(v221, 1, v47) == 1)
  {
    UnknownStorage.init()();
    v222 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v217 + v222) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v221, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v221, v217, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v223 = *(_QWORD *)(v217 + *(int *)(v47 + 20));
  swift_beginAccess();
  v224 = *(_QWORD *)(v223 + 272);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v217, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v225 = swift_isUniquelyReferenced_nonNull_native();
  v303 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v224, 0xD000000000000017, 0x80000002284DF600, v225);
  *(_QWORD *)v207 = v303;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v226 = v280;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v280);
  if (v111(v226, 1, v47) == 1)
  {
    v227 = v278;
    UnknownStorage.init()();
    v228 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v227 + v228) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v226, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v227 = v278;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v226, v278, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v229 = *(_QWORD *)(v227 + *(int *)(v47 + 20));
  swift_beginAccess();
  v230 = *(_QWORD *)(v229 + 320);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v227, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v231 = swift_isUniquelyReferenced_nonNull_native();
  v302 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v230, 0xD000000000000019, 0x80000002284DF640, v231);
  *(_QWORD *)v207 = v302;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v232 = v282;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v282);
  if (v111(v232, 1, v47) == 1)
  {
    v233 = v279;
    UnknownStorage.init()();
    v234 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v233 + v234) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v232, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v233 = v279;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v232, v279, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v235 = *(_QWORD *)(v233 + *(int *)(v47 + 20));
  swift_beginAccess();
  v236 = *(_QWORD *)(v235 + 328);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v233, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v237 = swift_isUniquelyReferenced_nonNull_native();
  v301 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v236, 0xD000000000000014, 0x80000002284DF660, v237);
  *(_QWORD *)v207 = v301;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v238 = v284;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v284);
  if (v111(v238, 1, v47) == 1)
  {
    v239 = v281;
    UnknownStorage.init()();
    v240 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v239 + v240) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v238, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v239 = v281;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v238, v281, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v241 = *(_QWORD *)(v239 + *(int *)(v47 + 20));
  swift_beginAccess();
  v242 = *(_QWORD *)(v241 + 344);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v239, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v243 = swift_isUniquelyReferenced_nonNull_native();
  v300 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v242, 0xD000000000000019, 0x80000002284DF680, v243);
  *(_QWORD *)v207 = v300;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v244 = v285;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?((uint64_t)v110, v285);
  if (v111(v244, 1, v47) == 1)
  {
    v245 = v283;
    UnknownStorage.init()();
    v246 = *(int *)(v47 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)(v245 + v246) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v244, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    v245 = v283;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v244, v283, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v247 = *(_QWORD *)(v245 + *(int *)(v47 + 20));
  swift_beginAccess();
  v248 = *(_QWORD *)(v247 + 336);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v245, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  swift_beginAccess();
  v249 = swift_isUniquelyReferenced_nonNull_native();
  v299 = *(_QWORD *)v207;
  *(_QWORD *)v207 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v248, 0xD00000000000001CLL, 0x80000002284DF620, v249);
  *(_QWORD *)v207 = v299;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v250 = v296;

  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v286, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v298, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData);
  return v250;
}

_QWORD *AutonamingModelFeatures.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(char *, uint64_t, uint64_t);
  id v104;
  _QWORD *v105;
  char v106;
  void (*v107)(char *, uint64_t, uint64_t, int *);
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  char v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unsigned int (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t *v128;
  char isUniquelyReferenced_nonNull_native;
  unsigned int (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  char v136;
  uint64_t v137;
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  double v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  double v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  double v212;
  char v213;
  _QWORD *v214;
  unsigned int (*v215)(char *, uint64_t, uint64_t);
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int (*v264)(char *, uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  char *v279;
  char *v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unsigned int (*v318)(char *, uint64_t, uint64_t);
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330[3];
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v311 = (uint64_t)&v270 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v310 = (uint64_t)&v270 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v307 = (uint64_t)&v270 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v305 = (uint64_t)&v270 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v303 = (uint64_t)&v270 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v301 = (uint64_t)&v270 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v299 = (uint64_t)&v270 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v297 = (uint64_t)&v270 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v317 = (uint64_t)&v270 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v316 = (uint64_t)&v270 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v293 = (uint64_t)&v270 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v315 = (uint64_t)&v270 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v314 = (uint64_t)&v270 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v289 = (char *)&v270 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v313 = (uint64_t)&v270 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v286 = (char *)&v270 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v284 = (char *)&v270 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v282 = (char *)&v270 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v280 = (char *)&v270 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v312 = (uint64_t)&v270 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v277 = (char *)&v270 - v48;
  MEMORY[0x24BDAC7A8](v47);
  v319 = (uint64_t *)((char *)&v270 - v49);
  v320 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v275 = *(_QWORD *)(v320 - 8);
  v50 = MEMORY[0x24BDAC7A8](v320);
  v309 = (char *)&v270 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x24BDAC7A8](v50);
  v308 = (uint64_t)&v270 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v306 = (char *)&v270 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v304 = (uint64_t)&v270 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v302 = (uint64_t)&v270 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v300 = (uint64_t)&v270 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v298 = (char *)&v270 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v296 = (uint64_t)&v270 - v65;
  v66 = MEMORY[0x24BDAC7A8](v64);
  v295 = (uint64_t)&v270 - v67;
  v68 = MEMORY[0x24BDAC7A8](v66);
  v294 = (uint64_t)&v270 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  v292 = (char *)&v270 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  v291 = (uint64_t)&v270 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  v290 = (uint64_t)&v270 - v75;
  v76 = MEMORY[0x24BDAC7A8](v74);
  v288 = (uint64_t)&v270 - v77;
  v78 = MEMORY[0x24BDAC7A8](v76);
  v287 = (uint64_t)&v270 - v79;
  v80 = MEMORY[0x24BDAC7A8](v78);
  v285 = (uint64_t)&v270 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  v283 = (uint64_t)&v270 - v83;
  v84 = MEMORY[0x24BDAC7A8](v82);
  v281 = (uint64_t)&v270 - v85;
  v86 = MEMORY[0x24BDAC7A8](v84);
  v279 = (char *)&v270 - v87;
  v88 = MEMORY[0x24BDAC7A8](v86);
  v278 = (uint64_t)&v270 - v89;
  v90 = MEMORY[0x24BDAC7A8](v88);
  v276 = (uint64_t)&v270 - v91;
  MEMORY[0x24BDAC7A8](v90);
  v274 = (char *)&v270 - v92;
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_TrainingData?);
  v94 = MEMORY[0x24BDAC7A8](v93);
  v96 = (char *)&v270 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v94);
  v99 = (char *)&v270 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = (int *)type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v101 = *((_QWORD *)v100 - 1);
  MEMORY[0x24BDAC7A8](v100);
  v103 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v270 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = objc_msgSend(objc_allocWithZone(v3), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v99, a1, a2);
  v105 = v104;
  v106 = swift_dynamicCast();
  v107 = *(void (**)(char *, uint64_t, uint64_t, int *))(v101 + 56);
  if ((v106 & 1) != 0)
  {
    v271 = v97;
    v272 = a1;
    v273 = a2;
    v107(v96, 0, 1, v100);
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v96, (uint64_t)v103, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData);
    v108 = (char *)v103 + v100[6];
    if (v108[8])
      v109 = 0;
    else
      v109 = *(_QWORD *)v108;
    v110 = (_QWORD *)((char *)v105 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_annotation);
    swift_beginAccess();
    *v110 = v109;
    v111 = *((_BYTE *)v103 + v100[7]) & 1;
    v112 = (char *)v105 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_groundTruthAvailable;
    swift_beginAccess();
    *v112 = v111;
    v113 = v100[8];
    v318 = v103;
    v114 = (uint64_t *)((char *)v103 + v113);
    v115 = v105;
    if (v114[1])
    {
      v116 = *v114;
      v117 = v114[1];
    }
    else
    {
      v116 = 0;
      v117 = 0xE000000000000000;
    }
    v119 = v320;
    v120 = (uint64_t)v274;
    v121 = (_QWORD *)((char *)v105 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_cooccurrenceKey);
    swift_beginAccess();
    *v121 = v116;
    v121[1] = v117;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v122 = v319;
    v320 = (uint64_t)v318 + v100[5];
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, (uint64_t)v319);
    v123 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v275 + 48);
    if (v123((uint64_t)v122, 1, v119) == 1)
    {
      UnknownStorage.init()();
      v124 = *(int *)(v119 + 20);
      v125 = (uint64_t)v277;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v120 + v124) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v319, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v319, v120, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v125 = (uint64_t)v277;
    }
    v126 = *(_QWORD *)(v120 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v126 + 24))
      v127 = 0.0;
    else
      v127 = *(double *)(v126 + 16);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v120, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v128 = (_QWORD *)((char *)v115 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_featureMap);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v342 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x61727563636F6F63, 0xEF746E632065636ELL, isUniquelyReferenced_nonNull_native, v127);
    *v128 = v342;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v125);
    v130 = v123;
    if (v123(v125, 1, v119) == 1)
    {
      v131 = v276;
      UnknownStorage.init()();
      v132 = *(int *)(v119 + 20);
      v133 = (uint64_t)v280;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v131 + v132) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v125, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v131 = v276;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v125, v276, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v133 = (uint64_t)v280;
    }
    v319 = v115;
    v134 = *(_QWORD *)(v131 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v134 + 40))
      v135 = 0.0;
    else
      v135 = *(double *)(v134 + 32);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v131, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v136 = swift_isUniquelyReferenced_nonNull_native();
    v341 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6320797469746E65, 0xEA0000000000746ELL, v136, v135);
    *v128 = v341;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v137 = v312;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v312);
    v138 = v130;
    if (v130(v137, 1, v119) == 1)
    {
      v139 = v278;
      UnknownStorage.init()();
      v140 = *(int *)(v119 + 20);
      v141 = (uint64_t)v279;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v139 + v140) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v312, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      v142 = (uint64_t)v286;
      v143 = (uint64_t)v284;
    }
    else
    {
      v139 = v278;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v137, v278, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v142 = (uint64_t)v286;
      v143 = (uint64_t)v284;
      v141 = (uint64_t)v279;
    }
    v144 = *(_QWORD *)(v139 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v144 + 56))
      v145 = 0.0;
    else
      v145 = *(double *)(v144 + 48);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v139, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v146 = swift_isUniquelyReferenced_nonNull_native();
    v340 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6E63206567616D69, 0xE900000000000074, v146, v145);
    *v128 = v340;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v133);
    if (v138(v133, 1, v119) == 1)
    {
      UnknownStorage.init()();
      v147 = *(int *)(v119 + 20);
      v148 = (uint64_t)v282;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v141 + v147) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v133, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v133, v141, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v148 = (uint64_t)v282;
    }
    v149 = *(_QWORD *)(v141 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v149 + 72))
      v150 = 0.0;
    else
      v150 = *(double *)(v149 + 64);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v141, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v151 = swift_isUniquelyReferenced_nonNull_native();
    v339 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000012, 0x80000002284DF350, v151, v150);
    *v128 = v339;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v148);
    if (v138(v148, 1, v119) == 1)
    {
      v152 = v281;
      UnknownStorage.init()();
      v153 = *(int *)(v119 + 20);
      v154 = (uint64_t)v289;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v152 + v153) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v148, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v152 = v281;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v148, v281, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v154 = (uint64_t)v289;
    }
    v155 = *(_QWORD *)(v152 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v155 + 88))
      v156 = 0.0;
    else
      v156 = *(double *)(v155 + 80);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v152, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v157 = swift_isUniquelyReferenced_nonNull_native();
    v338 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000013, 0x80000002284DF370, v157, v156);
    *v128 = v338;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v143);
    if (v138(v143, 1, v119) == 1)
    {
      v158 = v283;
      UnknownStorage.init()();
      v159 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v158 + v159) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v143, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v158 = v283;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v143, v283, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v160 = *(_QWORD *)(v158 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v160 + 104))
      v161 = 0.0;
    else
      v161 = *(double *)(v160 + 96);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v158, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v162 = swift_isUniquelyReferenced_nonNull_native();
    v337 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6F20656369766564, 0xEC00000072656E77, v162, v161);
    *v128 = v337;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v142);
    if (v138(v142, 1, v119) == 1)
    {
      v163 = v285;
      UnknownStorage.init()();
      v164 = *(int *)(v119 + 20);
      v165 = (uint64_t)v292;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v163 + v164) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v142, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v163 = v285;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v142, v285, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v165 = (uint64_t)v292;
    }
    v166 = *(_QWORD *)(v163 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v166 + 120))
      v167 = 0.0;
    else
      v167 = *(double *)(v166 + 112);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v163, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v168 = swift_isUniquelyReferenced_nonNull_native();
    v336 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x2072657020676D69, 0xEC00000065636166, v168, v167);
    *v128 = v336;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v169 = v313;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v313);
    if (v138(v169, 1, v119) == 1)
    {
      v170 = v287;
      UnknownStorage.init()();
      v171 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v170 + v171) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v313, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v170 = v287;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v169, v287, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v172 = *(_QWORD *)(v170 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v172 + 136))
      v173 = 0.0;
    else
      v173 = *(double *)(v172 + 128);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v170, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v174 = swift_isUniquelyReferenced_nonNull_native();
    v335 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000011, 0x80000002284DF390, v174, v173);
    *v128 = v335;
    swift_bridgeObjectRelease();
    swift_endAccess();
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v154);
    if (v138(v154, 1, v119) == 1)
    {
      v175 = v288;
      UnknownStorage.init()();
      v176 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v175 + v176) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v154, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      v177 = v175;
    }
    else
    {
      v178 = v154;
      v177 = v288;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v178, v288, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v179 = *(_QWORD *)(v177 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v179 + 152))
      v180 = 0.0;
    else
      v180 = *(double *)(v179 + 144);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v177, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v181 = swift_isUniquelyReferenced_nonNull_native();
    v334 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6E20657571696E75, 0xEC00000073656D61, v181, v180);
    *v128 = v334;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v182 = v314;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v314);
    if (v138(v182, 1, v119) == 1)
    {
      v183 = v290;
      UnknownStorage.init()();
      v184 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v183 + v184) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v314, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      v185 = v183;
    }
    else
    {
      v186 = v182;
      v185 = v290;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v186, v290, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v187 = v185;
    v188 = *(_QWORD *)(v185 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v188 + 168))
      v189 = 0.0;
    else
      v189 = *(double *)(v188 + 160);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v187, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v190 = swift_isUniquelyReferenced_nonNull_native();
    v333 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x6620657571696E75, 0xEC00000073656361, v190, v189);
    *v128 = v333;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v191 = v315;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v315);
    if (v138(v191, 1, v119) == 1)
    {
      v192 = v291;
      UnknownStorage.init()();
      v193 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v192 + v193) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v315, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v192 = v291;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v191, v291, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v194 = *(_QWORD *)(v192 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v194 + 304))
      v195 = 0.0;
    else
      v195 = *(double *)(v194 + 296);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v192, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v196 = swift_isUniquelyReferenced_nonNull_native();
    v332 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x68745F6C65646F6DLL, 0xEF646C6F68736572, v196, v195);
    *v128 = v332;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v197 = v293;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v293);
    if (v138(v197, 1, v119) == 1)
    {
      UnknownStorage.init()();
      v198 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v165 + v198) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v197, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v197, v165, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v199 = *(_QWORD *)(v165 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v199 + 288))
      v200 = 0.0;
    else
      v200 = *(double *)(v199 + 280);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v165, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v201 = swift_isUniquelyReferenced_nonNull_native();
    v331 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0xD000000000000010, 0x80000002284DF550, v201, v200);
    *v128 = v331;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v202 = v316;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v316);
    if (v138(v202, 1, v119) == 1)
    {
      v203 = v294;
      UnknownStorage.init()();
      v204 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v203 + v204) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v316, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v203 = v294;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v202, v294, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v205 = *(_QWORD *)(v203 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v205 + 224))
      v206 = 0.0;
    else
      v206 = *(double *)(v205 + 216);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v203, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v207 = swift_isUniquelyReferenced_nonNull_native();
    v330[0] = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x7268745F766E6F63, 0xEC00000073646165, v207, v206);
    *v128 = v330[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    v208 = v317;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v317);
    if (v138(v208, 1, v119) == 1)
    {
      v209 = v295;
      UnknownStorage.init()();
      v210 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v209 + v210) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v317, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v209 = v295;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v208, v295, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v211 = *(_QWORD *)(v209 + *(int *)(v119 + 20));
    swift_beginAccess();
    if (*(_BYTE *)(v211 + 240))
      v212 = 0.0;
    else
      v212 = *(double *)(v211 + 232);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v209, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v213 = swift_isUniquelyReferenced_nonNull_native();
    v329 = *v128;
    *v128 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0x736D5F746E756F63, 0xEA00000000007367, v213, v212);
    *v128 = v329;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v330[0] = 1;
    v215 = v318;
    v214 = v319;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v318, v319);
    v330[0] = 2;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 3;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 4;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 5;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 6;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 7;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 8;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 9;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 10;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v330[0] = 11;
    closure #1 in AutonamingModelFeatures.init<A>(proto:)(v330, v215, v214);
    v216 = v297;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v297);
    if (v138(v216, 1, v119) == 1)
    {
      v217 = v296;
      UnknownStorage.init()();
      v218 = *(int *)(v119 + 20);
      v219 = (uint64_t)v298;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v217 + v218) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v216, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v217 = v296;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v216, v296, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v219 = (uint64_t)v298;
    }
    v220 = *(_QWORD *)(v217 + *(int *)(v119 + 20));
    swift_beginAccess();
    v221 = *(_QWORD *)(v220 + 248);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v217, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v222 = (_QWORD *)((char *)v319 + OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_listFeatureMap);
    swift_beginAccess();
    v223 = swift_isUniquelyReferenced_nonNull_native();
    v328 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v221, 0xD00000000000001DLL, 0x80000002284DF5A0, v223);
    *v222 = v328;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v224 = v299;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v299);
    if (v138(v224, 1, v119) == 1)
    {
      UnknownStorage.init()();
      v225 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v219 + v225) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v224, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v224, v219, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v226 = *(_QWORD *)(v219 + *(int *)(v119 + 20));
    swift_beginAccess();
    v227 = *(_QWORD *)(v226 + 256);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v219, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v228 = swift_isUniquelyReferenced_nonNull_native();
    v327 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v227, 0xD00000000000001DLL, 0x80000002284DF5C0, v228);
    *v222 = v327;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v229 = v301;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v301);
    if (v138(v229, 1, v119) == 1)
    {
      v230 = v300;
      UnknownStorage.init()();
      v231 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v230 + v231) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v229, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v230 = v300;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v229, v300, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v232 = v309;
    v233 = *(_QWORD *)(v230 + *(int *)(v119 + 20));
    swift_beginAccess();
    v234 = *(_QWORD *)(v233 + 264);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v230, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v235 = swift_isUniquelyReferenced_nonNull_native();
    v326 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v234, 0xD00000000000001CLL, 0x80000002284DF5E0, v235);
    *v222 = v326;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v236 = v303;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v303);
    if (v138(v236, 1, v119) == 1)
    {
      v237 = v302;
      UnknownStorage.init()();
      v238 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v237 + v238) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v236, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v237 = v302;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v236, v302, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v239 = *(_QWORD *)(v237 + *(int *)(v119 + 20));
    swift_beginAccess();
    v240 = *(_QWORD *)(v239 + 272);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v237, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v241 = swift_isUniquelyReferenced_nonNull_native();
    v325 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v240, 0xD000000000000017, 0x80000002284DF600, v241);
    *v222 = v325;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v242 = v305;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v305);
    if (v138(v242, 1, v119) == 1)
    {
      v243 = v304;
      UnknownStorage.init()();
      v244 = *(int *)(v119 + 20);
      v245 = (uint64_t)v232;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v243 + v244) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v242, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v243 = v304;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v242, v304, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v245 = (uint64_t)v232;
    }
    v246 = (uint64_t)v306;
    v247 = *(_QWORD *)(v243 + *(int *)(v119 + 20));
    swift_beginAccess();
    v248 = *(_QWORD *)(v247 + 320);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v243, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v249 = swift_isUniquelyReferenced_nonNull_native();
    v324 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v248, 0xD000000000000019, 0x80000002284DF640, v249);
    *v222 = v324;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v250 = v307;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v307);
    if (v138(v250, 1, v119) == 1)
    {
      UnknownStorage.init()();
      v251 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v246 + v251) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v250, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v250, v246, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v252 = *(_QWORD *)(v246 + *(int *)(v119 + 20));
    swift_beginAccess();
    v253 = *(_QWORD *)(v252 + 328);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v246, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v254 = swift_isUniquelyReferenced_nonNull_native();
    v323 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v253, 0xD000000000000014, 0x80000002284DF660, v254);
    *v222 = v323;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v255 = v310;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v310);
    if (v138(v255, 1, v119) == 1)
    {
      v256 = v308;
      UnknownStorage.init()();
      v257 = *(int *)(v119 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v256 + v257) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v255, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      v256 = v308;
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v255, v308, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v258 = *(_QWORD *)(v256 + *(int *)(v119 + 20));
    swift_beginAccess();
    v259 = *(_QWORD *)(v258 + 344);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v256, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v260 = swift_isUniquelyReferenced_nonNull_native();
    v322 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v259, 0xD000000000000019, 0x80000002284DF680, v260);
    *v222 = v322;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v261 = v311;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v320, v311);
    if (v138(v261, 1, v119) == 1)
    {
      UnknownStorage.init()();
      v262 = *(int *)(v119 + 20);
      v263 = v272;
      v264 = v318;
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v245 + v262) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v261, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      v265 = v271;
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v261, v245, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v265 = v271;
      v263 = v272;
      v264 = v318;
    }
    v266 = *(_QWORD *)(v245 + *(int *)(v119 + 20));
    swift_beginAccess();
    v267 = *(_QWORD *)(v266 + 336);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v245, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    swift_beginAccess();
    v268 = swift_isUniquelyReferenced_nonNull_native();
    v321 = *v222;
    *v222 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v267, 0xD00000000000001CLL, 0x80000002284DF620, v268);
    *v222 = v321;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v118 = v319;

    (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v263, v273);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v264, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData);
  }
  else
  {
    v107(v96, 1, 1, v100);

    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v96, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_TrainingData?);
    return 0;
  }
  return v118;
}

uint64_t closure #1 in AutonamingModelFeatures.init<A>(proto:)(uint64_t *a1, unsigned int (*a2)(char *, uint64_t, uint64_t), _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  Swift::String v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  BOOL v64;
  unint64_t v65;
  uint64_t (*v66)(unint64_t *);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(unint64_t *, _QWORD);
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  char isUniquelyReferenced_nonNull_native;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void (*v87)(unint64_t *, _QWORD);
  uint64_t *v88;
  uint64_t *v89;
  char v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(unint64_t *, _QWORD);
  uint64_t *v101;
  uint64_t *v102;
  char v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(unint64_t *, _QWORD);
  uint64_t *v115;
  uint64_t *v116;
  char v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(unint64_t *, _QWORD);
  unint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  char v131;
  Swift::String v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  double v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(unint64_t *, _QWORD);
  uint64_t *v140;
  uint64_t *v141;
  char v142;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (*v153)(unint64_t *);
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  char *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int (*v168)(char *, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;

  v165 = a3;
  v168 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v144 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v155 = (uint64_t)&v144 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v146 = (uint64_t)&v144 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v158 = (uint64_t)&v144 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v148 = (uint64_t)&v144 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v159 = (uint64_t)&v144 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v150 = (char *)&v144 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v161 = (uint64_t)&v144 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v152 = (uint64_t)&v144 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v164 = (char *)&v144 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v153 = (uint64_t (*)(unint64_t *))((char *)&v144 - v26);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v144 - v27;
  v29 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v156 = (char *)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v154 = (char *)&v144 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v145 = (char *)&v144 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v157 = (uint64_t)&v144 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v147 = (uint64_t)&v144 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v162 = (char *)&v144 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v149 = (uint64_t)&v144 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v160 = (uint64_t)&v144 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v151 = (uint64_t)&v144 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)&v144 - v50;
  v52 = MEMORY[0x24BDAC7A8](v49);
  v54 = (char *)&v144 - v53;
  MEMORY[0x24BDAC7A8](v52);
  v56 = (char *)&v144 - v55;
  v166 = *a1;
  v175 = v166;
  v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v175 = 0x746E635F65636166;
  v176 = 0xE90000000000005FLL;
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v58 = v176;
  v163 = v175;
  v167 = (uint64_t)v168 + *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0) + 20);
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, (uint64_t)v28);
  v168 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v168(v28, 1, v29) == 1)
  {
    UnknownStorage.init()();
    v59 = *(int *)(v29 + 20);
    if (one-time initialization token for defaultInstance != -1)
      swift_once();
    *(_QWORD *)&v56[v59] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v28, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v28, (uint64_t)v56, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  }
  v60 = *(_QWORD *)&v56[*(int *)(v29 + 20)];
  swift_beginAccess();
  v61 = *(_QWORD *)(v60 + 176);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v56, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  v62 = *(_QWORD *)(v61 + 16);
  swift_bridgeObjectRelease();
  v63 = 0.0;
  v64 = v62 < v166;
  v65 = v166;
  if (v64)
    goto LABEL_15;
  v66 = v153;
  outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, (uint64_t)v153);
  if (v168((char *)v66, 1, v29) != 1)
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v66, (uint64_t)v54, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    goto LABEL_11;
  }
  UnknownStorage.init()();
  v67 = *(int *)(v29 + 20);
  if (one-time initialization token for defaultInstance != -1)
    goto LABEL_91;
  while (1)
  {
    *(_QWORD *)&v54[v67] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
    swift_retain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v66, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
LABEL_11:
    v68 = *(_QWORD *)&v54[*(int *)(v29 + 20)];
    swift_beginAccess();
    v69 = *(_QWORD *)(v68 + 176);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v54, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v70 = v65 - 1;
    if (__OFSUB__(v65, 1))
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
      goto LABEL_80;
    }
    if ((v70 & 0x8000000000000000) != 0)
      goto LABEL_78;
    if (v70 >= *(_QWORD *)(v69 + 16))
      goto LABEL_79;
    v63 = *(double *)(v69 + 8 * v70 + 32);
    swift_bridgeObjectRelease();
LABEL_15:
    v66 = *(uint64_t (**)(unint64_t *))((*MEMORY[0x24BEE4EA0] & *v165) + 0xA0);
    v71 = (void (*)(unint64_t *, _QWORD))v66(&v175);
    v72 = v65;
    v74 = v73;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v174 = *v74;
    *v74 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v163, v58, isUniquelyReferenced_nonNull_native, v63);
    *v74 = v174;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v71(&v175, 0);
    v175 = v72;
    v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v175 = 0xD00000000000001ALL;
    v176 = 0x80000002284DF4D0;
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    v56 = (char *)v175;
    v58 = v176;
    v54 = v164;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, (uint64_t)v164);
    if (v168(v54, 1, v29) == 1)
    {
      UnknownStorage.init()();
      v69 = *(int *)(v29 + 20);
      if (one-time initialization token for defaultInstance == -1)
      {
LABEL_17:
        *(_QWORD *)&v51[v69] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v54, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
        goto LABEL_19;
      }
LABEL_80:
      swift_once();
      goto LABEL_17;
    }
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v54, (uint64_t)v51, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
LABEL_19:
    v77 = *(_QWORD *)&v51[*(int *)(v29 + 20)];
    swift_beginAccess();
    v78 = *(_QWORD *)(v77 + 184);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v51, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v79 = *(_QWORD *)(v78 + 16);
    swift_bridgeObjectRelease();
    v80 = 0.0;
    v65 = v166;
    if (v79 >= v166)
    {
      v81 = v152;
      outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, v152);
      if (v168((char *)v81, 1, v29) == 1)
      {
        v82 = v151;
        UnknownStorage.init()();
        v83 = *(int *)(v29 + 20);
        if (one-time initialization token for defaultInstance != -1)
          swift_once();
        *(_QWORD *)(v82 + v83) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v81, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      }
      else
      {
        v82 = v151;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v81, v151, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      }
      v84 = *(_QWORD *)(v82 + *(int *)(v29 + 20));
      swift_beginAccess();
      v85 = *(_QWORD *)(v84 + 184);
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v82, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      v86 = v166 - 1;
      if (v166 < 1)
      {
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      if (v86 >= *(_QWORD *)(v85 + 16))
        goto LABEL_82;
      v80 = *(double *)(v85 + 8 * v86 + 32);
      swift_bridgeObjectRelease();
      v65 = v166;
    }
    v164 = (char *)v66;
    v87 = (void (*)(unint64_t *, _QWORD))v66(&v175);
    v89 = v88;
    v90 = swift_isUniquelyReferenced_nonNull_native();
    v173 = *v89;
    *v89 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v56, v58, v90, v80);
    *v89 = v173;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87(&v175, 0);
    v175 = v65;
    v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v175 = 0xD00000000000001CLL;
    v176 = 0x80000002284DF4F0;
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    v66 = (uint64_t (*)(unint64_t *))v175;
    v58 = v176;
    v81 = v161;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, v161);
    if (v168((char *)v81, 1, v29) == 1)
    {
      v82 = v160;
      UnknownStorage.init()();
      v85 = *(int *)(v29 + 20);
      v56 = v162;
      if (one-time initialization token for defaultInstance == -1)
      {
LABEL_30:
        *(_QWORD *)(v82 + v85) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v81, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
        goto LABEL_32;
      }
LABEL_83:
      swift_once();
      goto LABEL_30;
    }
    v82 = v160;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v81, v160, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v56 = v162;
LABEL_32:
    v92 = *(_QWORD *)(v82 + *(int *)(v29 + 20));
    swift_beginAccess();
    v93 = *(_QWORD *)(v92 + 192);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v82, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v94 = *(_QWORD *)(v93 + 16);
    swift_bridgeObjectRelease();
    v95 = 0.0;
    if (v94 >= v65)
    {
      v54 = v150;
      outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, (uint64_t)v150);
      if (v168(v54, 1, v29) == 1)
      {
        v96 = v149;
        UnknownStorage.init()();
        v97 = *(int *)(v29 + 20);
        if (one-time initialization token for defaultInstance != -1)
          swift_once();
        *(_QWORD *)(v96 + v97) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v54, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      }
      else
      {
        v96 = v149;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v54, v149, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      }
      v98 = *(_QWORD *)(v96 + *(int *)(v29 + 20));
      swift_beginAccess();
      v99 = *(_QWORD *)(v98 + 192);
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v96, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      if (v65 - 1 >= *(_QWORD *)(v99 + 16))
      {
        __break(1u);
        goto LABEL_85;
      }
      v95 = *(double *)(v99 + 8 * (v65 - 1) + 32);
      swift_bridgeObjectRelease();
    }
    v100 = (void (*)(unint64_t *, _QWORD))((uint64_t (*)(unint64_t *))v164)(&v175);
    v102 = v101;
    v103 = swift_isUniquelyReferenced_nonNull_native();
    v172 = *v102;
    *v102 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v66, v58, v103, v95);
    *v102 = v172;
    v65 = v166;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v100(&v175, 0);
    v175 = v65;
    v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v175 = 0xD00000000000001ALL;
    v176 = 0x80000002284DF510;
    String.append(_:)(v104);
    swift_bridgeObjectRelease();
    v54 = (char *)v175;
    v58 = v176;
    v96 = v159;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, v159);
    if (v168((char *)v96, 1, v29) == 1)
    {
      UnknownStorage.init()();
      v99 = *(int *)(v29 + 20);
      if (one-time initialization token for defaultInstance == -1)
      {
LABEL_42:
        *(_QWORD *)&v56[v99] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v96, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
        goto LABEL_44;
      }
LABEL_85:
      swift_once();
      goto LABEL_42;
    }
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v96, (uint64_t)v56, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
LABEL_44:
    v66 = (uint64_t (*)(unint64_t *))v164;
    v105 = *(_QWORD *)&v56[*(int *)(v29 + 20)];
    swift_beginAccess();
    v106 = *(_QWORD *)(v105 + 200);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v56, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v107 = *(_QWORD *)(v106 + 16);
    swift_bridgeObjectRelease();
    v108 = 0.0;
    if (v107 >= v65)
    {
      v109 = v148;
      outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, v148);
      if (v168((char *)v109, 1, v29) == 1)
      {
        v110 = v147;
        UnknownStorage.init()();
        v111 = *(int *)(v29 + 20);
        if (one-time initialization token for defaultInstance != -1)
          swift_once();
        *(_QWORD *)(v110 + v111) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v109, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      }
      else
      {
        v110 = v147;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v109, v147, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      }
      v112 = *(_QWORD *)(v110 + *(int *)(v29 + 20));
      swift_beginAccess();
      v113 = *(_QWORD *)(v112 + 200);
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v110, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      if (v65 - 1 >= *(_QWORD *)(v113 + 16))
      {
        __break(1u);
        goto LABEL_87;
      }
      v108 = *(double *)(v113 + 8 * (v65 - 1) + 32);
      swift_bridgeObjectRelease();
    }
    v114 = (void (*)(unint64_t *, _QWORD))v66(&v175);
    v116 = v115;
    v117 = swift_isUniquelyReferenced_nonNull_native();
    v171 = *v116;
    *v116 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v54, v58, v117, v108);
    *v116 = v171;
    v65 = v166;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v114(&v175, 0);
    v175 = v65;
    v118._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v175 = 0xD000000000000017;
    v176 = 0x80000002284DF6A0;
    String.append(_:)(v118);
    swift_bridgeObjectRelease();
    v54 = (char *)v175;
    v58 = v176;
    v109 = v158;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, v158);
    if (v168((char *)v109, 1, v29) == 1)
    {
      v110 = v157;
      UnknownStorage.init()();
      v113 = *(int *)(v29 + 20);
      if (one-time initialization token for defaultInstance == -1)
      {
LABEL_54:
        *(_QWORD *)(v110 + v113) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v109, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
        goto LABEL_56;
      }
LABEL_87:
      swift_once();
      goto LABEL_54;
    }
    v110 = v157;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v109, v157, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
LABEL_56:
    v119 = *(_QWORD *)(v110 + *(int *)(v29 + 20));
    swift_beginAccess();
    v120 = *(_QWORD *)(v119 + 312);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v110, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v121 = *(_QWORD *)(v120 + 16);
    swift_bridgeObjectRelease();
    v122 = 0.0;
    if (v121 >= v65)
    {
      v123 = v146;
      outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, v146);
      if (v168((char *)v123, 1, v29) == 1)
      {
        v56 = v145;
        UnknownStorage.init()();
        v124 = *(int *)(v29 + 20);
        if (one-time initialization token for defaultInstance != -1)
          swift_once();
        *(_QWORD *)&v56[v124] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v123, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
      }
      else
      {
        v56 = v145;
        outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v123, (uint64_t)v145, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      }
      v125 = *(_QWORD *)&v56[*(int *)(v29 + 20)];
      swift_beginAccess();
      v126 = *(_QWORD *)(v125 + 312);
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v56, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
      if (v65 - 1 >= *(_QWORD *)(v126 + 16))
      {
        __break(1u);
        goto LABEL_89;
      }
      v122 = *(double *)(v126 + 8 * (v65 - 1) + 32);
      swift_bridgeObjectRelease();
    }
    v127 = (void (*)(unint64_t *, _QWORD))v66(&v175);
    v128 = v65;
    v130 = v129;
    v131 = swift_isUniquelyReferenced_nonNull_native();
    v170 = *v130;
    *v130 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v54, v58, v131, v122);
    *v130 = v170;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v127(&v175, 0);
    v175 = v128;
    v132._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v175 = 0xD00000000000001BLL;
    v176 = 0x80000002284DF530;
    String.append(_:)(v132);
    swift_bridgeObjectRelease();
    v54 = (char *)v175;
    v58 = v176;
    v123 = v155;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, v155);
    if (v168((char *)v123, 1, v29) == 1)
    {
      v56 = v154;
      UnknownStorage.init()();
      v126 = *(int *)(v29 + 20);
      v65 = (unint64_t)v156;
      if (one-time initialization token for defaultInstance == -1)
      {
LABEL_66:
        *(_QWORD *)&v56[v126] = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
        swift_retain();
        outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v123, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
        goto LABEL_68;
      }
LABEL_89:
      swift_once();
      goto LABEL_66;
    }
    v56 = v154;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v123, (uint64_t)v154, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v65 = (unint64_t)v156;
LABEL_68:
    v133 = *(_QWORD *)&v56[*(int *)(v29 + 20)];
    swift_beginAccess();
    v134 = *(_QWORD *)(v133 + 208);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v56, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    v135 = *(_QWORD *)(v134 + 16);
    swift_bridgeObjectRelease();
    v136 = 0.0;
    if (v135 < v166)
      goto LABEL_76;
    v51 = v144;
    outlined init with copy of DocumentUnderstanding_Autonaming_XGBoostModelFeatures?(v167, (uint64_t)v144);
    if (v168(v51, 1, v29) == 1)
    {
      UnknownStorage.init()();
      v137 = *(int *)(v29 + 20);
      if (one-time initialization token for defaultInstance != -1)
        swift_once();
      *(_QWORD *)(v65 + v137) = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
      swift_retain();
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v51, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
    }
    else
    {
      outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v51, v65, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    }
    v138 = *(_QWORD *)(v65 + *(int *)(v29 + 20));
    swift_beginAccess();
    v67 = *(_QWORD *)(v138 + 208);
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v65, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
    if ((unint64_t)(v166 - 1) < *(_QWORD *)(v67 + 16))
      break;
    __break(1u);
LABEL_91:
    swift_once();
  }
  v136 = *(double *)(v67 + 8 * (v166 - 1) + 32);
  swift_bridgeObjectRelease();
LABEL_76:
  v139 = (uint64_t (*)(unint64_t *, _QWORD))v66(&v175);
  v141 = v140;
  v142 = swift_isUniquelyReferenced_nonNull_native();
  v169 = *v141;
  *v141 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v54, v58, v142, v136);
  *v141 = v169;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v139(&v175, 0);
}

uint64_t AutonamingModelFeatures.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(void);
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t);
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v194;
  char *v195;
  uint64_t (*v196)(void);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD v200[46];

  v2 = v1;
  v199 = a1;
  v3 = type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v197 = (uint64_t)&v194 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v194 - v7;
  v9 = (int *)type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v194 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v12 = *(uint64_t (**)(void))(v4 + 56);
  v195 = &v11[v9[5]];
  v196 = v12;
  v13 = v12();
  v14 = &v11[v9[6]];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = v9[7];
  v11[v15] = 2;
  v16 = &v11[v9[8]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *(_QWORD *)v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x78))(v13);
  v14[8] = 0;
  v18 = (*(uint64_t (**)(void))((*v17 & *v2) + 0xC0))();
  v194 = v11;
  v11[v15] = v18 & 1;
  v19 = (uint64_t)v8;
  *(_QWORD *)v16 = (*(uint64_t (**)(void))((*v17 & *v2) + 0xD8))();
  *((_QWORD *)v16 + 1) = v20;
  UnknownStorage.init()();
  v198 = v3;
  v21 = (uint64_t *)&v8[*(int *)(v3 + 20)];
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *v21 = static DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.defaultInstance;
  v22 = *(uint64_t (**)(uint64_t))((*v17 & *v2) + 0x90);
  v23 = swift_retain();
  v24 = v22(v23);
  if (*(_QWORD *)(v24 + 16))
  {
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(0x61727563636F6F63, 0xEF746E632065636ELL);
    if ((v26 & 1) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  v27 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_8:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v28 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v28);
    swift_release();
  }
LABEL_9:
  v29 = *v21;
  v30 = swift_beginAccess();
  *(_QWORD *)(v29 + 16) = v27;
  *(_BYTE *)(v29 + 24) = 0;
  v31 = v22(v30);
  if (*(_QWORD *)(v31 + 16))
  {
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(0x6320797469746E65, 0xEA0000000000746ELL);
    if ((v33 & 1) != 0)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  v34 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_14:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v35 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v35);
    swift_release();
  }
LABEL_15:
  v36 = *v21;
  v37 = swift_beginAccess();
  *(_QWORD *)(v36 + 32) = v34;
  *(_BYTE *)(v36 + 40) = 0;
  v38 = v22(v37);
  if (*(_QWORD *)(v38 + 16))
  {
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E63206567616D69, 0xE900000000000074);
    if ((v40 & 1) != 0)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  v41 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_20:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v42 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v42);
    swift_release();
  }
LABEL_21:
  v43 = *v21;
  v44 = swift_beginAccess();
  *(_QWORD *)(v43 + 48) = v41;
  *(_BYTE *)(v43 + 56) = 0;
  v45 = v22(v44);
  if (*(_QWORD *)(v45 + 16))
  {
    v46 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012, 0x80000002284DF350);
    if ((v47 & 1) != 0)
    {
      v48 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
  v48 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_26:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v49 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v49);
    swift_release();
  }
LABEL_27:
  v50 = *v21;
  v51 = swift_beginAccess();
  *(_QWORD *)(v50 + 64) = v48;
  *(_BYTE *)(v50 + 72) = 0;
  v52 = v22(v51);
  if (*(_QWORD *)(v52 + 16))
  {
    v53 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x80000002284DF370);
    if ((v54 & 1) != 0)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  v55 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_32:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v56 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v56);
    swift_release();
  }
LABEL_33:
  v57 = *v21;
  v58 = swift_beginAccess();
  *(_QWORD *)(v57 + 80) = v55;
  *(_BYTE *)(v57 + 88) = 0;
  v59 = v22(v58);
  if (*(_QWORD *)(v59 + 16))
  {
    v60 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F20656369766564, 0xEC00000072656E77);
    if ((v61 & 1) != 0)
    {
      v62 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v60);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_39;
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRelease();
  v62 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_38:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v63 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v63);
    swift_release();
  }
LABEL_39:
  v64 = *v21;
  v65 = swift_beginAccess();
  *(_QWORD *)(v64 + 96) = v62;
  *(_BYTE *)(v64 + 104) = 0;
  v66 = v22(v65);
  if (*(_QWORD *)(v66 + 16))
  {
    v67 = specialized __RawDictionaryStorage.find<A>(_:)(0x2072657020676D69, 0xEC00000065636166);
    if ((v68 & 1) != 0)
    {
      v69 = *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v67);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_45;
      goto LABEL_44;
    }
  }
  swift_bridgeObjectRelease();
  v69 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_44:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v70 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v70);
    swift_release();
  }
LABEL_45:
  v71 = *v21;
  v72 = swift_beginAccess();
  *(_QWORD *)(v71 + 112) = v69;
  *(_BYTE *)(v71 + 120) = 0;
  v73 = v22(v72);
  if (*(_QWORD *)(v73 + 16))
  {
    v74 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000011, 0x80000002284DF390);
    if ((v75 & 1) != 0)
    {
      v76 = *(_QWORD *)(*(_QWORD *)(v73 + 56) + 8 * v74);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_51;
      goto LABEL_50;
    }
  }
  swift_bridgeObjectRelease();
  v76 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_50:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v77 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v77);
    swift_release();
  }
LABEL_51:
  v78 = *v21;
  v79 = swift_beginAccess();
  *(_QWORD *)(v78 + 128) = v76;
  *(_BYTE *)(v78 + 136) = 0;
  v80 = v22(v79);
  if (*(_QWORD *)(v80 + 16))
  {
    v81 = specialized __RawDictionaryStorage.find<A>(_:)(0x6E20657571696E75, 0xEC00000073656D61);
    if ((v82 & 1) != 0)
    {
      v83 = *(_QWORD *)(*(_QWORD *)(v80 + 56) + 8 * v81);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_57;
      goto LABEL_56;
    }
  }
  swift_bridgeObjectRelease();
  v83 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_56:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v84 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v84);
    swift_release();
  }
LABEL_57:
  v85 = *v21;
  v86 = swift_beginAccess();
  *(_QWORD *)(v85 + 144) = v83;
  *(_BYTE *)(v85 + 152) = 0;
  v87 = v22(v86);
  if (*(_QWORD *)(v87 + 16))
  {
    v88 = specialized __RawDictionaryStorage.find<A>(_:)(0x6620657571696E75, 0xEC00000073656361);
    if ((v89 & 1) != 0)
    {
      v90 = *(_QWORD *)(*(_QWORD *)(v87 + 56) + 8 * v88);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  swift_bridgeObjectRelease();
  v90 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_62:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v91 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v91);
    swift_release();
  }
LABEL_63:
  v92 = *v21;
  v93 = swift_beginAccess();
  *(_QWORD *)(v92 + 160) = v90;
  *(_BYTE *)(v92 + 168) = 0;
  v94 = v22(v93);
  if (*(_QWORD *)(v94 + 16))
  {
    v95 = specialized __RawDictionaryStorage.find<A>(_:)(0x68745F6C65646F6DLL, 0xEF646C6F68736572);
    if ((v96 & 1) != 0)
    {
      v97 = *(_QWORD *)(*(_QWORD *)(v94 + 56) + 8 * v95);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_69;
      goto LABEL_68;
    }
  }
  swift_bridgeObjectRelease();
  v97 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_68:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v98 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v98);
    swift_release();
  }
LABEL_69:
  v99 = *v21;
  v100 = swift_beginAccess();
  *(_QWORD *)(v99 + 296) = v97;
  *(_BYTE *)(v99 + 304) = 0;
  v101 = v22(v100);
  if (*(_QWORD *)(v101 + 16))
  {
    v102 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000002284DF550);
    if ((v103 & 1) != 0)
    {
      v104 = *(_QWORD *)(*(_QWORD *)(v101 + 56) + 8 * v102);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_75;
      goto LABEL_74;
    }
  }
  swift_bridgeObjectRelease();
  v104 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_74:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v105 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v105);
    swift_release();
  }
LABEL_75:
  v106 = *v21;
  v107 = swift_beginAccess();
  *(_QWORD *)(v106 + 280) = v104;
  *(_BYTE *)(v106 + 288) = 0;
  v108 = v22(v107);
  if (*(_QWORD *)(v108 + 16))
  {
    v109 = specialized __RawDictionaryStorage.find<A>(_:)(0x7268745F766E6F63, 0xEC00000073646165);
    if ((v110 & 1) != 0)
    {
      v111 = *(_QWORD *)(*(_QWORD *)(v108 + 56) + 8 * v109);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_81;
      goto LABEL_80;
    }
  }
  swift_bridgeObjectRelease();
  v111 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_80:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v112 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v112);
    swift_release();
  }
LABEL_81:
  v113 = *v21;
  v114 = swift_beginAccess();
  *(_QWORD *)(v113 + 216) = v111;
  *(_BYTE *)(v113 + 224) = 0;
  v115 = v22(v114);
  if (!*(_QWORD *)(v115 + 16)
    || (v116 = specialized __RawDictionaryStorage.find<A>(_:)(0x736D5F746E756F63, 0xEA00000000007367),
        (v117 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v118 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_87;
    goto LABEL_86;
  }
  v118 = *(_QWORD *)(*(_QWORD *)(v115 + 56) + 8 * v116);
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_86:
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v119 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v119);
    swift_release();
  }
LABEL_87:
  v120 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v120 + 232) = v118;
  *(_BYTE *)(v120 + 240) = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v121 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v121);
    swift_release();
  }
  v122 = *v21;
  swift_beginAccess();
  v123 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v122 + 176) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v124 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v124);
    swift_release();
  }
  v125 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v125 + 184) = v123;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v126 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v126);
    swift_release();
  }
  v127 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v127 + 192) = v123;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v128 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v128);
    swift_release();
  }
  v129 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v129 + 200) = v123;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v130 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v130);
    swift_release();
  }
  v131 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v131 + 312) = v123;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v132 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v132);
    swift_release();
  }
  v133 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v133 + 208) = v123;
  swift_bridgeObjectRelease();
  v200[0] = 1;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 2;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 3;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 4;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 5;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 6;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 7;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 8;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 9;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 10;
  closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v200[0] = 11;
  v134 = closure #1 in AutonamingModelFeatures.protoRepresentation.getter((uint64_t)v200, (uint64_t)v8, v2);
  v135 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0xA8);
  v136 = v135(v134);
  if (*(_QWORD *)(v136 + 16))
  {
    v137 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, 0x80000002284DF5A0);
    if ((v138 & 1) != 0)
    {
      v123 = *(_QWORD *)(*(_QWORD *)(v136 + 56) + 8 * v137);
      swift_bridgeObjectRetain();
    }
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v139 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v139);
    swift_release();
  }
  v140 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v140 + 248) = v123;
  v141 = swift_bridgeObjectRelease();
  v142 = v135(v141);
  if (*(_QWORD *)(v142 + 16)
    && (v143 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001DLL, 0x80000002284DF5C0),
        (v144 & 1) != 0))
  {
    v145 = *(_QWORD *)(*(_QWORD *)(v142 + 56) + 8 * v143);
    swift_bridgeObjectRetain();
  }
  else
  {
    v145 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v146 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v146);
    swift_release();
  }
  v147 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v147 + 256) = v145;
  v148 = swift_bridgeObjectRelease();
  v149 = v135(v148);
  if (*(_QWORD *)(v149 + 16)
    && (v150 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000002284DF5E0),
        (v151 & 1) != 0))
  {
    v152 = *(_QWORD *)(*(_QWORD *)(v149 + 56) + 8 * v150);
    swift_bridgeObjectRetain();
  }
  else
  {
    v152 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v153 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v153);
    swift_release();
  }
  v154 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v154 + 264) = v152;
  v155 = swift_bridgeObjectRelease();
  v156 = v135(v155);
  if (*(_QWORD *)(v156 + 16)
    && (v157 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000002284DF600),
        (v158 & 1) != 0))
  {
    v159 = *(_QWORD *)(*(_QWORD *)(v156 + 56) + 8 * v157);
    swift_bridgeObjectRetain();
  }
  else
  {
    v159 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v160 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v160);
    swift_release();
  }
  v161 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v161 + 272) = v159;
  v162 = swift_bridgeObjectRelease();
  v163 = v135(v162);
  if (*(_QWORD *)(v163 + 16)
    && (v164 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x80000002284DF640),
        (v165 & 1) != 0))
  {
    v166 = *(_QWORD *)(*(_QWORD *)(v163 + 56) + 8 * v164);
    swift_bridgeObjectRetain();
  }
  else
  {
    v166 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v167 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v167);
    swift_release();
  }
  v168 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v168 + 320) = v166;
  v169 = swift_bridgeObjectRelease();
  v170 = v135(v169);
  if (*(_QWORD *)(v170 + 16)
    && (v171 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, 0x80000002284DF660),
        (v172 & 1) != 0))
  {
    v173 = *(_QWORD *)(*(_QWORD *)(v170 + 56) + 8 * v171);
    swift_bridgeObjectRetain();
  }
  else
  {
    v173 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v174 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v174);
    swift_release();
  }
  v175 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v175 + 328) = v173;
  v176 = swift_bridgeObjectRelease();
  v177 = v135(v176);
  if (*(_QWORD *)(v177 + 16)
    && (v178 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x80000002284DF680),
        (v179 & 1) != 0))
  {
    v180 = *(_QWORD *)(*(_QWORD *)(v177 + 56) + 8 * v178);
    swift_bridgeObjectRetain();
  }
  else
  {
    v180 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v181 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v181);
    swift_release();
  }
  v182 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v182 + 344) = v180;
  v183 = swift_bridgeObjectRelease();
  v184 = v135(v183);
  if (*(_QWORD *)(v184 + 16)
    && (v185 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000002284DF620),
        (v186 & 1) != 0))
  {
    v187 = *(_QWORD *)(*(_QWORD *)(v184 + 56) + 8 * v185);
    swift_bridgeObjectRetain();
  }
  else
  {
    v187 = MEMORY[0x24BEE4AF8];
  }
  v189 = (uint64_t)v194;
  v188 = (uint64_t)v195;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v190 = swift_retain();
    *v21 = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v190);
    swift_release();
  }
  v191 = *v21;
  swift_beginAccess();
  *(_QWORD *)(v191 + 336) = v187;
  swift_bridgeObjectRelease();
  v192 = v197;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v19, v197, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v188, &demangling cache variable for type metadata for DocumentUnderstanding_Autonaming_XGBoostModelFeatures?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v192, v188, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v196)(v188, 0, 1, v198);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent(v189, v199, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData);
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v19, type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures);
}

uint64_t closure #1 in AutonamingModelFeatures.protoRepresentation.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  Swift::String v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  v6 = swift_bridgeObjectRelease();
  v7 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *a3) + 0x90);
  v8 = v7(v6);
  v9 = 0;
  if (*(_QWORD *)(v8 + 16))
  {
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x746E635F65636166, 0xE90000000000005FLL);
    if ((v11 & 1) != 0)
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = *(int *)(type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures(0) + 20);
  v13 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  v14 = *(_QWORD **)(v13 + 176);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
  v14[2] = v16 + 1;
  v14[v16 + 4] = v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v17 = swift_retain();
    *(_QWORD *)(a2 + v12) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v17);
    swift_release();
  }
  v18 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  *(_QWORD *)(v18 + 176) = v14;
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  v20 = swift_bridgeObjectRelease();
  v21 = v7(v20);
  v22 = 0;
  if (*(_QWORD *)(v21 + 16))
  {
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF4D0);
    if ((v24 & 1) != 0)
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v23);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  v26 = *(_QWORD **)(v25 + 184);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
  v28 = v26[2];
  v27 = v26[3];
  if (v28 >= v27 >> 1)
    v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v26);
  v26[2] = v28 + 1;
  v26[v28 + 4] = v22;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v29 = swift_retain();
    *(_QWORD *)(a2 + v12) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v29);
    swift_release();
  }
  v30 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  *(_QWORD *)(v30 + 184) = v26;
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  v32 = swift_bridgeObjectRelease();
  v33 = v7(v32);
  v34 = 0;
  if (*(_QWORD *)(v33 + 16))
  {
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x80000002284DF4F0);
    if ((v36 & 1) != 0)
      v34 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v35);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  v38 = *(_QWORD **)(v37 + 192);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
  v40 = v38[2];
  v39 = v38[3];
  if (v40 >= v39 >> 1)
    v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
  v38[2] = v40 + 1;
  v38[v40 + 4] = v34;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v41 = swift_retain();
    *(_QWORD *)(a2 + v12) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v41);
    swift_release();
  }
  v42 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  *(_QWORD *)(v42 + 192) = v38;
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v43);
  v44 = swift_bridgeObjectRelease();
  v45 = v7(v44);
  v46 = 0;
  if (*(_QWORD *)(v45 + 16))
  {
    v47 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001ALL, 0x80000002284DF510);
    if ((v48 & 1) != 0)
      v46 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v47);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  v50 = *(_QWORD **)(v49 + 200);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
  v52 = v50[2];
  v51 = v50[3];
  if (v52 >= v51 >> 1)
    v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v51 > 1), v52 + 1, 1, v50);
  v50[2] = v52 + 1;
  v50[v52 + 4] = v46;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v53 = swift_retain();
    *(_QWORD *)(a2 + v12) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v53);
    swift_release();
  }
  v54 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  *(_QWORD *)(v54 + 200) = v50;
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v55);
  v56 = swift_bridgeObjectRelease();
  v57 = v7(v56);
  v58 = 0;
  if (*(_QWORD *)(v57 + 16))
  {
    v59 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000002284DF6A0);
    if ((v60 & 1) != 0)
      v58 = *(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v59);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v61 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  v62 = *(_QWORD **)(v61 + 312);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
  v64 = v62[2];
  v63 = v62[3];
  if (v64 >= v63 >> 1)
    v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v63 > 1), v64 + 1, 1, v62);
  v62[2] = v64 + 1;
  v62[v64 + 4] = v58;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v65 = swift_retain();
    *(_QWORD *)(a2 + v12) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v65);
    swift_release();
  }
  v66 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  *(_QWORD *)(v66 + 312) = v62;
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v67);
  v68 = swift_bridgeObjectRelease();
  v69 = v7(v68);
  v70 = 0;
  if (*(_QWORD *)(v69 + 16))
  {
    v71 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x80000002284DF530);
    if ((v72 & 1) != 0)
      v70 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v71);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  v74 = *(_QWORD **)(v73 + 208);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
  v76 = v74[2];
  v75 = v74[3];
  if (v76 >= v75 >> 1)
    v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v75 > 1), v76 + 1, 1, v74);
  v74[2] = v76 + 1;
  v74[v76 + 4] = v70;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass();
    swift_allocObject();
    v77 = swift_retain();
    *(_QWORD *)(a2 + v12) = DocumentUnderstanding_Autonaming_XGBoostModelFeatures._StorageClass.init(copying:)(v77);
    swift_release();
  }
  v78 = *(_QWORD *)(a2 + v12);
  swift_beginAccess();
  *(_QWORD *)(v78 + 208) = v74;
  return swift_bridgeObjectRelease();
}

uint64_t AutonamingModelFeatures.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xF8))(v4);
  v7 = specialized AutonamingModelFeatures.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutonamingModelFeatures?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall AutonamingModelFeatures.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for AutonamingModelFeatures();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type AutonamingModelFeatures and conformance AutonamingModelFeatures, v2, (uint64_t (*)(uint64_t))type metadata accessor for AutonamingModelFeatures, (uint64_t)&protocol conformance descriptor for AutonamingModelFeatures);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t AutonamingModelFeatures.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AutonamingModelFeatures.init(coder:)(a1);
}

uint64_t AutonamingModelFeatures.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type AutonamingModelFeatures and conformance AutonamingModelFeatures, v4, (uint64_t (*)(uint64_t))type metadata accessor for AutonamingModelFeatures, (uint64_t)&protocol conformance descriptor for AutonamingModelFeatures);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id AutonamingModelFeatures.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AutonamingModelFeatures.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_super v7;

  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_annotation] = -1;
  v1 = OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_featureMap;
  v2 = v0;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[v1] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v4 = OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_listFeatureMap;
  *(_QWORD *)&v2[v4] = specialized Dictionary.init(dictionaryLiteral:)(v3);
  v2[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_groundTruthAvailable] = 0;
  v5 = &v2[OBJC_IVAR____TtC21DocumentUnderstanding23AutonamingModelFeatures_cooccurrenceKey];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0xE000000000000000;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for AutonamingModelFeatures();
  return objc_msgSendSuper2(&v7, sel_init);
}

id AutonamingModelFeatures.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AutonamingModelFeatures();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance AutonamingModelFeatures()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xF8))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance AutonamingModelFeatures@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 240);
  v6 = type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData(0);
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, 255, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AutonamingModelFeatures()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in AutonamingModelFeatures()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2283C3CCC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_2283C3D0C(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80))(*a1);
}

uint64_t sub_2283C3D48@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t sub_2283C3D88(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x98);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2283C3DC8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA8))();
  *a2 = result;
  return result;
}

uint64_t sub_2283C3E08(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB0);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_2283C3E48@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xC0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_2283C3E8C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xC8))(*a1);
}

uint64_t sub_2283C3EC8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xD8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_2283C3F08(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0xE0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_2283C3F5C()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_Autonaming_TrainingData and conformance DocumentUnderstanding_Autonaming_TrainingData, 255, type metadata accessor for DocumentUnderstanding_Autonaming_TrainingData, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_Autonaming_TrainingData);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
  return result;
}

uint64_t DUTermsOfAddressAnalyzer.init(languageCode:termOfAddressCountThreshold:termOfAddressUniquePrefixesThreshold:termOfAddressAsNameThreshold:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v8[6];

  specialized DUTermsOfAddressAnalyzer.init(languageCode:termOfAddressCountThreshold:termOfAddressUniquePrefixesThreshold:termOfAddressAsNameThreshold:)(a1, a2, a3, a4, a5, v8);
  swift_bridgeObjectRelease();
  return outlined init with take of DUTermsOfAddressAnalyzer?((uint64_t)v8, a6);
}

uint64_t DUTermsOfAddressAnalyzer.analyze(outgoingMessages:additionalUserText:)(uint64_t a1, uint64_t a2)
{
  id *v2;
  uint64_t v3;
  char **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  char isUniquelyReferenced_nonNull_native;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  char v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  _BOOL8 v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  char v118;
  unint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v122;
  char v123;
  unint64_t v124;
  char v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Swift::Int *v150;
  Swift::Int v151;
  Swift::Int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  void *v159;
  id v160;
  Class isa;
  uint64_t v162;
  _QWORD *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v177;
  id v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char v191;
  unint64_t v192;
  uint64_t v193;
  _BOOL8 v194;
  uint64_t v195;
  char v196;
  unint64_t v197;
  char v198;
  char v199;
  char v200;
  unint64_t v201;
  uint64_t v202;
  _BOOL8 v203;
  uint64_t v204;
  char v205;
  unint64_t v206;
  char v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  BOOL v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char v224;
  char v225;
  char v226;
  char v227;
  unint64_t v228;
  uint64_t v229;
  _BOOL8 v230;
  uint64_t v231;
  char v232;
  unint64_t v233;
  char v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t result;
  uint64_t v240;
  uint64_t v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  id v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t v265[3];
  uint64_t v266;

  v247 = *(_QWORD *)(a1 + 16);
  if (v247)
  {
    v244 = a1 + 32;
    v246 = *v2;
    swift_bridgeObjectRetain();
    v3 = 0;
    v259 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v4 = &selRef_e1946_;
    while (1)
    {
      v5 = (uint64_t *)(v244 + 16 * v3);
      v7 = *v5;
      v6 = v5[1];
      swift_bridgeObjectRetain();
      v8 = (void *)MEMORY[0x22E2AF8EC](v7, v6);
      v9 = objc_msgSend(v246, sel_matchesInString_options_range_, v8, 0, 0, String.count.getter());

      type metadata accessor for NSTextCheckingResult();
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v249 = v3;
        if (v11)
        {
LABEL_6:
          if (v11 < 1)
            goto LABEL_262;
          v12 = 0;
          v13 = v10 & 0xC000000000000001;
          v252 = v11;
          v255 = v10;
          v250 = v10 & 0xC000000000000001;
          do
          {
            if (v13)
              v15 = (id)MEMORY[0x22E2AFF34](v12, v10);
            else
              v15 = *(id *)(v10 + 8 * v12 + 32);
            v16 = v15;
            objc_msgSend(v15, v4[337], 1);
            Range<>.init(_:in:)();
            if ((v17 & 1) == 0)
            {
              objc_msgSend(v16, v4[337], 2);
              Range<>.init(_:in:)();
              if ((v18 & 1) == 0)
              {
                v19 = String.subscript.getter();
                v20 = MEMORY[0x22E2AF988](v19);
                v22 = v21;
                swift_bridgeObjectRelease();
                v23 = String.subscript.getter();
                v24 = MEMORY[0x22E2AF988](v23);
                v26 = v25;
                swift_bridgeObjectRelease();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  v27 = v259;
                else
                  v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v259[2] + 1, 1, v259);
                v29 = v27[2];
                v28 = v27[3];
                if (v29 >= v28 >> 1)
                  v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
                v27[2] = v29 + 1;
                v259 = v27;
                v14 = &v27[4 * v29];
                v14[4] = v20;
                v14[5] = v22;
                v14[6] = v24;
                v14[7] = v26;
                v4 = &selRef_e1946_;
                v11 = v252;
                v10 = v255;
                v13 = v250;
              }
            }
            ++v12;

          }
          while (v11 != v12);
        }
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        v249 = v3;
        if (v11)
          goto LABEL_6;
      }
      v3 = v249 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v249 + 1 == v247)
      {
        swift_bridgeObjectRelease();
        v30 = v259;
        goto LABEL_24;
      }
    }
  }
  v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_24:
  v31 = MEMORY[0x24BEE4B00];
  v266 = MEMORY[0x24BEE4B00];
  v32 = v30[2];
  v260 = v30;
  if (!v32)
    goto LABEL_57;
  v33 = swift_bridgeObjectRetain() + 56;
  do
  {
    v35 = *(_QWORD *)(v33 - 24);
    v34 = *(_QWORD *)(v33 - 16);
    v36 = *(_QWORD *)(v31 + 16);
    swift_bridgeObjectRetain();
    if (!v36)
    {
      swift_bridgeObjectRetain();
LABEL_38:
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v265[0] = v31;
      v52 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
      v53 = *(_QWORD *)(v31 + 16);
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        goto LABEL_260;
      v56 = v51;
      if (*(_QWORD *)(v31 + 24) >= v55)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v31 = v265[0];
          if ((v51 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v31 = v265[0];
          if ((v56 & 1) != 0)
            goto LABEL_26;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v55, isUniquelyReferenced_nonNull_native);
        v57 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
        if ((v56 & 1) != (v58 & 1))
          goto LABEL_275;
        v52 = v57;
        v31 = v265[0];
        if ((v56 & 1) != 0)
        {
LABEL_26:
          *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v52) = 1;
          goto LABEL_27;
        }
      }
      *(_QWORD *)(v31 + 8 * (v52 >> 6) + 64) |= 1 << v52;
      v59 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * v52);
      *v59 = v35;
      v59[1] = v34;
      *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v52) = 1;
      v60 = *(_QWORD *)(v31 + 16);
      v61 = __OFADD__(v60, 1);
      v62 = v60 + 1;
      if (v61)
        goto LABEL_266;
      goto LABEL_55;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    v39 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v37);
    swift_bridgeObjectRelease();
    v40 = v39 + 1;
    if (__OFADD__(v39, 1))
      goto LABEL_267;
    swift_bridgeObjectRetain();
    v41 = swift_isUniquelyReferenced_nonNull_native();
    v265[0] = v31;
    v43 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
    v44 = *(_QWORD *)(v31 + 16);
    v45 = (v42 & 1) == 0;
    v46 = v44 + v45;
    if (__OFADD__(v44, v45))
    {
LABEL_268:
      __break(1u);
      goto LABEL_269;
    }
    v47 = v42;
    if (*(_QWORD *)(v31 + 24) >= v46)
    {
      if ((v41 & 1) != 0)
      {
        v31 = v265[0];
        if ((v42 & 1) != 0)
          goto LABEL_50;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v31 = v265[0];
        if ((v47 & 1) != 0)
          goto LABEL_50;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, v41);
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v34);
      if ((v47 & 1) != (v49 & 1))
        goto LABEL_275;
      v43 = v48;
      v31 = v265[0];
      if ((v47 & 1) != 0)
      {
LABEL_50:
        *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v43) = v40;
        goto LABEL_27;
      }
    }
    *(_QWORD *)(v31 + 8 * (v43 >> 6) + 64) |= 1 << v43;
    v63 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * v43);
    *v63 = v35;
    v63[1] = v34;
    *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v43) = v40;
    v64 = *(_QWORD *)(v31 + 16);
    v61 = __OFADD__(v64, 1);
    v62 = v64 + 1;
    if (v61)
      goto LABEL_272;
LABEL_55:
    *(_QWORD *)(v31 + 16) = v62;
    swift_bridgeObjectRetain();
LABEL_27:
    v266 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v33 += 32;
    --v32;
  }
  while (v32);
  swift_bridgeObjectRelease();
LABEL_57:
  v65 = v31 + 64;
  v66 = 1 << *(_BYTE *)(v31 + 32);
  v67 = -1;
  if (v66 < 64)
    v67 = ~(-1 << v66);
  v68 = v67 & *(_QWORD *)(v31 + 64);
  v69 = (unint64_t)(v66 + 63) >> 6;
  swift_bridgeObjectRetain();
  v70 = 0;
  v71 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v72 = v241;
  if (!v68)
    goto LABEL_63;
  while (2)
  {
    v73 = __clz(__rbit64(v68));
    v68 &= v68 - 1;
    v74 = v73 | (v70 << 6);
LABEL_61:
    if (*(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v74) >= *(_QWORD *)(v72 + 24))
    {
      v78 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * v74);
      v80 = *v78;
      v79 = v78[1];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71[2] + 1, 1, v71);
      v81 = v71;
      v82 = v71[2];
      v83 = v81;
      v84 = v81[3];
      v72 = v241;
      if (v82 >= v84 >> 1)
      {
        v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v84 > 1), v82 + 1, 1, v83);
        v72 = v241;
        v83 = v86;
      }
      v83[2] = v82 + 1;
      v85 = &v83[2 * v82];
      v71 = v83;
      v85[4] = v80;
      v85[5] = v79;
      if (v68)
        continue;
    }
    else if (v68)
    {
      continue;
    }
    break;
  }
LABEL_63:
  v75 = v70 + 1;
  if (__OFADD__(v70, 1))
    goto LABEL_258;
  if (v75 >= v69)
  {
LABEL_83:
    swift_release();
    v256 = v260[2];
    if (v256)
    {
      swift_bridgeObjectRetain();
      v87 = v260;
      v88 = 0;
      v248 = v71 + 9;
      v89 = (_QWORD *)MEMORY[0x24BEE4B00];
      v253 = v71;
      while (1)
      {
        if (v88 >= v87[2])
        {
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
          goto LABEL_261;
        }
        v91 = v71[2];
        if (v91)
          break;
LABEL_87:
        if (++v88 == v256)
        {
          swift_bridgeObjectRelease();
          goto LABEL_143;
        }
      }
      v92 = &v260[4 * v88 + 4];
      v93 = v92[1];
      v94 = v92[2];
      v95 = v92[3];
      v96 = *v92;
      v97 = v71[4] == *v92 && v71[5] == v93;
      if (!v97 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v91 == 1)
          goto LABEL_118;
        if ((v253[6] != v96 || v253[7] != v93) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v91 != 2)
          {
            v130 = v248;
            v131 = 2;
            while (1)
            {
              v132 = v131 + 1;
              if (__OFADD__(v131, 1))
                goto LABEL_273;
              v133 = *(v130 - 1) == v96 && *v130 == v93;
              if (v133 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_95;
              v130 += 2;
              ++v131;
              v87 = v260;
              if (v132 == v91)
                goto LABEL_119;
            }
          }
LABEL_118:
          v87 = v260;
LABEL_119:
          v71 = v253;
          goto LABEL_87;
        }
      }
LABEL_95:
      v265[0] = v94;
      v265[1] = v95;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v98 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v100 = v99;
      if (v89[2])
      {
        swift_bridgeObjectRetain();
        v101 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v93);
        if ((v102 & 1) != 0)
        {
          v103 = *(_QWORD **)(v89[7] + 8 * v101);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v103[2] + 1, 1, v103);
          v105 = v103[2];
          v104 = v103[3];
          if (v105 >= v104 >> 1)
            v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v104 > 1), v105 + 1, 1, v103);
          v103[2] = v105 + 1;
          v106 = &v103[2 * v105];
          v106[4] = v98;
          v106[5] = v100;
          swift_bridgeObjectRelease();
          v107 = swift_isUniquelyReferenced_nonNull_native();
          v265[0] = (uint64_t)v89;
          v109 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v93);
          v110 = v89[2];
          v111 = (v108 & 1) == 0;
          v112 = v110 + v111;
          if (__OFADD__(v110, v111))
            goto LABEL_271;
          v113 = v108;
          if (v89[3] >= v112)
          {
            v71 = v253;
            if ((v107 & 1) != 0)
            {
              v89 = (_QWORD *)v265[0];
              if ((v108 & 1) == 0)
                goto LABEL_139;
            }
            else
            {
              specialized _NativeDictionary.copy()();
              v89 = (_QWORD *)v265[0];
              if ((v113 & 1) == 0)
                goto LABEL_139;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v112, v107);
            v114 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v93);
            v71 = v253;
            if ((v113 & 1) != (v115 & 1))
              goto LABEL_275;
            v109 = v114;
            v89 = (_QWORD *)v265[0];
            if ((v113 & 1) == 0)
            {
LABEL_139:
              v89[(v109 >> 6) + 8] |= 1 << v109;
              v134 = (uint64_t *)(v89[6] + 16 * v109);
              *v134 = v96;
              v134[1] = v93;
              *(_QWORD *)(v89[7] + 8 * v109) = v103;
              v135 = v89[2];
              v61 = __OFADD__(v135, 1);
              v128 = v135 + 1;
              if (v61)
                goto LABEL_274;
              goto LABEL_140;
            }
          }
          v129 = v89[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v129 + 8 * v109) = v103;
LABEL_86:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v87 = v260;
          goto LABEL_87;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v116 = swift_allocObject();
      *(_OWORD *)(v116 + 16) = xmmword_2284C1EE0;
      *(_QWORD *)(v116 + 32) = v98;
      *(_QWORD *)(v116 + 40) = v100;
      v117 = swift_isUniquelyReferenced_nonNull_native();
      v265[0] = (uint64_t)v89;
      v119 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v93);
      v120 = v89[2];
      v121 = (v118 & 1) == 0;
      v122 = v120 + v121;
      if (__OFADD__(v120, v121))
        goto LABEL_265;
      v123 = v118;
      if (v89[3] >= v122)
      {
        v71 = v253;
        if ((v117 & 1) != 0)
        {
          v89 = (_QWORD *)v265[0];
          if ((v118 & 1) == 0)
            goto LABEL_114;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v89 = (_QWORD *)v265[0];
          if ((v123 & 1) == 0)
            goto LABEL_114;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v122, v117);
        v124 = specialized __RawDictionaryStorage.find<A>(_:)(v96, v93);
        v71 = v253;
        if ((v123 & 1) != (v125 & 1))
          goto LABEL_275;
        v119 = v124;
        v89 = (_QWORD *)v265[0];
        if ((v123 & 1) == 0)
        {
LABEL_114:
          v89[(v119 >> 6) + 8] |= 1 << v119;
          v126 = (uint64_t *)(v89[6] + 16 * v119);
          *v126 = v96;
          v126[1] = v93;
          *(_QWORD *)(v89[7] + 8 * v119) = v116;
          v127 = v89[2];
          v61 = __OFADD__(v127, 1);
          v128 = v127 + 1;
          if (v61)
            goto LABEL_270;
LABEL_140:
          v89[2] = v128;
          swift_bridgeObjectRetain();
          goto LABEL_86;
        }
      }
      v90 = v89[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v90 + 8 * v119) = v116;
      goto LABEL_86;
    }
    v89 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_143:
    v265[0] = (uint64_t)v71;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v265, &v266);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v136 = v265[0];
    v137 = *(_QWORD *)(v265[0] + 16);
    v245 = v89;
    v138 = &unk_2284C1000;
    if (v137)
    {
      v139 = 0;
      v140 = v265[0] + 32;
      v254 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v257 = v265[0];
      v261 = v265[0] + 32;
      do
      {
        if (v139 >= *(_QWORD *)(v136 + 16))
          goto LABEL_257;
        if (v89[2])
        {
          v141 = (uint64_t *)(v140 + 16 * v139);
          v143 = *v141;
          v142 = v141[1];
          swift_bridgeObjectRetain_n();
          v144 = specialized __RawDictionaryStorage.find<A>(_:)(v143, v142);
          if ((v145 & 1) != 0)
          {
            v146 = *(_QWORD *)(v89[7] + 8 * v144);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v147 = Set.init(minimumCapacity:)();
            v264 = v147;
            v148 = *(_QWORD *)(v146 + 16);
            if (v148)
            {
              v149 = v137;
              v150 = (Swift::Int *)(v146 + 40);
              do
              {
                v151 = *(v150 - 1);
                v152 = *v150;
                swift_bridgeObjectRetain();
                specialized Set._Variant.insert(_:)(v265, v151, v152);
                swift_bridgeObjectRelease();
                v150 += 2;
                --v148;
              }
              while (v148);
              swift_bridgeObjectRelease();
              v153 = v264;
              v89 = v245;
              v137 = v149;
              v136 = v257;
            }
            else
            {
              v153 = v147;
              swift_bridgeObjectRelease();
            }
            v154 = *(_QWORD *)(v153 + 16);
            swift_bridgeObjectRelease();
            if (v154 >= *(_QWORD *)(v241 + 32))
            {
              v140 = v261;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v254 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v254[2] + 1, 1, v254);
              v156 = v254[2];
              v155 = v254[3];
              if (v156 >= v155 >> 1)
                v254 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v155 > 1), v156 + 1, 1, v254);
              v254[2] = v156 + 1;
              v157 = &v254[2 * v156];
              v157[4] = v143;
              v157[5] = v142;
              v138 = (_OWORD *)&unk_2284C1000;
            }
            else
            {
              swift_bridgeObjectRelease();
              v138 = (_OWORD *)&unk_2284C1000;
              v140 = v261;
            }
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }
        }
        ++v139;
      }
      while (v139 != v137);
      swift_release();
    }
    else
    {
      swift_release();
      v254 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLTagScheme>);
    v158 = swift_allocObject();
    *(_OWORD *)(v158 + 16) = v138[238];
    v159 = (void *)*MEMORY[0x24BDDFD08];
    *(_QWORD *)(v158 + 32) = *MEMORY[0x24BDDFD08];
    v160 = objc_allocWithZone(MEMORY[0x24BDDFD68]);
    type metadata accessor for NLTagScheme(0);
    v159;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v242 = objc_msgSend(v160, sel_initWithTagSchemes_, isa);

    v240 = *(_QWORD *)(a2 + 16);
    if (!v240)
    {
      v163 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_232:
      v217 = v254[2];
      if (v217)
      {
        v218 = v254 + 5;
        v219 = (_QWORD *)MEMORY[0x24BEE4B00];
        while (1)
        {
          v221 = *(v218 - 1);
          v220 = *v218;
          v222 = v163[2];
          swift_bridgeObjectRetain();
          if (v222 && (v223 = specialized __RawDictionaryStorage.find<A>(_:)(v221, v220), (v224 & 1) != 0))
            v225 = 2 * (*(_QWORD *)(v163[7] + 8 * v223) < *(_QWORD *)(v241 + 40));
          else
            v225 = 2;
          v263 = v225;
          v226 = swift_isUniquelyReferenced_nonNull_native();
          v265[0] = (uint64_t)v219;
          v228 = specialized __RawDictionaryStorage.find<A>(_:)(v221, v220);
          v229 = v219[2];
          v230 = (v227 & 1) == 0;
          v231 = v229 + v230;
          if (__OFADD__(v229, v230))
            goto LABEL_259;
          v232 = v227;
          if (v219[3] >= v231)
          {
            if ((v226 & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v231, v226);
            v233 = specialized __RawDictionaryStorage.find<A>(_:)(v221, v220);
            if ((v232 & 1) != (v234 & 1))
              goto LABEL_275;
            v228 = v233;
          }
          v219 = (_QWORD *)v265[0];
          if ((v232 & 1) != 0)
          {
            *(_BYTE *)(*(_QWORD *)(v265[0] + 56) + v228) = v263;
          }
          else
          {
            *(_QWORD *)(v265[0] + 8 * (v228 >> 6) + 64) |= 1 << v228;
            v235 = (uint64_t *)(v219[6] + 16 * v228);
            *v235 = v221;
            v235[1] = v220;
            *(_BYTE *)(v219[7] + v228) = v263;
            v236 = v219[2];
            v61 = __OFADD__(v236, 1);
            v237 = v236 + 1;
            if (v61)
              goto LABEL_264;
            v219[2] = v237;
            swift_bridgeObjectRetain();
          }
          v218 += 2;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!--v217)
            goto LABEL_250;
        }
      }
      v219 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_250:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v219;
    }
    swift_bridgeObjectRetain();
    v162 = 0;
    v163 = (_QWORD *)MEMORY[0x24BEE4B00];
    while (1)
    {
      v164 = (uint64_t *)(a2 + 32 + 16 * v162);
      v166 = *v164;
      v165 = v164[1];
      swift_bridgeObjectRetain();
      v167 = (void *)MEMORY[0x22E2AF8EC](v166, v165);
      objc_msgSend(v242, sel_setString_, v167);

      v168 = NLTagger.tags(in:unit:scheme:options:)();
      v169 = v168;
      v262 = *(_QWORD *)(v168 + 16);
      if (v262)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_167:
      if (++v162 == v240)
      {
        swift_bridgeObjectRelease();
        goto LABEL_232;
      }
    }
    v243 = v162;
    v170 = 0;
    v258 = v168 + 32;
    v251 = v168;
    while (1)
    {
      if (v170 >= *(_QWORD *)(v169 + 16))
      {
        __break(1u);
LABEL_252:
        __break(1u);
LABEL_253:
        __break(1u);
LABEL_254:
        __break(1u);
LABEL_255:
        __break(1u);
        goto LABEL_256;
      }
      v171 = *(void **)(v258 + 24 * v170);
      if (v171)
        break;
LABEL_172:
      if (++v170 == v262)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v162 = v243;
        goto LABEL_167;
      }
    }
    v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v174 = v173;
    if (v172 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v174 == v175)
    {
      v179 = v171;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v177 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v178 = v171;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v177 & 1) == 0)
      {

        goto LABEL_171;
      }
    }
    v180 = String.subscript.getter();
    v181 = MEMORY[0x22E2AF988](v180);
    v183 = v182;
    swift_bridgeObjectRelease();
    v184 = v254[2];
    if (v184)
    {
      v185 = v254[4] == v181 && v254[5] == v183;
      if (v185 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_188:
        if (v163[2])
        {
          swift_bridgeObjectRetain();
          v186 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v183);
          if ((v187 & 1) != 0)
          {
            v188 = *(_QWORD *)(v163[7] + 8 * v186);
            swift_bridgeObjectRelease();
            v189 = v188 + 1;
            if (__OFADD__(v188, 1))
              goto LABEL_254;
            swift_bridgeObjectRetain();
            v190 = swift_isUniquelyReferenced_nonNull_native();
            v265[0] = (uint64_t)v163;
            v192 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v183);
            v193 = v163[2];
            v194 = (v191 & 1) == 0;
            v195 = v193 + v194;
            if (__OFADD__(v193, v194))
              goto LABEL_255;
            v196 = v191;
            if (v163[3] >= v195)
            {
              if ((v190 & 1) != 0)
              {
                v163 = (_QWORD *)v265[0];
                if ((v191 & 1) == 0)
                  goto LABEL_227;
              }
              else
              {
                specialized _NativeDictionary.copy()();
                v163 = (_QWORD *)v265[0];
                if ((v196 & 1) == 0)
                  goto LABEL_227;
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v195, v190);
              v197 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v183);
              if ((v196 & 1) != (v198 & 1))
                goto LABEL_275;
              v192 = v197;
              v163 = (_QWORD *)v265[0];
              if ((v196 & 1) == 0)
              {
LABEL_227:
                v163[(v192 >> 6) + 8] |= 1 << v192;
                v215 = (uint64_t *)(v163[6] + 16 * v192);
                *v215 = v181;
                v215[1] = v183;
                *(_QWORD *)(v163[7] + 8 * v192) = v189;
                v216 = v163[2];
                v61 = __OFADD__(v216, 1);
                v214 = v216 + 1;
                if (v61)
                  goto LABEL_263;
LABEL_224:
                v163[2] = v214;
                swift_bridgeObjectRetain();
                goto LABEL_225;
              }
            }
            *(_QWORD *)(v163[7] + 8 * v192) = v189;
LABEL_225:

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            goto LABEL_171;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRetain();
        v199 = swift_isUniquelyReferenced_nonNull_native();
        v265[0] = (uint64_t)v163;
        v201 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v183);
        v202 = v163[2];
        v203 = (v200 & 1) == 0;
        v204 = v202 + v203;
        if (__OFADD__(v202, v203))
          goto LABEL_252;
        v205 = v200;
        if (v163[3] >= v204)
        {
          if ((v199 & 1) != 0)
          {
            v163 = (_QWORD *)v265[0];
            if ((v200 & 1) == 0)
              goto LABEL_223;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            v163 = (_QWORD *)v265[0];
            if ((v205 & 1) == 0)
              goto LABEL_223;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v204, v199);
          v206 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v183);
          if ((v205 & 1) != (v207 & 1))
            goto LABEL_275;
          v201 = v206;
          v163 = (_QWORD *)v265[0];
          if ((v205 & 1) == 0)
          {
LABEL_223:
            v163[(v201 >> 6) + 8] |= 1 << v201;
            v212 = (uint64_t *)(v163[6] + 16 * v201);
            *v212 = v181;
            v212[1] = v183;
            *(_QWORD *)(v163[7] + 8 * v201) = 1;
            v213 = v163[2];
            v61 = __OFADD__(v213, 1);
            v214 = v213 + 1;
            if (v61)
              goto LABEL_253;
            goto LABEL_224;
          }
        }
        *(_QWORD *)(v163[7] + 8 * v201) = 1;
        goto LABEL_225;
      }
      if (v184 != 1)
      {
        if (v254[6] == v181 && v254[7] == v183 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_188;
        if (v184 != 2)
        {
          v208 = v254 + 9;
          v209 = 2;
          while (1)
          {
            v210 = v209 + 1;
            if (__OFADD__(v209, 1))
              break;
            v211 = *(v208 - 1) == v181 && *v208 == v183;
            if (v211 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_188;
            v208 += 2;
            ++v209;
            if (v210 == v184)
              goto LABEL_170;
          }
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
          goto LABEL_268;
        }
      }
    }
LABEL_170:
    swift_bridgeObjectRelease();

LABEL_171:
    v169 = v251;
    goto LABEL_172;
  }
  v76 = *(_QWORD *)(v65 + 8 * v75);
  ++v70;
  if (v76)
    goto LABEL_76;
  v70 = v75 + 1;
  if (v75 + 1 >= v69)
    goto LABEL_83;
  v76 = *(_QWORD *)(v65 + 8 * v70);
  if (v76)
    goto LABEL_76;
  v70 = v75 + 2;
  if (v75 + 2 >= v69)
    goto LABEL_83;
  v76 = *(_QWORD *)(v65 + 8 * v70);
  if (v76)
    goto LABEL_76;
  v77 = v75 + 3;
  if (v77 >= v69)
    goto LABEL_83;
  v76 = *(_QWORD *)(v65 + 8 * v77);
  if (v76)
  {
    v70 = v77;
LABEL_76:
    v68 = (v76 - 1) & v76;
    v74 = __clz(__rbit64(v76)) + (v70 << 6);
    goto LABEL_61;
  }
  while (1)
  {
    v70 = v77 + 1;
    if (__OFADD__(v77, 1))
      break;
    if (v70 >= v69)
      goto LABEL_83;
    v76 = *(_QWORD *)(v65 + 8 * v70);
    ++v77;
    if (v76)
      goto LABEL_76;
  }
LABEL_269:
  __break(1u);
LABEL_270:
  __break(1u);
LABEL_271:
  __break(1u);
LABEL_272:
  __break(1u);
LABEL_273:
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void *one-time initialization function for termsOfAddressSearchPrefixes()
{
  uint64_t inited;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C1EE0;
  *(_QWORD *)(inited + 32) = 28261;
  *(_QWORD *)(inited + 40) = 0xE200000000000000;
  *(_QWORD *)(inited + 48) = &outlined read-only object #0 of one-time initialization function for termsOfAddressSearchPrefixes;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  termsOfAddressSearchPrefixes._rawValue = result;
  return result;
}

id DUTermsOfAddressAnalyzer.termsOfAddressSearchRegex.getter()
{
  id *v0;

  return *v0;
}

uint64_t DUTermsOfAddressAnalyzer.languageCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DUTermsOfAddressAnalyzer.termOfAddressCountThreshold.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t DUTermsOfAddressAnalyzer.termOfAddressUniquePrefixesThreshold.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t DUTermsOfAddressAnalyzer.termOfAddressAsNameThreshold.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x22E2AF8EC]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t *v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  Swift::Int v129;
  Swift::Int v130;
  char *v131;
  Swift::Int v132;
  Swift::Int v133;
  uint64_t v134;
  uint64_t *v135;
  char *__dst;
  uint64_t v137;
  uint64_t v138;

  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1, a2);
      return result;
    }
    goto LABEL_167;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_175;
  v129 = result;
  v126 = a1;
  v137 = v2;
  if (v4 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
      if (v13 < 2)
      {
LABEL_145:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v9 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
LABEL_133:
      v119 = *v126;
      while (1)
      {
        v120 = v13 - 2;
        if (v13 < 2)
          goto LABEL_162;
        if (!v119)
          goto LABEL_174;
        v121 = v12;
        v122 = *(_QWORD *)&v12[16 * v120 + 32];
        v123 = *(_QWORD *)&v12[16 * v13 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v119 + 16 * v122), (uint64_t *)(v119 + 16 * *(_QWORD *)&v12[16 * v13 + 16]), v119 + 16 * v123, __dst, a2);
        if (v137)
          goto LABEL_130;
        if (v123 < v122)
          goto LABEL_163;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v121 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
        if (v120 >= *((_QWORD *)v121 + 2))
          goto LABEL_164;
        v124 = &v121[16 * v120 + 32];
        *(_QWORD *)v124 = v122;
        *((_QWORD *)v124 + 1) = v123;
        v125 = *((_QWORD *)v121 + 2);
        if (v13 > v125)
          goto LABEL_165;
        memmove(&v121[16 * v13 + 16], &v121[16 * v13 + 32], 16 * (v125 - v13));
        *((_QWORD *)v121 + 2) = v125 - 1;
        v13 = v125 - 1;
        v137 = 0;
        v12 = v121;
        if (v125 <= 2)
          goto LABEL_145;
      }
    }
    v128 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v6 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v128 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v127 = *a1 + 24;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v133 = v4;
  v138 = *a1;
  while (2)
  {
    v14 = v10++;
    v131 = v12;
    v132 = v14;
    if (v10 >= v4)
      goto LABEL_54;
    v15 = (uint64_t *)(v11 + 16 * v10);
    v16 = v15[1];
    v17 = (uint64_t *)(v11 + 16 * v14);
    v19 = *v17;
    v18 = v17[1];
    v20 = *a2;
    if (!*(_QWORD *)(*a2 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_21;
    }
    v21 = *v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v16);
    if ((v23 & 1) == 0)
    {
LABEL_21:
      v24 = 0;
      goto LABEL_22;
    }
    v24 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v22);
LABEL_22:
    v25 = *a2;
    if (*(_QWORD *)(*a2 + 16))
    {
      swift_bridgeObjectRetain();
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v18);
      if ((v27 & 1) != 0)
        v134 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
      else
        v134 = 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      v134 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v14 + 2;
    if (v14 + 2 >= v4)
    {
LABEL_43:
      v11 = v138;
      goto LABEL_45;
    }
    v28 = (uint64_t *)(v127 + 16 * v14);
    v29 = v28;
    do
    {
      v32 = v29[2];
      v29 += 2;
      v31 = v32;
      v34 = *(v28 - 1);
      v33 = *v28;
      v35 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        v36 = v28[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v31);
        if ((v38 & 1) != 0)
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v37);
          goto LABEL_37;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v39 = 0;
LABEL_37:
      v40 = *a2;
      if (*(_QWORD *)(*a2 + 16))
      {
        swift_bridgeObjectRetain();
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v33);
        if ((v42 & 1) != 0)
        {
          v30 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v41);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          if (v134 < v24 == v30 >= v39)
            goto LABEL_42;
          goto LABEL_31;
        }
        v43 = v134 < v24;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v43 = v134 < v24;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (((v43 ^ (v39 < 1)) & 1) == 0)
      {
LABEL_42:
        v12 = v131;
        v14 = v132;
        goto LABEL_43;
      }
LABEL_31:
      ++v10;
      v28 = v29;
      v12 = v131;
      v11 = v138;
    }
    while (v4 != v10);
    v10 = v4;
    v14 = v132;
LABEL_45:
    if (v134 < v24)
    {
      if (v10 >= v14)
      {
        if (v14 < v10)
        {
          v44 = 16 * v10;
          v45 = 16 * v14;
          v46 = v10;
          v47 = v14;
          while (1)
          {
            if (v47 != --v46)
            {
              if (!v11)
                goto LABEL_173;
              v48 = v11 + v44;
              v49 = *(_QWORD *)(v11 + v45);
              v50 = *(_QWORD *)(v11 + v45 + 8);
              *(_OWORD *)(v11 + v45) = *(_OWORD *)(v11 + v44 - 16);
              *(_QWORD *)(v48 - 16) = v49;
              *(_QWORD *)(v48 - 8) = v50;
            }
            ++v47;
            v44 -= 16;
            v45 += 16;
            if (v47 >= v46)
              goto LABEL_54;
          }
        }
        goto LABEL_54;
      }
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }
LABEL_54:
    if (v10 >= v4)
      goto LABEL_82;
    if (__OFSUB__(v10, v14))
      goto LABEL_166;
    if (v10 - v14 >= v129)
      goto LABEL_82;
    v51 = v14 + v129;
    if (__OFADD__(v14, v129))
      goto LABEL_169;
    if (v51 >= v4)
      v51 = v4;
    if (v51 < v14)
    {
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v10 == v51)
      goto LABEL_82;
    v52 = (uint64_t *)(v11 + 16 * v10);
    v130 = v51;
    while (2)
    {
      v53 = *(_QWORD *)(v11 + 16 * v10 + 8);
      v54 = v14;
      v135 = v52;
      v55 = v52;
      while (2)
      {
        v57 = *(v55 - 2);
        v56 = *(v55 - 1);
        v58 = *a2;
        if (*(_QWORD *)(*a2 + 16))
        {
          v59 = *v55;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v60 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v53);
          if ((v61 & 1) != 0)
          {
            v62 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v60);
            goto LABEL_71;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v62 = 0;
LABEL_71:
        v63 = *a2;
        if (!*(_QWORD *)(*a2 + 16))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v62 <= 0)
            goto LABEL_63;
LABEL_78:
          v11 = v138;
          if (!v138)
            goto LABEL_171;
          v67 = *v55;
          v53 = v55[1];
          *(_OWORD *)v55 = *((_OWORD *)v55 - 1);
          *(v55 - 1) = v53;
          *(v55 - 2) = v67;
          v55 -= 2;
          if (v10 == ++v54)
            goto LABEL_64;
          continue;
        }
        break;
      }
      swift_bridgeObjectRetain();
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v56);
      if ((v65 & 1) != 0)
      {
        v66 = *(_QWORD *)(*(_QWORD *)(v63 + 56) + 8 * v64);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v66 >= v62)
          goto LABEL_63;
        goto LABEL_78;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v62 > 0)
        goto LABEL_78;
LABEL_63:
      v11 = v138;
LABEL_64:
      ++v10;
      v52 = v135 + 2;
      v14 = v132;
      if (v10 != v130)
        continue;
      break;
    }
    v10 = v130;
    v12 = v131;
    v4 = v133;
LABEL_82:
    if (v10 < v14)
    {
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
      goto LABEL_168;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v69 = *((_QWORD *)v12 + 2);
    v68 = *((_QWORD *)v12 + 3);
    v13 = v69 + 1;
    v11 = v138;
    if (v69 >= v68 >> 1)
    {
      v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v12);
      v11 = v138;
      v12 = v118;
    }
    *((_QWORD *)v12 + 2) = v13;
    v70 = v12 + 32;
    v71 = &v12[16 * v69 + 32];
    *(_QWORD *)v71 = v132;
    *((_QWORD *)v71 + 1) = v10;
    if (!v69)
    {
      v13 = 1;
LABEL_15:
      if (v10 >= v4)
      {
        v9 = v128;
        if (v13 < 2)
          goto LABEL_145;
        goto LABEL_133;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    v72 = v13 - 1;
    if (v13 >= 4)
    {
      v77 = &v70[16 * v13];
      v78 = *((_QWORD *)v77 - 8);
      v79 = *((_QWORD *)v77 - 7);
      v83 = __OFSUB__(v79, v78);
      v80 = v79 - v78;
      if (v83)
        goto LABEL_150;
      v82 = *((_QWORD *)v77 - 6);
      v81 = *((_QWORD *)v77 - 5);
      v83 = __OFSUB__(v81, v82);
      v75 = v81 - v82;
      v76 = v83;
      if (v83)
        goto LABEL_151;
      v84 = v13 - 2;
      v85 = &v70[16 * v13 - 32];
      v87 = *(_QWORD *)v85;
      v86 = *((_QWORD *)v85 + 1);
      v83 = __OFSUB__(v86, v87);
      v88 = v86 - v87;
      if (v83)
        goto LABEL_153;
      v83 = __OFADD__(v75, v88);
      v89 = v75 + v88;
      if (v83)
        goto LABEL_156;
      if (v89 >= v80)
      {
        v107 = &v70[16 * v72];
        v109 = *(_QWORD *)v107;
        v108 = *((_QWORD *)v107 + 1);
        v83 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v83)
          goto LABEL_160;
        v100 = v75 < v110;
        goto LABEL_119;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v101 = *((_QWORD *)v12 + 4);
        v102 = *((_QWORD *)v12 + 5);
        v83 = __OFSUB__(v102, v101);
        v94 = v102 - v101;
        v95 = v83;
        goto LABEL_113;
      }
      v74 = *((_QWORD *)v12 + 4);
      v73 = *((_QWORD *)v12 + 5);
      v83 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      v76 = v83;
    }
    if ((v76 & 1) != 0)
      goto LABEL_152;
    v84 = v13 - 2;
    v90 = &v70[16 * v13 - 32];
    v92 = *(_QWORD *)v90;
    v91 = *((_QWORD *)v90 + 1);
    v93 = __OFSUB__(v91, v92);
    v94 = v91 - v92;
    v95 = v93;
    if (v93)
      goto LABEL_155;
    v96 = &v70[16 * v72];
    v98 = *(_QWORD *)v96;
    v97 = *((_QWORD *)v96 + 1);
    v83 = __OFSUB__(v97, v98);
    v99 = v97 - v98;
    if (v83)
      goto LABEL_158;
    if (__OFADD__(v94, v99))
      goto LABEL_159;
    if (v94 + v99 >= v75)
    {
      v100 = v75 < v99;
LABEL_119:
      if (v100)
        v72 = v84;
      goto LABEL_121;
    }
LABEL_113:
    if ((v95 & 1) != 0)
      goto LABEL_154;
    v103 = &v70[16 * v72];
    v105 = *(_QWORD *)v103;
    v104 = *((_QWORD *)v103 + 1);
    v83 = __OFSUB__(v104, v105);
    v106 = v104 - v105;
    if (v83)
      goto LABEL_157;
    if (v106 < v94)
      goto LABEL_15;
LABEL_121:
    v111 = v72 - 1;
    if (v72 - 1 >= v13)
    {
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if (!v11)
      goto LABEL_172;
    v112 = v12;
    v113 = &v70[16 * v111];
    v114 = *(_QWORD *)v113;
    v115 = &v70[16 * v72];
    v116 = *((_QWORD *)v115 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)((uint64_t *)(v11 + 16 * *(_QWORD *)v113), (uint64_t *)(v11 + 16 * *(_QWORD *)v115), v11 + 16 * v116, __dst, a2);
    if (v137)
      break;
    if (v116 < v114)
      goto LABEL_147;
    if (v72 > *((_QWORD *)v112 + 2))
      goto LABEL_148;
    *(_QWORD *)v113 = v114;
    *(_QWORD *)&v70[16 * v111 + 8] = v116;
    v117 = *((_QWORD *)v112 + 2);
    if (v72 >= v117)
      goto LABEL_149;
    v12 = v112;
    v13 = v117 - 1;
    memmove(&v70[16 * v72], v115 + 16, 16 * (v117 - 1 - v72));
    *((_QWORD *)v112 + 2) = v117 - 1;
    v4 = v133;
    v11 = v138;
    if (v117 <= 2)
      goto LABEL_15;
  }
  v9 = v128;
LABEL_130:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v22 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v24 = *a4;
    v6 = (uint64_t *)(*a4 + 16 * a3);
LABEL_5:
    v7 = *(_QWORD *)(v24 + 16 * v5 + 8);
    v8 = v22;
    v23 = v6;
    while (1)
    {
      v10 = *(v6 - 2);
      v9 = *(v6 - 1);
      v11 = *a5;
      if (*(_QWORD *)(*a5 + 16))
      {
        v12 = *v6;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v7);
        if ((v14 & 1) != 0)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v13);
          goto LABEL_11;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v15 = 0;
LABEL_11:
      v16 = *a5;
      if (*(_QWORD *)(*a5 + 16))
      {
        swift_bridgeObjectRetain();
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease_n();
          if (v19 >= v15)
            goto LABEL_4;
          goto LABEL_18;
        }
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      if (v15 <= 0)
        goto LABEL_4;
LABEL_18:
      if (!v24)
      {
        __break(1u);
        return result;
      }
      v20 = *v6;
      v7 = v6[1];
      *(_OWORD *)v6 = *((_OWORD *)v6 - 1);
      *(v6 - 1) = v7;
      *(v6 - 2) = v20;
      v6 -= 2;
      if (v5 == ++v8)
      {
LABEL_4:
        ++v5;
        v6 = v23 + 2;
        if (v5 == a2)
          return result;
        goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(uint64_t *a1, uint64_t *__src, unint64_t a3, char *__dst, uint64_t *a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  char *v47;
  char *v51;
  uint64_t *v52;
  uint64_t *v53;

  v6 = __src;
  v7 = (char *)__src - (char *)a1;
  v8 = (char *)__src - (char *)a1 + 15;
  if ((char *)__src - (char *)a1 >= 0)
    v8 = (char *)__src - (char *)a1;
  v9 = v8 >> 4;
  v10 = a3 - (_QWORD)__src;
  v11 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v11 = a3 - (_QWORD)__src;
  v12 = v11 >> 4;
  v53 = a1;
  v52 = (uint64_t *)__dst;
  if (v9 >= v11 >> 4)
  {
    if (v10 < -15)
      goto LABEL_65;
    if (__dst != (char *)__src || &__src[2 * v12] <= (uint64_t *)__dst)
      memmove(__dst, __src, 16 * v12);
    v47 = __dst;
    v29 = &__dst[16 * v12];
    v51 = v29;
    v53 = v6;
    if (a1 >= v6 || v10 < 16)
    {
LABEL_64:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v53, (const void **)&v52, &v51);
      return 1;
    }
    v30 = (uint64_t *)(a3 - 16);
    v31 = v6;
    while (1)
    {
      v32 = *((_QWORD *)v29 - 1);
      v33 = *(v31 - 2);
      v34 = *(v31 - 1);
      v31 -= 2;
      v35 = *a5;
      if (*(_QWORD *)(*a5 + 16))
      {
        v36 = v33;
        v37 = *((_QWORD *)v29 - 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v32);
        if ((v39 & 1) != 0)
          v40 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v38);
        else
          v40 = 0;
        v33 = v36;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40 = 0;
      }
      v41 = v30 + 2;
      v42 = *a5;
      if (*(_QWORD *)(*a5 + 16))
      {
        swift_bridgeObjectRetain();
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
        if ((v44 & 1) != 0)
        {
          v45 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v43);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          if (v45 < v40)
            goto LABEL_58;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          if (v40 > 0)
          {
LABEL_58:
            if (v41 != v6 || v30 >= v6)
              *(_OWORD *)v30 = *(_OWORD *)v31;
            v53 = v31;
            goto LABEL_62;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v40 > 0)
          goto LABEL_58;
      }
      v51 = v29 - 16;
      if (v41 < (uint64_t *)v29 || v30 >= (uint64_t *)v29 || v41 != (uint64_t *)v29)
        *(_OWORD *)v30 = *((_OWORD *)v29 - 1);
      v31 = v6;
      v29 -= 16;
LABEL_62:
      if (v31 > a1)
      {
        v30 -= 2;
        v6 = v31;
        if (v29 > v47)
          continue;
      }
      goto LABEL_64;
    }
  }
  if (v7 >= -15)
  {
    if (__dst != (char *)a1 || &a1[2 * v9] <= (uint64_t *)__dst)
      memmove(__dst, a1, 16 * v9);
    v13 = (uint64_t *)&__dst[16 * v9];
    v51 = (char *)v13;
    if ((unint64_t)v6 < a3 && v7 >= 16)
    {
      v14 = (uint64_t *)__dst;
      v15 = a1;
      while (1)
      {
        v16 = v6[1];
        v17 = *v14;
        v18 = v14[1];
        v19 = *a5;
        if (*(_QWORD *)(*a5 + 16))
        {
          v20 = *v6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v16);
          if ((v22 & 1) != 0)
          {
            v23 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v21);
            goto LABEL_18;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        v23 = 0;
LABEL_18:
        v24 = *a5;
        if (*(_QWORD *)(*a5 + 16))
        {
          swift_bridgeObjectRetain();
          v25 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
          if ((v26 & 1) != 0)
          {
            v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            if (v27 < v23)
              goto LABEL_27;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            if (v23 > 0)
            {
LABEL_27:
              v28 = v6 + 2;
              if (v15 < v6 || v15 >= v28 || v15 != v6)
                *(_OWORD *)v15 = *(_OWORD *)v6;
              goto LABEL_31;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v23 > 0)
            goto LABEL_27;
        }
        if (v15 != v14)
          *(_OWORD *)v15 = *(_OWORD *)v14;
        v14 += 2;
        v52 = v14;
        v28 = v6;
LABEL_31:
        v15 += 2;
        if (v14 < v13)
        {
          v6 = v28;
          if ((unint64_t)v28 < a3)
            continue;
        }
        v53 = v15;
        goto LABEL_64;
      }
    }
    goto LABEL_64;
  }
LABEL_65:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x22E2B0108);
}

id specialized DUTermsOfAddressAnalyzer.init(languageCode:termOfAddressCountThreshold:termOfAddressUniquePrefixesThreshold:termOfAddressAsNameThreshold:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *rawValue;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  id result;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (one-time initialization token for termsOfAddressSearchPrefixes != -1)
    swift_once();
  rawValue = termsOfAddressSearchPrefixes._rawValue;
  v13 = *((_QWORD *)termsOfAddressSearchPrefixes._rawValue + 2);
  if (!v13)
  {
    result = 0;
    a1 = 0;
    a2 = 0;
LABEL_18:
    v33 = 0;
    v34 = 0;
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v15 & 1) == 0)
    goto LABEL_17;
  v16 = *(_QWORD *)(rawValue[7] + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  v36 = a4;
  v37 = a3;
  v35 = a5;
  if (v17)
  {
    swift_bridgeObjectRetain();
    v18 = (uint64_t *)(v16 + 40);
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v20 = *(v18 - 1);
      v21 = *v18;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      v23 = v19[2];
      v22 = v19[3];
      if (v23 >= v22 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v19);
      v18 += 2;
      v19[2] = v23 + 1;
      v24 = &v19[2 * v23];
      v24[4] = v20;
      v24[5] = v21;
      --v17;
    }
    while (v17);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v26 = BidirectionalCollection<>.joined(separator:)();
  v28 = v27;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(69);
  v29._countAndFlagsBits = 10334;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = v26;
  v30._object = v28;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._object = (void *)0x80000002284DF8C0;
  v31._countAndFlagsBits = 0x1000000000000041;
  String.append(_:)(v31);
  v32 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = @nonobjc NSRegularExpression.init(pattern:options:)(0, 0xE000000000000000, 1);
  if (!result)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    result = 0;
    a1 = 0;
    a2 = 0;
    v13 = 0;
    goto LABEL_18;
  }
  v33 = v36;
  v13 = v37;
  v34 = v35;
LABEL_19:
  *a6 = result;
  a6[1] = a1;
  a6[2] = a2;
  a6[3] = v13;
  a6[4] = v33;
  a6[5] = v34;
  return result;
}

uint64_t outlined init with take of DUTermsOfAddressAnalyzer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUTermsOfAddressAnalyzer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSTextCheckingResult()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSTextCheckingResult;
  if (!lazy cache variable for type metadata for NSTextCheckingResult)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
  }
  return result;
}

uint64_t destroy for DUTermsOfAddressAnalyzer(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DUTermsOfAddressAnalyzer(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DUTermsOfAddressAnalyzer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for DUTermsOfAddressAnalyzer(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for DUTermsOfAddressAnalyzer()
{
  return &type metadata for DUTermsOfAddressAnalyzer;
}

uint64_t static Utils.invert<A, B>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD v41[2];
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = type metadata accessor for Optional();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v41 - v11;
  v51 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v46 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = type metadata accessor for Optional();
  v48 = *(_QWORD *)(v15 - 8);
  v49 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v41 - v19;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v52 = a3;
  v47 = a5;
  v53 = Dictionary.init(dictionaryLiteral:)();
  if ((a1 & 0xC000000000000001) != 0)
  {
    v21 = __CocoaDictionary.makeIterator()();
    v42 = 0;
    v22 = 0;
    v23 = 0;
    v24 = v21 | 0x8000000000000000;
  }
  else
  {
    v25 = -1 << *(_BYTE *)(a1 + 32);
    v22 = ~v25;
    v26 = *(_QWORD *)(a1 + 64);
    v42 = a1 + 64;
    v27 = -v25;
    if (v27 < 64)
      v28 = ~(-1 << v27);
    else
      v28 = -1;
    v23 = v28 & v26;
    v24 = a1;
  }
  v50 = v24;
  v43 = (unint64_t)(v22 + 64) >> 6;
  v44 = v24 & 0x7FFFFFFFFFFFFFFFLL;
  v41[0] = v43 - 1;
  v41[1] = v22;
  result = swift_bridgeObjectRetain();
  v30 = 0;
  v45 = v12;
  v31 = v50;
  if ((v50 & 0x8000000000000000) != 0)
    goto LABEL_11;
LABEL_8:
  if (v23)
  {
    v32 = (v23 - 1) & v23;
    v33 = __clz(__rbit64(v23)) | (v30 << 6);
    v34 = v30;
LABEL_10:
    v35 = v31;
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v18, *(_QWORD *)(v31 + 48) + *(_QWORD *)(*(_QWORD *)(a2 - 8) + 72) * v33, a2);
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(&v18[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v35 + 56) + *(_QWORD *)(v51 + 72) * v33, v52);
    v36 = 0;
    v12 = v45;
    goto LABEL_20;
  }
  v34 = v30 + 1;
  if (__OFADD__(v30, 1))
  {
    __break(1u);
  }
  else
  {
    if (v34 >= v43)
    {
      v32 = 0;
      v36 = 1;
      v34 = v30;
      goto LABEL_20;
    }
    v37 = *(_QWORD *)(v42 + 8 * v34);
    if (v37)
      goto LABEL_16;
    if (v30 + 2 >= v43)
    {
      v32 = 0;
      v36 = 1;
      goto LABEL_20;
    }
    v37 = *(_QWORD *)(v42 + 8 * (v30 + 2));
    if (v37)
    {
      v34 = v30 + 2;
LABEL_16:
      v32 = (v37 - 1) & v37;
      v33 = __clz(__rbit64(v37)) + (v34 << 6);
      goto LABEL_10;
    }
    v40 = v30 + 3;
    if (v30 + 3 >= v43)
    {
      v32 = 0;
      v36 = 1;
      v34 = v30 + 2;
      goto LABEL_20;
    }
    v37 = *(_QWORD *)(v42 + 8 * v40);
    if (v37)
    {
      v34 = v30 + 3;
      goto LABEL_16;
    }
    while (1)
    {
      v34 = v40 + 1;
      if (__OFADD__(v40, 1))
        break;
      if (v34 >= v43)
      {
        v32 = 0;
        v36 = 1;
        v34 = v41[0];
LABEL_20:
        while (1)
        {
          v38 = *(_QWORD *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v18, v36, 1, TupleTypeMetadata2);
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v20, v18, v49);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v20, 1, TupleTypeMetadata2) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v46, &v20[*(int *)(TupleTypeMetadata2 + 48)], v52);
          v39 = *(_QWORD *)(a2 - 8);
          (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v12, v20, a2);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v12, 0, 1, a2);
          type metadata accessor for Dictionary();
          result = Dictionary.subscript.setter();
          v30 = v34;
          v23 = v32;
          v31 = v50;
          if ((v50 & 0x8000000000000000) == 0)
            goto LABEL_8;
LABEL_11:
          if (__CocoaDictionary.Iterator.next()())
          {
            _forceBridgeFromObjectiveC<A>(_:_:)();
            swift_unknownObjectRelease();
            _forceBridgeFromObjectiveC<A>(_:_:)();
            swift_unknownObjectRelease();
            v36 = 0;
          }
          else
          {
            v36 = 1;
          }
          v34 = v30;
          v32 = v23;
        }
        outlined consume of [String : String].Iterator._Variant();
        return v53;
      }
      v37 = *(_QWORD *)(v42 + 8 * v34);
      ++v40;
      if (v37)
        goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t static Utils.time<A>(label:_:)(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  CFAbsoluteTimeGetCurrent();
  a3();
  CFAbsoluteTimeGetCurrent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2284C1EE0;
  v7._countAndFlagsBits = 91;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 8285;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  Double.write<A>(to:)();
  v10._countAndFlagsBits = 29549;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  *(_QWORD *)(v6 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0xE000000000000000;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

CFAbsoluteTime static Utils.time<A>(_:)(uint64_t a1, void (*a2)(void))
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  a2();
  return CFAbsoluteTimeGetCurrent() - Current;
}

uint64_t static Utils.dateNow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  uint64_t result;
  double v7;
  uint64_t v8;

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  v5 = v4;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = v5 * 1000.0;
  if ((~COERCE__INT64(v5 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 < 9.22337204e18)
    return (uint64_t)v7;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static Utils.clamp<A>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  max<A>(_:_:)();
  min<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a4);
}

uint64_t static Utils.fakeThrowable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

unint64_t static Utils.substr(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;

  v6 = String.count.getter();
  v7 = 0;
  if (v6 < a4 || v6 < a3)
    return v7;
  result = String.index(_:offsetBy:)();
  if (__OFSUB__(a4, a3))
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    result = String.index(_:offsetBy:)();
    if (result >> 14 >= v9 >> 14)
    {
      v10 = String.subscript.getter();
      v7 = MEMORY[0x22E2AF988](v10);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for TokenizerError()
{
  return &type metadata for TokenizerError;
}

ValueMetadata *type metadata accessor for Utils()
{
  return &type metadata for Utils;
}

unint64_t static FoundInEventDataDetectorsOutput.mapTypeToString(type:)(char a1)
{
  unint64_t result;

  result = 0x6374614D44444753;
  switch(a1)
  {
    case 4:
      result = 0xD000000000000016;
      break;
    case 8:
      result = 0xD000000000000015;
      break;
    case 10:
      result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t DUFoundInEventDDType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2283C7948 + 4 * byte_2284C6879[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_2283C7948()
{
  return 0x656C746974;
}

uint64_t sub_2283C795C()
{
  return 0x656E6F6870;
}

uint64_t sub_2283C7970()
{
  return 7107189;
}

uint64_t sub_2283C7980()
{
  return 0x73736572646461;
}

uint64_t sub_2283C7994()
{
  return 1702125924;
}

uint64_t sub_2283C79A4()
{
  return 1701669236;
}

uint64_t sub_2283C79B4()
{
  return 0x6E6F73726570;
}

uint64_t sub_2283C79C8()
{
  return 0x746867696C66;
}

uint64_t sub_2283C79DC()
{
  return 0x676E696B63617274;
}

uint64_t sub_2283C79F4()
{
  return 0x6C69616D65;
}

void *static DUFoundInEventDDType.allCases.getter()
{
  return &outlined read-only object #0 of static DUFoundInEventDDType.allCases.getter;
}

uint64_t DUFoundInEventDDType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance DUFoundInEventDDType@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized DUFoundInEventDDType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance DUFoundInEventDDType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static DUFoundInEventDDType.allCases.getter;
}

uint64_t FoundInEventDataDetectorsOutput.detectedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, a1, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t FoundInEventDataDetectorsOutput.detectedDate.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t (*FoundInEventDataDetectorsOutput.detectedDate.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.detectedTimeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for TimeZone?);
}

uint64_t FoundInEventDataDetectorsOutput.detectedTimeZone.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for TimeZone?);
}

uint64_t (*FoundInEventDataDetectorsOutput.detectedTimeZone.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.detectedEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for DateComponents?);
}

uint64_t FoundInEventDataDetectorsOutput.detectedEndDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + *(int *)(v3 + 24), &demangling cache variable for type metadata for DateComponents?);
}

uint64_t (*FoundInEventDataDetectorsOutput.detectedEndDate.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.detectedEndTimeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for TimeZone?);
}

uint64_t FoundInEventDataDetectorsOutput.detectedEndTimeZone.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + *(int *)(v3 + 28), &demangling cache variable for type metadata for TimeZone?);
}

uint64_t (*FoundInEventDataDetectorsOutput.detectedEndTimeZone.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.type.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 32));
}

uint64_t FoundInEventDataDetectorsOutput.type.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FoundInEventDataDetectorsOutput();
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.type.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.trackingNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.trackingNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 36));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.trackingNumber.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.carrier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.carrier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 40));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.carrier.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.flightNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 44));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.flightNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 44));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.flightNumber.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.flightAirline.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.flightAirline.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.flightAirline.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 52));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.phoneNumber.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 52));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.phoneNumber.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.phoneNumberLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.phoneNumberLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 56));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.phoneNumberLabel.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.emailAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.emailAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.emailAddress.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1 + *(int *)(v3 + 64), a1, &demangling cache variable for type metadata for URL?);
}

uint64_t FoundInEventDataDetectorsOutput.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FoundInEventDataDetectorsOutput();
  return outlined assign with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + *(int *)(v3 + 64), &demangling cache variable for type metadata for URL?);
}

uint64_t (*FoundInEventDataDetectorsOutput.url.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.addressComponents.getter()
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return swift_bridgeObjectRetain();
}

uint64_t FoundInEventDataDetectorsOutput.addressComponents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 68);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.addressComponents.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FoundInEventDataDetectorsOutput.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 72));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.text.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.start.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 76));
}

uint64_t FoundInEventDataDetectorsOutput.start.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for FoundInEventDataDetectorsOutput();
  v6 = v2 + *(int *)(result + 76);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.start.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.len.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FoundInEventDataDetectorsOutput() + 80));
}

uint64_t FoundInEventDataDetectorsOutput.len.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for FoundInEventDataDetectorsOutput();
  v6 = v2 + *(int *)(result + 80);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*FoundInEventDataDetectorsOutput.len.modify())(_QWORD)
{
  type metadata accessor for FoundInEventDataDetectorsOutput();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t FoundInEventDataDetectorsOutput.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for DateComponents();
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v3(a1, 1, 1, v2);
  v4 = (int *)type metadata accessor for FoundInEventDataDetectorsOutput();
  v5 = a1 + v4[5];
  v6 = type metadata accessor for TimeZone();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v3(a1 + v4[6], 1, 1, v2);
  v7(a1 + v4[7], 1, 1, v6);
  *(_BYTE *)(a1 + v4[8]) = 0;
  v8 = (_QWORD *)(a1 + v4[9]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(a1 + v4[10]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)(a1 + v4[11]);
  *v10 = 0;
  v10[1] = 0;
  v11 = (_QWORD *)(a1 + v4[12]);
  *v11 = 0;
  v11[1] = 0;
  v12 = (_QWORD *)(a1 + v4[13]);
  *v12 = 0;
  v12[1] = 0;
  v13 = (_QWORD *)(a1 + v4[14]);
  *v13 = 0;
  v13[1] = 0;
  v14 = (_QWORD *)(a1 + v4[15]);
  *v14 = 0;
  v14[1] = 0;
  v15 = a1 + v4[16];
  v16 = type metadata accessor for URL();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)(a1 + v4[17]) = 0;
  v18 = (_QWORD *)(a1 + v4[18]);
  *v18 = 0;
  v18[1] = 0xE000000000000000;
  v19 = a1 + v4[19];
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = a1 + v4[20];
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  return result;
}

unint64_t specialized DUFoundInEventDDType.init(rawValue:)(unint64_t result)
{
  if (result >= 0xB)
    return 11;
  return result;
}

uint64_t type metadata accessor for FoundInEventDataDetectorsOutput()
{
  uint64_t result;

  result = type metadata singleton initialization cache for FoundInEventDataDetectorsOutput;
  if (!type metadata singleton initialization cache for FoundInEventDataDetectorsOutput)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type DUFoundInEventDDType and conformance DUFoundInEventDDType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DUFoundInEventDDType and conformance DUFoundInEventDDType;
  if (!lazy protocol witness table cache variable for type DUFoundInEventDDType and conformance DUFoundInEventDDType)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUFoundInEventDDType, &type metadata for DUFoundInEventDDType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUFoundInEventDDType and conformance DUFoundInEventDDType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DUFoundInEventDDType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DUFoundInEventDDType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DUFoundInEventDDType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DUFoundInEventDDType]);
    result = MEMORY[0x22E2B10E0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DUFoundInEventDDType] and conformance [A]);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DUFoundInEventDDType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DUFoundInEventDDType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_2283C87D8 + 4 * byte_2284C6889[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_2283C880C + 4 * byte_2284C6884[v4]))();
}

uint64_t sub_2283C880C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283C8814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2283C881CLL);
  return result;
}

uint64_t sub_2283C8828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2283C8830);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_2283C8834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2283C883C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DUFoundInEventDDType()
{
  return &type metadata for DUFoundInEventDDType;
}

uint64_t *initializeBufferWithCopyOfBuffer for FoundInEventDataDetectorsOutput(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v67;
  char *v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  unsigned int (*__dst)(uint64_t *, uint64_t, uint64_t);
  char *__dsta;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DateComponents();
    v8 = *(_QWORD *)(v7 - 8);
    __dst = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (__dst(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for TimeZone();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v16(v13, 1, v14))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v18 = a3[6];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    if (__dst((uint64_t *)((char *)a2 + v18), 1, v7))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v19, v20, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
    }
    v22 = a3[7];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    if (v16((char *)a2 + v22, 1, v14))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v23, v24, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v23, 0, 1, v14);
    }
    v26 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v27 = (uint64_t *)((char *)a1 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v70 = v28[1];
    *v27 = *v28;
    v27[1] = v70;
    v29 = a3[10];
    v30 = a3[11];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (uint64_t *)((char *)a1 + v30);
    v35 = (uint64_t *)((char *)a2 + v30);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = a3[12];
    v38 = a3[13];
    v39 = (uint64_t *)((char *)a1 + v37);
    v40 = (uint64_t *)((char *)a2 + v37);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = (uint64_t *)((char *)a1 + v38);
    v43 = (uint64_t *)((char *)a2 + v38);
    v44 = v43[1];
    *v42 = *v43;
    v42[1] = v44;
    v45 = a3[14];
    v46 = a3[15];
    v47 = (uint64_t *)((char *)a1 + v45);
    v48 = (uint64_t *)((char *)a2 + v45);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    v50 = (uint64_t *)((char *)a1 + v46);
    v51 = (uint64_t *)((char *)a2 + v46);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    v53 = a3[16];
    __dsta = (char *)a1 + v53;
    v68 = (char *)a2 + v53;
    v54 = type metadata accessor for URL();
    v67 = *(_QWORD *)(v54 - 8);
    v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v69(v68, 1, v54))
    {
      v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
      memcpy(__dsta, v68, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dsta, v68, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(__dsta, 0, 1, v54);
    }
    v56 = a3[18];
    *(uint64_t *)((char *)a1 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    v57 = (uint64_t *)((char *)a1 + v56);
    v58 = (uint64_t *)((char *)a2 + v56);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = a3[19];
    v61 = a3[20];
    v62 = (char *)a1 + v60;
    v63 = (char *)a2 + v60;
    v62[8] = v63[8];
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v64 = (char *)a1 + v61;
    v65 = (char *)a2 + v61;
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v64[8] = v65[8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FoundInEventDataDetectorsOutput(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DateComponents();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + a2[5];
  v8 = type metadata accessor for TimeZone();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = a1 + a2[6];
  if (!v6(v11, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
  v12 = a1 + a2[7];
  if (!v10(v12, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = a1 + a2[16];
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for FoundInEventDataDetectorsOutput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v65;
  char *v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  unsigned int (*__dst)(char *, uint64_t, uint64_t);
  char *__dsta;

  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  __dst = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (__dst(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for TimeZone();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  if (__dst(&a2[v16], 1, v6))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v18, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  if (v14(&a2[v20], 1, v12))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v21, v22, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
  }
  v24 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v68 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v68;
  v27 = a3[10];
  v28 = a3[11];
  v29 = &a1[v27];
  v30 = &a2[v27];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = &a1[v28];
  v33 = &a2[v28];
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = v34;
  v35 = a3[12];
  v36 = a3[13];
  v37 = &a1[v35];
  v38 = &a2[v35];
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v39;
  v40 = &a1[v36];
  v41 = &a2[v36];
  v42 = *((_QWORD *)v41 + 1);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *((_QWORD *)v40 + 1) = v42;
  v43 = a3[14];
  v44 = a3[15];
  v45 = &a1[v43];
  v46 = &a2[v43];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = &a1[v44];
  v49 = &a2[v44];
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = v50;
  v51 = a3[16];
  __dsta = &a1[v51];
  v66 = &a2[v51];
  v52 = type metadata accessor for URL();
  v65 = *(_QWORD *)(v52 - 8);
  v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v67(v66, 1, v52))
  {
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(__dsta, v66, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(__dsta, v66, v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(__dsta, 0, 1, v52);
  }
  v54 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = *((_QWORD *)v56 + 1);
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *((_QWORD *)v55 + 1) = v57;
  v58 = a3[19];
  v59 = a3[20];
  v60 = &a1[v58];
  v61 = &a2[v58];
  v60[8] = v61[8];
  *(_QWORD *)v60 = *(_QWORD *)v61;
  v62 = &a1[v59];
  v63 = &a2[v59];
  *(_QWORD *)v62 = *(_QWORD *)v63;
  v62[8] = v63[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for FoundInEventDataDetectorsOutput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v74 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for TimeZone();
  v75 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16(v14, 1, v15);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v13, v15);
LABEL_12:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v13, v14, v15);
LABEL_13:
  v20 = a3[6];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v8(&a1[v20], 1, v6);
  v24 = v8(v22, 1, v6);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v21, v22, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v21, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v21, v6);
LABEL_18:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v74 + 24))(v21, v22, v6);
LABEL_19:
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = v16(&a1[v26], 1, v15);
  v30 = v16(v28, 1, v15);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v27, v28, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v27, 0, 1, v15);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v27, v15);
LABEL_24:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v27, v28, v15);
LABEL_25:
  a1[a3[8]] = a2[a3[8]];
  v32 = a3[9];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = a3[10];
  v36 = &a1[v35];
  v37 = &a2[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = a3[11];
  v39 = &a1[v38];
  v40 = &a2[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v41 = a3[12];
  v42 = &a1[v41];
  v43 = &a2[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3[13];
  v45 = &a1[v44];
  v46 = &a2[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3[14];
  v48 = &a1[v47];
  v49 = &a2[v47];
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = a3[15];
  v51 = &a1[v50];
  v52 = &a2[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = a3[16];
  v54 = &a1[v53];
  v55 = &a2[v53];
  v56 = type metadata accessor for URL();
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 24))(v54, v55, v56);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v56);
    goto LABEL_30;
  }
  if (v60)
  {
LABEL_30:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_31:
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v62 = a3[18];
  v63 = &a1[v62];
  v64 = &a2[v62];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  *((_QWORD *)v63 + 1) = *((_QWORD *)v64 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v65 = a3[19];
  v66 = &a1[v65];
  v67 = &a2[v65];
  v68 = *(_QWORD *)v67;
  v66[8] = v67[8];
  *(_QWORD *)v66 = v68;
  v69 = a3[20];
  v70 = &a1[v69];
  v71 = &a2[v69];
  v72 = *(_QWORD *)v71;
  v70[8] = v71[8];
  *(_QWORD *)v70 = v72;
  return a1;
}

char *initializeWithTake for FoundInEventDataDetectorsOutput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  unsigned int (*v42)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v42(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for TimeZone();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  if (v42(&a2[v16], 1, v6))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  if (v14(&a2[v20], 1, v12))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v21, v22, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
  }
  v24 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  v25 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v25] = *(_OWORD *)&a2[v25];
  v26 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  v27 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  v28 = a3[16];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for URL();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v34 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  *(_OWORD *)&a1[v34] = *(_OWORD *)&a2[v34];
  v35 = a3[19];
  v36 = a3[20];
  v37 = &a1[v35];
  v38 = &a2[v35];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v37[8] = v38[8];
  v39 = &a1[v36];
  v40 = &a2[v36];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  return a1;
}

char *assignWithTake for FoundInEventDataDetectorsOutput(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v88;
  uint64_t v89;

  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v88 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for TimeZone();
  v89 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
  v17 = v16(v13, 1, v15);
  v18 = v16(v14, 1, v15);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v13, v15);
LABEL_12:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 40))(v13, v14, v15);
LABEL_13:
  v20 = a3[6];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v8(&a1[v20], 1, v6);
  v24 = v8(v22, 1, v6);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v21, v22, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v21, 0, 1, v6);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v88 + 8))(v21, v6);
LABEL_18:
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v88 + 40))(v21, v22, v6);
LABEL_19:
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = v16(&a1[v26], 1, v15);
  v30 = v16(v28, 1, v15);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v27, v28, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v27, 0, 1, v15);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v27, v15);
LABEL_24:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 40))(v27, v28, v15);
LABEL_25:
  v32 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v37 = a3[10];
  v38 = &a1[v37];
  v39 = &a2[v37];
  v41 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  v42 = a3[11];
  v43 = &a1[v42];
  v44 = &a2[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease();
  v47 = a3[12];
  v48 = &a1[v47];
  v49 = &a2[v47];
  v51 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease();
  v52 = a3[13];
  v53 = &a1[v52];
  v54 = &a2[v52];
  v56 = *(_QWORD *)v54;
  v55 = *((_QWORD *)v54 + 1);
  *(_QWORD *)v53 = v56;
  *((_QWORD *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  v57 = a3[14];
  v58 = &a1[v57];
  v59 = &a2[v57];
  v61 = *(_QWORD *)v59;
  v60 = *((_QWORD *)v59 + 1);
  *(_QWORD *)v58 = v61;
  *((_QWORD *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  v62 = a3[15];
  v63 = &a1[v62];
  v64 = &a2[v62];
  v66 = *(_QWORD *)v64;
  v65 = *((_QWORD *)v64 + 1);
  *(_QWORD *)v63 = v66;
  *((_QWORD *)v63 + 1) = v65;
  swift_bridgeObjectRelease();
  v67 = a3[16];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v70 = type metadata accessor for URL();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v73 = v72(v68, 1, v70);
  v74 = v72(v69, 1, v70);
  if (!v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v68, v69, v70);
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v70);
    goto LABEL_30;
  }
  if (v74)
  {
LABEL_30:
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
    memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v68, v69, v70);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
LABEL_31:
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  swift_bridgeObjectRelease();
  v76 = a3[18];
  v77 = &a1[v76];
  v78 = &a2[v76];
  v80 = *(_QWORD *)v78;
  v79 = *((_QWORD *)v78 + 1);
  *(_QWORD *)v77 = v80;
  *((_QWORD *)v77 + 1) = v79;
  swift_bridgeObjectRelease();
  v81 = a3[19];
  v82 = a3[20];
  v83 = &a1[v81];
  v84 = &a2[v81];
  *(_QWORD *)v83 = *(_QWORD *)v84;
  v83[8] = v84[8];
  v85 = &a1[v82];
  v86 = &a2[v82];
  *(_QWORD *)v85 = *(_QWORD *)v86;
  v85[8] = v86[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for FoundInEventDataDetectorsOutput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283CA0F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[16];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[18] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for FoundInEventDataDetectorsOutput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283CA1E0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[16];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[18] + 8) = (a2 - 1);
  return result;
}

void type metadata completion function for FoundInEventDataDetectorsOutput()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for DateComponents?, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, &lazy cache variable for type metadata for TimeZone?, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_CalendarEvent?(319, (unint64_t *)&lazy cache variable for type metadata for URL?, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t DUWikipediaTopicDetectionSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUWikipediaTopicDetectionSpecification.phaseID.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t DUWikipediaTopicDetectionSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUWikipediaTopicDetectionSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUWikipediaTopicDetectionSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUWikipediaTopicDetectionSpecification()
{
  return 0xD00000000000001FLL;
}

uint64_t DUWikipediaTopicDetectionSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 80) = a1;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v4;
  *v4 = v2;
  v4[1] = DUWikipediaTopicDetectionSpecification.attachResultsToResponse(response:processingRequest:);
  return v6(a2);
}

uint64_t DUWikipediaTopicDetectionSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUWikipediaTopicDetectionSpecification.attachResultsToResponse(response:processingRequest:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  void (*v16)(uint64_t, _QWORD);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void (*v30)(uint64_t, _QWORD);
  Swift::String v31;
  uint64_t v33;
  unint64_t v34;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 80);
    v33 = 0xD00000000000001FLL;
    v34 = 0x80000002284DF910;
    v3 = specialized Sequence.compactMap<A>(_:)(v1, &v33);
    v4 = swift_bridgeObjectRelease();
    v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v6 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x98);
    v7 = (id)((uint64_t (*)(uint64_t))v6)(v4);
    if (!v7)
      v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUTopicDetectionResponse()), sel_init);
    v8 = (*(uint64_t (**)(id))((*v5 & **(_QWORD **)(v0 + 80)) + 0xA0))(v7);
    v9 = ((uint64_t (*)(uint64_t))v6)(v8);
    if (v9)
    {
      v10 = (_QWORD *)v9;
      v11 = (_QWORD *)v6();
      if (!v11 || (v12 = v11, v13 = (*(uint64_t (**)(void))((*v5 & *v11) + 0x68))(), v12, !v13))
      {
        swift_bridgeObjectRelease();
        v13 = MEMORY[0x24BEE4AF8];
      }
      (*(void (**)(uint64_t))((*v5 & *v10) + 0x70))(v13);

    }
    v14 = (_QWORD *)v6();
    if (v14)
    {
      v15 = v14;
      v16 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))((*v5 & *v14) + 0x78))(v0 + 16);
      if (*v17)
        specialized Array.append<A>(contentsOf:)(v3);
      else
        swift_bridgeObjectRelease();
      v16(v0 + 16, 0);

    }
    else
    {
      v18 = swift_bridgeObjectRelease();
    }
    v19 = ((uint64_t (*)(uint64_t))v6)(v18);
    if (v19)
    {
      v20 = (_QWORD *)v19;
      v21 = (_QWORD *)v6();
      if (!v21 || (v22 = v21, v23 = (id)(*(uint64_t (**)(void))((*v5 & *v21) + 0x98))(), v22, !v23))
        v23 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
      (*(void (**)(id))((*v5 & *v20) + 0xA0))(v23);

    }
    v24 = (_QWORD *)v6();
    if (v24)
    {
      v25 = v24;
      v26 = (_QWORD *)(*(uint64_t (**)(void))((*v5 & *v24) + 0x98))();

      v27 = (void *)v34;
      if (v26)
      {
        v28 = v33;
        v29 = *(uint64_t (**)(uint64_t))((*v5 & *v26) + 0x68);
        swift_bridgeObjectRetain();
        v30 = (void (*)(uint64_t, _QWORD))v29(v0 + 48);
        v31._countAndFlagsBits = v28;
        v31._object = v27;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        v30(v0 + 48, 0);

      }
    }
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in DUWikipediaTopicDetectionSpecification.attachResultsToResponse(response:processingRequest:)(double *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  _QWORD *v14;
  _QWORD *v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t inited;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v30 = *((_QWORD *)a1 + 4);
  v31 = *((_QWORD *)a1 + 5);
  v8 = a1[6];
  v32 = *((unsigned __int8 *)a1 + 56);
  v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUTopicResult()), sel_init);
  v10 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUGlobalTopicSetIdentifier()), sel_init);
  v11 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v12 = (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & *v9) + 0x78))(v10);
  v13 = *(uint64_t (**)(void))((*v11 & *v9) + 0x70);
  v14 = (_QWORD *)((uint64_t (*)(uint64_t))v13)(v12);
  (*(void (**)(_QWORD))((*v11 & *v14) + 0x68))(0);

  v15 = (_QWORD *)v13();
  (*(void (**)(_QWORD))((*v11 & *v15) + 0x80))(0);

  if (v7)
  {
    v16 = *(void (**)(uint64_t, uint64_t))((*v11 & *v9) + 0x90);
    swift_bridgeObjectRetain();
    v16(v6, v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2284C1EE0;
    *(double *)(inited + 32) = v4;
    *(_QWORD *)(inited + 40) = v5;
    if (v5)
    {
      swift_bridgeObjectRetain_n();
      v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v20 = v18[2];
      v19 = v18[3];
      if (v20 >= v19 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
      v18[2] = v20 + 1;
      v21 = (double *)&v18[2 * v20];
      v21[4] = v4;
      *((_QWORD *)v21 + 5) = v5;
    }
    else
    {
      v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_release();
    v22 = (*(uint64_t (**)(_QWORD *))((*v11 & *v9) + 0xC0))(v18);
    if (v31)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_2284C0D00;
      v25 = *a2;
      v26 = a2[1];
      v27 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
      v28 = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v24 + 32) = v25;
      *(_QWORD *)(v24 + 40) = v26;
      *(_QWORD *)(v24 + 96) = v27;
      *(_QWORD *)(v24 + 104) = v28;
      *(_QWORD *)(v24 + 64) = v28;
      *(_QWORD *)(v24 + 72) = v30;
      *(_QWORD *)(v24 + 80) = v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *a2 = String.init(format:_:)();
      a2[1] = v29;
      v22 = swift_bridgeObjectRelease();
    }
    v23.n128_u64[0] = 1.0;
    if (!v32)
      v23.n128_f64[0] = v8;
    (*(void (**)(uint64_t, __n128))((*v11 & *v9) + 0xA8))(v22, v23);
  }
  else
  {

    v9 = 0;
  }
  *a3 = v9;
}

id DUWikipediaTopicDetectionSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DUWikipediaTopicDetectionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  v5[10] = a1;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v6 = (_QWORD *)swift_task_alloc();
  v5[11] = v6;
  *v6 = v5;
  v6[1] = DUWikipediaTopicDetectionSpecification.attachResultsToResponse(response:processingRequest:);
  return v8(a2);
}

id protocol witness for TopLevelSpecificationProtocol.associatedRequestTypes.getter in conformance DUWikipediaTopicDetectionSpecification()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 2;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUWikipediaTopicDetectionSpecification()
{
  return objc_opt_self();
}

char *DUDocumentIdentifier.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  void (*v17)(char *, uint64_t, uint64_t, int *);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(uint64_t, unint64_t, uint64_t, unint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v13 = *((_QWORD *)v12 - 1);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, int *))(v13 + 56);
  if ((v16 & 1) != 0)
  {
    v43 = a1;
    v17(v8, 0, 1, v12);
    outlined init with take of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier((uint64_t)v8, (uint64_t)v15);
    v18 = &v15[v12[5]];
    v19 = *((_QWORD *)v18 + 1);
    if (v19)
    {
      v42 = *(_QWORD *)v18;
      v20 = v19;
    }
    else
    {
      v42 = 0;
      v20 = 0xE000000000000000;
    }
    v22 = &v15[v12[6]];
    if (*((_QWORD *)v22 + 1))
    {
      v23 = *(_QWORD *)v22;
      v24 = *((_QWORD *)v22 + 1);
    }
    else
    {
      v23 = 0;
      v24 = 0xE000000000000000;
    }
    v25 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))(v2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = (char *)v25(v42, v20, v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v43, a2);
    v26 = &v15[v12[7]];
    v27 = *((_QWORD *)v26 + 1);
    if (v27)
    {
      v28 = *(_QWORD *)v26;
      v29 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
      swift_beginAccess();
      *(_QWORD *)v29 = v28;
      *((_QWORD *)v29 + 1) = v27;
      v30 = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      v31 = v21;
    }
    v32 = &v15[v12[8]];
    v33 = *((_QWORD *)v32 + 1);
    if (v33)
    {
      v34 = *(_QWORD *)v32;
      v35 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
      swift_beginAccess();
      *(_QWORD *)v35 = v34;
      *((_QWORD *)v35 + 1) = v33;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    v36 = &v15[v12[9]];
    v37 = *((_QWORD *)v36 + 1);
    if (v37)
    {
      v38 = *(_QWORD *)v36;
      swift_bridgeObjectRetain();
      outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier((uint64_t)v15);
      v39 = &v21[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
      swift_beginAccess();
      *(_QWORD *)v39 = v38;
      *((_QWORD *)v39 + 1) = v37;

      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier((uint64_t)v15);

    }
  }
  else
  {
    v17(v8, 1, 1, v12);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
    outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?((uint64_t)v8);
    return 0;
  }
  return v21;
}

id DUDocumentIdentifier.__allocating_init(documentNamespace:documentID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  objc_super v16;

  v9 = (char *)objc_allocWithZone(v4);
  v10 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  v14 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
  *(_QWORD *)v14 = a3;
  *((_QWORD *)v14 + 1) = a4;
  v16.receiver = v9;
  v16.super_class = v4;
  return objc_msgSendSuper2(&v16, sel_init);
}

uint64_t DUDocumentIdentifier.documentNamespace.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace);
}

uint64_t DUDocumentIdentifier.documentNamespace.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace);
}

uint64_t (*DUDocumentIdentifier.documentNamespace.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentIdentifier.documentID.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID);
}

uint64_t DUDocumentIdentifier.documentID.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID);
}

uint64_t (*DUDocumentIdentifier.documentID.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentIdentifier.spotlightBundleID.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID);
}

uint64_t DUDocumentIdentifier.spotlightBundleID.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID);
}

uint64_t (*DUDocumentIdentifier.spotlightBundleID.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentIdentifier.spotlightDomainIdentifier.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier);
}

uint64_t DUDocumentIdentifier.spotlightDomainIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier);
}

uint64_t (*DUDocumentIdentifier.spotlightDomainIdentifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUDocumentIdentifier.spotlightUniqueIdentifier.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier);
}

uint64_t DUDocumentIdentifier.spotlightUniqueIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier);
}

uint64_t (*DUDocumentIdentifier.spotlightUniqueIdentifier.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *DUDocumentIdentifier.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static DUDocumentIdentifier.supportsSecureCoding;
}

uint64_t static DUDocumentIdentifier.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static DUDocumentIdentifier.supportsSecureCoding;
}

uint64_t static DUDocumentIdentifier.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static DUDocumentIdentifier.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static DUDocumentIdentifier.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUDocumentIdentifier.init(documentNamespace:documentID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  objc_super v11;

  v5 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v8 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  v9 = &v4[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
  *(_QWORD *)v9 = a3;
  *((_QWORD *)v9 + 1) = a4;
  v11.receiver = v4;
  v11.super_class = (Class)type metadata accessor for DUDocumentIdentifier();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DUDocumentIdentifier()
{
  return objc_opt_self();
}

uint64_t DUDocumentIdentifier.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  UnknownStorage.init()();
  v3 = (int *)type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v4 = (_QWORD *)(a1 + v3[5]);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(a1 + v3[6]);
  *v5 = 0;
  v5[1] = 0;
  v6 = (uint64_t *)(a1 + v3[7]);
  *v6 = 0;
  v6[1] = 0;
  v7 = (uint64_t *)(a1 + v3[8]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (uint64_t *)(a1 + v3[9]);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x78))();
  v4[1] = v10;
  *v5 = (*(uint64_t (**)(void))((*v9 & *v1) + 0x90))();
  v5[1] = v11;
  v12 = (*(uint64_t (**)(void))((*v9 & *v1) + 0xA8))();
  if (v13)
  {
    *v6 = v12;
    v6[1] = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))((*v9 & *v1) + 0xC0))(v12);
  if (v15)
  {
    *v7 = v14;
    v7[1] = v15;
  }
  result = (*(uint64_t (**)(uint64_t))((*v9 & *v1) + 0xD8))(v14);
  if (v17)
  {
    *v8 = result;
    v8[1] = v17;
  }
  return result;
}

uint64_t DUDocumentIdentifier.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x100))(v4);
  v7 = specialized DUDocumentIdentifier.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocumentIdentifier?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

Swift::Void __swiftcall DUDocumentIdentifier.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUDocumentIdentifier();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentIdentifier and conformance DUDocumentIdentifier, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentIdentifier, (uint64_t)&protocol conformance descriptor for DUDocumentIdentifier);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUDocumentIdentifier.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDocumentIdentifier.init(coder:)(a1);
}

uint64_t DUDocumentIdentifier.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentIdentifier and conformance DUDocumentIdentifier, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentIdentifier, (uint64_t)&protocol conformance descriptor for DUDocumentIdentifier);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUDocumentIdentifier.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DUDocumentIdentifier.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DUDocumentIdentifier.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentIdentifier();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocumentIdentifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocumentIdentifier()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x100))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocumentIdentifier@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 248);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_2283CBCF8()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier and conformance DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentUnderstandingServiceClient_DocumentIdentifier);
}

id DUDocumentUIElement.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DUDocumentUIElement.text.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_text);
}

uint64_t DUDocumentUIElement.text.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_text);
}

uint64_t (*DUDocumentUIElement.text.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUIElement.version.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_version);
}

uint64_t DUDocumentUIElement.version.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_version);
}

uint64_t (*DUDocumentUIElement.version.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUIElement.classDescriptor.getter()
{
  return PoemMessage.path.getter(&OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_classDescriptor);
}

uint64_t DUDocumentUIElement.classDescriptor.setter(uint64_t a1, uint64_t a2)
{
  return PoemMessage.path.setter(a1, a2, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_classDescriptor);
}

uint64_t (*DUDocumentUIElement.classDescriptor.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

float DUDocumentUIElement.fontSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_fontSize;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t DUDocumentUIElement.fontSize.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_fontSize);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUDocumentUIElement.fontSize.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUIElement.superviewClassNames.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentUIElement.superviewClassNames.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassNames);
}

uint64_t (*DUDocumentUIElement.superviewClassNames.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

double DUDocumentUIElement.frameInWindow.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_frameInWindow;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUDocumentUIElement.frameInWindow.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;
  uint64_t result;

  v9 = (double *)(v4 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_frameInWindow);
  result = swift_beginAccess();
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return result;
}

uint64_t (*DUDocumentUIElement.frameInWindow.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

double DUDocumentUIElement.absoluteOriginOnScreen.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t DUDocumentUIElement.absoluteOriginOnScreen.setter(double a1, double a2)
{
  uint64_t v2;
  double *v5;
  uint64_t result;

  v5 = (double *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen);
  result = swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DUDocumentUIElement.absoluteOriginOnScreen.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUIElement.isOnScreen.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isOnScreen);
  swift_beginAccess();
  return *v1;
}

uint64_t DUDocumentUIElement.isOnScreen.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isOnScreen);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUDocumentUIElement.isOnScreen.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUDocumentUIElement.isValidForContentExtraction.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isValidForContentExtraction);
  swift_beginAccess();
  return *v1;
}

uint64_t DUDocumentUIElement.isValidForContentExtraction.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isValidForContentExtraction);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUDocumentUIElement.isValidForContentExtraction.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUIElement.superviewClassIndices.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentUIElement.superviewClassIndices.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassIndices);
}

uint64_t (*DUDocumentUIElement.superviewClassIndices.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUDocumentUIElement.range.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t DUDocumentUIElement.range.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_range);
}

uint64_t (*DUDocumentUIElement.range.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

Class @objc DUDocumentUIElement.superviewClassNames.getter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  Class isa;

  v3 = (_QWORD *)(a1 + *a3);
  swift_beginAccess();
  if (!*v3)
    return (Class)0;
  swift_bridgeObjectRetain();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t DUDocumentUIElement.styleProperties.getter()
{
  return PoemMessage.sender.getter();
}

uint64_t @objc DUDocumentUIElement.superviewClassNames.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t *v8;

  if (a3)
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  else
    v7 = 0;
  v8 = (uint64_t *)(a1 + *a5);
  swift_beginAccess();
  *v8 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t DUDocumentUIElement.styleProperties.setter(uint64_t a1)
{
  return PoemMessage.sender.setter(a1, &OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_styleProperties);
}

uint64_t (*DUDocumentUIElement.styleProperties.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

char *DUDocumentUIElement.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static DUDocumentUIElement.supportsSecureCoding;
}

uint64_t static DUDocumentUIElement.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static DUDocumentUIElement.supportsSecureCoding;
}

uint64_t static DUDocumentUIElement.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static DUDocumentUIElement.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static DUDocumentUIElement.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUDocumentUIElement.init()()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _OWORD *v4;
  _QWORD *v5;
  objc_class *v6;
  objc_super v8;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_text];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_version];
  *v2 = 0;
  v2[1] = 0;
  v3 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_classDescriptor];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassNames] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassIndices] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_range] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_styleProperties] = 0;
  v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isOnScreen] = 0;
  v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isValidForContentExtraction] = 1;
  *(_DWORD *)&v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_fontSize] = -1082130432;
  v4 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_frameInWindow];
  *v4 = 0u;
  v4[1] = 0u;
  v5 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen];
  v6 = (objc_class *)type metadata accessor for DUDocumentUIElement();
  *v5 = 0;
  v5[1] = 0;
  v8.receiver = v0;
  v8.super_class = v6;
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for DUDocumentUIElement()
{
  return objc_opt_self();
}

Swift::Void __swiftcall DUDocumentUIElement.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUDocumentUIElement();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentUIElement and conformance DUDocumentUIElement, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentUIElement, (uint64_t)&protocol conformance descriptor for DUDocumentUIElement);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUDocumentUIElement.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDocumentUIElement.init(coder:)(a1);
}

uint64_t DUDocumentUIElement.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDocumentUIElement and conformance DUDocumentUIElement, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUDocumentUIElement, (uint64_t)&protocol conformance descriptor for DUDocumentUIElement);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t DUDocumentUIElement.copy(with:)@<X0>(char **a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x1F0))(v4);
  v7 = specialized DUDocumentUIElement.__allocating_init<A>(proto:)((uint64_t)v6);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDocumentUIElement?);
  a1[3] = (char *)result;
  *a1 = v7;
  return result;
}

char *specialized DUDocumentUIElement.__allocating_init<A>(proto:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  float v19;
  float *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSString *v29;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSString *v41;
  CGPoint v42;
  CGFloat v43;
  CGFloat v44;
  uint64_t v45;
  CGFloat *v46;
  uint64_t v47;
  char v48;
  char *v49;
  char v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v59;
  CGRect v60;

  v2 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentUIElement()), sel_init);
  v59 = a1;
  outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(a1, (uint64_t)v5);
  v7 = *(int *)(v3 + 20);
  v8 = *(_QWORD *)&v5[v7];
  swift_beginAccess();
  v10 = *(_QWORD *)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  v11 = &v6[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_text];
  swift_beginAccess();
  *(_QWORD *)v11 = v10;
  *((_QWORD *)v11 + 1) = v9;
  v12 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = *(_QWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 40);
  v15 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_version];
  swift_beginAccess();
  *(_QWORD *)v15 = v14;
  *((_QWORD *)v15 + 1) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v17 = *(_QWORD *)(v8 + 48);
  v16 = *(_QWORD *)(v8 + 56);
  v18 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_classDescriptor];
  swift_beginAccess();
  *(_QWORD *)v18 = v17;
  *((_QWORD *)v18 + 1) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *(double *)(v8 + 64);
  v20 = (float *)&v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_fontSize];
  swift_beginAccess();
  *v20 = v19;
  swift_beginAccess();
  v21 = *(_QWORD *)(v8 + 72);
  v22 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassNames];
  swift_beginAccess();
  *(_QWORD *)v22 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v23 = *(_QWORD *)(v8 + 80);
  v24 = *(_QWORD *)(v8 + 88);
  outlined copy of Data._Representation(v23, v24);
  static String.Encoding.utf8.getter();
  v25 = String.init(data:encoding:)();
  v27 = v26;
  outlined consume of Data._Representation(v23, v24);
  if (v27)
  {
    v28 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v28 = v25 & 0xFFFFFFFFFFFFLL;
    if (v28)
    {
      v29 = (NSString *)MEMORY[0x22E2AF8EC](v25, v27);
      swift_bridgeObjectRelease();
      v60 = CGRectFromString(v29);
      x = v60.origin.x;
      y = v60.origin.y;
      width = v60.size.width;
      height = v60.size.height;

      v34 = (CGFloat *)&v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_frameInWindow];
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  x = *(double *)(v8 + 120);
  swift_beginAccess();
  y = *(double *)(v8 + 128);
  swift_beginAccess();
  width = *(double *)(v8 + 136);
  swift_beginAccess();
  height = *(double *)(v8 + 144);
  v34 = (CGFloat *)&v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_frameInWindow];
LABEL_8:
  swift_beginAccess();
  *v34 = x;
  v34[1] = y;
  v34[2] = width;
  v34[3] = height;
  swift_beginAccess();
  v35 = *(_QWORD *)(v8 + 96);
  v36 = *(_QWORD *)(v8 + 104);
  outlined copy of Data._Representation(v35, v36);
  static String.Encoding.utf8.getter();
  v37 = String.init(data:encoding:)();
  v39 = v38;
  outlined consume of Data._Representation(v35, v36);
  if (!v39)
  {
LABEL_14:
    swift_beginAccess();
    v43 = *(double *)(v8 + 152);
    swift_beginAccess();
    v44 = *(double *)(v8 + 160);
    outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(v59);
    v45 = OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen;
    v46 = (CGFloat *)&v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen];
    goto LABEL_15;
  }
  v40 = HIBYTE(v39) & 0xF;
  if ((v39 & 0x2000000000000000) == 0)
    v40 = v37 & 0xFFFFFFFFFFFFLL;
  if (!v40)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v41 = (NSString *)MEMORY[0x22E2AF8EC](v37, v39);
  swift_bridgeObjectRelease();
  v42 = CGPointFromString(v41);
  v43 = v42.x;
  v44 = v42.y;

  outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(v59);
  v45 = OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen;
  v46 = (CGFloat *)&v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen];
LABEL_15:
  swift_beginAccess();
  *v46 = v43;
  *(CGFloat *)&v12[v45 + 8] = v44;
  v47 = *(_QWORD *)&v5[v7];
  swift_beginAccess();
  v48 = *(_BYTE *)(v47 + 112);
  v49 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isOnScreen];
  swift_beginAccess();
  *v49 = v48;
  swift_beginAccess();
  v50 = *(_BYTE *)(v47 + 113);
  v51 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isValidForContentExtraction];
  swift_beginAccess();
  *v51 = v50;
  swift_beginAccess();
  v52 = *(_QWORD *)(v47 + 168);
  v53 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassIndices];
  swift_beginAccess();
  *(_QWORD *)v53 = v52;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v54 = *(_QWORD *)(v47 + 176);
  v55 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_range];
  swift_beginAccess();
  *(_QWORD *)v55 = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v56 = *(_QWORD *)(v47 + 184);
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement((uint64_t)v5);
  v57 = &v12[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_styleProperties];
  swift_beginAccess();
  *(_QWORD *)v57 = v56;

  swift_bridgeObjectRelease();
  return v12;
}

char *DUDocumentUIElement.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  char *v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  float v33;
  float *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSString *v43;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSString *v59;
  CGPoint v60;
  CGFloat v61;
  CGFloat v62;
  uint64_t v63;
  CGFloat *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  char v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  CGRect v85;

  v5 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v5);
  v84 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a2);
  v19 = (char *)v18;
  v20 = swift_dynamicCast();
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if ((v20 & 1) != 0)
  {
    v81 = a2;
    v82 = a1;
    v83 = v11;
    v21(v10, 0, 1, v14);
    outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement((uint64_t)v10, (uint64_t)v17);
    v22 = *(int *)(v14 + 20);
    v80 = v17;
    v23 = *(_QWORD *)&v17[v22];
    swift_beginAccess();
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    v26 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_text];
    swift_beginAccess();
    *(_QWORD *)v26 = v25;
    *((_QWORD *)v26 + 1) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v28 = *(_QWORD *)(v23 + 32);
    v27 = *(_QWORD *)(v23 + 40);
    v29 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_version];
    swift_beginAccess();
    *(_QWORD *)v29 = v28;
    *((_QWORD *)v29 + 1) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v31 = *(_QWORD *)(v23 + 48);
    v30 = *(_QWORD *)(v23 + 56);
    v32 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_classDescriptor];
    swift_beginAccess();
    *(_QWORD *)v32 = v31;
    *((_QWORD *)v32 + 1) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v33 = *(double *)(v23 + 64);
    v34 = (float *)&v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_fontSize];
    swift_beginAccess();
    *v34 = v33;
    swift_beginAccess();
    v35 = *(_QWORD *)(v23 + 72);
    v36 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassNames];
    swift_beginAccess();
    *(_QWORD *)v36 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v37 = *(_QWORD *)(v23 + 80);
    v38 = *(_QWORD *)(v23 + 88);
    outlined copy of Data._Representation(v37, v38);
    static String.Encoding.utf8.getter();
    v39 = String.init(data:encoding:)();
    v41 = v40;
    outlined consume of Data._Representation(v37, v38);
    v79 = v22;
    if (v41)
    {
      v42 = HIBYTE(v41) & 0xF;
      if ((v41 & 0x2000000000000000) == 0)
        v42 = v39 & 0xFFFFFFFFFFFFLL;
      if (v42)
      {
        v43 = (NSString *)MEMORY[0x22E2AF8EC](v39, v41);
        swift_bridgeObjectRelease();
        v85 = CGRectFromString(v43);
        x = v85.origin.x;
        y = v85.origin.y;
        width = v85.size.width;
        height = v85.size.height;

        v48 = (CGFloat *)&v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_frameInWindow];
        goto LABEL_10;
      }
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    x = *(double *)(v23 + 120);
    swift_beginAccess();
    y = *(double *)(v23 + 128);
    swift_beginAccess();
    width = *(double *)(v23 + 136);
    swift_beginAccess();
    height = *(double *)(v23 + 144);
    v48 = (CGFloat *)&v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_frameInWindow];
LABEL_10:
    swift_beginAccess();
    *v48 = x;
    v48[1] = y;
    v49 = (uint64_t)v80;
    v48[2] = width;
    v48[3] = height;
    swift_beginAccess();
    v50 = *(_QWORD *)(v23 + 96);
    v51 = *(_QWORD *)(v23 + 104);
    outlined copy of Data._Representation(v50, v51);
    static String.Encoding.utf8.getter();
    v52 = String.init(data:encoding:)();
    v54 = v53;
    outlined consume of Data._Representation(v50, v51);
    v55 = v82;
    v56 = v83;
    v57 = v81;
    if (v54)
    {
      v58 = HIBYTE(v54) & 0xF;
      if ((v54 & 0x2000000000000000) == 0)
        v58 = v52 & 0xFFFFFFFFFFFFLL;
      if (v58)
      {
        v59 = (NSString *)MEMORY[0x22E2AF8EC](v52, v54);
        swift_bridgeObjectRelease();
        v60 = CGPointFromString(v59);
        v61 = v60.x;
        v62 = v60.y;

        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
        v63 = OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen;
        v64 = (CGFloat *)&v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen];
LABEL_17:
        swift_beginAccess();
        *v64 = v61;
        v65 = v79;
        *(CGFloat *)&v19[v63 + 8] = v62;
        v66 = *(_QWORD *)(v49 + v65);
        swift_beginAccess();
        v67 = *(_BYTE *)(v66 + 112);
        v68 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isOnScreen];
        swift_beginAccess();
        *v68 = v67;
        swift_beginAccess();
        v69 = *(_BYTE *)(v66 + 113);
        v70 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_isValidForContentExtraction];
        swift_beginAccess();
        *v70 = v69;
        swift_beginAccess();
        v71 = *(_QWORD *)(v66 + 168);
        v72 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_superviewClassIndices];
        swift_beginAccess();
        *(_QWORD *)v72 = v71;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v73 = *(_QWORD *)(v66 + 176);
        v74 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_range];
        swift_beginAccess();
        *(_QWORD *)v74 = v73;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v75 = *(_QWORD *)(v66 + 184);
        swift_bridgeObjectRetain();
        outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(v49);
        v76 = &v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_styleProperties];
        swift_beginAccess();
        *(_QWORD *)v76 = v75;

        swift_bridgeObjectRelease();
        return v19;
      }
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    v61 = *(double *)(v23 + 152);
    swift_beginAccess();
    v62 = *(double *)(v23 + 160);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    v63 = OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen;
    v64 = (CGFloat *)&v19[OBJC_IVAR____TtC21DocumentUnderstanding19DUDocumentUIElement_absoluteOriginOnScreen];
    goto LABEL_17;
  }
  v21(v10, 1, 1, v14);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a2);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v10, &demangling cache variable for type metadata for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement?);
  return 0;
}

uint64_t outlined init with take of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DUDocumentUIElement.isEqual(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  float v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  double v38;
  double v39;
  double v40;
  double v41;
  int v42;
  char v43;
  char v45;
  char v46;
  _QWORD *v47;
  _BYTE v48[24];
  uint64_t v49;
  CGRect v50;
  CGRect v51;

  outlined init with copy of Any?(a1, (uint64_t)v48);
  if (v49)
  {
    type metadata accessor for DUDocumentUIElement();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xB0))();
      v5 = v4;
      v6 = (*(uint64_t (**)(void))((*v2 & *v47) + 0xB0))();
      if (v5)
      {
        if (!v7)
          goto LABEL_44;
        if (v3 == v6 && v5 == v7)
        {
          swift_bridgeObjectRelease();
          v6 = swift_bridgeObjectRelease();
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v6 = swift_bridgeObjectRelease();
          if ((v9 & 1) == 0)
            goto LABEL_49;
        }
      }
      else if (v7)
      {
        goto LABEL_44;
      }
      v10 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0xC8))(v6);
      v12 = v11;
      v13 = (*(uint64_t (**)(void))((*v2 & *v47) + 0xC8))();
      if (v12)
      {
        if (!v14)
          goto LABEL_44;
        if (v10 == v13 && v12 == v14)
        {
          swift_bridgeObjectRelease();
          v13 = swift_bridgeObjectRelease();
        }
        else
        {
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v13 = swift_bridgeObjectRelease();
          if ((v16 & 1) == 0)
            goto LABEL_49;
        }
      }
      else if (v14)
      {
        goto LABEL_44;
      }
      v17 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0xE0))(v13);
      v19 = v18;
      v20 = (*(uint64_t (**)(void))((*v2 & *v47) + 0xE0))();
      if (v19)
      {
        if (v21)
        {
          if (v17 == v20 && v19 == v21)
          {
            swift_bridgeObjectRelease();
            v20 = swift_bridgeObjectRelease();
          }
          else
          {
            v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v20 = swift_bridgeObjectRelease();
            if ((v23 & 1) == 0)
              goto LABEL_49;
          }
LABEL_37:
          v24 = (*(float (**)(uint64_t))((*v2 & *v1) + 0xF8))(v20);
          if (v24 != (*(float (**)(void))((*v2 & *v47) + 0xF8))())
          {
LABEL_49:

            goto LABEL_50;
          }
          v25 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v1) + 0x110))();
          v26 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v47) + 0x110))();
          if (v25)
          {
            if (v26)
            {
              v27 = specialized static Array<A>.== infix(_:_:)(v25, v26);
              swift_bridgeObjectRelease();
              v26 = (_QWORD *)swift_bridgeObjectRelease();
              if ((v27 & 1) == 0)
                goto LABEL_49;
LABEL_45:
              v28 = (*(double (**)(_QWORD *))((*v2 & *v1) + 0x128))(v26);
              v30 = v29;
              v32 = v31;
              v34 = v33;
              v51.origin.x = (*(double (**)(void))((*v2 & *v47) + 0x128))();
              v51.origin.y = v35;
              v51.size.width = v36;
              v51.size.height = v37;
              v50.origin.x = v28;
              v50.origin.y = v30;
              v50.size.width = v32;
              v50.size.height = v34;
              if (CGRectEqualToRect(v50, v51))
              {
                v38 = (*(double (**)(void))((*v2 & *v1) + 0x140))();
                v40 = v39;
                if (v38 == (*(double (**)(void))((*v2 & *v47) + 0x140))() && v40 == v41)
                {
                  v42 = (*(uint64_t (**)(void))((*v2 & *v1) + 0x158))();
                  if (((v42 ^ (*(unsigned int (**)(void))((*v2 & *v47) + 0x158))()) & 1) == 0)
                  {
                    v45 = (*(uint64_t (**)(void))((*v2 & *v1) + 0x170))();
                    v46 = (*(uint64_t (**)(void))((*v2 & *v47) + 0x170))();

                    v43 = v45 ^ v46 ^ 1;
                    return v43 & 1;
                  }
                }
              }
              goto LABEL_49;
            }
          }
          else if (!v26)
          {
            goto LABEL_45;
          }
        }
      }
      else if (!v21)
      {
        goto LABEL_37;
      }
LABEL_44:

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v48, &demangling cache variable for type metadata for Any?);
  }
LABEL_50:
  v43 = 0;
  return v43 & 1;
}

uint64_t DUDocumentUIElement.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSString *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  NSString *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char isUniquelyReferenced_nonNull_native;
  double (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  char v67;
  double (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t result;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double (*v109)(uint64_t);
  uint64_t v110;
  CGPoint v111;
  CGRect v112;

  v2 = v1;
  v110 = type metadata accessor for String.Encoding();
  v108 = *(_QWORD *)(v110 - 8);
  MEMORY[0x24BDAC7A8](v110);
  v5 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v6 = *(int *)(type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement() + 20);
  if (one-time initialization token for defaultInstance != -1)
    swift_once();
  *(_QWORD *)(a1 + v6) = static DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.defaultInstance;
  v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v8 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0xB0);
  v9 = swift_retain();
  v10 = v8(v9);
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v14 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v14);
      swift_release();
    }
    v15 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v13;
    v10 = swift_bridgeObjectRelease();
  }
  v16 = (*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0xC8))(v10);
  if (v17)
  {
    v18 = v16;
    v19 = v17;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v20 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v20);
      swift_release();
    }
    v21 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    *(_QWORD *)(v21 + 32) = v18;
    *(_QWORD *)(v21 + 40) = v19;
    v16 = swift_bridgeObjectRelease();
  }
  v22 = (*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0xE0))(v16);
  if (v23)
  {
    v24 = v22;
    v25 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v26 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v26);
      swift_release();
    }
    v27 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    *(_QWORD *)(v27 + 48) = v24;
    *(_QWORD *)(v27 + 56) = v25;
    v22 = swift_bridgeObjectRelease();
  }
  v28 = (*(uint64_t (**)(uint64_t))((*v7 & *v2) + 0x110))(v22);
  if (v28)
  {
    v29 = v28;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v30 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v30);
      swift_release();
    }
    v31 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    *(_QWORD *)(v31 + 72) = v29;
    v28 = swift_bridgeObjectRelease();
  }
  v32 = (*(float (**)(uint64_t))((*v7 & *v2) + 0xF8))(v28);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v33 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v33);
    swift_release();
  }
  v34 = *(_QWORD *)(a1 + v6);
  v35 = swift_beginAccess();
  *(double *)(v34 + 64) = v32;
  v109 = *(double (**)(uint64_t))((*v7 & *v2) + 0x128);
  v112.origin.x = v109(v35);
  v36 = NSStringFromCGRect(v112);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static String.Encoding.utf8.getter();
  v37 = String.data(using:allowLossyConversion:)();
  v39 = v38;
  swift_bridgeObjectRelease();
  v40 = *(uint64_t (**)(char *, uint64_t))(v108 + 8);
  v41 = v40(v5, v110);
  if (v39 >> 60 != 15)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v42 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v42);
      swift_release();
    }
    v43 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    v44 = *(_QWORD *)(v43 + 80);
    v45 = *(_QWORD *)(v43 + 88);
    *(_QWORD *)(v43 + 80) = v37;
    *(_QWORD *)(v43 + 88) = v39;
    v41 = outlined consume of Data._Representation(v44, v45);
  }
  v108 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v2) + 0x140);
  v111.x = ((double (*)(uint64_t))v108)(v41);
  v46 = NSStringFromCGPoint(v111);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static String.Encoding.utf8.getter();
  v47 = String.data(using:allowLossyConversion:)();
  v49 = v48;
  swift_bridgeObjectRelease();
  v50 = v40(v5, v110);
  if (v49 >> 60 != 15)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v51 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v51);
      swift_release();
    }
    v52 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    v53 = *(_QWORD *)(v52 + 96);
    v54 = *(_QWORD *)(v52 + 104);
    *(_QWORD *)(v52 + 96) = v47;
    *(_QWORD *)(v52 + 104) = v49;
    v50 = outlined consume of Data._Representation(v53, v54);
  }
  v55 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v56 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x158))(v50);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v57 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v57);
    swift_release();
  }
  v58 = *(_QWORD *)(a1 + v6);
  v59 = swift_beginAccess();
  *(_BYTE *)(v58 + 112) = v56 & 1;
  v60 = (*(uint64_t (**)(uint64_t))((*v55 & *v2) + 0x170))(v59);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v62 = v109;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v63 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v63);
    swift_release();
  }
  v64 = *(_QWORD *)(a1 + v6);
  v65 = swift_beginAccess();
  *(_BYTE *)(v64 + 113) = v60 & 1;
  v66 = v62(v65);
  v67 = swift_isUniquelyReferenced_nonNull_native();
  v68 = (double (*)(uint64_t))v108;
  if ((v67 & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v69 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v69);
    swift_release();
  }
  v70 = *(_QWORD *)(a1 + v6);
  v71 = swift_beginAccess();
  *(double *)(v70 + 120) = v66;
  v62(v71);
  v73 = v72;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v74 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v74);
    swift_release();
  }
  v75 = *(_QWORD *)(a1 + v6);
  v76 = swift_beginAccess();
  *(_QWORD *)(v75 + 128) = v73;
  v62(v76);
  v78 = v77;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v79 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v79);
    swift_release();
  }
  v80 = *(_QWORD *)(a1 + v6);
  v81 = swift_beginAccess();
  *(_QWORD *)(v80 + 136) = v78;
  v62(v81);
  v83 = v82;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v84 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v84);
    swift_release();
  }
  v85 = *(_QWORD *)(a1 + v6);
  v86 = swift_beginAccess();
  *(_QWORD *)(v85 + 144) = v83;
  v87 = v68(v86);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v88 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v88);
    swift_release();
  }
  v89 = *(_QWORD *)(a1 + v6);
  v90 = swift_beginAccess();
  *(double *)(v89 + 152) = v87;
  v68(v90);
  v92 = v91;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
    swift_allocObject();
    v93 = swift_retain();
    *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v93);
    swift_release();
  }
  v94 = *(_QWORD *)(a1 + v6);
  v95 = swift_beginAccess();
  *(_QWORD *)(v94 + 160) = v92;
  v96 = (*(uint64_t (**)(uint64_t))((*v55 & *v2) + 0x188))(v95);
  if (v96)
  {
    v97 = v96;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v98 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v98);
      swift_release();
    }
    v99 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    *(_QWORD *)(v99 + 168) = v97;
    v96 = swift_bridgeObjectRelease();
  }
  v100 = (*(uint64_t (**)(uint64_t))((*v55 & *v2) + 0x1A0))(v96);
  if (v100)
  {
    v101 = v100;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v102 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v102);
      swift_release();
    }
    v103 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    *(_QWORD *)(v103 + 176) = v101;
    v100 = swift_bridgeObjectRelease();
  }
  result = (*(uint64_t (**)(uint64_t))((*v55 & *v2) + 0x1B8))(v100);
  if (result)
  {
    v105 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass();
      swift_allocObject();
      v106 = swift_retain();
      *(_QWORD *)(a1 + v6) = DocumentUnderstanding_DocumentRepresentation_DocumentUIElement._StorageClass.init(copying:)(v106);
      swift_release();
    }
    v107 = *(_QWORD *)(a1 + v6);
    swift_beginAccess();
    *(_QWORD *)(v107 + 184) = v105;
    return swift_bridgeObjectRelease();
  }
  return result;
}

id DUDocumentUIElement.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDocumentUIElement();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDocumentUIElement()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x1F0))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDocumentUIElement@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 488);
  v6 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDocumentUIElement()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2283CEF70()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult((unint64_t *)&lazy protocol witness table cache variable for type DocumentUnderstanding_DocumentRepresentation_DocumentUIElement and conformance DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement);
}

uint64_t outlined init with copy of DocumentUnderstanding_DocumentRepresentation_DocumentUIElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DocumentUnderstanding_DocumentRepresentation_DocumentUIElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.languageTags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.languageTags.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.languageTags.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.responseDebugInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, a1);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_LanguageTaggingResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v7 + 24), (uint64_t)v6);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v6, a2);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_LanguageTaggingResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(a1, (uint64_t)v7);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.responseDebugInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.responseDebugInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse() + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.modify;
}

BOOL DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.hasResponseDebugInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  return v6;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.clearResponseDebugInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.protoMessageName.getter()
{
  return 0xD00000000000003FLL;
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      closure #2 in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.decodeMessage<A>(decoder:)();
    }
    else if (result == 1)
    {
      dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
    }
  }
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.traverse<A>(visitor:)(v0);
    if (!v1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v8);
}

Swift::Int DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Message.init() in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return 0xD00000000000003FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_LanguageTaggingResponse.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD **v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD **v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v48 - 8);
  v4 = MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v45 - v6;
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v45 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v45 - v21;
  v23 = a1;
  v24 = *a1;
  v25 = a2;
  if ((specialized static Array<A>.== infix(_:_:)(v24, *a2) & 1) == 0)
    goto LABEL_8;
  v45 = v10;
  v46 = v17;
  v47 = v7;
  v26 = type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse();
  v27 = v23;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v23 + *(int *)(v26 + 24), (uint64_t)v22);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)a2 + *(int *)(v26 + 24), (uint64_t)v20);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v22, (uint64_t)v13);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v20, v28);
  v29 = v52;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v31 = v25;
  if (v30((uint64_t)v13, 1, v52) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v30(v28, 1, v29) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v32 = v47;
LABEL_11:
      v39 = (uint64_t)v27 + *(int *)(v26 + 20);
      v40 = v50;
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v42 = v48;
      v41(v32, v39, v48);
      v43 = v49;
      v41(v49, (uint64_t)v31 + *(int *)(v26 + 20), v42);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v43, v42);
      v44(v32, v42);
      return v35 & 1;
    }
    goto LABEL_7;
  }
  v33 = (uint64_t)v46;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v13, (uint64_t)v46);
  v34 = v30(v28, 1, v29);
  v32 = v47;
  if (v34 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
LABEL_7:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
    goto LABEL_8;
  }
  v37 = (uint64_t)v45;
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(v28, (uint64_t)v45);
  v38 = static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(v33, v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((v38 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_LanguageTaggingResponse and conformance DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse);
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = *(int *)(v16 + 20);
      v20 = &v14[v19];
      v21 = &v15[v19];
      v22 = *((_QWORD *)v21 + 1);
      *(_QWORD *)v20 = *(_QWORD *)v21;
      *((_QWORD *)v20 + 1) = v22;
      v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56);
      swift_bridgeObjectRetain();
      v23(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t destroy for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v6(v7, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
    swift_bridgeObjectRetain();
    v21(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  char *v26;
  char *v27;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v25 = *(int *)(v15 + 20);
      v26 = &v13[v25];
      v27 = &v14[v25];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v13);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v19 = *(int *)(v15 + 20);
  v20 = &v13[v19];
  v21 = &v14[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  swift_bridgeObjectRetain();
  v22(v13, 0, 1, v15);
  return a1;
}

_QWORD *initializeWithTake for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    *(_OWORD *)&v12[*(int *)(v14 + 20)] = *(_OWORD *)&v13[*(int *)(v14 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (!v18)
    {
      v11(v13, v14, v9);
      v21 = *(int *)(v15 + 20);
      v22 = &v13[v21];
      v23 = &v14[v21];
      v25 = *(_QWORD *)v23;
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v13);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283D09E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2283D0A90(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for DocumentUnderstanding_ClientInterface_LanguageTaggingResponse()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

id DUDebugInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

char *DUDebugInfo.__allocating_init<A>(proto:)()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v17;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)objc_msgSend(objc_allocWithZone(v1), sel_init);
  v10 = swift_dynamicCast();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if ((v10 & 1) != 0)
  {
    v11(v4, 0, 1, v5);
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v4, (uint64_t)v8);
    v12 = &v8[*(int *)(v5 + 20)];
    if (*((_QWORD *)v12 + 1))
    {
      v13 = *(_QWORD *)v12;
      v14 = *((_QWORD *)v12 + 1);
    }
    else
    {
      v13 = 0;
      v14 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v8);
    v15 = &v9[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
    swift_beginAccess();
    *(_QWORD *)v15 = v13;
    *((_QWORD *)v15 + 1) = v14;

    swift_bridgeObjectRelease();
  }
  else
  {
    v11(v4, 1, 1, v5);

    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v4);
    return 0;
  }
  return v9;
}

uint64_t outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DUDebugInfo.debugString.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUDebugInfo.debugString.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUDebugInfo.debugString.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUDebugInfo.protoRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  UnknownStorage.init()();
  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo() + 20));
  *v3 = 0;
  v3[1] = 0;
  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x58))();
  *v3 = result;
  v3[1] = v5;
  return result;
}

uint64_t DUDebugInfo.copy(with:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;
  uint64_t v17;

  v3 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v17 - v8;
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x78))(v7);
  v10 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDebugInfo()), sel_init);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v9, (uint64_t)v6);
  v11 = &v6[*(int *)(v3 + 20)];
  if (*((_QWORD *)v11 + 1))
  {
    v12 = *(_QWORD *)v11;
    v13 = *((_QWORD *)v11 + 1);
  }
  else
  {
    v12 = 0;
    v13 = 0xE000000000000000;
  }
  v14 = (char *)v10;
  swift_bridgeObjectRetain();
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v6);
  v15 = &v14[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
  swift_beginAccess();
  *(_QWORD *)v15 = v12;
  *((_QWORD *)v15 + 1) = v13;

  swift_bridgeObjectRelease();
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DUDebugInfo?);
  a1[3] = result;
  *a1 = v14;
  return result;
}

uint64_t type metadata accessor for DUDebugInfo()
{
  return objc_opt_self();
}

Swift::Void __swiftcall DUDebugInfo.encode(with:)(NSCoder with)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  type metadata accessor for DUDebugInfo();
  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDebugInfo and conformance DUDebugInfo, v2, (uint64_t (*)(uint64_t))type metadata accessor for DUDebugInfo, (uint64_t)&protocol conformance descriptor for DUDebugInfo);
  v3 = (void *)DUProtobufEncodableProtocol.serializedData()();
  if (v3)
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000016, 0x80000002284DABA0);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v4, v5);

  }
}

uint64_t DUDebugInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DUDebugInfo.init(coder:)(a1);
}

uint64_t DUDebugInfo.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  swift_getObjectType();
  type metadata accessor for NSData();
  v3 = v1;
  if (!NSCoder.decodeObject<A>(of:forKey:)())
  {

    goto LABEL_5;
  }
  swift_getObjectType();

  lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DUDebugInfo and conformance DUDebugInfo, v4, (uint64_t (*)(uint64_t))type metadata accessor for DUDebugInfo, (uint64_t)&protocol conformance descriptor for DUDebugInfo);
  DUProtobufEncodableProtocol.init(serializedData:)();

  v5 = v7;
  if (!v7)
  {
LABEL_5:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

id DUDebugInfo.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  v1 = &v0[OBJC_IVAR____TtC21DocumentUnderstanding11DUDebugInfo_debugString];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0xE000000000000000;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DUDebugInfo();
  return objc_msgSendSuper2(&v3, sel_init);
}

id DUDebugInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DUDebugInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t associated type witness table accessor for DUProtobufEncodableProtocol.ProtobufType : Message in DUDebugInfo()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.protoRepresentation.getter in conformance DUDebugInfo()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x78))();
}

uint64_t protocol witness for DUProtobufEncodableProtocol.init(proto:) in conformance DUDebugInfo@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 112);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v7 = lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  result = v5(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t sub_2283D164C()
{
  return lazy protocol witness table accessor for type DUCategoryResult and conformance DUCategoryResult(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, 255, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
}

uint64_t static HarvestingDocumentNormalization.normalizeDocument(documentData:documentType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return specialized static HarvestingDocumentNormalization.normalizeDocument(documentData:documentType:)(a1, a2, a3);
}

NSObject *static HarvestingDocumentNormalization.ingestMail(documentData:)(uint64_t a1, unint64_t a2)
{
  return specialized static HarvestingDocumentNormalization.ingestMail(documentData:)(a1, a2);
}

uint64_t static HarvestingDocumentNormalization.ingestMessage(documentData:)(uint64_t a1, unint64_t a2)
{
  return specialized static HarvestingDocumentNormalization.ingestMessage(documentData:)(a1, a2);
}

uint64_t static HarvestingDocumentNormalization.ingestNote(documentData:)(uint64_t a1, unint64_t a2)
{
  return specialized static HarvestingDocumentNormalization.ingestNote(documentData:)(a1, a2);
}

uint64_t static HarvestingDocumentNormalization.ingestReminder(documentData:)(uint64_t a1, unint64_t a2)
{
  return specialized static HarvestingDocumentNormalization.ingestReminder(documentData:)(a1, a2);
}

id static HarvestingDocumentNormalization.ingestFile(documentData:)(uint64_t a1, unint64_t a2)
{
  return specialized static HarvestingDocumentNormalization.ingestFile(documentData:)(a1, a2);
}

id HarvestingDocumentNormalization.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HarvestingDocumentNormalization.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HarvestingDocumentNormalization();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HarvestingDocumentNormalization.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HarvestingDocumentNormalization();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  outlined copy of Data._Representation(a1, a2);
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

_QWORD *_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

uint64_t _s10Foundation13__DataStorageC15withUnsafeBytes2in5applyxSnySiG_xSWKXEtKlFSSSg_Tg5015_s10Foundation4b17V32withContiguousC50IfAvailableyxSgxSRys5UInt8VGKXEKlFAESWKXEfU_SS_TG5SRys0Q0VGxs5Error_pRi_zRi0_zlySSIsgyrzo_Tf1ncn_n(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v9 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = (uint64_t)_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_sAD_pSSTgm507_sSRys5f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSS_TG5SRyAFGSSsAD_pIgyrzo_Tf1cn_n(v9, v15, a4);
  if (v4)
    return v16;
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

_QWORD *sub_2283D19D0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    outlined copy of Data._Representation(v2, v0);
    v7 = Data._copyContents(initializing:)();
    outlined consume of Data._Representation(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x2283D1AA4);
    }
  }
  return v4;
}

NSObject *specialized static HarvestingDocumentNormalization.ingestMail(documentData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  Class isa;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  objc_class *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void (*v55)(uint64_t, void *);
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t, uint64_t);
  id v80;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  id v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  void *v97;
  _QWORD v99[3];
  uint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  id v106;
  char *v107;
  objc_super v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v105 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v107 = (char *)v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v99 - v13;
  Logger.init()();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_2282CC000, v15, v16, "(HarvestingDocumentNormalization) Normalizing mail content", v17, 2u);
    MEMORY[0x22E2B117C](v17, -1, -1);
  }

  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  v19 = objc_allocWithZone(MEMORY[0x24BE0CBF0]);
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  v21 = objc_msgSend(v19, sel_initWithProtoData_, isa);

  if (v21)
  {
    v22 = objc_msgSend(v21, sel_domainId);
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

    }
    else
    {
      v24 = 0;
      v26 = 0;
    }
    v31 = objc_msgSend(v21, sel_uniqueId);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v111 = 0;
    v112 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v35._countAndFlagsBits = 0x3A6C69616D65;
    v35._object = (void *)0xE600000000000000;
    String.append(_:)(v35);
    v103 = (unint64_t)"nt from serialized protobuf";
    v36._countAndFlagsBits = 0xD000000000000014;
    v36._object = (void *)0x80000002284DFDD0;
    String.append(_:)(v36);
    v37._countAndFlagsBits = 24415;
    v37._object = (void *)0xE200000000000000;
    String.append(_:)(v37);
    v109 = v24;
    v110 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    _print_unlocked<A, B>(_:_:)();
    v38._countAndFlagsBits = 24415;
    v38._object = (void *)0xE200000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits = v32;
    v39._object = v34;
    String.append(_:)(v39);
    v40 = v111;
    v41 = v112;
    v42 = (objc_class *)type metadata accessor for DUDocumentIdentifier();
    v43 = (char *)objc_allocWithZone(v42);
    v44 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    v45 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    v46 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
    *(_QWORD *)v46 = 0;
    *((_QWORD *)v46 + 1) = 0;
    v47 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
    *(_QWORD *)v47 = 0xD000000000000028;
    *((_QWORD *)v47 + 1) = 0x80000002284DCDC0;
    v48 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
    *(_QWORD *)v48 = v40;
    *((_QWORD *)v48 + 1) = v41;
    v108.receiver = v43;
    v108.super_class = v42;
    v49 = objc_msgSendSuper2(&v108, sel_init);
    v50 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(unint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v49) + 0xB0))(0xD000000000000014, 0x80000002284DFDD0);
    v51 = *(void (**)(uint64_t, uint64_t))((*v50 & *v49) + 0xC8);
    swift_bridgeObjectRetain();
    v100 = v24;
    v52 = v24;
    v53 = v26;
    v54 = v49;
    v51(v52, v53);
    v55 = *(void (**)(uint64_t, void *))((*v50 & *v49) + 0xE0);
    swift_bridgeObjectRetain();
    v101 = v32;
    v56 = v32;
    v57 = v50;
    v102 = v34;
    v55(v56, v34);
    v58 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
    v59 = objc_msgSend(v21, sel_messageIdentifier);
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v61;

    (*(void (**)(uint64_t, uint64_t))((*v57 & *v58) + 0x1C0))(v60, v62);
    v63 = objc_msgSend(v21, sel_subject);
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v66 = v65;

    (*(void (**)(uint64_t, uint64_t))((*v57 & *v58) + 0xE8))(v64, v66);
    v67 = objc_msgSend(v21, sel_textContent);
    if (v67)
    {
      v68 = v67;
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v71 = v70;

    }
    else
    {
      v69 = 0;
      v71 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))((*v57 & *v58) + 0x178))(v69, v71);
    v72 = objc_msgSend(v21, sel_fromHandle);
    v73 = objc_msgSend(v72, sel_name);

    if (v73)
    {
      v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v76 = v75;

    }
    else
    {
      v74 = 0;
      v76 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))((*v57 & *v58) + 0x130))(v74, v76);
    objc_msgSend(v21, sel_absoluteTimestamp);
    v77 = v107;
    Date.init(timeIntervalSinceReferenceDate:)();
    v78 = type metadata accessor for Date();
    v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56);
    v79(v77, 0, 1, v78);
    (*(void (**)(char *))((*v57 & *v58) + 0x220))(v77);
    v106 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentHTMLData()), sel_init);
    v80 = objc_msgSend(v21, sel_htmlContent);
    v104 = v53;
    if (v80)
    {
      v81 = v80;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v83 = v82;

      v99[1] = v79;
      v84 = (char *)&loc_2283D220C + dword_2283D2714[v83 >> 62];
      v99[2] = v78;
      __asm { BR              X10 }
    }
    v85 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
    v86 = v58;
    v87 = specialized DUDocument.init(rawDocument:maxLength:)(v86, 5120);

    v88 = type metadata accessor for URL();
    v89 = (uint64_t)v105;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v105, 1, 1, v88);
    v90 = (uint64_t)v107;
    v79(v107, 1, 1, v78);
    objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdate());
    v91 = v54;
    v92 = v87;
    v27 = specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(v91, 0, 0, v87, v89, 1818845549, 0xE400000000000000, v90, 0);

    v93 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2480]), sel_init);
    v94 = (void *)MEMORY[0x22E2AF8EC](v101, v102);
    swift_bridgeObjectRelease();
    if (v104)
    {
      v95 = (void *)MEMORY[0x22E2AF8EC](v100, v104);
      swift_bridgeObjectRelease();
    }
    else
    {
      v95 = 0;
    }
    v96 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2478]), sel_initWithUniqueIdentifier_domainIdentifier_attributeSet_, v94, v95, v93);

    v97 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000014, v103 | 0x8000000000000000);
    objc_msgSend(v96, sel_setBundleID_, v97);

  }
  else
  {
    Logger.init()();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_2282CC000, v27, v28, "HarvestingDocumentNormalization: Failed to initialize mail content from serialized protobuf", v29, 2u);
      MEMORY[0x22E2B117C](v29, -1, -1);
    }

    v18(v12, v8);
    lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError();
    swift_allocError();
    *v30 = 0xD00000000000005BLL;
    v30[1] = 0x80000002284DFD70;
    swift_willThrow();
  }
  return v27;
}

uint64_t specialized static HarvestingDocumentNormalization.ingestMessage(documentData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(char *, uint64_t);
  id v21;
  Class isa;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  objc_class *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  void (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t, void *);
  _QWORD *v56;
  void (*v57)(uint64_t, void *);
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  id v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  id v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t result;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  id v118;
  void *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  void *v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  void (*v130)(_QWORD *);
  _QWORD *v131;
  id v132;
  _QWORD *v133;
  id v134;
  uint64_t v135;
  id v136;
  id v137;
  id v138;
  id v139;
  void *v140;
  void *v141;
  id v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  void (*v147)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v148;
  uint64_t v149;
  void *v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  id v154;
  uint64_t v155;
  char *v156;
  objc_super v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v156 = (char *)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v153 = (char *)&v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v162 = (unint64_t)&v144 - v9;
  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v144 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v144 - v15;
  Logger.init()();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_2282CC000, v17, v18, "(HarvestingDocumentNormalization) Normalizing message content", v19, 2u);
    MEMORY[0x22E2B117C](v19, -1, -1);
  }

  v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v16, v10);
  v21 = objc_allocWithZone(MEMORY[0x24BE0CC00]);
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  v23 = objc_msgSend(v21, sel_initWithProtoData_, isa);

  if (!v23)
  {
    Logger.init()();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_2282CC000, v30, v31, "HarvestingDocumentNormalization: Failed to initialize message content from serialized protobuf", v32, 2u);
      MEMORY[0x22E2B117C](v32, -1, -1);
    }

    v20(v14, v10);
    lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError();
    swift_allocError();
    *v33 = 0xD00000000000005ELL;
    v33[1] = 0x80000002284DFD10;
    swift_willThrow();
    return v10;
  }
  v24 = objc_msgSend(v23, sel_domainId);
  v25 = v23;
  if (v24)
  {
    v26 = v24;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0;
  }
  v155 = v27;
  v34 = objc_msgSend(v23, sel_uniqueId);
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  v160 = 0;
  v161 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v38._countAndFlagsBits = 0x3A6567617373656DLL;
  v38._object = (void *)0xE800000000000000;
  String.append(_:)(v38);
  v151 = (unint64_t)"ocumentHTMLData";
  v39._countAndFlagsBits = 0xD000000000000013;
  v39._object = (void *)0x80000002284DF000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = 24415;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  v158 = v27;
  v159 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  _print_unlocked<A, B>(_:_:)();
  v41._countAndFlagsBits = 24415;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = v35;
  v42._object = v37;
  String.append(_:)(v42);
  v43 = v160;
  v44 = v161;
  v45 = (objc_class *)type metadata accessor for DUDocumentIdentifier();
  v46 = (char *)objc_allocWithZone(v45);
  v47 = &v46[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
  *(_QWORD *)v47 = 0;
  *((_QWORD *)v47 + 1) = 0;
  v48 = &v46[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
  *(_QWORD *)v48 = 0;
  *((_QWORD *)v48 + 1) = 0;
  v49 = &v46[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v49 + 1) = 0;
  v50 = &v46[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
  *(_QWORD *)v50 = 0xD000000000000028;
  *((_QWORD *)v50 + 1) = 0x80000002284DCDC0;
  v51 = &v46[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
  *(_QWORD *)v51 = v43;
  *((_QWORD *)v51 + 1) = v44;
  v157.receiver = v46;
  v157.super_class = v45;
  v52 = objc_msgSendSuper2(&v157, sel_init);
  v53 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(unint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v52) + 0xB0))(0xD000000000000013, 0x80000002284DF000);
  v54 = *(void (**)(uint64_t, uint64_t))((*v53 & *v52) + 0xC8);
  swift_bridgeObjectRetain();
  v152 = v29;
  v54(v155, v29);
  v55 = *(void (**)(uint64_t, void *))((*v53 & *v52) + 0xE0);
  swift_bridgeObjectRetain();
  v148 = v52;
  v55(v35, v37);
  v56 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
  v57 = *(void (**)(uint64_t, void *))((*v53 & *v56) + 0x1C0);
  swift_bridgeObjectRetain();
  v149 = v35;
  v150 = v37;
  v57(v35, v37);
  v58 = objc_msgSend(v25, sel_content);
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v61 = v60;

  v62 = v56;
  (*(void (**)(uint64_t, uint64_t))((*v53 & *v56) + 0x178))(v59, v61);
  v63 = objc_msgSend(v25, sel_fromHandle);
  v64 = objc_msgSend(v63, sel_name);

  if (v64)
  {
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v67 = v66;

  }
  else
  {
    v65 = 0;
    v67 = 0;
  }
  v68 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v56) + 0x130))(v65, v67);
  v69 = objc_msgSend(v25, sel_URL);
  v70 = (uint64_t)v156;
  if (v69)
  {
    v71 = v69;
    v72 = v162;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v73 = type metadata accessor for URL();
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 0, 1, v73);
  }
  else
  {
    v74 = type metadata accessor for URL();
    v72 = v162;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v162, 1, 1, v74);
  }
  (*(void (**)(unint64_t))((*v68 & *v56) + 0x1D8))(v72);
  objc_msgSend(v25, sel_absoluteTimestamp);
  Date.init(timeIntervalSinceReferenceDate:)();
  v75 = type metadata accessor for Date();
  v147 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56);
  v147(v70, 0, 1, v75);
  (*(void (**)(uint64_t))((*v68 & *v56) + 0x220))(v70);
  v76 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DUDocumentMessageData()), sel_init);
  v77 = objc_msgSend(v25, sel_fromHandle);
  v78 = v68;
  v79 = objc_msgSend(v77, sel_handle);

  v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v82 = v81;

  (*(void (**)(uint64_t, uint64_t))((*v78 & *v76) + 0xA0))(v80, v82);
  v83 = objc_msgSend(v25, sel_conversationId);
  v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v86 = v85;

  (*(void (**)(uint64_t, uint64_t))((*v78 & *v76) + 0x88))(v84, v86);
  v87 = objc_msgSend(v25, sel_toHandles);
  v154 = v25;
  if (!v87)
  {
LABEL_45:
    v118 = objc_msgSend(v25, sel_attachment);
    v119 = v118;
    if (v118)
    {
      v120 = objc_msgSend(v118, sel_filename);

      v119 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      v122 = v121;

    }
    else
    {
      v122 = 0;
    }
    (*(void (**)(void *, uint64_t))((*MEMORY[0x24BEE4EA0] & *v76) + 0xE8))(v119, v122);
    v123 = objc_msgSend(v25, sel_attachment);
    v124 = v123;
    if (v123)
    {
      v125 = objc_msgSend(v123, sel_path);

      v126 = (uint64_t)v153;
      if (v125)
      {
        v124 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v128 = v127;

      }
      else
      {
        v124 = 0;
        v128 = 0;
      }
    }
    else
    {
      v128 = 0;
      v126 = (uint64_t)v153;
    }
    v129 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(void *, uint64_t))((*MEMORY[0x24BEE4EA0] & *v76) + 0x100))(v124, v128);
    v130 = *(void (**)(_QWORD *))((*v129 & *v62) + 0x250);
    v131 = v76;
    v130(v76);
    v132 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
    v133 = v62;
    v134 = specialized DUDocument.init(rawDocument:maxLength:)(v133, 5120);

    v135 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v126, 1, 1, v135);
    v147(v70, 1, 1, v75);
    v136 = objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdate());
    v137 = v148;
    v138 = v134;
    v10 = (uint64_t)specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(v137, 0, 0, v134, v126, 0x6567617373656DLL, 0xE700000000000000, v70, 0);

    v139 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2480]), sel_init);
    v140 = (void *)MEMORY[0x22E2AF8EC](v149, v150);
    swift_bridgeObjectRelease();
    if (v152)
    {
      v141 = (void *)MEMORY[0x22E2AF8EC](v155, v152);
      swift_bridgeObjectRelease();
    }
    else
    {
      v141 = 0;
    }
    v142 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2478]), sel_initWithUniqueIdentifier_domainIdentifier_attributeSet_, v140, v141, v139);

    v143 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000013, v151 | 0x8000000000000000);
    objc_msgSend(v142, sel_setBundleID_, v143);

    return v10;
  }
  v88 = v87;
  type metadata accessor for BMNamedHandle();
  v89 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v162 = v89;
  if (v89 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v90 = result;
  }
  else
  {
    v90 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v92 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (!v90)
  {
    swift_bridgeObjectRelease();
    v108 = (_QWORD *)MEMORY[0x24BEE4AF8];
    (*(void (**)(_QWORD))((*v92 & *v76) + 0xD0))(MEMORY[0x24BEE4AF8]);
LABEL_44:
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *))((*v92 & *v76) + 0xB8))(v108);
    v25 = v154;
    goto LABEL_45;
  }
  if (v90 >= 1)
  {
    v145 = v75;
    v146 = v62;
    v93 = 0;
    v94 = v162;
    v95 = v162 & 0xC000000000000001;
    v96 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if (v95)
        v97 = (id)MEMORY[0x22E2AFF34](v93, v94);
      else
        v97 = *(id *)(v94 + 8 * v93 + 32);
      v98 = v97;
      v99 = objc_msgSend(v97, sel_name);
      if (v99)
      {
        v100 = v99;
        v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v103 = v102;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96[2] + 1, 1, v96);
        v105 = v96[2];
        v104 = v96[3];
        if (v105 >= v104 >> 1)
          v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v104 > 1), v105 + 1, 1, v96);
        v96[2] = v105 + 1;
        v106 = &v96[2 * v105];
        v106[4] = v101;
        v106[5] = v103;
        v94 = v162;
      }
      else
      {

      }
      ++v93;
    }
    while (v90 != v93);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *))((*MEMORY[0x24BEE4EA0] & *v76) + 0xD0))(v96);
    swift_bridgeObjectRetain();
    v107 = 0;
    v108 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if (v95)
        v109 = (id)MEMORY[0x22E2AFF34](v107, v94);
      else
        v109 = *(id *)(v94 + 8 * v107 + 32);
      v110 = v109;
      v111 = objc_msgSend(v109, sel_handle);
      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v114 = v113;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108[2] + 1, 1, v108);
      v116 = v108[2];
      v115 = v108[3];
      if (v116 >= v115 >> 1)
        v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v115 > 1), v116 + 1, 1, v108);
      ++v107;
      v108[2] = v116 + 1;
      v117 = &v108[2 * v116];
      v117[4] = v112;
      v117[5] = v114;
      v94 = v162;
    }
    while (v90 != v107);
    swift_bridgeObjectRelease();
    v70 = (uint64_t)v156;
    v92 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v75 = v145;
    v62 = v146;
    goto LABEL_44;
  }
  __break(1u);
  return result;
}

uint64_t specialized static HarvestingDocumentNormalization.ingestNote(documentData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  Class isa;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  objc_class *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, void *);
  _QWORD *v53;
  void (*v54)(uint64_t, void *);
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v67;
  _QWORD *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  _QWORD *v73;
  id v74;
  id v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  void *v80;
  uint64_t v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  objc_super v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v88 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v87 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v82 - v13;
  Logger.init()();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_2282CC000, v15, v16, "(HarvestingDocumentNormalization) Normalizing note content", v17, 2u);
    MEMORY[0x22E2B117C](v17, -1, -1);
  }

  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  v19 = objc_allocWithZone(MEMORY[0x24BE0CC28]);
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  v21 = objc_msgSend(v19, sel_initWithProtoData_, isa);

  if (v21)
  {
    v22 = objc_msgSend(v21, sel_domainId);
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v94 = v25;

    }
    else
    {
      v24 = 0;
      v94 = 0;
    }
    v30 = objc_msgSend(v21, sel_uniqueId);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    v92 = 0;
    v93 = 0xE000000000000000;
    v34._countAndFlagsBits = 0x3A65746F6ELL;
    v34._object = (void *)0xE500000000000000;
    String.append(_:)(v34);
    v35._object = (void *)0x80000002284DFCF0;
    v85 = 0x80000002284DFCF0;
    v86 = (unint64_t)"nt from serialized protobuf";
    v35._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v35);
    v36._countAndFlagsBits = 24415;
    v36._object = (void *)0xE200000000000000;
    String.append(_:)(v36);
    v37 = v94;
    v90 = v24;
    v91 = v94;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    _print_unlocked<A, B>(_:_:)();
    v38._countAndFlagsBits = 24415;
    v38._object = (void *)0xE200000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits = v31;
    v39._object = v33;
    String.append(_:)(v39);
    v40 = v92;
    v41 = v93;
    v42 = (objc_class *)type metadata accessor for DUDocumentIdentifier();
    v43 = (char *)objc_allocWithZone(v42);
    v44 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    v45 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    v46 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
    *(_QWORD *)v46 = 0;
    *((_QWORD *)v46 + 1) = 0;
    v47 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
    *(_QWORD *)v47 = 0xD000000000000028;
    *((_QWORD *)v47 + 1) = 0x80000002284DCDC0;
    v48 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
    *(_QWORD *)v48 = v40;
    *((_QWORD *)v48 + 1) = v41;
    v89.receiver = v43;
    v89.super_class = v42;
    v49 = objc_msgSendSuper2(&v89, sel_init);
    v50 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(unint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v49) + 0xB0))(0xD000000000000015, v85);
    v51 = *(void (**)(uint64_t, uint64_t))((*v50 & *v49) + 0xC8);
    swift_bridgeObjectRetain();
    v82 = v24;
    v51(v24, v37);
    v52 = *(void (**)(uint64_t, void *))((*v50 & *v49) + 0xE0);
    swift_bridgeObjectRetain();
    v52(v31, v33);
    v53 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
    v54 = *(void (**)(uint64_t, void *))((*v50 & *v53) + 0x1C0);
    swift_bridgeObjectRetain();
    v84 = v31;
    v85 = (unint64_t)v33;
    v54(v31, v33);
    v55 = objc_msgSend(v21, sel_title);
    if (v55)
    {
      v56 = v55;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v59 = v58;

    }
    else
    {
      v57 = 0;
      v59 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))((*v50 & *v53) + 0xE8))(v57, v59);
    v60 = objc_msgSend(v21, sel_content);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v63 = v62;

    (*(void (**)(uint64_t, uint64_t))((*v50 & *v53) + 0x178))(v61, v63);
    v83 = v21;
    objc_msgSend(v21, sel_absoluteTimestamp);
    v64 = (uint64_t)v87;
    Date.init(timeIntervalSinceReferenceDate:)();
    v65 = type metadata accessor for Date();
    v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56);
    v66(v64, 0, 1, v65);
    (*(void (**)(uint64_t))((*v50 & *v53) + 0x220))(v64);
    v67 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
    v68 = v53;
    v69 = specialized DUDocument.init(rawDocument:maxLength:)(v68, 5120);

    v70 = type metadata accessor for URL();
    v71 = (uint64_t)v88;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v88, 1, 1, v70);
    v66(v64, 1, 1, v65);
    v72 = objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdate());
    v73 = v49;
    v74 = v69;
    v8 = (uint64_t)specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(v73, 0, 0, v69, v71, 0x7365746F6ELL, 0xE500000000000000, v64, 0);

    v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2480]), sel_init);
    v76 = (void *)MEMORY[0x22E2AF8EC](v84, v85);
    swift_bridgeObjectRelease();
    if (v94)
    {
      v77 = (void *)MEMORY[0x22E2AF8EC](v82, v94);
      swift_bridgeObjectRelease();
    }
    else
    {
      v77 = 0;
    }
    v78 = v83;
    v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2478]), sel_initWithUniqueIdentifier_domainIdentifier_attributeSet_, v76, v77, v75);

    v80 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000015, v86 | 0x8000000000000000);
    objc_msgSend(v79, sel_setBundleID_, v80);

  }
  else
  {
    Logger.init()();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_2282CC000, v26, v27, "HarvestingDocumentNormalization: Failed to initialize note content from serialized protobuf", v28, 2u);
      MEMORY[0x22E2B117C](v28, -1, -1);
    }

    v18(v12, v8);
    lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError();
    swift_allocError();
    *v29 = 0xD00000000000005BLL;
    v29[1] = 0x80000002284DFC90;
    swift_willThrow();
  }
  return v8;
}

uint64_t specialized static HarvestingDocumentNormalization.ingestReminder(documentData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(char *, uint64_t);
  id v19;
  Class isa;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  objc_class *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  void (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t, void *);
  _QWORD *v53;
  void (*v54)(uint64_t, void *);
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void (*v68)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  _QWORD *v75;
  id v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  id v81;
  void *v82;
  uint64_t v84;
  id v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  objc_super v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v91 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v90 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v84 - v13;
  Logger.init()();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_2282CC000, v15, v16, "(HarvestingDocumentNormalization) Normalizing reminder content", v17, 2u);
    MEMORY[0x22E2B117C](v17, -1, -1);
  }

  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  v19 = objc_allocWithZone(MEMORY[0x24BE0CCB8]);
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(a1, a2);
  v21 = objc_msgSend(v19, sel_initWithProtoData_, isa);

  if (v21)
  {
    v22 = objc_msgSend(v21, sel_domainId);
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

    }
    else
    {
      v24 = 0;
      v26 = 0;
    }
    v31 = objc_msgSend(v21, sel_uniqueId);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v95 = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v35._countAndFlagsBits = 0x7265646E696D6572;
    v35._object = (void *)0xE90000000000003ALL;
    String.append(_:)(v35);
    v88 = (unint64_t)"ontent from serialized protobuf";
    v36._countAndFlagsBits = 0xD000000000000013;
    v36._object = (void *)0x80000002284DFC70;
    String.append(_:)(v36);
    v37._countAndFlagsBits = 24415;
    v37._object = (void *)0xE200000000000000;
    String.append(_:)(v37);
    v93 = v24;
    v94 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    _print_unlocked<A, B>(_:_:)();
    v38._countAndFlagsBits = 24415;
    v38._object = (void *)0xE200000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits = v32;
    v39._object = v34;
    String.append(_:)(v39);
    v40 = v95;
    v41 = v96;
    v42 = (objc_class *)type metadata accessor for DUDocumentIdentifier();
    v43 = (char *)objc_allocWithZone(v42);
    v44 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
    *(_QWORD *)v44 = 0;
    *((_QWORD *)v44 + 1) = 0;
    v45 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    v46 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
    *(_QWORD *)v46 = 0;
    *((_QWORD *)v46 + 1) = 0;
    v47 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
    *(_QWORD *)v47 = 0xD000000000000028;
    *((_QWORD *)v47 + 1) = 0x80000002284DCDC0;
    v48 = &v43[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
    *(_QWORD *)v48 = v40;
    *((_QWORD *)v48 + 1) = v41;
    v92.receiver = v43;
    v92.super_class = v42;
    v49 = objc_msgSendSuper2(&v92, sel_init);
    v50 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(unint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *v49) + 0xB0))(0xD000000000000013, 0x80000002284DFC70);
    v51 = *(void (**)(uint64_t, uint64_t))((*v50 & *v49) + 0xC8);
    swift_bridgeObjectRetain();
    v84 = v24;
    v89 = v26;
    v51(v24, v26);
    v52 = *(void (**)(uint64_t, void *))((*v50 & *v49) + 0xE0);
    swift_bridgeObjectRetain();
    v52(v32, v34);
    v53 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DURawDocument()), sel_init);
    v54 = *(void (**)(uint64_t, void *))((*v50 & *v53) + 0x1C0);
    swift_bridgeObjectRetain();
    v86 = v32;
    v87 = v34;
    v54(v32, v34);
    v55 = objc_msgSend(v21, sel_title);
    if (v55)
    {
      v56 = v55;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v59 = v58;

    }
    else
    {
      v57 = 0;
      v59 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))((*v50 & *v53) + 0xE8))(v57, v59);
    v60 = objc_msgSend(v21, sel_notes);
    if (v60)
    {
      v61 = v60;
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v64 = v63;

    }
    else
    {
      v62 = 0;
      v64 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))((*v50 & *v53) + 0x178))(v62, v64);
    v85 = v21;
    objc_msgSend(v21, sel_absoluteTimestamp);
    v65 = (uint64_t)v90;
    Date.init(timeIntervalSinceReferenceDate:)();
    v66 = type metadata accessor for Date();
    v67 = v50;
    v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56);
    v68(v65, 0, 1, v66);
    (*(void (**)(uint64_t))((*v67 & *v53) + 0x220))(v65);
    v69 = objc_allocWithZone((Class)type metadata accessor for DUDocument());
    v70 = v53;
    v71 = specialized DUDocument.init(rawDocument:maxLength:)(v70, 5120);

    v72 = type metadata accessor for URL();
    v73 = (uint64_t)v91;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v91, 1, 1, v72);
    v68(v65, 1, 1, v66);
    v74 = objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdate());
    v75 = v49;
    v76 = v71;
    v8 = (uint64_t)specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(v75, 0, 0, v71, v73, 0x7265646E696D6572, 0xE900000000000073, v65, 0);

    v77 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2480]), sel_init);
    v78 = (void *)MEMORY[0x22E2AF8EC](v86, v87);
    swift_bridgeObjectRelease();
    if (v89)
    {
      v79 = (void *)MEMORY[0x22E2AF8EC](v84, v89);
      swift_bridgeObjectRelease();
    }
    else
    {
      v79 = 0;
    }
    v80 = v85;
    v81 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2478]), sel_initWithUniqueIdentifier_domainIdentifier_attributeSet_, v78, v79, v77);

    v82 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000013, v88 | 0x8000000000000000);
    objc_msgSend(v81, sel_setBundleID_, v82);

  }
  else
  {
    Logger.init()();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_2282CC000, v27, v28, "HarvestingDocumentNormalization: Failed to initialize reminder content from serialized protobuf", v29, 2u);
      MEMORY[0x22E2B117C](v29, -1, -1);
    }

    v18(v12, v8);
    lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError();
    swift_allocError();
    *v30 = 0xD00000000000005FLL;
    v30[1] = 0x80000002284DFC10;
    swift_willThrow();
  }
  return v8;
}

id specialized static HarvestingDocumentNormalization.ingestFile(documentData:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  id v22;
  Class isa;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  objc_class *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  _QWORD *v49;
  id v50;
  id v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  uint64_t v62;
  char *v63;
  char *v64;
  objc_super v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  char *v70;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v4);
  v64 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v63 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v70 = (char *)&v62 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v62 - v15;
  Logger.init()();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_2282CC000, v17, v18, "(HarvestingDocumentNormalization) Normalizing file content", v19, 2u);
    MEMORY[0x22E2B117C](v19, -1, -1);
  }

  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21 = v8;
  v20(v16, v8);
  type metadata accessor for DUDocument();
  v22 = objc_allocWithZone(MEMORY[0x24BDBCE50]);
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, sel_initWithData_, isa);
  outlined consume of Data._Representation(a1, a2);

  lazy protocol witness table accessor for type DUDocument and conformance DUDocument();
  v24 = DUProtobufEncodableProtocol.init(serializedData:)();
  v25 = v68;
  if (v68)
  {
    v26 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v27 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v68) + 0x88))(v24);
    if (!v28)
      goto LABEL_9;
    v29 = v27;
    v30 = v28;
    swift_bridgeObjectRelease();
    v31 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0)
      v31 = v29 & 0xFFFFFFFFFFFFLL;
    if (v31)
    {
      v68 = 0;
      v69 = 0xE000000000000000;
      v32._countAndFlagsBits = 0x3A656C6966;
      v32._object = (void *)0xE500000000000000;
      String.append(_:)(v32);
      v66 = (*(uint64_t (**)(void))((*v26 & *v25) + 0xA0))();
      v67 = v33;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      _print_unlocked<A, B>(_:_:)();
      swift_bridgeObjectRelease();
      v34 = v68;
      v35 = v69;
      v36 = (objc_class *)type metadata accessor for DUDocumentIdentifier();
      v37 = (char *)objc_allocWithZone(v36);
      v38 = &v37[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightBundleID];
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = 0;
      v39 = &v37[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightDomainIdentifier];
      *(_QWORD *)v39 = 0;
      *((_QWORD *)v39 + 1) = 0;
      v40 = &v37[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_spotlightUniqueIdentifier];
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = 0;
      v41 = &v37[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentNamespace];
      *(_QWORD *)v41 = 0xD000000000000028;
      *((_QWORD *)v41 + 1) = 0x80000002284DCDC0;
      v42 = &v37[OBJC_IVAR____TtC21DocumentUnderstanding20DUDocumentIdentifier_documentID];
      *(_QWORD *)v42 = v34;
      *((_QWORD *)v42 + 1) = v35;
      v65.receiver = v37;
      v65.super_class = v36;
      v43 = objc_msgSendSuper2(&v65, sel_init);
      v44 = type metadata accessor for URL();
      v45 = (uint64_t)v63;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v63, 1, 1, v44);
      v46 = type metadata accessor for Date();
      v47 = (uint64_t)v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v64, 1, 1, v46);
      v48 = objc_allocWithZone((Class)type metadata accessor for DUDocumentUpdate());
      v49 = v25;
      v50 = specialized DUDocumentUpdate.init(documentID:documentBody:document:associatedFileURL:documentType:updateTimestamp:documentAttributes:)(v43, 0, 0, v25, v45, 0x73656C6966, 0xE500000000000000, v47, 0);

      v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2480]), sel_init);
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC2478]), sel_initWithUniqueIdentifier_domainIdentifier_attributeSet_, 0, 0, v51);

    }
    else
    {
LABEL_9:
      v52 = v70;
      Logger.init()();
      v53 = Logger.logObject.getter();
      v54 = static os_log_type_t.error.getter();
      v50 = (id)v54;
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v55 = 0;
        _os_log_impl(&dword_2282CC000, v53, (os_log_type_t)v50, "HarvestingDocumentNormalization: nil or empty text when initializing document from serialized Data", v55, 2u);
        MEMORY[0x22E2B117C](v55, -1, -1);
      }

      v20(v52, v21);
      lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError();
      swift_allocError();
      *v56 = 0xD000000000000043;
      v56[1] = 0x80000002284DFBC0;
      swift_willThrow();

    }
  }
  else
  {
    Logger.init()();
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    v50 = (id)v58;
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_2282CC000, v57, (os_log_type_t)v50, "HarvestingDocumentNormalization: Failed to initialize document from serialized Data", v59, 2u);
      MEMORY[0x22E2B117C](v59, -1, -1);
    }

    v20(v12, v8);
    lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError();
    swift_allocError();
    *v60 = 0xD000000000000043;
    v60[1] = 0x80000002284DFBC0;
    swift_willThrow();
  }
  return v50;
}

uint64_t specialized static HarvestingDocumentNormalization.normalizeDocument(documentData:documentType:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint8_t *v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v17 = a1;
    v13 = v12;
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_2282CC000, v10, v11, "(HarvestingDocumentNormalization) Beginning document normalization", v12, 2u);
    a1 = v17;
    MEMORY[0x22E2B117C](v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  switch(a3)
  {
    case 0:
      result = (uint64_t)specialized static HarvestingDocumentNormalization.ingestMail(documentData:)(a1, a2);
      break;
    case 1:
      result = specialized static HarvestingDocumentNormalization.ingestMessage(documentData:)(a1, a2);
      break;
    case 2:
      result = specialized static HarvestingDocumentNormalization.ingestNote(documentData:)(a1, a2);
      break;
    case 3:
      result = specialized static HarvestingDocumentNormalization.ingestReminder(documentData:)(a1, a2);
      break;
    case 4:
      result = (uint64_t)specialized static HarvestingDocumentNormalization.ingestFile(documentData:)(a1, a2);
      break;
    default:
      lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError();
      swift_allocError();
      *v15 = 0xD000000000000036;
      v15[1] = 0x80000002284DFDF0;
      result = swift_willThrow();
      break;
  }
  return result;
}

uint64_t type metadata accessor for HarvestingDocumentNormalization()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for HarvestingDocumentNormalizationError()
{
  return &type metadata for HarvestingDocumentNormalizationError;
}

unint64_t lazy protocol witness table accessor for type DUDocument and conformance DUDocument()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DUDocument and conformance DUDocument;
  if (!lazy protocol witness table cache variable for type DUDocument and conformance DUDocument)
  {
    v1 = type metadata accessor for DUDocument();
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for DUDocument, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DUDocument and conformance DUDocument);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError;
  if (!lazy protocol witness table cache variable for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError)
  {
    result = MEMORY[0x22E2B10E0](&protocol conformance descriptor for HarvestingDocumentNormalizationError, &type metadata for HarvestingDocumentNormalizationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HarvestingDocumentNormalizationError and conformance HarvestingDocumentNormalizationError);
  }
  return result;
}

unint64_t type metadata accessor for BMNamedHandle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for BMNamedHandle;
  if (!lazy cache variable for type metadata for BMNamedHandle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMNamedHandle);
  }
  return result;
}

uint64_t outlined destroy of _HasContiguousBytes?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DUConcatenatedDocumentTextSpecification.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static DUConcatenatedDocumentTextSpecification.phaseID.getter()
{
  return 0xD000000000000020;
}

uint64_t DUConcatenatedDocumentTextSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUConcatenatedDocumentTextSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUConcatenatedDocumentTextSpecification.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUConcatenatedDocumentTextSpecification()
{
  return 0xD000000000000020;
}

uint64_t type metadata accessor for DUConcatenatedDocumentTextSpecification()
{
  return objc_opt_self();
}

__n128 PoemAnalyticsUtilities.init(poemStatsDatabase:configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  char v10;

  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a2, (uint64_t)v9, &demangling cache variable for type metadata for PoemModelingParameters?);
  v5 = v10;
  result = (__n128)v9[0];
  v7 = v9[1];
  v8 = v9[2];
  *(_QWORD *)a3 = a1;
  *(__n128 *)(a3 + 8) = result;
  *(_OWORD *)(a3 + 24) = v7;
  *(_OWORD *)(a3 + 40) = v8;
  *(_BYTE *)(a3 + 56) = v5;
  return result;
}

uint64_t PoemAnalyticsUtilities.sendAnalyticsEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  id v3;

  v3 = PoemAnalyticsUtilities.poemAnalyticsEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:)(a1, a2, a3);
  specialized PoemAnalyticsUtilities.addEventsToPoemAnalyticsStream(poemAnalyticsEvents:)((unint64_t)v3);
  return swift_bridgeObjectRelease();
}

id PoemAnalyticsUtilities.poemStatsDatabase.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void PoemAnalyticsUtilities.poemStatsDatabase.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*PoemAnalyticsUtilities.poemStatsDatabase.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

__n128 PoemAnalyticsUtilities.configuration.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 56);
  v3 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v3;
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  *(_BYTE *)(a1 + 48) = v2;
  return result;
}

uint64_t PoemAnalyticsUtilities.configuration.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(a1, v1 + 8, &demangling cache variable for type metadata for PoemModelingParameters?);
}

uint64_t (*PoemAnalyticsUtilities.configuration.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

id PoemAnalyticsUtilities.poemAnalyticsEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  id result;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  id v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  double v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD v69[6];
  _BYTE v70[56];
  _BYTE v71[64];

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v58 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  v65 = v13;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v65 == v54)
      goto LABEL_3;
LABEL_32:
    Logger.init()();
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_2282CC000, v55, v56, "PoemAnalyticsUtilities: Keys count mismatch during aggregation model inference", v57, 2u);
      MEMORY[0x22E2B117C](v57, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return (id)MEMORY[0x24BEE4AF8];
  }
  if (v13 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_32;
LABEL_3:
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v62 + 8, (uint64_t)v70, &demangling cache variable for type metadata for PoemModelingParameters?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v70, (uint64_t)v71, &demangling cache variable for type metadata for PoemModelingParameters?);
  if ((v71[48] & 1) != 0)
  {
    Logger.init()();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_2282CC000, v14, v15, "PoemAnalyticsUtilities: Couldn't load configuration file, hence not adding any event to PoemAnalytics", v16, 2u);
      MEMORY[0x22E2B117C](v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    return (id)MEMORY[0x24BEE4AF8];
  }
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = (id)_CocoaArrayWrapper.endIndex.getter();
    v18 = (uint64_t)result;
    v20 = v17;
    if (!result)
    {
LABEL_30:
      v47 = swift_bridgeObjectRelease();
      v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 408))(v47);
      v49 = specialized static PoemStreamUtilities.numberOfPeopleFromPhotos()();
      v50 = MEMORY[0x24BDAC7A8](v49);
      *(&v58 - 6) = v62;
      *(&v58 - 5) = a3;
      *(&v58 - 4) = v48;
      *(&v58 - 3) = v50;
      *(&v58 - 2) = v51;
      v52 = swift_bridgeObjectRetain();
      v53 = specialized Sequence.compactMap<A>(_:)(v52, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, double))partial apply for closure #1 in PoemAnalyticsUtilities.poemAnalyticsEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (id)v53;
    }
  }
  else
  {
    v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain();
    v20 = v17;
    if (!v18)
      goto LABEL_30;
  }
  if (v18 < 1)
    goto LABEL_38;
  v21 = 0;
  v67 = a2 & 0xC000000000000001;
  v22 = (uint64_t *)(a1 + 40);
  v66 = 0x80000002284DE520;
  v61 = a3;
  v60 = a2;
  v59 = v18;
  while (1)
  {
    if (v67)
    {
      v23 = (void *)MEMORY[0x22E2AFF34](v21, a2);
    }
    else
    {
      v23 = *(void **)(a2 + 8 * v21 + 32);
      swift_unknownObjectRetain();
    }
    v24 = (void *)MEMORY[0x22E2AF8EC](0xD000000000000010, v66);
    v25 = objc_msgSend(v23, sel_featureValueForName_, v24);

    if (!v25)
    {
      swift_unknownObjectRelease();
      goto LABEL_14;
    }
    v26 = objc_msgSend(v25, sel_dictionaryValue);
    type metadata accessor for NSNumber();
    v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v68 = 1;
    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v27 + 16))
    {
      v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v69);
      if ((v29 & 1) != 0)
        break;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v69);
    swift_unknownObjectRelease();

LABEL_14:
    ++v21;
    v22 += 2;
    if (v18 == v21)
      goto LABEL_30;
  }
  v30 = *(id *)(*(_QWORD *)(v27 + 56) + 8 * v28);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v69);
  result = objc_msgSend(v30, sel_doubleValue);
  if (v21 < v65)
  {
    v32 = v31;
    v33 = a3;
    v34 = v20;
    v35 = *(v22 - 1);
    v36 = *v22;
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 352);
    swift_bridgeObjectRetain();
    v63 = v37(v35, v36);
    v64 = v38;
    v40 = v39;
    v42 = v41;
    v20 = v34;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v34 + 16))
    {
      swift_bridgeObjectRetain();
      v43 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
      if ((v44 & 1) != 0)
      {
        v45 = *(double *)(*(_QWORD *)(v34 + 56) + 24 * v43 + 16);
        swift_bridgeObjectRelease();
        if (v45 >= v32)
        {
          swift_unknownObjectRelease();

          swift_bridgeObjectRelease();
LABEL_29:
          swift_bridgeObjectRelease();
          a3 = v61;
          a2 = v60;
          v18 = v59;
          goto LABEL_14;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v69[0] = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v63, v64, v40, v42, isUniquelyReferenced_nonNull_native, v32);
    v20 = v69[0];
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

id PoemAnalyticsUtilities.createPoemAnalyticsEvent(cooccurrenceId:confidence:conversations:photoIdToName:countPeople:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, unint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Class v42;
  Class v43;
  void *v44;
  Class v45;
  id v46;
  void *v47;
  void *v48;
  Class v49;
  void *v50;
  uint64_t v52;
  void *v53;
  Class isa;
  int v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[8];
  _QWORD v62[7];
  uint64_t v63[6];
  char v64;
  _QWORD *v65;

  v10 = v9;
  v58 = a7;
  v59 = (void *)a8;
  v56 = a3;
  v17 = type metadata accessor for Logger();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&isa - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a5 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60 = a1;
  v57 = a5;
  v22 = v21(a1, a2);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    Logger.init()();
    swift_bridgeObjectRetain();
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v63[0] = v37;
      *(_DWORD *)v36 = 136315138;
      swift_bridgeObjectRetain();
      v62[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, a2, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2282CC000, v34, v35, "PoemAnalyticsUtilities: Unable to find name for id %s while trying to send analytics event", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v37, -1, -1);
      MEMORY[0x22E2B117C](v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return 0;
  }
  v24 = v22;
  v25 = v23;
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10 + 8, (uint64_t)v62, &demangling cache variable for type metadata for PoemModelingParameters?);
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v62, (uint64_t)v63, &demangling cache variable for type metadata for PoemModelingParameters?);
  if (v64)
    v26 = 0.91;
  else
    v26 = *(double *)v63;
  if (*(_QWORD *)(a6 + 16))
  {
    swift_bridgeObjectRetain();
    v27 = v56;
    specialized __RawDictionaryStorage.find<A>(_:)(v56, a4);
    v55 = v28;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a6 + 16))
    {
      swift_bridgeObjectRetain();
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v27, a4);
      if ((v30 & 1) != 0)
      {
        v31 = (uint64_t *)(*(_QWORD *)(a6 + 56) + 16 * v29);
        v33 = *v31;
        v32 = v31[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v24 == v33 && v25 == v32)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        isa = Int._bridgeToObjectiveC()().super.super.isa;
        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v55 = 0;
    v27 = v56;
  }
  swift_bridgeObjectRelease();
  isa = 0;
LABEL_19:
  outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v10, (uint64_t)v61, &demangling cache variable for type metadata for PoemStatsDatabase?);
  v39 = outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v61, (uint64_t)&v65, &demangling cache variable for type metadata for PoemStatsDatabase?);
  if (v65)
    (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v65) + 0x78))(v39);
  v40 = v60;
  v41 = (void *)specialized PoemAnalyticsUtilities.createPoemAnalyticsFeatures(cooccurrenceId:conversations:photoIdToName:countPeople:)(v60, a2, v27, a4, v57, (uint64_t)v58, (uint64_t)v59);
  v58 = v41;
  v42 = Bool._bridgeToObjectiveC()().super.super.isa;
  v43 = Bool._bridgeToObjectiveC()().super.super.isa;
  v59 = (void *)MEMORY[0x22E2AFBEC](v26);
  v44 = (void *)MEMORY[0x22E2AFBEC](a9);
  v45 = Bool._bridgeToObjectiveC()().super.super.isa;
  v46 = objc_allocWithZone(MEMORY[0x24BE0C7E0]);
  v47 = (void *)MEMORY[0x22E2AF8EC](v27, a4);
  swift_bridgeObjectRelease();
  v48 = (void *)MEMORY[0x22E2AF8EC](v40, a2);
  swift_bridgeObjectRelease();
  v53 = v41;
  LODWORD(v52) = 0;
  v49 = isa;
  v50 = v59;
  v38 = objc_msgSend(v46, sel_initWithVisualIdentifier_prediction_named_shadowMatch_threshold_predictionConfidence_onboarding_nameMegadomeIdentifier_nameSource_features_accepted_rejected_, v47, v42, v43, isa, v59, v44, v45, v48, v52, v53, 0, 0);

  return v38;
}

uint64_t closure #1 in PoemAnalyticsUtilities.getNumberOfPronounMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  char v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;

  if ((*(uint64_t (**)(void))(*(_QWORD *)a4 + 352))() == a5 && v10 == a6)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return result;
  }
  v14 = 0;
  v15 = 0;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = 1 << *(_BYTE *)(v16 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v16 + 64;
  v20 = v18 & *(_QWORD *)(v16 + 64);
  v21 = (unint64_t)(v17 + 63) >> 6;
  while (v20)
  {
    v22 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v23 = v22 | (v14 << 6);
LABEL_12:
    v24 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v23);
    v25 = __OFADD__(v15, v24);
    v15 += v24;
    if (v25)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  v26 = v14 + 1;
  if (__OFADD__(v14, 1))
    goto LABEL_35;
  if (v26 >= v21)
  {
LABEL_32:
    v25 = __OFADD__(*a7, v15);
    v29 = *a7 + v15;
    if (!v25)
    {
      *a7 = v29;
      return result;
    }
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v19 + 8 * v26);
  ++v14;
  if (v27)
    goto LABEL_31;
  v14 = v26 + 1;
  if (v26 + 1 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 2;
  if (v26 + 2 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 3;
  if (v26 + 3 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 4;
  if (v26 + 4 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
  {
LABEL_31:
    v20 = (v27 - 1) & v27;
    v23 = __clz(__rbit64(v27)) + (v14 << 6);
    goto LABEL_12;
  }
  v28 = v26 + 5;
  if (v28 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_31;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v21)
      goto LABEL_32;
    v27 = *(_QWORD *)(v19 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_31;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t closure #1 in PoemAnalyticsUtilities.getNumberOfSenderMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  char v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;

  if ((*(uint64_t (**)(void))(*(_QWORD *)a4 + 352))() == a5 && v10 == a6)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return result;
  }
  v14 = 0;
  v15 = 0;
  v16 = *(_QWORD *)(a3 + 24);
  v17 = 1 << *(_BYTE *)(v16 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v16 + 64;
  v20 = v18 & *(_QWORD *)(v16 + 64);
  v21 = (unint64_t)(v17 + 63) >> 6;
  while (v20)
  {
    v22 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v23 = v22 | (v14 << 6);
LABEL_12:
    v24 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v23);
    v25 = __OFADD__(v15, v24);
    v15 += v24;
    if (v25)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  v26 = v14 + 1;
  if (__OFADD__(v14, 1))
    goto LABEL_35;
  if (v26 >= v21)
  {
LABEL_32:
    v25 = __OFADD__(*a7, v15);
    v29 = *a7 + v15;
    if (!v25)
    {
      *a7 = v29;
      return result;
    }
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v19 + 8 * v26);
  ++v14;
  if (v27)
    goto LABEL_31;
  v14 = v26 + 1;
  if (v26 + 1 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 2;
  if (v26 + 2 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 3;
  if (v26 + 3 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 4;
  if (v26 + 4 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
  {
LABEL_31:
    v20 = (v27 - 1) & v27;
    v23 = __clz(__rbit64(v27)) + (v14 << 6);
    goto LABEL_12;
  }
  v28 = v26 + 5;
  if (v28 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_31;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v21)
      goto LABEL_32;
    v27 = *(_QWORD *)(v19 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_31;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t closure #1 in PoemAnalyticsUtilities.getNumberOfReceiverMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  char v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;

  if ((*(uint64_t (**)(void))(*(_QWORD *)a4 + 352))() == a5 && v10 == a6)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return result;
  }
  v14 = 0;
  v15 = 0;
  v16 = *(_QWORD *)(a3 + 32);
  v17 = 1 << *(_BYTE *)(v16 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v16 + 64;
  v20 = v18 & *(_QWORD *)(v16 + 64);
  v21 = (unint64_t)(v17 + 63) >> 6;
  while (v20)
  {
    v22 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v23 = v22 | (v14 << 6);
LABEL_12:
    v24 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v23);
    v25 = __OFADD__(v15, v24);
    v15 += v24;
    if (v25)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  v26 = v14 + 1;
  if (__OFADD__(v14, 1))
    goto LABEL_35;
  if (v26 >= v21)
  {
LABEL_32:
    v25 = __OFADD__(*a7, v15);
    v29 = *a7 + v15;
    if (!v25)
    {
      *a7 = v29;
      return result;
    }
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v19 + 8 * v26);
  ++v14;
  if (v27)
    goto LABEL_31;
  v14 = v26 + 1;
  if (v26 + 1 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 2;
  if (v26 + 2 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 3;
  if (v26 + 3 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
    goto LABEL_31;
  v14 = v26 + 4;
  if (v26 + 4 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v14);
  if (v27)
  {
LABEL_31:
    v20 = (v27 - 1) & v27;
    v23 = __clz(__rbit64(v27)) + (v14 << 6);
    goto LABEL_12;
  }
  v28 = v26 + 5;
  if (v28 >= v21)
    goto LABEL_32;
  v27 = *(_QWORD *)(v19 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_31;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v21)
      goto LABEL_32;
    v27 = *(_QWORD *)(v19 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_31;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t closure #1 in PoemAnalyticsUtilities.getNumberOfTaggerMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  char v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;

  if ((*(uint64_t (**)(void))(*(_QWORD *)a4 + 352))() == a5 && v10 == a6)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return result;
  }
  v14 = 0;
  v15 = 0;
  v16 = *a3;
  v17 = 1 << *(_BYTE *)(*a3 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v20 = *(_QWORD *)(v16 + 64);
  v19 = v16 + 64;
  v21 = v18 & v20;
  v22 = (unint64_t)(v17 + 63) >> 6;
  while (v21)
  {
    v23 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    v24 = v23 | (v14 << 6);
LABEL_12:
    v25 = *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * v24);
    v26 = __OFADD__(v15, v25);
    v15 += v25;
    if (v26)
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  v27 = v14 + 1;
  if (__OFADD__(v14, 1))
    goto LABEL_35;
  if (v27 >= v22)
  {
LABEL_32:
    v26 = __OFADD__(*a7, v15);
    v30 = *a7 + v15;
    if (!v26)
    {
      *a7 = v30;
      return result;
    }
    goto LABEL_36;
  }
  v28 = *(_QWORD *)(v19 + 8 * v27);
  ++v14;
  if (v28)
    goto LABEL_31;
  v14 = v27 + 1;
  if (v27 + 1 >= v22)
    goto LABEL_32;
  v28 = *(_QWORD *)(v19 + 8 * v14);
  if (v28)
    goto LABEL_31;
  v14 = v27 + 2;
  if (v27 + 2 >= v22)
    goto LABEL_32;
  v28 = *(_QWORD *)(v19 + 8 * v14);
  if (v28)
    goto LABEL_31;
  v14 = v27 + 3;
  if (v27 + 3 >= v22)
    goto LABEL_32;
  v28 = *(_QWORD *)(v19 + 8 * v14);
  if (v28)
    goto LABEL_31;
  v14 = v27 + 4;
  if (v27 + 4 >= v22)
    goto LABEL_32;
  v28 = *(_QWORD *)(v19 + 8 * v14);
  if (v28)
  {
LABEL_31:
    v21 = (v28 - 1) & v28;
    v24 = __clz(__rbit64(v28)) + (v14 << 6);
    goto LABEL_12;
  }
  v29 = v27 + 5;
  if (v29 >= v22)
    goto LABEL_32;
  v28 = *(_QWORD *)(v19 + 8 * v29);
  if (v28)
  {
    v14 = v29;
    goto LABEL_31;
  }
  while (1)
  {
    v14 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v14 >= v22)
      goto LABEL_32;
    v28 = *(_QWORD *)(v19 + 8 * v14);
    ++v29;
    if (v28)
      goto LABEL_31;
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::Void __swiftcall PoemAnalyticsUtilities.clearPoemAnalyticsStream()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  _QWORD aBlock[6];

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_2282CC000, v4, v5, "PoemAnalyticsUtilities: Clearing the poem analytics stream", v6, 2u);
    MEMORY[0x22E2B117C](v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
  swift_unknownObjectRelease();
  v8 = objc_msgSend(v7, sel_DocumentUnderstanding);
  swift_unknownObjectRelease();
  v9 = objc_msgSend(v8, sel_PoemAnalytics);
  swift_unknownObjectRelease();
  v10 = objc_msgSend(v9, sel_pruner);
  aBlock[4] = protocol witness for static Equatable.== infix(_:_:) in conformance PDFNormalizationError;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  aBlock[3] = &block_descriptor_8;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v10, sel_deleteEventsPassingTest_, v11);

  _Block_release(v11);
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
    __break(1u);
}

uint64_t PoemAnalyticsUtilities.fetchPoemAnalyticsEvents()()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  void *v14;
  void *v15;
  uint64_t v16;

  v0 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
  swift_unknownObjectRelease();
  v1 = objc_msgSend(v0, sel_DocumentUnderstanding);
  swift_unknownObjectRelease();
  v2 = objc_msgSend(v1, sel_PoemAnalytics);
  swift_unknownObjectRelease();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  v4 = objc_msgSend(v2, sel_publisher);
  v15 = closure #1 in PoemAnalyticsUtilities.fetchPoemAnalyticsEvents();
  v16 = 0;
  v5 = MEMORY[0x24BDAC760];
  v11 = MEMORY[0x24BDAC760];
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>) -> ();
  v14 = &block_descriptor_3;
  v6 = _Block_copy(&v11);
  v15 = partial apply for closure #2 in static PoemStreamUtilities.fetchBufferEvents();
  v16 = v3;
  v11 = v5;
  v12 = 1107296256;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<BMTextUnderstandingPoem>) -> ();
  v14 = &block_descriptor_6_1;
  v7 = _Block_copy(&v11);
  swift_retain();
  swift_release();
  v8 = objc_msgSend(v4, sel_sinkWithCompletion_receiveInput_, v6, v7);

  _Block_release(v7);
  _Block_release(v6);

  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v9;
}

id closure #1 in PoemAnalyticsUtilities.fetchPoemAnalyticsEvents()(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id result;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint8_t *v15;
  _QWORD v16[2];

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, sel_error);
  if (result)
  {
    v7 = result;
    Logger.init()();
    v8 = v7;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v16[0] = v2;
      v12 = (uint8_t *)v11;
      v13 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v12 = 138412290;
      v8 = v8;
      v14 = _swift_stdlib_bridgeErrorToNSError();
      v16[1] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v13 = v14;

      _os_log_impl(&dword_2282CC000, v9, v10, "PoemAnalyticsUtilities: Error while reading poem analytics stream: %@", v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v13, -1, -1);
      v15 = v12;
      v2 = v16[0];
      MEMORY[0x22E2B117C](v15, -1, -1);
    }
    else
    {

      v9 = v8;
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

double PoemAnalyticsUtilities.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

void specialized PoemAnalyticsUtilities.addEventsToPoemAnalyticsStream(poemAnalyticsEvents:)(unint64_t a1)
{
  uint8_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  os_log_type_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t i;
  id v14;
  void *v15;
  _QWORD v16[2];

  v3 = (_QWORD *)type metadata accessor for Logger();
  v4 = *(v3 - 1);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  swift_bridgeObjectRetain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  v9 = a1 >> 62;
  if (!os_log_type_enabled((os_log_t)v7, v8))
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  v1 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v1 = 134217984;
  if (v9)
    goto LABEL_17;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    v16[1] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2282CC000, (os_log_t)v7, v8, "PoemAnalyticsUtilities: Sending %ld events to lighthouse", v1, 0xCu);
    MEMORY[0x22E2B117C](v1, -1, -1);

LABEL_6:
    (*(void (**)(char *, _QWORD *))(v4 + 8))(v6, v3);
    v11 = objc_msgSend((id)BiomeLibrary(), sel_TextUnderstanding);
    swift_unknownObjectRelease();
    v12 = objc_msgSend(v11, sel_DocumentUnderstanding);
    swift_unknownObjectRelease();
    v6 = (char *)objc_msgSend(v12, sel_PoemAnalytics);
    swift_unknownObjectRelease();
    v3 = objc_msgSend(v6, sel_source);
    if (v9)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7)
        goto LABEL_15;
    }
    else
    {
      v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v7)
        goto LABEL_15;
    }
    if (v7 >= 1)
      break;
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  for (i = 0; i != v7; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v14 = (id)MEMORY[0x22E2AFF34](i, a1);
    else
      v14 = *(id *)(a1 + 8 * i + 32);
    v15 = v14;
    objc_msgSend(v3, sel_sendEvent_, v14);

  }
LABEL_15:

  swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_2283D6E84()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t initializeWithCopy for PoemAnalyticsUtilities(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for PoemAnalyticsUtilities(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(_OWORD *)(a2 + 8);
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 8) = v7;
  return a1;
}

uint64_t assignWithTake for PoemAnalyticsUtilities(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoemAnalyticsUtilities(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 57))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PoemAnalyticsUtilities(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PoemAnalyticsUtilities()
{
  return &type metadata for PoemAnalyticsUtilities;
}

id partial apply for closure #1 in PoemAnalyticsUtilities.poemAnalyticsEventsFromModelOutput(inferenceKeys:modelOutputs:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, double a5)
{
  uint64_t v5;

  return PoemAnalyticsUtilities.createPoemAnalyticsEvent(cooccurrenceId:confidence:conversations:photoIdToName:countPeople:)(a3, a4, a1, a2, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(void **)(v5 + 40), *(_QWORD *)(v5 + 48), a5);
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t specialized PoemAnalyticsUtilities.getNumberOfImagesShared(photoId:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 280);
  v6 = swift_bridgeObjectRetain();
  v7 = v5(v6);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v12 = 0;
    v13 = 0;
    v14 = v10 + 64;
    v15 = 1 << *(_BYTE *)(v10 + 32);
    v16 = -1;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    v17 = v16 & *(_QWORD *)(v10 + 64);
    v18 = (unint64_t)(v15 + 63) >> 6;
    do
    {
      if (v17)
      {
        v19 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v20 = v19 | (v12 << 6);
      }
      else
      {
        v23 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_31;
        if (v23 >= v18)
        {
LABEL_28:
          swift_release();
          return v13;
        }
        v24 = *(_QWORD *)(v14 + 8 * v23);
        ++v12;
        if (!v24)
        {
          v12 = v23 + 1;
          if (v23 + 1 >= v18)
            goto LABEL_28;
          v24 = *(_QWORD *)(v14 + 8 * v12);
          if (!v24)
          {
            v12 = v23 + 2;
            if (v23 + 2 >= v18)
              goto LABEL_28;
            v24 = *(_QWORD *)(v14 + 8 * v12);
            if (!v24)
            {
              v12 = v23 + 3;
              if (v23 + 3 >= v18)
                goto LABEL_28;
              v24 = *(_QWORD *)(v14 + 8 * v12);
              if (!v24)
              {
                v12 = v23 + 4;
                if (v23 + 4 >= v18)
                  goto LABEL_28;
                v24 = *(_QWORD *)(v14 + 8 * v12);
                if (!v24)
                {
                  v25 = v23 + 5;
                  if (v25 >= v18)
                    goto LABEL_28;
                  v24 = *(_QWORD *)(v14 + 8 * v25);
                  if (!v24)
                  {
                    while (1)
                    {
                      v12 = v25 + 1;
                      if (__OFADD__(v25, 1))
                        goto LABEL_32;
                      if (v12 >= v18)
                        goto LABEL_28;
                      v24 = *(_QWORD *)(v14 + 8 * v12);
                      ++v25;
                      if (v24)
                        goto LABEL_26;
                    }
                  }
                  v12 = v25;
                }
              }
            }
          }
        }
LABEL_26:
        v17 = (v24 - 1) & v24;
        v20 = __clz(__rbit64(v24)) + (v12 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v20);
      v22 = __OFADD__(v13, v21);
      v13 += v21;
    }
    while (!v22);
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t specialized PoemAnalyticsUtilities.createPoemAnalyticsFeatures(cooccurrenceId:conversations:photoIdToName:countPeople:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  Class v27;
  Class v28;
  Class v29;
  Class v30;
  Class v31;
  Class v32;
  Class v33;
  Class v34;
  Class v35;
  id v36;

  (*(uint64_t (**)(void))(*(_QWORD *)a5 + 280))();
  result = swift_bridgeObjectRelease();
  if (__OFADD__(a6, a7))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 136))(result);
    v13 = swift_bridgeObjectRelease();
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 256);
    v15 = v14(v13);
    v16 = MEMORY[0x24BDAC7A8](v15);
    specialized Sequence.forEach(_:)(v16, (void (*)(uint64_t, uint64_t, _OWORD *))partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfTaggerMentions(entityId:conversations:));
    v17 = swift_bridgeObjectRelease();
    v18 = v14(v17);
    v19 = MEMORY[0x24BDAC7A8](v18);
    specialized Sequence.forEach(_:)(v19, (void (*)(uint64_t, uint64_t, _OWORD *))partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfSenderMentions(entityId:conversations:));
    v20 = swift_bridgeObjectRelease();
    v21 = v14(v20);
    v22 = MEMORY[0x24BDAC7A8](v21);
    specialized Sequence.forEach(_:)(v22, (void (*)(uint64_t, uint64_t, _OWORD *))partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfReceiverMentions(entityId:conversations:));
    v23 = swift_bridgeObjectRelease();
    v24 = v14(v23);
    v25 = MEMORY[0x24BDAC7A8](v24);
    specialized Sequence.forEach(_:)(v25, (void (*)(uint64_t, uint64_t, _OWORD *))partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfPronounMentions(entityId:conversations:));
    swift_bridgeObjectRelease();
    specialized PoemAnalyticsUtilities.getNumberOfImagesShared(photoId:conversations:)(a3, a4, a5);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v27 = Int._bridgeToObjectiveC()().super.super.isa;
    v28 = Int._bridgeToObjectiveC()().super.super.isa;
    v29 = Int._bridgeToObjectiveC()().super.super.isa;
    v30 = Int._bridgeToObjectiveC()().super.super.isa;
    v31 = Int._bridgeToObjectiveC()().super.super.isa;
    v32 = Int._bridgeToObjectiveC()().super.super.isa;
    v33 = Int._bridgeToObjectiveC()().super.super.isa;
    v34 = Int._bridgeToObjectiveC()().super.super.isa;
    v35 = Int._bridgeToObjectiveC()().super.super.isa;
    v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0C7E8]), sel_initWithNumOfFacesInMessages_numOfFacesOnDevice_numOfNamedFacesOnDevice_numOfConversationThreads_numOfNamedEntityMentions_numOfSenderMentions_numOfReceiverMentions_numOfPronounMentions_numOfImagesShared_numOfLinguisticMentions_, isa, v27, v28, v29, v30, v31, v32, v33, v34, v35);

    return (uint64_t)v36;
  }
  return result;
}

uint64_t partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfTaggerMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in PoemAnalyticsUtilities.getNumberOfTaggerMentions(entityId:conversations:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD **)(v3 + 40));
}

uint64_t partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfSenderMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in PoemAnalyticsUtilities.getNumberOfSenderMentions(entityId:conversations:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD **)(v3 + 40));
}

uint64_t partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfReceiverMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in PoemAnalyticsUtilities.getNumberOfReceiverMentions(entityId:conversations:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD **)(v3 + 40));
}

uint64_t partial apply for closure #1 in PoemAnalyticsUtilities.getNumberOfPronounMentions(entityId:conversations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in PoemAnalyticsUtilities.getNumberOfPronounMentions(entityId:conversations:)(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD **)(v3 + 40));
}

uint64_t PoemOnBoardHandler.init(client:)(uint64_t a1)
{
  type metadata accessor for PoemAggregationModelHandler();
  swift_allocObject();
  PoemAggregationModelHandler.init()();
  return a1;
}

uint64_t PoemOnBoardHandler.onBoard()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[16] = a1;
  v2[17] = a2;
  v3 = type metadata accessor for Logger();
  v2[18] = v3;
  v2[19] = *(_QWORD *)(v3 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PoemOnBoardHandler.onBoard()()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;

  v1 = *(_QWORD *)(v0 + 136);
  if (v1)
  {
    v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 200);
    v3 = swift_retain();
    v2(v3);
    v4 = outlined init with take of PoemModelingParameters?(v0 + 72, v0 + 16);
    if ((*(_BYTE *)(v0 + 64) & 1) != 0
      || (v5 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 128))(v4), v5, !v5))
    {
      Logger.init()();
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_2282CC000, v8, v9, "Trial assets not found on device, bailing out", v10, 2u);
        MEMORY[0x22E2B117C](v10, -1, -1);
      }
      v11 = *(_QWORD *)(v0 + 168);
    }
    else
    {
      if ((static LearnFromThisAppChecker.isLearningAllowed(application:)() & 1) != 0)
      {
        v6 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 184) = v6;
        *v6 = v0;
        v6[1] = PoemOnBoardHandler.onBoard();
        return PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
      }
      Logger.init()();
      v8 = Logger.logObject.getter();
      v20 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v8, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_2282CC000, v8, v20, "Not running Autonaming because learning from Messages is disabled", v21, 2u);
        MEMORY[0x22E2B117C](v21, -1, -1);
      }
      v11 = *(_QWORD *)(v0 + 176);
    }
    v12 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 152);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  else
  {
    Logger.init()();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, (os_log_type_t)v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_2282CC000, v14, (os_log_type_t)v15, "Unable to initialize PoemAggregationModelHandler", v16, 2u);
      MEMORY[0x22E2B117C](v16, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 144);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = specialized static PoemStreamUtilities.formatMessagesToConversations(messages:)(*(uint64_t **)(v0 + 192));
  *(_QWORD *)(v0 + 200) = v1;
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v2;
  *v2 = v0;
  v2[1] = PoemOnBoardHandler.onBoard();
  return PoemOnBoardHandler.populateExtractions(conversation:)(v1, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 136) + 336))(*(_QWORD *)(v0 + 200), 0);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PoemOnBoardHandler.onBoard()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t PoemOnBoardHandler.modelHandler.getter()
{
  return swift_retain();
}

uint64_t PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[18] = a1;
  v2[19] = a2;
  v3 = type metadata accessor for Logger();
  v2[20] = v3;
  v2[21] = *(_QWORD *)(v3 - 8);
  v2[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  Class isa;
  id v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = v0[18];
  v1 = v0[19];
  v3 = objc_allocWithZone(MEMORY[0x24BDC2460]);
  v4 = (void *)MEMORY[0x22E2AF8EC](0xD00000000000001FLL, 0x80000002284DFEC0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v3, sel_initWithQueryString_attributes_, v4, isa);
  v0[23] = v6;

  v7 = (_QWORD *)swift_task_alloc();
  v0[24] = v7;
  v7[2] = v2;
  v7[3] = v1;
  v7[4] = v6;
  v8 = (_QWORD *)swift_task_alloc();
  v0[25] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CSSearchableItem]);
  *v8 = v0;
  v8[1] = PoemOnBoardHandler.fetchMessagesIndexedBySpotlight();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  double v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = 1.0;
  if (v1)
  {
    (*(void (**)(void))(*(_QWORD *)v1 + 200))();
    outlined init with take of PoemModelingParameters?(v0 + 72, v0 + 16);
    if ((*(_BYTE *)(v0 + 64) & 1) == 0)
      v3 = *(double *)(v0 + 56);
  }
  Logger.init()();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v6 = 134217984;
    *(double *)(v0 + 136) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_2282CC000, v4, v5, "Poem will ignore messages older than %f years", v6, 0xCu);
    MEMORY[0x22E2B117C](v6, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 160);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v22 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v10 < 0)
    {
      __break(1u);
      goto LABEL_34;
    }
    v13 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v14 = (id)MEMORY[0x22E2AFF34](v13, v2);
      else
        v14 = *(id *)(v2 + 8 * v13 + 32);
      v15 = v14;
      ++v13;
      type metadata accessor for PoemMessage();
      swift_allocObject();
      PoemMessage.init(fromSearchableItem:withConversationIdAttribute:)(v15, 0xD000000000000028, 0x80000002284D9730);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v10 != v13);
    v16 = v22;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v16 = MEMORY[0x24BEE4AF8];
  }
  if (!(v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
      goto LABEL_19;
LABEL_31:
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4AF8];
LABEL_32:

    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
  }
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v17)
    goto LABEL_31;
LABEL_19:
  if (v17 >= 1)
  {
    v18 = 0;
    v19 = v3 * 31536000.0;
    do
    {
      if ((v16 & 0xC000000000000001) != 0)
      {
        v20 = MEMORY[0x22E2AFF34](v18, v16);
      }
      else
      {
        v20 = *(_QWORD *)(v16 + 8 * v18 + 32);
        swift_retain();
      }
      if (((*(uint64_t (**)(double))(*(_QWORD *)v20 + 640))(v19) & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_release();
      }
      ++v18;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    v21 = v11;
    goto LABEL_32;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t PoemOnBoardHandler.populateExtractions(conversation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v4 = type metadata accessor for Logger();
  v3[20] = v4;
  v3[21] = *(_QWORD *)(v4 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PoemOnBoardHandler.populateExtractions(conversation:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 152);
  if (!v1)
  {
    Logger.init()();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, (os_log_type_t)v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2282CC000, v11, (os_log_type_t)v12, "Unable to populate extractions because model handler wasn't initialized", v13, 2u);
      MEMORY[0x22E2B117C](v13, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    goto LABEL_9;
  }
  v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 200);
  v3 = swift_retain();
  v2(v3);
  v4 = outlined init with take of PoemModelingParameters?(v0 + 72, v0 + 16);
  if ((*(_BYTE *)(v0 + 64) & 1) != 0)
  {
    Logger.init()();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_2282CC000, v5, v6, "Unable to populate extractions because model configuration wasn't loaded", v7, 2u);
      MEMORY[0x22E2B117C](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 168);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    goto LABEL_9;
  }
  v18 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 48);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 136))(v4);
  v19 = 0;
  *(_QWORD *)(v0 + 216) = result;
  v20 = *(_BYTE *)(result + 32);
  *(_BYTE *)(v0 + 65) = v20;
  v21 = 1 << v20;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v23 = v22 & *(_QWORD *)(result + 64);
  while (1)
  {
    if (v23)
    {
      v24 = __clz(__rbit64(v23));
      v25 = (v23 - 1) & v23;
      v26 = v24 | (v19 << 6);
      result = *(_QWORD *)(v0 + 216);
    }
    else
    {
      v27 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      v28 = (unint64_t)((1 << *(_BYTE *)(v0 + 65)) + 63) >> 6;
      result = *(_QWORD *)(v0 + 216);
      if (v27 >= v28)
        goto LABEL_60;
      v29 = result + 64;
      v30 = *(_QWORD *)(result + 64 + 8 * v27);
      ++v19;
      if (!v30)
      {
        v19 = v27 + 1;
        if (v27 + 1 >= v28)
          goto LABEL_60;
        v30 = *(_QWORD *)(v29 + 8 * v19);
        if (!v30)
        {
          v19 = v27 + 2;
          if (v27 + 2 >= v28)
            goto LABEL_60;
          v30 = *(_QWORD *)(v29 + 8 * v19);
          if (!v30)
          {
            v19 = v27 + 3;
            if (v27 + 3 >= v28)
              goto LABEL_60;
            v30 = *(_QWORD *)(v29 + 8 * v19);
            if (!v30)
            {
              v31 = v27 + 4;
              if (v31 >= v28)
              {
LABEL_60:
                swift_release();
                swift_release();
LABEL_9:
                swift_task_dealloc();
                swift_task_dealloc();
                swift_task_dealloc();
                return (*(uint64_t (**)(void))(v0 + 8))();
              }
              v30 = *(_QWORD *)(v29 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  v19 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    break;
                  if (v19 >= v28)
                    goto LABEL_60;
                  v30 = *(_QWORD *)(v29 + 8 * v19);
                  ++v31;
                  if (v30)
                    goto LABEL_32;
                }
LABEL_64:
                __break(1u);
                return result;
              }
              v19 = v31;
            }
          }
        }
      }
LABEL_32:
      v25 = (v30 - 1) & v30;
      v26 = __clz(__rbit64(v30)) + (v19 << 6);
    }
    *(_QWORD *)(v0 + 224) = v25;
    *(_QWORD *)(v0 + 232) = v19;
    v32 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v26);
    *(_QWORD *)(v0 + 240) = v32;
    v33 = *(uint64_t (**)(void))(*(_QWORD *)v32 + 136);
    *(_QWORD *)(v0 + 248) = v33;
    swift_retain();
    v34 = v33();
    *(_QWORD *)(v0 + 256) = v34;
    if (v34 >> 62)
      break;
    result = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    *(_QWORD *)(v0 + 264) = result;
    if (result)
      goto LABEL_35;
LABEL_14:
    swift_bridgeObjectRelease();
    result = swift_release();
    v23 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 232);
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  *(_QWORD *)(v0 + 264) = result;
  if (!result)
    goto LABEL_14;
LABEL_35:
  v35 = 0;
  while (1)
  {
    v38 = *(_QWORD *)(v0 + 256);
    if ((v38 & 0xC000000000000001) != 0)
    {
      result = MEMORY[0x22E2AFF34](v35);
      v39 = result;
    }
    else
    {
      if (v35 >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_62;
      v39 = *(_QWORD *)(v38 + 8 * v35 + 32);
      result = swift_retain();
    }
    *(_QWORD *)(v0 + 272) = v39;
    *(_QWORD *)(v0 + 280) = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    if (((*(uint64_t (**)(void))(*(_QWORD *)v39 + 648))() & 1) != 0)
      break;
LABEL_38:
    result = swift_release();
    v35 = *(_QWORD *)(v0 + 280);
    if (v35 == *(_QWORD *)(v0 + 264))
      goto LABEL_14;
  }
  v40 = *(double *)(v0 + 208);
  v41 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 240))();
  v43 = specialized static PoemStreamUtilities.getMADExtractions(identifier:threshold:)(v41, v42, v40);
  swift_bridgeObjectRelease();
  if (v43 >> 62)
  {
    swift_bridgeObjectRetain();
    v67 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v67)
      goto LABEL_37;
  }
  else if (!*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_37;
  }
  Logger.init()();
  swift_bridgeObjectRetain_n();
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  v46 = os_log_type_enabled(v44, v45);
  v47 = *(_QWORD *)(v0 + 192);
  v48 = *(_QWORD *)(v0 + 160);
  v49 = *(_QWORD *)(v0 + 168);
  if (v46)
  {
    v71 = *(_QWORD *)(v0 + 168);
    v50 = swift_slowAlloc();
    v51 = swift_slowAlloc();
    v72 = v51;
    *(_DWORD *)v50 = 136315138;
    v70 = v47;
    v52 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for BMTextUnderstandingPoemBufferExtraction);
    v53 = swift_bridgeObjectRetain();
    v54 = MEMORY[0x22E2AFB2C](v53, v52);
    v69 = v48;
    v56 = v55;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v50 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_2282CC000, v44, v45, "Found MAD extractions: %s", (uint8_t *)v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v51, -1, -1);
    MEMORY[0x22E2B117C](v50, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v69);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  }
  v57 = *(uint64_t (**)(uint64_t))(v0 + 248);
  v58 = *(_QWORD *)(v0 + 200);
  v59 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v39 + 488))(v43);
  v60 = v57(v59);
  v61 = specialized static PoemStreamUtilities.fetchSurroundingMessages(messages:pivot:contextWindowSize:)(v60, v35, v58);
  *(_QWORD *)(v0 + 288) = v61;
  swift_bridgeObjectRelease();
  v62 = v61[2];
  *(_QWORD *)(v0 + 296) = v62;
  if (!v62)
  {
LABEL_36:
    v36 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease();
    specialized static PoemStreamUtilities.senderReceiverBufferStreamEvents(message:conversations:)(v36, v37);
    (*(void (**)(void))(*(_QWORD *)v36 + 664))();
LABEL_37:
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  v63 = 0;
  while (1)
  {
    *(_QWORD *)(v0 + 304) = v63;
    v64 = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 16 * v63 + 32);
    *(_QWORD *)(v0 + 312) = v64;
    v65 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 672);
    v66 = swift_retain();
    if ((v65(v66) & 1) == 0)
      break;
    swift_release();
    v63 = *(_QWORD *)(v0 + 304) + 1;
    if (v63 == *(_QWORD *)(v0 + 296))
      goto LABEL_36;
  }
  v68 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v68;
  *v68 = v0;
  v68[1] = PoemOnBoardHandler.populateExtractions(conversation:);
  return specialized PoemOnBoardHandler.allExtractions(message:conversation:)(v64, *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t type;
  uint8_t *buf;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  NSObject *log;
  os_log_t loga;
  uint64_t v52;
  uint64_t v53;

  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 312);
  v2 = specialized static PoemStreamUtilities.pronounBufferStreamEvents(message:conversations:)(v1, *(_QWORD *)(v0 + 136));
  specialized Array.append<A>(contentsOf:)(v2);
  (*(void (**)(_QWORD))(*(_QWORD *)v1 + 664))(*(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease();
  swift_release();
  v3 = MEMORY[0x24BEE4AD8] + 8;
  while (1)
  {
    v4 = *(_QWORD *)(v0 + 304) + 1;
    if (v4 == *(_QWORD *)(v0 + 296))
      break;
LABEL_44:
    *(_QWORD *)(v0 + 304) = v4;
    v38 = *(_QWORD *)(*(_QWORD *)(v0 + 288) + 16 * v4 + 32);
    *(_QWORD *)(v0 + 312) = v38;
    v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 672);
    v40 = swift_retain();
    if ((v39(v40) & 1) == 0)
    {
      v41 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 320) = v41;
      *v41 = v0;
      v41[1] = PoemOnBoardHandler.populateExtractions(conversation:);
      return specialized PoemOnBoardHandler.allExtractions(message:conversation:)(v38, *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    }
    swift_release();
  }
LABEL_3:
  v52 = v3;
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRelease();
  specialized static PoemStreamUtilities.senderReceiverBufferStreamEvents(message:conversations:)(v5, v6);
  (*(void (**)(void))(*(_QWORD *)v5 + 664))();
LABEL_4:
  swift_bridgeObjectRelease();
  while (1)
  {
    result = swift_release();
    v8 = *(_QWORD *)(v0 + 280);
    if (v8 == *(_QWORD *)(v0 + 264))
      break;
LABEL_29:
    v22 = *(_QWORD *)(v0 + 256);
    if ((v22 & 0xC000000000000001) != 0)
    {
      result = MEMORY[0x22E2AFF34](v8);
      v23 = result;
    }
    else
    {
      if (v8 >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_51;
      v23 = *(_QWORD *)(v22 + 8 * v8 + 32);
      result = swift_retain();
    }
    *(_QWORD *)(v0 + 272) = v23;
    *(_QWORD *)(v0 + 280) = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (((*(uint64_t (**)(void))(*(_QWORD *)v23 + 648))() & 1) != 0)
    {
      v24 = *(double *)(v0 + 208);
      v25 = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 240))();
      v27 = specialized static PoemStreamUtilities.getMADExtractions(identifier:threshold:)(v25, v26, v24);
      swift_bridgeObjectRelease();
      if (v27 >> 62)
      {
        swift_bridgeObjectRetain();
        v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v28)
          goto LABEL_4;
      }
      else if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_4;
      }
      Logger.init()();
      swift_bridgeObjectRetain_n();
      log = Logger.logObject.getter();
      type = static os_log_type_t.debug.getter();
      v29 = os_log_type_enabled(log, type);
      v46 = *(_QWORD *)(v0 + 168);
      v47 = *(_QWORD *)(v0 + 160);
      v48 = *(_QWORD *)(v0 + 192);
      if (v29)
      {
        buf = (uint8_t *)swift_slowAlloc();
        v43 = swift_slowAlloc();
        v53 = v43;
        *(_DWORD *)buf = 136315138;
        v30 = type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for BMTextUnderstandingPoemBufferExtraction);
        v31 = swift_bridgeObjectRetain();
        v42 = MEMORY[0x22E2AFB2C](v31, v30);
        v33 = v32;
        swift_bridgeObjectRelease();
        *(_QWORD *)(buf + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v33, &v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2282CC000, log, type, "Found MAD extractions: %s", buf, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22E2B117C](v43, -1, -1);
        MEMORY[0x22E2B117C](buf, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
      v49 = *(uint64_t (**)(uint64_t))(v0 + 248);
      loga = *(os_log_t *)(v0 + 200);
      v34 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v23 + 488))(v27);
      v35 = v49(v34);
      v36 = specialized static PoemStreamUtilities.fetchSurroundingMessages(messages:pivot:contextWindowSize:)(v35, v8, (uint64_t)loga);
      *(_QWORD *)(v0 + 288) = v36;
      swift_bridgeObjectRelease();
      v37 = v36[2];
      *(_QWORD *)(v0 + 296) = v37;
      v3 = v52;
      if (v37)
      {
        v4 = 0;
        goto LABEL_44;
      }
      goto LABEL_3;
    }
  }
  while (2)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    v10 = *(_QWORD *)(v0 + 224);
    v9 = *(_QWORD *)(v0 + 232);
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v12 = (v10 - 1) & v10;
      v13 = v11 | (v9 << 6);
      result = *(_QWORD *)(v0 + 216);
LABEL_24:
      *(_QWORD *)(v0 + 224) = v12;
      *(_QWORD *)(v0 + 232) = v9;
      v19 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v13);
      *(_QWORD *)(v0 + 240) = v19;
      v20 = *(uint64_t (**)(void))(*(_QWORD *)v19 + 136);
      *(_QWORD *)(v0 + 248) = v20;
      swift_retain();
      v21 = v20();
      *(_QWORD *)(v0 + 256) = v21;
      if (v21 >> 62)
      {
        result = _CocoaArrayWrapper.endIndex.getter();
        *(_QWORD *)(v0 + 264) = result;
        if (result)
        {
LABEL_28:
          v8 = 0;
          goto LABEL_29;
        }
      }
      else
      {
        result = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
        *(_QWORD *)(v0 + 264) = result;
        if (result)
          goto LABEL_28;
      }
      continue;
    }
    break;
  }
  v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 65)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 216);
  if (v14 >= v15)
    goto LABEL_46;
  v16 = result + 64;
  v17 = *(_QWORD *)(result + 64 + 8 * v14);
  ++v9;
  if (v17)
    goto LABEL_23;
  v9 = v14 + 1;
  if (v14 + 1 >= v15)
    goto LABEL_46;
  v17 = *(_QWORD *)(v16 + 8 * v9);
  if (v17)
    goto LABEL_23;
  v9 = v14 + 2;
  if (v14 + 2 >= v15)
    goto LABEL_46;
  v17 = *(_QWORD *)(v16 + 8 * v9);
  if (v17)
    goto LABEL_23;
  v9 = v14 + 3;
  if (v14 + 3 >= v15)
    goto LABEL_46;
  v17 = *(_QWORD *)(v16 + 8 * v9);
  if (v17)
    goto LABEL_23;
  v18 = v14 + 4;
  if (v18 >= v15)
  {
LABEL_46:
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v17 = *(_QWORD *)(v16 + 8 * v18);
  if (v17)
  {
    v9 = v18;
LABEL_23:
    v12 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v9 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v15)
      goto LABEL_46;
    v17 = *(_QWORD *)(v16 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t PoemOnBoardHandler.populateExtractions(conversation:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 328) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSearchableItem], Never>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  specialized PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)(a4, (uint64_t)partial apply for closure #1 in closure #1 in PoemOnBoardHandler.fetchMessagesIndexedBySpotlight(), v10);
  return swift_release();
}

uint64_t closure #1 in closure #1 in PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = type metadata accessor for Logger();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init()();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2282CC000, v6, v7, "Received a result in the completion handler, calling continuation.resume in PoemOnBoardHandler", v8, 2u);
    MEMORY[0x22E2B117C](v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = MEMORY[0x24BEE4AF8];
  if (a1)
    v9 = a1;
  v11[1] = v9;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSearchableItem], Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #1 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)()
{
  unint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0);
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for NSNumber(0, (unint64_t *)&lazy cache variable for type metadata for CSSearchableItem);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

void closure #2 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)(void *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];

  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v31 - v13;
  if (a1)
  {
    v15 = a1;
    Logger.init()();
    v16 = a1;
    v17 = a1;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v32 = v9;
      v22 = v21;
      v35[0] = v21;
      v33 = v8;
      *(_DWORD *)v20 = 136315138;
      v31[1] = a3;
      swift_getErrorValue();
      v23 = Error.localizedDescription.getter();
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2282CC000, v18, v19, "Received error %s in query completion handler in PoemOnBoardHandler", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v22, -1, -1);
      MEMORY[0x22E2B117C](v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    a2(0);

  }
  else
  {
    v25 = (_QWORD *)(a4 + 16);
    Logger.init()();
    swift_retain();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v32 = v9;
      v33 = v8;
      v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v28 = 134217984;
      swift_beginAccess();
      if (*v25 >> 62)
      {
        swift_bridgeObjectRetain();
        v29 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v29 = *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v35[0] = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_2282CC000, v26, v27, "Finished fetching %ld messages indexed by Spotlight in PoemOnBoardHandler", v28, 0xCu);
      MEMORY[0x22E2B117C](v28, -1, -1);

      v9 = v32;
      v8 = v33;
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_beginAccess();
    v30 = swift_bridgeObjectRetain();
    a2(v30);
    swift_bridgeObjectRelease();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void closure #1 in PoemOnBoardHandler.allExtractions(message:conversation:)(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_BYTE *);
  void (*v26)(_BYTE *, _QWORD);
  uint64_t *v27;
  uint64_t *v28;
  char isUniquelyReferenced_nonNull_native;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  NSNumber v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE v49[32];
  uint64_t v50;

  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = objc_msgSend(*a1, sel_text);
  if (v12)
  {
    v13 = v12;
    v48 = a3;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16 = v15;

    v17 = HIBYTE(v16) & 0xF;
    if ((v16 & 0x2000000000000000) == 0)
      v17 = v14 & 0xFFFFFFFFFFFFLL;
    if (v17)
    {
      v47 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 336))(v14, v16);
      v19 = v18;
      if (v18)
      {
        v20 = objc_msgSend(v11, sel_identifier);
        if (v20)
        {
          v21 = v20;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v46 = v3;
          v24 = v23;

          v25 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 224);
          swift_bridgeObjectRetain();
          v26 = (void (*)(_BYTE *, _QWORD))v25(v49);
          v28 = v27;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v50 = *v28;
          *v28 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, v24, v47, (uint64_t)v19, isUniquelyReferenced_nonNull_native);
          *v28 = v50;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v26(v49, 0);
        }
        LODWORD(v46) = objc_msgSend(v11, sel_type);
        v30 = (void *)MEMORY[0x22E2AFBEC](objc_msgSend(v11, sel_confidenceScore));
        v31 = objc_msgSend(v11, sel_contactIdentifier);
        if (v31)
        {
          v32 = v31;
          v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v35 = v34;

        }
        else
        {
          v33 = 0;
          v35 = 0;
        }
        v39 = objc_msgSend(v11, sel_role);
        objc_msgSend(v11, sel_isCoref);
        v40.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
        v41 = (void *)MEMORY[0x22E2AF8EC](v14, v16);
        swift_bridgeObjectRelease();
        v42 = (void *)MEMORY[0x22E2AF8EC](v47, v19);
        swift_bridgeObjectRelease();
        if (v35)
        {
          v43 = (void *)MEMORY[0x22E2AF8EC](v33, v35);
          swift_bridgeObjectRelease();
        }
        else
        {
          v43 = 0;
        }
        v44 = objc_allocWithZone(MEMORY[0x24BE0C7F8]);
        v19 = objc_msgSend(v44, sel_initWithType_text_identifier_confidenceScore_contactIdentifier_role_isCoref_, v46, v41, v42, v30, v43, v39, v40.super.super.isa);

      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      Logger.init()();
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_2282CC000, v36, v37, "DUPoemImplementation returned an empty span as name", v38, 2u);
        MEMORY[0x22E2B117C](v38, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v19 = 0;
    }
    a3 = v48;
  }
  else
  {
    v19 = 0;
  }
  *a3 = v19;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v13 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22E2AFF34](i - 4, a1) : *(id *)(a1 + 8 * i);
      v7 = v6;
      v8 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v12 = v6;
      closure #1 in PoemOnBoardHandler.allExtractions(message:conversation:)(&v12, a2, &v11);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v11)
      {
        MEMORY[0x22E2AFAFC]();
        if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

_QWORD *initializeBufferWithCopyOfBuffer for PoemOnBoardHandler(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for PoemOnBoardHandler(id *a1)
{

  return swift_release();
}

uint64_t assignWithCopy for PoemOnBoardHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for PoemOnBoardHandler(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PoemOnBoardHandler(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PoemOnBoardHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PoemOnBoardHandler()
{
  return &type metadata for PoemOnBoardHandler;
}

uint64_t specialized PoemOnBoardHandler.allExtractions(message:conversation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  v4 = type metadata accessor for Logger();
  v3[14] = v4;
  v3[15] = *(_QWORD *)(v4 - 8);
  v3[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized PoemOnBoardHandler.allExtractions(message:conversation:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  objc_class *v3;
  char *v4;
  id v5;
  id v6;
  objc_class *v7;
  char *v8;
  _QWORD *v9;
  id v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(id);

  v1 = *(void **)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = (objc_class *)type metadata accessor for DURequestContentType();
  v4 = (char *)objc_allocWithZone(v3);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 512;
  *(_QWORD *)(v0 + 40) = v4;
  *(_QWORD *)(v0 + 48) = v3;
  v5 = v1;
  v6 = objc_msgSendSuper2((objc_super *)(v0 + 40), sel_init);
  v7 = (objc_class *)type metadata accessor for DURequest();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_client] = v5;
  *(_QWORD *)&v8[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_contentType] = v6;
  *(_QWORD *)&v8[OBJC_IVAR____TtC21DocumentUnderstanding9DURequest_strategies] = 0;
  *(_QWORD *)(v0 + 56) = v8;
  *(_QWORD *)(v0 + 64) = v7;
  v9 = objc_msgSendSuper2((objc_super *)(v0 + 56), sel_init);
  *(_QWORD *)(v0 + 136) = v9;
  v10 = specialized static PoemStreamUtilities.getDUDocumentForPoemMessage(message:)(v2);
  *(_QWORD *)(v0 + 144) = v10;
  v11 = *(int **)((*MEMORY[0x24BEE4EA0] & *v9) + 0x70);
  v14 = (uint64_t (*)(id))((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v12;
  *v12 = v0;
  v12[1] = specialized PoemOnBoardHandler.allExtractions(message:conversation:);
  return v14(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 160)) + 0x128))();
  if (v1)
  {
    v2 = v1;
    v3 = *(void **)(v0 + 160);
    v5 = *(void **)(v0 + 136);
    v4 = *(void **)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 96);
    swift_retain();
    v7 = specialized Sequence.compactMap<A>(_:)(v2, v6);
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(void **)(v0 + 160);
    v9 = *(void **)(v0 + 136);

    v7 = MEMORY[0x24BEE4AF8];
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void **)(v0 + 168);
  Logger.init()();
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 128);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v20 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue();
    v9 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_2282CC000, v4, v5, "Failed to retrieve a response due to error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22E2B117C](v8, -1, -1);
    MEMORY[0x22E2B117C](v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  }
  else
  {
    v11 = *(void **)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 112);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  v15 = *(void **)(v0 + 136);

  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x24BEE4AF8]);
}

uint64_t specialized PoemOnBoardHandler.allExtractions(message:conversation:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_2283DA0F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSearchableItem], Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[CSSearchableItem], Never>);
  return closure #1 in closure #1 in PoemOnBoardHandler.fetchMessagesIndexedBySpotlight()(a1);
}

uint64_t specialized PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD *v17;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = MEMORY[0x24BEE4AF8];
  v16 = partial apply for closure #1 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:);
  v17 = (_QWORD *)v6;
  v7 = MEMORY[0x24BDAC760];
  v12 = MEMORY[0x24BDAC760];
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed (@guaranteed [CSSearchableItem]) -> ();
  v15 = &block_descriptor_9;
  v8 = _Block_copy(&v12);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setFoundItemsHandler_, v8);
  _Block_release(v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = v6;
  v16 = partial apply for closure #2 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:);
  v17 = v9;
  v12 = v7;
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v15 = &block_descriptor_14;
  v10 = _Block_copy(&v12);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_setCompletionHandler_, v10);
  _Block_release(v10);
  objc_msgSend(a1, sel_start);
  return swift_release();
}

uint64_t sub_2283DA31C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)()
{
  return closure #1 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_2283DA360()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)(void *a1)
{
  uint64_t v1;

  closure #2 in PoemOnBoardHandler.runMessagesSearchQueryWithContinuation(messageQuery:completion:)(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *a1 = MEMORY[0x24BEE4AF8];
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  UnknownStorage.init()();
  v3 = (char *)a1 + *(int *)(v2 + 24);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
}

uint64_t type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_StructuredEntityResponse;
  if (!type metadata singleton initialization cache for DocumentUnderstanding_ClientInterface_StructuredEntityResponse)
    return swift_getSingletonMetadata();
  return result;
}

BOOL DocumentUnderstanding_ClientInterface_StructuredEntityResponse.hasResponseDebugInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v0 + *(int *)(v4 + 24), (uint64_t)v3);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  return v6;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.responseDebugInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + *(int *)(v6 + 24), (uint64_t)v5);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, a1);
  UnknownStorage.init()();
  v8 = (_QWORD *)(a1 + *(int *)(v7 + 20));
  *v8 = 0;
  v8[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.responseDebugInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v3, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(a1, v3);
  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.structuredEntities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.structuredEntities.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DocumentUnderstanding_ClientInterface_StructuredEntityResponse.structuredEntities.modify())()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

uint64_t key path getter for DocumentUnderstanding_ClientInterface_StructuredEntityResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_StructuredEntityResponse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v7 + 24), (uint64_t)v6);
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) != 1)
    return outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v6, a2);
  UnknownStorage.init()();
  v9 = (_QWORD *)(a2 + *(int *)(v8 + 20));
  *v9 = 0;
  v9[1] = 0;
  return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v6, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
}

uint64_t key path setter for DocumentUnderstanding_ClientInterface_StructuredEntityResponse.responseDebugInfo : DocumentUnderstanding_ClientInterface_StructuredEntityResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo(a1, (uint64_t)v7);
  v8 = a2 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v8, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v7, v8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

void (*DocumentUnderstanding_ClientInterface_StructuredEntityResponse.responseDebugInfo.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v5 = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v3[1] = v5;
  v6 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v3[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[4] = malloc(v8);
  v9 = (char *)malloc(v8);
  v3[5] = v9;
  v10 = *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse() + 24);
  *((_DWORD *)v3 + 12) = v10;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(v1 + v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    UnknownStorage.init()();
    v11 = &v9[*(int *)(v6 + 20)];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v5, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  }
  else
  {
    outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v5, (uint64_t)v9);
  }
  return DocumentUnderstanding_ClientInterface_TopicDetectionResponse.responseDebugInfo.modify;
}

Swift::Void __swiftcall DocumentUnderstanding_ClientInterface_StructuredEntityResponse.clearResponseDebugInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse() + 24);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?(v1, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v2 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.unknownFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse() + 20);
  v4 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*DocumentUnderstanding_ClientInterface_StructuredEntityResponse.unknownFields.modify())(_QWORD)
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
}

void *DocumentUnderstanding_ClientInterface_StructuredEntityResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static DocumentUnderstanding_ClientInterface_StructuredEntityResponse.protoMessageName;
}

unint64_t static DocumentUnderstanding_ClientInterface_StructuredEntityResponse.protoMessageName.getter()
{
  return 0xD000000000000040;
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v0 = type metadata accessor for _NameMap();
  return __swift_project_value_buffer(v0, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityResponse._protobuf_nameMap);
}

uint64_t static DocumentUnderstanding_ClientInterface_StructuredEntityResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        closure #2 in DocumentUnderstanding_ClientInterface_StructuredEntityResponse.decodeMessage<A>(decoder:)();
      }
      else if (result == 1)
      {
        type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0);
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #2 in DocumentUnderstanding_ClientInterface_StructuredEntityResponse.decodeMessage<A>(decoder:)()
{
  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t DocumentUnderstanding_ClientInterface_StructuredEntityResponse.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity(0),
        lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity, type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntity, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntity), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    result = closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntityResponse.traverse<A>(visitor:)(v0);
    if (!v1)
    {
      type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t closure #1 in DocumentUnderstanding_ClientInterface_StructuredEntityResponse.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v4, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_DebugInfo and conformance DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_DebugInfo);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo((uint64_t)v8);
}

Swift::Int DocumentUnderstanding_ClientInterface_StructuredEntityResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return 0xD000000000000040;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntityResponse.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return DocumentUnderstanding_ClientInterface_StructuredEntityResponse.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static DocumentUnderstanding_ClientInterface_StructuredEntityResponse._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
  return Message.hash(into:)();
}

uint64_t specialized static DocumentUnderstanding_ClientInterface_StructuredEntityResponse.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  char v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = type metadata accessor for UnknownStorage();
  v50 = *(_QWORD *)(v48 - 8);
  v4 = MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v45 - v6;
  v8 = type metadata accessor for DocumentUnderstanding_ClientInterface_DebugInfo();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v45 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v45 - v21;
  v23 = a1;
  v24 = *a1;
  v25 = a2;
  if ((specialized static Array<A>.== infix(_:_:)(v24, *a2) & 1) == 0)
    goto LABEL_8;
  v45 = v10;
  v46 = v17;
  v47 = v7;
  v26 = type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse();
  v27 = v23;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v23 + *(int *)(v26 + 24), (uint64_t)v22);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)a2 + *(int *)(v26 + 24), (uint64_t)v20);
  v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v22, (uint64_t)v13);
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v20, v28);
  v29 = v52;
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v31 = v25;
  if (v30((uint64_t)v13, 1, v52) == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    if (v30(v28, 1, v29) == 1)
    {
      outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v32 = v47;
LABEL_11:
      v39 = (uint64_t)v27 + *(int *)(v26 + 20);
      v40 = v50;
      v41 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v42 = v48;
      v41(v32, v39, v48);
      v43 = v49;
      v41(v49, (uint64_t)v31 + *(int *)(v26 + 20), v42);
      lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v44(v43, v42);
      v44(v32, v42);
      return v35 & 1;
    }
    goto LABEL_7;
  }
  v33 = (uint64_t)v46;
  outlined init with copy of DocumentUnderstanding_ClientInterface_DebugInfo?((uint64_t)v13, (uint64_t)v46);
  v34 = v30(v28, 1, v29);
  v32 = v47;
  if (v34 == 1)
  {
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
    outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
LABEL_7:
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for (DocumentUnderstanding_ClientInterface_DebugInfo?, DocumentUnderstanding_ClientInterface_DebugInfo?));
    goto LABEL_8;
  }
  v37 = (uint64_t)v45;
  outlined init with take of DocumentUnderstanding_ClientInterface_DebugInfo(v28, (uint64_t)v45);
  v38 = static DocumentUnderstanding_ClientInterface_DebugInfo.== infix(_:_:)(v33, v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v37);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v20, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v22, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  outlined destroy of DocumentUnderstanding_ClientInterface_DebugInfo(v33);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v13, &demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
  if ((v38 & 1) != 0)
    goto LABEL_11;
LABEL_8:
  v35 = 0;
  return v35 & 1;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
}

uint64_t base witness table accessor for Message in DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
}

uint64_t base witness table accessor for Hashable in DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
}

uint64_t base witness table accessor for Equatable in DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return lazy protocol witness table accessor for type DocumentUnderstanding_ClientInterface_StructuredEntity and conformance DocumentUnderstanding_ClientInterface_StructuredEntity(&lazy protocol witness table cache variable for type DocumentUnderstanding_ClientInterface_StructuredEntityResponse and conformance DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t (*)(uint64_t))type metadata accessor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse, (uint64_t)&protocol conformance descriptor for DocumentUnderstanding_ClientInterface_StructuredEntityResponse);
}

uint64_t getEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2283DB6E4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentUnderstanding_ClientInterface_StructuredEntityResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_2283DB794(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DocumentUnderstanding_ClientInterface_DebugInfo?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t DUPoemSpecification.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t static DUPoemSpecification.phaseID.getter()
{
  return 0x6675625F6D656F70;
}

uint64_t DUPoemSpecification.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DUPoemSpecification.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DUPoemSpecification.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static DUProcessingPhaseSpecification.phaseID.getter in conformance DUPoemSpecification()
{
  return 0x6675625F6D656F70;
}

uint64_t DUPoemSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v2[3] = a1;
  v4 = type metadata accessor for Logger();
  v2[4] = v4;
  v2[5] = *(_QWORD *)(v4 - 8);
  v2[6] = swift_task_alloc();
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:)
                                       + async function pointer to specialized DUProcessingPhaseSpecification.outputFromRequest(request:));
  v5 = (_QWORD *)swift_task_alloc();
  v2[7] = v5;
  *v5 = v2;
  v5[1] = DUPoemSpecification.attachResultsToResponse(response:processingRequest:);
  return v7(a2);
}

uint64_t DUPoemSpecification.attachResultsToResponse(response:processingRequest:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DUPoemSpecification.attachResultsToResponse(response:processingRequest:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (*(_QWORD *)(v0 + 64))
  {
    Logger.init()();
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.debug.getter();
    v3 = os_log_type_enabled(v1, v2);
    v5 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 32);
    if (v3)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v10 = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6675625F6D656F70, 0xEB00000000726566, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_2282CC000, v1, v2, "POEM phase ID: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22E2B117C](v8, -1, -1);
      MEMORY[0x22E2B117C](v7, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 24)) + 0x130))(*(_QWORD *)(v0 + 64));
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id DUPoemSpecification.associatedRequestTypes.getter()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 512;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t protocol witness for TopLevelSpecificationProtocol.attachResultsToResponse(response:processingRequest:) in conformance DUPoemSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #2 in DUFoundInEventMultilingualBERTImplementation.loadModelHeadBundle();
  return DUPoemSpecification.attachResultsToResponse(response:processingRequest:)(a1, a2);
}

id protocol witness for TopLevelSpecificationProtocol.associatedRequestTypes.getter in conformance DUPoemSpecification()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for DURequestContentType();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding20DURequestContentType_rawValue] = 512;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for DUPoemSpecification()
{
  return objc_opt_self();
}

Swift::tuple_String_String __swiftcall String.splitBytePair()()
{
  unint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::tuple_String_String result;

  v0 = lazy protocol witness table accessor for type String and conformance String();
  v1 = (_QWORD *)MEMORY[0x22E2AFE50](32, 0xE100000000000000, 1, 1, MEMORY[0x24BEE0D00], v0);
  if (!v1[2])
  {
    __break(1u);
    goto LABEL_5;
  }
  v5 = v1;
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x22E2AF988](v6, v7, v8, v9);
  v12 = v11;
  v1 = (_QWORD *)swift_bridgeObjectRelease();
  if (v5[2] < 2uLL)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v13 = v5[8];
  v14 = v5[9];
  v15 = v5[10];
  v16 = v5[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = MEMORY[0x22E2AF988](v13, v14, v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)v10;
  v2 = v12;
  v3 = v17;
  v4 = v19;
LABEL_6:
  result._1._object = v4;
  result._1._countAndFlagsBits = v3;
  result._0._object = v2;
  result._0._countAndFlagsBits = (uint64_t)v1;
  return result;
}

uint64_t String.ranges(of:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v34 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v12 = a4 & 0xFFFFFFFFFFFFLL;
  v13 = 7;
  if (((a5 >> 60) & ((a4 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v37 = a4;
  v38 = a5;
  v14 = v13 | (v12 << 16);
  v29 = 4 * v12;
  v30 = a1;
  v35 = a1;
  v36 = a2;
  v31 = a2;
  v15 = type metadata accessor for Locale();
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v33 = v15;
  v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v32(v11, 1, 1, v15);
  while (1)
  {
    lazy protocol witness table accessor for type String and conformance String();
    v17 = StringProtocol.range<A>(of:options:range:locale:)();
    v19 = v18;
    v21 = v20;
    outlined destroy of Locale?((uint64_t)v11);
    if ((v21 & 1) != 0)
      return (uint64_t)v16;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      v16 = (_QWORD *)result;
    }
    v24 = v16[2];
    v23 = v16[3];
    if (v24 >= v23 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v16);
      v16 = (_QWORD *)result;
    }
    v16[2] = v24 + 1;
    v25 = &v16[2 * v24];
    v25[4] = v17;
    v25[5] = v19;
    v26 = v19 >> 14;
    if (v19 >> 14 <= v17 >> 14)
    {
      result = String.index(_:offsetBy:limitedBy:)();
      if ((v27 & 1) != 0)
        v28 = v14;
      else
        v28 = result;
      v26 = v28 >> 14;
    }
    v37 = a4;
    v38 = a5;
    v35 = v30;
    v36 = v31;
    if (v29 < v26)
      break;
    v32(v11, 1, 1, v33);
  }
  __break(1u);
  return result;
}

uint64_t RoBERTaTokenizer.__allocating_init()()
{
  swift_allocObject();
  return RoBERTaTokenizer.init()();
}

uint64_t RoBERTaTokenizer.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t ObjCClassFromMetadata;
  id v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  NSObject *v29;
  id v30;
  void *v31;
  id v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  char *v40;
  os_log_type_t v41;
  uint8_t *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v50;

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v50 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v48 = (char *)&v47 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v47 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v47 - v11;
  *(_OWORD *)(v1 + 32) = xmmword_2284C71B0;
  *(_QWORD *)(v1 + 48) = 4092732;
  *(_QWORD *)(v1 + 56) = 0xE300000000000000;
  *(_QWORD *)(v1 + 64) = 1047736124;
  *(_QWORD *)(v1 + 72) = 0xE400000000000000;
  *(_QWORD *)(v1 + 80) = 0x3E6461703CLL;
  *(_QWORD *)(v1 + 88) = 0xE500000000000000;
  *(_QWORD *)(v1 + 96) = 1;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v14 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v15 = (void *)MEMORY[0x22E2AF8EC](0x2D61747265626F72, 0xEE0073656772656DLL);
  v16 = (void *)MEMORY[0x22E2AF8EC](1701409396, 0xE400000000000000);
  v17 = objc_msgSend(v14, sel_pathForResource_ofType_, v15, v16);

  if (!v17)
  {
    Logger.init()();
    v29 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v33))
    {
      v34 = v2;
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_2282CC000, v29, v33, "Could not find file roberta-merges.trie", v35, 2u);
      v36 = v35;
      v2 = v34;
      MEMORY[0x22E2B117C](v36, -1, -1);
    }
    v5 = v12;
    v37 = v50;
    goto LABEL_20;
  }
  v47 = v2;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  v21 = (void *)MEMORY[0x22E2AF8EC](0x2D61747265626F72, 0xED00006261636F76);
  v22 = (void *)MEMORY[0x22E2AF8EC](1701409396, 0xE400000000000000);
  v49 = v14;
  v23 = objc_msgSend(v14, sel_pathForResource_ofType_, v21, v22);

  if (!v23)
  {
    swift_bridgeObjectRelease();
    Logger.init()();
    v29 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_2282CC000, v29, v38, "Could not find file roberta-vocab.trie", v39, 2u);
      MEMORY[0x22E2B117C](v39, -1, -1);
    }
    v5 = v10;
    goto LABEL_19;
  }
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26 = v25;

  v27 = objc_allocWithZone(MEMORY[0x24BEB6DB0]);
  v28 = (void *)MEMORY[0x22E2AF8EC](v18, v20);
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v27, sel_initWithPath_, v28);

  if (!v29)
  {
    swift_bridgeObjectRelease();
    v40 = v48;
    Logger.init()();
    v29 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_2282CC000, v29, v41, "Could not load burst trie from roberta-merges.trie", v42, 2u);
      MEMORY[0x22E2B117C](v42, -1, -1);
    }
    v5 = v40;
    goto LABEL_19;
  }
  v30 = objc_allocWithZone(MEMORY[0x24BEB6DB0]);
  v31 = (void *)MEMORY[0x22E2AF8EC](v24, v26);
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v30, sel_initWithPath_, v31);

  if (!v32)
  {
    Logger.init()();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_2282CC000, v43, v44, "Could not load burst trie from roberta-vocab.trie", v45, 2u);
      MEMORY[0x22E2B117C](v45, -1, -1);
    }

LABEL_19:
    v2 = v47;
    v14 = v49;
    v37 = v50;
LABEL_20:

    (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for RoBERTaTokenizer();
    swift_deallocPartialClassInstance();
    return 0;
  }

  *(_QWORD *)(v1 + 16) = v29;
  *(_QWORD *)(v1 + 24) = v32;
  return v1;
}

uint64_t type metadata accessor for RoBERTaTokenizer()
{
  return objc_opt_self();
}

uint64_t RoBERTaTokenizer.byteEncode(text:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *rawValue;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v4 = type metadata accessor for CharacterSet();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a1;
  v47 = a2;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v8 = StringProtocol.trimmingCharacters(in:)();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = String.ranges(of:options:)(0xD00000000000004ALL, 0x80000002284DFFC0, 1024, v8, v10);
  swift_bridgeObjectRetain();
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg5080_s21DocumentUnderstanding16RoBERTaTokenizerC10byteEncode4textSaySSGSS_tFSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_nTm(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v46 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v14 = 0;
    v15 = v46;
    v40 = v12;
    v41 = v12 + 32;
    v42 = v13;
    do
    {
      v16 = (uint64_t *)(v41 + 16 * v14);
      v17 = *v16;
      v18 = v16[1];
      swift_bridgeObjectRetain();
      v19 = specialized _copyCollectionToContiguousArray<A>(_:)(v17, v18);
      v20 = *(_QWORD *)(v19 + 16);
      v44 = v15;
      if (v20)
      {
        v43 = v18;
        v21 = one-time initialization token for byteEncoder;
        swift_retain();
        if (v21 != -1)
          swift_once();
        v22 = 0;
        rawValue = byteEncoder._rawValue;
        v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
        do
        {
          if (rawValue[2])
          {
            v26 = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(v19 + v22 + 32));
            if ((v27 & 1) != 0)
            {
              v28 = (uint64_t *)(rawValue[7] + 16 * v26);
              v30 = *v28;
              v29 = v28[1];
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
              v32 = v24[2];
              v31 = v24[3];
              if (v32 >= v31 >> 1)
                v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v24);
              v24[2] = v32 + 1;
              v25 = &v24[2 * v32];
              v25[4] = v30;
              v25[5] = v29;
            }
          }
          ++v22;
        }
        while (v20 != v22);
        swift_release_n();
      }
      else
      {
        swift_release();
        v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v45 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
      v33 = BidirectionalCollection<>.joined(separator:)();
      v35 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v44;
      v46 = v44;
      v37 = *(_QWORD *)(v44 + 16);
      v36 = *(_QWORD *)(v44 + 24);
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        v15 = v46;
      }
      ++v14;
      *(_QWORD *)(v15 + 16) = v37 + 1;
      v38 = v15 + 16 * v37;
      *(_QWORD *)(v38 + 32) = v33;
      *(_QWORD *)(v38 + 40) = v35;
    }
    while (v14 != v42);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v15;
}

uint64_t RoBERTaTokenizer.byteEncodeWithUTF8Spans(text:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = String.ranges(of:options:)(0xD00000000000004ALL, 0x80000002284DFFC0, 1024, a1, a2);
  swift_bridgeObjectRetain();
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg5080_s21DocumentUnderstanding16RoBERTaTokenizerC10byteEncode4textSaySSGSS_tFSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_nTm(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = String.ranges(of:options:)(0xD00000000000004ALL, 0x80000002284DFFC0, 1024, a1, a2);
  v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySnySiGAGySaySSGSaySnySS5IndexVGGGG_SS5token_Si5startSi6wordIdts5NeverOTg5012_sSiSSSnySS5f16VGSSS2iIgygyodd_m37_SS_ACttSS5token_Si5startSi6wordIdts5K11OIegnrzr_TRSiSSALSSS2iIgygyodd_Tf1cn_nTf4ng_n(0, *(_QWORD *)(v5 + 16), v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #2 in RoBERTaTokenizer.byteEncodeWithUTF8Spans(text:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t closure #2 in RoBERTaTokenizer.byteEncodeWithUTF8Spans(text:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *rawValue;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;

  swift_bridgeObjectRetain();
  v10 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = one-time initialization token for byteEncoder;
    swift_retain();
    if (v12 != -1)
      swift_once();
    v13 = 0;
    rawValue = byteEncoder._rawValue;
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if (rawValue[2])
      {
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(*(_BYTE *)(v10 + v13 + 32));
        if ((v18 & 1) != 0)
        {
          v19 = (uint64_t *)(rawValue[7] + 16 * v17);
          v20 = *v19;
          v21 = v19[1];
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
          v23 = v15[2];
          v22 = v15[3];
          if (v23 >= v22 >> 1)
            v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v15);
          v15[2] = v23 + 1;
          v16 = &v15[2 * v23];
          v16[4] = v20;
          v16[5] = v21;
        }
      }
      ++v13;
    }
    while (v11 != v13);
    swift_release_n();
  }
  else
  {
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
  v24 = BidirectionalCollection<>.joined(separator:)();
  result = swift_bridgeObjectRelease();
  v26 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v26) = 1;
  if ((a4 & 0xC) == 4 << v26)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a4, a6, a7);
    a4 = result;
    if ((a7 & 0x1000000000000000) == 0)
      return v24;
  }
  else if ((a7 & 0x1000000000000000) == 0)
  {
    return v24;
  }
  v27 = a6 & 0xFFFFFFFFFFFFLL;
  if ((a7 & 0x2000000000000000) != 0)
    v27 = HIBYTE(a7) & 0xF;
  if (v27 >= a4 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)();
    return v24;
  }
  __break(1u);
  return result;
}

Swift::String __swiftcall RoBERTaTokenizer.bpe(token:)(Swift::String token)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String_optional *v8;
  _QWORD *v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void **p_object;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  BOOL v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  Swift::String result;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;

  v2 = v1;
  object = token._object;
  countAndFlagsBits = token._countAndFlagsBits;
  v5 = String.count.getter();
  swift_bridgeObjectRetain();
  if (v5 < 2)
    goto LABEL_81;
  v6 = String.count.getter();
  if (v6)
  {
    v7 = v6;
    v8 = (Swift::String_optional *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v6, 0);
    swift_bridgeObjectRetain();
    v9 = specialized Sequence._copySequenceContents(initializing:)(&v88, v8 + 2, v7, countAndFlagsBits, (unint64_t)object);
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    if (v9 != (_QWORD *)v7)
      goto LABEL_97;
    swift_bridgeObjectRelease();
    v12 = v8[1].value._countAndFlagsBits;
    if (v12)
      goto LABEL_5;
LABEL_11:
    swift_release();
    v13 = MEMORY[0x24BEE4AF8];
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  v8 = (Swift::String_optional *)MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (!v12)
    goto LABEL_11;
LABEL_5:
  v88 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  v13 = v88;
  p_object = &v8[2].value._object;
  do
  {
    v16 = (uint64_t)*(p_object - 1);
    v15 = *p_object;
    v88 = v13;
    v18 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    swift_bridgeObjectRetain();
    if (v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      v13 = v88;
    }
    p_object += 2;
    *(_QWORD *)(v13 + 16) = v18 + 1;
    v19 = v13 + 16 * v18;
    *(_QWORD *)(v19 + 32) = v16;
    *(_QWORD *)(v19 + 40) = v15;
    --v12;
  }
  while (v12);
  swift_release();
LABEL_12:
  v20 = swift_bridgeObjectRetain();
  v21 = specialized RoBERTaTokenizer.getPairs(word:)(v20);
  swift_bridgeObjectRelease();
  v22 = specialized _copyCollectionToContiguousArray<A>(_:)(v21);
  swift_bridgeObjectRelease();
  swift_retain();
  v23 = 0;
  v24 = (_QWORD *)specialized _ArrayProtocol.filter(_:)((uint64_t)v22, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v24[2])
  {
LABEL_79:
    swift_bridgeObjectRelease();
LABEL_80:
    v88 = v13;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x24BEE12B0]);
    countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    object = v79;
    swift_bridgeObjectRelease_n();
LABEL_81:
    isUniquelyReferenced_nonNull_native = countAndFlagsBits;
    v11 = object;
    goto LABEL_99;
  }
  v82 = v2;
  while (1)
  {
    swift_retain();
    v26 = specialized Sequence.min(by:)(v24, v2);
    v28 = v27;
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_release();
    if (!v28)
      goto LABEL_98;
    v88 = v26;
    v89 = v28;
    v29 = lazy protocol witness table accessor for type String and conformance String();
    isUniquelyReferenced_nonNull_native = MEMORY[0x22E2AFE50](32, 0xE100000000000000, 1, 1, MEMORY[0x24BEE0D00], v29);
    if (!*(_QWORD *)(isUniquelyReferenced_nonNull_native + 16))
    {
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    v30 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    v83 = v23;
    v31 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 32);
    v32 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 40);
    v33 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 48);
    v34 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56);
    swift_bridgeObjectRetain();
    v35 = MEMORY[0x22E2AF988](v31, v32, v33, v34);
    v37 = v36;
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    if (v30[2] < 2uLL)
      goto LABEL_93;
    v38 = v30[8];
    v39 = v30[9];
    v40 = v30[10];
    v41 = v30[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v42 = MEMORY[0x22E2AF988](v38, v39, v40, v41);
    v86 = v43;
    v87 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v44 = *(_QWORD *)(v13 + 16);
    if (v44)
      break;
LABEL_69:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_73:
    swift_bridgeObjectRelease();
    v13 = (uint64_t)v90;
    if (v90[2] == 1)
      goto LABEL_80;
    v73 = swift_bridgeObjectRetain();
    v74 = specialized RoBERTaTokenizer.getPairs(word:)(v73);
    swift_bridgeObjectRelease();
    v75 = *(_QWORD *)(v74 + 16);
    if (v75)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v25 = (_QWORD *)swift_allocObject();
      v76 = _swift_stdlib_malloc_size(v25);
      v77 = v76 - 32;
      if (v76 < 32)
        v77 = v76 - 17;
      v25[2] = v75;
      v25[3] = 2 * (v77 >> 4);
      v78 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v88, v25 + 4, v75, v74);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = outlined consume of [String : String].Iterator._Variant();
      if (v78 != v75)
        goto LABEL_94;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v2 = v82;
    swift_retain();
    v23 = v83;
    v24 = (_QWORD *)specialized _ArrayProtocol.filter(_:)((uint64_t)v25, v82);
    swift_bridgeObjectRelease();
    swift_release();
    if (!v24[2])
      goto LABEL_79;
  }
  v45 = 0;
  v46 = v13 + 32;
  v84 = *(_QWORD *)(v13 + 16);
  v85 = v44 - 1;
  v47 = v84;
  v81 = (2 * v44) | 1;
  while (1)
  {
    v48 = (uint64_t *)(v46 + 16 * v45);
    isUniquelyReferenced_nonNull_native = *v48;
    v11 = (void *)v48[1];
    v49 = *v48 == v35 && v11 == v37;
    v50 = v45;
    if (v49)
      goto LABEL_42;
    isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)();
    v50 = v45;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_42;
    v50 = v45 + 1;
    if (v45 + 1 == v44)
      break;
    if (v45 + 1 >= v44)
      goto LABEL_91;
    v51 = (uint64_t *)(v46 + 16 * v50);
    isUniquelyReferenced_nonNull_native = *v51;
    v11 = (void *)v51[1];
    if (*v51 != v35 || v11 != v37)
    {
      isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        while (1)
        {
          v53 = v50 + 1;
          if (__OFADD__(v50, 1))
            goto LABEL_88;
          if (v53 == v44)
            goto LABEL_70;
          if (v53 >= v44)
            goto LABEL_89;
          v54 = (uint64_t *)(v46 + 16 * v53);
          isUniquelyReferenced_nonNull_native = *v54;
          v11 = (void *)v54[1];
          if (*v54 != v35 || v11 != v37)
          {
            isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)();
            ++v50;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              continue;
          }
          v50 = v53;
          if (v53 >= v45)
            break;
          __break(1u);
          goto LABEL_83;
        }
      }
    }
LABEL_42:
    if (v47 < v45)
    {
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
      goto LABEL_92;
    }
    if (v47 < v50)
      goto LABEL_84;
    if (v50 < 0)
      goto LABEL_85;
    v56 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v56, v13 + 32, v45, (2 * v50) | 1);
    isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
    v57 = *(_QWORD *)(v13 + 16);
    if (v50 >= v57)
      goto LABEL_86;
    v58 = (uint64_t *)(v46 + 16 * v50);
    isUniquelyReferenced_nonNull_native = *v58;
    v11 = (void *)v58[1];
    if (*v58 == v35 && v11 == v37)
    {
      if (v50 >= v85)
        goto LABEL_61;
    }
    else
    {
      isUniquelyReferenced_nonNull_native = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (v50 >= v85 || (isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_61;
    }
    if (v50 + 1 >= v57)
      goto LABEL_90;
    v59 = (_QWORD *)(v46 + 16 * (v50 + 1));
    if (*v59 == v87 && (void *)v59[1] == v86 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v88 = v35;
      v89 = (uint64_t)v37;
      swift_bridgeObjectRetain();
      v60._object = v86;
      v60._countAndFlagsBits = v87;
      String.append(_:)(v60);
      v62 = v88;
      v61 = v89;
      v63 = v90;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
        v63 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v65 = v63[2];
      v64 = v63[3];
      if (v65 >= v64 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v64 > 1), v65 + 1, 1, v63);
        v63 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v63[2] = v65 + 1;
      v66 = &v63[2 * v65];
      v66[4] = v62;
      v67 = v66 + 4;
      v68 = 2;
      goto LABEL_66;
    }
LABEL_61:
    v69 = *v58;
    v61 = v58[1];
    v63 = v90;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
      v63 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v71 = v63[2];
    v70 = v63[3];
    if (v71 >= v70 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v70 > 1), v71 + 1, 1, v63);
      v63 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v63[2] = v71 + 1;
    v72 = &v63[2 * v71];
    v72[4] = v69;
    v67 = v72 + 4;
    v68 = 1;
LABEL_66:
    v67[1] = v61;
    v90 = v63;
    v45 = v50 + v68;
    v44 = v84;
    if (v50 + v68 >= v84)
      goto LABEL_69;
    v47 = *(_QWORD *)(v13 + 16);
    if (v47 < (unint64_t)v45)
      goto LABEL_87;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v13 + 16) < v45)
    goto LABEL_95;
  if ((v45 & 0x8000000000000000) == 0)
  {
    specialized Array.append<A>(contentsOf:)(v13, v13 + 32, v45, v81);
    goto LABEL_73;
  }
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  result._object = v11;
  result._countAndFlagsBits = isUniquelyReferenced_nonNull_native;
  return result;
}

uint64_t RoBERTaTokenizer.tokenize(text:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = MEMORY[0x24BEE4AF8];
  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
  v2 = result;
  v25 = *(_QWORD *)(result + 16);
  if (v25)
  {
    v3 = 0;
    v23 = result + 32;
    v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 176);
    v22 = result;
    while (v3 < *(_QWORD *)(v2 + 16))
    {
      v4 = (uint64_t *)(v23 + 16 * v3);
      v5 = *v4;
      v6 = v4[1];
      swift_bridgeObjectRetain();
      v24(v5, v6);
      swift_bridgeObjectRelease();
      v7 = lazy protocol witness table accessor for type String and conformance String();
      v8 = MEMORY[0x22E2AFE50](32, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x24BEE0D00], v7);
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v26 = MEMORY[0x24BEE4AF8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        v10 = v26;
        v11 = (uint64_t *)(v8 + 56);
        do
        {
          v12 = *(v11 - 3);
          v13 = *(v11 - 2);
          v14 = *(v11 - 1);
          v15 = *v11;
          swift_bridgeObjectRetain();
          v16 = MEMORY[0x22E2AF988](v12, v13, v14, v15);
          v18 = v17;
          swift_bridgeObjectRelease();
          v20 = *(_QWORD *)(v26 + 16);
          v19 = *(_QWORD *)(v26 + 24);
          if (v20 >= v19 >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          *(_QWORD *)(v26 + 16) = v20 + 1;
          v21 = v26 + 16 * v20;
          *(_QWORD *)(v21 + 32) = v16;
          *(_QWORD *)(v21 + 40) = v18;
          v11 += 4;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
        v2 = v22;
      }
      else
      {
        swift_bridgeObjectRelease();
        v10 = MEMORY[0x24BEE4AF8];
      }
      ++v3;
      result = specialized Array.append<A>(contentsOf:)(v10);
      if (v3 == v25)
      {
        swift_bridgeObjectRelease();
        return v27;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t RoBERTaTokenizer.tokenizeWithUTF8Spans(text:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = MEMORY[0x24BEE4AF8];
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
  v34 = *(_QWORD *)(v1 + 16);
  if (v34)
  {
    v2 = 0;
    v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 176);
    v31[1] = v1;
    v31[2] = v0;
    v32 = v1 + 32;
    v33 = v3;
    while (1)
    {
      v4 = (uint64_t *)(v32 + 32 * v2);
      v5 = *v4;
      v6 = v4[1];
      v7 = v4[2];
      v39 = v4[3];
      v40 = v7;
      swift_bridgeObjectRetain();
      v8 = v33(v5, v6);
      v10 = v9;
      swift_bridgeObjectRelease();
      v46 = v8;
      v47 = v10;
      v11 = lazy protocol witness table accessor for type String and conformance String();
      v12 = MEMORY[0x22E2AFE50](32, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x24BEE0D00], v11);
      swift_bridgeObjectRelease();
      v50 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
      v13 = v50;
      v14 = *(_QWORD *)(v12 + 16);
      swift_bridgeObjectRetain();
      v38 = v14;
      v35 = v31;
      v36 = v2;
      if (v14)
        break;
LABEL_3:
      v2 = v36 + 1;
      swift_bridgeObjectRelease_n();
      specialized Array.append<A>(contentsOf:)(v13);
      if (v2 == v34)
      {
        swift_bridgeObjectRelease();
        return v51;
      }
    }
    v15 = 0;
    v37 = v12 + 32;
    v16 = (uint64_t *)(v12 + 56);
    v17 = 1;
    while (1)
    {
      v18 = *(v16 - 3);
      v19 = *(v16 - 2);
      v21 = *(v16 - 1);
      v20 = *v16;
      swift_bridgeObjectRetain();
      result = MEMORY[0x22E2AF988](v18, v19, v21, v20);
      if (*(_QWORD *)(v12 + 16) < v15)
        break;
      v41 = v23;
      v42 = result;
      v44 = v15;
      v45 = v13;
      v46 = v12;
      v47 = v37;
      v48 = 0;
      v49 = v17;
      v43 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
      lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>(&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<Substring>, MEMORY[0x24BEE2180]);
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain();
      Sequence<>.joined(separator:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = String.count.getter();
      result = swift_bridgeObjectRelease();
      v25 = v40 + v24;
      if (__OFADD__(v40, v24))
        goto LABEL_15;
      swift_bridgeObjectRetain();
      v26 = Substring.distance(from:to:)();
      swift_bridgeObjectRelease_n();
      v13 = v45;
      v50 = v45;
      v28 = *(_QWORD *)(v45 + 16);
      v27 = *(_QWORD *)(v45 + 24);
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v13 = v50;
      }
      v15 = v44 + 1;
      *(_QWORD *)(v13 + 16) = v28 + 1;
      v29 = (_QWORD *)(v13 + 40 * v28);
      v30 = v41;
      v29[4] = v42;
      v29[5] = v30;
      v29[6] = v25;
      v29[7] = v26;
      v29[8] = v39;
      v16 += 4;
      v17 = v43 + 2;
      if (v38 == v15)
        goto LABEL_3;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t RoBERTaTokenizer.encodingAndUTF8Spans(text:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30[5];
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v32 = *MEMORY[0x24BDAC8D0];
  v6 = String.count.getter();
  swift_bridgeObjectRetain();
  if (v6 >= 5120)
  {
    v7 = specialized Collection.prefix(_:)(5120);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    a1 = MEMORY[0x22E2AF988](v7, v9, v11, v13);
    a2 = v14;
    swift_bridgeObjectRelease();
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*v3 + 192))(a1, a2);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(token: String, start: Int, length: Int, wordId: Int)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C1EE0;
  v17 = v3[7];
  *(_QWORD *)(inited + 32) = v3[6];
  *(_QWORD *)(inited + 40) = v17;
  *(_QWORD *)(inited + 48) = 0;
  *(_QWORD *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = -1;
  v18 = *(_QWORD *)(v15 + 16);
  if (v18 >= 0x1FE)
    v18 = 510;
  v19 = (2 * v18) | 1;
  v31 = inited;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v15, v15 + 32, 0, v19);
  swift_bridgeObjectRelease();
  v20 = v31;
  v21 = swift_initStackObject();
  *(_OWORD *)(v21 + 16) = xmmword_2284C1EE0;
  v22 = v3[9];
  *(_QWORD *)(v21 + 32) = v3[8];
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = 0;
  *(_QWORD *)(v21 + 56) = 0;
  *(_QWORD *)(v21 + 64) = -1;
  v31 = v20;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v21);
  v23 = v20;
  v24 = 512 - *(_QWORD *)(v20 + 16);
  v25 = v3[11];
  v30[0] = v3[10];
  v30[1] = v25;
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = -1;
  swift_bridgeObjectRetain();
  v26 = specialized Array.init(repeating:count:)(v30, v24);
  v31 = v23;
  specialized Array.append<A>(contentsOf:)(v26);
  v27 = v31;
  swift_retain();
  v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS5token_Si5startSi6lengthSi6wordIdtG_Si2id_SiAGSiAHSiAIts5NeverOTg5160_s21DocumentUnderstanding16RoBERTaTokenizerC20encodingAndUTF8Spans4textSaySi2id_Si5startSi6lengthSi6wordIdtGSS_tFSiAF_SiAGSiAHSiAItSS5token_SiAGSiAHSiAIt_tXEfU_0L13Understanding0noP0CTf1cn_nTf4ng_n(v27, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  return v28;
}

_QWORD *RoBERTaTokenizer.encode(text:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;

  v3 = v2;
  v6 = String.count.getter();
  swift_bridgeObjectRetain();
  if (v6 >= 5120)
  {
    v7 = specialized Collection.prefix(_:)(5120);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    a1 = MEMORY[0x22E2AF988](v7, v9, v11, v13);
    a2 = v14;
    swift_bridgeObjectRelease();
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*v3 + 184))(a1, a2);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2284C1EE0;
  v17 = v3[7];
  *(_QWORD *)(inited + 32) = v3[6];
  *(_QWORD *)(inited + 40) = v17;
  v18 = *(_QWORD *)(v15 + 16);
  if (v18 >= 0x1FE)
    v18 = 510;
  v19 = (2 * v18) | 1;
  v28 = inited;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v15, v15 + 32, 0, v19);
  swift_bridgeObjectRelease();
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2284C1EE0;
  v21 = v3[9];
  *(_QWORD *)(v20 + 32) = v3[8];
  *(_QWORD *)(v20 + 40) = v21;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v20, v20 + 32, 0, 3uLL);
  swift_bridgeObjectRelease();
  v22 = 512 - *(_QWORD *)(v28 + 16);
  v24 = v3[10];
  v23 = v3[11];
  swift_bridgeObjectRetain();
  v25 = specialized Array.init(repeating:count:)(v24, v23, v22);
  specialized Array.append<A>(contentsOf:)(v25);
  swift_retain();
  v26 = specialized Sequence.compactMap<A>(_:)(v28, (uint64_t)v3);
  swift_bridgeObjectRelease();
  swift_release();
  return v26;
}

uint64_t RoBERTaTokenizer.attentionMaskForTokenIds(tokenIds:)(uint64_t a1)
{
  uint64_t v2;

  swift_retain();
  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5096_s21DocumentUnderstanding16RoBERTaTokenizerC24attentionMaskForTokenIds05tokenJ0SaySfGSaySiG_tFSfT5XEfU_0F13Understanding0hiJ0CTf1cn_nTf4nd_n(a1);
  swift_release();
  return v2;
}

uint64_t RoBERTaTokenizer.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RoBERTaTokenizer.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Character>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, Swift::String_optional *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String_optional *v8;
  uint64_t v9;
  Swift::String_optional v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = result;
  v6 = HIBYTE(a5) & 0xF;
  v11 = a4;
  v12 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v6 = a4 & 0xFFFFFFFFFFFFLL;
  v13 = v6;
  if (!a2)
  {
    v7 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (_QWORD *)v7;
  }
  v7 = a3;
  if (!a3)
    goto LABEL_14;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = a2;
    v9 = 0;
    while (1)
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
        break;
      ++v9;
      *v8++ = v10;
      if (v7 == v9)
      {
        a4 = v11;
        a5 = v12;
        goto LABEL_13;
      }
    }
    a4 = v11;
    a5 = v12;
    v7 = v9;
LABEL_13:
    v6 = v13;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t (*specialized ArraySlice.subscript.read(uint64_t (*result)(), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))()
{
  _QWORD *v6;
  uint64_t v7;

  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    v6 = (_QWORD *)(a4 + 16 * a2);
    v7 = v6[1];
    *(_QWORD *)result = *v6;
    *((_QWORD *)result + 1) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return ArraySlice.subscript.readspecialized ;
  }
  return result;
}

{
  uint64_t (*v6)();
  _QWORD *v7;
  uint64_t v8;

  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    v7 = (_QWORD *)(a4 + 16 * a2);
    v8 = v7[1];
    *(_QWORD *)v6 = *v7;
    *((_QWORD *)v6 + 1) = v8;
    swift_bridgeObjectRetain();
    return destroy for DUProcessingRequestError;
  }
  return result;
}

{
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)result = *(_QWORD *)(a4 + 8 * a2);
    return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;

  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    v6 = a4 + 24 * a2;
    v7 = *(_QWORD *)(v6 + 16);
    *(_OWORD *)result = *(_OWORD *)v6;
    *((_QWORD *)result + 2) = v7;
    return DocumentUnderstanding_ClientInterface_StructuredEntity.unknownFields.modify;
  }
  return result;
}

uint64_t ArraySlice.subscript.readspecialized ()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*specialized ArraySlice.subscript.read(void (**a1)(void **a1), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(void **a1)
{
  void (*result)(void **);
  void (*v12)(void **);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = (void (*)(void **))malloc(0x28uLL);
  *a1 = result;
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    v12 = result;
    v13 = a4 + 40 * a2;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 32);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    *((_OWORD *)v12 + 1) = *(_OWORD *)(v13 + 16);
    *((_QWORD *)v12 + 4) = v15;
    swift_bridgeObjectRetain();
    return ArraySlice.subscript.readspecialized ;
  }
  return result;
}

void ArraySlice.subscript.readspecialized (void **a1)
{
  void *v1;

  v1 = *a1;
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg5080_s21DocumentUnderstanding16RoBERTaTokenizerC10byteEncode4textSaySSGSS_tFSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_nTm(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = a1 + 40;
    do
    {
      v5 = String.subscript.getter();
      v6 = MEMORY[0x22E2AF988](v5);
      v8 = v7;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v6;
      *(_QWORD *)(v11 + 40) = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t partial apply for closure #2 in RoBERTaTokenizer.byteEncodeWithUTF8Spans(text:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return closure #2 in RoBERTaTokenizer.byteEncodeWithUTF8Spans(text:)(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS5token_Si5startSi6lengthSi6wordIdtG_Si2id_SiAGSiAHSiAIts5NeverOTg5160_s21DocumentUnderstanding16RoBERTaTokenizerC20encodingAndUTF8Spans4textSaySi2id_Si5startSi6lengthSi6wordIdtGSS_tFSiAF_SiAGSiAHSiAItSS5token_SiAGSiAHSiAIt_tXEfU_0L13Understanding0noP0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int v19;
  id v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v21 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v21;
    v20 = *(id *)(a2 + 24);
    v19 = *MEMORY[0x24BEB6DA8];
    v6 = (uint64_t *)(a1 + 64);
    do
    {
      v7 = *(v6 - 4);
      v8 = *(v6 - 3);
      v9 = *(v6 - 2);
      v10 = *(v6 - 1);
      v11 = *v6;
      swift_bridgeObjectRetain();
      v12 = (void *)MEMORY[0x22E2AF8EC](v7, v8);
      v13 = objc_msgSend(v20, sel_payloadForString_, v12);
      swift_bridgeObjectRelease();

      if (v13 == v19)
        v14 = 1;
      else
        v14 = v13;
      v16 = *(_QWORD *)(v21 + 16);
      v15 = *(_QWORD *)(v21 + 24);
      if (v16 >= v15 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v6 += 5;
      *(_QWORD *)(v21 + 16) = v16 + 1;
      v17 = (_QWORD *)(v21 + 32 * v16);
      v17[4] = v14;
      v17[5] = v9;
      v17[6] = v10;
      v17[7] = v11;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sfs5NeverOTg5096_s21DocumentUnderstanding16RoBERTaTokenizerC24attentionMaskForTokenIds05tokenJ0SaySfGSaySiG_tFSfT5XEfU_0F13Understanding0hiJ0CTf1cn_nTf4nd_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v9;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      if (v5 == 1)
        v6 = 0.0;
      else
        v6 = 1.0;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(float *)(result + 4 * v8 + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySnySiGAGySaySSGSaySnySS5IndexVGGGG_SS5token_Si5startSi6wordIdts5NeverOTg5012_sSiSSSnySS5f16VGSSS2iIgygyodd_m37_SS_ACttSS5token_Si5startSi6wordIdts5K11OIegnrzr_TRSiSSALSSS2iIgygyodd_Tf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v70 = result;
  v5 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v6 = a4;
  v7 = a3;
  v8 = a2;
  v9 = *(_QWORD *)(a4 + 16);
  v65 = v9;
  v67 = *(_QWORD *)(a3 + 16);
  if (v9 >= v67)
    v9 = *(_QWORD *)(a3 + 16);
  if (v9 >= (uint64_t)v5)
    v10 = a2 - result;
  else
    v10 = v9;
  v73 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 & ~(v10 >> 63), 0);
  if (v10 < 0)
    goto LABEL_53;
  v11 = v73;
  v58 = v7;
  v54 = v6;
  if (v10)
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v8 < v70)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v56 = v8;
    v12 = 0;
    if (v10 >= v5)
      v13 = v5;
    else
      v13 = v10;
    v61 = v13;
    v63 = v5;
    v14 = (uint64_t *)(v6 + 40);
    v15 = (uint64_t *)(v7 + 40);
    for (i = v10; i != v12; v10 = i)
    {
      if (v63 == v12)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      if (v61 == v12)
        goto LABEL_45;
      if (v67 == v12)
        goto LABEL_46;
      if (v65 == v12)
        goto LABEL_47;
      v16 = *(v15 - 1);
      v17 = *v15;
      v18 = v11;
      v19 = *(v14 - 1);
      v20 = *v14;
      swift_bridgeObjectRetain();
      v21 = a5(v70 + v12, v16, v17, v19, v20);
      v11 = v18;
      v71 = v21;
      v23 = v22;
      v25 = v24;
      v27 = v26;
      result = swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v11 + 16);
      v28 = *(_QWORD *)(v11 + 24);
      if (v29 >= v28 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      ++v12;
      *(_QWORD *)(v11 + 16) = v29 + 1;
      v30 = (_QWORD *)(v11 + 32 * v29);
      v30[4] = v71;
      v30[5] = v23;
      v30[6] = v25;
      v30[7] = v27;
      v14 += 2;
      v15 += 2;
    }
    v31 = v70 + v12;
    v8 = v56;
    v7 = v58;
    v6 = v54;
    if (v70 + v12 == v56)
      goto LABEL_24;
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v31 = v70;
    if (v70 == v8)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11;
    }
  }
  if (v8 >= v70)
  {
    v32 = 0;
    v55 = v31 - v8;
    if (v31 <= v8)
      v33 = v8;
    else
      v33 = v31;
    v34 = v67;
    v64 = v10 - v67;
    if (v10 > v67)
      v34 = v10;
    v35 = v65;
    v62 = v10 - v65;
    if (v10 > v65)
      v35 = v10;
    v72 = v33 - v31;
    v66 = v10 - v35;
    v68 = v10 - v34;
    v36 = 16 * v10;
    v60 = v6 + 40;
    v57 = v31;
    while (v31 >= v70)
    {
      if (v72 == v32)
        goto LABEL_49;
      if (v64 + v32)
      {
        if (!(v68 + v32))
          goto LABEL_50;
        if (v62 + v32)
        {
          if (!(v66 + v32))
            goto LABEL_51;
          v37 = v31 + v32;
          v38 = *(_QWORD *)(v7 + v36 + 32);
          v39 = *(_QWORD *)(v7 + v36 + 40);
          v40 = v11;
          v41 = *(_QWORD *)(v60 + v36 - 8);
          v42 = *(_QWORD *)(v60 + v36);
          swift_bridgeObjectRetain();
          v43 = a5(v37, v38, v39, v41, v42);
          v11 = v40;
          v44 = v43;
          v46 = v45;
          v48 = v47;
          v50 = v49;
          result = swift_bridgeObjectRelease();
          v52 = *(_QWORD *)(v11 + 16);
          v51 = *(_QWORD *)(v11 + 24);
          if (v52 >= v51 >> 1)
            result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
          *(_QWORD *)(v11 + 16) = v52 + 1;
          v53 = (_QWORD *)(v11 + 32 * v52);
          v53[4] = v44;
          v53[5] = v46;
          v53[6] = v48;
          v53[7] = v50;
          ++v32;
          v36 += 16;
          v31 = v57;
          v7 = v58;
          if (v55 + v32)
            continue;
        }
      }
      goto LABEL_24;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_55:
  __break(1u);
  return result;
}

_QWORD *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = *(void **)(a2 + 24);
  v4 = *MEMORY[0x24BEB6DA8];
  v5 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    v9 = (void *)MEMORY[0x22E2AF8EC](v7, v8);
    v10 = objc_msgSend(v3, sel_payloadForString_, v9);
    swift_bridgeObjectRelease();

    if (v10 != v4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      v12 = v6[2];
      v11 = v6[3];
      if (v12 >= v11 >> 1)
        v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v6);
      v6[2] = v12 + 1;
      v6[v12 + 4] = v10;
    }
    v5 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = 0;
  v4 = *MEMORY[0x24BEB6DA8];
  v5 = result + 40;
  v6 = -(uint64_t)v2;
  v7 = MEMORY[0x24BEE4AF8];
  v18 = result + 40;
  v19 = *(_QWORD *)(result + 16);
  do
  {
    v20 = v7;
    if (v3 <= v2)
      v8 = v2;
    else
      v8 = v3;
    v9 = -(uint64_t)v8;
    for (i = (uint64_t *)(v5 + 16 * v3++); ; i += 2)
    {
      if (v9 + v3 == 1)
      {
        __break(1u);
        return result;
      }
      v12 = *(i - 1);
      v11 = *i;
      v13 = *(void **)(a2 + 16);
      swift_bridgeObjectRetain();
      v14 = (void *)MEMORY[0x22E2AF8EC](v12, v11);
      LODWORD(v13) = objc_msgSend(v13, sel_payloadForString_, v14);

      if ((_DWORD)v13 != v4)
        break;
      result = swift_bridgeObjectRelease();
      ++v3;
      if (v6 + v3 == 1)
        return v20;
    }
    v7 = v20;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
      v7 = v20;
    }
    v16 = *(_QWORD *)(v7 + 16);
    v15 = *(_QWORD *)(v7 + 24);
    if (v16 >= v15 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v7 = v20;
    }
    *(_QWORD *)(v7 + 16) = v16 + 1;
    v17 = v7 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v12;
    *(_QWORD *)(v17 + 40) = v11;
    v5 = v18;
    v2 = v19;
  }
  while (v6 + v3);
  return v7;
}

uint64_t specialized RoBERTaTokenizer.getPairs(word:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  Swift::Int v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4B08];
  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = v1 - 1;
    if (v1 == 1)
    {
      return MEMORY[0x24BEE4B08];
    }
    else
    {
      v3 = (void **)(result + 56);
      do
      {
        v4 = (Swift::Int)*(v3 - 2);
        v5 = (uint64_t)*(v3 - 1);
        v6 = *v3;
        v9 = (Swift::Int)*(v3 - 3);
        v10 = v4;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v7._countAndFlagsBits = 32;
        v7._object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        swift_bridgeObjectRetain();
        v8._countAndFlagsBits = v5;
        v8._object = v6;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized Set._Variant.insert(_:)(&v9, v9, v10);
        swift_bridgeObjectRelease();
        v3 += 2;
        --v2;
      }
      while (v2);
      return v11;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.min(by:)(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;

  v2 = a1[2];
  if (!v2)
    return 0;
  v5 = a1[4];
  v4 = a1[5];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  if (v2 == 1)
  {
    v7 = v5;
  }
  else
  {
    v23 = *MEMORY[0x24BEB6DA8];
    v18 = -(uint64_t)v2;
    v8 = 1;
    v17 = v2;
    while (2)
    {
      v20 = v5;
      v21 = v4;
      if (v8 <= v2)
        v9 = v2;
      else
        v9 = v8;
      v19 = -(uint64_t)v9;
      v10 = &a1[2 * v8++ + 5];
      while (1)
      {
        if (v19 + v8 == 1)
        {
          __break(1u);
          return result;
        }
        v7 = *(v10 - 1);
        v4 = *v10;
        v11 = *(void **)(a2 + 16);
        swift_bridgeObjectRetain();
        v12 = (void *)MEMORY[0x22E2AF8EC](v7, v4);
        v13 = objc_msgSend(v11, sel_payloadForString_, v12);

        v14 = (void *)MEMORY[0x22E2AF8EC](v20, v21);
        v15 = objc_msgSend(v11, sel_payloadForString_, v14);

        if (v15 != v23)
        {
          v16 = v13 == v23 ? 0 : v13;
          if (v16 < v15)
            break;
        }
        result = swift_bridgeObjectRelease();
        ++v8;
        v10 += 2;
        if (v18 + v8 == 1)
        {
          v7 = v20;
          goto LABEL_20;
        }
      }
      result = swift_bridgeObjectRelease();
      v5 = v7;
      v2 = v17;
      if (v18 + v8)
        continue;
      break;
    }
  }
LABEL_20:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int64V21DocumentUnderstanding0eF18_HiddenLayerOutputVG_Si_SaySfGts5NeverOTg504_ss5d3V21e19Understanding0bC18_ghi40VSiSaySfGIgyndo_AB3key_AE5valuetSi_AFts5j105OIegnrzr_TR04_s21b30Understanding21DUEncodingModelf64C5protoACSgx_tc21InternalSwiftProtobuf7MessageRzlufcu1_pQ39Gts5a10V_AA0ab12_dE9E0VtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
  v3 = MEMORY[0x24BDAC7A8](v46);
  v45 = (_QWORD *)((char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MEMORY[0x24BDAC7A8](v3);
  v44 = (_QWORD *)((char *)v37 - v6);
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)v37 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (!v8)
    return v9;
  v37[1] = v1;
  v48 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  result = specialized Dictionary.startIndex.getter(a1);
  v12 = result;
  v13 = 0;
  v14 = a1 + 64;
  v38 = a1 + 80;
  v39 = v8;
  v41 = a1 + 64;
  v42 = a1;
  v40 = v11;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(a1 + 32))
  {
    v17 = (unint64_t)v12 >> 6;
    if ((*(_QWORD *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_26;
    v47 = v13;
    v18 = v46;
    v19 = v43;
    v20 = (uint64_t)&v43[*(int *)(v46 + 48)];
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 56);
    v23 = *(_QWORD *)(v21 + 8 * v12);
    v24 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v22 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v12, v20, type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
    *v19 = v23;
    v25 = (uint64_t)v44;
    *v44 = v23;
    outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v20, v25 + *(int *)(v18 + 48), type metadata accessor for DocumentUnderstanding_HiddenLayerOutput);
    v26 = v45;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?(v25, (uint64_t)v45, &demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v19, &demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
    v27 = *v26;
    v28 = *(uint64_t *)((char *)v26 + *(int *)(v18 + 48));
    swift_bridgeObjectRetain();
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v26, &demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
    v9 = v48;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v9 = v48;
    }
    v30 = *(_QWORD *)(v9 + 16);
    v29 = *(_QWORD *)(v9 + 24);
    if (v30 >= v29 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      v9 = v48;
    }
    *(_QWORD *)(v9 + 16) = v30 + 1;
    v31 = v9 + 16 * v30;
    *(_QWORD *)(v31 + 32) = v27;
    *(_QWORD *)(v31 + 40) = v28;
    a1 = v42;
    v15 = 1 << *(_BYTE *)(v42 + 32);
    if (v12 >= v15)
      goto LABEL_27;
    v14 = v41;
    v32 = *(_QWORD *)(v41 + 8 * v17);
    if ((v32 & (1 << v12)) == 0)
      goto LABEL_28;
    LODWORD(v11) = v40;
    if (*(_DWORD *)(v42 + 36) != (_DWORD)v40)
      goto LABEL_29;
    v33 = v32 & (-2 << (v12 & 0x3F));
    if (v33)
    {
      v15 = __clz(__rbit64(v33)) | v12 & 0xFFFFFFFFFFFFFFC0;
      v16 = v39;
    }
    else
    {
      v34 = v17 + 1;
      v35 = (unint64_t)(v15 + 63) >> 6;
      v16 = v39;
      if (v17 + 1 < v35)
      {
        v36 = *(_QWORD *)(v41 + 8 * v34);
        if (v36)
        {
LABEL_22:
          v15 = __clz(__rbit64(v36)) + (v34 << 6);
        }
        else
        {
          while (v35 - 2 != v17)
          {
            v36 = *(_QWORD *)(v38 + 8 * v17++);
            if (v36)
            {
              v34 = v17 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v13 = v47 + 1;
    v12 = v15;
    if (v47 + 1 == v16)
      return v9;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.max()(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = result + 64;
  v2 = *(_BYTE *)(result + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(result + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v17 = *(_QWORD *)(result + 72);
    if (v17)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v17 = *(_QWORD *)(result + 80);
      if (v17)
      {
        v6 = 2;
      }
      else
      {
        v17 = *(_QWORD *)(result + 88);
        if (v17)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v17 = *(_QWORD *)(result + 96);
          if (v17)
          {
            v6 = 4;
          }
          else
          {
            v17 = *(_QWORD *)(result + 104);
            if (!v17)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v17 - 1) & v17;
    v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(result + 56);
  result = *(_QWORD *)(v10 + 8 * v7);
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v6 << 6);
LABEL_7:
    v13 = *(_QWORD *)(v10 + 8 * v12);
    if (result <= v13)
      result = v13;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      return result;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v18 = 0;
  v19 = 6;
  if (v9 > 6)
    v19 = v9;
  v20 = v19 - 6;
  while (v20 != v18)
  {
    v17 = *(_QWORD *)(result + 112 + 8 * v18++);
    if (v17)
    {
      v6 = v18 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = result + 64;
  v2 = *(_BYTE *)(result + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(result + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v17 = *(_QWORD *)(result + 72);
    if (v17)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v17 = *(_QWORD *)(result + 80);
      if (v17)
      {
        v6 = 2;
      }
      else
      {
        v17 = *(_QWORD *)(result + 88);
        if (v17)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v17 = *(_QWORD *)(result + 96);
          if (v17)
          {
            v6 = 4;
          }
          else
          {
            v17 = *(_QWORD *)(result + 104);
            if (!v17)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v17 - 1) & v17;
    v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(result + 48);
  result = *(_QWORD *)(v10 + 8 * v7);
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v6 << 6);
LABEL_7:
    v13 = *(_QWORD *)(v10 + 8 * v12);
    if (result <= v13)
      result = v13;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      return result;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v18 = 0;
  v19 = 6;
  if (v9 > 6)
    v19 = v9;
  v20 = v19 - 6;
  while (v20 != v18)
  {
    v17 = *(_QWORD *)(result + 112 + 8 * v18++);
    if (v17)
    {
      v6 = v18 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

id DUEncodingModelOutput.__allocating_init(modelName:hiddenLayerSize:nHiddenLayers:pooledFeatureValue:)(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, void *a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return DUEncodingModelOutput.init(modelName:hiddenLayerSize:nHiddenLayers:pooledFeatureValue:)(a1, a2, a3, a4, a5);
}

uint64_t DUEncodingModelOutput.modelName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_modelName);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DUEncodingModelOutput.modelName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_modelName);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUEncodingModelOutput.modelName.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUEncodingModelOutput.nHiddenLayers.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_nHiddenLayers;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t DUEncodingModelOutput.nHiddenLayers.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_nHiddenLayers);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUEncodingModelOutput.nHiddenLayers.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUEncodingModelOutput.hiddenLayerSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerSize;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t DUEncodingModelOutput.hiddenLayerSize.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerSize);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*DUEncodingModelOutput.hiddenLayerSize.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUEncodingModelOutput.sequenceSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_sequenceSize;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t DUEncodingModelOutput.sequenceSize.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_sequenceSize;
  result = swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*DUEncodingModelOutput.sequenceSize.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryConfidence.modify;
}

uint64_t DUEncodingModelOutput.pooledHiddenLayerValues.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUEncodingModelOutput.pooledHiddenLayerValues.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_pooledHiddenLayerValues);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUEncodingModelOutput.pooledHiddenLayerValues.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

uint64_t DUEncodingModelOutput.hiddenLayerValues.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DUEncodingModelOutput.hiddenLayerValues.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DUEncodingModelOutput.hiddenLayerValues.modify())()
{
  swift_beginAccess();
  return DUCategoryResult.categoryIdentifier.modify;
}

id DUEncodingModelOutput.__allocating_init(modelName:hiddenLayerSize:nHiddenLayers:sequenceSize:pooledHiddenLayerValues:hiddenLayerValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return DUEncodingModelOutput.init(modelName:hiddenLayerSize:nHiddenLayers:sequenceSize:pooledHiddenLayerValues:hiddenLayerValues:)(a1, a2, a3, a4, a5, a6, a7);
}

id DUEncodingModelOutput.init(modelName:hiddenLayerSize:nHiddenLayers:sequenceSize:pooledHiddenLayerValues:hiddenLayerValues:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  char *v7;
  char *v14;
  unint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  objc_super v21;

  v14 = &v7[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_sequenceSize];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = (unint64_t *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_pooledHiddenLayerValues];
  *v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v16 = &v7[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues];
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues] = 0;
  v17 = &v7[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_modelName];
  *(_QWORD *)v17 = a1;
  *((_QWORD *)v17 + 1) = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerSize] = a3;
  *(_QWORD *)&v7[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_nHiddenLayers] = a4;
  swift_beginAccess();
  *(_QWORD *)v14 = a5;
  v14[8] = 0;
  swift_beginAccess();
  *v15 = a6;
  v18 = v7;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)v16 = a7;

  swift_bridgeObjectRelease();
  v21.receiver = v18;
  v21.super_class = (Class)type metadata accessor for DUEncodingModelOutput();
  return objc_msgSendSuper2(&v21, sel_init);
}

id DUEncodingModelOutput.init(modelName:hiddenLayerSize:nHiddenLayers:pooledFeatureValue:)(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, void *a5)
{
  char *v5;
  char *v11;
  unint64_t *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  objc_super v19;

  v11 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_sequenceSize];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = (unint64_t *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_pooledHiddenLayerValues];
  *v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues] = 0;
  v13 = &v5[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_modelName];
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerSize] = a3;
  *(_QWORD *)&v5[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_nHiddenLayers] = a4;
  v14 = v5;
  v15 = specialized static DUEncodingModelOutput.processCoreMLOutput(hiddenLayerSize:nHiddenLayers:pooledFeatureValue:)(a3, a4);
  if (v15)
  {
    v16 = v15;
    swift_beginAccess();
    *v12 = v16;

    swift_bridgeObjectRelease();
    v19.receiver = v14;
    v19.super_class = (Class)type metadata accessor for DUEncodingModelOutput();
    v17 = objc_msgSendSuper2(&v19, sel_init);

  }
  else
  {

    type metadata accessor for DUEncodingModelOutput();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v17;
}

id DUEncodingModelOutput.__allocating_init(modelName:hiddenLayerSize:nHiddenLayers:sequenceSize:featureValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return DUEncodingModelOutput.init(modelName:hiddenLayerSize:nHiddenLayers:sequenceSize:featureValue:)(a1, a2, a3, a4, a5, a6);
}

id DUEncodingModelOutput.init(modelName:hiddenLayerSize:nHiddenLayers:sequenceSize:featureValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  char *v6;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  objc_super v22;

  v12 = &v6[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_sequenceSize];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_pooledHiddenLayerValues;
  *(_QWORD *)&v6[v13] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v14 = (uint64_t *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues];
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues] = 0;
  v15 = &v6[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_modelName];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerSize] = a3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_nHiddenLayers] = a4;
  swift_beginAccess();
  *(_QWORD *)v12 = a5;
  v12[8] = 0;
  v16 = v6;
  v17 = specialized static DUEncodingModelOutput.processCoreMLOutput(hiddenLayerSize:nHiddenLayers:sequenceSize:featureValue:)(a3, a4, a5);
  if (v17)
  {
    v18 = v17;
    swift_beginAccess();
    *v14 = v18;

    swift_bridgeObjectRelease();
    v22.receiver = v16;
    v22.super_class = (Class)type metadata accessor for DUEncodingModelOutput();
    v19 = objc_msgSendSuper2(&v22, sel_init);

  }
  else
  {

    type metadata accessor for DUEncodingModelOutput();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v19;
}

uint64_t DUEncodingModelOutput.normalizedPooledHiddenLayerValues()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  int64_t v30;

  v1 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
  v3 = 0;
  v29 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v30 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v3 << 6);
    }
    else
    {
      v10 = v3 + 1;
      if (__OFADD__(v3, 1))
        goto LABEL_34;
      if (v10 >= v30)
      {
LABEL_31:
        swift_release();
        return (uint64_t)v1;
      }
      v11 = *(_QWORD *)(v29 + 8 * v10);
      ++v3;
      if (!v11)
      {
        v3 = v10 + 1;
        if (v10 + 1 >= v30)
          goto LABEL_31;
        v11 = *(_QWORD *)(v29 + 8 * v3);
        if (!v11)
        {
          v3 = v10 + 2;
          if (v10 + 2 >= v30)
            goto LABEL_31;
          v11 = *(_QWORD *)(v29 + 8 * v3);
          if (!v11)
          {
            v12 = v10 + 3;
            if (v12 >= v30)
              goto LABEL_31;
            v11 = *(_QWORD *)(v29 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                v3 = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_35;
                if (v3 >= v30)
                  goto LABEL_31;
                v11 = *(_QWORD *)(v29 + 8 * v3);
                ++v12;
                if (v11)
                  goto LABEL_21;
              }
            }
            v3 = v12;
          }
        }
      }
LABEL_21:
      v6 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v3 << 6);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9);
    v14 = swift_bridgeObjectRetain();
    v15 = specialized static DUVectorUtils.normalized(vector:)(v14);
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    v19 = v1[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v1[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_36;
      v18 = v23;
    }
    if ((v22 & 1) != 0)
    {
      v7 = v1[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v7 + 8 * v18) = v15;
    }
    else
    {
      v1[(v18 >> 6) + 8] |= 1 << v18;
      *(_QWORD *)(v1[6] + 8 * v18) = v13;
      *(_QWORD *)(v1[7] + 8 * v18) = v15;
      v25 = v1[2];
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        goto LABEL_33;
      v1[2] = v27;
    }
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t DUEncodingModelOutput.lastPooledHiddenLayer()()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0);
  v2 = v1();
  v3 = specialized Sequence<>.max()(v2);
  v5 = v4;
  v6 = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    return MEMORY[0x24BEE4AF8];
  v7 = ((uint64_t (*)(uint64_t))v1)(v6);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t DUEncodingModelOutput.__allocating_init<A>(proto:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return DUEncodingModelOutput.init<A>(proto:)(a1, a2);
}

uint64_t specialized DUEncodingModelOutput.init<A>(proto:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  objc_class *v69;
  id v70;
  uint64_t result;
  int64_t v72;
  char *v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  objc_super v85;
  uint64_t v86[3];

  v3 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput(0);
  v79 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (int64_t *)((char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput)?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (int64_t *)((char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v11 = (int64_t *)((char *)&v72 - v10);
  v12 = type metadata accessor for DocumentUnderstanding_EncodingModelOutput(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (int64_t *)((char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_sequenceSize];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = (unint64_t *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_pooledHiddenLayerValues];
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v83 = v16;
  *v16 = v17;
  v74 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerValues] = 0;
  v76 = a1;
  outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(a1, (uint64_t)v14, type metadata accessor for DocumentUnderstanding_EncodingModelOutput);
  v18 = v14[1];
  v19 = &v1[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_modelName];
  *(_QWORD *)v19 = *v14;
  *((_QWORD *)v19 + 1) = v18;
  v20 = v14[3];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_hiddenLayerSize] = v14[2];
  *(_QWORD *)&v1[OBJC_IVAR____TtC21DocumentUnderstanding21DUEncodingModelOutput_nHiddenLayers] = v20;
  v21 = v14[4];
  swift_beginAccess();
  *(_QWORD *)v15 = v21;
  v15[8] = 0;
  v75 = v14;
  v22 = v14[5];
  v23 = *(_QWORD *)(v22 + 64);
  v77 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v78 = (unint64_t)(v24 + 63) >> 6;
  v72 = v78 - 1;
  v73 = v1;
  swift_bridgeObjectRetain();
  v80 = v22;
  swift_bridgeObjectRetain();
  v81 = 0;
  v27 = type metadata accessor for DocumentUnderstanding_HiddenLayerOutput;
  while (1)
  {
    if (v26)
    {
      v29 = __clz(__rbit64(v26));
      v30 = (v26 - 1) & v26;
      v31 = v29 | (v81 << 6);
LABEL_8:
      v32 = *(_QWORD *)(v80 + 56);
      *v9 = *(_QWORD *)(*(_QWORD *)(v80 + 48) + 8 * v31);
      v33 = v32 + *(_QWORD *)(v79 + 72) * v31;
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
      outlined init with copy of DocumentUnderstanding_ClientInterface_CalendarEvent(v33, (uint64_t)v9 + *(int *)(v34 + 48), v27);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v9, 0, 1, v34);
      goto LABEL_30;
    }
    v35 = v81 + 1;
    if (__OFADD__(v81, 1))
      goto LABEL_46;
    if (v35 < v78)
    {
      v36 = *(_QWORD *)(v77 + 8 * v35);
      if (v36)
        goto LABEL_12;
      v37 = v81 + 2;
      ++v81;
      if (v35 + 1 < v78)
      {
        v36 = *(_QWORD *)(v77 + 8 * v37);
        if (v36)
          goto LABEL_15;
        v81 = v35 + 1;
        if (v35 + 2 < v78)
        {
          v36 = *(_QWORD *)(v77 + 8 * (v35 + 2));
          if (v36)
          {
            v35 += 2;
LABEL_12:
            v30 = (v36 - 1) & v36;
            v31 = __clz(__rbit64(v36)) + (v35 << 6);
            v81 = v35;
            goto LABEL_8;
          }
          v81 = v35 + 2;
          if (v35 + 3 < v78)
          {
            v36 = *(_QWORD *)(v77 + 8 * (v35 + 3));
            if (v36)
            {
              v35 += 3;
              goto LABEL_12;
            }
            v37 = v35 + 4;
            v81 = v35 + 3;
            if (v35 + 4 < v78)
            {
              v36 = *(_QWORD *)(v77 + 8 * v37);
              if (!v36)
              {
                while (1)
                {
                  v35 = v37 + 1;
                  if (__OFADD__(v37, 1))
                    goto LABEL_47;
                  if (v35 >= v78)
                  {
                    v81 = v72;
                    goto LABEL_29;
                  }
                  v36 = *(_QWORD *)(v77 + 8 * v35);
                  ++v37;
                  if (v36)
                    goto LABEL_12;
                }
              }
LABEL_15:
              v35 = v37;
              goto LABEL_12;
            }
          }
        }
      }
    }
LABEL_29:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v9, 1, 1, v38);
    v30 = 0;
LABEL_30:
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput)?);
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int64, value: DocumentUnderstanding_HiddenLayerOutput));
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v11, 1, v39) == 1)
      break;
    v82 = v30;
    v40 = v9;
    v41 = *v11;
    v42 = v11;
    v43 = v27;
    outlined init with take of DocumentUnderstanding_ClientInterface_CalendarEvent((uint64_t)v11 + *(int *)(v39 + 48), (uint64_t)v5, v27);
    v44 = (uint64_t)v5;
    v45 = *v5;
    v46 = v83;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84 = (_QWORD *)*v46;
    v48 = v84;
    *v46 = 0x8000000000000000;
    v50 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
    v51 = v48[2];
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    v54 = v49;
    if (v48[3] >= v53)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, isUniquelyReferenced_nonNull_native);
      v55 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_48;
      v50 = v55;
    }
    v57 = v84;
    if ((v54 & 1) != 0)
    {
      v28 = v84[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v28 + 8 * v50) = v45;
    }
    else
    {
      v84[(v50 >> 6) + 8] |= 1 << v50;
      *(_QWORD *)(v57[6] + 8 * v50) = v41;
      *(_QWORD *)(v57[7] + 8 * v50) = v45;
      v58 = v57[2];
      v59 = __OFADD__(v58, 1);
      v60 = v58 + 1;
      if (v59)
        goto LABEL_45;
      v57[2] = v60;
    }
    *v83 = (unint64_t)v57;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v5 = (uint64_t *)v44;
    v27 = v43;
    outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v44, v43);
    v9 = v40;
    v11 = v42;
    v26 = v82;
  }
  swift_release();
  v61 = (uint64_t)v75;
  v62 = swift_bridgeObjectRetain();
  v63 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDys5Int64V21DocumentUnderstanding0eF18_HiddenLayerOutputVG_Si_SaySfGts5NeverOTg504_ss5d3V21e19Understanding0bC18_ghi40VSiSaySfGIgyndo_AB3key_AE5valuetSi_AFts5j105OIegnrzr_TR04_s21b30Understanding21DUEncodingModelf64C5protoACSgx_tc21InternalSwiftProtobuf7MessageRzlufcu1_pQ39Gts5a10V_AA0ab12_dE9E0VtXEfU_Tf3nnnpf_nTf1cn_n(v62);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v63 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Float]>);
    v64 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v64 = MEMORY[0x24BEE4B00];
  }
  v86[0] = v64;
  v65 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v65, 1, v86);
  swift_bridgeObjectRelease();
  v66 = v86[0];
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v61, type metadata accessor for DocumentUnderstanding_EncodingModelOutput);
  v67 = v74;
  swift_beginAccess();
  *v67 = v66;
  v68 = v73;

  swift_bridgeObjectRelease();
  v69 = (objc_class *)type metadata accessor for DUEncodingModelOutput();
  v85.receiver = v68;
  v85.super_class = v69;
  v70 = objc_msgSendSuper2(&v85, sel_init);
  outlined destroy of DocumentUnderstanding_ClientInterface_CalendarEvent(v76, type metadata accessor for DocumentUnderstanding_EncodingModelOutput);
  return (uint64_t)v70;
}

